<?php
/**
 * VpnCertificateCrlApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\CMDB;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Fortigate\FortiOS\ApiException;
use Fortigate\FortiOS\Configuration;
use Fortigate\FortiOS\HeaderSelector;
use Fortigate\FortiOS\ObjectSerializer;

/**
 * VpnCertificateCrlApi Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VpnCertificateCrlApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation vpnCertificateCrlGet
     *
     * Select all entries in a CLI table.  Access Group: vpngrp
     *
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  int $start Starting entry index. (optional)
     * @param  int $count Maximum number of entries to return. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $with_contents_hash Enable to include a checksum of each object&#39;s contents. (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string[] $filter Filtering multiple key/value pairs Operator     |   Description &#x3D;&#x3D;     |   Case insensitive match with pattern. !&#x3D;     |    Does not match with pattern (case insensitive). &#x3D;@     |    Pattern found in object value (case insensitive). !@     |    ﻿Pattern not﻿ found in object value (case insensitive). &lt;&#x3D;     |    Value must be less than or equal to ﻿pattern﻿. &lt;     |    Value must be less than pattern﻿. .&gt;&#x3D;    |    Value must be greater than or equal to ﻿pattern﻿. .&gt;     |    Value must be greater than ﻿pattern﻿. Logical OR    |    Separate filters using commas &#39;,&#39; Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request. Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters. (optional)
     * @param  string $key If present, objects will be filtered on property with this name. (optional)
     * @param  string $pattern If present, objects will be filtered on property with this value. (optional)
     * @param  string $scope Scope [global|vdom|both*] (optional)
     * @param  bool $exclude_default_values Exclude properties/objects with default value (optional)
     * @param  string $action default: Return the CLI default values for entire CLI tree. meta: Return meta data for a specific object, table, or the entire CLI tree. schema: Return schema for entire CLI tree. (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function vpnCertificateCrlGet($datasource = null, $start = null, $count = null, $with_meta = null, $with_contents_hash = null, $skip = null, $format = null, $filter = null, $key = null, $pattern = null, $scope = null, $exclude_default_values = null, $action = null, $vdom = null)
    {
        list($response) = $this->vpnCertificateCrlGetWithHttpInfo($datasource, $start, $count, $with_meta, $with_contents_hash, $skip, $format, $filter, $key, $pattern, $scope, $exclude_default_values, $action, $vdom);
        return $response;
    }

    /**
     * Operation vpnCertificateCrlGetWithHttpInfo
     *
     * Select all entries in a CLI table.  Access Group: vpngrp
     *
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  int $start Starting entry index. (optional)
     * @param  int $count Maximum number of entries to return. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $with_contents_hash Enable to include a checksum of each object&#39;s contents. (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string[] $filter Filtering multiple key/value pairs Operator     |   Description &#x3D;&#x3D;     |   Case insensitive match with pattern. !&#x3D;     |    Does not match with pattern (case insensitive). &#x3D;@     |    Pattern found in object value (case insensitive). !@     |    ﻿Pattern not﻿ found in object value (case insensitive). &lt;&#x3D;     |    Value must be less than or equal to ﻿pattern﻿. &lt;     |    Value must be less than pattern﻿. .&gt;&#x3D;    |    Value must be greater than or equal to ﻿pattern﻿. .&gt;     |    Value must be greater than ﻿pattern﻿. Logical OR    |    Separate filters using commas &#39;,&#39; Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request. Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters. (optional)
     * @param  string $key If present, objects will be filtered on property with this name. (optional)
     * @param  string $pattern If present, objects will be filtered on property with this value. (optional)
     * @param  string $scope Scope [global|vdom|both*] (optional)
     * @param  bool $exclude_default_values Exclude properties/objects with default value (optional)
     * @param  string $action default: Return the CLI default values for entire CLI tree. meta: Return meta data for a specific object, table, or the entire CLI tree. schema: Return schema for entire CLI tree. (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function vpnCertificateCrlGetWithHttpInfo($datasource = null, $start = null, $count = null, $with_meta = null, $with_contents_hash = null, $skip = null, $format = null, $filter = null, $key = null, $pattern = null, $scope = null, $exclude_default_values = null, $action = null, $vdom = null)
    {
        $request = $this->vpnCertificateCrlGetRequest($datasource, $start, $count, $with_meta, $with_contents_hash, $skip, $format, $filter, $key, $pattern, $scope, $exclude_default_values, $action, $vdom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vpnCertificateCrlGetAsync
     *
     * Select all entries in a CLI table.  Access Group: vpngrp
     *
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  int $start Starting entry index. (optional)
     * @param  int $count Maximum number of entries to return. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $with_contents_hash Enable to include a checksum of each object&#39;s contents. (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string[] $filter Filtering multiple key/value pairs Operator     |   Description &#x3D;&#x3D;     |   Case insensitive match with pattern. !&#x3D;     |    Does not match with pattern (case insensitive). &#x3D;@     |    Pattern found in object value (case insensitive). !@     |    ﻿Pattern not﻿ found in object value (case insensitive). &lt;&#x3D;     |    Value must be less than or equal to ﻿pattern﻿. &lt;     |    Value must be less than pattern﻿. .&gt;&#x3D;    |    Value must be greater than or equal to ﻿pattern﻿. .&gt;     |    Value must be greater than ﻿pattern﻿. Logical OR    |    Separate filters using commas &#39;,&#39; Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request. Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters. (optional)
     * @param  string $key If present, objects will be filtered on property with this name. (optional)
     * @param  string $pattern If present, objects will be filtered on property with this value. (optional)
     * @param  string $scope Scope [global|vdom|both*] (optional)
     * @param  bool $exclude_default_values Exclude properties/objects with default value (optional)
     * @param  string $action default: Return the CLI default values for entire CLI tree. meta: Return meta data for a specific object, table, or the entire CLI tree. schema: Return schema for entire CLI tree. (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlGetAsync($datasource = null, $start = null, $count = null, $with_meta = null, $with_contents_hash = null, $skip = null, $format = null, $filter = null, $key = null, $pattern = null, $scope = null, $exclude_default_values = null, $action = null, $vdom = null)
    {
        return $this->vpnCertificateCrlGetAsyncWithHttpInfo($datasource, $start, $count, $with_meta, $with_contents_hash, $skip, $format, $filter, $key, $pattern, $scope, $exclude_default_values, $action, $vdom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vpnCertificateCrlGetAsyncWithHttpInfo
     *
     * Select all entries in a CLI table.  Access Group: vpngrp
     *
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  int $start Starting entry index. (optional)
     * @param  int $count Maximum number of entries to return. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $with_contents_hash Enable to include a checksum of each object&#39;s contents. (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string[] $filter Filtering multiple key/value pairs Operator     |   Description &#x3D;&#x3D;     |   Case insensitive match with pattern. !&#x3D;     |    Does not match with pattern (case insensitive). &#x3D;@     |    Pattern found in object value (case insensitive). !@     |    ﻿Pattern not﻿ found in object value (case insensitive). &lt;&#x3D;     |    Value must be less than or equal to ﻿pattern﻿. &lt;     |    Value must be less than pattern﻿. .&gt;&#x3D;    |    Value must be greater than or equal to ﻿pattern﻿. .&gt;     |    Value must be greater than ﻿pattern﻿. Logical OR    |    Separate filters using commas &#39;,&#39; Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request. Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters. (optional)
     * @param  string $key If present, objects will be filtered on property with this name. (optional)
     * @param  string $pattern If present, objects will be filtered on property with this value. (optional)
     * @param  string $scope Scope [global|vdom|both*] (optional)
     * @param  bool $exclude_default_values Exclude properties/objects with default value (optional)
     * @param  string $action default: Return the CLI default values for entire CLI tree. meta: Return meta data for a specific object, table, or the entire CLI tree. schema: Return schema for entire CLI tree. (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlGetAsyncWithHttpInfo($datasource = null, $start = null, $count = null, $with_meta = null, $with_contents_hash = null, $skip = null, $format = null, $filter = null, $key = null, $pattern = null, $scope = null, $exclude_default_values = null, $action = null, $vdom = null)
    {
        $returnType = 'object';
        $request = $this->vpnCertificateCrlGetRequest($datasource, $start, $count, $with_meta, $with_contents_hash, $skip, $format, $filter, $key, $pattern, $scope, $exclude_default_values, $action, $vdom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vpnCertificateCrlGet'
     *
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  int $start Starting entry index. (optional)
     * @param  int $count Maximum number of entries to return. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $with_contents_hash Enable to include a checksum of each object&#39;s contents. (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string[] $filter Filtering multiple key/value pairs Operator     |   Description &#x3D;&#x3D;     |   Case insensitive match with pattern. !&#x3D;     |    Does not match with pattern (case insensitive). &#x3D;@     |    Pattern found in object value (case insensitive). !@     |    ﻿Pattern not﻿ found in object value (case insensitive). &lt;&#x3D;     |    Value must be less than or equal to ﻿pattern﻿. &lt;     |    Value must be less than pattern﻿. .&gt;&#x3D;    |    Value must be greater than or equal to ﻿pattern﻿. .&gt;     |    Value must be greater than ﻿pattern﻿. Logical OR    |    Separate filters using commas &#39;,&#39; Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request. Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters. (optional)
     * @param  string $key If present, objects will be filtered on property with this name. (optional)
     * @param  string $pattern If present, objects will be filtered on property with this value. (optional)
     * @param  string $scope Scope [global|vdom|both*] (optional)
     * @param  bool $exclude_default_values Exclude properties/objects with default value (optional)
     * @param  string $action default: Return the CLI default values for entire CLI tree. meta: Return meta data for a specific object, table, or the entire CLI tree. schema: Return schema for entire CLI tree. (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function vpnCertificateCrlGetRequest($datasource = null, $start = null, $count = null, $with_meta = null, $with_contents_hash = null, $skip = null, $format = null, $filter = null, $key = null, $pattern = null, $scope = null, $exclude_default_values = null, $action = null, $vdom = null)
    {

        $resourcePath = '/vpn.certificate/crl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($datasource)) {
            $datasource = ObjectSerializer::serializeCollection($datasource, '', true);
        }
        if ($datasource !== null) {
            $queryParams['datasource'] = $datasource;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($count)) {
            $count = ObjectSerializer::serializeCollection($count, '', true);
        }
        if ($count !== null) {
            $queryParams['count'] = $count;
        }
        // query params
        if (is_array($with_meta)) {
            $with_meta = ObjectSerializer::serializeCollection($with_meta, '', true);
        }
        if ($with_meta !== null) {
            $queryParams['with_meta'] = $with_meta;
        }
        // query params
        if (is_array($with_contents_hash)) {
            $with_contents_hash = ObjectSerializer::serializeCollection($with_contents_hash, '', true);
        }
        if ($with_contents_hash !== null) {
            $queryParams['with_contents_hash'] = $with_contents_hash;
        }
        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['skip'] = $skip;
        }
        // query params
        if (is_array($format)) {
            $format = ObjectSerializer::serializeCollection($format, 'pipeDelimited', true);
        }
        if ($format !== null) {
            $queryParams['format'] = $format;
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter'] = $filter;
            }
        }
        // query params
        if (is_array($key)) {
            $key = ObjectSerializer::serializeCollection($key, '', true);
        }
        if ($key !== null) {
            $queryParams['key'] = $key;
        }
        // query params
        if (is_array($pattern)) {
            $pattern = ObjectSerializer::serializeCollection($pattern, '', true);
        }
        if ($pattern !== null) {
            $queryParams['pattern'] = $pattern;
        }
        // query params
        if (is_array($scope)) {
            $scope = ObjectSerializer::serializeCollection($scope, '', true);
        }
        if ($scope !== null) {
            $queryParams['scope'] = $scope;
        }
        // query params
        if (is_array($exclude_default_values)) {
            $exclude_default_values = ObjectSerializer::serializeCollection($exclude_default_values, '', true);
        }
        if ($exclude_default_values !== null) {
            $queryParams['exclude-default-values'] = $exclude_default_values;
        }
        // query params
        if (is_array($action)) {
            $action = ObjectSerializer::serializeCollection($action, '', true);
        }
        if ($action !== null) {
            $queryParams['action'] = $action;
        }
        // query params
        if (is_array($vdom)) {
            $vdom = ObjectSerializer::serializeCollection($vdom, 'form', true);
        }
        if ($vdom !== null) {
            $queryParams['vdom'] = $vdom;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vpnCertificateCrlNameDelete
     *
     * Delete this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vpnCertificateCrlNameDelete($name, $vdom = null)
    {
        $this->vpnCertificateCrlNameDeleteWithHttpInfo($name, $vdom);
    }

    /**
     * Operation vpnCertificateCrlNameDeleteWithHttpInfo
     *
     * Delete this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vpnCertificateCrlNameDeleteWithHttpInfo($name, $vdom = null)
    {
        $request = $this->vpnCertificateCrlNameDeleteRequest($name, $vdom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vpnCertificateCrlNameDeleteAsync
     *
     * Delete this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNameDeleteAsync($name, $vdom = null)
    {
        return $this->vpnCertificateCrlNameDeleteAsyncWithHttpInfo($name, $vdom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vpnCertificateCrlNameDeleteAsyncWithHttpInfo
     *
     * Delete this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNameDeleteAsyncWithHttpInfo($name, $vdom = null)
    {
        $returnType = '';
        $request = $this->vpnCertificateCrlNameDeleteRequest($name, $vdom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vpnCertificateCrlNameDelete'
     *
     * @param  string $name mkey (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function vpnCertificateCrlNameDeleteRequest($name, $vdom = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling vpnCertificateCrlNameDelete'
            );
        }

        $resourcePath = '/vpn.certificate/crl/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($vdom)) {
            $vdom = ObjectSerializer::serializeCollection($vdom, 'form', true);
        }
        if ($vdom !== null) {
            $queryParams['vdom'] = $vdom;
        }


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vpnCertificateCrlNameGet
     *
     * Select a specific entry from a CLI table.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string $action default: Return the CLI default values for this object type. schema: Return the CLI schema for this object type. revision: Return the CMDB revision for this object type. transaction-list: List all configuration transaction(s). (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function vpnCertificateCrlNameGet($name, $datasource = null, $with_meta = null, $skip = null, $format = null, $action = null, $vdom = null)
    {
        list($response) = $this->vpnCertificateCrlNameGetWithHttpInfo($name, $datasource, $with_meta, $skip, $format, $action, $vdom);
        return $response;
    }

    /**
     * Operation vpnCertificateCrlNameGetWithHttpInfo
     *
     * Select a specific entry from a CLI table.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string $action default: Return the CLI default values for this object type. schema: Return the CLI schema for this object type. revision: Return the CMDB revision for this object type. transaction-list: List all configuration transaction(s). (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function vpnCertificateCrlNameGetWithHttpInfo($name, $datasource = null, $with_meta = null, $skip = null, $format = null, $action = null, $vdom = null)
    {
        $request = $this->vpnCertificateCrlNameGetRequest($name, $datasource, $with_meta, $skip, $format, $action, $vdom);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vpnCertificateCrlNameGetAsync
     *
     * Select a specific entry from a CLI table.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string $action default: Return the CLI default values for this object type. schema: Return the CLI schema for this object type. revision: Return the CMDB revision for this object type. transaction-list: List all configuration transaction(s). (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNameGetAsync($name, $datasource = null, $with_meta = null, $skip = null, $format = null, $action = null, $vdom = null)
    {
        return $this->vpnCertificateCrlNameGetAsyncWithHttpInfo($name, $datasource, $with_meta, $skip, $format, $action, $vdom)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vpnCertificateCrlNameGetAsyncWithHttpInfo
     *
     * Select a specific entry from a CLI table.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string $action default: Return the CLI default values for this object type. schema: Return the CLI schema for this object type. revision: Return the CMDB revision for this object type. transaction-list: List all configuration transaction(s). (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNameGetAsyncWithHttpInfo($name, $datasource = null, $with_meta = null, $skip = null, $format = null, $action = null, $vdom = null)
    {
        $returnType = 'object';
        $request = $this->vpnCertificateCrlNameGetRequest($name, $datasource, $with_meta, $skip, $format, $action, $vdom);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vpnCertificateCrlNameGet'
     *
     * @param  string $name mkey (required)
     * @param  bool $datasource Enable to include datasource information for each linked object. (optional)
     * @param  bool $with_meta Enable to include meta information about each object (type id, references, etc). (optional)
     * @param  bool $skip Enable to call CLI skip operator to hide skipped properties. (optional)
     * @param  string[] $format List of property names to include in results, separated by | (i.e. policyid|srcintf). (optional)
     * @param  string $action default: Return the CLI default values for this object type. schema: Return the CLI schema for this object type. revision: Return the CMDB revision for this object type. transaction-list: List all configuration transaction(s). (optional)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function vpnCertificateCrlNameGetRequest($name, $datasource = null, $with_meta = null, $skip = null, $format = null, $action = null, $vdom = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling vpnCertificateCrlNameGet'
            );
        }

        $resourcePath = '/vpn.certificate/crl/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($datasource)) {
            $datasource = ObjectSerializer::serializeCollection($datasource, '', true);
        }
        if ($datasource !== null) {
            $queryParams['datasource'] = $datasource;
        }
        // query params
        if (is_array($with_meta)) {
            $with_meta = ObjectSerializer::serializeCollection($with_meta, '', true);
        }
        if ($with_meta !== null) {
            $queryParams['with_meta'] = $with_meta;
        }
        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['skip'] = $skip;
        }
        // query params
        if (is_array($format)) {
            $format = ObjectSerializer::serializeCollection($format, 'pipeDelimited', true);
        }
        if ($format !== null) {
            $queryParams['format'] = $format;
        }
        // query params
        if (is_array($action)) {
            $action = ObjectSerializer::serializeCollection($action, '', true);
        }
        if ($action !== null) {
            $queryParams['action'] = $action;
        }
        // query params
        if (is_array($vdom)) {
            $vdom = ObjectSerializer::serializeCollection($vdom, 'form', true);
        }
        if ($vdom !== null) {
            $queryParams['vdom'] = $vdom;
        }


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vpnCertificateCrlNamePut
     *
     * Update this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject460 $body body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _move_: Move this specific resource. When *action&#x3D;move* is set, one of the extra parameters (*before*, *after*) must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $before If *action&#x3D;move*, use *before* to specify the ID of the resource that this resource will be moved before. For example, to move &#x60;object 1&#x60; to before &#x60;object 2&#x60;, use: __action&#x3D;move&amp;before&#x3D;2__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     * @param  string $after If *action&#x3D;move*, use *after* to specify the ID of the resource that this resource will be moved after. For example, to move &#x60;object 1&#x60; to after &#x60;object 3&#x60;, use: __action&#x3D;move&amp;after&#x3D;3__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vpnCertificateCrlNamePut($name, $body, $vdom = null, $action = null, $before = null, $after = null)
    {
        $this->vpnCertificateCrlNamePutWithHttpInfo($name, $body, $vdom, $action, $before, $after);
    }

    /**
     * Operation vpnCertificateCrlNamePutWithHttpInfo
     *
     * Update this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject460 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _move_: Move this specific resource. When *action&#x3D;move* is set, one of the extra parameters (*before*, *after*) must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $before If *action&#x3D;move*, use *before* to specify the ID of the resource that this resource will be moved before. For example, to move &#x60;object 1&#x60; to before &#x60;object 2&#x60;, use: __action&#x3D;move&amp;before&#x3D;2__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     * @param  string $after If *action&#x3D;move*, use *after* to specify the ID of the resource that this resource will be moved after. For example, to move &#x60;object 1&#x60; to after &#x60;object 3&#x60;, use: __action&#x3D;move&amp;after&#x3D;3__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vpnCertificateCrlNamePutWithHttpInfo($name, $body, $vdom = null, $action = null, $before = null, $after = null)
    {
        $request = $this->vpnCertificateCrlNamePutRequest($name, $body, $vdom, $action, $before, $after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vpnCertificateCrlNamePutAsync
     *
     * Update this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject460 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _move_: Move this specific resource. When *action&#x3D;move* is set, one of the extra parameters (*before*, *after*) must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $before If *action&#x3D;move*, use *before* to specify the ID of the resource that this resource will be moved before. For example, to move &#x60;object 1&#x60; to before &#x60;object 2&#x60;, use: __action&#x3D;move&amp;before&#x3D;2__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     * @param  string $after If *action&#x3D;move*, use *after* to specify the ID of the resource that this resource will be moved after. For example, to move &#x60;object 1&#x60; to after &#x60;object 3&#x60;, use: __action&#x3D;move&amp;after&#x3D;3__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNamePutAsync($name, $body, $vdom = null, $action = null, $before = null, $after = null)
    {
        return $this->vpnCertificateCrlNamePutAsyncWithHttpInfo($name, $body, $vdom, $action, $before, $after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vpnCertificateCrlNamePutAsyncWithHttpInfo
     *
     * Update this specific resource.  Access Group: vpngrp
     *
     * @param  string $name mkey (required)
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject460 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _move_: Move this specific resource. When *action&#x3D;move* is set, one of the extra parameters (*before*, *after*) must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $before If *action&#x3D;move*, use *before* to specify the ID of the resource that this resource will be moved before. For example, to move &#x60;object 1&#x60; to before &#x60;object 2&#x60;, use: __action&#x3D;move&amp;before&#x3D;2__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     * @param  string $after If *action&#x3D;move*, use *after* to specify the ID of the resource that this resource will be moved after. For example, to move &#x60;object 1&#x60; to after &#x60;object 3&#x60;, use: __action&#x3D;move&amp;after&#x3D;3__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlNamePutAsyncWithHttpInfo($name, $body, $vdom = null, $action = null, $before = null, $after = null)
    {
        $returnType = '';
        $request = $this->vpnCertificateCrlNamePutRequest($name, $body, $vdom, $action, $before, $after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vpnCertificateCrlNamePut'
     *
     * @param  string $name mkey (required)
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject460 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _move_: Move this specific resource. When *action&#x3D;move* is set, one of the extra parameters (*before*, *after*) must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $before If *action&#x3D;move*, use *before* to specify the ID of the resource that this resource will be moved before. For example, to move &#x60;object 1&#x60; to before &#x60;object 2&#x60;, use: __action&#x3D;move&amp;before&#x3D;2__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     * @param  string $after If *action&#x3D;move*, use *after* to specify the ID of the resource that this resource will be moved after. For example, to move &#x60;object 1&#x60; to after &#x60;object 3&#x60;, use: __action&#x3D;move&amp;after&#x3D;3__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function vpnCertificateCrlNamePutRequest($name, $body, $vdom = null, $action = null, $before = null, $after = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling vpnCertificateCrlNamePut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling vpnCertificateCrlNamePut'
            );
        }

        $resourcePath = '/vpn.certificate/crl/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($vdom)) {
            $vdom = ObjectSerializer::serializeCollection($vdom, 'form', true);
        }
        if ($vdom !== null) {
            $queryParams['vdom'] = $vdom;
        }
        // query params
        if (is_array($action)) {
            $action = ObjectSerializer::serializeCollection($action, '', true);
        }
        if ($action !== null) {
            $queryParams['action'] = $action;
        }
        // query params
        if (is_array($before)) {
            $before = ObjectSerializer::serializeCollection($before, '', true);
        }
        if ($before !== null) {
            $queryParams['before'] = $before;
        }
        // query params
        if (is_array($after)) {
            $after = ObjectSerializer::serializeCollection($after, '', true);
        }
        if ($after !== null) {
            $queryParams['after'] = $after;
        }


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vpnCertificateCrlPost
     *
     * Create object(s) in this table.  Access Group: vpngrp
     *
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject461 $body body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _clone_: Clone this specific resource. When *action&#x3D;clone* is set, the extra parameters *nkey* must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $nkey If *action&#x3D;clone*, use *nkey* to specify the ID for the new resource to be created. For example, to clone &#x60;address1&#x60; to &#x60;address1_clone&#x60;, use: __action&#x3D;clone&amp;nkey&#x3D;address1_clone__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*. (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vpnCertificateCrlPost($body, $vdom = null, $action = null, $nkey = null)
    {
        $this->vpnCertificateCrlPostWithHttpInfo($body, $vdom, $action, $nkey);
    }

    /**
     * Operation vpnCertificateCrlPostWithHttpInfo
     *
     * Create object(s) in this table.  Access Group: vpngrp
     *
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject461 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _clone_: Clone this specific resource. When *action&#x3D;clone* is set, the extra parameters *nkey* must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $nkey If *action&#x3D;clone*, use *nkey* to specify the ID for the new resource to be created. For example, to clone &#x60;address1&#x60; to &#x60;address1_clone&#x60;, use: __action&#x3D;clone&amp;nkey&#x3D;address1_clone__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*. (optional)
     *
     * @throws \Fortigate\FortiOS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vpnCertificateCrlPostWithHttpInfo($body, $vdom = null, $action = null, $nkey = null)
    {
        $request = $this->vpnCertificateCrlPostRequest($body, $vdom, $action, $nkey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vpnCertificateCrlPostAsync
     *
     * Create object(s) in this table.  Access Group: vpngrp
     *
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject461 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _clone_: Clone this specific resource. When *action&#x3D;clone* is set, the extra parameters *nkey* must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $nkey If *action&#x3D;clone*, use *nkey* to specify the ID for the new resource to be created. For example, to clone &#x60;address1&#x60; to &#x60;address1_clone&#x60;, use: __action&#x3D;clone&amp;nkey&#x3D;address1_clone__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlPostAsync($body, $vdom = null, $action = null, $nkey = null)
    {
        return $this->vpnCertificateCrlPostAsyncWithHttpInfo($body, $vdom, $action, $nkey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vpnCertificateCrlPostAsyncWithHttpInfo
     *
     * Create object(s) in this table.  Access Group: vpngrp
     *
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject461 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _clone_: Clone this specific resource. When *action&#x3D;clone* is set, the extra parameters *nkey* must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $nkey If *action&#x3D;clone*, use *nkey* to specify the ID for the new resource to be created. For example, to clone &#x60;address1&#x60; to &#x60;address1_clone&#x60;, use: __action&#x3D;clone&amp;nkey&#x3D;address1_clone__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vpnCertificateCrlPostAsyncWithHttpInfo($body, $vdom = null, $action = null, $nkey = null)
    {
        $returnType = '';
        $request = $this->vpnCertificateCrlPostRequest($body, $vdom, $action, $nkey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vpnCertificateCrlPost'
     *
     * @param  \Fortigate\FortiOS\Model\CMDB\InlineObject461 $body (required)
     * @param  string[] $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned. The URL parameter is one of: vdom&#x3D;root (Single VDOM) vdom&#x3D;vdom1,vdom2 (Multiple VDOMs) vdom&#x3D;* (All VDOMs) (optional)
     * @param  string $action If supported, an action can be specified. _clone_: Clone this specific resource. When *action&#x3D;clone* is set, the extra parameters *nkey* must be provided. __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned. (optional)
     * @param  string $nkey If *action&#x3D;clone*, use *nkey* to specify the ID for the new resource to be created. For example, to clone &#x60;address1&#x60; to &#x60;address1_clone&#x60;, use: __action&#x3D;clone&amp;nkey&#x3D;address1_clone__ __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function vpnCertificateCrlPostRequest($body, $vdom = null, $action = null, $nkey = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling vpnCertificateCrlPost'
            );
        }

        $resourcePath = '/vpn.certificate/crl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($vdom)) {
            $vdom = ObjectSerializer::serializeCollection($vdom, 'form', true);
        }
        if ($vdom !== null) {
            $queryParams['vdom'] = $vdom;
        }
        // query params
        if (is_array($action)) {
            $action = ObjectSerializer::serializeCollection($action, '', true);
        }
        if ($action !== null) {
            $queryParams['action'] = $action;
        }
        // query params
        if (is_array($nkey)) {
            $nkey = ObjectSerializer::serializeCollection($nkey, '', true);
        }
        if ($nkey !== null) {
            $queryParams['nkey'] = $nkey;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
