<?php
/**
 * InlineObject80
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject80 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject80 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_80';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'replacemsg_group' => 'string',
        'block_malicious_url' => 'string',
        'scan_botnet_connections' => 'string',
        'extended_log' => 'string',
        'entries' => '\Fortigate\FortiOS\Model\CMDB\IpsSensorNameEntries[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'replacemsg_group' => null,
        'block_malicious_url' => null,
        'scan_botnet_connections' => null,
        'extended_log' => null,
        'entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'replacemsg_group' => 'replacemsg-group',
        'block_malicious_url' => 'block-malicious-url',
        'scan_botnet_connections' => 'scan-botnet-connections',
        'extended_log' => 'extended-log',
        'entries' => 'entries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'replacemsg_group' => 'setReplacemsgGroup',
        'block_malicious_url' => 'setBlockMaliciousUrl',
        'scan_botnet_connections' => 'setScanBotnetConnections',
        'extended_log' => 'setExtendedLog',
        'entries' => 'setEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'replacemsg_group' => 'getReplacemsgGroup',
        'block_malicious_url' => 'getBlockMaliciousUrl',
        'scan_botnet_connections' => 'getScanBotnetConnections',
        'extended_log' => 'getExtendedLog',
        'entries' => 'getEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BLOCK_MALICIOUS_URL_DISABLE = 'disable';
    const BLOCK_MALICIOUS_URL_ENABLE = 'enable';
    const SCAN_BOTNET_CONNECTIONS_DISABLE = 'disable';
    const SCAN_BOTNET_CONNECTIONS_BLOCK = 'block';
    const SCAN_BOTNET_CONNECTIONS_MONITOR = 'monitor';
    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockMaliciousUrlAllowableValues()
    {
        return [
            self::BLOCK_MALICIOUS_URL_DISABLE,
            self::BLOCK_MALICIOUS_URL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanBotnetConnectionsAllowableValues()
    {
        return [
            self::SCAN_BOTNET_CONNECTIONS_DISABLE,
            self::SCAN_BOTNET_CONNECTIONS_BLOCK,
            self::SCAN_BOTNET_CONNECTIONS_MONITOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['block_malicious_url'] = $data['block_malicious_url'] ?? null;
        $this->container['scan_botnet_connections'] = $data['scan_botnet_connections'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['entries'] = $data['entries'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getBlockMaliciousUrlAllowableValues();
        if (!is_null($this->container['block_malicious_url']) && !in_array($this->container['block_malicious_url'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_malicious_url', must be one of '%s'",
                $this->container['block_malicious_url'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScanBotnetConnectionsAllowableValues();
        if (!is_null($this->container['scan_botnet_connections']) && !in_array($this->container['scan_botnet_connections'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scan_botnet_connections', must be one of '%s'",
                $this->container['scan_botnet_connections'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['entries']) && (count($this->container['entries']) > 0)) {
            $invalidProperties[] = "invalid value for 'entries', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Sensor name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject80., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject80., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject80., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets block_malicious_url
     *
     * @return string|null
     */
    public function getBlockMaliciousUrl()
    {
        return $this->container['block_malicious_url'];
    }

    /**
     * Sets block_malicious_url
     *
     * @param string|null $block_malicious_url Enable/disable malicious URL blocking.    disable:Disable malicious URL blocking.    enable:Enable malicious URL blocking.
     *
     * @return self
     */
    public function setBlockMaliciousUrl($block_malicious_url)
    {
        $allowedValues = $this->getBlockMaliciousUrlAllowableValues();
        if (!is_null($block_malicious_url) && !in_array($block_malicious_url, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_malicious_url', must be one of '%s'",
                    $block_malicious_url,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_malicious_url'] = $block_malicious_url;

        return $this;
    }

    /**
     * Gets scan_botnet_connections
     *
     * @return string|null
     */
    public function getScanBotnetConnections()
    {
        return $this->container['scan_botnet_connections'];
    }

    /**
     * Sets scan_botnet_connections
     *
     * @param string|null $scan_botnet_connections Block or monitor connections to Botnet servers, or disable Botnet scanning.    disable:Do not scan connections to botnet servers.    block:Block connections to botnet servers.    monitor:Log connections to botnet servers.
     *
     * @return self
     */
    public function setScanBotnetConnections($scan_botnet_connections)
    {
        $allowedValues = $this->getScanBotnetConnectionsAllowableValues();
        if (!is_null($scan_botnet_connections) && !in_array($scan_botnet_connections, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scan_botnet_connections', must be one of '%s'",
                    $scan_botnet_connections,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_botnet_connections'] = $scan_botnet_connections;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return \Fortigate\FortiOS\Model\CMDB\IpsSensorNameEntries[]|null
     */
    public function getEntries()
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param \Fortigate\FortiOS\Model\CMDB\IpsSensorNameEntries[]|null $entries IPS sensor filter.
     *
     * @return self
     */
    public function setEntries($entries)
    {

        if (!is_null($entries) && (count($entries) > 0)) {
            throw new \InvalidArgumentException('invalid value for $entries when calling InlineObject80., number of items must be less than or equal to 0.');
        }
        $this->container['entries'] = $entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


