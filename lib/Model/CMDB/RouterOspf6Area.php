<?php
/**
 * RouterOspf6Area
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterOspf6Area Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterOspf6Area implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_ospf6_area';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'default_cost' => 'int',
        'nssa_translator_role' => 'string',
        'stub_type' => 'string',
        'type' => 'string',
        'nssa_default_information_originate' => 'string',
        'nssa_default_information_originate_metric' => 'int',
        'nssa_default_information_originate_metric_type' => 'string',
        'nssa_redistribution' => 'string',
        'authentication' => 'string',
        'key_rollover_interval' => 'int',
        'ipsec_auth_alg' => 'string',
        'ipsec_enc_alg' => 'string',
        'ipsec_keys' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]',
        'range' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6Range[]',
        'virtual_link' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6VirtualLink[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'ipv4',
        'default_cost' => null,
        'nssa_translator_role' => null,
        'stub_type' => null,
        'type' => null,
        'nssa_default_information_originate' => null,
        'nssa_default_information_originate_metric' => null,
        'nssa_default_information_originate_metric_type' => null,
        'nssa_redistribution' => null,
        'authentication' => null,
        'key_rollover_interval' => null,
        'ipsec_auth_alg' => null,
        'ipsec_enc_alg' => null,
        'ipsec_keys' => null,
        'range' => null,
        'virtual_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'default_cost' => 'default-cost',
        'nssa_translator_role' => 'nssa-translator-role',
        'stub_type' => 'stub-type',
        'type' => 'type',
        'nssa_default_information_originate' => 'nssa-default-information-originate',
        'nssa_default_information_originate_metric' => 'nssa-default-information-originate-metric',
        'nssa_default_information_originate_metric_type' => 'nssa-default-information-originate-metric-type',
        'nssa_redistribution' => 'nssa-redistribution',
        'authentication' => 'authentication',
        'key_rollover_interval' => 'key-rollover-interval',
        'ipsec_auth_alg' => 'ipsec-auth-alg',
        'ipsec_enc_alg' => 'ipsec-enc-alg',
        'ipsec_keys' => 'ipsec-keys',
        'range' => 'range',
        'virtual_link' => 'virtual-link'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'default_cost' => 'setDefaultCost',
        'nssa_translator_role' => 'setNssaTranslatorRole',
        'stub_type' => 'setStubType',
        'type' => 'setType',
        'nssa_default_information_originate' => 'setNssaDefaultInformationOriginate',
        'nssa_default_information_originate_metric' => 'setNssaDefaultInformationOriginateMetric',
        'nssa_default_information_originate_metric_type' => 'setNssaDefaultInformationOriginateMetricType',
        'nssa_redistribution' => 'setNssaRedistribution',
        'authentication' => 'setAuthentication',
        'key_rollover_interval' => 'setKeyRolloverInterval',
        'ipsec_auth_alg' => 'setIpsecAuthAlg',
        'ipsec_enc_alg' => 'setIpsecEncAlg',
        'ipsec_keys' => 'setIpsecKeys',
        'range' => 'setRange',
        'virtual_link' => 'setVirtualLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'default_cost' => 'getDefaultCost',
        'nssa_translator_role' => 'getNssaTranslatorRole',
        'stub_type' => 'getStubType',
        'type' => 'getType',
        'nssa_default_information_originate' => 'getNssaDefaultInformationOriginate',
        'nssa_default_information_originate_metric' => 'getNssaDefaultInformationOriginateMetric',
        'nssa_default_information_originate_metric_type' => 'getNssaDefaultInformationOriginateMetricType',
        'nssa_redistribution' => 'getNssaRedistribution',
        'authentication' => 'getAuthentication',
        'key_rollover_interval' => 'getKeyRolloverInterval',
        'ipsec_auth_alg' => 'getIpsecAuthAlg',
        'ipsec_enc_alg' => 'getIpsecEncAlg',
        'ipsec_keys' => 'getIpsecKeys',
        'range' => 'getRange',
        'virtual_link' => 'getVirtualLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NSSA_TRANSLATOR_ROLE_CANDIDATE = 'candidate';
    const NSSA_TRANSLATOR_ROLE_NEVER = 'never';
    const NSSA_TRANSLATOR_ROLE_ALWAYS = 'always';
    const STUB_TYPE_NO_SUMMARY = 'no-summary';
    const STUB_TYPE_SUMMARY = 'summary';
    const TYPE_REGULAR = 'regular';
    const TYPE_NSSA = 'nssa';
    const TYPE_STUB = 'stub';
    const NSSA_DEFAULT_INFORMATION_ORIGINATE_ENABLE = 'enable';
    const NSSA_DEFAULT_INFORMATION_ORIGINATE_DISABLE = 'disable';
    const NSSA_DEFAULT_INFORMATION_ORIGINATE_METRIC_TYPE__1 = '1';
    const NSSA_DEFAULT_INFORMATION_ORIGINATE_METRIC_TYPE__2 = '2';
    const NSSA_REDISTRIBUTION_ENABLE = 'enable';
    const NSSA_REDISTRIBUTION_DISABLE = 'disable';
    const AUTHENTICATION_NONE = 'none';
    const AUTHENTICATION_AH = 'ah';
    const AUTHENTICATION_ESP = 'esp';
    const IPSEC_AUTH_ALG_MD5 = 'md5';
    const IPSEC_AUTH_ALG_SHA1 = 'sha1';
    const IPSEC_AUTH_ALG_SHA256 = 'sha256';
    const IPSEC_AUTH_ALG_SHA384 = 'sha384';
    const IPSEC_AUTH_ALG_SHA512 = 'sha512';
    const IPSEC_ENC_ALG_NULL = 'null';
    const IPSEC_ENC_ALG_DES = 'des';
    const IPSEC_ENC_ALG__3DES = '3des';
    const IPSEC_ENC_ALG_AES128 = 'aes128';
    const IPSEC_ENC_ALG_AES192 = 'aes192';
    const IPSEC_ENC_ALG_AES256 = 'aes256';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNssaTranslatorRoleAllowableValues()
    {
        return [
            self::NSSA_TRANSLATOR_ROLE_CANDIDATE,
            self::NSSA_TRANSLATOR_ROLE_NEVER,
            self::NSSA_TRANSLATOR_ROLE_ALWAYS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStubTypeAllowableValues()
    {
        return [
            self::STUB_TYPE_NO_SUMMARY,
            self::STUB_TYPE_SUMMARY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REGULAR,
            self::TYPE_NSSA,
            self::TYPE_STUB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNssaDefaultInformationOriginateAllowableValues()
    {
        return [
            self::NSSA_DEFAULT_INFORMATION_ORIGINATE_ENABLE,
            self::NSSA_DEFAULT_INFORMATION_ORIGINATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNssaDefaultInformationOriginateMetricTypeAllowableValues()
    {
        return [
            self::NSSA_DEFAULT_INFORMATION_ORIGINATE_METRIC_TYPE__1,
            self::NSSA_DEFAULT_INFORMATION_ORIGINATE_METRIC_TYPE__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNssaRedistributionAllowableValues()
    {
        return [
            self::NSSA_REDISTRIBUTION_ENABLE,
            self::NSSA_REDISTRIBUTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_NONE,
            self::AUTHENTICATION_AH,
            self::AUTHENTICATION_ESP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecAuthAlgAllowableValues()
    {
        return [
            self::IPSEC_AUTH_ALG_MD5,
            self::IPSEC_AUTH_ALG_SHA1,
            self::IPSEC_AUTH_ALG_SHA256,
            self::IPSEC_AUTH_ALG_SHA384,
            self::IPSEC_AUTH_ALG_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecEncAlgAllowableValues()
    {
        return [
            self::IPSEC_ENC_ALG_NULL,
            self::IPSEC_ENC_ALG_DES,
            self::IPSEC_ENC_ALG__3DES,
            self::IPSEC_ENC_ALG_AES128,
            self::IPSEC_ENC_ALG_AES192,
            self::IPSEC_ENC_ALG_AES256,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['default_cost'] = $data['default_cost'] ?? null;
        $this->container['nssa_translator_role'] = $data['nssa_translator_role'] ?? null;
        $this->container['stub_type'] = $data['stub_type'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['nssa_default_information_originate'] = $data['nssa_default_information_originate'] ?? null;
        $this->container['nssa_default_information_originate_metric'] = $data['nssa_default_information_originate_metric'] ?? null;
        $this->container['nssa_default_information_originate_metric_type'] = $data['nssa_default_information_originate_metric_type'] ?? null;
        $this->container['nssa_redistribution'] = $data['nssa_redistribution'] ?? null;
        $this->container['authentication'] = $data['authentication'] ?? null;
        $this->container['key_rollover_interval'] = $data['key_rollover_interval'] ?? null;
        $this->container['ipsec_auth_alg'] = $data['ipsec_auth_alg'] ?? null;
        $this->container['ipsec_enc_alg'] = $data['ipsec_enc_alg'] ?? null;
        $this->container['ipsec_keys'] = $data['ipsec_keys'] ?? null;
        $this->container['range'] = $data['range'] ?? null;
        $this->container['virtual_link'] = $data['virtual_link'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['default_cost']) && ($this->container['default_cost'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'default_cost', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['default_cost']) && ($this->container['default_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'default_cost', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNssaTranslatorRoleAllowableValues();
        if (!is_null($this->container['nssa_translator_role']) && !in_array($this->container['nssa_translator_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nssa_translator_role', must be one of '%s'",
                $this->container['nssa_translator_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStubTypeAllowableValues();
        if (!is_null($this->container['stub_type']) && !in_array($this->container['stub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stub_type', must be one of '%s'",
                $this->container['stub_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNssaDefaultInformationOriginateAllowableValues();
        if (!is_null($this->container['nssa_default_information_originate']) && !in_array($this->container['nssa_default_information_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nssa_default_information_originate', must be one of '%s'",
                $this->container['nssa_default_information_originate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nssa_default_information_originate_metric']) && ($this->container['nssa_default_information_originate_metric'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'nssa_default_information_originate_metric', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['nssa_default_information_originate_metric']) && ($this->container['nssa_default_information_originate_metric'] < 0)) {
            $invalidProperties[] = "invalid value for 'nssa_default_information_originate_metric', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNssaDefaultInformationOriginateMetricTypeAllowableValues();
        if (!is_null($this->container['nssa_default_information_originate_metric_type']) && !in_array($this->container['nssa_default_information_originate_metric_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nssa_default_information_originate_metric_type', must be one of '%s'",
                $this->container['nssa_default_information_originate_metric_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNssaRedistributionAllowableValues();
        if (!is_null($this->container['nssa_redistribution']) && !in_array($this->container['nssa_redistribution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nssa_redistribution', must be one of '%s'",
                $this->container['nssa_redistribution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($this->container['authentication']) && !in_array($this->container['authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication', must be one of '%s'",
                $this->container['authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] > 216000)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be smaller than or equal to 216000.";
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] < 300)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($this->container['ipsec_auth_alg']) && !in_array($this->container['ipsec_auth_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                $this->container['ipsec_auth_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($this->container['ipsec_enc_alg']) && !in_array($this->container['ipsec_enc_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                $this->container['ipsec_enc_alg'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipsec_keys']) && (count($this->container['ipsec_keys']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipsec_keys', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['range']) && (count($this->container['range']) > 0)) {
            $invalidProperties[] = "invalid value for 'range', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['virtual_link']) && (count($this->container['virtual_link']) > 0)) {
            $invalidProperties[] = "invalid value for 'virtual_link', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Area entry IP address.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets default_cost
     *
     * @return int|null
     */
    public function getDefaultCost()
    {
        return $this->container['default_cost'];
    }

    /**
     * Sets default_cost
     *
     * @param int|null $default_cost Summary default cost of stub or NSSA area.
     *
     * @return self
     */
    public function setDefaultCost($default_cost)
    {

        if (!is_null($default_cost) && ($default_cost > 16777215)) {
            throw new \InvalidArgumentException('invalid value for $default_cost when calling RouterOspf6Area., must be smaller than or equal to 16777215.');
        }
        if (!is_null($default_cost) && ($default_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $default_cost when calling RouterOspf6Area., must be bigger than or equal to 0.');
        }

        $this->container['default_cost'] = $default_cost;

        return $this;
    }

    /**
     * Gets nssa_translator_role
     *
     * @return string|null
     */
    public function getNssaTranslatorRole()
    {
        return $this->container['nssa_translator_role'];
    }

    /**
     * Sets nssa_translator_role
     *
     * @param string|null $nssa_translator_role NSSA translator role type.    candidate:Candidate.    never:Never.    always:Always.
     *
     * @return self
     */
    public function setNssaTranslatorRole($nssa_translator_role)
    {
        $allowedValues = $this->getNssaTranslatorRoleAllowableValues();
        if (!is_null($nssa_translator_role) && !in_array($nssa_translator_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nssa_translator_role', must be one of '%s'",
                    $nssa_translator_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nssa_translator_role'] = $nssa_translator_role;

        return $this;
    }

    /**
     * Gets stub_type
     *
     * @return string|null
     */
    public function getStubType()
    {
        return $this->container['stub_type'];
    }

    /**
     * Sets stub_type
     *
     * @param string|null $stub_type Stub summary setting.    no-summary:No summary.    summary:Summary.
     *
     * @return self
     */
    public function setStubType($stub_type)
    {
        $allowedValues = $this->getStubTypeAllowableValues();
        if (!is_null($stub_type) && !in_array($stub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stub_type', must be one of '%s'",
                    $stub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stub_type'] = $stub_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Area type setting.    regular:Regular.    nssa:NSSA.    stub:Stub.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets nssa_default_information_originate
     *
     * @return string|null
     */
    public function getNssaDefaultInformationOriginate()
    {
        return $this->container['nssa_default_information_originate'];
    }

    /**
     * Sets nssa_default_information_originate
     *
     * @param string|null $nssa_default_information_originate Enable/disable originate type 7 default into NSSA area.    enable:Enable originate type 7 default into NSSA area.    disable:Disable originate type 7 default into NSSA area.
     *
     * @return self
     */
    public function setNssaDefaultInformationOriginate($nssa_default_information_originate)
    {
        $allowedValues = $this->getNssaDefaultInformationOriginateAllowableValues();
        if (!is_null($nssa_default_information_originate) && !in_array($nssa_default_information_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nssa_default_information_originate', must be one of '%s'",
                    $nssa_default_information_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nssa_default_information_originate'] = $nssa_default_information_originate;

        return $this;
    }

    /**
     * Gets nssa_default_information_originate_metric
     *
     * @return int|null
     */
    public function getNssaDefaultInformationOriginateMetric()
    {
        return $this->container['nssa_default_information_originate_metric'];
    }

    /**
     * Sets nssa_default_information_originate_metric
     *
     * @param int|null $nssa_default_information_originate_metric OSPFv3 default metric.
     *
     * @return self
     */
    public function setNssaDefaultInformationOriginateMetric($nssa_default_information_originate_metric)
    {

        if (!is_null($nssa_default_information_originate_metric) && ($nssa_default_information_originate_metric > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $nssa_default_information_originate_metric when calling RouterOspf6Area., must be smaller than or equal to 16777214.');
        }
        if (!is_null($nssa_default_information_originate_metric) && ($nssa_default_information_originate_metric < 0)) {
            throw new \InvalidArgumentException('invalid value for $nssa_default_information_originate_metric when calling RouterOspf6Area., must be bigger than or equal to 0.');
        }

        $this->container['nssa_default_information_originate_metric'] = $nssa_default_information_originate_metric;

        return $this;
    }

    /**
     * Gets nssa_default_information_originate_metric_type
     *
     * @return string|null
     */
    public function getNssaDefaultInformationOriginateMetricType()
    {
        return $this->container['nssa_default_information_originate_metric_type'];
    }

    /**
     * Sets nssa_default_information_originate_metric_type
     *
     * @param string|null $nssa_default_information_originate_metric_type OSPFv3 metric type for default routes.    1:Type 1.    2:Type 2.
     *
     * @return self
     */
    public function setNssaDefaultInformationOriginateMetricType($nssa_default_information_originate_metric_type)
    {
        $allowedValues = $this->getNssaDefaultInformationOriginateMetricTypeAllowableValues();
        if (!is_null($nssa_default_information_originate_metric_type) && !in_array($nssa_default_information_originate_metric_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nssa_default_information_originate_metric_type', must be one of '%s'",
                    $nssa_default_information_originate_metric_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nssa_default_information_originate_metric_type'] = $nssa_default_information_originate_metric_type;

        return $this;
    }

    /**
     * Gets nssa_redistribution
     *
     * @return string|null
     */
    public function getNssaRedistribution()
    {
        return $this->container['nssa_redistribution'];
    }

    /**
     * Sets nssa_redistribution
     *
     * @param string|null $nssa_redistribution Enable/disable redistribute into NSSA area.    enable:Enable redistribute into NSSA area.    disable:Disable redistribute into NSSA area.
     *
     * @return self
     */
    public function setNssaRedistribution($nssa_redistribution)
    {
        $allowedValues = $this->getNssaRedistributionAllowableValues();
        if (!is_null($nssa_redistribution) && !in_array($nssa_redistribution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nssa_redistribution', must be one of '%s'",
                    $nssa_redistribution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nssa_redistribution'] = $nssa_redistribution;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication Authentication mode.    none:Disable authentication.    ah:Authentication Header.    esp:Encapsulating Security Payload.
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication', must be one of '%s'",
                    $authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets key_rollover_interval
     *
     * @return int|null
     */
    public function getKeyRolloverInterval()
    {
        return $this->container['key_rollover_interval'];
    }

    /**
     * Sets key_rollover_interval
     *
     * @param int|null $key_rollover_interval Key roll-over interval.
     *
     * @return self
     */
    public function setKeyRolloverInterval($key_rollover_interval)
    {

        if (!is_null($key_rollover_interval) && ($key_rollover_interval > 216000)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6Area., must be smaller than or equal to 216000.');
        }
        if (!is_null($key_rollover_interval) && ($key_rollover_interval < 300)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6Area., must be bigger than or equal to 300.');
        }

        $this->container['key_rollover_interval'] = $key_rollover_interval;

        return $this;
    }

    /**
     * Gets ipsec_auth_alg
     *
     * @return string|null
     */
    public function getIpsecAuthAlg()
    {
        return $this->container['ipsec_auth_alg'];
    }

    /**
     * Sets ipsec_auth_alg
     *
     * @param string|null $ipsec_auth_alg Authentication algorithm.    md5:MD5.    sha1:SHA1.    sha256:SHA256.    sha384:SHA384.    sha512:SHA512.
     *
     * @return self
     */
    public function setIpsecAuthAlg($ipsec_auth_alg)
    {
        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($ipsec_auth_alg) && !in_array($ipsec_auth_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                    $ipsec_auth_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_auth_alg'] = $ipsec_auth_alg;

        return $this;
    }

    /**
     * Gets ipsec_enc_alg
     *
     * @return string|null
     */
    public function getIpsecEncAlg()
    {
        return $this->container['ipsec_enc_alg'];
    }

    /**
     * Sets ipsec_enc_alg
     *
     * @param string|null $ipsec_enc_alg Encryption algorithm.    null:No encryption.    des:DES.    3des:3DES.    aes128:AES128.    aes192:AES192.    aes256:AES256.
     *
     * @return self
     */
    public function setIpsecEncAlg($ipsec_enc_alg)
    {
        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($ipsec_enc_alg) && !in_array($ipsec_enc_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                    $ipsec_enc_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_enc_alg'] = $ipsec_enc_alg;

        return $this;
    }

    /**
     * Gets ipsec_keys
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null
     */
    public function getIpsecKeys()
    {
        return $this->container['ipsec_keys'];
    }

    /**
     * Sets ipsec_keys
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null $ipsec_keys IPsec authentication and encryption keys.
     *
     * @return self
     */
    public function setIpsecKeys($ipsec_keys)
    {

        if (!is_null($ipsec_keys) && (count($ipsec_keys) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_keys when calling RouterOspf6Area., number of items must be less than or equal to 0.');
        }
        $this->container['ipsec_keys'] = $ipsec_keys;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6Range[]|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6Range[]|null $range OSPF6 area range configuration.
     *
     * @return self
     */
    public function setRange($range)
    {

        if (!is_null($range) && (count($range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $range when calling RouterOspf6Area., number of items must be less than or equal to 0.');
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets virtual_link
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6VirtualLink[]|null
     */
    public function getVirtualLink()
    {
        return $this->container['virtual_link'];
    }

    /**
     * Sets virtual_link
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6VirtualLink[]|null $virtual_link OSPF6 virtual link configuration.
     *
     * @return self
     */
    public function setVirtualLink($virtual_link)
    {

        if (!is_null($virtual_link) && (count($virtual_link) > 0)) {
            throw new \InvalidArgumentException('invalid value for $virtual_link when calling RouterOspf6Area., number of items must be less than or equal to 0.');
        }
        $this->container['virtual_link'] = $virtual_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


