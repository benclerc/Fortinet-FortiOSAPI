<?php
/**
 * WebfilterProfileNameWeb
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebfilterProfileNameWeb Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebfilterProfileNameWeb implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_webfilter_profile__name__web';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bword_threshold' => 'int',
        'bword_table' => 'int',
        'urlfilter_table' => 'int',
        'content_header_list' => 'int',
        'blacklist' => 'string',
        'whitelist' => 'string',
        'safe_search' => 'string',
        'youtube_restrict' => 'string',
        'log_search' => 'string',
        'keyword_match' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameKeywordMatch[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bword_threshold' => null,
        'bword_table' => null,
        'urlfilter_table' => null,
        'content_header_list' => null,
        'blacklist' => null,
        'whitelist' => null,
        'safe_search' => null,
        'youtube_restrict' => null,
        'log_search' => null,
        'keyword_match' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bword_threshold' => 'bword-threshold',
        'bword_table' => 'bword-table',
        'urlfilter_table' => 'urlfilter-table',
        'content_header_list' => 'content-header-list',
        'blacklist' => 'blacklist',
        'whitelist' => 'whitelist',
        'safe_search' => 'safe-search',
        'youtube_restrict' => 'youtube-restrict',
        'log_search' => 'log-search',
        'keyword_match' => 'keyword-match'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bword_threshold' => 'setBwordThreshold',
        'bword_table' => 'setBwordTable',
        'urlfilter_table' => 'setUrlfilterTable',
        'content_header_list' => 'setContentHeaderList',
        'blacklist' => 'setBlacklist',
        'whitelist' => 'setWhitelist',
        'safe_search' => 'setSafeSearch',
        'youtube_restrict' => 'setYoutubeRestrict',
        'log_search' => 'setLogSearch',
        'keyword_match' => 'setKeywordMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bword_threshold' => 'getBwordThreshold',
        'bword_table' => 'getBwordTable',
        'urlfilter_table' => 'getUrlfilterTable',
        'content_header_list' => 'getContentHeaderList',
        'blacklist' => 'getBlacklist',
        'whitelist' => 'getWhitelist',
        'safe_search' => 'getSafeSearch',
        'youtube_restrict' => 'getYoutubeRestrict',
        'log_search' => 'getLogSearch',
        'keyword_match' => 'getKeywordMatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BLACKLIST_ENABLE = 'enable';
    const BLACKLIST_DISABLE = 'disable';
    const WHITELIST_EXEMPT_AV = 'exempt-av';
    const WHITELIST_EXEMPT_WEBCONTENT = 'exempt-webcontent';
    const WHITELIST_EXEMPT_ACTIVEX_JAVA_COOKIE = 'exempt-activex-java-cookie';
    const WHITELIST_EXEMPT_DLP = 'exempt-dlp';
    const WHITELIST_EXEMPT_RANGEBLOCK = 'exempt-rangeblock';
    const WHITELIST_EXTENDED_LOG_OTHERS = 'extended-log-others';
    const SAFE_SEARCH_URL = 'url';
    const SAFE_SEARCH_HEADER = 'header';
    const YOUTUBE_RESTRICT_NONE = 'none';
    const YOUTUBE_RESTRICT_STRICT = 'strict';
    const YOUTUBE_RESTRICT_MODERATE = 'moderate';
    const LOG_SEARCH_ENABLE = 'enable';
    const LOG_SEARCH_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlacklistAllowableValues()
    {
        return [
            self::BLACKLIST_ENABLE,
            self::BLACKLIST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhitelistAllowableValues()
    {
        return [
            self::WHITELIST_EXEMPT_AV,
            self::WHITELIST_EXEMPT_WEBCONTENT,
            self::WHITELIST_EXEMPT_ACTIVEX_JAVA_COOKIE,
            self::WHITELIST_EXEMPT_DLP,
            self::WHITELIST_EXEMPT_RANGEBLOCK,
            self::WHITELIST_EXTENDED_LOG_OTHERS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSafeSearchAllowableValues()
    {
        return [
            self::SAFE_SEARCH_URL,
            self::SAFE_SEARCH_HEADER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getYoutubeRestrictAllowableValues()
    {
        return [
            self::YOUTUBE_RESTRICT_NONE,
            self::YOUTUBE_RESTRICT_STRICT,
            self::YOUTUBE_RESTRICT_MODERATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogSearchAllowableValues()
    {
        return [
            self::LOG_SEARCH_ENABLE,
            self::LOG_SEARCH_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bword_threshold'] = $data['bword_threshold'] ?? null;
        $this->container['bword_table'] = $data['bword_table'] ?? null;
        $this->container['urlfilter_table'] = $data['urlfilter_table'] ?? null;
        $this->container['content_header_list'] = $data['content_header_list'] ?? null;
        $this->container['blacklist'] = $data['blacklist'] ?? null;
        $this->container['whitelist'] = $data['whitelist'] ?? null;
        $this->container['safe_search'] = $data['safe_search'] ?? null;
        $this->container['youtube_restrict'] = $data['youtube_restrict'] ?? null;
        $this->container['log_search'] = $data['log_search'] ?? null;
        $this->container['keyword_match'] = $data['keyword_match'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bword_threshold']) && ($this->container['bword_threshold'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bword_threshold', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bword_threshold']) && ($this->container['bword_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'bword_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bword_table']) && ($this->container['bword_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'bword_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['bword_table']) && ($this->container['bword_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'bword_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['urlfilter_table']) && ($this->container['urlfilter_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'urlfilter_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['urlfilter_table']) && ($this->container['urlfilter_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'urlfilter_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['content_header_list']) && ($this->container['content_header_list'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'content_header_list', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['content_header_list']) && ($this->container['content_header_list'] < 0)) {
            $invalidProperties[] = "invalid value for 'content_header_list', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBlacklistAllowableValues();
        if (!is_null($this->container['blacklist']) && !in_array($this->container['blacklist'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blacklist', must be one of '%s'",
                $this->container['blacklist'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhitelistAllowableValues();
        if (!is_null($this->container['whitelist']) && !in_array($this->container['whitelist'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'whitelist', must be one of '%s'",
                $this->container['whitelist'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSafeSearchAllowableValues();
        if (!is_null($this->container['safe_search']) && !in_array($this->container['safe_search'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'safe_search', must be one of '%s'",
                $this->container['safe_search'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getYoutubeRestrictAllowableValues();
        if (!is_null($this->container['youtube_restrict']) && !in_array($this->container['youtube_restrict'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'youtube_restrict', must be one of '%s'",
                $this->container['youtube_restrict'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogSearchAllowableValues();
        if (!is_null($this->container['log_search']) && !in_array($this->container['log_search'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_search', must be one of '%s'",
                $this->container['log_search'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keyword_match']) && (count($this->container['keyword_match']) > 0)) {
            $invalidProperties[] = "invalid value for 'keyword_match', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bword_threshold
     *
     * @return int|null
     */
    public function getBwordThreshold()
    {
        return $this->container['bword_threshold'];
    }

    /**
     * Sets bword_threshold
     *
     * @param int|null $bword_threshold Banned word score threshold.
     *
     * @return self
     */
    public function setBwordThreshold($bword_threshold)
    {

        if (!is_null($bword_threshold) && ($bword_threshold > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bword_threshold when calling WebfilterProfileNameWeb., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bword_threshold) && ($bword_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $bword_threshold when calling WebfilterProfileNameWeb., must be bigger than or equal to 0.');
        }

        $this->container['bword_threshold'] = $bword_threshold;

        return $this;
    }

    /**
     * Gets bword_table
     *
     * @return int|null
     */
    public function getBwordTable()
    {
        return $this->container['bword_table'];
    }

    /**
     * Sets bword_table
     *
     * @param int|null $bword_table Banned word table ID.
     *
     * @return self
     */
    public function setBwordTable($bword_table)
    {

        if (!is_null($bword_table) && ($bword_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $bword_table when calling WebfilterProfileNameWeb., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($bword_table) && ($bword_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $bword_table when calling WebfilterProfileNameWeb., must be bigger than or equal to 0.');
        }

        $this->container['bword_table'] = $bword_table;

        return $this;
    }

    /**
     * Gets urlfilter_table
     *
     * @return int|null
     */
    public function getUrlfilterTable()
    {
        return $this->container['urlfilter_table'];
    }

    /**
     * Sets urlfilter_table
     *
     * @param int|null $urlfilter_table URL filter table ID.
     *
     * @return self
     */
    public function setUrlfilterTable($urlfilter_table)
    {

        if (!is_null($urlfilter_table) && ($urlfilter_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $urlfilter_table when calling WebfilterProfileNameWeb., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($urlfilter_table) && ($urlfilter_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $urlfilter_table when calling WebfilterProfileNameWeb., must be bigger than or equal to 0.');
        }

        $this->container['urlfilter_table'] = $urlfilter_table;

        return $this;
    }

    /**
     * Gets content_header_list
     *
     * @return int|null
     */
    public function getContentHeaderList()
    {
        return $this->container['content_header_list'];
    }

    /**
     * Sets content_header_list
     *
     * @param int|null $content_header_list Content header list.
     *
     * @return self
     */
    public function setContentHeaderList($content_header_list)
    {

        if (!is_null($content_header_list) && ($content_header_list > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $content_header_list when calling WebfilterProfileNameWeb., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($content_header_list) && ($content_header_list < 0)) {
            throw new \InvalidArgumentException('invalid value for $content_header_list when calling WebfilterProfileNameWeb., must be bigger than or equal to 0.');
        }

        $this->container['content_header_list'] = $content_header_list;

        return $this;
    }

    /**
     * Gets blacklist
     *
     * @return string|null
     */
    public function getBlacklist()
    {
        return $this->container['blacklist'];
    }

    /**
     * Sets blacklist
     *
     * @param string|null $blacklist Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBlacklist($blacklist)
    {
        $allowedValues = $this->getBlacklistAllowableValues();
        if (!is_null($blacklist) && !in_array($blacklist, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blacklist', must be one of '%s'",
                    $blacklist,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blacklist'] = $blacklist;

        return $this;
    }

    /**
     * Gets whitelist
     *
     * @return string|null
     */
    public function getWhitelist()
    {
        return $this->container['whitelist'];
    }

    /**
     * Sets whitelist
     *
     * @param string|null $whitelist FortiGuard whitelist settings.    exempt-av:Exempt antivirus.    exempt-webcontent:Exempt web content.    exempt-activex-java-cookie:Exempt ActiveX-JAVA-Cookie.    exempt-dlp:Exempt DLP.    exempt-rangeblock:Exempt RangeBlock.    extended-log-others:Support extended log.
     *
     * @return self
     */
    public function setWhitelist($whitelist)
    {
        $allowedValues = $this->getWhitelistAllowableValues();
        if (!is_null($whitelist) && !in_array($whitelist, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'whitelist', must be one of '%s'",
                    $whitelist,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['whitelist'] = $whitelist;

        return $this;
    }

    /**
     * Gets safe_search
     *
     * @return string|null
     */
    public function getSafeSearch()
    {
        return $this->container['safe_search'];
    }

    /**
     * Sets safe_search
     *
     * @param string|null $safe_search Safe search type.    url:Insert safe search string into URL.    header:Insert safe search header.
     *
     * @return self
     */
    public function setSafeSearch($safe_search)
    {
        $allowedValues = $this->getSafeSearchAllowableValues();
        if (!is_null($safe_search) && !in_array($safe_search, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'safe_search', must be one of '%s'",
                    $safe_search,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['safe_search'] = $safe_search;

        return $this;
    }

    /**
     * Gets youtube_restrict
     *
     * @return string|null
     */
    public function getYoutubeRestrict()
    {
        return $this->container['youtube_restrict'];
    }

    /**
     * Sets youtube_restrict
     *
     * @param string|null $youtube_restrict YouTube EDU filter level.    none:Full access for YouTube.    strict:Strict access for YouTube.    moderate:Moderate access for YouTube.
     *
     * @return self
     */
    public function setYoutubeRestrict($youtube_restrict)
    {
        $allowedValues = $this->getYoutubeRestrictAllowableValues();
        if (!is_null($youtube_restrict) && !in_array($youtube_restrict, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'youtube_restrict', must be one of '%s'",
                    $youtube_restrict,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['youtube_restrict'] = $youtube_restrict;

        return $this;
    }

    /**
     * Gets log_search
     *
     * @return string|null
     */
    public function getLogSearch()
    {
        return $this->container['log_search'];
    }

    /**
     * Sets log_search
     *
     * @param string|null $log_search Enable/disable logging all search phrases.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLogSearch($log_search)
    {
        $allowedValues = $this->getLogSearchAllowableValues();
        if (!is_null($log_search) && !in_array($log_search, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_search', must be one of '%s'",
                    $log_search,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_search'] = $log_search;

        return $this;
    }

    /**
     * Gets keyword_match
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameKeywordMatch[]|null
     */
    public function getKeywordMatch()
    {
        return $this->container['keyword_match'];
    }

    /**
     * Sets keyword_match
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameKeywordMatch[]|null $keyword_match Search keywords to log when match is found.
     *
     * @return self
     */
    public function setKeywordMatch($keyword_match)
    {

        if (!is_null($keyword_match) && (count($keyword_match) > 0)) {
            throw new \InvalidArgumentException('invalid value for $keyword_match when calling WebfilterProfileNameWeb., number of items must be less than or equal to 0.');
        }
        $this->container['keyword_match'] = $keyword_match;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


