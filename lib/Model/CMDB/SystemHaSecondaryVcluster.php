<?php
/**
 * SystemHaSecondaryVcluster
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemHaSecondaryVcluster Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemHaSecondaryVcluster implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_ha_secondary_vcluster';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vcluster_id' => 'int',
        'override' => 'string',
        'priority' => 'int',
        'override_wait_time' => 'int',
        'monitor' => 'string',
        'pingserver_monitor_interface' => 'string',
        'pingserver_failover_threshold' => 'int',
        'pingserver_secondary_force_reset' => 'string',
        'vdom' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vcluster_id' => null,
        'override' => null,
        'priority' => null,
        'override_wait_time' => null,
        'monitor' => null,
        'pingserver_monitor_interface' => null,
        'pingserver_failover_threshold' => null,
        'pingserver_secondary_force_reset' => null,
        'vdom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vcluster_id' => 'vcluster-id',
        'override' => 'override',
        'priority' => 'priority',
        'override_wait_time' => 'override-wait-time',
        'monitor' => 'monitor',
        'pingserver_monitor_interface' => 'pingserver-monitor-interface',
        'pingserver_failover_threshold' => 'pingserver-failover-threshold',
        'pingserver_secondary_force_reset' => 'pingserver-secondary-force-reset',
        'vdom' => 'vdom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vcluster_id' => 'setVclusterId',
        'override' => 'setOverride',
        'priority' => 'setPriority',
        'override_wait_time' => 'setOverrideWaitTime',
        'monitor' => 'setMonitor',
        'pingserver_monitor_interface' => 'setPingserverMonitorInterface',
        'pingserver_failover_threshold' => 'setPingserverFailoverThreshold',
        'pingserver_secondary_force_reset' => 'setPingserverSecondaryForceReset',
        'vdom' => 'setVdom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vcluster_id' => 'getVclusterId',
        'override' => 'getOverride',
        'priority' => 'getPriority',
        'override_wait_time' => 'getOverrideWaitTime',
        'monitor' => 'getMonitor',
        'pingserver_monitor_interface' => 'getPingserverMonitorInterface',
        'pingserver_failover_threshold' => 'getPingserverFailoverThreshold',
        'pingserver_secondary_force_reset' => 'getPingserverSecondaryForceReset',
        'vdom' => 'getVdom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OVERRIDE_ENABLE = 'enable';
    const OVERRIDE_DISABLE = 'disable';
    const PINGSERVER_SECONDARY_FORCE_RESET_ENABLE = 'enable';
    const PINGSERVER_SECONDARY_FORCE_RESET_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideAllowableValues()
    {
        return [
            self::OVERRIDE_ENABLE,
            self::OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPingserverSecondaryForceResetAllowableValues()
    {
        return [
            self::PINGSERVER_SECONDARY_FORCE_RESET_ENABLE,
            self::PINGSERVER_SECONDARY_FORCE_RESET_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vcluster_id'] = $data['vcluster_id'] ?? null;
        $this->container['override'] = $data['override'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['override_wait_time'] = $data['override_wait_time'] ?? null;
        $this->container['monitor'] = $data['monitor'] ?? null;
        $this->container['pingserver_monitor_interface'] = $data['pingserver_monitor_interface'] ?? null;
        $this->container['pingserver_failover_threshold'] = $data['pingserver_failover_threshold'] ?? null;
        $this->container['pingserver_secondary_force_reset'] = $data['pingserver_secondary_force_reset'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vcluster_id']) && ($this->container['vcluster_id'] > 255)) {
            $invalidProperties[] = "invalid value for 'vcluster_id', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vcluster_id']) && ($this->container['vcluster_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'vcluster_id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOverrideAllowableValues();
        if (!is_null($this->container['override']) && !in_array($this->container['override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override', must be one of '%s'",
                $this->container['override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['override_wait_time']) && ($this->container['override_wait_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'override_wait_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['override_wait_time']) && ($this->container['override_wait_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'override_wait_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pingserver_failover_threshold']) && ($this->container['pingserver_failover_threshold'] > 50)) {
            $invalidProperties[] = "invalid value for 'pingserver_failover_threshold', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pingserver_failover_threshold']) && ($this->container['pingserver_failover_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'pingserver_failover_threshold', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPingserverSecondaryForceResetAllowableValues();
        if (!is_null($this->container['pingserver_secondary_force_reset']) && !in_array($this->container['pingserver_secondary_force_reset'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pingserver_secondary_force_reset', must be one of '%s'",
                $this->container['pingserver_secondary_force_reset'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vcluster_id
     *
     * @return int|null
     */
    public function getVclusterId()
    {
        return $this->container['vcluster_id'];
    }

    /**
     * Sets vcluster_id
     *
     * @param int|null $vcluster_id Cluster ID.
     *
     * @return self
     */
    public function setVclusterId($vcluster_id)
    {

        if (!is_null($vcluster_id) && ($vcluster_id > 255)) {
            throw new \InvalidArgumentException('invalid value for $vcluster_id when calling SystemHaSecondaryVcluster., must be smaller than or equal to 255.');
        }
        if (!is_null($vcluster_id) && ($vcluster_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $vcluster_id when calling SystemHaSecondaryVcluster., must be bigger than or equal to 0.');
        }

        $this->container['vcluster_id'] = $vcluster_id;

        return $this;
    }

    /**
     * Gets override
     *
     * @return string|null
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param string|null $override Enable and increase the priority of the unit that should always be primary.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setOverride($override)
    {
        $allowedValues = $this->getOverrideAllowableValues();
        if (!is_null($override) && !in_array($override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override', must be one of '%s'",
                    $override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Increase the priority to select the primary unit (0 - 255).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemHaSecondaryVcluster., must be smaller than or equal to 255.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemHaSecondaryVcluster., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets override_wait_time
     *
     * @return int|null
     */
    public function getOverrideWaitTime()
    {
        return $this->container['override_wait_time'];
    }

    /**
     * Sets override_wait_time
     *
     * @param int|null $override_wait_time Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
     *
     * @return self
     */
    public function setOverrideWaitTime($override_wait_time)
    {

        if (!is_null($override_wait_time) && ($override_wait_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $override_wait_time when calling SystemHaSecondaryVcluster., must be smaller than or equal to 3600.');
        }
        if (!is_null($override_wait_time) && ($override_wait_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $override_wait_time when calling SystemHaSecondaryVcluster., must be bigger than or equal to 0.');
        }

        $this->container['override_wait_time'] = $override_wait_time;

        return $this;
    }

    /**
     * Gets monitor
     *
     * @return string|null
     */
    public function getMonitor()
    {
        return $this->container['monitor'];
    }

    /**
     * Sets monitor
     *
     * @param string|null $monitor Interfaces to check for port monitoring (or link failure).
     *
     * @return self
     */
    public function setMonitor($monitor)
    {
        $this->container['monitor'] = $monitor;

        return $this;
    }

    /**
     * Gets pingserver_monitor_interface
     *
     * @return string|null
     */
    public function getPingserverMonitorInterface()
    {
        return $this->container['pingserver_monitor_interface'];
    }

    /**
     * Sets pingserver_monitor_interface
     *
     * @param string|null $pingserver_monitor_interface Interfaces to check for remote IP monitoring.
     *
     * @return self
     */
    public function setPingserverMonitorInterface($pingserver_monitor_interface)
    {
        $this->container['pingserver_monitor_interface'] = $pingserver_monitor_interface;

        return $this;
    }

    /**
     * Gets pingserver_failover_threshold
     *
     * @return int|null
     */
    public function getPingserverFailoverThreshold()
    {
        return $this->container['pingserver_failover_threshold'];
    }

    /**
     * Sets pingserver_failover_threshold
     *
     * @param int|null $pingserver_failover_threshold Remote IP monitoring failover threshold (0 - 50).
     *
     * @return self
     */
    public function setPingserverFailoverThreshold($pingserver_failover_threshold)
    {

        if (!is_null($pingserver_failover_threshold) && ($pingserver_failover_threshold > 50)) {
            throw new \InvalidArgumentException('invalid value for $pingserver_failover_threshold when calling SystemHaSecondaryVcluster., must be smaller than or equal to 50.');
        }
        if (!is_null($pingserver_failover_threshold) && ($pingserver_failover_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $pingserver_failover_threshold when calling SystemHaSecondaryVcluster., must be bigger than or equal to 0.');
        }

        $this->container['pingserver_failover_threshold'] = $pingserver_failover_threshold;

        return $this;
    }

    /**
     * Gets pingserver_secondary_force_reset
     *
     * @return string|null
     */
    public function getPingserverSecondaryForceReset()
    {
        return $this->container['pingserver_secondary_force_reset'];
    }

    /**
     * Sets pingserver_secondary_force_reset
     *
     * @param string|null $pingserver_secondary_force_reset Enable to force the cluster to negotiate after a remote IP monitoring failover.    enable:Enable force reset of secondary after PING server failure.    disable:Disable force reset of secondary after PING server failure.
     *
     * @return self
     */
    public function setPingserverSecondaryForceReset($pingserver_secondary_force_reset)
    {
        $allowedValues = $this->getPingserverSecondaryForceResetAllowableValues();
        if (!is_null($pingserver_secondary_force_reset) && !in_array($pingserver_secondary_force_reset, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pingserver_secondary_force_reset', must be one of '%s'",
                    $pingserver_secondary_force_reset,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pingserver_secondary_force_reset'] = $pingserver_secondary_force_reset;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom VDOMs in virtual cluster 2.
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        $this->container['vdom'] = $vdom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


