<?php
/**
 * SystemInterfaceNameL2tpClientSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemInterfaceNameL2tpClientSettings Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemInterfaceNameL2tpClientSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_interface__name__l2tp_client_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => 'string',
        'password' => 'string',
        'peer_host' => 'string',
        'peer_mask' => 'string',
        'peer_port' => 'int',
        'auth_type' => 'string',
        'mtu' => 'int',
        'distance' => 'int',
        'priority' => 'int',
        'defaultgw' => 'string',
        'ip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'password' => 'password',
        'peer_host' => null,
        'peer_mask' => null,
        'peer_port' => null,
        'auth_type' => null,
        'mtu' => null,
        'distance' => null,
        'priority' => null,
        'defaultgw' => null,
        'ip' => 'ipv4'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'password' => 'password',
        'peer_host' => 'peer-host',
        'peer_mask' => 'peer-mask',
        'peer_port' => 'peer-port',
        'auth_type' => 'auth-type',
        'mtu' => 'mtu',
        'distance' => 'distance',
        'priority' => 'priority',
        'defaultgw' => 'defaultgw',
        'ip' => 'ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'password' => 'setPassword',
        'peer_host' => 'setPeerHost',
        'peer_mask' => 'setPeerMask',
        'peer_port' => 'setPeerPort',
        'auth_type' => 'setAuthType',
        'mtu' => 'setMtu',
        'distance' => 'setDistance',
        'priority' => 'setPriority',
        'defaultgw' => 'setDefaultgw',
        'ip' => 'setIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'password' => 'getPassword',
        'peer_host' => 'getPeerHost',
        'peer_mask' => 'getPeerMask',
        'peer_port' => 'getPeerPort',
        'auth_type' => 'getAuthType',
        'mtu' => 'getMtu',
        'distance' => 'getDistance',
        'priority' => 'getPriority',
        'defaultgw' => 'getDefaultgw',
        'ip' => 'getIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTH_TYPE_AUTO = 'auto';
    const AUTH_TYPE_PAP = 'pap';
    const AUTH_TYPE_CHAP = 'chap';
    const AUTH_TYPE_MSCHAPV1 = 'mschapv1';
    const AUTH_TYPE_MSCHAPV2 = 'mschapv2';
    const DEFAULTGW_ENABLE = 'enable';
    const DEFAULTGW_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_AUTO,
            self::AUTH_TYPE_PAP,
            self::AUTH_TYPE_CHAP,
            self::AUTH_TYPE_MSCHAPV1,
            self::AUTH_TYPE_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultgwAllowableValues()
    {
        return [
            self::DEFAULTGW_ENABLE,
            self::DEFAULTGW_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = $data['user'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['peer_host'] = $data['peer_host'] ?? null;
        $this->container['peer_mask'] = $data['peer_mask'] ?? null;
        $this->container['peer_port'] = $data['peer_port'] ?? null;
        $this->container['auth_type'] = $data['auth_type'] ?? null;
        $this->container['mtu'] = $data['mtu'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['defaultgw'] = $data['defaultgw'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['user']) && (mb_strlen($this->container['user']) > 127)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['peer_host']) && (mb_strlen($this->container['peer_host']) > 255)) {
            $invalidProperties[] = "invalid value for 'peer_host', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['peer_port']) && ($this->container['peer_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'peer_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['peer_port']) && ($this->container['peer_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'peer_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] > 65535)) {
            $invalidProperties[] = "invalid value for 'mtu', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] < 40)) {
            $invalidProperties[] = "invalid value for 'mtu', must be bigger than or equal to 40.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDefaultgwAllowableValues();
        if (!is_null($this->container['defaultgw']) && !in_array($this->container['defaultgw'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'defaultgw', must be one of '%s'",
                $this->container['defaultgw'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user L2TP user name.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (!is_null($user) && (mb_strlen($user) > 127)) {
            throw new \InvalidArgumentException('invalid length for $user when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 127.');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password L2TP password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets peer_host
     *
     * @return string|null
     */
    public function getPeerHost()
    {
        return $this->container['peer_host'];
    }

    /**
     * Sets peer_host
     *
     * @param string|null $peer_host L2TP peer host address.
     *
     * @return self
     */
    public function setPeerHost($peer_host)
    {
        if (!is_null($peer_host) && (mb_strlen($peer_host) > 255)) {
            throw new \InvalidArgumentException('invalid length for $peer_host when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 255.');
        }

        $this->container['peer_host'] = $peer_host;

        return $this;
    }

    /**
     * Gets peer_mask
     *
     * @return string|null
     */
    public function getPeerMask()
    {
        return $this->container['peer_mask'];
    }

    /**
     * Sets peer_mask
     *
     * @param string|null $peer_mask L2TP peer mask.
     *
     * @return self
     */
    public function setPeerMask($peer_mask)
    {
        $this->container['peer_mask'] = $peer_mask;

        return $this;
    }

    /**
     * Gets peer_port
     *
     * @return int|null
     */
    public function getPeerPort()
    {
        return $this->container['peer_port'];
    }

    /**
     * Sets peer_port
     *
     * @param int|null $peer_port L2TP peer port number.
     *
     * @return self
     */
    public function setPeerPort($peer_port)
    {

        if (!is_null($peer_port) && ($peer_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $peer_port when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 65535.');
        }
        if (!is_null($peer_port) && ($peer_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $peer_port when calling SystemInterfaceNameL2tpClientSettings., must be bigger than or equal to 1.');
        }

        $this->container['peer_port'] = $peer_port;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type L2TP authentication type.    auto:Automatically choose authentication.    pap:PAP authentication.    chap:CHAP authentication.    mschapv1:MS-CHAPv1 authentication.    mschapv2:MS-CHAPv2 authentication.
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int|null
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int|null $mtu L2TP MTU.
     *
     * @return self
     */
    public function setMtu($mtu)
    {

        if (!is_null($mtu) && ($mtu > 65535)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 65535.');
        }
        if (!is_null($mtu) && ($mtu < 40)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling SystemInterfaceNameL2tpClientSettings., must be bigger than or equal to 40.');
        }

        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Distance of learned routes.
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling SystemInterfaceNameL2tpClientSettings., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority of learned routes.
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemInterfaceNameL2tpClientSettings., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemInterfaceNameL2tpClientSettings., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets defaultgw
     *
     * @return string|null
     */
    public function getDefaultgw()
    {
        return $this->container['defaultgw'];
    }

    /**
     * Sets defaultgw
     *
     * @param string|null $defaultgw Enable/disable default gateway.    enable:Enable default gateway.    disable:Disable default gateway.
     *
     * @return self
     */
    public function setDefaultgw($defaultgw)
    {
        $allowedValues = $this->getDefaultgwAllowableValues();
        if (!is_null($defaultgw) && !in_array($defaultgw, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'defaultgw', must be one of '%s'",
                    $defaultgw,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['defaultgw'] = $defaultgw;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


