<?php
/**
 * InlineObject604
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject604 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject604 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_604';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'echo_interval' => 'int',
        'discovery_interval' => 'int',
        'client_idle_timeout' => 'int',
        'rogue_ap_log' => 'int',
        'fake_ap_log' => 'int',
        'sta_stats_interval' => 'int',
        'vap_stats_interval' => 'int',
        'radio_stats_interval' => 'int',
        'sta_capability_interval' => 'int',
        'sta_locate_timer' => 'int',
        'ipsec_intf_cleanup' => 'int',
        'ble_scan_report_intv' => 'int',
        'drma_interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'echo_interval' => null,
        'discovery_interval' => null,
        'client_idle_timeout' => null,
        'rogue_ap_log' => null,
        'fake_ap_log' => null,
        'sta_stats_interval' => null,
        'vap_stats_interval' => null,
        'radio_stats_interval' => null,
        'sta_capability_interval' => null,
        'sta_locate_timer' => null,
        'ipsec_intf_cleanup' => null,
        'ble_scan_report_intv' => null,
        'drma_interval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'echo_interval' => 'echo-interval',
        'discovery_interval' => 'discovery-interval',
        'client_idle_timeout' => 'client-idle-timeout',
        'rogue_ap_log' => 'rogue-ap-log',
        'fake_ap_log' => 'fake-ap-log',
        'sta_stats_interval' => 'sta-stats-interval',
        'vap_stats_interval' => 'vap-stats-interval',
        'radio_stats_interval' => 'radio-stats-interval',
        'sta_capability_interval' => 'sta-capability-interval',
        'sta_locate_timer' => 'sta-locate-timer',
        'ipsec_intf_cleanup' => 'ipsec-intf-cleanup',
        'ble_scan_report_intv' => 'ble-scan-report-intv',
        'drma_interval' => 'drma-interval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'echo_interval' => 'setEchoInterval',
        'discovery_interval' => 'setDiscoveryInterval',
        'client_idle_timeout' => 'setClientIdleTimeout',
        'rogue_ap_log' => 'setRogueApLog',
        'fake_ap_log' => 'setFakeApLog',
        'sta_stats_interval' => 'setStaStatsInterval',
        'vap_stats_interval' => 'setVapStatsInterval',
        'radio_stats_interval' => 'setRadioStatsInterval',
        'sta_capability_interval' => 'setStaCapabilityInterval',
        'sta_locate_timer' => 'setStaLocateTimer',
        'ipsec_intf_cleanup' => 'setIpsecIntfCleanup',
        'ble_scan_report_intv' => 'setBleScanReportIntv',
        'drma_interval' => 'setDrmaInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'echo_interval' => 'getEchoInterval',
        'discovery_interval' => 'getDiscoveryInterval',
        'client_idle_timeout' => 'getClientIdleTimeout',
        'rogue_ap_log' => 'getRogueApLog',
        'fake_ap_log' => 'getFakeApLog',
        'sta_stats_interval' => 'getStaStatsInterval',
        'vap_stats_interval' => 'getVapStatsInterval',
        'radio_stats_interval' => 'getRadioStatsInterval',
        'sta_capability_interval' => 'getStaCapabilityInterval',
        'sta_locate_timer' => 'getStaLocateTimer',
        'ipsec_intf_cleanup' => 'getIpsecIntfCleanup',
        'ble_scan_report_intv' => 'getBleScanReportIntv',
        'drma_interval' => 'getDrmaInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['echo_interval'] = $data['echo_interval'] ?? null;
        $this->container['discovery_interval'] = $data['discovery_interval'] ?? null;
        $this->container['client_idle_timeout'] = $data['client_idle_timeout'] ?? null;
        $this->container['rogue_ap_log'] = $data['rogue_ap_log'] ?? null;
        $this->container['fake_ap_log'] = $data['fake_ap_log'] ?? null;
        $this->container['sta_stats_interval'] = $data['sta_stats_interval'] ?? null;
        $this->container['vap_stats_interval'] = $data['vap_stats_interval'] ?? null;
        $this->container['radio_stats_interval'] = $data['radio_stats_interval'] ?? null;
        $this->container['sta_capability_interval'] = $data['sta_capability_interval'] ?? null;
        $this->container['sta_locate_timer'] = $data['sta_locate_timer'] ?? null;
        $this->container['ipsec_intf_cleanup'] = $data['ipsec_intf_cleanup'] ?? null;
        $this->container['ble_scan_report_intv'] = $data['ble_scan_report_intv'] ?? null;
        $this->container['drma_interval'] = $data['drma_interval'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['echo_interval']) && ($this->container['echo_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'echo_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['echo_interval']) && ($this->container['echo_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'echo_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discovery_interval']) && ($this->container['discovery_interval'] > 180)) {
            $invalidProperties[] = "invalid value for 'discovery_interval', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['discovery_interval']) && ($this->container['discovery_interval'] < 2)) {
            $invalidProperties[] = "invalid value for 'discovery_interval', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['client_idle_timeout']) && ($this->container['client_idle_timeout'] > 3600)) {
            $invalidProperties[] = "invalid value for 'client_idle_timeout', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['client_idle_timeout']) && ($this->container['client_idle_timeout'] < 20)) {
            $invalidProperties[] = "invalid value for 'client_idle_timeout', must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['rogue_ap_log']) && ($this->container['rogue_ap_log'] > 1440)) {
            $invalidProperties[] = "invalid value for 'rogue_ap_log', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['rogue_ap_log']) && ($this->container['rogue_ap_log'] < 0)) {
            $invalidProperties[] = "invalid value for 'rogue_ap_log', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fake_ap_log']) && ($this->container['fake_ap_log'] > 1440)) {
            $invalidProperties[] = "invalid value for 'fake_ap_log', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['fake_ap_log']) && ($this->container['fake_ap_log'] < 1)) {
            $invalidProperties[] = "invalid value for 'fake_ap_log', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sta_stats_interval']) && ($this->container['sta_stats_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'sta_stats_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sta_stats_interval']) && ($this->container['sta_stats_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'sta_stats_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vap_stats_interval']) && ($this->container['vap_stats_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'vap_stats_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vap_stats_interval']) && ($this->container['vap_stats_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'vap_stats_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['radio_stats_interval']) && ($this->container['radio_stats_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'radio_stats_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['radio_stats_interval']) && ($this->container['radio_stats_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'radio_stats_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sta_capability_interval']) && ($this->container['sta_capability_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'sta_capability_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sta_capability_interval']) && ($this->container['sta_capability_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'sta_capability_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sta_locate_timer']) && ($this->container['sta_locate_timer'] > 86400)) {
            $invalidProperties[] = "invalid value for 'sta_locate_timer', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['sta_locate_timer']) && ($this->container['sta_locate_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'sta_locate_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ipsec_intf_cleanup']) && ($this->container['ipsec_intf_cleanup'] > 3600)) {
            $invalidProperties[] = "invalid value for 'ipsec_intf_cleanup', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['ipsec_intf_cleanup']) && ($this->container['ipsec_intf_cleanup'] < 30)) {
            $invalidProperties[] = "invalid value for 'ipsec_intf_cleanup', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['ble_scan_report_intv']) && ($this->container['ble_scan_report_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'ble_scan_report_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['ble_scan_report_intv']) && ($this->container['ble_scan_report_intv'] < 10)) {
            $invalidProperties[] = "invalid value for 'ble_scan_report_intv', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['drma_interval']) && ($this->container['drma_interval'] > 1440)) {
            $invalidProperties[] = "invalid value for 'drma_interval', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['drma_interval']) && ($this->container['drma_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'drma_interval', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets echo_interval
     *
     * @return int|null
     */
    public function getEchoInterval()
    {
        return $this->container['echo_interval'];
    }

    /**
     * Sets echo_interval
     *
     * @param int|null $echo_interval Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
     *
     * @return self
     */
    public function setEchoInterval($echo_interval)
    {

        if (!is_null($echo_interval) && ($echo_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $echo_interval when calling InlineObject604., must be smaller than or equal to 255.');
        }
        if (!is_null($echo_interval) && ($echo_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $echo_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['echo_interval'] = $echo_interval;

        return $this;
    }

    /**
     * Gets discovery_interval
     *
     * @return int|null
     */
    public function getDiscoveryInterval()
    {
        return $this->container['discovery_interval'];
    }

    /**
     * Sets discovery_interval
     *
     * @param int|null $discovery_interval Time between discovery requests (2 - 180 sec, default = 5).
     *
     * @return self
     */
    public function setDiscoveryInterval($discovery_interval)
    {

        if (!is_null($discovery_interval) && ($discovery_interval > 180)) {
            throw new \InvalidArgumentException('invalid value for $discovery_interval when calling InlineObject604., must be smaller than or equal to 180.');
        }
        if (!is_null($discovery_interval) && ($discovery_interval < 2)) {
            throw new \InvalidArgumentException('invalid value for $discovery_interval when calling InlineObject604., must be bigger than or equal to 2.');
        }

        $this->container['discovery_interval'] = $discovery_interval;

        return $this;
    }

    /**
     * Gets client_idle_timeout
     *
     * @return int|null
     */
    public function getClientIdleTimeout()
    {
        return $this->container['client_idle_timeout'];
    }

    /**
     * Sets client_idle_timeout
     *
     * @param int|null $client_idle_timeout Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
     *
     * @return self
     */
    public function setClientIdleTimeout($client_idle_timeout)
    {

        if (!is_null($client_idle_timeout) && ($client_idle_timeout > 3600)) {
            throw new \InvalidArgumentException('invalid value for $client_idle_timeout when calling InlineObject604., must be smaller than or equal to 3600.');
        }
        if (!is_null($client_idle_timeout) && ($client_idle_timeout < 20)) {
            throw new \InvalidArgumentException('invalid value for $client_idle_timeout when calling InlineObject604., must be bigger than or equal to 20.');
        }

        $this->container['client_idle_timeout'] = $client_idle_timeout;

        return $this;
    }

    /**
     * Gets rogue_ap_log
     *
     * @return int|null
     */
    public function getRogueApLog()
    {
        return $this->container['rogue_ap_log'];
    }

    /**
     * Sets rogue_ap_log
     *
     * @param int|null $rogue_ap_log Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
     *
     * @return self
     */
    public function setRogueApLog($rogue_ap_log)
    {

        if (!is_null($rogue_ap_log) && ($rogue_ap_log > 1440)) {
            throw new \InvalidArgumentException('invalid value for $rogue_ap_log when calling InlineObject604., must be smaller than or equal to 1440.');
        }
        if (!is_null($rogue_ap_log) && ($rogue_ap_log < 0)) {
            throw new \InvalidArgumentException('invalid value for $rogue_ap_log when calling InlineObject604., must be bigger than or equal to 0.');
        }

        $this->container['rogue_ap_log'] = $rogue_ap_log;

        return $this;
    }

    /**
     * Gets fake_ap_log
     *
     * @return int|null
     */
    public function getFakeApLog()
    {
        return $this->container['fake_ap_log'];
    }

    /**
     * Sets fake_ap_log
     *
     * @param int|null $fake_ap_log Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
     *
     * @return self
     */
    public function setFakeApLog($fake_ap_log)
    {

        if (!is_null($fake_ap_log) && ($fake_ap_log > 1440)) {
            throw new \InvalidArgumentException('invalid value for $fake_ap_log when calling InlineObject604., must be smaller than or equal to 1440.');
        }
        if (!is_null($fake_ap_log) && ($fake_ap_log < 1)) {
            throw new \InvalidArgumentException('invalid value for $fake_ap_log when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['fake_ap_log'] = $fake_ap_log;

        return $this;
    }

    /**
     * Gets sta_stats_interval
     *
     * @return int|null
     */
    public function getStaStatsInterval()
    {
        return $this->container['sta_stats_interval'];
    }

    /**
     * Sets sta_stats_interval
     *
     * @param int|null $sta_stats_interval Time between running client (station) reports (1 - 255 sec, default = 1).
     *
     * @return self
     */
    public function setStaStatsInterval($sta_stats_interval)
    {

        if (!is_null($sta_stats_interval) && ($sta_stats_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $sta_stats_interval when calling InlineObject604., must be smaller than or equal to 255.');
        }
        if (!is_null($sta_stats_interval) && ($sta_stats_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $sta_stats_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['sta_stats_interval'] = $sta_stats_interval;

        return $this;
    }

    /**
     * Gets vap_stats_interval
     *
     * @return int|null
     */
    public function getVapStatsInterval()
    {
        return $this->container['vap_stats_interval'];
    }

    /**
     * Sets vap_stats_interval
     *
     * @param int|null $vap_stats_interval Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
     *
     * @return self
     */
    public function setVapStatsInterval($vap_stats_interval)
    {

        if (!is_null($vap_stats_interval) && ($vap_stats_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $vap_stats_interval when calling InlineObject604., must be smaller than or equal to 255.');
        }
        if (!is_null($vap_stats_interval) && ($vap_stats_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $vap_stats_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['vap_stats_interval'] = $vap_stats_interval;

        return $this;
    }

    /**
     * Gets radio_stats_interval
     *
     * @return int|null
     */
    public function getRadioStatsInterval()
    {
        return $this->container['radio_stats_interval'];
    }

    /**
     * Sets radio_stats_interval
     *
     * @param int|null $radio_stats_interval Time between running radio reports (1 - 255 sec, default = 15).
     *
     * @return self
     */
    public function setRadioStatsInterval($radio_stats_interval)
    {

        if (!is_null($radio_stats_interval) && ($radio_stats_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $radio_stats_interval when calling InlineObject604., must be smaller than or equal to 255.');
        }
        if (!is_null($radio_stats_interval) && ($radio_stats_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $radio_stats_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['radio_stats_interval'] = $radio_stats_interval;

        return $this;
    }

    /**
     * Gets sta_capability_interval
     *
     * @return int|null
     */
    public function getStaCapabilityInterval()
    {
        return $this->container['sta_capability_interval'];
    }

    /**
     * Sets sta_capability_interval
     *
     * @param int|null $sta_capability_interval Time between running station capability reports (1 - 255 sec, default = 30).
     *
     * @return self
     */
    public function setStaCapabilityInterval($sta_capability_interval)
    {

        if (!is_null($sta_capability_interval) && ($sta_capability_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $sta_capability_interval when calling InlineObject604., must be smaller than or equal to 255.');
        }
        if (!is_null($sta_capability_interval) && ($sta_capability_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $sta_capability_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['sta_capability_interval'] = $sta_capability_interval;

        return $this;
    }

    /**
     * Gets sta_locate_timer
     *
     * @return int|null
     */
    public function getStaLocateTimer()
    {
        return $this->container['sta_locate_timer'];
    }

    /**
     * Sets sta_locate_timer
     *
     * @param int|null $sta_locate_timer Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
     *
     * @return self
     */
    public function setStaLocateTimer($sta_locate_timer)
    {

        if (!is_null($sta_locate_timer) && ($sta_locate_timer > 86400)) {
            throw new \InvalidArgumentException('invalid value for $sta_locate_timer when calling InlineObject604., must be smaller than or equal to 86400.');
        }
        if (!is_null($sta_locate_timer) && ($sta_locate_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $sta_locate_timer when calling InlineObject604., must be bigger than or equal to 0.');
        }

        $this->container['sta_locate_timer'] = $sta_locate_timer;

        return $this;
    }

    /**
     * Gets ipsec_intf_cleanup
     *
     * @return int|null
     */
    public function getIpsecIntfCleanup()
    {
        return $this->container['ipsec_intf_cleanup'];
    }

    /**
     * Sets ipsec_intf_cleanup
     *
     * @param int|null $ipsec_intf_cleanup Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
     *
     * @return self
     */
    public function setIpsecIntfCleanup($ipsec_intf_cleanup)
    {

        if (!is_null($ipsec_intf_cleanup) && ($ipsec_intf_cleanup > 3600)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_intf_cleanup when calling InlineObject604., must be smaller than or equal to 3600.');
        }
        if (!is_null($ipsec_intf_cleanup) && ($ipsec_intf_cleanup < 30)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_intf_cleanup when calling InlineObject604., must be bigger than or equal to 30.');
        }

        $this->container['ipsec_intf_cleanup'] = $ipsec_intf_cleanup;

        return $this;
    }

    /**
     * Gets ble_scan_report_intv
     *
     * @return int|null
     */
    public function getBleScanReportIntv()
    {
        return $this->container['ble_scan_report_intv'];
    }

    /**
     * Sets ble_scan_report_intv
     *
     * @param int|null $ble_scan_report_intv Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
     *
     * @return self
     */
    public function setBleScanReportIntv($ble_scan_report_intv)
    {

        if (!is_null($ble_scan_report_intv) && ($ble_scan_report_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $ble_scan_report_intv when calling InlineObject604., must be smaller than or equal to 3600.');
        }
        if (!is_null($ble_scan_report_intv) && ($ble_scan_report_intv < 10)) {
            throw new \InvalidArgumentException('invalid value for $ble_scan_report_intv when calling InlineObject604., must be bigger than or equal to 10.');
        }

        $this->container['ble_scan_report_intv'] = $ble_scan_report_intv;

        return $this;
    }

    /**
     * Gets drma_interval
     *
     * @return int|null
     */
    public function getDrmaInterval()
    {
        return $this->container['drma_interval'];
    }

    /**
     * Sets drma_interval
     *
     * @param int|null $drma_interval Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
     *
     * @return self
     */
    public function setDrmaInterval($drma_interval)
    {

        if (!is_null($drma_interval) && ($drma_interval > 1440)) {
            throw new \InvalidArgumentException('invalid value for $drma_interval when calling InlineObject604., must be smaller than or equal to 1440.');
        }
        if (!is_null($drma_interval) && ($drma_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $drma_interval when calling InlineObject604., must be bigger than or equal to 1.');
        }

        $this->container['drma_interval'] = $drma_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


