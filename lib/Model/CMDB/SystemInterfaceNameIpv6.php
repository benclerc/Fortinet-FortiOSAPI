<?php
/**
 * SystemInterfaceNameIpv6
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemInterfaceNameIpv6 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemInterfaceNameIpv6 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_interface__name__ipv6';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip6_mode' => 'string',
        'nd_mode' => 'string',
        'nd_cert' => 'string',
        'nd_security_level' => 'int',
        'nd_timestamp_delta' => 'int',
        'nd_timestamp_fuzz' => 'int',
        'nd_cga_modifier' => 'string',
        'ip6_dns_server_override' => 'string',
        'ip6_address' => 'string',
        'ip6_extra_addr' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6ExtraAddr[]',
        'ip6_allowaccess' => 'string',
        'ip6_send_adv' => 'string',
        'icmp6_send_redirect' => 'string',
        'ip6_manage_flag' => 'string',
        'ip6_other_flag' => 'string',
        'ip6_max_interval' => 'int',
        'ip6_min_interval' => 'int',
        'ip6_link_mtu' => 'int',
        'ip6_reachable_time' => 'int',
        'ip6_retrans_time' => 'int',
        'ip6_default_life' => 'int',
        'ip6_hop_limit' => 'int',
        'autoconf' => 'string',
        'unique_autoconf_addr' => 'string',
        'interface_identifier' => 'string',
        'ip6_upstream_interface' => 'string',
        'ip6_subnet' => 'string',
        'ip6_prefix_list' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6PrefixList[]',
        'ip6_delegated_prefix_list' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6DelegatedPrefixList[]',
        'dhcp6_relay_service' => 'string',
        'dhcp6_relay_type' => 'string',
        'dhcp6_relay_ip' => 'string',
        'dhcp6_client_options' => 'string',
        'dhcp6_prefix_delegation' => 'string',
        'dhcp6_information_request' => 'string',
        'dhcp6_prefix_hint' => 'string',
        'dhcp6_prefix_hint_plt' => 'int',
        'dhcp6_prefix_hint_vlt' => 'int',
        'vrrp_virtual_mac6' => 'string',
        'vrip6_link_local' => 'string',
        'vrrp6' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp6[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip6_mode' => null,
        'nd_mode' => null,
        'nd_cert' => null,
        'nd_security_level' => null,
        'nd_timestamp_delta' => null,
        'nd_timestamp_fuzz' => null,
        'nd_cga_modifier' => null,
        'ip6_dns_server_override' => null,
        'ip6_address' => 'ipv6',
        'ip6_extra_addr' => null,
        'ip6_allowaccess' => null,
        'ip6_send_adv' => null,
        'icmp6_send_redirect' => null,
        'ip6_manage_flag' => null,
        'ip6_other_flag' => null,
        'ip6_max_interval' => null,
        'ip6_min_interval' => null,
        'ip6_link_mtu' => null,
        'ip6_reachable_time' => null,
        'ip6_retrans_time' => null,
        'ip6_default_life' => null,
        'ip6_hop_limit' => null,
        'autoconf' => null,
        'unique_autoconf_addr' => null,
        'interface_identifier' => 'ipv6',
        'ip6_upstream_interface' => null,
        'ip6_subnet' => 'ipv6',
        'ip6_prefix_list' => null,
        'ip6_delegated_prefix_list' => null,
        'dhcp6_relay_service' => null,
        'dhcp6_relay_type' => null,
        'dhcp6_relay_ip' => null,
        'dhcp6_client_options' => null,
        'dhcp6_prefix_delegation' => null,
        'dhcp6_information_request' => null,
        'dhcp6_prefix_hint' => null,
        'dhcp6_prefix_hint_plt' => null,
        'dhcp6_prefix_hint_vlt' => null,
        'vrrp_virtual_mac6' => null,
        'vrip6_link_local' => 'ipv6',
        'vrrp6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip6_mode' => 'ip6-mode',
        'nd_mode' => 'nd-mode',
        'nd_cert' => 'nd-cert',
        'nd_security_level' => 'nd-security-level',
        'nd_timestamp_delta' => 'nd-timestamp-delta',
        'nd_timestamp_fuzz' => 'nd-timestamp-fuzz',
        'nd_cga_modifier' => 'nd-cga-modifier',
        'ip6_dns_server_override' => 'ip6-dns-server-override',
        'ip6_address' => 'ip6-address',
        'ip6_extra_addr' => 'ip6-extra-addr',
        'ip6_allowaccess' => 'ip6-allowaccess',
        'ip6_send_adv' => 'ip6-send-adv',
        'icmp6_send_redirect' => 'icmp6-send-redirect',
        'ip6_manage_flag' => 'ip6-manage-flag',
        'ip6_other_flag' => 'ip6-other-flag',
        'ip6_max_interval' => 'ip6-max-interval',
        'ip6_min_interval' => 'ip6-min-interval',
        'ip6_link_mtu' => 'ip6-link-mtu',
        'ip6_reachable_time' => 'ip6-reachable-time',
        'ip6_retrans_time' => 'ip6-retrans-time',
        'ip6_default_life' => 'ip6-default-life',
        'ip6_hop_limit' => 'ip6-hop-limit',
        'autoconf' => 'autoconf',
        'unique_autoconf_addr' => 'unique-autoconf-addr',
        'interface_identifier' => 'interface-identifier',
        'ip6_upstream_interface' => 'ip6-upstream-interface',
        'ip6_subnet' => 'ip6-subnet',
        'ip6_prefix_list' => 'ip6-prefix-list',
        'ip6_delegated_prefix_list' => 'ip6-delegated-prefix-list',
        'dhcp6_relay_service' => 'dhcp6-relay-service',
        'dhcp6_relay_type' => 'dhcp6-relay-type',
        'dhcp6_relay_ip' => 'dhcp6-relay-ip',
        'dhcp6_client_options' => 'dhcp6-client-options',
        'dhcp6_prefix_delegation' => 'dhcp6-prefix-delegation',
        'dhcp6_information_request' => 'dhcp6-information-request',
        'dhcp6_prefix_hint' => 'dhcp6-prefix-hint',
        'dhcp6_prefix_hint_plt' => 'dhcp6-prefix-hint-plt',
        'dhcp6_prefix_hint_vlt' => 'dhcp6-prefix-hint-vlt',
        'vrrp_virtual_mac6' => 'vrrp-virtual-mac6',
        'vrip6_link_local' => 'vrip6_link_local',
        'vrrp6' => 'vrrp6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip6_mode' => 'setIp6Mode',
        'nd_mode' => 'setNdMode',
        'nd_cert' => 'setNdCert',
        'nd_security_level' => 'setNdSecurityLevel',
        'nd_timestamp_delta' => 'setNdTimestampDelta',
        'nd_timestamp_fuzz' => 'setNdTimestampFuzz',
        'nd_cga_modifier' => 'setNdCgaModifier',
        'ip6_dns_server_override' => 'setIp6DnsServerOverride',
        'ip6_address' => 'setIp6Address',
        'ip6_extra_addr' => 'setIp6ExtraAddr',
        'ip6_allowaccess' => 'setIp6Allowaccess',
        'ip6_send_adv' => 'setIp6SendAdv',
        'icmp6_send_redirect' => 'setIcmp6SendRedirect',
        'ip6_manage_flag' => 'setIp6ManageFlag',
        'ip6_other_flag' => 'setIp6OtherFlag',
        'ip6_max_interval' => 'setIp6MaxInterval',
        'ip6_min_interval' => 'setIp6MinInterval',
        'ip6_link_mtu' => 'setIp6LinkMtu',
        'ip6_reachable_time' => 'setIp6ReachableTime',
        'ip6_retrans_time' => 'setIp6RetransTime',
        'ip6_default_life' => 'setIp6DefaultLife',
        'ip6_hop_limit' => 'setIp6HopLimit',
        'autoconf' => 'setAutoconf',
        'unique_autoconf_addr' => 'setUniqueAutoconfAddr',
        'interface_identifier' => 'setInterfaceIdentifier',
        'ip6_upstream_interface' => 'setIp6UpstreamInterface',
        'ip6_subnet' => 'setIp6Subnet',
        'ip6_prefix_list' => 'setIp6PrefixList',
        'ip6_delegated_prefix_list' => 'setIp6DelegatedPrefixList',
        'dhcp6_relay_service' => 'setDhcp6RelayService',
        'dhcp6_relay_type' => 'setDhcp6RelayType',
        'dhcp6_relay_ip' => 'setDhcp6RelayIp',
        'dhcp6_client_options' => 'setDhcp6ClientOptions',
        'dhcp6_prefix_delegation' => 'setDhcp6PrefixDelegation',
        'dhcp6_information_request' => 'setDhcp6InformationRequest',
        'dhcp6_prefix_hint' => 'setDhcp6PrefixHint',
        'dhcp6_prefix_hint_plt' => 'setDhcp6PrefixHintPlt',
        'dhcp6_prefix_hint_vlt' => 'setDhcp6PrefixHintVlt',
        'vrrp_virtual_mac6' => 'setVrrpVirtualMac6',
        'vrip6_link_local' => 'setVrip6LinkLocal',
        'vrrp6' => 'setVrrp6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip6_mode' => 'getIp6Mode',
        'nd_mode' => 'getNdMode',
        'nd_cert' => 'getNdCert',
        'nd_security_level' => 'getNdSecurityLevel',
        'nd_timestamp_delta' => 'getNdTimestampDelta',
        'nd_timestamp_fuzz' => 'getNdTimestampFuzz',
        'nd_cga_modifier' => 'getNdCgaModifier',
        'ip6_dns_server_override' => 'getIp6DnsServerOverride',
        'ip6_address' => 'getIp6Address',
        'ip6_extra_addr' => 'getIp6ExtraAddr',
        'ip6_allowaccess' => 'getIp6Allowaccess',
        'ip6_send_adv' => 'getIp6SendAdv',
        'icmp6_send_redirect' => 'getIcmp6SendRedirect',
        'ip6_manage_flag' => 'getIp6ManageFlag',
        'ip6_other_flag' => 'getIp6OtherFlag',
        'ip6_max_interval' => 'getIp6MaxInterval',
        'ip6_min_interval' => 'getIp6MinInterval',
        'ip6_link_mtu' => 'getIp6LinkMtu',
        'ip6_reachable_time' => 'getIp6ReachableTime',
        'ip6_retrans_time' => 'getIp6RetransTime',
        'ip6_default_life' => 'getIp6DefaultLife',
        'ip6_hop_limit' => 'getIp6HopLimit',
        'autoconf' => 'getAutoconf',
        'unique_autoconf_addr' => 'getUniqueAutoconfAddr',
        'interface_identifier' => 'getInterfaceIdentifier',
        'ip6_upstream_interface' => 'getIp6UpstreamInterface',
        'ip6_subnet' => 'getIp6Subnet',
        'ip6_prefix_list' => 'getIp6PrefixList',
        'ip6_delegated_prefix_list' => 'getIp6DelegatedPrefixList',
        'dhcp6_relay_service' => 'getDhcp6RelayService',
        'dhcp6_relay_type' => 'getDhcp6RelayType',
        'dhcp6_relay_ip' => 'getDhcp6RelayIp',
        'dhcp6_client_options' => 'getDhcp6ClientOptions',
        'dhcp6_prefix_delegation' => 'getDhcp6PrefixDelegation',
        'dhcp6_information_request' => 'getDhcp6InformationRequest',
        'dhcp6_prefix_hint' => 'getDhcp6PrefixHint',
        'dhcp6_prefix_hint_plt' => 'getDhcp6PrefixHintPlt',
        'dhcp6_prefix_hint_vlt' => 'getDhcp6PrefixHintVlt',
        'vrrp_virtual_mac6' => 'getVrrpVirtualMac6',
        'vrip6_link_local' => 'getVrip6LinkLocal',
        'vrrp6' => 'getVrrp6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IP6_MODE__STATIC = 'static';
    const IP6_MODE_DHCP = 'dhcp';
    const IP6_MODE_PPPOE = 'pppoe';
    const IP6_MODE_DELEGATED = 'delegated';
    const ND_MODE_BASIC = 'basic';
    const ND_MODE_SEND_COMPATIBLE = 'SEND-compatible';
    const IP6_DNS_SERVER_OVERRIDE_ENABLE = 'enable';
    const IP6_DNS_SERVER_OVERRIDE_DISABLE = 'disable';
    const IP6_ALLOWACCESS_PING = 'ping';
    const IP6_ALLOWACCESS_HTTPS = 'https';
    const IP6_ALLOWACCESS_SSH = 'ssh';
    const IP6_ALLOWACCESS_SNMP = 'snmp';
    const IP6_ALLOWACCESS_HTTP = 'http';
    const IP6_ALLOWACCESS_TELNET = 'telnet';
    const IP6_ALLOWACCESS_FGFM = 'fgfm';
    const IP6_ALLOWACCESS_FABRIC = 'fabric';
    const IP6_SEND_ADV_ENABLE = 'enable';
    const IP6_SEND_ADV_DISABLE = 'disable';
    const ICMP6_SEND_REDIRECT_ENABLE = 'enable';
    const ICMP6_SEND_REDIRECT_DISABLE = 'disable';
    const IP6_MANAGE_FLAG_ENABLE = 'enable';
    const IP6_MANAGE_FLAG_DISABLE = 'disable';
    const IP6_OTHER_FLAG_ENABLE = 'enable';
    const IP6_OTHER_FLAG_DISABLE = 'disable';
    const AUTOCONF_ENABLE = 'enable';
    const AUTOCONF_DISABLE = 'disable';
    const UNIQUE_AUTOCONF_ADDR_ENABLE = 'enable';
    const UNIQUE_AUTOCONF_ADDR_DISABLE = 'disable';
    const DHCP6_RELAY_SERVICE_DISABLE = 'disable';
    const DHCP6_RELAY_SERVICE_ENABLE = 'enable';
    const DHCP6_RELAY_TYPE_REGULAR = 'regular';
    const DHCP6_CLIENT_OPTIONS_RAPID = 'rapid';
    const DHCP6_CLIENT_OPTIONS_IAPD = 'iapd';
    const DHCP6_CLIENT_OPTIONS_IANA = 'iana';
    const DHCP6_PREFIX_DELEGATION_ENABLE = 'enable';
    const DHCP6_PREFIX_DELEGATION_DISABLE = 'disable';
    const DHCP6_INFORMATION_REQUEST_ENABLE = 'enable';
    const DHCP6_INFORMATION_REQUEST_DISABLE = 'disable';
    const VRRP_VIRTUAL_MAC6_ENABLE = 'enable';
    const VRRP_VIRTUAL_MAC6_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6ModeAllowableValues()
    {
        return [
            self::IP6_MODE__STATIC,
            self::IP6_MODE_DHCP,
            self::IP6_MODE_PPPOE,
            self::IP6_MODE_DELEGATED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNdModeAllowableValues()
    {
        return [
            self::ND_MODE_BASIC,
            self::ND_MODE_SEND_COMPATIBLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6DnsServerOverrideAllowableValues()
    {
        return [
            self::IP6_DNS_SERVER_OVERRIDE_ENABLE,
            self::IP6_DNS_SERVER_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6AllowaccessAllowableValues()
    {
        return [
            self::IP6_ALLOWACCESS_PING,
            self::IP6_ALLOWACCESS_HTTPS,
            self::IP6_ALLOWACCESS_SSH,
            self::IP6_ALLOWACCESS_SNMP,
            self::IP6_ALLOWACCESS_HTTP,
            self::IP6_ALLOWACCESS_TELNET,
            self::IP6_ALLOWACCESS_FGFM,
            self::IP6_ALLOWACCESS_FABRIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6SendAdvAllowableValues()
    {
        return [
            self::IP6_SEND_ADV_ENABLE,
            self::IP6_SEND_ADV_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmp6SendRedirectAllowableValues()
    {
        return [
            self::ICMP6_SEND_REDIRECT_ENABLE,
            self::ICMP6_SEND_REDIRECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6ManageFlagAllowableValues()
    {
        return [
            self::IP6_MANAGE_FLAG_ENABLE,
            self::IP6_MANAGE_FLAG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIp6OtherFlagAllowableValues()
    {
        return [
            self::IP6_OTHER_FLAG_ENABLE,
            self::IP6_OTHER_FLAG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoconfAllowableValues()
    {
        return [
            self::AUTOCONF_ENABLE,
            self::AUTOCONF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUniqueAutoconfAddrAllowableValues()
    {
        return [
            self::UNIQUE_AUTOCONF_ADDR_ENABLE,
            self::UNIQUE_AUTOCONF_ADDR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcp6RelayServiceAllowableValues()
    {
        return [
            self::DHCP6_RELAY_SERVICE_DISABLE,
            self::DHCP6_RELAY_SERVICE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcp6RelayTypeAllowableValues()
    {
        return [
            self::DHCP6_RELAY_TYPE_REGULAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcp6ClientOptionsAllowableValues()
    {
        return [
            self::DHCP6_CLIENT_OPTIONS_RAPID,
            self::DHCP6_CLIENT_OPTIONS_IAPD,
            self::DHCP6_CLIENT_OPTIONS_IANA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcp6PrefixDelegationAllowableValues()
    {
        return [
            self::DHCP6_PREFIX_DELEGATION_ENABLE,
            self::DHCP6_PREFIX_DELEGATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcp6InformationRequestAllowableValues()
    {
        return [
            self::DHCP6_INFORMATION_REQUEST_ENABLE,
            self::DHCP6_INFORMATION_REQUEST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVrrpVirtualMac6AllowableValues()
    {
        return [
            self::VRRP_VIRTUAL_MAC6_ENABLE,
            self::VRRP_VIRTUAL_MAC6_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip6_mode'] = $data['ip6_mode'] ?? null;
        $this->container['nd_mode'] = $data['nd_mode'] ?? null;
        $this->container['nd_cert'] = $data['nd_cert'] ?? null;
        $this->container['nd_security_level'] = $data['nd_security_level'] ?? null;
        $this->container['nd_timestamp_delta'] = $data['nd_timestamp_delta'] ?? null;
        $this->container['nd_timestamp_fuzz'] = $data['nd_timestamp_fuzz'] ?? null;
        $this->container['nd_cga_modifier'] = $data['nd_cga_modifier'] ?? null;
        $this->container['ip6_dns_server_override'] = $data['ip6_dns_server_override'] ?? null;
        $this->container['ip6_address'] = $data['ip6_address'] ?? null;
        $this->container['ip6_extra_addr'] = $data['ip6_extra_addr'] ?? null;
        $this->container['ip6_allowaccess'] = $data['ip6_allowaccess'] ?? null;
        $this->container['ip6_send_adv'] = $data['ip6_send_adv'] ?? null;
        $this->container['icmp6_send_redirect'] = $data['icmp6_send_redirect'] ?? null;
        $this->container['ip6_manage_flag'] = $data['ip6_manage_flag'] ?? null;
        $this->container['ip6_other_flag'] = $data['ip6_other_flag'] ?? null;
        $this->container['ip6_max_interval'] = $data['ip6_max_interval'] ?? null;
        $this->container['ip6_min_interval'] = $data['ip6_min_interval'] ?? null;
        $this->container['ip6_link_mtu'] = $data['ip6_link_mtu'] ?? null;
        $this->container['ip6_reachable_time'] = $data['ip6_reachable_time'] ?? null;
        $this->container['ip6_retrans_time'] = $data['ip6_retrans_time'] ?? null;
        $this->container['ip6_default_life'] = $data['ip6_default_life'] ?? null;
        $this->container['ip6_hop_limit'] = $data['ip6_hop_limit'] ?? null;
        $this->container['autoconf'] = $data['autoconf'] ?? null;
        $this->container['unique_autoconf_addr'] = $data['unique_autoconf_addr'] ?? null;
        $this->container['interface_identifier'] = $data['interface_identifier'] ?? null;
        $this->container['ip6_upstream_interface'] = $data['ip6_upstream_interface'] ?? null;
        $this->container['ip6_subnet'] = $data['ip6_subnet'] ?? null;
        $this->container['ip6_prefix_list'] = $data['ip6_prefix_list'] ?? null;
        $this->container['ip6_delegated_prefix_list'] = $data['ip6_delegated_prefix_list'] ?? null;
        $this->container['dhcp6_relay_service'] = $data['dhcp6_relay_service'] ?? null;
        $this->container['dhcp6_relay_type'] = $data['dhcp6_relay_type'] ?? null;
        $this->container['dhcp6_relay_ip'] = $data['dhcp6_relay_ip'] ?? null;
        $this->container['dhcp6_client_options'] = $data['dhcp6_client_options'] ?? null;
        $this->container['dhcp6_prefix_delegation'] = $data['dhcp6_prefix_delegation'] ?? null;
        $this->container['dhcp6_information_request'] = $data['dhcp6_information_request'] ?? null;
        $this->container['dhcp6_prefix_hint'] = $data['dhcp6_prefix_hint'] ?? null;
        $this->container['dhcp6_prefix_hint_plt'] = $data['dhcp6_prefix_hint_plt'] ?? null;
        $this->container['dhcp6_prefix_hint_vlt'] = $data['dhcp6_prefix_hint_vlt'] ?? null;
        $this->container['vrrp_virtual_mac6'] = $data['vrrp_virtual_mac6'] ?? null;
        $this->container['vrip6_link_local'] = $data['vrip6_link_local'] ?? null;
        $this->container['vrrp6'] = $data['vrrp6'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIp6ModeAllowableValues();
        if (!is_null($this->container['ip6_mode']) && !in_array($this->container['ip6_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_mode', must be one of '%s'",
                $this->container['ip6_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNdModeAllowableValues();
        if (!is_null($this->container['nd_mode']) && !in_array($this->container['nd_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nd_mode', must be one of '%s'",
                $this->container['nd_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nd_cert']) && (mb_strlen($this->container['nd_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'nd_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['nd_security_level']) && ($this->container['nd_security_level'] > 7)) {
            $invalidProperties[] = "invalid value for 'nd_security_level', must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['nd_security_level']) && ($this->container['nd_security_level'] < 0)) {
            $invalidProperties[] = "invalid value for 'nd_security_level', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['nd_timestamp_delta']) && ($this->container['nd_timestamp_delta'] > 3600)) {
            $invalidProperties[] = "invalid value for 'nd_timestamp_delta', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['nd_timestamp_delta']) && ($this->container['nd_timestamp_delta'] < 1)) {
            $invalidProperties[] = "invalid value for 'nd_timestamp_delta', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nd_timestamp_fuzz']) && ($this->container['nd_timestamp_fuzz'] > 60)) {
            $invalidProperties[] = "invalid value for 'nd_timestamp_fuzz', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['nd_timestamp_fuzz']) && ($this->container['nd_timestamp_fuzz'] < 1)) {
            $invalidProperties[] = "invalid value for 'nd_timestamp_fuzz', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIp6DnsServerOverrideAllowableValues();
        if (!is_null($this->container['ip6_dns_server_override']) && !in_array($this->container['ip6_dns_server_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_dns_server_override', must be one of '%s'",
                $this->container['ip6_dns_server_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ip6_extra_addr']) && (count($this->container['ip6_extra_addr']) > 0)) {
            $invalidProperties[] = "invalid value for 'ip6_extra_addr', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getIp6AllowaccessAllowableValues();
        if (!is_null($this->container['ip6_allowaccess']) && !in_array($this->container['ip6_allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_allowaccess', must be one of '%s'",
                $this->container['ip6_allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIp6SendAdvAllowableValues();
        if (!is_null($this->container['ip6_send_adv']) && !in_array($this->container['ip6_send_adv'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_send_adv', must be one of '%s'",
                $this->container['ip6_send_adv'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIcmp6SendRedirectAllowableValues();
        if (!is_null($this->container['icmp6_send_redirect']) && !in_array($this->container['icmp6_send_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp6_send_redirect', must be one of '%s'",
                $this->container['icmp6_send_redirect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIp6ManageFlagAllowableValues();
        if (!is_null($this->container['ip6_manage_flag']) && !in_array($this->container['ip6_manage_flag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_manage_flag', must be one of '%s'",
                $this->container['ip6_manage_flag'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIp6OtherFlagAllowableValues();
        if (!is_null($this->container['ip6_other_flag']) && !in_array($this->container['ip6_other_flag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip6_other_flag', must be one of '%s'",
                $this->container['ip6_other_flag'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ip6_max_interval']) && ($this->container['ip6_max_interval'] > 1800)) {
            $invalidProperties[] = "invalid value for 'ip6_max_interval', must be smaller than or equal to 1800.";
        }

        if (!is_null($this->container['ip6_max_interval']) && ($this->container['ip6_max_interval'] < 4)) {
            $invalidProperties[] = "invalid value for 'ip6_max_interval', must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['ip6_min_interval']) && ($this->container['ip6_min_interval'] > 1350)) {
            $invalidProperties[] = "invalid value for 'ip6_min_interval', must be smaller than or equal to 1350.";
        }

        if (!is_null($this->container['ip6_min_interval']) && ($this->container['ip6_min_interval'] < 3)) {
            $invalidProperties[] = "invalid value for 'ip6_min_interval', must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['ip6_link_mtu']) && ($this->container['ip6_link_mtu'] > 16000)) {
            $invalidProperties[] = "invalid value for 'ip6_link_mtu', must be smaller than or equal to 16000.";
        }

        if (!is_null($this->container['ip6_link_mtu']) && ($this->container['ip6_link_mtu'] < 1280)) {
            $invalidProperties[] = "invalid value for 'ip6_link_mtu', must be bigger than or equal to 1280.";
        }

        if (!is_null($this->container['ip6_reachable_time']) && ($this->container['ip6_reachable_time'] > 3600000)) {
            $invalidProperties[] = "invalid value for 'ip6_reachable_time', must be smaller than or equal to 3600000.";
        }

        if (!is_null($this->container['ip6_reachable_time']) && ($this->container['ip6_reachable_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'ip6_reachable_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip6_retrans_time']) && ($this->container['ip6_retrans_time'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'ip6_retrans_time', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['ip6_retrans_time']) && ($this->container['ip6_retrans_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'ip6_retrans_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip6_default_life']) && ($this->container['ip6_default_life'] > 9000)) {
            $invalidProperties[] = "invalid value for 'ip6_default_life', must be smaller than or equal to 9000.";
        }

        if (!is_null($this->container['ip6_default_life']) && ($this->container['ip6_default_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'ip6_default_life', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip6_hop_limit']) && ($this->container['ip6_hop_limit'] > 255)) {
            $invalidProperties[] = "invalid value for 'ip6_hop_limit', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ip6_hop_limit']) && ($this->container['ip6_hop_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'ip6_hop_limit', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAutoconfAllowableValues();
        if (!is_null($this->container['autoconf']) && !in_array($this->container['autoconf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'autoconf', must be one of '%s'",
                $this->container['autoconf'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUniqueAutoconfAddrAllowableValues();
        if (!is_null($this->container['unique_autoconf_addr']) && !in_array($this->container['unique_autoconf_addr'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unique_autoconf_addr', must be one of '%s'",
                $this->container['unique_autoconf_addr'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ip6_upstream_interface']) && (mb_strlen($this->container['ip6_upstream_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'ip6_upstream_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['ip6_prefix_list']) && (count($this->container['ip6_prefix_list']) > 32)) {
            $invalidProperties[] = "invalid value for 'ip6_prefix_list', number of items must be less than or equal to 32.";
        }

        if (!is_null($this->container['ip6_delegated_prefix_list']) && (count($this->container['ip6_delegated_prefix_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'ip6_delegated_prefix_list', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getDhcp6RelayServiceAllowableValues();
        if (!is_null($this->container['dhcp6_relay_service']) && !in_array($this->container['dhcp6_relay_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp6_relay_service', must be one of '%s'",
                $this->container['dhcp6_relay_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcp6RelayTypeAllowableValues();
        if (!is_null($this->container['dhcp6_relay_type']) && !in_array($this->container['dhcp6_relay_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp6_relay_type', must be one of '%s'",
                $this->container['dhcp6_relay_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcp6ClientOptionsAllowableValues();
        if (!is_null($this->container['dhcp6_client_options']) && !in_array($this->container['dhcp6_client_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp6_client_options', must be one of '%s'",
                $this->container['dhcp6_client_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcp6PrefixDelegationAllowableValues();
        if (!is_null($this->container['dhcp6_prefix_delegation']) && !in_array($this->container['dhcp6_prefix_delegation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp6_prefix_delegation', must be one of '%s'",
                $this->container['dhcp6_prefix_delegation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcp6InformationRequestAllowableValues();
        if (!is_null($this->container['dhcp6_information_request']) && !in_array($this->container['dhcp6_information_request'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp6_information_request', must be one of '%s'",
                $this->container['dhcp6_information_request'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dhcp6_prefix_hint_plt']) && ($this->container['dhcp6_prefix_hint_plt'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'dhcp6_prefix_hint_plt', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['dhcp6_prefix_hint_plt']) && ($this->container['dhcp6_prefix_hint_plt'] < 0)) {
            $invalidProperties[] = "invalid value for 'dhcp6_prefix_hint_plt', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dhcp6_prefix_hint_vlt']) && ($this->container['dhcp6_prefix_hint_vlt'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'dhcp6_prefix_hint_vlt', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['dhcp6_prefix_hint_vlt']) && ($this->container['dhcp6_prefix_hint_vlt'] < 0)) {
            $invalidProperties[] = "invalid value for 'dhcp6_prefix_hint_vlt', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getVrrpVirtualMac6AllowableValues();
        if (!is_null($this->container['vrrp_virtual_mac6']) && !in_array($this->container['vrrp_virtual_mac6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vrrp_virtual_mac6', must be one of '%s'",
                $this->container['vrrp_virtual_mac6'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vrrp6']) && (count($this->container['vrrp6']) > 0)) {
            $invalidProperties[] = "invalid value for 'vrrp6', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip6_mode
     *
     * @return string|null
     */
    public function getIp6Mode()
    {
        return $this->container['ip6_mode'];
    }

    /**
     * Sets ip6_mode
     *
     * @param string|null $ip6_mode Addressing mode (static, DHCP, delegated).    static:Static setting.    dhcp:DHCPv6 client mode.    pppoe:IPv6 over PPPoE mode.    delegated:IPv6 address with delegated prefix.
     *
     * @return self
     */
    public function setIp6Mode($ip6_mode)
    {
        $allowedValues = $this->getIp6ModeAllowableValues();
        if (!is_null($ip6_mode) && !in_array($ip6_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_mode', must be one of '%s'",
                    $ip6_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_mode'] = $ip6_mode;

        return $this;
    }

    /**
     * Gets nd_mode
     *
     * @return string|null
     */
    public function getNdMode()
    {
        return $this->container['nd_mode'];
    }

    /**
     * Sets nd_mode
     *
     * @param string|null $nd_mode Neighbor discovery mode.    basic:Do not support SEND.    SEND-compatible:Support SEND.
     *
     * @return self
     */
    public function setNdMode($nd_mode)
    {
        $allowedValues = $this->getNdModeAllowableValues();
        if (!is_null($nd_mode) && !in_array($nd_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nd_mode', must be one of '%s'",
                    $nd_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nd_mode'] = $nd_mode;

        return $this;
    }

    /**
     * Gets nd_cert
     *
     * @return string|null
     */
    public function getNdCert()
    {
        return $this->container['nd_cert'];
    }

    /**
     * Sets nd_cert
     *
     * @param string|null $nd_cert Neighbor discovery certificate.
     *
     * @return self
     */
    public function setNdCert($nd_cert)
    {
        if (!is_null($nd_cert) && (mb_strlen($nd_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $nd_cert when calling SystemInterfaceNameIpv6., must be smaller than or equal to 35.');
        }

        $this->container['nd_cert'] = $nd_cert;

        return $this;
    }

    /**
     * Gets nd_security_level
     *
     * @return int|null
     */
    public function getNdSecurityLevel()
    {
        return $this->container['nd_security_level'];
    }

    /**
     * Sets nd_security_level
     *
     * @param int|null $nd_security_level Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
     *
     * @return self
     */
    public function setNdSecurityLevel($nd_security_level)
    {

        if (!is_null($nd_security_level) && ($nd_security_level > 7)) {
            throw new \InvalidArgumentException('invalid value for $nd_security_level when calling SystemInterfaceNameIpv6., must be smaller than or equal to 7.');
        }
        if (!is_null($nd_security_level) && ($nd_security_level < 0)) {
            throw new \InvalidArgumentException('invalid value for $nd_security_level when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['nd_security_level'] = $nd_security_level;

        return $this;
    }

    /**
     * Gets nd_timestamp_delta
     *
     * @return int|null
     */
    public function getNdTimestampDelta()
    {
        return $this->container['nd_timestamp_delta'];
    }

    /**
     * Sets nd_timestamp_delta
     *
     * @param int|null $nd_timestamp_delta Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
     *
     * @return self
     */
    public function setNdTimestampDelta($nd_timestamp_delta)
    {

        if (!is_null($nd_timestamp_delta) && ($nd_timestamp_delta > 3600)) {
            throw new \InvalidArgumentException('invalid value for $nd_timestamp_delta when calling SystemInterfaceNameIpv6., must be smaller than or equal to 3600.');
        }
        if (!is_null($nd_timestamp_delta) && ($nd_timestamp_delta < 1)) {
            throw new \InvalidArgumentException('invalid value for $nd_timestamp_delta when calling SystemInterfaceNameIpv6., must be bigger than or equal to 1.');
        }

        $this->container['nd_timestamp_delta'] = $nd_timestamp_delta;

        return $this;
    }

    /**
     * Gets nd_timestamp_fuzz
     *
     * @return int|null
     */
    public function getNdTimestampFuzz()
    {
        return $this->container['nd_timestamp_fuzz'];
    }

    /**
     * Sets nd_timestamp_fuzz
     *
     * @param int|null $nd_timestamp_fuzz Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
     *
     * @return self
     */
    public function setNdTimestampFuzz($nd_timestamp_fuzz)
    {

        if (!is_null($nd_timestamp_fuzz) && ($nd_timestamp_fuzz > 60)) {
            throw new \InvalidArgumentException('invalid value for $nd_timestamp_fuzz when calling SystemInterfaceNameIpv6., must be smaller than or equal to 60.');
        }
        if (!is_null($nd_timestamp_fuzz) && ($nd_timestamp_fuzz < 1)) {
            throw new \InvalidArgumentException('invalid value for $nd_timestamp_fuzz when calling SystemInterfaceNameIpv6., must be bigger than or equal to 1.');
        }

        $this->container['nd_timestamp_fuzz'] = $nd_timestamp_fuzz;

        return $this;
    }

    /**
     * Gets nd_cga_modifier
     *
     * @return string|null
     */
    public function getNdCgaModifier()
    {
        return $this->container['nd_cga_modifier'];
    }

    /**
     * Sets nd_cga_modifier
     *
     * @param string|null $nd_cga_modifier Neighbor discovery CGA modifier.
     *
     * @return self
     */
    public function setNdCgaModifier($nd_cga_modifier)
    {
        $this->container['nd_cga_modifier'] = $nd_cga_modifier;

        return $this;
    }

    /**
     * Gets ip6_dns_server_override
     *
     * @return string|null
     */
    public function getIp6DnsServerOverride()
    {
        return $this->container['ip6_dns_server_override'];
    }

    /**
     * Sets ip6_dns_server_override
     *
     * @param string|null $ip6_dns_server_override Enable/disable using the DNS server acquired by DHCP.    enable:Enable using the DNS server acquired by DHCP.    disable:Disable using the DNS server acquired by DHCP.
     *
     * @return self
     */
    public function setIp6DnsServerOverride($ip6_dns_server_override)
    {
        $allowedValues = $this->getIp6DnsServerOverrideAllowableValues();
        if (!is_null($ip6_dns_server_override) && !in_array($ip6_dns_server_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_dns_server_override', must be one of '%s'",
                    $ip6_dns_server_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_dns_server_override'] = $ip6_dns_server_override;

        return $this;
    }

    /**
     * Gets ip6_address
     *
     * @return string|null
     */
    public function getIp6Address()
    {
        return $this->container['ip6_address'];
    }

    /**
     * Sets ip6_address
     *
     * @param string|null $ip6_address Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     *
     * @return self
     */
    public function setIp6Address($ip6_address)
    {
        $this->container['ip6_address'] = $ip6_address;

        return $this;
    }

    /**
     * Gets ip6_extra_addr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6ExtraAddr[]|null
     */
    public function getIp6ExtraAddr()
    {
        return $this->container['ip6_extra_addr'];
    }

    /**
     * Sets ip6_extra_addr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6ExtraAddr[]|null $ip6_extra_addr Extra IPv6 address prefixes of interface.
     *
     * @return self
     */
    public function setIp6ExtraAddr($ip6_extra_addr)
    {

        if (!is_null($ip6_extra_addr) && (count($ip6_extra_addr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_extra_addr when calling SystemInterfaceNameIpv6., number of items must be less than or equal to 0.');
        }
        $this->container['ip6_extra_addr'] = $ip6_extra_addr;

        return $this;
    }

    /**
     * Gets ip6_allowaccess
     *
     * @return string|null
     */
    public function getIp6Allowaccess()
    {
        return $this->container['ip6_allowaccess'];
    }

    /**
     * Sets ip6_allowaccess
     *
     * @param string|null $ip6_allowaccess Allow management access to the interface.    ping:PING access.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.    http:HTTP access.    telnet:TELNET access.    fgfm:FortiManager access.    fabric:Fabric access.
     *
     * @return self
     */
    public function setIp6Allowaccess($ip6_allowaccess)
    {
        $allowedValues = $this->getIp6AllowaccessAllowableValues();
        if (!is_null($ip6_allowaccess) && !in_array($ip6_allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_allowaccess', must be one of '%s'",
                    $ip6_allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_allowaccess'] = $ip6_allowaccess;

        return $this;
    }

    /**
     * Gets ip6_send_adv
     *
     * @return string|null
     */
    public function getIp6SendAdv()
    {
        return $this->container['ip6_send_adv'];
    }

    /**
     * Sets ip6_send_adv
     *
     * @param string|null $ip6_send_adv Enable/disable sending advertisements about the interface.    enable:Enable sending advertisements about this interface.    disable:Disable sending advertisements about this interface.
     *
     * @return self
     */
    public function setIp6SendAdv($ip6_send_adv)
    {
        $allowedValues = $this->getIp6SendAdvAllowableValues();
        if (!is_null($ip6_send_adv) && !in_array($ip6_send_adv, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_send_adv', must be one of '%s'",
                    $ip6_send_adv,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_send_adv'] = $ip6_send_adv;

        return $this;
    }

    /**
     * Gets icmp6_send_redirect
     *
     * @return string|null
     */
    public function getIcmp6SendRedirect()
    {
        return $this->container['icmp6_send_redirect'];
    }

    /**
     * Sets icmp6_send_redirect
     *
     * @param string|null $icmp6_send_redirect Enable/disable sending of ICMPv6 redirects.    enable:Enable sending of ICMPv6 redirects.    disable:Disable sending of ICMPv6 redirects.
     *
     * @return self
     */
    public function setIcmp6SendRedirect($icmp6_send_redirect)
    {
        $allowedValues = $this->getIcmp6SendRedirectAllowableValues();
        if (!is_null($icmp6_send_redirect) && !in_array($icmp6_send_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp6_send_redirect', must be one of '%s'",
                    $icmp6_send_redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp6_send_redirect'] = $icmp6_send_redirect;

        return $this;
    }

    /**
     * Gets ip6_manage_flag
     *
     * @return string|null
     */
    public function getIp6ManageFlag()
    {
        return $this->container['ip6_manage_flag'];
    }

    /**
     * Sets ip6_manage_flag
     *
     * @param string|null $ip6_manage_flag Enable/disable the managed flag.    enable:Enable the managed IPv6 flag.    disable:Disable the managed IPv6 flag.
     *
     * @return self
     */
    public function setIp6ManageFlag($ip6_manage_flag)
    {
        $allowedValues = $this->getIp6ManageFlagAllowableValues();
        if (!is_null($ip6_manage_flag) && !in_array($ip6_manage_flag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_manage_flag', must be one of '%s'",
                    $ip6_manage_flag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_manage_flag'] = $ip6_manage_flag;

        return $this;
    }

    /**
     * Gets ip6_other_flag
     *
     * @return string|null
     */
    public function getIp6OtherFlag()
    {
        return $this->container['ip6_other_flag'];
    }

    /**
     * Sets ip6_other_flag
     *
     * @param string|null $ip6_other_flag Enable/disable the other IPv6 flag.    enable:Enable the other IPv6 flag.    disable:Disable the other IPv6 flag.
     *
     * @return self
     */
    public function setIp6OtherFlag($ip6_other_flag)
    {
        $allowedValues = $this->getIp6OtherFlagAllowableValues();
        if (!is_null($ip6_other_flag) && !in_array($ip6_other_flag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip6_other_flag', must be one of '%s'",
                    $ip6_other_flag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip6_other_flag'] = $ip6_other_flag;

        return $this;
    }

    /**
     * Gets ip6_max_interval
     *
     * @return int|null
     */
    public function getIp6MaxInterval()
    {
        return $this->container['ip6_max_interval'];
    }

    /**
     * Sets ip6_max_interval
     *
     * @param int|null $ip6_max_interval IPv6 maximum interval (4 to 1800 sec).
     *
     * @return self
     */
    public function setIp6MaxInterval($ip6_max_interval)
    {

        if (!is_null($ip6_max_interval) && ($ip6_max_interval > 1800)) {
            throw new \InvalidArgumentException('invalid value for $ip6_max_interval when calling SystemInterfaceNameIpv6., must be smaller than or equal to 1800.');
        }
        if (!is_null($ip6_max_interval) && ($ip6_max_interval < 4)) {
            throw new \InvalidArgumentException('invalid value for $ip6_max_interval when calling SystemInterfaceNameIpv6., must be bigger than or equal to 4.');
        }

        $this->container['ip6_max_interval'] = $ip6_max_interval;

        return $this;
    }

    /**
     * Gets ip6_min_interval
     *
     * @return int|null
     */
    public function getIp6MinInterval()
    {
        return $this->container['ip6_min_interval'];
    }

    /**
     * Sets ip6_min_interval
     *
     * @param int|null $ip6_min_interval IPv6 minimum interval (3 to 1350 sec).
     *
     * @return self
     */
    public function setIp6MinInterval($ip6_min_interval)
    {

        if (!is_null($ip6_min_interval) && ($ip6_min_interval > 1350)) {
            throw new \InvalidArgumentException('invalid value for $ip6_min_interval when calling SystemInterfaceNameIpv6., must be smaller than or equal to 1350.');
        }
        if (!is_null($ip6_min_interval) && ($ip6_min_interval < 3)) {
            throw new \InvalidArgumentException('invalid value for $ip6_min_interval when calling SystemInterfaceNameIpv6., must be bigger than or equal to 3.');
        }

        $this->container['ip6_min_interval'] = $ip6_min_interval;

        return $this;
    }

    /**
     * Gets ip6_link_mtu
     *
     * @return int|null
     */
    public function getIp6LinkMtu()
    {
        return $this->container['ip6_link_mtu'];
    }

    /**
     * Sets ip6_link_mtu
     *
     * @param int|null $ip6_link_mtu IPv6 link MTU.
     *
     * @return self
     */
    public function setIp6LinkMtu($ip6_link_mtu)
    {

        if (!is_null($ip6_link_mtu) && ($ip6_link_mtu > 16000)) {
            throw new \InvalidArgumentException('invalid value for $ip6_link_mtu when calling SystemInterfaceNameIpv6., must be smaller than or equal to 16000.');
        }
        if (!is_null($ip6_link_mtu) && ($ip6_link_mtu < 1280)) {
            throw new \InvalidArgumentException('invalid value for $ip6_link_mtu when calling SystemInterfaceNameIpv6., must be bigger than or equal to 1280.');
        }

        $this->container['ip6_link_mtu'] = $ip6_link_mtu;

        return $this;
    }

    /**
     * Gets ip6_reachable_time
     *
     * @return int|null
     */
    public function getIp6ReachableTime()
    {
        return $this->container['ip6_reachable_time'];
    }

    /**
     * Sets ip6_reachable_time
     *
     * @param int|null $ip6_reachable_time IPv6 reachable time (milliseconds; 0 means unspecified).
     *
     * @return self
     */
    public function setIp6ReachableTime($ip6_reachable_time)
    {

        if (!is_null($ip6_reachable_time) && ($ip6_reachable_time > 3600000)) {
            throw new \InvalidArgumentException('invalid value for $ip6_reachable_time when calling SystemInterfaceNameIpv6., must be smaller than or equal to 3600000.');
        }
        if (!is_null($ip6_reachable_time) && ($ip6_reachable_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_reachable_time when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['ip6_reachable_time'] = $ip6_reachable_time;

        return $this;
    }

    /**
     * Gets ip6_retrans_time
     *
     * @return int|null
     */
    public function getIp6RetransTime()
    {
        return $this->container['ip6_retrans_time'];
    }

    /**
     * Sets ip6_retrans_time
     *
     * @param int|null $ip6_retrans_time IPv6 retransmit time (milliseconds; 0 means unspecified).
     *
     * @return self
     */
    public function setIp6RetransTime($ip6_retrans_time)
    {

        if (!is_null($ip6_retrans_time) && ($ip6_retrans_time > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $ip6_retrans_time when calling SystemInterfaceNameIpv6., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($ip6_retrans_time) && ($ip6_retrans_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_retrans_time when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['ip6_retrans_time'] = $ip6_retrans_time;

        return $this;
    }

    /**
     * Gets ip6_default_life
     *
     * @return int|null
     */
    public function getIp6DefaultLife()
    {
        return $this->container['ip6_default_life'];
    }

    /**
     * Sets ip6_default_life
     *
     * @param int|null $ip6_default_life Default life (sec).
     *
     * @return self
     */
    public function setIp6DefaultLife($ip6_default_life)
    {

        if (!is_null($ip6_default_life) && ($ip6_default_life > 9000)) {
            throw new \InvalidArgumentException('invalid value for $ip6_default_life when calling SystemInterfaceNameIpv6., must be smaller than or equal to 9000.');
        }
        if (!is_null($ip6_default_life) && ($ip6_default_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_default_life when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['ip6_default_life'] = $ip6_default_life;

        return $this;
    }

    /**
     * Gets ip6_hop_limit
     *
     * @return int|null
     */
    public function getIp6HopLimit()
    {
        return $this->container['ip6_hop_limit'];
    }

    /**
     * Sets ip6_hop_limit
     *
     * @param int|null $ip6_hop_limit Hop limit (0 means unspecified).
     *
     * @return self
     */
    public function setIp6HopLimit($ip6_hop_limit)
    {

        if (!is_null($ip6_hop_limit) && ($ip6_hop_limit > 255)) {
            throw new \InvalidArgumentException('invalid value for $ip6_hop_limit when calling SystemInterfaceNameIpv6., must be smaller than or equal to 255.');
        }
        if (!is_null($ip6_hop_limit) && ($ip6_hop_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_hop_limit when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['ip6_hop_limit'] = $ip6_hop_limit;

        return $this;
    }

    /**
     * Gets autoconf
     *
     * @return string|null
     */
    public function getAutoconf()
    {
        return $this->container['autoconf'];
    }

    /**
     * Sets autoconf
     *
     * @param string|null $autoconf Enable/disable address auto config.    enable:Enable auto-configuration.    disable:Disable auto-configuration.
     *
     * @return self
     */
    public function setAutoconf($autoconf)
    {
        $allowedValues = $this->getAutoconfAllowableValues();
        if (!is_null($autoconf) && !in_array($autoconf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'autoconf', must be one of '%s'",
                    $autoconf,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['autoconf'] = $autoconf;

        return $this;
    }

    /**
     * Gets unique_autoconf_addr
     *
     * @return string|null
     */
    public function getUniqueAutoconfAddr()
    {
        return $this->container['unique_autoconf_addr'];
    }

    /**
     * Sets unique_autoconf_addr
     *
     * @param string|null $unique_autoconf_addr Enable/disable unique auto config address.    enable:Enable unique auto-configuration address.    disable:Disable unique auto-configuration address.
     *
     * @return self
     */
    public function setUniqueAutoconfAddr($unique_autoconf_addr)
    {
        $allowedValues = $this->getUniqueAutoconfAddrAllowableValues();
        if (!is_null($unique_autoconf_addr) && !in_array($unique_autoconf_addr, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unique_autoconf_addr', must be one of '%s'",
                    $unique_autoconf_addr,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unique_autoconf_addr'] = $unique_autoconf_addr;

        return $this;
    }

    /**
     * Gets interface_identifier
     *
     * @return string|null
     */
    public function getInterfaceIdentifier()
    {
        return $this->container['interface_identifier'];
    }

    /**
     * Sets interface_identifier
     *
     * @param string|null $interface_identifier IPv6 interface identifier.
     *
     * @return self
     */
    public function setInterfaceIdentifier($interface_identifier)
    {
        $this->container['interface_identifier'] = $interface_identifier;

        return $this;
    }

    /**
     * Gets ip6_upstream_interface
     *
     * @return string|null
     */
    public function getIp6UpstreamInterface()
    {
        return $this->container['ip6_upstream_interface'];
    }

    /**
     * Sets ip6_upstream_interface
     *
     * @param string|null $ip6_upstream_interface Interface name providing delegated information.
     *
     * @return self
     */
    public function setIp6UpstreamInterface($ip6_upstream_interface)
    {
        if (!is_null($ip6_upstream_interface) && (mb_strlen($ip6_upstream_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $ip6_upstream_interface when calling SystemInterfaceNameIpv6., must be smaller than or equal to 15.');
        }

        $this->container['ip6_upstream_interface'] = $ip6_upstream_interface;

        return $this;
    }

    /**
     * Gets ip6_subnet
     *
     * @return string|null
     */
    public function getIp6Subnet()
    {
        return $this->container['ip6_subnet'];
    }

    /**
     * Sets ip6_subnet
     *
     * @param string|null $ip6_subnet Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
     *
     * @return self
     */
    public function setIp6Subnet($ip6_subnet)
    {
        $this->container['ip6_subnet'] = $ip6_subnet;

        return $this;
    }

    /**
     * Gets ip6_prefix_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6PrefixList[]|null
     */
    public function getIp6PrefixList()
    {
        return $this->container['ip6_prefix_list'];
    }

    /**
     * Sets ip6_prefix_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6PrefixList[]|null $ip6_prefix_list Advertised prefix list.
     *
     * @return self
     */
    public function setIp6PrefixList($ip6_prefix_list)
    {

        if (!is_null($ip6_prefix_list) && (count($ip6_prefix_list) > 32)) {
            throw new \InvalidArgumentException('invalid value for $ip6_prefix_list when calling SystemInterfaceNameIpv6., number of items must be less than or equal to 32.');
        }
        $this->container['ip6_prefix_list'] = $ip6_prefix_list;

        return $this;
    }

    /**
     * Gets ip6_delegated_prefix_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6DelegatedPrefixList[]|null
     */
    public function getIp6DelegatedPrefixList()
    {
        return $this->container['ip6_delegated_prefix_list'];
    }

    /**
     * Sets ip6_delegated_prefix_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIp6DelegatedPrefixList[]|null $ip6_delegated_prefix_list Advertised IPv6 delegated prefix list.
     *
     * @return self
     */
    public function setIp6DelegatedPrefixList($ip6_delegated_prefix_list)
    {

        if (!is_null($ip6_delegated_prefix_list) && (count($ip6_delegated_prefix_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ip6_delegated_prefix_list when calling SystemInterfaceNameIpv6., number of items must be less than or equal to 0.');
        }
        $this->container['ip6_delegated_prefix_list'] = $ip6_delegated_prefix_list;

        return $this;
    }

    /**
     * Gets dhcp6_relay_service
     *
     * @return string|null
     */
    public function getDhcp6RelayService()
    {
        return $this->container['dhcp6_relay_service'];
    }

    /**
     * Sets dhcp6_relay_service
     *
     * @param string|null $dhcp6_relay_service Enable/disable DHCPv6 relay.    disable:Disable DHCPv6 relay    enable:Enable DHCPv6 relay.
     *
     * @return self
     */
    public function setDhcp6RelayService($dhcp6_relay_service)
    {
        $allowedValues = $this->getDhcp6RelayServiceAllowableValues();
        if (!is_null($dhcp6_relay_service) && !in_array($dhcp6_relay_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp6_relay_service', must be one of '%s'",
                    $dhcp6_relay_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp6_relay_service'] = $dhcp6_relay_service;

        return $this;
    }

    /**
     * Gets dhcp6_relay_type
     *
     * @return string|null
     */
    public function getDhcp6RelayType()
    {
        return $this->container['dhcp6_relay_type'];
    }

    /**
     * Sets dhcp6_relay_type
     *
     * @param string|null $dhcp6_relay_type DHCPv6 relay type.    regular:Regular DHCP relay.
     *
     * @return self
     */
    public function setDhcp6RelayType($dhcp6_relay_type)
    {
        $allowedValues = $this->getDhcp6RelayTypeAllowableValues();
        if (!is_null($dhcp6_relay_type) && !in_array($dhcp6_relay_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp6_relay_type', must be one of '%s'",
                    $dhcp6_relay_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp6_relay_type'] = $dhcp6_relay_type;

        return $this;
    }

    /**
     * Gets dhcp6_relay_ip
     *
     * @return string|null
     */
    public function getDhcp6RelayIp()
    {
        return $this->container['dhcp6_relay_ip'];
    }

    /**
     * Sets dhcp6_relay_ip
     *
     * @param string|null $dhcp6_relay_ip DHCPv6 relay IP address.
     *
     * @return self
     */
    public function setDhcp6RelayIp($dhcp6_relay_ip)
    {
        $this->container['dhcp6_relay_ip'] = $dhcp6_relay_ip;

        return $this;
    }

    /**
     * Gets dhcp6_client_options
     *
     * @return string|null
     */
    public function getDhcp6ClientOptions()
    {
        return $this->container['dhcp6_client_options'];
    }

    /**
     * Sets dhcp6_client_options
     *
     * @param string|null $dhcp6_client_options DHCPv6 client options.    rapid:Send rapid commit option.    iapd:Send including IA-PD option.    iana:Send including IA-NA option.
     *
     * @return self
     */
    public function setDhcp6ClientOptions($dhcp6_client_options)
    {
        $allowedValues = $this->getDhcp6ClientOptionsAllowableValues();
        if (!is_null($dhcp6_client_options) && !in_array($dhcp6_client_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp6_client_options', must be one of '%s'",
                    $dhcp6_client_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp6_client_options'] = $dhcp6_client_options;

        return $this;
    }

    /**
     * Gets dhcp6_prefix_delegation
     *
     * @return string|null
     */
    public function getDhcp6PrefixDelegation()
    {
        return $this->container['dhcp6_prefix_delegation'];
    }

    /**
     * Sets dhcp6_prefix_delegation
     *
     * @param string|null $dhcp6_prefix_delegation Enable/disable DHCPv6 prefix delegation.    enable:Enable DHCPv6 prefix delegation.    disable:Disable DHCPv6 prefix delegation.
     *
     * @return self
     */
    public function setDhcp6PrefixDelegation($dhcp6_prefix_delegation)
    {
        $allowedValues = $this->getDhcp6PrefixDelegationAllowableValues();
        if (!is_null($dhcp6_prefix_delegation) && !in_array($dhcp6_prefix_delegation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp6_prefix_delegation', must be one of '%s'",
                    $dhcp6_prefix_delegation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp6_prefix_delegation'] = $dhcp6_prefix_delegation;

        return $this;
    }

    /**
     * Gets dhcp6_information_request
     *
     * @return string|null
     */
    public function getDhcp6InformationRequest()
    {
        return $this->container['dhcp6_information_request'];
    }

    /**
     * Sets dhcp6_information_request
     *
     * @param string|null $dhcp6_information_request Enable/disable DHCPv6 information request.    enable:Enable DHCPv6 information request.    disable:Disable DHCPv6 information request.
     *
     * @return self
     */
    public function setDhcp6InformationRequest($dhcp6_information_request)
    {
        $allowedValues = $this->getDhcp6InformationRequestAllowableValues();
        if (!is_null($dhcp6_information_request) && !in_array($dhcp6_information_request, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp6_information_request', must be one of '%s'",
                    $dhcp6_information_request,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp6_information_request'] = $dhcp6_information_request;

        return $this;
    }

    /**
     * Gets dhcp6_prefix_hint
     *
     * @return string|null
     */
    public function getDhcp6PrefixHint()
    {
        return $this->container['dhcp6_prefix_hint'];
    }

    /**
     * Sets dhcp6_prefix_hint
     *
     * @param string|null $dhcp6_prefix_hint DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
     *
     * @return self
     */
    public function setDhcp6PrefixHint($dhcp6_prefix_hint)
    {
        $this->container['dhcp6_prefix_hint'] = $dhcp6_prefix_hint;

        return $this;
    }

    /**
     * Gets dhcp6_prefix_hint_plt
     *
     * @return int|null
     */
    public function getDhcp6PrefixHintPlt()
    {
        return $this->container['dhcp6_prefix_hint_plt'];
    }

    /**
     * Sets dhcp6_prefix_hint_plt
     *
     * @param int|null $dhcp6_prefix_hint_plt DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
     *
     * @return self
     */
    public function setDhcp6PrefixHintPlt($dhcp6_prefix_hint_plt)
    {

        if (!is_null($dhcp6_prefix_hint_plt) && ($dhcp6_prefix_hint_plt > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $dhcp6_prefix_hint_plt when calling SystemInterfaceNameIpv6., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($dhcp6_prefix_hint_plt) && ($dhcp6_prefix_hint_plt < 0)) {
            throw new \InvalidArgumentException('invalid value for $dhcp6_prefix_hint_plt when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['dhcp6_prefix_hint_plt'] = $dhcp6_prefix_hint_plt;

        return $this;
    }

    /**
     * Gets dhcp6_prefix_hint_vlt
     *
     * @return int|null
     */
    public function getDhcp6PrefixHintVlt()
    {
        return $this->container['dhcp6_prefix_hint_vlt'];
    }

    /**
     * Sets dhcp6_prefix_hint_vlt
     *
     * @param int|null $dhcp6_prefix_hint_vlt DHCPv6 prefix hint valid life time (sec).
     *
     * @return self
     */
    public function setDhcp6PrefixHintVlt($dhcp6_prefix_hint_vlt)
    {

        if (!is_null($dhcp6_prefix_hint_vlt) && ($dhcp6_prefix_hint_vlt > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $dhcp6_prefix_hint_vlt when calling SystemInterfaceNameIpv6., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($dhcp6_prefix_hint_vlt) && ($dhcp6_prefix_hint_vlt < 0)) {
            throw new \InvalidArgumentException('invalid value for $dhcp6_prefix_hint_vlt when calling SystemInterfaceNameIpv6., must be bigger than or equal to 0.');
        }

        $this->container['dhcp6_prefix_hint_vlt'] = $dhcp6_prefix_hint_vlt;

        return $this;
    }

    /**
     * Gets vrrp_virtual_mac6
     *
     * @return string|null
     */
    public function getVrrpVirtualMac6()
    {
        return $this->container['vrrp_virtual_mac6'];
    }

    /**
     * Sets vrrp_virtual_mac6
     *
     * @param string|null $vrrp_virtual_mac6 Enable/disable virtual MAC for VRRP.    enable:Enable virtual MAC for VRRP.    disable:Disable virtual MAC for VRRP.
     *
     * @return self
     */
    public function setVrrpVirtualMac6($vrrp_virtual_mac6)
    {
        $allowedValues = $this->getVrrpVirtualMac6AllowableValues();
        if (!is_null($vrrp_virtual_mac6) && !in_array($vrrp_virtual_mac6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vrrp_virtual_mac6', must be one of '%s'",
                    $vrrp_virtual_mac6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vrrp_virtual_mac6'] = $vrrp_virtual_mac6;

        return $this;
    }

    /**
     * Gets vrip6_link_local
     *
     * @return string|null
     */
    public function getVrip6LinkLocal()
    {
        return $this->container['vrip6_link_local'];
    }

    /**
     * Sets vrip6_link_local
     *
     * @param string|null $vrip6_link_local Link-local IPv6 address of virtual router.
     *
     * @return self
     */
    public function setVrip6LinkLocal($vrip6_link_local)
    {
        $this->container['vrip6_link_local'] = $vrip6_link_local;

        return $this;
    }

    /**
     * Gets vrrp6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp6[]|null
     */
    public function getVrrp6()
    {
        return $this->container['vrrp6'];
    }

    /**
     * Sets vrrp6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp6[]|null $vrrp6 IPv6 VRRP configuration.
     *
     * @return self
     */
    public function setVrrp6($vrrp6)
    {

        if (!is_null($vrrp6) && (count($vrrp6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vrrp6 when calling SystemInterfaceNameIpv6., number of items must be less than or equal to 0.');
        }
        $this->container['vrrp6'] = $vrrp6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


