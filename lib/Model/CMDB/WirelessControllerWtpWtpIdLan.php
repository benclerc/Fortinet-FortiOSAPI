<?php
/**
 * WirelessControllerWtpWtpIdLan
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerWtpWtpIdLan Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerWtpWtpIdLan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_wtp__wtp_id__lan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'port_mode' => 'string',
        'port_ssid' => 'string',
        'port1_mode' => 'string',
        'port1_ssid' => 'string',
        'port2_mode' => 'string',
        'port2_ssid' => 'string',
        'port3_mode' => 'string',
        'port3_ssid' => 'string',
        'port4_mode' => 'string',
        'port4_ssid' => 'string',
        'port5_mode' => 'string',
        'port5_ssid' => 'string',
        'port6_mode' => 'string',
        'port6_ssid' => 'string',
        'port7_mode' => 'string',
        'port7_ssid' => 'string',
        'port8_mode' => 'string',
        'port8_ssid' => 'string',
        'port_esl_mode' => 'string',
        'port_esl_ssid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'port_mode' => null,
        'port_ssid' => null,
        'port1_mode' => null,
        'port1_ssid' => null,
        'port2_mode' => null,
        'port2_ssid' => null,
        'port3_mode' => null,
        'port3_ssid' => null,
        'port4_mode' => null,
        'port4_ssid' => null,
        'port5_mode' => null,
        'port5_ssid' => null,
        'port6_mode' => null,
        'port6_ssid' => null,
        'port7_mode' => null,
        'port7_ssid' => null,
        'port8_mode' => null,
        'port8_ssid' => null,
        'port_esl_mode' => null,
        'port_esl_ssid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port_mode' => 'port-mode',
        'port_ssid' => 'port-ssid',
        'port1_mode' => 'port1-mode',
        'port1_ssid' => 'port1-ssid',
        'port2_mode' => 'port2-mode',
        'port2_ssid' => 'port2-ssid',
        'port3_mode' => 'port3-mode',
        'port3_ssid' => 'port3-ssid',
        'port4_mode' => 'port4-mode',
        'port4_ssid' => 'port4-ssid',
        'port5_mode' => 'port5-mode',
        'port5_ssid' => 'port5-ssid',
        'port6_mode' => 'port6-mode',
        'port6_ssid' => 'port6-ssid',
        'port7_mode' => 'port7-mode',
        'port7_ssid' => 'port7-ssid',
        'port8_mode' => 'port8-mode',
        'port8_ssid' => 'port8-ssid',
        'port_esl_mode' => 'port-esl-mode',
        'port_esl_ssid' => 'port-esl-ssid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port_mode' => 'setPortMode',
        'port_ssid' => 'setPortSsid',
        'port1_mode' => 'setPort1Mode',
        'port1_ssid' => 'setPort1Ssid',
        'port2_mode' => 'setPort2Mode',
        'port2_ssid' => 'setPort2Ssid',
        'port3_mode' => 'setPort3Mode',
        'port3_ssid' => 'setPort3Ssid',
        'port4_mode' => 'setPort4Mode',
        'port4_ssid' => 'setPort4Ssid',
        'port5_mode' => 'setPort5Mode',
        'port5_ssid' => 'setPort5Ssid',
        'port6_mode' => 'setPort6Mode',
        'port6_ssid' => 'setPort6Ssid',
        'port7_mode' => 'setPort7Mode',
        'port7_ssid' => 'setPort7Ssid',
        'port8_mode' => 'setPort8Mode',
        'port8_ssid' => 'setPort8Ssid',
        'port_esl_mode' => 'setPortEslMode',
        'port_esl_ssid' => 'setPortEslSsid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port_mode' => 'getPortMode',
        'port_ssid' => 'getPortSsid',
        'port1_mode' => 'getPort1Mode',
        'port1_ssid' => 'getPort1Ssid',
        'port2_mode' => 'getPort2Mode',
        'port2_ssid' => 'getPort2Ssid',
        'port3_mode' => 'getPort3Mode',
        'port3_ssid' => 'getPort3Ssid',
        'port4_mode' => 'getPort4Mode',
        'port4_ssid' => 'getPort4Ssid',
        'port5_mode' => 'getPort5Mode',
        'port5_ssid' => 'getPort5Ssid',
        'port6_mode' => 'getPort6Mode',
        'port6_ssid' => 'getPort6Ssid',
        'port7_mode' => 'getPort7Mode',
        'port7_ssid' => 'getPort7Ssid',
        'port8_mode' => 'getPort8Mode',
        'port8_ssid' => 'getPort8Ssid',
        'port_esl_mode' => 'getPortEslMode',
        'port_esl_ssid' => 'getPortEslSsid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PORT_MODE_OFFLINE = 'offline';
    const PORT_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT1_MODE_OFFLINE = 'offline';
    const PORT1_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT1_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT1_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT2_MODE_OFFLINE = 'offline';
    const PORT2_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT2_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT2_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT3_MODE_OFFLINE = 'offline';
    const PORT3_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT3_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT3_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT4_MODE_OFFLINE = 'offline';
    const PORT4_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT4_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT4_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT5_MODE_OFFLINE = 'offline';
    const PORT5_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT5_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT5_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT6_MODE_OFFLINE = 'offline';
    const PORT6_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT6_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT6_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT7_MODE_OFFLINE = 'offline';
    const PORT7_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT7_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT7_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT8_MODE_OFFLINE = 'offline';
    const PORT8_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT8_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT8_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    const PORT_ESL_MODE_OFFLINE = 'offline';
    const PORT_ESL_MODE_NAT_TO_WAN = 'nat-to-wan';
    const PORT_ESL_MODE_BRIDGE_TO_WAN = 'bridge-to-wan';
    const PORT_ESL_MODE_BRIDGE_TO_SSID = 'bridge-to-ssid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortModeAllowableValues()
    {
        return [
            self::PORT_MODE_OFFLINE,
            self::PORT_MODE_NAT_TO_WAN,
            self::PORT_MODE_BRIDGE_TO_WAN,
            self::PORT_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort1ModeAllowableValues()
    {
        return [
            self::PORT1_MODE_OFFLINE,
            self::PORT1_MODE_NAT_TO_WAN,
            self::PORT1_MODE_BRIDGE_TO_WAN,
            self::PORT1_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort2ModeAllowableValues()
    {
        return [
            self::PORT2_MODE_OFFLINE,
            self::PORT2_MODE_NAT_TO_WAN,
            self::PORT2_MODE_BRIDGE_TO_WAN,
            self::PORT2_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort3ModeAllowableValues()
    {
        return [
            self::PORT3_MODE_OFFLINE,
            self::PORT3_MODE_NAT_TO_WAN,
            self::PORT3_MODE_BRIDGE_TO_WAN,
            self::PORT3_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort4ModeAllowableValues()
    {
        return [
            self::PORT4_MODE_OFFLINE,
            self::PORT4_MODE_NAT_TO_WAN,
            self::PORT4_MODE_BRIDGE_TO_WAN,
            self::PORT4_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort5ModeAllowableValues()
    {
        return [
            self::PORT5_MODE_OFFLINE,
            self::PORT5_MODE_NAT_TO_WAN,
            self::PORT5_MODE_BRIDGE_TO_WAN,
            self::PORT5_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort6ModeAllowableValues()
    {
        return [
            self::PORT6_MODE_OFFLINE,
            self::PORT6_MODE_NAT_TO_WAN,
            self::PORT6_MODE_BRIDGE_TO_WAN,
            self::PORT6_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort7ModeAllowableValues()
    {
        return [
            self::PORT7_MODE_OFFLINE,
            self::PORT7_MODE_NAT_TO_WAN,
            self::PORT7_MODE_BRIDGE_TO_WAN,
            self::PORT7_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPort8ModeAllowableValues()
    {
        return [
            self::PORT8_MODE_OFFLINE,
            self::PORT8_MODE_NAT_TO_WAN,
            self::PORT8_MODE_BRIDGE_TO_WAN,
            self::PORT8_MODE_BRIDGE_TO_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortEslModeAllowableValues()
    {
        return [
            self::PORT_ESL_MODE_OFFLINE,
            self::PORT_ESL_MODE_NAT_TO_WAN,
            self::PORT_ESL_MODE_BRIDGE_TO_WAN,
            self::PORT_ESL_MODE_BRIDGE_TO_SSID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['port_mode'] = $data['port_mode'] ?? null;
        $this->container['port_ssid'] = $data['port_ssid'] ?? null;
        $this->container['port1_mode'] = $data['port1_mode'] ?? null;
        $this->container['port1_ssid'] = $data['port1_ssid'] ?? null;
        $this->container['port2_mode'] = $data['port2_mode'] ?? null;
        $this->container['port2_ssid'] = $data['port2_ssid'] ?? null;
        $this->container['port3_mode'] = $data['port3_mode'] ?? null;
        $this->container['port3_ssid'] = $data['port3_ssid'] ?? null;
        $this->container['port4_mode'] = $data['port4_mode'] ?? null;
        $this->container['port4_ssid'] = $data['port4_ssid'] ?? null;
        $this->container['port5_mode'] = $data['port5_mode'] ?? null;
        $this->container['port5_ssid'] = $data['port5_ssid'] ?? null;
        $this->container['port6_mode'] = $data['port6_mode'] ?? null;
        $this->container['port6_ssid'] = $data['port6_ssid'] ?? null;
        $this->container['port7_mode'] = $data['port7_mode'] ?? null;
        $this->container['port7_ssid'] = $data['port7_ssid'] ?? null;
        $this->container['port8_mode'] = $data['port8_mode'] ?? null;
        $this->container['port8_ssid'] = $data['port8_ssid'] ?? null;
        $this->container['port_esl_mode'] = $data['port_esl_mode'] ?? null;
        $this->container['port_esl_ssid'] = $data['port_esl_ssid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPortModeAllowableValues();
        if (!is_null($this->container['port_mode']) && !in_array($this->container['port_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port_mode', must be one of '%s'",
                $this->container['port_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port_ssid']) && (mb_strlen($this->container['port_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort1ModeAllowableValues();
        if (!is_null($this->container['port1_mode']) && !in_array($this->container['port1_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port1_mode', must be one of '%s'",
                $this->container['port1_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port1_ssid']) && (mb_strlen($this->container['port1_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port1_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort2ModeAllowableValues();
        if (!is_null($this->container['port2_mode']) && !in_array($this->container['port2_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port2_mode', must be one of '%s'",
                $this->container['port2_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port2_ssid']) && (mb_strlen($this->container['port2_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port2_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort3ModeAllowableValues();
        if (!is_null($this->container['port3_mode']) && !in_array($this->container['port3_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port3_mode', must be one of '%s'",
                $this->container['port3_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port3_ssid']) && (mb_strlen($this->container['port3_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port3_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort4ModeAllowableValues();
        if (!is_null($this->container['port4_mode']) && !in_array($this->container['port4_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port4_mode', must be one of '%s'",
                $this->container['port4_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port4_ssid']) && (mb_strlen($this->container['port4_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port4_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort5ModeAllowableValues();
        if (!is_null($this->container['port5_mode']) && !in_array($this->container['port5_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port5_mode', must be one of '%s'",
                $this->container['port5_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port5_ssid']) && (mb_strlen($this->container['port5_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port5_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort6ModeAllowableValues();
        if (!is_null($this->container['port6_mode']) && !in_array($this->container['port6_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port6_mode', must be one of '%s'",
                $this->container['port6_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port6_ssid']) && (mb_strlen($this->container['port6_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port6_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort7ModeAllowableValues();
        if (!is_null($this->container['port7_mode']) && !in_array($this->container['port7_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port7_mode', must be one of '%s'",
                $this->container['port7_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port7_ssid']) && (mb_strlen($this->container['port7_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port7_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPort8ModeAllowableValues();
        if (!is_null($this->container['port8_mode']) && !in_array($this->container['port8_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port8_mode', must be one of '%s'",
                $this->container['port8_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port8_ssid']) && (mb_strlen($this->container['port8_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port8_ssid', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getPortEslModeAllowableValues();
        if (!is_null($this->container['port_esl_mode']) && !in_array($this->container['port_esl_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port_esl_mode', must be one of '%s'",
                $this->container['port_esl_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port_esl_ssid']) && (mb_strlen($this->container['port_esl_ssid']) > 15)) {
            $invalidProperties[] = "invalid value for 'port_esl_ssid', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port_mode
     *
     * @return string|null
     */
    public function getPortMode()
    {
        return $this->container['port_mode'];
    }

    /**
     * Sets port_mode
     *
     * @param string|null $port_mode LAN port mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPortMode($port_mode)
    {
        $allowedValues = $this->getPortModeAllowableValues();
        if (!is_null($port_mode) && !in_array($port_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port_mode', must be one of '%s'",
                    $port_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port_mode'] = $port_mode;

        return $this;
    }

    /**
     * Gets port_ssid
     *
     * @return string|null
     */
    public function getPortSsid()
    {
        return $this->container['port_ssid'];
    }

    /**
     * Sets port_ssid
     *
     * @param string|null $port_ssid Bridge LAN port to SSID.
     *
     * @return self
     */
    public function setPortSsid($port_ssid)
    {
        if (!is_null($port_ssid) && (mb_strlen($port_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port_ssid'] = $port_ssid;

        return $this;
    }

    /**
     * Gets port1_mode
     *
     * @return string|null
     */
    public function getPort1Mode()
    {
        return $this->container['port1_mode'];
    }

    /**
     * Sets port1_mode
     *
     * @param string|null $port1_mode LAN port 1 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort1Mode($port1_mode)
    {
        $allowedValues = $this->getPort1ModeAllowableValues();
        if (!is_null($port1_mode) && !in_array($port1_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port1_mode', must be one of '%s'",
                    $port1_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port1_mode'] = $port1_mode;

        return $this;
    }

    /**
     * Gets port1_ssid
     *
     * @return string|null
     */
    public function getPort1Ssid()
    {
        return $this->container['port1_ssid'];
    }

    /**
     * Sets port1_ssid
     *
     * @param string|null $port1_ssid Bridge LAN port 1 to SSID.
     *
     * @return self
     */
    public function setPort1Ssid($port1_ssid)
    {
        if (!is_null($port1_ssid) && (mb_strlen($port1_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port1_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port1_ssid'] = $port1_ssid;

        return $this;
    }

    /**
     * Gets port2_mode
     *
     * @return string|null
     */
    public function getPort2Mode()
    {
        return $this->container['port2_mode'];
    }

    /**
     * Sets port2_mode
     *
     * @param string|null $port2_mode LAN port 2 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort2Mode($port2_mode)
    {
        $allowedValues = $this->getPort2ModeAllowableValues();
        if (!is_null($port2_mode) && !in_array($port2_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port2_mode', must be one of '%s'",
                    $port2_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port2_mode'] = $port2_mode;

        return $this;
    }

    /**
     * Gets port2_ssid
     *
     * @return string|null
     */
    public function getPort2Ssid()
    {
        return $this->container['port2_ssid'];
    }

    /**
     * Sets port2_ssid
     *
     * @param string|null $port2_ssid Bridge LAN port 2 to SSID.
     *
     * @return self
     */
    public function setPort2Ssid($port2_ssid)
    {
        if (!is_null($port2_ssid) && (mb_strlen($port2_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port2_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port2_ssid'] = $port2_ssid;

        return $this;
    }

    /**
     * Gets port3_mode
     *
     * @return string|null
     */
    public function getPort3Mode()
    {
        return $this->container['port3_mode'];
    }

    /**
     * Sets port3_mode
     *
     * @param string|null $port3_mode LAN port 3 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort3Mode($port3_mode)
    {
        $allowedValues = $this->getPort3ModeAllowableValues();
        if (!is_null($port3_mode) && !in_array($port3_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port3_mode', must be one of '%s'",
                    $port3_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port3_mode'] = $port3_mode;

        return $this;
    }

    /**
     * Gets port3_ssid
     *
     * @return string|null
     */
    public function getPort3Ssid()
    {
        return $this->container['port3_ssid'];
    }

    /**
     * Sets port3_ssid
     *
     * @param string|null $port3_ssid Bridge LAN port 3 to SSID.
     *
     * @return self
     */
    public function setPort3Ssid($port3_ssid)
    {
        if (!is_null($port3_ssid) && (mb_strlen($port3_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port3_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port3_ssid'] = $port3_ssid;

        return $this;
    }

    /**
     * Gets port4_mode
     *
     * @return string|null
     */
    public function getPort4Mode()
    {
        return $this->container['port4_mode'];
    }

    /**
     * Sets port4_mode
     *
     * @param string|null $port4_mode LAN port 4 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort4Mode($port4_mode)
    {
        $allowedValues = $this->getPort4ModeAllowableValues();
        if (!is_null($port4_mode) && !in_array($port4_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port4_mode', must be one of '%s'",
                    $port4_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port4_mode'] = $port4_mode;

        return $this;
    }

    /**
     * Gets port4_ssid
     *
     * @return string|null
     */
    public function getPort4Ssid()
    {
        return $this->container['port4_ssid'];
    }

    /**
     * Sets port4_ssid
     *
     * @param string|null $port4_ssid Bridge LAN port 4 to SSID.
     *
     * @return self
     */
    public function setPort4Ssid($port4_ssid)
    {
        if (!is_null($port4_ssid) && (mb_strlen($port4_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port4_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port4_ssid'] = $port4_ssid;

        return $this;
    }

    /**
     * Gets port5_mode
     *
     * @return string|null
     */
    public function getPort5Mode()
    {
        return $this->container['port5_mode'];
    }

    /**
     * Sets port5_mode
     *
     * @param string|null $port5_mode LAN port 5 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort5Mode($port5_mode)
    {
        $allowedValues = $this->getPort5ModeAllowableValues();
        if (!is_null($port5_mode) && !in_array($port5_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port5_mode', must be one of '%s'",
                    $port5_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port5_mode'] = $port5_mode;

        return $this;
    }

    /**
     * Gets port5_ssid
     *
     * @return string|null
     */
    public function getPort5Ssid()
    {
        return $this->container['port5_ssid'];
    }

    /**
     * Sets port5_ssid
     *
     * @param string|null $port5_ssid Bridge LAN port 5 to SSID.
     *
     * @return self
     */
    public function setPort5Ssid($port5_ssid)
    {
        if (!is_null($port5_ssid) && (mb_strlen($port5_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port5_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port5_ssid'] = $port5_ssid;

        return $this;
    }

    /**
     * Gets port6_mode
     *
     * @return string|null
     */
    public function getPort6Mode()
    {
        return $this->container['port6_mode'];
    }

    /**
     * Sets port6_mode
     *
     * @param string|null $port6_mode LAN port 6 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort6Mode($port6_mode)
    {
        $allowedValues = $this->getPort6ModeAllowableValues();
        if (!is_null($port6_mode) && !in_array($port6_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port6_mode', must be one of '%s'",
                    $port6_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port6_mode'] = $port6_mode;

        return $this;
    }

    /**
     * Gets port6_ssid
     *
     * @return string|null
     */
    public function getPort6Ssid()
    {
        return $this->container['port6_ssid'];
    }

    /**
     * Sets port6_ssid
     *
     * @param string|null $port6_ssid Bridge LAN port 6 to SSID.
     *
     * @return self
     */
    public function setPort6Ssid($port6_ssid)
    {
        if (!is_null($port6_ssid) && (mb_strlen($port6_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port6_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port6_ssid'] = $port6_ssid;

        return $this;
    }

    /**
     * Gets port7_mode
     *
     * @return string|null
     */
    public function getPort7Mode()
    {
        return $this->container['port7_mode'];
    }

    /**
     * Sets port7_mode
     *
     * @param string|null $port7_mode LAN port 7 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort7Mode($port7_mode)
    {
        $allowedValues = $this->getPort7ModeAllowableValues();
        if (!is_null($port7_mode) && !in_array($port7_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port7_mode', must be one of '%s'",
                    $port7_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port7_mode'] = $port7_mode;

        return $this;
    }

    /**
     * Gets port7_ssid
     *
     * @return string|null
     */
    public function getPort7Ssid()
    {
        return $this->container['port7_ssid'];
    }

    /**
     * Sets port7_ssid
     *
     * @param string|null $port7_ssid Bridge LAN port 7 to SSID.
     *
     * @return self
     */
    public function setPort7Ssid($port7_ssid)
    {
        if (!is_null($port7_ssid) && (mb_strlen($port7_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port7_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port7_ssid'] = $port7_ssid;

        return $this;
    }

    /**
     * Gets port8_mode
     *
     * @return string|null
     */
    public function getPort8Mode()
    {
        return $this->container['port8_mode'];
    }

    /**
     * Sets port8_mode
     *
     * @param string|null $port8_mode LAN port 8 mode.    offline:Offline.    nat-to-wan:NAT WTP LAN port to WTP WAN port.    bridge-to-wan:Bridge WTP LAN port to WTP WAN port.    bridge-to-ssid:Bridge WTP LAN port to SSID.
     *
     * @return self
     */
    public function setPort8Mode($port8_mode)
    {
        $allowedValues = $this->getPort8ModeAllowableValues();
        if (!is_null($port8_mode) && !in_array($port8_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port8_mode', must be one of '%s'",
                    $port8_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port8_mode'] = $port8_mode;

        return $this;
    }

    /**
     * Gets port8_ssid
     *
     * @return string|null
     */
    public function getPort8Ssid()
    {
        return $this->container['port8_ssid'];
    }

    /**
     * Sets port8_ssid
     *
     * @param string|null $port8_ssid Bridge LAN port 8 to SSID.
     *
     * @return self
     */
    public function setPort8Ssid($port8_ssid)
    {
        if (!is_null($port8_ssid) && (mb_strlen($port8_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port8_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port8_ssid'] = $port8_ssid;

        return $this;
    }

    /**
     * Gets port_esl_mode
     *
     * @return string|null
     */
    public function getPortEslMode()
    {
        return $this->container['port_esl_mode'];
    }

    /**
     * Sets port_esl_mode
     *
     * @param string|null $port_esl_mode ESL port mode.    offline:Offline.    nat-to-wan:NAT WTP ESL port to WTP WAN port.    bridge-to-wan:Bridge WTP ESL port to WTP WAN port.    bridge-to-ssid:Bridge WTP ESL port to SSID.
     *
     * @return self
     */
    public function setPortEslMode($port_esl_mode)
    {
        $allowedValues = $this->getPortEslModeAllowableValues();
        if (!is_null($port_esl_mode) && !in_array($port_esl_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port_esl_mode', must be one of '%s'",
                    $port_esl_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port_esl_mode'] = $port_esl_mode;

        return $this;
    }

    /**
     * Gets port_esl_ssid
     *
     * @return string|null
     */
    public function getPortEslSsid()
    {
        return $this->container['port_esl_ssid'];
    }

    /**
     * Sets port_esl_ssid
     *
     * @param string|null $port_esl_ssid Bridge ESL port to SSID.
     *
     * @return self
     */
    public function setPortEslSsid($port_esl_ssid)
    {
        if (!is_null($port_esl_ssid) && (mb_strlen($port_esl_ssid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port_esl_ssid when calling WirelessControllerWtpWtpIdLan., must be smaller than or equal to 15.');
        }

        $this->container['port_esl_ssid'] = $port_esl_ssid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


