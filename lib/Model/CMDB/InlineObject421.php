<?php
/**
 * InlineObject421
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject421 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject421 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_421';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'server_name' => 'string',
        'domain_name' => 'string',
        'username' => 'string',
        'password' => 'string',
        'ip' => 'string',
        'connect_protocol' => 'string',
        'auth_type' => 'string',
        'auth_level' => 'string',
        'http_auth_type' => 'string',
        'ssl_min_proto_version' => 'string',
        'auto_discover_kdc' => 'string',
        'kdc_ip' => '\Fortigate\FortiOS\Model\CMDB\UserExchangeNameKdcIp[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'server_name' => null,
        'domain_name' => null,
        'username' => null,
        'password' => 'password',
        'ip' => 'ipv4',
        'connect_protocol' => null,
        'auth_type' => null,
        'auth_level' => null,
        'http_auth_type' => null,
        'ssl_min_proto_version' => null,
        'auto_discover_kdc' => null,
        'kdc_ip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'server_name' => 'server-name',
        'domain_name' => 'domain-name',
        'username' => 'username',
        'password' => 'password',
        'ip' => 'ip',
        'connect_protocol' => 'connect-protocol',
        'auth_type' => 'auth-type',
        'auth_level' => 'auth-level',
        'http_auth_type' => 'http-auth-type',
        'ssl_min_proto_version' => 'ssl-min-proto-version',
        'auto_discover_kdc' => 'auto-discover-kdc',
        'kdc_ip' => 'kdc-ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'server_name' => 'setServerName',
        'domain_name' => 'setDomainName',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'ip' => 'setIp',
        'connect_protocol' => 'setConnectProtocol',
        'auth_type' => 'setAuthType',
        'auth_level' => 'setAuthLevel',
        'http_auth_type' => 'setHttpAuthType',
        'ssl_min_proto_version' => 'setSslMinProtoVersion',
        'auto_discover_kdc' => 'setAutoDiscoverKdc',
        'kdc_ip' => 'setKdcIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'server_name' => 'getServerName',
        'domain_name' => 'getDomainName',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'ip' => 'getIp',
        'connect_protocol' => 'getConnectProtocol',
        'auth_type' => 'getAuthType',
        'auth_level' => 'getAuthLevel',
        'http_auth_type' => 'getHttpAuthType',
        'ssl_min_proto_version' => 'getSslMinProtoVersion',
        'auto_discover_kdc' => 'getAutoDiscoverKdc',
        'kdc_ip' => 'getKdcIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONNECT_PROTOCOL_TCP = 'rpc-over-tcp';
    const CONNECT_PROTOCOL_HTTP = 'rpc-over-http';
    const CONNECT_PROTOCOL_HTTPS = 'rpc-over-https';
    const AUTH_TYPE_SPNEGO = 'spnego';
    const AUTH_TYPE_NTLM = 'ntlm';
    const AUTH_TYPE_KERBEROS = 'kerberos';
    const AUTH_LEVEL_CONNECT = 'connect';
    const AUTH_LEVEL_CALL = 'call';
    const AUTH_LEVEL_PACKET = 'packet';
    const AUTH_LEVEL_INTEGRITY = 'integrity';
    const AUTH_LEVEL_PRIVACY = 'privacy';
    const HTTP_AUTH_TYPE_BASIC = 'basic';
    const HTTP_AUTH_TYPE_NTLM = 'ntlm';
    const SSL_MIN_PROTO_VERSION__DEFAULT = 'default';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    const AUTO_DISCOVER_KDC_ENABLE = 'enable';
    const AUTO_DISCOVER_KDC_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectProtocolAllowableValues()
    {
        return [
            self::CONNECT_PROTOCOL_TCP,
            self::CONNECT_PROTOCOL_HTTP,
            self::CONNECT_PROTOCOL_HTTPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_SPNEGO,
            self::AUTH_TYPE_NTLM,
            self::AUTH_TYPE_KERBEROS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthLevelAllowableValues()
    {
        return [
            self::AUTH_LEVEL_CONNECT,
            self::AUTH_LEVEL_CALL,
            self::AUTH_LEVEL_PACKET,
            self::AUTH_LEVEL_INTEGRITY,
            self::AUTH_LEVEL_PRIVACY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpAuthTypeAllowableValues()
    {
        return [
            self::HTTP_AUTH_TYPE_BASIC,
            self::HTTP_AUTH_TYPE_NTLM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION__DEFAULT,
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDiscoverKdcAllowableValues()
    {
        return [
            self::AUTO_DISCOVER_KDC_ENABLE,
            self::AUTO_DISCOVER_KDC_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server_name'] = $data['server_name'] ?? null;
        $this->container['domain_name'] = $data['domain_name'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['connect_protocol'] = $data['connect_protocol'] ?? null;
        $this->container['auth_type'] = $data['auth_type'] ?? null;
        $this->container['auth_level'] = $data['auth_level'] ?? null;
        $this->container['http_auth_type'] = $data['http_auth_type'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
        $this->container['auto_discover_kdc'] = $data['auto_discover_kdc'] ?? null;
        $this->container['kdc_ip'] = $data['kdc_ip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server_name']) && (mb_strlen($this->container['server_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'server_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['domain_name']) && (mb_strlen($this->container['domain_name']) > 79)) {
            $invalidProperties[] = "invalid value for 'domain_name', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 64)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getConnectProtocolAllowableValues();
        if (!is_null($this->container['connect_protocol']) && !in_array($this->container['connect_protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connect_protocol', must be one of '%s'",
                $this->container['connect_protocol'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthLevelAllowableValues();
        if (!is_null($this->container['auth_level']) && !in_array($this->container['auth_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_level', must be one of '%s'",
                $this->container['auth_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHttpAuthTypeAllowableValues();
        if (!is_null($this->container['http_auth_type']) && !in_array($this->container['http_auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'http_auth_type', must be one of '%s'",
                $this->container['http_auth_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoDiscoverKdcAllowableValues();
        if (!is_null($this->container['auto_discover_kdc']) && !in_array($this->container['auto_discover_kdc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_discover_kdc', must be one of '%s'",
                $this->container['auto_discover_kdc'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['kdc_ip']) && (count($this->container['kdc_ip']) > 0)) {
            $invalidProperties[] = "invalid value for 'kdc_ip', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name MS Exchange server entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject421., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string|null
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string|null $server_name MS Exchange server hostname.
     *
     * @return self
     */
    public function setServerName($server_name)
    {
        if (!is_null($server_name) && (mb_strlen($server_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server_name when calling InlineObject421., must be smaller than or equal to 63.');
        }

        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string|null
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string|null $domain_name MS Exchange server fully qualified domain name.
     *
     * @return self
     */
    public function setDomainName($domain_name)
    {
        if (!is_null($domain_name) && (mb_strlen($domain_name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $domain_name when calling InlineObject421., must be smaller than or equal to 79.');
        }

        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username User name used to sign in to the server. Must have proper permissions for service.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject421., must be smaller than or equal to 64.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password for the specified username.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Server IPv4 address.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets connect_protocol
     *
     * @return string|null
     */
    public function getConnectProtocol()
    {
        return $this->container['connect_protocol'];
    }

    /**
     * Sets connect_protocol
     *
     * @param string|null $connect_protocol Connection protocol used to connect to MS Exchange service.    rpc-over-tcp:Connect using RPC-over-TCP. Use for MS Exchange 2010 and earlier versions. Supported in MS Exchange 2013.    rpc-over-http:Connect using RPC-over-HTTP. Use for MS Exchange 2016 and later versions. Supported in MS Exchange 2013.    rpc-over-https:Connect using RPC-over-HTTPS. Use for MS Exchange 2016 and later versions. Supported in MS Exchange 2013.
     *
     * @return self
     */
    public function setConnectProtocol($connect_protocol)
    {
        $allowedValues = $this->getConnectProtocolAllowableValues();
        if (!is_null($connect_protocol) && !in_array($connect_protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connect_protocol', must be one of '%s'",
                    $connect_protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connect_protocol'] = $connect_protocol;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type Authentication security type used for the RPC protocol layer.    spnego:Negotiate authentication.    ntlm:NTLM authentication.    kerberos:Kerberos authentication.
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets auth_level
     *
     * @return string|null
     */
    public function getAuthLevel()
    {
        return $this->container['auth_level'];
    }

    /**
     * Sets auth_level
     *
     * @param string|null $auth_level Authentication security level used for the RPC protocol layer.    connect:RPC authentication level 'connect'.    call:RPC authentication level 'call'.    packet:RPC authentication level 'packet'.    integrity:RPC authentication level 'integrity'.    privacy:RPC authentication level 'privacy'.
     *
     * @return self
     */
    public function setAuthLevel($auth_level)
    {
        $allowedValues = $this->getAuthLevelAllowableValues();
        if (!is_null($auth_level) && !in_array($auth_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_level', must be one of '%s'",
                    $auth_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_level'] = $auth_level;

        return $this;
    }

    /**
     * Gets http_auth_type
     *
     * @return string|null
     */
    public function getHttpAuthType()
    {
        return $this->container['http_auth_type'];
    }

    /**
     * Sets http_auth_type
     *
     * @param string|null $http_auth_type Authentication security type used for the HTTP transport.    basic:Basic HTTP authentication.    ntlm:NTLM HTTP authentication.
     *
     * @return self
     */
    public function setHttpAuthType($http_auth_type)
    {
        $allowedValues = $this->getHttpAuthTypeAllowableValues();
        if (!is_null($http_auth_type) && !in_array($http_auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'http_auth_type', must be one of '%s'",
                    $http_auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_auth_type'] = $http_auth_type;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).    default:Follow system global setting.    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }

    /**
     * Gets auto_discover_kdc
     *
     * @return string|null
     */
    public function getAutoDiscoverKdc()
    {
        return $this->container['auto_discover_kdc'];
    }

    /**
     * Sets auto_discover_kdc
     *
     * @param string|null $auto_discover_kdc Enable/disable automatic discovery of KDC IP addresses.    enable:Enable automatic discovery of KDC IP addresses.    disable:Disable automatic discovery of KDC IP addresses.
     *
     * @return self
     */
    public function setAutoDiscoverKdc($auto_discover_kdc)
    {
        $allowedValues = $this->getAutoDiscoverKdcAllowableValues();
        if (!is_null($auto_discover_kdc) && !in_array($auto_discover_kdc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_discover_kdc', must be one of '%s'",
                    $auto_discover_kdc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_discover_kdc'] = $auto_discover_kdc;

        return $this;
    }

    /**
     * Gets kdc_ip
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserExchangeNameKdcIp[]|null
     */
    public function getKdcIp()
    {
        return $this->container['kdc_ip'];
    }

    /**
     * Sets kdc_ip
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserExchangeNameKdcIp[]|null $kdc_ip KDC IPv4 addresses for Kerberos authentication.
     *
     * @return self
     */
    public function setKdcIp($kdc_ip)
    {

        if (!is_null($kdc_ip) && (count($kdc_ip) > 0)) {
            throw new \InvalidArgumentException('invalid value for $kdc_ip when calling InlineObject421., number of items must be less than or equal to 0.');
        }
        $this->container['kdc_ip'] = $kdc_ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


