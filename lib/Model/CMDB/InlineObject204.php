<?php
/**
 * InlineObject204
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject204 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject204 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_204';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'status' => 'string',
        'mac' => 'string',
        'last_known_switch' => 'string',
        'last_known_port' => 'string',
        'matched_nac_policy' => 'string',
        'port_policy' => 'string',
        'mac_policy' => 'string',
        'last_seen' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'status' => null,
        'mac' => 'mac-address',
        'last_known_switch' => null,
        'last_known_port' => null,
        'matched_nac_policy' => null,
        'port_policy' => null,
        'mac_policy' => null,
        'last_seen' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'status' => 'status',
        'mac' => 'mac',
        'last_known_switch' => 'last-known-switch',
        'last_known_port' => 'last-known-port',
        'matched_nac_policy' => 'matched-nac-policy',
        'port_policy' => 'port-policy',
        'mac_policy' => 'mac-policy',
        'last_seen' => 'last-seen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'mac' => 'setMac',
        'last_known_switch' => 'setLastKnownSwitch',
        'last_known_port' => 'setLastKnownPort',
        'matched_nac_policy' => 'setMatchedNacPolicy',
        'port_policy' => 'setPortPolicy',
        'mac_policy' => 'setMacPolicy',
        'last_seen' => 'setLastSeen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'mac' => 'getMac',
        'last_known_switch' => 'getLastKnownSwitch',
        'last_known_port' => 'getLastKnownPort',
        'matched_nac_policy' => 'getMatchedNacPolicy',
        'port_policy' => 'getPortPolicy',
        'mac_policy' => 'getMacPolicy',
        'last_seen' => 'getLastSeen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['mac'] = $data['mac'] ?? null;
        $this->container['last_known_switch'] = $data['last_known_switch'] ?? null;
        $this->container['last_known_port'] = $data['last_known_port'] ?? null;
        $this->container['matched_nac_policy'] = $data['matched_nac_policy'] ?? null;
        $this->container['port_policy'] = $data['port_policy'] ?? null;
        $this->container['mac_policy'] = $data['mac_policy'] ?? null;
        $this->container['last_seen'] = $data['last_seen'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 127)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['last_known_switch']) && (mb_strlen($this->container['last_known_switch']) > 63)) {
            $invalidProperties[] = "invalid value for 'last_known_switch', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['last_known_port']) && (mb_strlen($this->container['last_known_port']) > 35)) {
            $invalidProperties[] = "invalid value for 'last_known_port', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['matched_nac_policy']) && (mb_strlen($this->container['matched_nac_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'matched_nac_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port_policy']) && (mb_strlen($this->container['port_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'port_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['mac_policy']) && (mb_strlen($this->container['mac_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'mac_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['last_seen']) && ($this->container['last_seen'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'last_seen', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['last_seen']) && ($this->container['last_seen'] < 0)) {
            $invalidProperties[] = "invalid value for 'last_seen', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Device ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject204., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject204., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for the learned NAC device.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 127)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject204., must be smaller than or equal to 127.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the learned NAC device. Set enable to authorize the NAC device.    enable:Enable the NAC device.    disable:Disable the NAC device.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac MAC address of the learned NAC device.
     *
     * @return self
     */
    public function setMac($mac)
    {
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets last_known_switch
     *
     * @return string|null
     */
    public function getLastKnownSwitch()
    {
        return $this->container['last_known_switch'];
    }

    /**
     * Sets last_known_switch
     *
     * @param string|null $last_known_switch Managed FortiSwitch where NAC device is last learned.
     *
     * @return self
     */
    public function setLastKnownSwitch($last_known_switch)
    {
        if (!is_null($last_known_switch) && (mb_strlen($last_known_switch) > 63)) {
            throw new \InvalidArgumentException('invalid length for $last_known_switch when calling InlineObject204., must be smaller than or equal to 63.');
        }

        $this->container['last_known_switch'] = $last_known_switch;

        return $this;
    }

    /**
     * Gets last_known_port
     *
     * @return string|null
     */
    public function getLastKnownPort()
    {
        return $this->container['last_known_port'];
    }

    /**
     * Sets last_known_port
     *
     * @param string|null $last_known_port Managed FortiSwitch port where NAC device is last learned.
     *
     * @return self
     */
    public function setLastKnownPort($last_known_port)
    {
        if (!is_null($last_known_port) && (mb_strlen($last_known_port) > 35)) {
            throw new \InvalidArgumentException('invalid length for $last_known_port when calling InlineObject204., must be smaller than or equal to 35.');
        }

        $this->container['last_known_port'] = $last_known_port;

        return $this;
    }

    /**
     * Gets matched_nac_policy
     *
     * @return string|null
     */
    public function getMatchedNacPolicy()
    {
        return $this->container['matched_nac_policy'];
    }

    /**
     * Sets matched_nac_policy
     *
     * @param string|null $matched_nac_policy Matched NAC policy for the learned NAC device.
     *
     * @return self
     */
    public function setMatchedNacPolicy($matched_nac_policy)
    {
        if (!is_null($matched_nac_policy) && (mb_strlen($matched_nac_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $matched_nac_policy when calling InlineObject204., must be smaller than or equal to 63.');
        }

        $this->container['matched_nac_policy'] = $matched_nac_policy;

        return $this;
    }

    /**
     * Gets port_policy
     *
     * @return string|null
     */
    public function getPortPolicy()
    {
        return $this->container['port_policy'];
    }

    /**
     * Sets port_policy
     *
     * @param string|null $port_policy Port policy to be applied on this learned NAC device.
     *
     * @return self
     */
    public function setPortPolicy($port_policy)
    {
        if (!is_null($port_policy) && (mb_strlen($port_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $port_policy when calling InlineObject204., must be smaller than or equal to 63.');
        }

        $this->container['port_policy'] = $port_policy;

        return $this;
    }

    /**
     * Gets mac_policy
     *
     * @return string|null
     */
    public function getMacPolicy()
    {
        return $this->container['mac_policy'];
    }

    /**
     * Sets mac_policy
     *
     * @param string|null $mac_policy MAC policy to be applied on this learned NAC device.
     *
     * @return self
     */
    public function setMacPolicy($mac_policy)
    {
        if (!is_null($mac_policy) && (mb_strlen($mac_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $mac_policy when calling InlineObject204., must be smaller than or equal to 63.');
        }

        $this->container['mac_policy'] = $mac_policy;

        return $this;
    }

    /**
     * Gets last_seen
     *
     * @return int|null
     */
    public function getLastSeen()
    {
        return $this->container['last_seen'];
    }

    /**
     * Sets last_seen
     *
     * @param int|null $last_seen Device last seen.
     *
     * @return self
     */
    public function setLastSeen($last_seen)
    {

        if (!is_null($last_seen) && ($last_seen > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $last_seen when calling InlineObject204., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($last_seen) && ($last_seen < 0)) {
            throw new \InvalidArgumentException('invalid value for $last_seen when calling InlineObject204., must be bigger than or equal to 0.');
        }

        $this->container['last_seen'] = $last_seen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


