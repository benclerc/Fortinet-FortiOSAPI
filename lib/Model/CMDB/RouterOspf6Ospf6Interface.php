<?php
/**
 * RouterOspf6Ospf6Interface
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterOspf6Ospf6Interface Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterOspf6Ospf6Interface implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_ospf6_ospf6_interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'area_id' => 'string',
        'interface' => 'string',
        'retransmit_interval' => 'int',
        'transmit_delay' => 'int',
        'cost' => 'int',
        'priority' => 'int',
        'dead_interval' => 'int',
        'hello_interval' => 'int',
        'status' => 'string',
        'network_type' => 'string',
        'bfd' => 'string',
        'mtu' => 'int',
        'mtu_ignore' => 'string',
        'authentication' => 'string',
        'key_rollover_interval' => 'int',
        'ipsec_auth_alg' => 'string',
        'ipsec_enc_alg' => 'string',
        'ipsec_keys' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]',
        'neighbor' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6Neighbor[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'area_id' => 'ipv4',
        'interface' => null,
        'retransmit_interval' => null,
        'transmit_delay' => null,
        'cost' => null,
        'priority' => null,
        'dead_interval' => null,
        'hello_interval' => null,
        'status' => null,
        'network_type' => null,
        'bfd' => null,
        'mtu' => null,
        'mtu_ignore' => null,
        'authentication' => null,
        'key_rollover_interval' => null,
        'ipsec_auth_alg' => null,
        'ipsec_enc_alg' => null,
        'ipsec_keys' => null,
        'neighbor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'area_id' => 'area-id',
        'interface' => 'interface',
        'retransmit_interval' => 'retransmit-interval',
        'transmit_delay' => 'transmit-delay',
        'cost' => 'cost',
        'priority' => 'priority',
        'dead_interval' => 'dead-interval',
        'hello_interval' => 'hello-interval',
        'status' => 'status',
        'network_type' => 'network-type',
        'bfd' => 'bfd',
        'mtu' => 'mtu',
        'mtu_ignore' => 'mtu-ignore',
        'authentication' => 'authentication',
        'key_rollover_interval' => 'key-rollover-interval',
        'ipsec_auth_alg' => 'ipsec-auth-alg',
        'ipsec_enc_alg' => 'ipsec-enc-alg',
        'ipsec_keys' => 'ipsec-keys',
        'neighbor' => 'neighbor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'area_id' => 'setAreaId',
        'interface' => 'setInterface',
        'retransmit_interval' => 'setRetransmitInterval',
        'transmit_delay' => 'setTransmitDelay',
        'cost' => 'setCost',
        'priority' => 'setPriority',
        'dead_interval' => 'setDeadInterval',
        'hello_interval' => 'setHelloInterval',
        'status' => 'setStatus',
        'network_type' => 'setNetworkType',
        'bfd' => 'setBfd',
        'mtu' => 'setMtu',
        'mtu_ignore' => 'setMtuIgnore',
        'authentication' => 'setAuthentication',
        'key_rollover_interval' => 'setKeyRolloverInterval',
        'ipsec_auth_alg' => 'setIpsecAuthAlg',
        'ipsec_enc_alg' => 'setIpsecEncAlg',
        'ipsec_keys' => 'setIpsecKeys',
        'neighbor' => 'setNeighbor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'area_id' => 'getAreaId',
        'interface' => 'getInterface',
        'retransmit_interval' => 'getRetransmitInterval',
        'transmit_delay' => 'getTransmitDelay',
        'cost' => 'getCost',
        'priority' => 'getPriority',
        'dead_interval' => 'getDeadInterval',
        'hello_interval' => 'getHelloInterval',
        'status' => 'getStatus',
        'network_type' => 'getNetworkType',
        'bfd' => 'getBfd',
        'mtu' => 'getMtu',
        'mtu_ignore' => 'getMtuIgnore',
        'authentication' => 'getAuthentication',
        'key_rollover_interval' => 'getKeyRolloverInterval',
        'ipsec_auth_alg' => 'getIpsecAuthAlg',
        'ipsec_enc_alg' => 'getIpsecEncAlg',
        'ipsec_keys' => 'getIpsecKeys',
        'neighbor' => 'getNeighbor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const NETWORK_TYPE_BROADCAST = 'broadcast';
    const NETWORK_TYPE_POINT_TO_POINT = 'point-to-point';
    const NETWORK_TYPE_NON_BROADCAST = 'non-broadcast';
    const NETWORK_TYPE_POINT_TO_MULTIPOINT = 'point-to-multipoint';
    const NETWORK_TYPE_POINT_TO_MULTIPOINT_NON_BROADCAST = 'point-to-multipoint-non-broadcast';
    const BFD__GLOBAL = 'global';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const MTU_IGNORE_ENABLE = 'enable';
    const MTU_IGNORE_DISABLE = 'disable';
    const AUTHENTICATION_NONE = 'none';
    const AUTHENTICATION_AH = 'ah';
    const AUTHENTICATION_ESP = 'esp';
    const AUTHENTICATION_AREA = 'area';
    const IPSEC_AUTH_ALG_MD5 = 'md5';
    const IPSEC_AUTH_ALG_SHA1 = 'sha1';
    const IPSEC_AUTH_ALG_SHA256 = 'sha256';
    const IPSEC_AUTH_ALG_SHA384 = 'sha384';
    const IPSEC_AUTH_ALG_SHA512 = 'sha512';
    const IPSEC_ENC_ALG_NULL = 'null';
    const IPSEC_ENC_ALG_DES = 'des';
    const IPSEC_ENC_ALG__3DES = '3des';
    const IPSEC_ENC_ALG_AES128 = 'aes128';
    const IPSEC_ENC_ALG_AES192 = 'aes192';
    const IPSEC_ENC_ALG_AES256 = 'aes256';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_BROADCAST,
            self::NETWORK_TYPE_POINT_TO_POINT,
            self::NETWORK_TYPE_NON_BROADCAST,
            self::NETWORK_TYPE_POINT_TO_MULTIPOINT,
            self::NETWORK_TYPE_POINT_TO_MULTIPOINT_NON_BROADCAST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD__GLOBAL,
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMtuIgnoreAllowableValues()
    {
        return [
            self::MTU_IGNORE_ENABLE,
            self::MTU_IGNORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_NONE,
            self::AUTHENTICATION_AH,
            self::AUTHENTICATION_ESP,
            self::AUTHENTICATION_AREA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecAuthAlgAllowableValues()
    {
        return [
            self::IPSEC_AUTH_ALG_MD5,
            self::IPSEC_AUTH_ALG_SHA1,
            self::IPSEC_AUTH_ALG_SHA256,
            self::IPSEC_AUTH_ALG_SHA384,
            self::IPSEC_AUTH_ALG_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecEncAlgAllowableValues()
    {
        return [
            self::IPSEC_ENC_ALG_NULL,
            self::IPSEC_ENC_ALG_DES,
            self::IPSEC_ENC_ALG__3DES,
            self::IPSEC_ENC_ALG_AES128,
            self::IPSEC_ENC_ALG_AES192,
            self::IPSEC_ENC_ALG_AES256,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['area_id'] = $data['area_id'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['retransmit_interval'] = $data['retransmit_interval'] ?? null;
        $this->container['transmit_delay'] = $data['transmit_delay'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['dead_interval'] = $data['dead_interval'] ?? null;
        $this->container['hello_interval'] = $data['hello_interval'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['network_type'] = $data['network_type'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['mtu'] = $data['mtu'] ?? null;
        $this->container['mtu_ignore'] = $data['mtu_ignore'] ?? null;
        $this->container['authentication'] = $data['authentication'] ?? null;
        $this->container['key_rollover_interval'] = $data['key_rollover_interval'] ?? null;
        $this->container['ipsec_auth_alg'] = $data['ipsec_auth_alg'] ?? null;
        $this->container['ipsec_enc_alg'] = $data['ipsec_enc_alg'] ?? null;
        $this->container['ipsec_keys'] = $data['ipsec_keys'] ?? null;
        $this->container['neighbor'] = $data['neighbor'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['retransmit_interval']) && ($this->container['retransmit_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'retransmit_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['retransmit_interval']) && ($this->container['retransmit_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'retransmit_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transmit_delay']) && ($this->container['transmit_delay'] > 65535)) {
            $invalidProperties[] = "invalid value for 'transmit_delay', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['transmit_delay']) && ($this->container['transmit_delay'] < 1)) {
            $invalidProperties[] = "invalid value for 'transmit_delay', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] > 65535)) {
            $invalidProperties[] = "invalid value for 'cost', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dead_interval']) && ($this->container['dead_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'dead_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['dead_interval']) && ($this->container['dead_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'dead_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($this->container['network_type']) && !in_array($this->container['network_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_type', must be one of '%s'",
                $this->container['network_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] > 65535)) {
            $invalidProperties[] = "invalid value for 'mtu', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] < 576)) {
            $invalidProperties[] = "invalid value for 'mtu', must be bigger than or equal to 576.";
        }

        $allowedValues = $this->getMtuIgnoreAllowableValues();
        if (!is_null($this->container['mtu_ignore']) && !in_array($this->container['mtu_ignore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mtu_ignore', must be one of '%s'",
                $this->container['mtu_ignore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($this->container['authentication']) && !in_array($this->container['authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication', must be one of '%s'",
                $this->container['authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] > 216000)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be smaller than or equal to 216000.";
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] < 300)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($this->container['ipsec_auth_alg']) && !in_array($this->container['ipsec_auth_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                $this->container['ipsec_auth_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($this->container['ipsec_enc_alg']) && !in_array($this->container['ipsec_enc_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                $this->container['ipsec_enc_alg'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipsec_keys']) && (count($this->container['ipsec_keys']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipsec_keys', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor']) && (count($this->container['neighbor']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Interface entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return string|null
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param string|null $area_id A.B.C.D, in IPv4 address format.
     *
     * @return self
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Configuration interface name.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets retransmit_interval
     *
     * @return int|null
     */
    public function getRetransmitInterval()
    {
        return $this->container['retransmit_interval'];
    }

    /**
     * Sets retransmit_interval
     *
     * @param int|null $retransmit_interval Retransmit interval.
     *
     * @return self
     */
    public function setRetransmitInterval($retransmit_interval)
    {

        if (!is_null($retransmit_interval) && ($retransmit_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $retransmit_interval when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($retransmit_interval) && ($retransmit_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $retransmit_interval when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 1.');
        }

        $this->container['retransmit_interval'] = $retransmit_interval;

        return $this;
    }

    /**
     * Gets transmit_delay
     *
     * @return int|null
     */
    public function getTransmitDelay()
    {
        return $this->container['transmit_delay'];
    }

    /**
     * Sets transmit_delay
     *
     * @param int|null $transmit_delay Transmit delay.
     *
     * @return self
     */
    public function setTransmitDelay($transmit_delay)
    {

        if (!is_null($transmit_delay) && ($transmit_delay > 65535)) {
            throw new \InvalidArgumentException('invalid value for $transmit_delay when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($transmit_delay) && ($transmit_delay < 1)) {
            throw new \InvalidArgumentException('invalid value for $transmit_delay when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 1.');
        }

        $this->container['transmit_delay'] = $transmit_delay;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int|null $cost Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
     *
     * @return self
     */
    public function setCost($cost)
    {

        if (!is_null($cost) && ($cost > 65535)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($cost) && ($cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 0.');
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 255.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets dead_interval
     *
     * @return int|null
     */
    public function getDeadInterval()
    {
        return $this->container['dead_interval'];
    }

    /**
     * Sets dead_interval
     *
     * @param int|null $dead_interval Dead interval.
     *
     * @return self
     */
    public function setDeadInterval($dead_interval)
    {

        if (!is_null($dead_interval) && ($dead_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $dead_interval when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($dead_interval) && ($dead_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $dead_interval when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 1.');
        }

        $this->container['dead_interval'] = $dead_interval;

        return $this;
    }

    /**
     * Gets hello_interval
     *
     * @return int|null
     */
    public function getHelloInterval()
    {
        return $this->container['hello_interval'];
    }

    /**
     * Sets hello_interval
     *
     * @param int|null $hello_interval Hello interval.
     *
     * @return self
     */
    public function setHelloInterval($hello_interval)
    {

        if (!is_null($hello_interval) && ($hello_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_interval) && ($hello_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 1.');
        }

        $this->container['hello_interval'] = $hello_interval;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable OSPF6 routing on this interface.    disable:Disable OSPF6 routing.    enable:Enable OSPF6 routing.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string|null
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string|null $network_type Network type.    broadcast:broadcast    point-to-point:point-to-point    non-broadcast:non-broadcast    point-to-multipoint:point-to-multipoint    point-to-multipoint-non-broadcast:point-to-multipoint and non-broadcast.
     *
     * @return self
     */
    public function setNetworkType($network_type)
    {
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($network_type) && !in_array($network_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_type', must be one of '%s'",
                    $network_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable Bidirectional Forwarding Detection (BFD).    global:Use global configuration of Bidirectional Forwarding Detection (BFD).    enable:Enable Bidirectional Forwarding Detection (BFD) on this interface.    disable:Disable Bidirectional Forwarding Detection (BFD) on this interface.
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int|null
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int|null $mtu MTU for OSPFv3 packets.
     *
     * @return self
     */
    public function setMtu($mtu)
    {

        if (!is_null($mtu) && ($mtu > 65535)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 65535.');
        }
        if (!is_null($mtu) && ($mtu < 576)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 576.');
        }

        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets mtu_ignore
     *
     * @return string|null
     */
    public function getMtuIgnore()
    {
        return $this->container['mtu_ignore'];
    }

    /**
     * Sets mtu_ignore
     *
     * @param string|null $mtu_ignore Enable/disable ignoring MTU field in DBD packets.    enable:Ignore MTU field in DBD packets.    disable:Do not ignore MTU field in DBD packets.
     *
     * @return self
     */
    public function setMtuIgnore($mtu_ignore)
    {
        $allowedValues = $this->getMtuIgnoreAllowableValues();
        if (!is_null($mtu_ignore) && !in_array($mtu_ignore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mtu_ignore', must be one of '%s'",
                    $mtu_ignore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mtu_ignore'] = $mtu_ignore;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication Authentication mode.    none:Disable authentication.    ah:Authentication Header.    esp:Encapsulating Security Payload.    area:Use the routing area's authentication configuration.
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication', must be one of '%s'",
                    $authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets key_rollover_interval
     *
     * @return int|null
     */
    public function getKeyRolloverInterval()
    {
        return $this->container['key_rollover_interval'];
    }

    /**
     * Sets key_rollover_interval
     *
     * @param int|null $key_rollover_interval Key roll-over interval.
     *
     * @return self
     */
    public function setKeyRolloverInterval($key_rollover_interval)
    {

        if (!is_null($key_rollover_interval) && ($key_rollover_interval > 216000)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6Ospf6Interface., must be smaller than or equal to 216000.');
        }
        if (!is_null($key_rollover_interval) && ($key_rollover_interval < 300)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6Ospf6Interface., must be bigger than or equal to 300.');
        }

        $this->container['key_rollover_interval'] = $key_rollover_interval;

        return $this;
    }

    /**
     * Gets ipsec_auth_alg
     *
     * @return string|null
     */
    public function getIpsecAuthAlg()
    {
        return $this->container['ipsec_auth_alg'];
    }

    /**
     * Sets ipsec_auth_alg
     *
     * @param string|null $ipsec_auth_alg Authentication algorithm.    md5:MD5.    sha1:SHA1.    sha256:SHA256.    sha384:SHA384.    sha512:SHA512.
     *
     * @return self
     */
    public function setIpsecAuthAlg($ipsec_auth_alg)
    {
        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($ipsec_auth_alg) && !in_array($ipsec_auth_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                    $ipsec_auth_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_auth_alg'] = $ipsec_auth_alg;

        return $this;
    }

    /**
     * Gets ipsec_enc_alg
     *
     * @return string|null
     */
    public function getIpsecEncAlg()
    {
        return $this->container['ipsec_enc_alg'];
    }

    /**
     * Sets ipsec_enc_alg
     *
     * @param string|null $ipsec_enc_alg Encryption algorithm.    null:No encryption.    des:DES.    3des:3DES.    aes128:AES128.    aes192:AES192.    aes256:AES256.
     *
     * @return self
     */
    public function setIpsecEncAlg($ipsec_enc_alg)
    {
        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($ipsec_enc_alg) && !in_array($ipsec_enc_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                    $ipsec_enc_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_enc_alg'] = $ipsec_enc_alg;

        return $this;
    }

    /**
     * Gets ipsec_keys
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null
     */
    public function getIpsecKeys()
    {
        return $this->container['ipsec_keys'];
    }

    /**
     * Sets ipsec_keys
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null $ipsec_keys IPsec authentication and encryption keys.
     *
     * @return self
     */
    public function setIpsecKeys($ipsec_keys)
    {

        if (!is_null($ipsec_keys) && (count($ipsec_keys) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_keys when calling RouterOspf6Ospf6Interface., number of items must be less than or equal to 0.');
        }
        $this->container['ipsec_keys'] = $ipsec_keys;

        return $this;
    }

    /**
     * Gets neighbor
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6Neighbor[]|null
     */
    public function getNeighbor()
    {
        return $this->container['neighbor'];
    }

    /**
     * Sets neighbor
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6Neighbor[]|null $neighbor OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media
     *
     * @return self
     */
    public function setNeighbor($neighbor)
    {

        if (!is_null($neighbor) && (count($neighbor) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor when calling RouterOspf6Ospf6Interface., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor'] = $neighbor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


