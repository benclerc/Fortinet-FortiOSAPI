<?php
/**
 * SwitchControllerManagedSwitchSwitchIdSnmpUser
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchIdSnmpUser Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchIdSnmpUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__snmp_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'queries' => 'string',
        'query_port' => 'int',
        'security_level' => 'string',
        'auth_proto' => 'string',
        'auth_pwd' => 'string',
        'priv_proto' => 'string',
        'priv_pwd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'queries' => null,
        'query_port' => null,
        'security_level' => null,
        'auth_proto' => null,
        'auth_pwd' => 'password',
        'priv_proto' => null,
        'priv_pwd' => 'password'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'queries' => 'queries',
        'query_port' => 'query-port',
        'security_level' => 'security-level',
        'auth_proto' => 'auth-proto',
        'auth_pwd' => 'auth-pwd',
        'priv_proto' => 'priv-proto',
        'priv_pwd' => 'priv-pwd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'queries' => 'setQueries',
        'query_port' => 'setQueryPort',
        'security_level' => 'setSecurityLevel',
        'auth_proto' => 'setAuthProto',
        'auth_pwd' => 'setAuthPwd',
        'priv_proto' => 'setPrivProto',
        'priv_pwd' => 'setPrivPwd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'queries' => 'getQueries',
        'query_port' => 'getQueryPort',
        'security_level' => 'getSecurityLevel',
        'auth_proto' => 'getAuthProto',
        'auth_pwd' => 'getAuthPwd',
        'priv_proto' => 'getPrivProto',
        'priv_pwd' => 'getPrivPwd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const QUERIES_DISABLE = 'disable';
    const QUERIES_ENABLE = 'enable';
    const SECURITY_LEVEL_NO_AUTH_NO_PRIV = 'no-auth-no-priv';
    const SECURITY_LEVEL_AUTH_NO_PRIV = 'auth-no-priv';
    const SECURITY_LEVEL_AUTH_PRIV = 'auth-priv';
    const AUTH_PROTO_MD5 = 'md5';
    const AUTH_PROTO_SHA = 'sha';
    const PRIV_PROTO_AES = 'aes';
    const PRIV_PROTO_DES = 'des';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueriesAllowableValues()
    {
        return [
            self::QUERIES_DISABLE,
            self::QUERIES_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityLevelAllowableValues()
    {
        return [
            self::SECURITY_LEVEL_NO_AUTH_NO_PRIV,
            self::SECURITY_LEVEL_AUTH_NO_PRIV,
            self::SECURITY_LEVEL_AUTH_PRIV,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthProtoAllowableValues()
    {
        return [
            self::AUTH_PROTO_MD5,
            self::AUTH_PROTO_SHA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivProtoAllowableValues()
    {
        return [
            self::PRIV_PROTO_AES,
            self::PRIV_PROTO_DES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['queries'] = $data['queries'] ?? null;
        $this->container['query_port'] = $data['query_port'] ?? null;
        $this->container['security_level'] = $data['security_level'] ?? null;
        $this->container['auth_proto'] = $data['auth_proto'] ?? null;
        $this->container['auth_pwd'] = $data['auth_pwd'] ?? null;
        $this->container['priv_proto'] = $data['priv_proto'] ?? null;
        $this->container['priv_pwd'] = $data['priv_pwd'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 32)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 32.";
        }

        $allowedValues = $this->getQueriesAllowableValues();
        if (!is_null($this->container['queries']) && !in_array($this->container['queries'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'queries', must be one of '%s'",
                $this->container['queries'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['query_port']) && ($this->container['query_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'query_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['query_port']) && ($this->container['query_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'query_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSecurityLevelAllowableValues();
        if (!is_null($this->container['security_level']) && !in_array($this->container['security_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_level', must be one of '%s'",
                $this->container['security_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthProtoAllowableValues();
        if (!is_null($this->container['auth_proto']) && !in_array($this->container['auth_proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_proto', must be one of '%s'",
                $this->container['auth_proto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrivProtoAllowableValues();
        if (!is_null($this->container['priv_proto']) && !in_array($this->container['priv_proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priv_proto', must be one of '%s'",
                $this->container['priv_proto'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name SNMP user name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 32)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SwitchControllerManagedSwitchSwitchIdSnmpUser., must be smaller than or equal to 32.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets queries
     *
     * @return string|null
     */
    public function getQueries()
    {
        return $this->container['queries'];
    }

    /**
     * Sets queries
     *
     * @param string|null $queries Enable/disable SNMP queries for this user.    disable:Disable SNMP queries for this user.    enable:Enable SNMP queries for this user.
     *
     * @return self
     */
    public function setQueries($queries)
    {
        $allowedValues = $this->getQueriesAllowableValues();
        if (!is_null($queries) && !in_array($queries, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'queries', must be one of '%s'",
                    $queries,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['queries'] = $queries;

        return $this;
    }

    /**
     * Gets query_port
     *
     * @return int|null
     */
    public function getQueryPort()
    {
        return $this->container['query_port'];
    }

    /**
     * Sets query_port
     *
     * @param int|null $query_port SNMPv3 query port (default = 161).
     *
     * @return self
     */
    public function setQueryPort($query_port)
    {

        if (!is_null($query_port) && ($query_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $query_port when calling SwitchControllerManagedSwitchSwitchIdSnmpUser., must be smaller than or equal to 65535.');
        }
        if (!is_null($query_port) && ($query_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $query_port when calling SwitchControllerManagedSwitchSwitchIdSnmpUser., must be bigger than or equal to 0.');
        }

        $this->container['query_port'] = $query_port;

        return $this;
    }

    /**
     * Gets security_level
     *
     * @return string|null
     */
    public function getSecurityLevel()
    {
        return $this->container['security_level'];
    }

    /**
     * Sets security_level
     *
     * @param string|null $security_level Security level for message authentication and encryption.    no-auth-no-priv:Message with no authentication and no privacy (encryption).    auth-no-priv:Message with authentication but no privacy (encryption).    auth-priv:Message with authentication and privacy (encryption).
     *
     * @return self
     */
    public function setSecurityLevel($security_level)
    {
        $allowedValues = $this->getSecurityLevelAllowableValues();
        if (!is_null($security_level) && !in_array($security_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_level', must be one of '%s'",
                    $security_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_level'] = $security_level;

        return $this;
    }

    /**
     * Gets auth_proto
     *
     * @return string|null
     */
    public function getAuthProto()
    {
        return $this->container['auth_proto'];
    }

    /**
     * Sets auth_proto
     *
     * @param string|null $auth_proto Authentication protocol.    md5:HMAC-MD5-96 authentication protocol.    sha:HMAC-SHA-96 authentication protocol.
     *
     * @return self
     */
    public function setAuthProto($auth_proto)
    {
        $allowedValues = $this->getAuthProtoAllowableValues();
        if (!is_null($auth_proto) && !in_array($auth_proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_proto', must be one of '%s'",
                    $auth_proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_proto'] = $auth_proto;

        return $this;
    }

    /**
     * Gets auth_pwd
     *
     * @return string|null
     */
    public function getAuthPwd()
    {
        return $this->container['auth_pwd'];
    }

    /**
     * Sets auth_pwd
     *
     * @param string|null $auth_pwd Password for authentication protocol.
     *
     * @return self
     */
    public function setAuthPwd($auth_pwd)
    {
        $this->container['auth_pwd'] = $auth_pwd;

        return $this;
    }

    /**
     * Gets priv_proto
     *
     * @return string|null
     */
    public function getPrivProto()
    {
        return $this->container['priv_proto'];
    }

    /**
     * Sets priv_proto
     *
     * @param string|null $priv_proto Privacy (encryption) protocol.    aes:CFB128-AES-128 symmetric encryption protocol.    des:CBC-DES symmetric encryption protocol.
     *
     * @return self
     */
    public function setPrivProto($priv_proto)
    {
        $allowedValues = $this->getPrivProtoAllowableValues();
        if (!is_null($priv_proto) && !in_array($priv_proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priv_proto', must be one of '%s'",
                    $priv_proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priv_proto'] = $priv_proto;

        return $this;
    }

    /**
     * Gets priv_pwd
     *
     * @return string|null
     */
    public function getPrivPwd()
    {
        return $this->container['priv_pwd'];
    }

    /**
     * Sets priv_pwd
     *
     * @param string|null $priv_pwd Password for privacy (encryption) protocol.
     *
     * @return self
     */
    public function setPrivPwd($priv_pwd)
    {
        $this->container['priv_pwd'] = $priv_pwd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


