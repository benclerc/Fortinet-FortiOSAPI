<?php
/**
 * InlineObject341
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject341 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject341 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_341';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'roaming_interface' => 'string',
        'home_agent' => 'string',
        'home_address' => 'string',
        'renew_interval' => 'int',
        'lifetime' => 'int',
        'reg_interval' => 'int',
        'reg_retry' => 'int',
        'n_mhae_spi' => 'int',
        'n_mhae_key_type' => 'string',
        'n_mhae_key' => 'string',
        'hash_algorithm' => 'string',
        'tunnel_mode' => 'string',
        'network' => '\Fortigate\FortiOS\Model\CMDB\SystemMobileTunnelNameNetwork[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'roaming_interface' => null,
        'home_agent' => 'ipv4',
        'home_address' => 'ipv4',
        'renew_interval' => null,
        'lifetime' => null,
        'reg_interval' => null,
        'reg_retry' => null,
        'n_mhae_spi' => null,
        'n_mhae_key_type' => null,
        'n_mhae_key' => null,
        'hash_algorithm' => null,
        'tunnel_mode' => null,
        'network' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'roaming_interface' => 'roaming-interface',
        'home_agent' => 'home-agent',
        'home_address' => 'home-address',
        'renew_interval' => 'renew-interval',
        'lifetime' => 'lifetime',
        'reg_interval' => 'reg-interval',
        'reg_retry' => 'reg-retry',
        'n_mhae_spi' => 'n-mhae-spi',
        'n_mhae_key_type' => 'n-mhae-key-type',
        'n_mhae_key' => 'n-mhae-key',
        'hash_algorithm' => 'hash-algorithm',
        'tunnel_mode' => 'tunnel-mode',
        'network' => 'network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'roaming_interface' => 'setRoamingInterface',
        'home_agent' => 'setHomeAgent',
        'home_address' => 'setHomeAddress',
        'renew_interval' => 'setRenewInterval',
        'lifetime' => 'setLifetime',
        'reg_interval' => 'setRegInterval',
        'reg_retry' => 'setRegRetry',
        'n_mhae_spi' => 'setNMhaeSpi',
        'n_mhae_key_type' => 'setNMhaeKeyType',
        'n_mhae_key' => 'setNMhaeKey',
        'hash_algorithm' => 'setHashAlgorithm',
        'tunnel_mode' => 'setTunnelMode',
        'network' => 'setNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'roaming_interface' => 'getRoamingInterface',
        'home_agent' => 'getHomeAgent',
        'home_address' => 'getHomeAddress',
        'renew_interval' => 'getRenewInterval',
        'lifetime' => 'getLifetime',
        'reg_interval' => 'getRegInterval',
        'reg_retry' => 'getRegRetry',
        'n_mhae_spi' => 'getNMhaeSpi',
        'n_mhae_key_type' => 'getNMhaeKeyType',
        'n_mhae_key' => 'getNMhaeKey',
        'hash_algorithm' => 'getHashAlgorithm',
        'tunnel_mode' => 'getTunnelMode',
        'network' => 'getNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const N_MHAE_KEY_TYPE_ASCII = 'ascii';
    const N_MHAE_KEY_TYPE_BASE64 = 'base64';
    const HASH_ALGORITHM_HMAC_MD5 = 'hmac-md5';
    const TUNNEL_MODE_GRE = 'gre';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNMhaeKeyTypeAllowableValues()
    {
        return [
            self::N_MHAE_KEY_TYPE_ASCII,
            self::N_MHAE_KEY_TYPE_BASE64,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHashAlgorithmAllowableValues()
    {
        return [
            self::HASH_ALGORITHM_HMAC_MD5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelModeAllowableValues()
    {
        return [
            self::TUNNEL_MODE_GRE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['roaming_interface'] = $data['roaming_interface'] ?? null;
        $this->container['home_agent'] = $data['home_agent'] ?? null;
        $this->container['home_address'] = $data['home_address'] ?? null;
        $this->container['renew_interval'] = $data['renew_interval'] ?? null;
        $this->container['lifetime'] = $data['lifetime'] ?? null;
        $this->container['reg_interval'] = $data['reg_interval'] ?? null;
        $this->container['reg_retry'] = $data['reg_retry'] ?? null;
        $this->container['n_mhae_spi'] = $data['n_mhae_spi'] ?? null;
        $this->container['n_mhae_key_type'] = $data['n_mhae_key_type'] ?? null;
        $this->container['n_mhae_key'] = $data['n_mhae_key'] ?? null;
        $this->container['hash_algorithm'] = $data['hash_algorithm'] ?? null;
        $this->container['tunnel_mode'] = $data['tunnel_mode'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['roaming_interface']) && (mb_strlen($this->container['roaming_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'roaming_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['renew_interval']) && ($this->container['renew_interval'] > 60)) {
            $invalidProperties[] = "invalid value for 'renew_interval', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['renew_interval']) && ($this->container['renew_interval'] < 5)) {
            $invalidProperties[] = "invalid value for 'renew_interval', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['lifetime']) && ($this->container['lifetime'] > 65535)) {
            $invalidProperties[] = "invalid value for 'lifetime', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['lifetime']) && ($this->container['lifetime'] < 180)) {
            $invalidProperties[] = "invalid value for 'lifetime', must be bigger than or equal to 180.";
        }

        if (!is_null($this->container['reg_interval']) && ($this->container['reg_interval'] > 300)) {
            $invalidProperties[] = "invalid value for 'reg_interval', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['reg_interval']) && ($this->container['reg_interval'] < 5)) {
            $invalidProperties[] = "invalid value for 'reg_interval', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['reg_retry']) && ($this->container['reg_retry'] > 30)) {
            $invalidProperties[] = "invalid value for 'reg_retry', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['reg_retry']) && ($this->container['reg_retry'] < 1)) {
            $invalidProperties[] = "invalid value for 'reg_retry', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_mhae_spi']) && ($this->container['n_mhae_spi'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'n_mhae_spi', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['n_mhae_spi']) && ($this->container['n_mhae_spi'] < 0)) {
            $invalidProperties[] = "invalid value for 'n_mhae_spi', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNMhaeKeyTypeAllowableValues();
        if (!is_null($this->container['n_mhae_key_type']) && !in_array($this->container['n_mhae_key_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'n_mhae_key_type', must be one of '%s'",
                $this->container['n_mhae_key_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHashAlgorithmAllowableValues();
        if (!is_null($this->container['hash_algorithm']) && !in_array($this->container['hash_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hash_algorithm', must be one of '%s'",
                $this->container['hash_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTunnelModeAllowableValues();
        if (!is_null($this->container['tunnel_mode']) && !in_array($this->container['tunnel_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_mode', must be one of '%s'",
                $this->container['tunnel_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['network']) && (count($this->container['network']) > 0)) {
            $invalidProperties[] = "invalid value for 'network', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tunnel name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject341., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this mobile tunnel.    disable:Disable this mobile tunnel.    enable:Enable this mobile tunnel.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets roaming_interface
     *
     * @return string|null
     */
    public function getRoamingInterface()
    {
        return $this->container['roaming_interface'];
    }

    /**
     * Sets roaming_interface
     *
     * @param string|null $roaming_interface Select the associated interface name from available options.
     *
     * @return self
     */
    public function setRoamingInterface($roaming_interface)
    {
        if (!is_null($roaming_interface) && (mb_strlen($roaming_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $roaming_interface when calling InlineObject341., must be smaller than or equal to 15.');
        }

        $this->container['roaming_interface'] = $roaming_interface;

        return $this;
    }

    /**
     * Gets home_agent
     *
     * @return string|null
     */
    public function getHomeAgent()
    {
        return $this->container['home_agent'];
    }

    /**
     * Sets home_agent
     *
     * @param string|null $home_agent IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
     *
     * @return self
     */
    public function setHomeAgent($home_agent)
    {
        $this->container['home_agent'] = $home_agent;

        return $this;
    }

    /**
     * Gets home_address
     *
     * @return string|null
     */
    public function getHomeAddress()
    {
        return $this->container['home_address'];
    }

    /**
     * Sets home_address
     *
     * @param string|null $home_address Home IP address (Format: xxx.xxx.xxx.xxx).
     *
     * @return self
     */
    public function setHomeAddress($home_address)
    {
        $this->container['home_address'] = $home_address;

        return $this;
    }

    /**
     * Gets renew_interval
     *
     * @return int|null
     */
    public function getRenewInterval()
    {
        return $this->container['renew_interval'];
    }

    /**
     * Sets renew_interval
     *
     * @param int|null $renew_interval Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
     *
     * @return self
     */
    public function setRenewInterval($renew_interval)
    {

        if (!is_null($renew_interval) && ($renew_interval > 60)) {
            throw new \InvalidArgumentException('invalid value for $renew_interval when calling InlineObject341., must be smaller than or equal to 60.');
        }
        if (!is_null($renew_interval) && ($renew_interval < 5)) {
            throw new \InvalidArgumentException('invalid value for $renew_interval when calling InlineObject341., must be bigger than or equal to 5.');
        }

        $this->container['renew_interval'] = $renew_interval;

        return $this;
    }

    /**
     * Gets lifetime
     *
     * @return int|null
     */
    public function getLifetime()
    {
        return $this->container['lifetime'];
    }

    /**
     * Sets lifetime
     *
     * @param int|null $lifetime NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
     *
     * @return self
     */
    public function setLifetime($lifetime)
    {

        if (!is_null($lifetime) && ($lifetime > 65535)) {
            throw new \InvalidArgumentException('invalid value for $lifetime when calling InlineObject341., must be smaller than or equal to 65535.');
        }
        if (!is_null($lifetime) && ($lifetime < 180)) {
            throw new \InvalidArgumentException('invalid value for $lifetime when calling InlineObject341., must be bigger than or equal to 180.');
        }

        $this->container['lifetime'] = $lifetime;

        return $this;
    }

    /**
     * Gets reg_interval
     *
     * @return int|null
     */
    public function getRegInterval()
    {
        return $this->container['reg_interval'];
    }

    /**
     * Sets reg_interval
     *
     * @param int|null $reg_interval NMMO HA registration interval (5 - 300, default = 5).
     *
     * @return self
     */
    public function setRegInterval($reg_interval)
    {

        if (!is_null($reg_interval) && ($reg_interval > 300)) {
            throw new \InvalidArgumentException('invalid value for $reg_interval when calling InlineObject341., must be smaller than or equal to 300.');
        }
        if (!is_null($reg_interval) && ($reg_interval < 5)) {
            throw new \InvalidArgumentException('invalid value for $reg_interval when calling InlineObject341., must be bigger than or equal to 5.');
        }

        $this->container['reg_interval'] = $reg_interval;

        return $this;
    }

    /**
     * Gets reg_retry
     *
     * @return int|null
     */
    public function getRegRetry()
    {
        return $this->container['reg_retry'];
    }

    /**
     * Sets reg_retry
     *
     * @param int|null $reg_retry Maximum number of NMMO HA registration retries (1 to 30, default = 3).
     *
     * @return self
     */
    public function setRegRetry($reg_retry)
    {

        if (!is_null($reg_retry) && ($reg_retry > 30)) {
            throw new \InvalidArgumentException('invalid value for $reg_retry when calling InlineObject341., must be smaller than or equal to 30.');
        }
        if (!is_null($reg_retry) && ($reg_retry < 1)) {
            throw new \InvalidArgumentException('invalid value for $reg_retry when calling InlineObject341., must be bigger than or equal to 1.');
        }

        $this->container['reg_retry'] = $reg_retry;

        return $this;
    }

    /**
     * Gets n_mhae_spi
     *
     * @return int|null
     */
    public function getNMhaeSpi()
    {
        return $this->container['n_mhae_spi'];
    }

    /**
     * Sets n_mhae_spi
     *
     * @param int|null $n_mhae_spi NEMO authentication SPI (default: 256).
     *
     * @return self
     */
    public function setNMhaeSpi($n_mhae_spi)
    {

        if (!is_null($n_mhae_spi) && ($n_mhae_spi > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $n_mhae_spi when calling InlineObject341., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($n_mhae_spi) && ($n_mhae_spi < 0)) {
            throw new \InvalidArgumentException('invalid value for $n_mhae_spi when calling InlineObject341., must be bigger than or equal to 0.');
        }

        $this->container['n_mhae_spi'] = $n_mhae_spi;

        return $this;
    }

    /**
     * Gets n_mhae_key_type
     *
     * @return string|null
     */
    public function getNMhaeKeyType()
    {
        return $this->container['n_mhae_key_type'];
    }

    /**
     * Sets n_mhae_key_type
     *
     * @param string|null $n_mhae_key_type NEMO authentication key type (ascii or base64).    ascii:The authentication key is an ASCII string.    base64:The authentication key is Base64 encoded.
     *
     * @return self
     */
    public function setNMhaeKeyType($n_mhae_key_type)
    {
        $allowedValues = $this->getNMhaeKeyTypeAllowableValues();
        if (!is_null($n_mhae_key_type) && !in_array($n_mhae_key_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'n_mhae_key_type', must be one of '%s'",
                    $n_mhae_key_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['n_mhae_key_type'] = $n_mhae_key_type;

        return $this;
    }

    /**
     * Gets n_mhae_key
     *
     * @return string|null
     */
    public function getNMhaeKey()
    {
        return $this->container['n_mhae_key'];
    }

    /**
     * Sets n_mhae_key
     *
     * @param string|null $n_mhae_key NEMO authentication key.
     *
     * @return self
     */
    public function setNMhaeKey($n_mhae_key)
    {
        $this->container['n_mhae_key'] = $n_mhae_key;

        return $this;
    }

    /**
     * Gets hash_algorithm
     *
     * @return string|null
     */
    public function getHashAlgorithm()
    {
        return $this->container['hash_algorithm'];
    }

    /**
     * Sets hash_algorithm
     *
     * @param string|null $hash_algorithm Hash Algorithm (Keyed MD5).    hmac-md5:Keyed MD5.
     *
     * @return self
     */
    public function setHashAlgorithm($hash_algorithm)
    {
        $allowedValues = $this->getHashAlgorithmAllowableValues();
        if (!is_null($hash_algorithm) && !in_array($hash_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hash_algorithm', must be one of '%s'",
                    $hash_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hash_algorithm'] = $hash_algorithm;

        return $this;
    }

    /**
     * Gets tunnel_mode
     *
     * @return string|null
     */
    public function getTunnelMode()
    {
        return $this->container['tunnel_mode'];
    }

    /**
     * Sets tunnel_mode
     *
     * @param string|null $tunnel_mode NEMO tunnnel mode (GRE tunnel).    gre:GRE tunnel.
     *
     * @return self
     */
    public function setTunnelMode($tunnel_mode)
    {
        $allowedValues = $this->getTunnelModeAllowableValues();
        if (!is_null($tunnel_mode) && !in_array($tunnel_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_mode', must be one of '%s'",
                    $tunnel_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_mode'] = $tunnel_mode;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemMobileTunnelNameNetwork[]|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemMobileTunnelNameNetwork[]|null $network NEMO network configuration.
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if (!is_null($network) && (count($network) > 0)) {
            throw new \InvalidArgumentException('invalid value for $network when calling InlineObject341., number of items must be less than or equal to 0.');
        }
        $this->container['network'] = $network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


