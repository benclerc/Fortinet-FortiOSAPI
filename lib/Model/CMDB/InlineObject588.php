<?php
/**
 * InlineObject588
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject588 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject588 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_588';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'selection_period' => 'int',
        'monitor_period' => 'int',
        'weight_managed_ap' => 'int',
        'weight_rogue_ap' => 'int',
        'weight_noise_floor' => 'int',
        'weight_channel_load' => 'int',
        'weight_spectral_rssi' => 'int',
        'weight_weather_channel' => 'int',
        'weight_dfs_channel' => 'int',
        'threshold_ap' => 'int',
        'threshold_noise_floor' => 'string',
        'threshold_channel_load' => 'int',
        'threshold_spectral_rssi' => 'string',
        'threshold_tx_retries' => 'int',
        'threshold_rx_errors' => 'int',
        'include_weather_channel' => 'string',
        'include_dfs_channel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'selection_period' => null,
        'monitor_period' => null,
        'weight_managed_ap' => null,
        'weight_rogue_ap' => null,
        'weight_noise_floor' => null,
        'weight_channel_load' => null,
        'weight_spectral_rssi' => null,
        'weight_weather_channel' => null,
        'weight_dfs_channel' => null,
        'threshold_ap' => null,
        'threshold_noise_floor' => null,
        'threshold_channel_load' => null,
        'threshold_spectral_rssi' => null,
        'threshold_tx_retries' => null,
        'threshold_rx_errors' => null,
        'include_weather_channel' => null,
        'include_dfs_channel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'selection_period' => 'selection-period',
        'monitor_period' => 'monitor-period',
        'weight_managed_ap' => 'weight-managed-ap',
        'weight_rogue_ap' => 'weight-rogue-ap',
        'weight_noise_floor' => 'weight-noise-floor',
        'weight_channel_load' => 'weight-channel-load',
        'weight_spectral_rssi' => 'weight-spectral-rssi',
        'weight_weather_channel' => 'weight-weather-channel',
        'weight_dfs_channel' => 'weight-dfs-channel',
        'threshold_ap' => 'threshold-ap',
        'threshold_noise_floor' => 'threshold-noise-floor',
        'threshold_channel_load' => 'threshold-channel-load',
        'threshold_spectral_rssi' => 'threshold-spectral-rssi',
        'threshold_tx_retries' => 'threshold-tx-retries',
        'threshold_rx_errors' => 'threshold-rx-errors',
        'include_weather_channel' => 'include-weather-channel',
        'include_dfs_channel' => 'include-dfs-channel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'selection_period' => 'setSelectionPeriod',
        'monitor_period' => 'setMonitorPeriod',
        'weight_managed_ap' => 'setWeightManagedAp',
        'weight_rogue_ap' => 'setWeightRogueAp',
        'weight_noise_floor' => 'setWeightNoiseFloor',
        'weight_channel_load' => 'setWeightChannelLoad',
        'weight_spectral_rssi' => 'setWeightSpectralRssi',
        'weight_weather_channel' => 'setWeightWeatherChannel',
        'weight_dfs_channel' => 'setWeightDfsChannel',
        'threshold_ap' => 'setThresholdAp',
        'threshold_noise_floor' => 'setThresholdNoiseFloor',
        'threshold_channel_load' => 'setThresholdChannelLoad',
        'threshold_spectral_rssi' => 'setThresholdSpectralRssi',
        'threshold_tx_retries' => 'setThresholdTxRetries',
        'threshold_rx_errors' => 'setThresholdRxErrors',
        'include_weather_channel' => 'setIncludeWeatherChannel',
        'include_dfs_channel' => 'setIncludeDfsChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'selection_period' => 'getSelectionPeriod',
        'monitor_period' => 'getMonitorPeriod',
        'weight_managed_ap' => 'getWeightManagedAp',
        'weight_rogue_ap' => 'getWeightRogueAp',
        'weight_noise_floor' => 'getWeightNoiseFloor',
        'weight_channel_load' => 'getWeightChannelLoad',
        'weight_spectral_rssi' => 'getWeightSpectralRssi',
        'weight_weather_channel' => 'getWeightWeatherChannel',
        'weight_dfs_channel' => 'getWeightDfsChannel',
        'threshold_ap' => 'getThresholdAp',
        'threshold_noise_floor' => 'getThresholdNoiseFloor',
        'threshold_channel_load' => 'getThresholdChannelLoad',
        'threshold_spectral_rssi' => 'getThresholdSpectralRssi',
        'threshold_tx_retries' => 'getThresholdTxRetries',
        'threshold_rx_errors' => 'getThresholdRxErrors',
        'include_weather_channel' => 'getIncludeWeatherChannel',
        'include_dfs_channel' => 'getIncludeDfsChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INCLUDE_WEATHER_CHANNEL_ENABLE = 'enable';
    const INCLUDE_WEATHER_CHANNEL_DISABLE = 'disable';
    const INCLUDE_DFS_CHANNEL_ENABLE = 'enable';
    const INCLUDE_DFS_CHANNEL_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeWeatherChannelAllowableValues()
    {
        return [
            self::INCLUDE_WEATHER_CHANNEL_ENABLE,
            self::INCLUDE_WEATHER_CHANNEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeDfsChannelAllowableValues()
    {
        return [
            self::INCLUDE_DFS_CHANNEL_ENABLE,
            self::INCLUDE_DFS_CHANNEL_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['selection_period'] = $data['selection_period'] ?? null;
        $this->container['monitor_period'] = $data['monitor_period'] ?? null;
        $this->container['weight_managed_ap'] = $data['weight_managed_ap'] ?? null;
        $this->container['weight_rogue_ap'] = $data['weight_rogue_ap'] ?? null;
        $this->container['weight_noise_floor'] = $data['weight_noise_floor'] ?? null;
        $this->container['weight_channel_load'] = $data['weight_channel_load'] ?? null;
        $this->container['weight_spectral_rssi'] = $data['weight_spectral_rssi'] ?? null;
        $this->container['weight_weather_channel'] = $data['weight_weather_channel'] ?? null;
        $this->container['weight_dfs_channel'] = $data['weight_dfs_channel'] ?? null;
        $this->container['threshold_ap'] = $data['threshold_ap'] ?? null;
        $this->container['threshold_noise_floor'] = $data['threshold_noise_floor'] ?? null;
        $this->container['threshold_channel_load'] = $data['threshold_channel_load'] ?? null;
        $this->container['threshold_spectral_rssi'] = $data['threshold_spectral_rssi'] ?? null;
        $this->container['threshold_tx_retries'] = $data['threshold_tx_retries'] ?? null;
        $this->container['threshold_rx_errors'] = $data['threshold_rx_errors'] ?? null;
        $this->container['include_weather_channel'] = $data['include_weather_channel'] ?? null;
        $this->container['include_dfs_channel'] = $data['include_dfs_channel'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['selection_period']) && ($this->container['selection_period'] > 65535)) {
            $invalidProperties[] = "invalid value for 'selection_period', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['selection_period']) && ($this->container['selection_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'selection_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['monitor_period']) && ($this->container['monitor_period'] > 65535)) {
            $invalidProperties[] = "invalid value for 'monitor_period', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['monitor_period']) && ($this->container['monitor_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'monitor_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_managed_ap']) && ($this->container['weight_managed_ap'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_managed_ap', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_managed_ap']) && ($this->container['weight_managed_ap'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_managed_ap', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_rogue_ap']) && ($this->container['weight_rogue_ap'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_rogue_ap', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_rogue_ap']) && ($this->container['weight_rogue_ap'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_rogue_ap', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_noise_floor']) && ($this->container['weight_noise_floor'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_noise_floor', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_noise_floor']) && ($this->container['weight_noise_floor'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_noise_floor', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_channel_load']) && ($this->container['weight_channel_load'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_channel_load', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_channel_load']) && ($this->container['weight_channel_load'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_channel_load', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_spectral_rssi']) && ($this->container['weight_spectral_rssi'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_spectral_rssi', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_spectral_rssi']) && ($this->container['weight_spectral_rssi'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_spectral_rssi', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_weather_channel']) && ($this->container['weight_weather_channel'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_weather_channel', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_weather_channel']) && ($this->container['weight_weather_channel'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_weather_channel', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight_dfs_channel']) && ($this->container['weight_dfs_channel'] > 2000)) {
            $invalidProperties[] = "invalid value for 'weight_dfs_channel', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['weight_dfs_channel']) && ($this->container['weight_dfs_channel'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_dfs_channel', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_ap']) && ($this->container['threshold_ap'] > 500)) {
            $invalidProperties[] = "invalid value for 'threshold_ap', must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['threshold_ap']) && ($this->container['threshold_ap'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_ap', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_noise_floor']) && (mb_strlen($this->container['threshold_noise_floor']) > 7)) {
            $invalidProperties[] = "invalid value for 'threshold_noise_floor', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['threshold_channel_load']) && ($this->container['threshold_channel_load'] > 100)) {
            $invalidProperties[] = "invalid value for 'threshold_channel_load', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['threshold_channel_load']) && ($this->container['threshold_channel_load'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_channel_load', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_spectral_rssi']) && (mb_strlen($this->container['threshold_spectral_rssi']) > 7)) {
            $invalidProperties[] = "invalid value for 'threshold_spectral_rssi', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['threshold_tx_retries']) && ($this->container['threshold_tx_retries'] > 1000)) {
            $invalidProperties[] = "invalid value for 'threshold_tx_retries', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['threshold_tx_retries']) && ($this->container['threshold_tx_retries'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_tx_retries', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_rx_errors']) && ($this->container['threshold_rx_errors'] > 100)) {
            $invalidProperties[] = "invalid value for 'threshold_rx_errors', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['threshold_rx_errors']) && ($this->container['threshold_rx_errors'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_rx_errors', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIncludeWeatherChannelAllowableValues();
        if (!is_null($this->container['include_weather_channel']) && !in_array($this->container['include_weather_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include_weather_channel', must be one of '%s'",
                $this->container['include_weather_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncludeDfsChannelAllowableValues();
        if (!is_null($this->container['include_dfs_channel']) && !in_array($this->container['include_dfs_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include_dfs_channel', must be one of '%s'",
                $this->container['include_dfs_channel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WiFi ARRP profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject588., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject588., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets selection_period
     *
     * @return int|null
     */
    public function getSelectionPeriod()
    {
        return $this->container['selection_period'];
    }

    /**
     * Sets selection_period
     *
     * @param int|null $selection_period Period in seconds to measure average channel load, noise floor, spectral RSSI (default = 3600).
     *
     * @return self
     */
    public function setSelectionPeriod($selection_period)
    {

        if (!is_null($selection_period) && ($selection_period > 65535)) {
            throw new \InvalidArgumentException('invalid value for $selection_period when calling InlineObject588., must be smaller than or equal to 65535.');
        }
        if (!is_null($selection_period) && ($selection_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $selection_period when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['selection_period'] = $selection_period;

        return $this;
    }

    /**
     * Gets monitor_period
     *
     * @return int|null
     */
    public function getMonitorPeriod()
    {
        return $this->container['monitor_period'];
    }

    /**
     * Sets monitor_period
     *
     * @param int|null $monitor_period Period in seconds to measure average transmit retries and receive errors (default = 300).
     *
     * @return self
     */
    public function setMonitorPeriod($monitor_period)
    {

        if (!is_null($monitor_period) && ($monitor_period > 65535)) {
            throw new \InvalidArgumentException('invalid value for $monitor_period when calling InlineObject588., must be smaller than or equal to 65535.');
        }
        if (!is_null($monitor_period) && ($monitor_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $monitor_period when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['monitor_period'] = $monitor_period;

        return $this;
    }

    /**
     * Gets weight_managed_ap
     *
     * @return int|null
     */
    public function getWeightManagedAp()
    {
        return $this->container['weight_managed_ap'];
    }

    /**
     * Sets weight_managed_ap
     *
     * @param int|null $weight_managed_ap Weight in DARRP channel score calculation for managed APs (0 - 2000, default = 50).
     *
     * @return self
     */
    public function setWeightManagedAp($weight_managed_ap)
    {

        if (!is_null($weight_managed_ap) && ($weight_managed_ap > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_managed_ap when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_managed_ap) && ($weight_managed_ap < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_managed_ap when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_managed_ap'] = $weight_managed_ap;

        return $this;
    }

    /**
     * Gets weight_rogue_ap
     *
     * @return int|null
     */
    public function getWeightRogueAp()
    {
        return $this->container['weight_rogue_ap'];
    }

    /**
     * Sets weight_rogue_ap
     *
     * @param int|null $weight_rogue_ap Weight in DARRP channel score calculation for rogue APs (0 - 2000, default = 10).
     *
     * @return self
     */
    public function setWeightRogueAp($weight_rogue_ap)
    {

        if (!is_null($weight_rogue_ap) && ($weight_rogue_ap > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_rogue_ap when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_rogue_ap) && ($weight_rogue_ap < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_rogue_ap when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_rogue_ap'] = $weight_rogue_ap;

        return $this;
    }

    /**
     * Gets weight_noise_floor
     *
     * @return int|null
     */
    public function getWeightNoiseFloor()
    {
        return $this->container['weight_noise_floor'];
    }

    /**
     * Sets weight_noise_floor
     *
     * @param int|null $weight_noise_floor Weight in DARRP channel score calculation for noise floor (0 - 2000, default = 40).
     *
     * @return self
     */
    public function setWeightNoiseFloor($weight_noise_floor)
    {

        if (!is_null($weight_noise_floor) && ($weight_noise_floor > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_noise_floor when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_noise_floor) && ($weight_noise_floor < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_noise_floor when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_noise_floor'] = $weight_noise_floor;

        return $this;
    }

    /**
     * Gets weight_channel_load
     *
     * @return int|null
     */
    public function getWeightChannelLoad()
    {
        return $this->container['weight_channel_load'];
    }

    /**
     * Sets weight_channel_load
     *
     * @param int|null $weight_channel_load Weight in DARRP channel score calculation for channel load (0 - 2000, default = 20).
     *
     * @return self
     */
    public function setWeightChannelLoad($weight_channel_load)
    {

        if (!is_null($weight_channel_load) && ($weight_channel_load > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_channel_load when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_channel_load) && ($weight_channel_load < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_channel_load when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_channel_load'] = $weight_channel_load;

        return $this;
    }

    /**
     * Gets weight_spectral_rssi
     *
     * @return int|null
     */
    public function getWeightSpectralRssi()
    {
        return $this->container['weight_spectral_rssi'];
    }

    /**
     * Sets weight_spectral_rssi
     *
     * @param int|null $weight_spectral_rssi Weight in DARRP channel score calculation for spectral RSSI (0 - 2000, default = 40).
     *
     * @return self
     */
    public function setWeightSpectralRssi($weight_spectral_rssi)
    {

        if (!is_null($weight_spectral_rssi) && ($weight_spectral_rssi > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_spectral_rssi when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_spectral_rssi) && ($weight_spectral_rssi < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_spectral_rssi when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_spectral_rssi'] = $weight_spectral_rssi;

        return $this;
    }

    /**
     * Gets weight_weather_channel
     *
     * @return int|null
     */
    public function getWeightWeatherChannel()
    {
        return $this->container['weight_weather_channel'];
    }

    /**
     * Sets weight_weather_channel
     *
     * @param int|null $weight_weather_channel Weight in DARRP channel score calculation for weather channel (0 - 2000, default = 1000).
     *
     * @return self
     */
    public function setWeightWeatherChannel($weight_weather_channel)
    {

        if (!is_null($weight_weather_channel) && ($weight_weather_channel > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_weather_channel when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_weather_channel) && ($weight_weather_channel < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_weather_channel when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_weather_channel'] = $weight_weather_channel;

        return $this;
    }

    /**
     * Gets weight_dfs_channel
     *
     * @return int|null
     */
    public function getWeightDfsChannel()
    {
        return $this->container['weight_dfs_channel'];
    }

    /**
     * Sets weight_dfs_channel
     *
     * @param int|null $weight_dfs_channel Weight in DARRP channel score calculation for DFS channel (0 - 2000, default = 500).
     *
     * @return self
     */
    public function setWeightDfsChannel($weight_dfs_channel)
    {

        if (!is_null($weight_dfs_channel) && ($weight_dfs_channel > 2000)) {
            throw new \InvalidArgumentException('invalid value for $weight_dfs_channel when calling InlineObject588., must be smaller than or equal to 2000.');
        }
        if (!is_null($weight_dfs_channel) && ($weight_dfs_channel < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_dfs_channel when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['weight_dfs_channel'] = $weight_dfs_channel;

        return $this;
    }

    /**
     * Gets threshold_ap
     *
     * @return int|null
     */
    public function getThresholdAp()
    {
        return $this->container['threshold_ap'];
    }

    /**
     * Sets threshold_ap
     *
     * @param int|null $threshold_ap Threshold to reject channel in DARRP channel selection phase 1 due to surrounding APs (0 - 500, default = 250).
     *
     * @return self
     */
    public function setThresholdAp($threshold_ap)
    {

        if (!is_null($threshold_ap) && ($threshold_ap > 500)) {
            throw new \InvalidArgumentException('invalid value for $threshold_ap when calling InlineObject588., must be smaller than or equal to 500.');
        }
        if (!is_null($threshold_ap) && ($threshold_ap < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_ap when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['threshold_ap'] = $threshold_ap;

        return $this;
    }

    /**
     * Gets threshold_noise_floor
     *
     * @return string|null
     */
    public function getThresholdNoiseFloor()
    {
        return $this->container['threshold_noise_floor'];
    }

    /**
     * Sets threshold_noise_floor
     *
     * @param string|null $threshold_noise_floor Threshold in dBm to reject channel in DARRP channel selection phase 1 due to noise floor (-95 to -20, default = -85).
     *
     * @return self
     */
    public function setThresholdNoiseFloor($threshold_noise_floor)
    {
        if (!is_null($threshold_noise_floor) && (mb_strlen($threshold_noise_floor) > 7)) {
            throw new \InvalidArgumentException('invalid length for $threshold_noise_floor when calling InlineObject588., must be smaller than or equal to 7.');
        }

        $this->container['threshold_noise_floor'] = $threshold_noise_floor;

        return $this;
    }

    /**
     * Gets threshold_channel_load
     *
     * @return int|null
     */
    public function getThresholdChannelLoad()
    {
        return $this->container['threshold_channel_load'];
    }

    /**
     * Sets threshold_channel_load
     *
     * @param int|null $threshold_channel_load Threshold in percentage to reject channel in DARRP channel selection phase 1 due to channel load (0 - 100, default = 60).
     *
     * @return self
     */
    public function setThresholdChannelLoad($threshold_channel_load)
    {

        if (!is_null($threshold_channel_load) && ($threshold_channel_load > 100)) {
            throw new \InvalidArgumentException('invalid value for $threshold_channel_load when calling InlineObject588., must be smaller than or equal to 100.');
        }
        if (!is_null($threshold_channel_load) && ($threshold_channel_load < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_channel_load when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['threshold_channel_load'] = $threshold_channel_load;

        return $this;
    }

    /**
     * Gets threshold_spectral_rssi
     *
     * @return string|null
     */
    public function getThresholdSpectralRssi()
    {
        return $this->container['threshold_spectral_rssi'];
    }

    /**
     * Sets threshold_spectral_rssi
     *
     * @param string|null $threshold_spectral_rssi Threshold in dBm to reject channel in DARRP channel selection phase 1 due to spectral RSSI (-95 to -20, default = -65).
     *
     * @return self
     */
    public function setThresholdSpectralRssi($threshold_spectral_rssi)
    {
        if (!is_null($threshold_spectral_rssi) && (mb_strlen($threshold_spectral_rssi) > 7)) {
            throw new \InvalidArgumentException('invalid length for $threshold_spectral_rssi when calling InlineObject588., must be smaller than or equal to 7.');
        }

        $this->container['threshold_spectral_rssi'] = $threshold_spectral_rssi;

        return $this;
    }

    /**
     * Gets threshold_tx_retries
     *
     * @return int|null
     */
    public function getThresholdTxRetries()
    {
        return $this->container['threshold_tx_retries'];
    }

    /**
     * Sets threshold_tx_retries
     *
     * @param int|null $threshold_tx_retries Threshold in percentage for transmit retries to trigger channel reselection in DARRP monitor stage (0 - 1000, default = 300).
     *
     * @return self
     */
    public function setThresholdTxRetries($threshold_tx_retries)
    {

        if (!is_null($threshold_tx_retries) && ($threshold_tx_retries > 1000)) {
            throw new \InvalidArgumentException('invalid value for $threshold_tx_retries when calling InlineObject588., must be smaller than or equal to 1000.');
        }
        if (!is_null($threshold_tx_retries) && ($threshold_tx_retries < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_tx_retries when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['threshold_tx_retries'] = $threshold_tx_retries;

        return $this;
    }

    /**
     * Gets threshold_rx_errors
     *
     * @return int|null
     */
    public function getThresholdRxErrors()
    {
        return $this->container['threshold_rx_errors'];
    }

    /**
     * Sets threshold_rx_errors
     *
     * @param int|null $threshold_rx_errors Threshold in percentage for receive errors to trigger channel reselection in DARRP monitor stage (0 - 100, default = 50).
     *
     * @return self
     */
    public function setThresholdRxErrors($threshold_rx_errors)
    {

        if (!is_null($threshold_rx_errors) && ($threshold_rx_errors > 100)) {
            throw new \InvalidArgumentException('invalid value for $threshold_rx_errors when calling InlineObject588., must be smaller than or equal to 100.');
        }
        if (!is_null($threshold_rx_errors) && ($threshold_rx_errors < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_rx_errors when calling InlineObject588., must be bigger than or equal to 0.');
        }

        $this->container['threshold_rx_errors'] = $threshold_rx_errors;

        return $this;
    }

    /**
     * Gets include_weather_channel
     *
     * @return string|null
     */
    public function getIncludeWeatherChannel()
    {
        return $this->container['include_weather_channel'];
    }

    /**
     * Sets include_weather_channel
     *
     * @param string|null $include_weather_channel Enable/disable use of weather channel in DARRP channel selection phase 1 (default = disable).    enable:Include weather channel in darrp channel selection phase 1.    disable:Exclude weather channel in darrp channel selection phase 1.
     *
     * @return self
     */
    public function setIncludeWeatherChannel($include_weather_channel)
    {
        $allowedValues = $this->getIncludeWeatherChannelAllowableValues();
        if (!is_null($include_weather_channel) && !in_array($include_weather_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include_weather_channel', must be one of '%s'",
                    $include_weather_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['include_weather_channel'] = $include_weather_channel;

        return $this;
    }

    /**
     * Gets include_dfs_channel
     *
     * @return string|null
     */
    public function getIncludeDfsChannel()
    {
        return $this->container['include_dfs_channel'];
    }

    /**
     * Sets include_dfs_channel
     *
     * @param string|null $include_dfs_channel Enable/disable use of DFS channel in DARRP channel selection phase 1 (default = disable).    enable:Include DFS channel in darrp channel selection phase 1.    disable:Exclude DFS channel in darrp channel selection phase 1.
     *
     * @return self
     */
    public function setIncludeDfsChannel($include_dfs_channel)
    {
        $allowedValues = $this->getIncludeDfsChannelAllowableValues();
        if (!is_null($include_dfs_channel) && !in_array($include_dfs_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include_dfs_channel', must be one of '%s'",
                    $include_dfs_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['include_dfs_channel'] = $include_dfs_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


