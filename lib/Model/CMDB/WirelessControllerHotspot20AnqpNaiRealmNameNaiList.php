<?php
/**
 * WirelessControllerHotspot20AnqpNaiRealmNameNaiList
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerHotspot20AnqpNaiRealmNameNaiList Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerHotspot20AnqpNaiRealmNameNaiList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_hotspot20_anqp_nai_realm__name__nai_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'encoding' => 'string',
        'nai_realm' => 'string',
        'eap_method' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20AnqpNaiRealmNameEapMethod[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'encoding' => null,
        'nai_realm' => null,
        'eap_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'encoding' => 'encoding',
        'nai_realm' => 'nai-realm',
        'eap_method' => 'eap-method'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'encoding' => 'setEncoding',
        'nai_realm' => 'setNaiRealm',
        'eap_method' => 'setEapMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'encoding' => 'getEncoding',
        'nai_realm' => 'getNaiRealm',
        'eap_method' => 'getEapMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENCODING_DISABLE = 'disable';
    const ENCODING_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncodingAllowableValues()
    {
        return [
            self::ENCODING_DISABLE,
            self::ENCODING_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['encoding'] = $data['encoding'] ?? null;
        $this->container['nai_realm'] = $data['nai_realm'] ?? null;
        $this->container['eap_method'] = $data['eap_method'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getEncodingAllowableValues();
        if (!is_null($this->container['encoding']) && !in_array($this->container['encoding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encoding', must be one of '%s'",
                $this->container['encoding'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nai_realm']) && (mb_strlen($this->container['nai_realm']) > 255)) {
            $invalidProperties[] = "invalid value for 'nai_realm', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['eap_method']) && (count($this->container['eap_method']) > 0)) {
            $invalidProperties[] = "invalid value for 'eap_method', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name NAI realm name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WirelessControllerHotspot20AnqpNaiRealmNameNaiList., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string|null
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string|null $encoding Enable/disable format in accordance with IETF RFC 4282.    disable:Disable format in accordance with IETF RFC 4282.    enable:Enable format in accordance with IETF RFC 4282.
     *
     * @return self
     */
    public function setEncoding($encoding)
    {
        $allowedValues = $this->getEncodingAllowableValues();
        if (!is_null($encoding) && !in_array($encoding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encoding', must be one of '%s'",
                    $encoding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets nai_realm
     *
     * @return string|null
     */
    public function getNaiRealm()
    {
        return $this->container['nai_realm'];
    }

    /**
     * Sets nai_realm
     *
     * @param string|null $nai_realm Configure NAI realms (delimited by a semi-colon character).
     *
     * @return self
     */
    public function setNaiRealm($nai_realm)
    {
        if (!is_null($nai_realm) && (mb_strlen($nai_realm) > 255)) {
            throw new \InvalidArgumentException('invalid length for $nai_realm when calling WirelessControllerHotspot20AnqpNaiRealmNameNaiList., must be smaller than or equal to 255.');
        }

        $this->container['nai_realm'] = $nai_realm;

        return $this;
    }

    /**
     * Gets eap_method
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20AnqpNaiRealmNameEapMethod[]|null
     */
    public function getEapMethod()
    {
        return $this->container['eap_method'];
    }

    /**
     * Sets eap_method
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20AnqpNaiRealmNameEapMethod[]|null $eap_method EAP Methods.
     *
     * @return self
     */
    public function setEapMethod($eap_method)
    {

        if (!is_null($eap_method) && (count($eap_method) > 0)) {
            throw new \InvalidArgumentException('invalid value for $eap_method when calling WirelessControllerHotspot20AnqpNaiRealmNameNaiList., number of items must be less than or equal to 0.');
        }
        $this->container['eap_method'] = $eap_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


