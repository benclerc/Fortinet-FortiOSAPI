<?php
/**
 * SystemLldpNetworkPolicyNameVoice
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemLldpNetworkPolicyNameVoice Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemLldpNetworkPolicyNameVoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_lldp_network_policy__name__voice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'tag' => 'string',
        'vlan' => 'int',
        'priority' => 'int',
        'dscp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'tag' => null,
        'vlan' => null,
        'priority' => null,
        'dscp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'tag' => 'tag',
        'vlan' => 'vlan',
        'priority' => 'priority',
        'dscp' => 'dscp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'tag' => 'setTag',
        'vlan' => 'setVlan',
        'priority' => 'setPriority',
        'dscp' => 'setDscp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'tag' => 'getTag',
        'vlan' => 'getVlan',
        'priority' => 'getPriority',
        'dscp' => 'getDscp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const TAG_NONE = 'none';
    const TAG_DOT1Q = 'dot1q';
    const TAG_DOT1P = 'dot1p';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTagAllowableValues()
    {
        return [
            self::TAG_NONE,
            self::TAG_DOT1Q,
            self::TAG_DOT1P,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['tag'] = $data['tag'] ?? null;
        $this->container['vlan'] = $data['vlan'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['dscp'] = $data['dscp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTagAllowableValues();
        if (!is_null($this->container['tag']) && !in_array($this->container['tag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tag', must be one of '%s'",
                $this->container['tag'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vlan']) && ($this->container['vlan'] > 4094)) {
            $invalidProperties[] = "invalid value for 'vlan', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['vlan']) && ($this->container['vlan'] < 1)) {
            $invalidProperties[] = "invalid value for 'vlan', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 7)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dscp']) && ($this->container['dscp'] > 63)) {
            $invalidProperties[] = "invalid value for 'dscp', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dscp']) && ($this->container['dscp'] < 0)) {
            $invalidProperties[] = "invalid value for 'dscp', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable advertising this policy.    disable:Disable advertising this LLDP network policy.    enable:Enable advertising this LLDP network policy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Advertise tagged or untagged traffic.    none:Advertise that untagged frames should be used.    dot1q:Advertise that 802.1Q (VLAN) tagging should be used.    dot1p:Advertise that 802.1P priority tagging (VLAN 0) should be used.
     *
     * @return self
     */
    public function setTag($tag)
    {
        $allowedValues = $this->getTagAllowableValues();
        if (!is_null($tag) && !in_array($tag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tag', must be one of '%s'",
                    $tag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int|null $vlan 802.1Q VLAN ID to advertise (1 - 4094).
     *
     * @return self
     */
    public function setVlan($vlan)
    {

        if (!is_null($vlan) && ($vlan > 4094)) {
            throw new \InvalidArgumentException('invalid value for $vlan when calling SystemLldpNetworkPolicyNameVoice., must be smaller than or equal to 4094.');
        }
        if (!is_null($vlan) && ($vlan < 1)) {
            throw new \InvalidArgumentException('invalid value for $vlan when calling SystemLldpNetworkPolicyNameVoice., must be bigger than or equal to 1.');
        }

        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 7)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemLldpNetworkPolicyNameVoice., must be smaller than or equal to 7.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemLldpNetworkPolicyNameVoice., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets dscp
     *
     * @return int|null
     */
    public function getDscp()
    {
        return $this->container['dscp'];
    }

    /**
     * Sets dscp
     *
     * @param int|null $dscp Differentiated Services Code Point (DSCP) value to advertise.
     *
     * @return self
     */
    public function setDscp($dscp)
    {

        if (!is_null($dscp) && ($dscp > 63)) {
            throw new \InvalidArgumentException('invalid value for $dscp when calling SystemLldpNetworkPolicyNameVoice., must be smaller than or equal to 63.');
        }
        if (!is_null($dscp) && ($dscp < 0)) {
            throw new \InvalidArgumentException('invalid value for $dscp when calling SystemLldpNetworkPolicyNameVoice., must be bigger than or equal to 0.');
        }

        $this->container['dscp'] = $dscp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


