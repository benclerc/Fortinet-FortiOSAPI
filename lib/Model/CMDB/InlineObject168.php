<?php
/**
 * InlineObject168
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject168 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject168 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_168';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abr_type' => 'string',
        'auto_cost_ref_bandwidth' => 'int',
        'default_information_originate' => 'string',
        'log_neighbour_changes' => 'string',
        'default_information_metric' => 'int',
        'default_information_metric_type' => 'string',
        'default_information_route_map' => 'string',
        'default_metric' => 'int',
        'router_id' => 'string',
        'spf_timers' => 'string',
        'bfd' => 'string',
        'area' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6Area[]',
        'ospf6_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6Ospf6Interface[]',
        'redistribute' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6Redistribute[]',
        'passive_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]',
        'summary_address' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6SummaryAddress[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abr_type' => null,
        'auto_cost_ref_bandwidth' => null,
        'default_information_originate' => null,
        'log_neighbour_changes' => null,
        'default_information_metric' => null,
        'default_information_metric_type' => null,
        'default_information_route_map' => null,
        'default_metric' => null,
        'router_id' => 'ipv4',
        'spf_timers' => null,
        'bfd' => null,
        'area' => null,
        'ospf6_interface' => null,
        'redistribute' => null,
        'passive_interface' => null,
        'summary_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abr_type' => 'abr-type',
        'auto_cost_ref_bandwidth' => 'auto-cost-ref-bandwidth',
        'default_information_originate' => 'default-information-originate',
        'log_neighbour_changes' => 'log-neighbour-changes',
        'default_information_metric' => 'default-information-metric',
        'default_information_metric_type' => 'default-information-metric-type',
        'default_information_route_map' => 'default-information-route-map',
        'default_metric' => 'default-metric',
        'router_id' => 'router-id',
        'spf_timers' => 'spf-timers',
        'bfd' => 'bfd',
        'area' => 'area',
        'ospf6_interface' => 'ospf6-interface',
        'redistribute' => 'redistribute',
        'passive_interface' => 'passive-interface',
        'summary_address' => 'summary-address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abr_type' => 'setAbrType',
        'auto_cost_ref_bandwidth' => 'setAutoCostRefBandwidth',
        'default_information_originate' => 'setDefaultInformationOriginate',
        'log_neighbour_changes' => 'setLogNeighbourChanges',
        'default_information_metric' => 'setDefaultInformationMetric',
        'default_information_metric_type' => 'setDefaultInformationMetricType',
        'default_information_route_map' => 'setDefaultInformationRouteMap',
        'default_metric' => 'setDefaultMetric',
        'router_id' => 'setRouterId',
        'spf_timers' => 'setSpfTimers',
        'bfd' => 'setBfd',
        'area' => 'setArea',
        'ospf6_interface' => 'setOspf6Interface',
        'redistribute' => 'setRedistribute',
        'passive_interface' => 'setPassiveInterface',
        'summary_address' => 'setSummaryAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abr_type' => 'getAbrType',
        'auto_cost_ref_bandwidth' => 'getAutoCostRefBandwidth',
        'default_information_originate' => 'getDefaultInformationOriginate',
        'log_neighbour_changes' => 'getLogNeighbourChanges',
        'default_information_metric' => 'getDefaultInformationMetric',
        'default_information_metric_type' => 'getDefaultInformationMetricType',
        'default_information_route_map' => 'getDefaultInformationRouteMap',
        'default_metric' => 'getDefaultMetric',
        'router_id' => 'getRouterId',
        'spf_timers' => 'getSpfTimers',
        'bfd' => 'getBfd',
        'area' => 'getArea',
        'ospf6_interface' => 'getOspf6Interface',
        'redistribute' => 'getRedistribute',
        'passive_interface' => 'getPassiveInterface',
        'summary_address' => 'getSummaryAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ABR_TYPE_CISCO = 'cisco';
    const ABR_TYPE_IBM = 'ibm';
    const ABR_TYPE_STANDARD = 'standard';
    const DEFAULT_INFORMATION_ORIGINATE_ENABLE = 'enable';
    const DEFAULT_INFORMATION_ORIGINATE_ALWAYS = 'always';
    const DEFAULT_INFORMATION_ORIGINATE_DISABLE = 'disable';
    const LOG_NEIGHBOUR_CHANGES_ENABLE = 'enable';
    const LOG_NEIGHBOUR_CHANGES_DISABLE = 'disable';
    const DEFAULT_INFORMATION_METRIC_TYPE__1 = '1';
    const DEFAULT_INFORMATION_METRIC_TYPE__2 = '2';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbrTypeAllowableValues()
    {
        return [
            self::ABR_TYPE_CISCO,
            self::ABR_TYPE_IBM,
            self::ABR_TYPE_STANDARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultInformationOriginateAllowableValues()
    {
        return [
            self::DEFAULT_INFORMATION_ORIGINATE_ENABLE,
            self::DEFAULT_INFORMATION_ORIGINATE_ALWAYS,
            self::DEFAULT_INFORMATION_ORIGINATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogNeighbourChangesAllowableValues()
    {
        return [
            self::LOG_NEIGHBOUR_CHANGES_ENABLE,
            self::LOG_NEIGHBOUR_CHANGES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultInformationMetricTypeAllowableValues()
    {
        return [
            self::DEFAULT_INFORMATION_METRIC_TYPE__1,
            self::DEFAULT_INFORMATION_METRIC_TYPE__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abr_type'] = $data['abr_type'] ?? null;
        $this->container['auto_cost_ref_bandwidth'] = $data['auto_cost_ref_bandwidth'] ?? null;
        $this->container['default_information_originate'] = $data['default_information_originate'] ?? null;
        $this->container['log_neighbour_changes'] = $data['log_neighbour_changes'] ?? null;
        $this->container['default_information_metric'] = $data['default_information_metric'] ?? null;
        $this->container['default_information_metric_type'] = $data['default_information_metric_type'] ?? null;
        $this->container['default_information_route_map'] = $data['default_information_route_map'] ?? null;
        $this->container['default_metric'] = $data['default_metric'] ?? null;
        $this->container['router_id'] = $data['router_id'] ?? null;
        $this->container['spf_timers'] = $data['spf_timers'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['ospf6_interface'] = $data['ospf6_interface'] ?? null;
        $this->container['redistribute'] = $data['redistribute'] ?? null;
        $this->container['passive_interface'] = $data['passive_interface'] ?? null;
        $this->container['summary_address'] = $data['summary_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAbrTypeAllowableValues();
        if (!is_null($this->container['abr_type']) && !in_array($this->container['abr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'abr_type', must be one of '%s'",
                $this->container['abr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auto_cost_ref_bandwidth']) && ($this->container['auto_cost_ref_bandwidth'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'auto_cost_ref_bandwidth', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['auto_cost_ref_bandwidth']) && ($this->container['auto_cost_ref_bandwidth'] < 1)) {
            $invalidProperties[] = "invalid value for 'auto_cost_ref_bandwidth', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($this->container['default_information_originate']) && !in_array($this->container['default_information_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_information_originate', must be one of '%s'",
                $this->container['default_information_originate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($this->container['log_neighbour_changes']) && !in_array($this->container['log_neighbour_changes'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                $this->container['log_neighbour_changes'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_information_metric']) && ($this->container['default_information_metric'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'default_information_metric', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['default_information_metric']) && ($this->container['default_information_metric'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_information_metric', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDefaultInformationMetricTypeAllowableValues();
        if (!is_null($this->container['default_information_metric_type']) && !in_array($this->container['default_information_metric_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_information_metric_type', must be one of '%s'",
                $this->container['default_information_metric_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_information_route_map']) && (mb_strlen($this->container['default_information_route_map']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_information_route_map', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['area']) && (count($this->container['area']) > 0)) {
            $invalidProperties[] = "invalid value for 'area', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ospf6_interface']) && (count($this->container['ospf6_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'ospf6_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute']) && (count($this->container['redistribute']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['passive_interface']) && (count($this->container['passive_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'passive_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['summary_address']) && (count($this->container['summary_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'summary_address', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abr_type
     *
     * @return string|null
     */
    public function getAbrType()
    {
        return $this->container['abr_type'];
    }

    /**
     * Sets abr_type
     *
     * @param string|null $abr_type Area border router type.    cisco:Cisco.    ibm:IBM.    standard:Standard.
     *
     * @return self
     */
    public function setAbrType($abr_type)
    {
        $allowedValues = $this->getAbrTypeAllowableValues();
        if (!is_null($abr_type) && !in_array($abr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'abr_type', must be one of '%s'",
                    $abr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['abr_type'] = $abr_type;

        return $this;
    }

    /**
     * Gets auto_cost_ref_bandwidth
     *
     * @return int|null
     */
    public function getAutoCostRefBandwidth()
    {
        return $this->container['auto_cost_ref_bandwidth'];
    }

    /**
     * Sets auto_cost_ref_bandwidth
     *
     * @param int|null $auto_cost_ref_bandwidth Reference bandwidth in terms of megabits per second.
     *
     * @return self
     */
    public function setAutoCostRefBandwidth($auto_cost_ref_bandwidth)
    {

        if (!is_null($auto_cost_ref_bandwidth) && ($auto_cost_ref_bandwidth > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $auto_cost_ref_bandwidth when calling InlineObject168., must be smaller than or equal to 1000000.');
        }
        if (!is_null($auto_cost_ref_bandwidth) && ($auto_cost_ref_bandwidth < 1)) {
            throw new \InvalidArgumentException('invalid value for $auto_cost_ref_bandwidth when calling InlineObject168., must be bigger than or equal to 1.');
        }

        $this->container['auto_cost_ref_bandwidth'] = $auto_cost_ref_bandwidth;

        return $this;
    }

    /**
     * Gets default_information_originate
     *
     * @return string|null
     */
    public function getDefaultInformationOriginate()
    {
        return $this->container['default_information_originate'];
    }

    /**
     * Sets default_information_originate
     *
     * @param string|null $default_information_originate Enable/disable generation of default route.    enable:Enable setting.    always:Always advertise the default router.    disable:Disable setting.
     *
     * @return self
     */
    public function setDefaultInformationOriginate($default_information_originate)
    {
        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($default_information_originate) && !in_array($default_information_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_information_originate', must be one of '%s'",
                    $default_information_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_information_originate'] = $default_information_originate;

        return $this;
    }

    /**
     * Gets log_neighbour_changes
     *
     * @return string|null
     */
    public function getLogNeighbourChanges()
    {
        return $this->container['log_neighbour_changes'];
    }

    /**
     * Sets log_neighbour_changes
     *
     * @param string|null $log_neighbour_changes Enable logging of OSPFv3 neighbour's changes    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLogNeighbourChanges($log_neighbour_changes)
    {
        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($log_neighbour_changes) && !in_array($log_neighbour_changes, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                    $log_neighbour_changes,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_neighbour_changes'] = $log_neighbour_changes;

        return $this;
    }

    /**
     * Gets default_information_metric
     *
     * @return int|null
     */
    public function getDefaultInformationMetric()
    {
        return $this->container['default_information_metric'];
    }

    /**
     * Sets default_information_metric
     *
     * @param int|null $default_information_metric Default information metric.
     *
     * @return self
     */
    public function setDefaultInformationMetric($default_information_metric)
    {

        if (!is_null($default_information_metric) && ($default_information_metric > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $default_information_metric when calling InlineObject168., must be smaller than or equal to 16777214.');
        }
        if (!is_null($default_information_metric) && ($default_information_metric < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_information_metric when calling InlineObject168., must be bigger than or equal to 1.');
        }

        $this->container['default_information_metric'] = $default_information_metric;

        return $this;
    }

    /**
     * Gets default_information_metric_type
     *
     * @return string|null
     */
    public function getDefaultInformationMetricType()
    {
        return $this->container['default_information_metric_type'];
    }

    /**
     * Sets default_information_metric_type
     *
     * @param string|null $default_information_metric_type Default information metric type.    1:Type 1.    2:Type 2.
     *
     * @return self
     */
    public function setDefaultInformationMetricType($default_information_metric_type)
    {
        $allowedValues = $this->getDefaultInformationMetricTypeAllowableValues();
        if (!is_null($default_information_metric_type) && !in_array($default_information_metric_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_information_metric_type', must be one of '%s'",
                    $default_information_metric_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_information_metric_type'] = $default_information_metric_type;

        return $this;
    }

    /**
     * Gets default_information_route_map
     *
     * @return string|null
     */
    public function getDefaultInformationRouteMap()
    {
        return $this->container['default_information_route_map'];
    }

    /**
     * Sets default_information_route_map
     *
     * @param string|null $default_information_route_map Default information route map.
     *
     * @return self
     */
    public function setDefaultInformationRouteMap($default_information_route_map)
    {
        if (!is_null($default_information_route_map) && (mb_strlen($default_information_route_map) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_information_route_map when calling InlineObject168., must be smaller than or equal to 35.');
        }

        $this->container['default_information_route_map'] = $default_information_route_map;

        return $this;
    }

    /**
     * Gets default_metric
     *
     * @return int|null
     */
    public function getDefaultMetric()
    {
        return $this->container['default_metric'];
    }

    /**
     * Sets default_metric
     *
     * @param int|null $default_metric Default metric of redistribute routes.
     *
     * @return self
     */
    public function setDefaultMetric($default_metric)
    {

        if (!is_null($default_metric) && ($default_metric > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject168., must be smaller than or equal to 16777214.');
        }
        if (!is_null($default_metric) && ($default_metric < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject168., must be bigger than or equal to 1.');
        }

        $this->container['default_metric'] = $default_metric;

        return $this;
    }

    /**
     * Gets router_id
     *
     * @return string|null
     */
    public function getRouterId()
    {
        return $this->container['router_id'];
    }

    /**
     * Sets router_id
     *
     * @param string|null $router_id A.B.C.D, in IPv4 address format.
     *
     * @return self
     */
    public function setRouterId($router_id)
    {
        $this->container['router_id'] = $router_id;

        return $this;
    }

    /**
     * Gets spf_timers
     *
     * @return string|null
     */
    public function getSpfTimers()
    {
        return $this->container['spf_timers'];
    }

    /**
     * Sets spf_timers
     *
     * @param string|null $spf_timers SPF calculation frequency.
     *
     * @return self
     */
    public function setSpfTimers($spf_timers)
    {
        $this->container['spf_timers'] = $spf_timers;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable Bidirectional Forwarding Detection (BFD).    enable:Enable Bidirectional Forwarding Detection (BFD).    disable:Disable Bidirectional Forwarding Detection (BFD).
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6Area[]|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6Area[]|null $area OSPF6 area configuration.
     *
     * @return self
     */
    public function setArea($area)
    {

        if (!is_null($area) && (count($area) > 0)) {
            throw new \InvalidArgumentException('invalid value for $area when calling InlineObject168., number of items must be less than or equal to 0.');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets ospf6_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6Ospf6Interface[]|null
     */
    public function getOspf6Interface()
    {
        return $this->container['ospf6_interface'];
    }

    /**
     * Sets ospf6_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6Ospf6Interface[]|null $ospf6_interface OSPF6 interface configuration.
     *
     * @return self
     */
    public function setOspf6Interface($ospf6_interface)
    {

        if (!is_null($ospf6_interface) && (count($ospf6_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ospf6_interface when calling InlineObject168., number of items must be less than or equal to 0.');
        }
        $this->container['ospf6_interface'] = $ospf6_interface;

        return $this;
    }

    /**
     * Gets redistribute
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6Redistribute[]|null
     */
    public function getRedistribute()
    {
        return $this->container['redistribute'];
    }

    /**
     * Sets redistribute
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6Redistribute[]|null $redistribute Redistribute configuration.
     *
     * @return self
     */
    public function setRedistribute($redistribute)
    {

        if (!is_null($redistribute) && (count($redistribute) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute when calling InlineObject168., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute'] = $redistribute;

        return $this;
    }

    /**
     * Gets passive_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null
     */
    public function getPassiveInterface()
    {
        return $this->container['passive_interface'];
    }

    /**
     * Sets passive_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null $passive_interface Passive interface configuration.
     *
     * @return self
     */
    public function setPassiveInterface($passive_interface)
    {

        if (!is_null($passive_interface) && (count($passive_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $passive_interface when calling InlineObject168., number of items must be less than or equal to 0.');
        }
        $this->container['passive_interface'] = $passive_interface;

        return $this;
    }

    /**
     * Gets summary_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6SummaryAddress[]|null
     */
    public function getSummaryAddress()
    {
        return $this->container['summary_address'];
    }

    /**
     * Sets summary_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6SummaryAddress[]|null $summary_address IPv6 address summary configuration.
     *
     * @return self
     */
    public function setSummaryAddress($summary_address)
    {

        if (!is_null($summary_address) && (count($summary_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $summary_address when calling InlineObject168., number of items must be less than or equal to 0.');
        }
        $this->container['summary_address'] = $summary_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


