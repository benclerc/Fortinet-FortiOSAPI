<?php
/**
 * SwitchControllerManagedSwitchSwitchId8021XSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchId8021XSettings Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchId8021XSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__802_1X_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'local_override' => 'string',
        'link_down_auth' => 'string',
        'reauth_period' => 'int',
        'max_reauth_attempt' => 'int',
        'tx_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'local_override' => null,
        'link_down_auth' => null,
        'reauth_period' => null,
        'max_reauth_attempt' => null,
        'tx_period' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'local_override' => 'local-override',
        'link_down_auth' => 'link-down-auth',
        'reauth_period' => 'reauth-period',
        'max_reauth_attempt' => 'max-reauth-attempt',
        'tx_period' => 'tx-period'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'local_override' => 'setLocalOverride',
        'link_down_auth' => 'setLinkDownAuth',
        'reauth_period' => 'setReauthPeriod',
        'max_reauth_attempt' => 'setMaxReauthAttempt',
        'tx_period' => 'setTxPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'local_override' => 'getLocalOverride',
        'link_down_auth' => 'getLinkDownAuth',
        'reauth_period' => 'getReauthPeriod',
        'max_reauth_attempt' => 'getMaxReauthAttempt',
        'tx_period' => 'getTxPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOCAL_OVERRIDE_ENABLE = 'enable';
    const LOCAL_OVERRIDE_DISABLE = 'disable';
    const LINK_DOWN_AUTH_SET_UNAUTH = 'set-unauth';
    const LINK_DOWN_AUTH_NO_ACTION = 'no-action';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalOverrideAllowableValues()
    {
        return [
            self::LOCAL_OVERRIDE_ENABLE,
            self::LOCAL_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkDownAuthAllowableValues()
    {
        return [
            self::LINK_DOWN_AUTH_SET_UNAUTH,
            self::LINK_DOWN_AUTH_NO_ACTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_override'] = $data['local_override'] ?? null;
        $this->container['link_down_auth'] = $data['link_down_auth'] ?? null;
        $this->container['reauth_period'] = $data['reauth_period'] ?? null;
        $this->container['max_reauth_attempt'] = $data['max_reauth_attempt'] ?? null;
        $this->container['tx_period'] = $data['tx_period'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($this->container['local_override']) && !in_array($this->container['local_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_override', must be one of '%s'",
                $this->container['local_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkDownAuthAllowableValues();
        if (!is_null($this->container['link_down_auth']) && !in_array($this->container['link_down_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_down_auth', must be one of '%s'",
                $this->container['link_down_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reauth_period']) && ($this->container['reauth_period'] > 1440)) {
            $invalidProperties[] = "invalid value for 'reauth_period', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['reauth_period']) && ($this->container['reauth_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'reauth_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_reauth_attempt']) && ($this->container['max_reauth_attempt'] > 15)) {
            $invalidProperties[] = "invalid value for 'max_reauth_attempt', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['max_reauth_attempt']) && ($this->container['max_reauth_attempt'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_reauth_attempt', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tx_period']) && ($this->container['tx_period'] > 60)) {
            $invalidProperties[] = "invalid value for 'tx_period', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['tx_period']) && ($this->container['tx_period'] < 4)) {
            $invalidProperties[] = "invalid value for 'tx_period', must be bigger than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets local_override
     *
     * @return string|null
     */
    public function getLocalOverride()
    {
        return $this->container['local_override'];
    }

    /**
     * Sets local_override
     *
     * @param string|null $local_override Enable to override global 802.1X settings on individual FortiSwitches.    enable:Override global 802.1X settings.    disable:Use global 802.1X settings.
     *
     * @return self
     */
    public function setLocalOverride($local_override)
    {
        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($local_override) && !in_array($local_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_override', must be one of '%s'",
                    $local_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_override'] = $local_override;

        return $this;
    }

    /**
     * Gets link_down_auth
     *
     * @return string|null
     */
    public function getLinkDownAuth()
    {
        return $this->container['link_down_auth'];
    }

    /**
     * Sets link_down_auth
     *
     * @param string|null $link_down_auth Authentication state to set if a link is down.    set-unauth:Interface set to unauth when down. Reauthentication is needed.    no-action:Interface reauthentication is not needed.
     *
     * @return self
     */
    public function setLinkDownAuth($link_down_auth)
    {
        $allowedValues = $this->getLinkDownAuthAllowableValues();
        if (!is_null($link_down_auth) && !in_array($link_down_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_down_auth', must be one of '%s'",
                    $link_down_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_down_auth'] = $link_down_auth;

        return $this;
    }

    /**
     * Gets reauth_period
     *
     * @return int|null
     */
    public function getReauthPeriod()
    {
        return $this->container['reauth_period'];
    }

    /**
     * Sets reauth_period
     *
     * @param int|null $reauth_period Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
     *
     * @return self
     */
    public function setReauthPeriod($reauth_period)
    {

        if (!is_null($reauth_period) && ($reauth_period > 1440)) {
            throw new \InvalidArgumentException('invalid value for $reauth_period when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be smaller than or equal to 1440.');
        }
        if (!is_null($reauth_period) && ($reauth_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $reauth_period when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be bigger than or equal to 0.');
        }

        $this->container['reauth_period'] = $reauth_period;

        return $this;
    }

    /**
     * Gets max_reauth_attempt
     *
     * @return int|null
     */
    public function getMaxReauthAttempt()
    {
        return $this->container['max_reauth_attempt'];
    }

    /**
     * Sets max_reauth_attempt
     *
     * @param int|null $max_reauth_attempt Maximum number of authentication attempts (0 - 15, default = 3).
     *
     * @return self
     */
    public function setMaxReauthAttempt($max_reauth_attempt)
    {

        if (!is_null($max_reauth_attempt) && ($max_reauth_attempt > 15)) {
            throw new \InvalidArgumentException('invalid value for $max_reauth_attempt when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be smaller than or equal to 15.');
        }
        if (!is_null($max_reauth_attempt) && ($max_reauth_attempt < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_reauth_attempt when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be bigger than or equal to 0.');
        }

        $this->container['max_reauth_attempt'] = $max_reauth_attempt;

        return $this;
    }

    /**
     * Gets tx_period
     *
     * @return int|null
     */
    public function getTxPeriod()
    {
        return $this->container['tx_period'];
    }

    /**
     * Sets tx_period
     *
     * @param int|null $tx_period 802.1X Tx period (seconds, default=30).
     *
     * @return self
     */
    public function setTxPeriod($tx_period)
    {

        if (!is_null($tx_period) && ($tx_period > 60)) {
            throw new \InvalidArgumentException('invalid value for $tx_period when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be smaller than or equal to 60.');
        }
        if (!is_null($tx_period) && ($tx_period < 4)) {
            throw new \InvalidArgumentException('invalid value for $tx_period when calling SwitchControllerManagedSwitchSwitchId8021XSettings., must be bigger than or equal to 4.');
        }

        $this->container['tx_period'] = $tx_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


