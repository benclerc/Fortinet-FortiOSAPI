<?php
/**
 * SystemNpuFpAnomaly
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemNpuFpAnomaly Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemNpuFpAnomaly implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_npu_fp_anomaly';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ipv4_ver_err' => 'string',
        'ipv4_ihl_err' => 'string',
        'ipv4_len_err' => 'string',
        'ipv4_ttlzero_err' => 'string',
        'ipv4_csum_err' => 'string',
        'ipv4_opt_err' => 'string',
        'tcp_hlen_err' => 'string',
        'tcp_plen_err' => 'string',
        'tcp_csum_err' => 'string',
        'udp_plen_err' => 'string',
        'udp_hlen_err' => 'string',
        'udp_csum_err' => 'string',
        'udp_len_err' => 'string',
        'udplite_cover_err' => 'string',
        'udplite_csum_err' => 'string',
        'icmp_minlen_err' => 'string',
        'icmp_csum_err' => 'string',
        'esp_minlen_err' => 'string',
        'unknproto_minlen_err' => 'string',
        'ipv6_ver_err' => 'string',
        'ipv6_ihl_err' => 'string',
        'ipv6_plen_zero' => 'string',
        'ipv6_exthdr_order_err' => 'string',
        'ipv6_exthdr_len_err' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ipv4_ver_err' => null,
        'ipv4_ihl_err' => null,
        'ipv4_len_err' => null,
        'ipv4_ttlzero_err' => null,
        'ipv4_csum_err' => null,
        'ipv4_opt_err' => null,
        'tcp_hlen_err' => null,
        'tcp_plen_err' => null,
        'tcp_csum_err' => null,
        'udp_plen_err' => null,
        'udp_hlen_err' => null,
        'udp_csum_err' => null,
        'udp_len_err' => null,
        'udplite_cover_err' => null,
        'udplite_csum_err' => null,
        'icmp_minlen_err' => null,
        'icmp_csum_err' => null,
        'esp_minlen_err' => null,
        'unknproto_minlen_err' => null,
        'ipv6_ver_err' => null,
        'ipv6_ihl_err' => null,
        'ipv6_plen_zero' => null,
        'ipv6_exthdr_order_err' => null,
        'ipv6_exthdr_len_err' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ipv4_ver_err' => 'ipv4-ver-err',
        'ipv4_ihl_err' => 'ipv4-ihl-err',
        'ipv4_len_err' => 'ipv4-len-err',
        'ipv4_ttlzero_err' => 'ipv4-ttlzero-err',
        'ipv4_csum_err' => 'ipv4-csum-err',
        'ipv4_opt_err' => 'ipv4-opt-err',
        'tcp_hlen_err' => 'tcp-hlen-err',
        'tcp_plen_err' => 'tcp-plen-err',
        'tcp_csum_err' => 'tcp-csum-err',
        'udp_plen_err' => 'udp-plen-err',
        'udp_hlen_err' => 'udp-hlen-err',
        'udp_csum_err' => 'udp-csum-err',
        'udp_len_err' => 'udp-len-err',
        'udplite_cover_err' => 'udplite-cover-err',
        'udplite_csum_err' => 'udplite-csum-err',
        'icmp_minlen_err' => 'icmp-minlen-err',
        'icmp_csum_err' => 'icmp-csum-err',
        'esp_minlen_err' => 'esp-minlen-err',
        'unknproto_minlen_err' => 'unknproto-minlen-err',
        'ipv6_ver_err' => 'ipv6-ver-err',
        'ipv6_ihl_err' => 'ipv6-ihl-err',
        'ipv6_plen_zero' => 'ipv6-plen-zero',
        'ipv6_exthdr_order_err' => 'ipv6-exthdr-order-err',
        'ipv6_exthdr_len_err' => 'ipv6-exthdr-len-err'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ipv4_ver_err' => 'setIpv4VerErr',
        'ipv4_ihl_err' => 'setIpv4IhlErr',
        'ipv4_len_err' => 'setIpv4LenErr',
        'ipv4_ttlzero_err' => 'setIpv4TtlzeroErr',
        'ipv4_csum_err' => 'setIpv4CsumErr',
        'ipv4_opt_err' => 'setIpv4OptErr',
        'tcp_hlen_err' => 'setTcpHlenErr',
        'tcp_plen_err' => 'setTcpPlenErr',
        'tcp_csum_err' => 'setTcpCsumErr',
        'udp_plen_err' => 'setUdpPlenErr',
        'udp_hlen_err' => 'setUdpHlenErr',
        'udp_csum_err' => 'setUdpCsumErr',
        'udp_len_err' => 'setUdpLenErr',
        'udplite_cover_err' => 'setUdpliteCoverErr',
        'udplite_csum_err' => 'setUdpliteCsumErr',
        'icmp_minlen_err' => 'setIcmpMinlenErr',
        'icmp_csum_err' => 'setIcmpCsumErr',
        'esp_minlen_err' => 'setEspMinlenErr',
        'unknproto_minlen_err' => 'setUnknprotoMinlenErr',
        'ipv6_ver_err' => 'setIpv6VerErr',
        'ipv6_ihl_err' => 'setIpv6IhlErr',
        'ipv6_plen_zero' => 'setIpv6PlenZero',
        'ipv6_exthdr_order_err' => 'setIpv6ExthdrOrderErr',
        'ipv6_exthdr_len_err' => 'setIpv6ExthdrLenErr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ipv4_ver_err' => 'getIpv4VerErr',
        'ipv4_ihl_err' => 'getIpv4IhlErr',
        'ipv4_len_err' => 'getIpv4LenErr',
        'ipv4_ttlzero_err' => 'getIpv4TtlzeroErr',
        'ipv4_csum_err' => 'getIpv4CsumErr',
        'ipv4_opt_err' => 'getIpv4OptErr',
        'tcp_hlen_err' => 'getTcpHlenErr',
        'tcp_plen_err' => 'getTcpPlenErr',
        'tcp_csum_err' => 'getTcpCsumErr',
        'udp_plen_err' => 'getUdpPlenErr',
        'udp_hlen_err' => 'getUdpHlenErr',
        'udp_csum_err' => 'getUdpCsumErr',
        'udp_len_err' => 'getUdpLenErr',
        'udplite_cover_err' => 'getUdpliteCoverErr',
        'udplite_csum_err' => 'getUdpliteCsumErr',
        'icmp_minlen_err' => 'getIcmpMinlenErr',
        'icmp_csum_err' => 'getIcmpCsumErr',
        'esp_minlen_err' => 'getEspMinlenErr',
        'unknproto_minlen_err' => 'getUnknprotoMinlenErr',
        'ipv6_ver_err' => 'getIpv6VerErr',
        'ipv6_ihl_err' => 'getIpv6IhlErr',
        'ipv6_plen_zero' => 'getIpv6PlenZero',
        'ipv6_exthdr_order_err' => 'getIpv6ExthdrOrderErr',
        'ipv6_exthdr_len_err' => 'getIpv6ExthdrLenErr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IPV4_VER_ERR_DROP = 'drop';
    const IPV4_VER_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV4_IHL_ERR_DROP = 'drop';
    const IPV4_IHL_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV4_LEN_ERR_DROP = 'drop';
    const IPV4_LEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV4_TTLZERO_ERR_DROP = 'drop';
    const IPV4_TTLZERO_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV4_CSUM_ERR_DROP = 'drop';
    const IPV4_CSUM_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV4_OPT_ERR_DROP = 'drop';
    const IPV4_OPT_ERR_TRAP_TO_HOST = 'trap-to-host';
    const TCP_HLEN_ERR_DROP = 'drop';
    const TCP_HLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const TCP_PLEN_ERR_DROP = 'drop';
    const TCP_PLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const TCP_CSUM_ERR_DROP = 'drop';
    const TCP_CSUM_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDP_PLEN_ERR_DROP = 'drop';
    const UDP_PLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDP_HLEN_ERR_DROP = 'drop';
    const UDP_HLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDP_CSUM_ERR_DROP = 'drop';
    const UDP_CSUM_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDP_LEN_ERR_DROP = 'drop';
    const UDP_LEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDPLITE_COVER_ERR_DROP = 'drop';
    const UDPLITE_COVER_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UDPLITE_CSUM_ERR_DROP = 'drop';
    const UDPLITE_CSUM_ERR_TRAP_TO_HOST = 'trap-to-host';
    const ICMP_MINLEN_ERR_DROP = 'drop';
    const ICMP_MINLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const ICMP_CSUM_ERR_DROP = 'drop';
    const ICMP_CSUM_ERR_TRAP_TO_HOST = 'trap-to-host';
    const ESP_MINLEN_ERR_DROP = 'drop';
    const ESP_MINLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const UNKNPROTO_MINLEN_ERR_DROP = 'drop';
    const UNKNPROTO_MINLEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV6_VER_ERR_DROP = 'drop';
    const IPV6_VER_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV6_IHL_ERR_DROP = 'drop';
    const IPV6_IHL_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV6_PLEN_ZERO_DROP = 'drop';
    const IPV6_PLEN_ZERO_TRAP_TO_HOST = 'trap-to-host';
    const IPV6_EXTHDR_ORDER_ERR_DROP = 'drop';
    const IPV6_EXTHDR_ORDER_ERR_TRAP_TO_HOST = 'trap-to-host';
    const IPV6_EXTHDR_LEN_ERR_DROP = 'drop';
    const IPV6_EXTHDR_LEN_ERR_TRAP_TO_HOST = 'trap-to-host';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4VerErrAllowableValues()
    {
        return [
            self::IPV4_VER_ERR_DROP,
            self::IPV4_VER_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4IhlErrAllowableValues()
    {
        return [
            self::IPV4_IHL_ERR_DROP,
            self::IPV4_IHL_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4LenErrAllowableValues()
    {
        return [
            self::IPV4_LEN_ERR_DROP,
            self::IPV4_LEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4TtlzeroErrAllowableValues()
    {
        return [
            self::IPV4_TTLZERO_ERR_DROP,
            self::IPV4_TTLZERO_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4CsumErrAllowableValues()
    {
        return [
            self::IPV4_CSUM_ERR_DROP,
            self::IPV4_CSUM_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4OptErrAllowableValues()
    {
        return [
            self::IPV4_OPT_ERR_DROP,
            self::IPV4_OPT_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTcpHlenErrAllowableValues()
    {
        return [
            self::TCP_HLEN_ERR_DROP,
            self::TCP_HLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTcpPlenErrAllowableValues()
    {
        return [
            self::TCP_PLEN_ERR_DROP,
            self::TCP_PLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTcpCsumErrAllowableValues()
    {
        return [
            self::TCP_CSUM_ERR_DROP,
            self::TCP_CSUM_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpPlenErrAllowableValues()
    {
        return [
            self::UDP_PLEN_ERR_DROP,
            self::UDP_PLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpHlenErrAllowableValues()
    {
        return [
            self::UDP_HLEN_ERR_DROP,
            self::UDP_HLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpCsumErrAllowableValues()
    {
        return [
            self::UDP_CSUM_ERR_DROP,
            self::UDP_CSUM_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpLenErrAllowableValues()
    {
        return [
            self::UDP_LEN_ERR_DROP,
            self::UDP_LEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpliteCoverErrAllowableValues()
    {
        return [
            self::UDPLITE_COVER_ERR_DROP,
            self::UDPLITE_COVER_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdpliteCsumErrAllowableValues()
    {
        return [
            self::UDPLITE_CSUM_ERR_DROP,
            self::UDPLITE_CSUM_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmpMinlenErrAllowableValues()
    {
        return [
            self::ICMP_MINLEN_ERR_DROP,
            self::ICMP_MINLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmpCsumErrAllowableValues()
    {
        return [
            self::ICMP_CSUM_ERR_DROP,
            self::ICMP_CSUM_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEspMinlenErrAllowableValues()
    {
        return [
            self::ESP_MINLEN_ERR_DROP,
            self::ESP_MINLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknprotoMinlenErrAllowableValues()
    {
        return [
            self::UNKNPROTO_MINLEN_ERR_DROP,
            self::UNKNPROTO_MINLEN_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6VerErrAllowableValues()
    {
        return [
            self::IPV6_VER_ERR_DROP,
            self::IPV6_VER_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6IhlErrAllowableValues()
    {
        return [
            self::IPV6_IHL_ERR_DROP,
            self::IPV6_IHL_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6PlenZeroAllowableValues()
    {
        return [
            self::IPV6_PLEN_ZERO_DROP,
            self::IPV6_PLEN_ZERO_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6ExthdrOrderErrAllowableValues()
    {
        return [
            self::IPV6_EXTHDR_ORDER_ERR_DROP,
            self::IPV6_EXTHDR_ORDER_ERR_TRAP_TO_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6ExthdrLenErrAllowableValues()
    {
        return [
            self::IPV6_EXTHDR_LEN_ERR_DROP,
            self::IPV6_EXTHDR_LEN_ERR_TRAP_TO_HOST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ipv4_ver_err'] = $data['ipv4_ver_err'] ?? null;
        $this->container['ipv4_ihl_err'] = $data['ipv4_ihl_err'] ?? null;
        $this->container['ipv4_len_err'] = $data['ipv4_len_err'] ?? null;
        $this->container['ipv4_ttlzero_err'] = $data['ipv4_ttlzero_err'] ?? null;
        $this->container['ipv4_csum_err'] = $data['ipv4_csum_err'] ?? null;
        $this->container['ipv4_opt_err'] = $data['ipv4_opt_err'] ?? null;
        $this->container['tcp_hlen_err'] = $data['tcp_hlen_err'] ?? null;
        $this->container['tcp_plen_err'] = $data['tcp_plen_err'] ?? null;
        $this->container['tcp_csum_err'] = $data['tcp_csum_err'] ?? null;
        $this->container['udp_plen_err'] = $data['udp_plen_err'] ?? null;
        $this->container['udp_hlen_err'] = $data['udp_hlen_err'] ?? null;
        $this->container['udp_csum_err'] = $data['udp_csum_err'] ?? null;
        $this->container['udp_len_err'] = $data['udp_len_err'] ?? null;
        $this->container['udplite_cover_err'] = $data['udplite_cover_err'] ?? null;
        $this->container['udplite_csum_err'] = $data['udplite_csum_err'] ?? null;
        $this->container['icmp_minlen_err'] = $data['icmp_minlen_err'] ?? null;
        $this->container['icmp_csum_err'] = $data['icmp_csum_err'] ?? null;
        $this->container['esp_minlen_err'] = $data['esp_minlen_err'] ?? null;
        $this->container['unknproto_minlen_err'] = $data['unknproto_minlen_err'] ?? null;
        $this->container['ipv6_ver_err'] = $data['ipv6_ver_err'] ?? null;
        $this->container['ipv6_ihl_err'] = $data['ipv6_ihl_err'] ?? null;
        $this->container['ipv6_plen_zero'] = $data['ipv6_plen_zero'] ?? null;
        $this->container['ipv6_exthdr_order_err'] = $data['ipv6_exthdr_order_err'] ?? null;
        $this->container['ipv6_exthdr_len_err'] = $data['ipv6_exthdr_len_err'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIpv4VerErrAllowableValues();
        if (!is_null($this->container['ipv4_ver_err']) && !in_array($this->container['ipv4_ver_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_ver_err', must be one of '%s'",
                $this->container['ipv4_ver_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4IhlErrAllowableValues();
        if (!is_null($this->container['ipv4_ihl_err']) && !in_array($this->container['ipv4_ihl_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_ihl_err', must be one of '%s'",
                $this->container['ipv4_ihl_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4LenErrAllowableValues();
        if (!is_null($this->container['ipv4_len_err']) && !in_array($this->container['ipv4_len_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_len_err', must be one of '%s'",
                $this->container['ipv4_len_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4TtlzeroErrAllowableValues();
        if (!is_null($this->container['ipv4_ttlzero_err']) && !in_array($this->container['ipv4_ttlzero_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_ttlzero_err', must be one of '%s'",
                $this->container['ipv4_ttlzero_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4CsumErrAllowableValues();
        if (!is_null($this->container['ipv4_csum_err']) && !in_array($this->container['ipv4_csum_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_csum_err', must be one of '%s'",
                $this->container['ipv4_csum_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4OptErrAllowableValues();
        if (!is_null($this->container['ipv4_opt_err']) && !in_array($this->container['ipv4_opt_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_opt_err', must be one of '%s'",
                $this->container['ipv4_opt_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTcpHlenErrAllowableValues();
        if (!is_null($this->container['tcp_hlen_err']) && !in_array($this->container['tcp_hlen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tcp_hlen_err', must be one of '%s'",
                $this->container['tcp_hlen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTcpPlenErrAllowableValues();
        if (!is_null($this->container['tcp_plen_err']) && !in_array($this->container['tcp_plen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tcp_plen_err', must be one of '%s'",
                $this->container['tcp_plen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTcpCsumErrAllowableValues();
        if (!is_null($this->container['tcp_csum_err']) && !in_array($this->container['tcp_csum_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tcp_csum_err', must be one of '%s'",
                $this->container['tcp_csum_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpPlenErrAllowableValues();
        if (!is_null($this->container['udp_plen_err']) && !in_array($this->container['udp_plen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udp_plen_err', must be one of '%s'",
                $this->container['udp_plen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpHlenErrAllowableValues();
        if (!is_null($this->container['udp_hlen_err']) && !in_array($this->container['udp_hlen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udp_hlen_err', must be one of '%s'",
                $this->container['udp_hlen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpCsumErrAllowableValues();
        if (!is_null($this->container['udp_csum_err']) && !in_array($this->container['udp_csum_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udp_csum_err', must be one of '%s'",
                $this->container['udp_csum_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpLenErrAllowableValues();
        if (!is_null($this->container['udp_len_err']) && !in_array($this->container['udp_len_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udp_len_err', must be one of '%s'",
                $this->container['udp_len_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpliteCoverErrAllowableValues();
        if (!is_null($this->container['udplite_cover_err']) && !in_array($this->container['udplite_cover_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udplite_cover_err', must be one of '%s'",
                $this->container['udplite_cover_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdpliteCsumErrAllowableValues();
        if (!is_null($this->container['udplite_csum_err']) && !in_array($this->container['udplite_csum_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udplite_csum_err', must be one of '%s'",
                $this->container['udplite_csum_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIcmpMinlenErrAllowableValues();
        if (!is_null($this->container['icmp_minlen_err']) && !in_array($this->container['icmp_minlen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp_minlen_err', must be one of '%s'",
                $this->container['icmp_minlen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIcmpCsumErrAllowableValues();
        if (!is_null($this->container['icmp_csum_err']) && !in_array($this->container['icmp_csum_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp_csum_err', must be one of '%s'",
                $this->container['icmp_csum_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEspMinlenErrAllowableValues();
        if (!is_null($this->container['esp_minlen_err']) && !in_array($this->container['esp_minlen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'esp_minlen_err', must be one of '%s'",
                $this->container['esp_minlen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnknprotoMinlenErrAllowableValues();
        if (!is_null($this->container['unknproto_minlen_err']) && !in_array($this->container['unknproto_minlen_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknproto_minlen_err', must be one of '%s'",
                $this->container['unknproto_minlen_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6VerErrAllowableValues();
        if (!is_null($this->container['ipv6_ver_err']) && !in_array($this->container['ipv6_ver_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_ver_err', must be one of '%s'",
                $this->container['ipv6_ver_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6IhlErrAllowableValues();
        if (!is_null($this->container['ipv6_ihl_err']) && !in_array($this->container['ipv6_ihl_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_ihl_err', must be one of '%s'",
                $this->container['ipv6_ihl_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6PlenZeroAllowableValues();
        if (!is_null($this->container['ipv6_plen_zero']) && !in_array($this->container['ipv6_plen_zero'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_plen_zero', must be one of '%s'",
                $this->container['ipv6_plen_zero'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6ExthdrOrderErrAllowableValues();
        if (!is_null($this->container['ipv6_exthdr_order_err']) && !in_array($this->container['ipv6_exthdr_order_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_exthdr_order_err', must be one of '%s'",
                $this->container['ipv6_exthdr_order_err'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6ExthdrLenErrAllowableValues();
        if (!is_null($this->container['ipv6_exthdr_len_err']) && !in_array($this->container['ipv6_exthdr_len_err'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_exthdr_len_err', must be one of '%s'",
                $this->container['ipv6_exthdr_len_err'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ipv4_ver_err
     *
     * @return string|null
     */
    public function getIpv4VerErr()
    {
        return $this->container['ipv4_ver_err'];
    }

    /**
     * Sets ipv4_ver_err
     *
     * @param string|null $ipv4_ver_err Invalid IPv4 header version anomalies.    drop:Drop IPv4 invalid header version.    trap-to-host:Forward IPv4 invalid header version to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4VerErr($ipv4_ver_err)
    {
        $allowedValues = $this->getIpv4VerErrAllowableValues();
        if (!is_null($ipv4_ver_err) && !in_array($ipv4_ver_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_ver_err', must be one of '%s'",
                    $ipv4_ver_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_ver_err'] = $ipv4_ver_err;

        return $this;
    }

    /**
     * Gets ipv4_ihl_err
     *
     * @return string|null
     */
    public function getIpv4IhlErr()
    {
        return $this->container['ipv4_ihl_err'];
    }

    /**
     * Sets ipv4_ihl_err
     *
     * @param string|null $ipv4_ihl_err Invalid IPv4 header length anomalies.    drop:Drop IPv4 invalid header length.    trap-to-host:Forward IPv4 invalid header length to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4IhlErr($ipv4_ihl_err)
    {
        $allowedValues = $this->getIpv4IhlErrAllowableValues();
        if (!is_null($ipv4_ihl_err) && !in_array($ipv4_ihl_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_ihl_err', must be one of '%s'",
                    $ipv4_ihl_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_ihl_err'] = $ipv4_ihl_err;

        return $this;
    }

    /**
     * Gets ipv4_len_err
     *
     * @return string|null
     */
    public function getIpv4LenErr()
    {
        return $this->container['ipv4_len_err'];
    }

    /**
     * Sets ipv4_len_err
     *
     * @param string|null $ipv4_len_err Invalid IPv4 packet length anomalies.    drop:Drop IPv4 invalid packet length.    trap-to-host:Forward IPv4 invalid packet length to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4LenErr($ipv4_len_err)
    {
        $allowedValues = $this->getIpv4LenErrAllowableValues();
        if (!is_null($ipv4_len_err) && !in_array($ipv4_len_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_len_err', must be one of '%s'",
                    $ipv4_len_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_len_err'] = $ipv4_len_err;

        return $this;
    }

    /**
     * Gets ipv4_ttlzero_err
     *
     * @return string|null
     */
    public function getIpv4TtlzeroErr()
    {
        return $this->container['ipv4_ttlzero_err'];
    }

    /**
     * Sets ipv4_ttlzero_err
     *
     * @param string|null $ipv4_ttlzero_err Invalid IPv4 TTL field zero anomalies.    drop:Drop IPv4 invalid TTL field zero.    trap-to-host:Forward IPv4 invalid TTL field zero to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4TtlzeroErr($ipv4_ttlzero_err)
    {
        $allowedValues = $this->getIpv4TtlzeroErrAllowableValues();
        if (!is_null($ipv4_ttlzero_err) && !in_array($ipv4_ttlzero_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_ttlzero_err', must be one of '%s'",
                    $ipv4_ttlzero_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_ttlzero_err'] = $ipv4_ttlzero_err;

        return $this;
    }

    /**
     * Gets ipv4_csum_err
     *
     * @return string|null
     */
    public function getIpv4CsumErr()
    {
        return $this->container['ipv4_csum_err'];
    }

    /**
     * Sets ipv4_csum_err
     *
     * @param string|null $ipv4_csum_err Invalid IPv4 packet checksum anomalies.    drop:Drop IPv4 invalid L3 checksum.    trap-to-host:Forward IPv4 invalid L3 checksum to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4CsumErr($ipv4_csum_err)
    {
        $allowedValues = $this->getIpv4CsumErrAllowableValues();
        if (!is_null($ipv4_csum_err) && !in_array($ipv4_csum_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_csum_err', must be one of '%s'",
                    $ipv4_csum_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_csum_err'] = $ipv4_csum_err;

        return $this;
    }

    /**
     * Gets ipv4_opt_err
     *
     * @return string|null
     */
    public function getIpv4OptErr()
    {
        return $this->container['ipv4_opt_err'];
    }

    /**
     * Sets ipv4_opt_err
     *
     * @param string|null $ipv4_opt_err Invalid IPv4 option parsing anomalies.    drop:Drop IPv4 invalid option parsing.    trap-to-host:Forward IPv4 invalid option parsing to main CPU for processing.
     *
     * @return self
     */
    public function setIpv4OptErr($ipv4_opt_err)
    {
        $allowedValues = $this->getIpv4OptErrAllowableValues();
        if (!is_null($ipv4_opt_err) && !in_array($ipv4_opt_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_opt_err', must be one of '%s'",
                    $ipv4_opt_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_opt_err'] = $ipv4_opt_err;

        return $this;
    }

    /**
     * Gets tcp_hlen_err
     *
     * @return string|null
     */
    public function getTcpHlenErr()
    {
        return $this->container['tcp_hlen_err'];
    }

    /**
     * Sets tcp_hlen_err
     *
     * @param string|null $tcp_hlen_err Invalid IPv4 TCP header length anomalies.    drop:Drop IPv4 invalid TCP packet header length.    trap-to-host:Forward IPv4 invalid TCP packet header length to main CPU for processing.
     *
     * @return self
     */
    public function setTcpHlenErr($tcp_hlen_err)
    {
        $allowedValues = $this->getTcpHlenErrAllowableValues();
        if (!is_null($tcp_hlen_err) && !in_array($tcp_hlen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tcp_hlen_err', must be one of '%s'",
                    $tcp_hlen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tcp_hlen_err'] = $tcp_hlen_err;

        return $this;
    }

    /**
     * Gets tcp_plen_err
     *
     * @return string|null
     */
    public function getTcpPlenErr()
    {
        return $this->container['tcp_plen_err'];
    }

    /**
     * Sets tcp_plen_err
     *
     * @param string|null $tcp_plen_err Invalid IPv4 TCP packet length anomalies.    drop:Drop IPv4 invalid TCP packet length.    trap-to-host:Forward IPv4 invalid TCP packet length to main CPU for processing.
     *
     * @return self
     */
    public function setTcpPlenErr($tcp_plen_err)
    {
        $allowedValues = $this->getTcpPlenErrAllowableValues();
        if (!is_null($tcp_plen_err) && !in_array($tcp_plen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tcp_plen_err', must be one of '%s'",
                    $tcp_plen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tcp_plen_err'] = $tcp_plen_err;

        return $this;
    }

    /**
     * Gets tcp_csum_err
     *
     * @return string|null
     */
    public function getTcpCsumErr()
    {
        return $this->container['tcp_csum_err'];
    }

    /**
     * Sets tcp_csum_err
     *
     * @param string|null $tcp_csum_err Invalid IPv4 TCP packet checksum anomalies.    drop:Drop IPv4 invalid TCP packet checksum.    trap-to-host:Forward IPv4 invalid TCP packet checksum to main CPU for processing.
     *
     * @return self
     */
    public function setTcpCsumErr($tcp_csum_err)
    {
        $allowedValues = $this->getTcpCsumErrAllowableValues();
        if (!is_null($tcp_csum_err) && !in_array($tcp_csum_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tcp_csum_err', must be one of '%s'",
                    $tcp_csum_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tcp_csum_err'] = $tcp_csum_err;

        return $this;
    }

    /**
     * Gets udp_plen_err
     *
     * @return string|null
     */
    public function getUdpPlenErr()
    {
        return $this->container['udp_plen_err'];
    }

    /**
     * Sets udp_plen_err
     *
     * @param string|null $udp_plen_err Invalid IPv4 UDP packet minimum length anomalies.    drop:Drop IPv4 invalid UDP packet minimum length.    trap-to-host:Forward IPv4 invalid UDP packet minimum length to main CPU for processing.
     *
     * @return self
     */
    public function setUdpPlenErr($udp_plen_err)
    {
        $allowedValues = $this->getUdpPlenErrAllowableValues();
        if (!is_null($udp_plen_err) && !in_array($udp_plen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udp_plen_err', must be one of '%s'",
                    $udp_plen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udp_plen_err'] = $udp_plen_err;

        return $this;
    }

    /**
     * Gets udp_hlen_err
     *
     * @return string|null
     */
    public function getUdpHlenErr()
    {
        return $this->container['udp_hlen_err'];
    }

    /**
     * Sets udp_hlen_err
     *
     * @param string|null $udp_hlen_err Invalid IPv4 UDP packet header length anomalies.    drop:Drop IPv4 invalid UDP header length.    trap-to-host:Forward IPv4 invalid UDP header length to main CPU for processing.
     *
     * @return self
     */
    public function setUdpHlenErr($udp_hlen_err)
    {
        $allowedValues = $this->getUdpHlenErrAllowableValues();
        if (!is_null($udp_hlen_err) && !in_array($udp_hlen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udp_hlen_err', must be one of '%s'",
                    $udp_hlen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udp_hlen_err'] = $udp_hlen_err;

        return $this;
    }

    /**
     * Gets udp_csum_err
     *
     * @return string|null
     */
    public function getUdpCsumErr()
    {
        return $this->container['udp_csum_err'];
    }

    /**
     * Sets udp_csum_err
     *
     * @param string|null $udp_csum_err Invalid IPv4 UDP packet checksum anomalies.    drop:Drop IPv4 invalid UDP packet checksum.    trap-to-host:Forward IPv4 invalid UDP packet checksum to main CPU for processing.
     *
     * @return self
     */
    public function setUdpCsumErr($udp_csum_err)
    {
        $allowedValues = $this->getUdpCsumErrAllowableValues();
        if (!is_null($udp_csum_err) && !in_array($udp_csum_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udp_csum_err', must be one of '%s'",
                    $udp_csum_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udp_csum_err'] = $udp_csum_err;

        return $this;
    }

    /**
     * Gets udp_len_err
     *
     * @return string|null
     */
    public function getUdpLenErr()
    {
        return $this->container['udp_len_err'];
    }

    /**
     * Sets udp_len_err
     *
     * @param string|null $udp_len_err Invalid IPv4 UDP packet length anomalies.    drop:Drop IPv4 invalid UDP packet length.    trap-to-host:Forward IPv4 invalid UDP packet length to main CPU for processing.
     *
     * @return self
     */
    public function setUdpLenErr($udp_len_err)
    {
        $allowedValues = $this->getUdpLenErrAllowableValues();
        if (!is_null($udp_len_err) && !in_array($udp_len_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udp_len_err', must be one of '%s'",
                    $udp_len_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udp_len_err'] = $udp_len_err;

        return $this;
    }

    /**
     * Gets udplite_cover_err
     *
     * @return string|null
     */
    public function getUdpliteCoverErr()
    {
        return $this->container['udplite_cover_err'];
    }

    /**
     * Sets udplite_cover_err
     *
     * @param string|null $udplite_cover_err Invalid IPv4 UDP-Lite packet coverage anomalies.    drop:Drop IPv4 invalid UDP-Lite packet coverage.    trap-to-host:Forward IPv4 invalid UDP-Lite packet coverage to main CPU for processing.
     *
     * @return self
     */
    public function setUdpliteCoverErr($udplite_cover_err)
    {
        $allowedValues = $this->getUdpliteCoverErrAllowableValues();
        if (!is_null($udplite_cover_err) && !in_array($udplite_cover_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udplite_cover_err', must be one of '%s'",
                    $udplite_cover_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udplite_cover_err'] = $udplite_cover_err;

        return $this;
    }

    /**
     * Gets udplite_csum_err
     *
     * @return string|null
     */
    public function getUdpliteCsumErr()
    {
        return $this->container['udplite_csum_err'];
    }

    /**
     * Sets udplite_csum_err
     *
     * @param string|null $udplite_csum_err Invalid IPv4 UDP-Lite packet checksum anomalies.    drop:Drop IPv4 invalid UDP-Lite packet checksum.    trap-to-host:Forward IPv4 invalid UDP-Lite packet checksum to main CPU for processing.
     *
     * @return self
     */
    public function setUdpliteCsumErr($udplite_csum_err)
    {
        $allowedValues = $this->getUdpliteCsumErrAllowableValues();
        if (!is_null($udplite_csum_err) && !in_array($udplite_csum_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udplite_csum_err', must be one of '%s'",
                    $udplite_csum_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udplite_csum_err'] = $udplite_csum_err;

        return $this;
    }

    /**
     * Gets icmp_minlen_err
     *
     * @return string|null
     */
    public function getIcmpMinlenErr()
    {
        return $this->container['icmp_minlen_err'];
    }

    /**
     * Sets icmp_minlen_err
     *
     * @param string|null $icmp_minlen_err Invalid IPv4 ICMP short packet anomalies.    drop:Drop IPv4 invalid ICMP short packet.    trap-to-host:Forward IPv4 invalid ICMP short packet to main CPU for processing.
     *
     * @return self
     */
    public function setIcmpMinlenErr($icmp_minlen_err)
    {
        $allowedValues = $this->getIcmpMinlenErrAllowableValues();
        if (!is_null($icmp_minlen_err) && !in_array($icmp_minlen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp_minlen_err', must be one of '%s'",
                    $icmp_minlen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp_minlen_err'] = $icmp_minlen_err;

        return $this;
    }

    /**
     * Gets icmp_csum_err
     *
     * @return string|null
     */
    public function getIcmpCsumErr()
    {
        return $this->container['icmp_csum_err'];
    }

    /**
     * Sets icmp_csum_err
     *
     * @param string|null $icmp_csum_err Invalid IPv4 ICMP packet checksum anomalies.    drop:Drop IPv4 invalid ICMP checksum.    trap-to-host:Forward IPv4 invalid ICMP checksum to main CPU for processing.
     *
     * @return self
     */
    public function setIcmpCsumErr($icmp_csum_err)
    {
        $allowedValues = $this->getIcmpCsumErrAllowableValues();
        if (!is_null($icmp_csum_err) && !in_array($icmp_csum_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp_csum_err', must be one of '%s'",
                    $icmp_csum_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp_csum_err'] = $icmp_csum_err;

        return $this;
    }

    /**
     * Gets esp_minlen_err
     *
     * @return string|null
     */
    public function getEspMinlenErr()
    {
        return $this->container['esp_minlen_err'];
    }

    /**
     * Sets esp_minlen_err
     *
     * @param string|null $esp_minlen_err Invalid IPv4 ESP short packet anomalies.    drop:Drop IPv4 invalid ESP short packet.    trap-to-host:Forward IPv4 invalid ESP short packet to main CPU for processing.
     *
     * @return self
     */
    public function setEspMinlenErr($esp_minlen_err)
    {
        $allowedValues = $this->getEspMinlenErrAllowableValues();
        if (!is_null($esp_minlen_err) && !in_array($esp_minlen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'esp_minlen_err', must be one of '%s'",
                    $esp_minlen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['esp_minlen_err'] = $esp_minlen_err;

        return $this;
    }

    /**
     * Gets unknproto_minlen_err
     *
     * @return string|null
     */
    public function getUnknprotoMinlenErr()
    {
        return $this->container['unknproto_minlen_err'];
    }

    /**
     * Sets unknproto_minlen_err
     *
     * @param string|null $unknproto_minlen_err Invalid IPv4 L4 unknown protocol short packet anomalies.    drop:Drop IPv4 invalid L4 unknown protocol short packet.    trap-to-host:Forward IPv4 invalid L4 unknown protocol short packet to main CPU for processing.
     *
     * @return self
     */
    public function setUnknprotoMinlenErr($unknproto_minlen_err)
    {
        $allowedValues = $this->getUnknprotoMinlenErrAllowableValues();
        if (!is_null($unknproto_minlen_err) && !in_array($unknproto_minlen_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknproto_minlen_err', must be one of '%s'",
                    $unknproto_minlen_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknproto_minlen_err'] = $unknproto_minlen_err;

        return $this;
    }

    /**
     * Gets ipv6_ver_err
     *
     * @return string|null
     */
    public function getIpv6VerErr()
    {
        return $this->container['ipv6_ver_err'];
    }

    /**
     * Sets ipv6_ver_err
     *
     * @param string|null $ipv6_ver_err Invalid IPv6 packet version anomalies.    drop:Drop IPv6 with invalid packet version.    trap-to-host:Forward IPv6 with invalid packet version to FortiOS.
     *
     * @return self
     */
    public function setIpv6VerErr($ipv6_ver_err)
    {
        $allowedValues = $this->getIpv6VerErrAllowableValues();
        if (!is_null($ipv6_ver_err) && !in_array($ipv6_ver_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_ver_err', must be one of '%s'",
                    $ipv6_ver_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_ver_err'] = $ipv6_ver_err;

        return $this;
    }

    /**
     * Gets ipv6_ihl_err
     *
     * @return string|null
     */
    public function getIpv6IhlErr()
    {
        return $this->container['ipv6_ihl_err'];
    }

    /**
     * Sets ipv6_ihl_err
     *
     * @param string|null $ipv6_ihl_err Invalid IPv6 packet length anomalies.    drop:Drop IPv6 with invalid packet length.    trap-to-host:Forward IPv6 with invalid packet length to FortiOS.
     *
     * @return self
     */
    public function setIpv6IhlErr($ipv6_ihl_err)
    {
        $allowedValues = $this->getIpv6IhlErrAllowableValues();
        if (!is_null($ipv6_ihl_err) && !in_array($ipv6_ihl_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_ihl_err', must be one of '%s'",
                    $ipv6_ihl_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_ihl_err'] = $ipv6_ihl_err;

        return $this;
    }

    /**
     * Gets ipv6_plen_zero
     *
     * @return string|null
     */
    public function getIpv6PlenZero()
    {
        return $this->container['ipv6_plen_zero'];
    }

    /**
     * Sets ipv6_plen_zero
     *
     * @param string|null $ipv6_plen_zero Invalid IPv6 packet payload length zero anomalies.    drop:Drop IPv6 with invalid packet payload length zero.    trap-to-host:Forward IPv6 with invalid packet payload length zero to FortiOS.
     *
     * @return self
     */
    public function setIpv6PlenZero($ipv6_plen_zero)
    {
        $allowedValues = $this->getIpv6PlenZeroAllowableValues();
        if (!is_null($ipv6_plen_zero) && !in_array($ipv6_plen_zero, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_plen_zero', must be one of '%s'",
                    $ipv6_plen_zero,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_plen_zero'] = $ipv6_plen_zero;

        return $this;
    }

    /**
     * Gets ipv6_exthdr_order_err
     *
     * @return string|null
     */
    public function getIpv6ExthdrOrderErr()
    {
        return $this->container['ipv6_exthdr_order_err'];
    }

    /**
     * Sets ipv6_exthdr_order_err
     *
     * @param string|null $ipv6_exthdr_order_err Invalid IPv6 packet extension header ordering anomalies.    drop:Drop IPv6 with invalid packet extension header ordering.    trap-to-host:Forward IPv6 with invalid packet extension header ordering to FortiOS.
     *
     * @return self
     */
    public function setIpv6ExthdrOrderErr($ipv6_exthdr_order_err)
    {
        $allowedValues = $this->getIpv6ExthdrOrderErrAllowableValues();
        if (!is_null($ipv6_exthdr_order_err) && !in_array($ipv6_exthdr_order_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_exthdr_order_err', must be one of '%s'",
                    $ipv6_exthdr_order_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_exthdr_order_err'] = $ipv6_exthdr_order_err;

        return $this;
    }

    /**
     * Gets ipv6_exthdr_len_err
     *
     * @return string|null
     */
    public function getIpv6ExthdrLenErr()
    {
        return $this->container['ipv6_exthdr_len_err'];
    }

    /**
     * Sets ipv6_exthdr_len_err
     *
     * @param string|null $ipv6_exthdr_len_err Invalid IPv6 packet chain extension header total length anomalies.    drop:Drop IPv6 with invalid packet chain extension header total length.    trap-to-host:Forward IPv6 with invalid packet chain extension header total length to FortiOS.
     *
     * @return self
     */
    public function setIpv6ExthdrLenErr($ipv6_exthdr_len_err)
    {
        $allowedValues = $this->getIpv6ExthdrLenErrAllowableValues();
        if (!is_null($ipv6_exthdr_len_err) && !in_array($ipv6_exthdr_len_err, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_exthdr_len_err', must be one of '%s'",
                    $ipv6_exthdr_len_err,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_exthdr_len_err'] = $ipv6_exthdr_len_err;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


