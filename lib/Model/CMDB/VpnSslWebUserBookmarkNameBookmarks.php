<?php
/**
 * VpnSslWebUserBookmarkNameBookmarks
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * VpnSslWebUserBookmarkNameBookmarks Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VpnSslWebUserBookmarkNameBookmarks implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_vpn_ssl_web_user_bookmark__name__bookmarks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'apptype' => 'string',
        'url' => 'string',
        'host' => 'string',
        'folder' => 'string',
        'domain' => 'string',
        'additional_params' => 'string',
        'listening_port' => 'int',
        'remote_port' => 'int',
        'show_status_window' => 'string',
        'description' => 'string',
        'server_layout' => 'string',
        'security' => 'string',
        'preconnection_id' => 'int',
        'preconnection_blob' => 'string',
        'load_balancing_info' => 'string',
        'port' => 'int',
        'logon_user' => 'string',
        'logon_password' => 'string',
        'sso' => 'string',
        'form_data' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameFormData[]',
        'sso_credential' => 'string',
        'sso_username' => 'string',
        'sso_password' => 'string',
        'sso_credential_sent_once' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'apptype' => null,
        'url' => null,
        'host' => null,
        'folder' => null,
        'domain' => null,
        'additional_params' => null,
        'listening_port' => null,
        'remote_port' => null,
        'show_status_window' => null,
        'description' => null,
        'server_layout' => null,
        'security' => null,
        'preconnection_id' => null,
        'preconnection_blob' => null,
        'load_balancing_info' => null,
        'port' => null,
        'logon_user' => null,
        'logon_password' => 'password',
        'sso' => null,
        'form_data' => null,
        'sso_credential' => null,
        'sso_username' => null,
        'sso_password' => 'password',
        'sso_credential_sent_once' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'apptype' => 'apptype',
        'url' => 'url',
        'host' => 'host',
        'folder' => 'folder',
        'domain' => 'domain',
        'additional_params' => 'additional-params',
        'listening_port' => 'listening-port',
        'remote_port' => 'remote-port',
        'show_status_window' => 'show-status-window',
        'description' => 'description',
        'server_layout' => 'server-layout',
        'security' => 'security',
        'preconnection_id' => 'preconnection-id',
        'preconnection_blob' => 'preconnection-blob',
        'load_balancing_info' => 'load-balancing-info',
        'port' => 'port',
        'logon_user' => 'logon-user',
        'logon_password' => 'logon-password',
        'sso' => 'sso',
        'form_data' => 'form-data',
        'sso_credential' => 'sso-credential',
        'sso_username' => 'sso-username',
        'sso_password' => 'sso-password',
        'sso_credential_sent_once' => 'sso-credential-sent-once'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'apptype' => 'setApptype',
        'url' => 'setUrl',
        'host' => 'setHost',
        'folder' => 'setFolder',
        'domain' => 'setDomain',
        'additional_params' => 'setAdditionalParams',
        'listening_port' => 'setListeningPort',
        'remote_port' => 'setRemotePort',
        'show_status_window' => 'setShowStatusWindow',
        'description' => 'setDescription',
        'server_layout' => 'setServerLayout',
        'security' => 'setSecurity',
        'preconnection_id' => 'setPreconnectionId',
        'preconnection_blob' => 'setPreconnectionBlob',
        'load_balancing_info' => 'setLoadBalancingInfo',
        'port' => 'setPort',
        'logon_user' => 'setLogonUser',
        'logon_password' => 'setLogonPassword',
        'sso' => 'setSso',
        'form_data' => 'setFormData',
        'sso_credential' => 'setSsoCredential',
        'sso_username' => 'setSsoUsername',
        'sso_password' => 'setSsoPassword',
        'sso_credential_sent_once' => 'setSsoCredentialSentOnce'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'apptype' => 'getApptype',
        'url' => 'getUrl',
        'host' => 'getHost',
        'folder' => 'getFolder',
        'domain' => 'getDomain',
        'additional_params' => 'getAdditionalParams',
        'listening_port' => 'getListeningPort',
        'remote_port' => 'getRemotePort',
        'show_status_window' => 'getShowStatusWindow',
        'description' => 'getDescription',
        'server_layout' => 'getServerLayout',
        'security' => 'getSecurity',
        'preconnection_id' => 'getPreconnectionId',
        'preconnection_blob' => 'getPreconnectionBlob',
        'load_balancing_info' => 'getLoadBalancingInfo',
        'port' => 'getPort',
        'logon_user' => 'getLogonUser',
        'logon_password' => 'getLogonPassword',
        'sso' => 'getSso',
        'form_data' => 'getFormData',
        'sso_credential' => 'getSsoCredential',
        'sso_username' => 'getSsoUsername',
        'sso_password' => 'getSsoPassword',
        'sso_credential_sent_once' => 'getSsoCredentialSentOnce'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const APPTYPE_FTP = 'ftp';
    const APPTYPE_RDP = 'rdp';
    const APPTYPE_SFTP = 'sftp';
    const APPTYPE_SMB = 'smb';
    const APPTYPE_SSH = 'ssh';
    const APPTYPE_TELNET = 'telnet';
    const APPTYPE_VNC = 'vnc';
    const APPTYPE_WEB = 'web';
    const SHOW_STATUS_WINDOW_ENABLE = 'enable';
    const SHOW_STATUS_WINDOW_DISABLE = 'disable';
    const SERVER_LAYOUT_DE_DE_QWERTZ = 'de-de-qwertz';
    const SERVER_LAYOUT_EN_GB_QWERTY = 'en-gb-qwerty';
    const SERVER_LAYOUT_EN_US_QWERTY = 'en-us-qwerty';
    const SERVER_LAYOUT_ES_ES_QWERTY = 'es-es-qwerty';
    const SERVER_LAYOUT_FR_CA_QWERTY = 'fr-ca-qwerty';
    const SERVER_LAYOUT_FR_FR_AZERTY = 'fr-fr-azerty';
    const SERVER_LAYOUT_FR_CH_QWERTZ = 'fr-ch-qwertz';
    const SERVER_LAYOUT_IT_IT_QWERTY = 'it-it-qwerty';
    const SERVER_LAYOUT_JA_JP_QWERTY = 'ja-jp-qwerty';
    const SERVER_LAYOUT_PT_BR_QWERTY = 'pt-br-qwerty';
    const SERVER_LAYOUT_SV_SE_QWERTY = 'sv-se-qwerty';
    const SERVER_LAYOUT_TR_TR_QWERTY = 'tr-tr-qwerty';
    const SERVER_LAYOUT_FAILSAFE = 'failsafe';
    const SECURITY_RDP = 'rdp';
    const SECURITY_NLA = 'nla';
    const SECURITY_TLS = 'tls';
    const SECURITY_ANY = 'any';
    const SSO_DISABLE = 'disable';
    const SSO__STATIC = 'static';
    const SSO_AUTO = 'auto';
    const SSO_CREDENTIAL_SSLVPN_LOGIN = 'sslvpn-login';
    const SSO_CREDENTIAL_ALTERNATIVE = 'alternative';
    const SSO_CREDENTIAL_SENT_ONCE_ENABLE = 'enable';
    const SSO_CREDENTIAL_SENT_ONCE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApptypeAllowableValues()
    {
        return [
            self::APPTYPE_FTP,
            self::APPTYPE_RDP,
            self::APPTYPE_SFTP,
            self::APPTYPE_SMB,
            self::APPTYPE_SSH,
            self::APPTYPE_TELNET,
            self::APPTYPE_VNC,
            self::APPTYPE_WEB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShowStatusWindowAllowableValues()
    {
        return [
            self::SHOW_STATUS_WINDOW_ENABLE,
            self::SHOW_STATUS_WINDOW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerLayoutAllowableValues()
    {
        return [
            self::SERVER_LAYOUT_DE_DE_QWERTZ,
            self::SERVER_LAYOUT_EN_GB_QWERTY,
            self::SERVER_LAYOUT_EN_US_QWERTY,
            self::SERVER_LAYOUT_ES_ES_QWERTY,
            self::SERVER_LAYOUT_FR_CA_QWERTY,
            self::SERVER_LAYOUT_FR_FR_AZERTY,
            self::SERVER_LAYOUT_FR_CH_QWERTZ,
            self::SERVER_LAYOUT_IT_IT_QWERTY,
            self::SERVER_LAYOUT_JA_JP_QWERTY,
            self::SERVER_LAYOUT_PT_BR_QWERTY,
            self::SERVER_LAYOUT_SV_SE_QWERTY,
            self::SERVER_LAYOUT_TR_TR_QWERTY,
            self::SERVER_LAYOUT_FAILSAFE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityAllowableValues()
    {
        return [
            self::SECURITY_RDP,
            self::SECURITY_NLA,
            self::SECURITY_TLS,
            self::SECURITY_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoAllowableValues()
    {
        return [
            self::SSO_DISABLE,
            self::SSO__STATIC,
            self::SSO_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoCredentialAllowableValues()
    {
        return [
            self::SSO_CREDENTIAL_SSLVPN_LOGIN,
            self::SSO_CREDENTIAL_ALTERNATIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoCredentialSentOnceAllowableValues()
    {
        return [
            self::SSO_CREDENTIAL_SENT_ONCE_ENABLE,
            self::SSO_CREDENTIAL_SENT_ONCE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['apptype'] = $data['apptype'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['folder'] = $data['folder'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['additional_params'] = $data['additional_params'] ?? null;
        $this->container['listening_port'] = $data['listening_port'] ?? null;
        $this->container['remote_port'] = $data['remote_port'] ?? null;
        $this->container['show_status_window'] = $data['show_status_window'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['server_layout'] = $data['server_layout'] ?? null;
        $this->container['security'] = $data['security'] ?? null;
        $this->container['preconnection_id'] = $data['preconnection_id'] ?? null;
        $this->container['preconnection_blob'] = $data['preconnection_blob'] ?? null;
        $this->container['load_balancing_info'] = $data['load_balancing_info'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['logon_user'] = $data['logon_user'] ?? null;
        $this->container['logon_password'] = $data['logon_password'] ?? null;
        $this->container['sso'] = $data['sso'] ?? null;
        $this->container['form_data'] = $data['form_data'] ?? null;
        $this->container['sso_credential'] = $data['sso_credential'] ?? null;
        $this->container['sso_username'] = $data['sso_username'] ?? null;
        $this->container['sso_password'] = $data['sso_password'] ?? null;
        $this->container['sso_credential_sent_once'] = $data['sso_credential_sent_once'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getApptypeAllowableValues();
        if (!is_null($this->container['apptype']) && !in_array($this->container['apptype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'apptype', must be one of '%s'",
                $this->container['apptype'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 128)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['host']) && (mb_strlen($this->container['host']) > 128)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['folder']) && (mb_strlen($this->container['folder']) > 128)) {
            $invalidProperties[] = "invalid value for 'folder', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 128)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['additional_params']) && (mb_strlen($this->container['additional_params']) > 128)) {
            $invalidProperties[] = "invalid value for 'additional_params', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['listening_port']) && ($this->container['listening_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'listening_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['listening_port']) && ($this->container['listening_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'listening_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['remote_port']) && ($this->container['remote_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'remote_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['remote_port']) && ($this->container['remote_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'remote_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShowStatusWindowAllowableValues();
        if (!is_null($this->container['show_status_window']) && !in_array($this->container['show_status_window'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'show_status_window', must be one of '%s'",
                $this->container['show_status_window'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 128)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 128.";
        }

        $allowedValues = $this->getServerLayoutAllowableValues();
        if (!is_null($this->container['server_layout']) && !in_array($this->container['server_layout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_layout', must be one of '%s'",
                $this->container['server_layout'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($this->container['security']) && !in_array($this->container['security'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security', must be one of '%s'",
                $this->container['security'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['preconnection_id']) && ($this->container['preconnection_id'] > 2147483648)) {
            $invalidProperties[] = "invalid value for 'preconnection_id', must be smaller than or equal to 2147483648.";
        }

        if (!is_null($this->container['preconnection_id']) && ($this->container['preconnection_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'preconnection_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['preconnection_blob']) && (mb_strlen($this->container['preconnection_blob']) > 511)) {
            $invalidProperties[] = "invalid value for 'preconnection_blob', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['load_balancing_info']) && (mb_strlen($this->container['load_balancing_info']) > 511)) {
            $invalidProperties[] = "invalid value for 'load_balancing_info', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['logon_user']) && (mb_strlen($this->container['logon_user']) > 35)) {
            $invalidProperties[] = "invalid value for 'logon_user', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSsoAllowableValues();
        if (!is_null($this->container['sso']) && !in_array($this->container['sso'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso', must be one of '%s'",
                $this->container['sso'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['form_data']) && (count($this->container['form_data']) > 10)) {
            $invalidProperties[] = "invalid value for 'form_data', number of items must be less than or equal to 10.";
        }

        $allowedValues = $this->getSsoCredentialAllowableValues();
        if (!is_null($this->container['sso_credential']) && !in_array($this->container['sso_credential'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso_credential', must be one of '%s'",
                $this->container['sso_credential'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sso_username']) && (mb_strlen($this->container['sso_username']) > 35)) {
            $invalidProperties[] = "invalid value for 'sso_username', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSsoCredentialSentOnceAllowableValues();
        if (!is_null($this->container['sso_credential_sent_once']) && !in_array($this->container['sso_credential_sent_once'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso_credential_sent_once', must be one of '%s'",
                $this->container['sso_credential_sent_once'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Bookmark name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets apptype
     *
     * @return string|null
     */
    public function getApptype()
    {
        return $this->container['apptype'];
    }

    /**
     * Sets apptype
     *
     * @param string|null $apptype Application type.    ftp:FTP.    rdp:RDP.    sftp:SFTP.    smb:SMB/CIFS.    ssh:SSH.    telnet:Telnet.    vnc:VNC.    web:HTTP/HTTPS.
     *
     * @return self
     */
    public function setApptype($apptype)
    {
        $allowedValues = $this->getApptypeAllowableValues();
        if (!is_null($apptype) && !in_array($apptype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'apptype', must be one of '%s'",
                    $apptype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['apptype'] = $apptype;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL parameter.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 128)) {
            throw new \InvalidArgumentException('invalid length for $url when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Host name/IP parameter.
     *
     * @return self
     */
    public function setHost($host)
    {
        if (!is_null($host) && (mb_strlen($host) > 128)) {
            throw new \InvalidArgumentException('invalid length for $host when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets folder
     *
     * @return string|null
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     *
     * @param string|null $folder Network shared file folder parameter.
     *
     * @return self
     */
    public function setFolder($folder)
    {
        if (!is_null($folder) && (mb_strlen($folder) > 128)) {
            throw new \InvalidArgumentException('invalid length for $folder when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Login domain.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 128)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets additional_params
     *
     * @return string|null
     */
    public function getAdditionalParams()
    {
        return $this->container['additional_params'];
    }

    /**
     * Sets additional_params
     *
     * @param string|null $additional_params Additional parameters.
     *
     * @return self
     */
    public function setAdditionalParams($additional_params)
    {
        if (!is_null($additional_params) && (mb_strlen($additional_params) > 128)) {
            throw new \InvalidArgumentException('invalid length for $additional_params when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['additional_params'] = $additional_params;

        return $this;
    }

    /**
     * Gets listening_port
     *
     * @return int|null
     */
    public function getListeningPort()
    {
        return $this->container['listening_port'];
    }

    /**
     * Sets listening_port
     *
     * @param int|null $listening_port Listening port (0 - 65535).
     *
     * @return self
     */
    public function setListeningPort($listening_port)
    {

        if (!is_null($listening_port) && ($listening_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $listening_port when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 65535.');
        }
        if (!is_null($listening_port) && ($listening_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $listening_port when calling VpnSslWebUserBookmarkNameBookmarks., must be bigger than or equal to 0.');
        }

        $this->container['listening_port'] = $listening_port;

        return $this;
    }

    /**
     * Gets remote_port
     *
     * @return int|null
     */
    public function getRemotePort()
    {
        return $this->container['remote_port'];
    }

    /**
     * Sets remote_port
     *
     * @param int|null $remote_port Remote port (0 - 65535).
     *
     * @return self
     */
    public function setRemotePort($remote_port)
    {

        if (!is_null($remote_port) && ($remote_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $remote_port when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 65535.');
        }
        if (!is_null($remote_port) && ($remote_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $remote_port when calling VpnSslWebUserBookmarkNameBookmarks., must be bigger than or equal to 0.');
        }

        $this->container['remote_port'] = $remote_port;

        return $this;
    }

    /**
     * Gets show_status_window
     *
     * @return string|null
     */
    public function getShowStatusWindow()
    {
        return $this->container['show_status_window'];
    }

    /**
     * Sets show_status_window
     *
     * @param string|null $show_status_window Enable/disable showing of status window.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setShowStatusWindow($show_status_window)
    {
        $allowedValues = $this->getShowStatusWindowAllowableValues();
        if (!is_null($show_status_window) && !in_array($show_status_window, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'show_status_window', must be one of '%s'",
                    $show_status_window,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['show_status_window'] = $show_status_window;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 128)) {
            throw new \InvalidArgumentException('invalid length for $description when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 128.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets server_layout
     *
     * @return string|null
     */
    public function getServerLayout()
    {
        return $this->container['server_layout'];
    }

    /**
     * Sets server_layout
     *
     * @param string|null $server_layout Server side keyboard layout.    de-de-qwertz:German (qwertz).    en-gb-qwerty:Engligh (UK).    en-us-qwerty:English (US).    es-es-qwerty:Spanish.    fr-ca-qwerty:Canadian French (qwerty).    fr-fr-azerty:French (azerty).    fr-ch-qwertz:Swiss French (qwertz).    it-it-qwerty:Italian.    ja-jp-qwerty:Japanese.    pt-br-qwerty:Portuguese/Brazilian.    sv-se-qwerty:Swedish.    tr-tr-qwerty:Turkish.    failsafe:Unknown keyboard.
     *
     * @return self
     */
    public function setServerLayout($server_layout)
    {
        $allowedValues = $this->getServerLayoutAllowableValues();
        if (!is_null($server_layout) && !in_array($server_layout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_layout', must be one of '%s'",
                    $server_layout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_layout'] = $server_layout;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string|null $security Security mode for RDP connection.    rdp:Standard RDP encryption.    nla:Network Level Authentication.    tls:TLS encryption.    any:Allow the server to choose the type of security.
     *
     * @return self
     */
    public function setSecurity($security)
    {
        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($security) && !in_array($security, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security', must be one of '%s'",
                    $security,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets preconnection_id
     *
     * @return int|null
     */
    public function getPreconnectionId()
    {
        return $this->container['preconnection_id'];
    }

    /**
     * Sets preconnection_id
     *
     * @param int|null $preconnection_id The numeric ID of the RDP source (0-2147483648).
     *
     * @return self
     */
    public function setPreconnectionId($preconnection_id)
    {

        if (!is_null($preconnection_id) && ($preconnection_id > 2147483648)) {
            throw new \InvalidArgumentException('invalid value for $preconnection_id when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 2147483648.');
        }
        if (!is_null($preconnection_id) && ($preconnection_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $preconnection_id when calling VpnSslWebUserBookmarkNameBookmarks., must be bigger than or equal to 0.');
        }

        $this->container['preconnection_id'] = $preconnection_id;

        return $this;
    }

    /**
     * Gets preconnection_blob
     *
     * @return string|null
     */
    public function getPreconnectionBlob()
    {
        return $this->container['preconnection_blob'];
    }

    /**
     * Sets preconnection_blob
     *
     * @param string|null $preconnection_blob An arbitrary string which identifies the RDP source.
     *
     * @return self
     */
    public function setPreconnectionBlob($preconnection_blob)
    {
        if (!is_null($preconnection_blob) && (mb_strlen($preconnection_blob) > 511)) {
            throw new \InvalidArgumentException('invalid length for $preconnection_blob when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 511.');
        }

        $this->container['preconnection_blob'] = $preconnection_blob;

        return $this;
    }

    /**
     * Gets load_balancing_info
     *
     * @return string|null
     */
    public function getLoadBalancingInfo()
    {
        return $this->container['load_balancing_info'];
    }

    /**
     * Sets load_balancing_info
     *
     * @param string|null $load_balancing_info The load balancing information or cookie which should be provided to the connection broker.
     *
     * @return self
     */
    public function setLoadBalancingInfo($load_balancing_info)
    {
        if (!is_null($load_balancing_info) && (mb_strlen($load_balancing_info) > 511)) {
            throw new \InvalidArgumentException('invalid length for $load_balancing_info when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 511.');
        }

        $this->container['load_balancing_info'] = $load_balancing_info;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Remote port.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling VpnSslWebUserBookmarkNameBookmarks., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets logon_user
     *
     * @return string|null
     */
    public function getLogonUser()
    {
        return $this->container['logon_user'];
    }

    /**
     * Sets logon_user
     *
     * @param string|null $logon_user Logon user.
     *
     * @return self
     */
    public function setLogonUser($logon_user)
    {
        if (!is_null($logon_user) && (mb_strlen($logon_user) > 35)) {
            throw new \InvalidArgumentException('invalid length for $logon_user when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 35.');
        }

        $this->container['logon_user'] = $logon_user;

        return $this;
    }

    /**
     * Gets logon_password
     *
     * @return string|null
     */
    public function getLogonPassword()
    {
        return $this->container['logon_password'];
    }

    /**
     * Sets logon_password
     *
     * @param string|null $logon_password Logon password.
     *
     * @return self
     */
    public function setLogonPassword($logon_password)
    {
        $this->container['logon_password'] = $logon_password;

        return $this;
    }

    /**
     * Gets sso
     *
     * @return string|null
     */
    public function getSso()
    {
        return $this->container['sso'];
    }

    /**
     * Sets sso
     *
     * @param string|null $sso Single Sign-On.    disable:Disable SSO.    static:Static SSO.    auto:Auto SSO.
     *
     * @return self
     */
    public function setSso($sso)
    {
        $allowedValues = $this->getSsoAllowableValues();
        if (!is_null($sso) && !in_array($sso, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso', must be one of '%s'",
                    $sso,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso'] = $sso;

        return $this;
    }

    /**
     * Gets form_data
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameFormData[]|null
     */
    public function getFormData()
    {
        return $this->container['form_data'];
    }

    /**
     * Sets form_data
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameFormData[]|null $form_data Form data.
     *
     * @return self
     */
    public function setFormData($form_data)
    {

        if (!is_null($form_data) && (count($form_data) > 10)) {
            throw new \InvalidArgumentException('invalid value for $form_data when calling VpnSslWebUserBookmarkNameBookmarks., number of items must be less than or equal to 10.');
        }
        $this->container['form_data'] = $form_data;

        return $this;
    }

    /**
     * Gets sso_credential
     *
     * @return string|null
     */
    public function getSsoCredential()
    {
        return $this->container['sso_credential'];
    }

    /**
     * Sets sso_credential
     *
     * @param string|null $sso_credential Single sign-on credentials.    sslvpn-login:SSL-VPN login.    alternative:Alternative.
     *
     * @return self
     */
    public function setSsoCredential($sso_credential)
    {
        $allowedValues = $this->getSsoCredentialAllowableValues();
        if (!is_null($sso_credential) && !in_array($sso_credential, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso_credential', must be one of '%s'",
                    $sso_credential,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso_credential'] = $sso_credential;

        return $this;
    }

    /**
     * Gets sso_username
     *
     * @return string|null
     */
    public function getSsoUsername()
    {
        return $this->container['sso_username'];
    }

    /**
     * Sets sso_username
     *
     * @param string|null $sso_username SSO user name.
     *
     * @return self
     */
    public function setSsoUsername($sso_username)
    {
        if (!is_null($sso_username) && (mb_strlen($sso_username) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sso_username when calling VpnSslWebUserBookmarkNameBookmarks., must be smaller than or equal to 35.');
        }

        $this->container['sso_username'] = $sso_username;

        return $this;
    }

    /**
     * Gets sso_password
     *
     * @return string|null
     */
    public function getSsoPassword()
    {
        return $this->container['sso_password'];
    }

    /**
     * Sets sso_password
     *
     * @param string|null $sso_password SSO password.
     *
     * @return self
     */
    public function setSsoPassword($sso_password)
    {
        $this->container['sso_password'] = $sso_password;

        return $this;
    }

    /**
     * Gets sso_credential_sent_once
     *
     * @return string|null
     */
    public function getSsoCredentialSentOnce()
    {
        return $this->container['sso_credential_sent_once'];
    }

    /**
     * Sets sso_credential_sent_once
     *
     * @param string|null $sso_credential_sent_once Single sign-on credentials are only sent once to remote server.    enable:Single sign-on credentials are only sent once to remote server.    disable:Single sign-on credentials are sent to remote server for every HTTP request.
     *
     * @return self
     */
    public function setSsoCredentialSentOnce($sso_credential_sent_once)
    {
        $allowedValues = $this->getSsoCredentialSentOnceAllowableValues();
        if (!is_null($sso_credential_sent_once) && !in_array($sso_credential_sent_once, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso_credential_sent_once', must be one of '%s'",
                    $sso_credential_sent_once,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso_credential_sent_once'] = $sso_credential_sent_once;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


