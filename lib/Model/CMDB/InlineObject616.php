<?php
/**
 * InlineObject616
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject616 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject616 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_616';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'wtp_id' => 'string',
        'index' => 'int',
        'uuid' => 'string',
        'admin' => 'string',
        'name' => 'string',
        'location' => 'string',
        'region' => 'string',
        'region_x' => 'string',
        'region_y' => 'string',
        'firmware_provision' => 'string',
        'wtp_profile' => 'string',
        'apcfg_profile' => 'string',
        'bonjour_profile' => 'string',
        'override_led_state' => 'string',
        'led_state' => 'string',
        'override_wan_port_mode' => 'string',
        'wan_port_mode' => 'string',
        'override_ip_fragment' => 'string',
        'ip_fragment_preventing' => 'string',
        'tun_mtu_uplink' => 'int',
        'tun_mtu_downlink' => 'int',
        'override_split_tunnel' => 'string',
        'split_tunneling_acl_path' => 'string',
        'split_tunneling_acl_local_ap_subnet' => 'string',
        'split_tunneling_acl' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]',
        'override_lan' => 'string',
        'lan' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]',
        'override_allowaccess' => 'string',
        'allowaccess' => 'string',
        'override_login_passwd_change' => 'string',
        'login_passwd_change' => 'string',
        'login_passwd' => 'string',
        'radio_1' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio1[]',
        'radio_2' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio2[]',
        'radio_3' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio3[]',
        'radio_4' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio4[]',
        'image_download' => 'string',
        'mesh_bridge_enable' => 'string',
        'coordinate_latitude' => 'string',
        'coordinate_longitude' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'wtp_id' => null,
        'index' => null,
        'uuid' => 'uuid',
        'admin' => null,
        'name' => null,
        'location' => null,
        'region' => null,
        'region_x' => null,
        'region_y' => null,
        'firmware_provision' => null,
        'wtp_profile' => null,
        'apcfg_profile' => null,
        'bonjour_profile' => null,
        'override_led_state' => null,
        'led_state' => null,
        'override_wan_port_mode' => null,
        'wan_port_mode' => null,
        'override_ip_fragment' => null,
        'ip_fragment_preventing' => null,
        'tun_mtu_uplink' => null,
        'tun_mtu_downlink' => null,
        'override_split_tunnel' => null,
        'split_tunneling_acl_path' => null,
        'split_tunneling_acl_local_ap_subnet' => null,
        'split_tunneling_acl' => null,
        'override_lan' => null,
        'lan' => null,
        'override_allowaccess' => null,
        'allowaccess' => null,
        'override_login_passwd_change' => null,
        'login_passwd_change' => null,
        'login_passwd' => 'password',
        'radio_1' => null,
        'radio_2' => null,
        'radio_3' => null,
        'radio_4' => null,
        'image_download' => null,
        'mesh_bridge_enable' => null,
        'coordinate_latitude' => null,
        'coordinate_longitude' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wtp_id' => 'wtp-id',
        'index' => 'index',
        'uuid' => 'uuid',
        'admin' => 'admin',
        'name' => 'name',
        'location' => 'location',
        'region' => 'region',
        'region_x' => 'region-x',
        'region_y' => 'region-y',
        'firmware_provision' => 'firmware-provision',
        'wtp_profile' => 'wtp-profile',
        'apcfg_profile' => 'apcfg-profile',
        'bonjour_profile' => 'bonjour-profile',
        'override_led_state' => 'override-led-state',
        'led_state' => 'led-state',
        'override_wan_port_mode' => 'override-wan-port-mode',
        'wan_port_mode' => 'wan-port-mode',
        'override_ip_fragment' => 'override-ip-fragment',
        'ip_fragment_preventing' => 'ip-fragment-preventing',
        'tun_mtu_uplink' => 'tun-mtu-uplink',
        'tun_mtu_downlink' => 'tun-mtu-downlink',
        'override_split_tunnel' => 'override-split-tunnel',
        'split_tunneling_acl_path' => 'split-tunneling-acl-path',
        'split_tunneling_acl_local_ap_subnet' => 'split-tunneling-acl-local-ap-subnet',
        'split_tunneling_acl' => 'split-tunneling-acl',
        'override_lan' => 'override-lan',
        'lan' => 'lan',
        'override_allowaccess' => 'override-allowaccess',
        'allowaccess' => 'allowaccess',
        'override_login_passwd_change' => 'override-login-passwd-change',
        'login_passwd_change' => 'login-passwd-change',
        'login_passwd' => 'login-passwd',
        'radio_1' => 'radio-1',
        'radio_2' => 'radio-2',
        'radio_3' => 'radio-3',
        'radio_4' => 'radio-4',
        'image_download' => 'image-download',
        'mesh_bridge_enable' => 'mesh-bridge-enable',
        'coordinate_latitude' => 'coordinate-latitude',
        'coordinate_longitude' => 'coordinate-longitude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wtp_id' => 'setWtpId',
        'index' => 'setIndex',
        'uuid' => 'setUuid',
        'admin' => 'setAdmin',
        'name' => 'setName',
        'location' => 'setLocation',
        'region' => 'setRegion',
        'region_x' => 'setRegionX',
        'region_y' => 'setRegionY',
        'firmware_provision' => 'setFirmwareProvision',
        'wtp_profile' => 'setWtpProfile',
        'apcfg_profile' => 'setApcfgProfile',
        'bonjour_profile' => 'setBonjourProfile',
        'override_led_state' => 'setOverrideLedState',
        'led_state' => 'setLedState',
        'override_wan_port_mode' => 'setOverrideWanPortMode',
        'wan_port_mode' => 'setWanPortMode',
        'override_ip_fragment' => 'setOverrideIpFragment',
        'ip_fragment_preventing' => 'setIpFragmentPreventing',
        'tun_mtu_uplink' => 'setTunMtuUplink',
        'tun_mtu_downlink' => 'setTunMtuDownlink',
        'override_split_tunnel' => 'setOverrideSplitTunnel',
        'split_tunneling_acl_path' => 'setSplitTunnelingAclPath',
        'split_tunneling_acl_local_ap_subnet' => 'setSplitTunnelingAclLocalApSubnet',
        'split_tunneling_acl' => 'setSplitTunnelingAcl',
        'override_lan' => 'setOverrideLan',
        'lan' => 'setLan',
        'override_allowaccess' => 'setOverrideAllowaccess',
        'allowaccess' => 'setAllowaccess',
        'override_login_passwd_change' => 'setOverrideLoginPasswdChange',
        'login_passwd_change' => 'setLoginPasswdChange',
        'login_passwd' => 'setLoginPasswd',
        'radio_1' => 'setRadio1',
        'radio_2' => 'setRadio2',
        'radio_3' => 'setRadio3',
        'radio_4' => 'setRadio4',
        'image_download' => 'setImageDownload',
        'mesh_bridge_enable' => 'setMeshBridgeEnable',
        'coordinate_latitude' => 'setCoordinateLatitude',
        'coordinate_longitude' => 'setCoordinateLongitude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wtp_id' => 'getWtpId',
        'index' => 'getIndex',
        'uuid' => 'getUuid',
        'admin' => 'getAdmin',
        'name' => 'getName',
        'location' => 'getLocation',
        'region' => 'getRegion',
        'region_x' => 'getRegionX',
        'region_y' => 'getRegionY',
        'firmware_provision' => 'getFirmwareProvision',
        'wtp_profile' => 'getWtpProfile',
        'apcfg_profile' => 'getApcfgProfile',
        'bonjour_profile' => 'getBonjourProfile',
        'override_led_state' => 'getOverrideLedState',
        'led_state' => 'getLedState',
        'override_wan_port_mode' => 'getOverrideWanPortMode',
        'wan_port_mode' => 'getWanPortMode',
        'override_ip_fragment' => 'getOverrideIpFragment',
        'ip_fragment_preventing' => 'getIpFragmentPreventing',
        'tun_mtu_uplink' => 'getTunMtuUplink',
        'tun_mtu_downlink' => 'getTunMtuDownlink',
        'override_split_tunnel' => 'getOverrideSplitTunnel',
        'split_tunneling_acl_path' => 'getSplitTunnelingAclPath',
        'split_tunneling_acl_local_ap_subnet' => 'getSplitTunnelingAclLocalApSubnet',
        'split_tunneling_acl' => 'getSplitTunnelingAcl',
        'override_lan' => 'getOverrideLan',
        'lan' => 'getLan',
        'override_allowaccess' => 'getOverrideAllowaccess',
        'allowaccess' => 'getAllowaccess',
        'override_login_passwd_change' => 'getOverrideLoginPasswdChange',
        'login_passwd_change' => 'getLoginPasswdChange',
        'login_passwd' => 'getLoginPasswd',
        'radio_1' => 'getRadio1',
        'radio_2' => 'getRadio2',
        'radio_3' => 'getRadio3',
        'radio_4' => 'getRadio4',
        'image_download' => 'getImageDownload',
        'mesh_bridge_enable' => 'getMeshBridgeEnable',
        'coordinate_latitude' => 'getCoordinateLatitude',
        'coordinate_longitude' => 'getCoordinateLongitude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADMIN_DISCOVERED = 'discovered';
    const ADMIN_DISABLE = 'disable';
    const ADMIN_ENABLE = 'enable';
    const OVERRIDE_LED_STATE_ENABLE = 'enable';
    const OVERRIDE_LED_STATE_DISABLE = 'disable';
    const LED_STATE_ENABLE = 'enable';
    const LED_STATE_DISABLE = 'disable';
    const OVERRIDE_WAN_PORT_MODE_ENABLE = 'enable';
    const OVERRIDE_WAN_PORT_MODE_DISABLE = 'disable';
    const WAN_PORT_MODE_LAN = 'wan-lan';
    const WAN_PORT_MODE_ONLY = 'wan-only';
    const OVERRIDE_IP_FRAGMENT_ENABLE = 'enable';
    const OVERRIDE_IP_FRAGMENT_DISABLE = 'disable';
    const IP_FRAGMENT_PREVENTING_TCP_MSS_ADJUST = 'tcp-mss-adjust';
    const IP_FRAGMENT_PREVENTING_ICMP_UNREACHABLE = 'icmp-unreachable';
    const OVERRIDE_SPLIT_TUNNEL_ENABLE = 'enable';
    const OVERRIDE_SPLIT_TUNNEL_DISABLE = 'disable';
    const SPLIT_TUNNELING_ACL_PATH_TUNNEL = 'tunnel';
    const SPLIT_TUNNELING_ACL_PATH_LOCAL = 'local';
    const SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_ENABLE = 'enable';
    const SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_DISABLE = 'disable';
    const OVERRIDE_LAN_ENABLE = 'enable';
    const OVERRIDE_LAN_DISABLE = 'disable';
    const OVERRIDE_ALLOWACCESS_ENABLE = 'enable';
    const OVERRIDE_ALLOWACCESS_DISABLE = 'disable';
    const ALLOWACCESS_HTTPS = 'https';
    const ALLOWACCESS_SSH = 'ssh';
    const ALLOWACCESS_SNMP = 'snmp';
    const OVERRIDE_LOGIN_PASSWD_CHANGE_ENABLE = 'enable';
    const OVERRIDE_LOGIN_PASSWD_CHANGE_DISABLE = 'disable';
    const LOGIN_PASSWD_CHANGE_YES = 'yes';
    const LOGIN_PASSWD_CHANGE__DEFAULT = 'default';
    const LOGIN_PASSWD_CHANGE_NO = 'no';
    const IMAGE_DOWNLOAD_ENABLE = 'enable';
    const IMAGE_DOWNLOAD_DISABLE = 'disable';
    const MESH_BRIDGE_ENABLE__DEFAULT = 'default';
    const MESH_BRIDGE_ENABLE_ENABLE = 'enable';
    const MESH_BRIDGE_ENABLE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminAllowableValues()
    {
        return [
            self::ADMIN_DISCOVERED,
            self::ADMIN_DISABLE,
            self::ADMIN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideLedStateAllowableValues()
    {
        return [
            self::OVERRIDE_LED_STATE_ENABLE,
            self::OVERRIDE_LED_STATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLedStateAllowableValues()
    {
        return [
            self::LED_STATE_ENABLE,
            self::LED_STATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideWanPortModeAllowableValues()
    {
        return [
            self::OVERRIDE_WAN_PORT_MODE_ENABLE,
            self::OVERRIDE_WAN_PORT_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWanPortModeAllowableValues()
    {
        return [
            self::WAN_PORT_MODE_LAN,
            self::WAN_PORT_MODE_ONLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideIpFragmentAllowableValues()
    {
        return [
            self::OVERRIDE_IP_FRAGMENT_ENABLE,
            self::OVERRIDE_IP_FRAGMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpFragmentPreventingAllowableValues()
    {
        return [
            self::IP_FRAGMENT_PREVENTING_TCP_MSS_ADJUST,
            self::IP_FRAGMENT_PREVENTING_ICMP_UNREACHABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideSplitTunnelAllowableValues()
    {
        return [
            self::OVERRIDE_SPLIT_TUNNEL_ENABLE,
            self::OVERRIDE_SPLIT_TUNNEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAclPathAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ACL_PATH_TUNNEL,
            self::SPLIT_TUNNELING_ACL_PATH_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAclLocalApSubnetAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_ENABLE,
            self::SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideLanAllowableValues()
    {
        return [
            self::OVERRIDE_LAN_ENABLE,
            self::OVERRIDE_LAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideAllowaccessAllowableValues()
    {
        return [
            self::OVERRIDE_ALLOWACCESS_ENABLE,
            self::OVERRIDE_ALLOWACCESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowaccessAllowableValues()
    {
        return [
            self::ALLOWACCESS_HTTPS,
            self::ALLOWACCESS_SSH,
            self::ALLOWACCESS_SNMP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideLoginPasswdChangeAllowableValues()
    {
        return [
            self::OVERRIDE_LOGIN_PASSWD_CHANGE_ENABLE,
            self::OVERRIDE_LOGIN_PASSWD_CHANGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoginPasswdChangeAllowableValues()
    {
        return [
            self::LOGIN_PASSWD_CHANGE_YES,
            self::LOGIN_PASSWD_CHANGE__DEFAULT,
            self::LOGIN_PASSWD_CHANGE_NO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageDownloadAllowableValues()
    {
        return [
            self::IMAGE_DOWNLOAD_ENABLE,
            self::IMAGE_DOWNLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeshBridgeEnableAllowableValues()
    {
        return [
            self::MESH_BRIDGE_ENABLE__DEFAULT,
            self::MESH_BRIDGE_ENABLE_ENABLE,
            self::MESH_BRIDGE_ENABLE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wtp_id'] = $data['wtp_id'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['region_x'] = $data['region_x'] ?? null;
        $this->container['region_y'] = $data['region_y'] ?? null;
        $this->container['firmware_provision'] = $data['firmware_provision'] ?? null;
        $this->container['wtp_profile'] = $data['wtp_profile'] ?? null;
        $this->container['apcfg_profile'] = $data['apcfg_profile'] ?? null;
        $this->container['bonjour_profile'] = $data['bonjour_profile'] ?? null;
        $this->container['override_led_state'] = $data['override_led_state'] ?? null;
        $this->container['led_state'] = $data['led_state'] ?? null;
        $this->container['override_wan_port_mode'] = $data['override_wan_port_mode'] ?? null;
        $this->container['wan_port_mode'] = $data['wan_port_mode'] ?? null;
        $this->container['override_ip_fragment'] = $data['override_ip_fragment'] ?? null;
        $this->container['ip_fragment_preventing'] = $data['ip_fragment_preventing'] ?? null;
        $this->container['tun_mtu_uplink'] = $data['tun_mtu_uplink'] ?? null;
        $this->container['tun_mtu_downlink'] = $data['tun_mtu_downlink'] ?? null;
        $this->container['override_split_tunnel'] = $data['override_split_tunnel'] ?? null;
        $this->container['split_tunneling_acl_path'] = $data['split_tunneling_acl_path'] ?? null;
        $this->container['split_tunneling_acl_local_ap_subnet'] = $data['split_tunneling_acl_local_ap_subnet'] ?? null;
        $this->container['split_tunneling_acl'] = $data['split_tunneling_acl'] ?? null;
        $this->container['override_lan'] = $data['override_lan'] ?? null;
        $this->container['lan'] = $data['lan'] ?? null;
        $this->container['override_allowaccess'] = $data['override_allowaccess'] ?? null;
        $this->container['allowaccess'] = $data['allowaccess'] ?? null;
        $this->container['override_login_passwd_change'] = $data['override_login_passwd_change'] ?? null;
        $this->container['login_passwd_change'] = $data['login_passwd_change'] ?? null;
        $this->container['login_passwd'] = $data['login_passwd'] ?? null;
        $this->container['radio_1'] = $data['radio_1'] ?? null;
        $this->container['radio_2'] = $data['radio_2'] ?? null;
        $this->container['radio_3'] = $data['radio_3'] ?? null;
        $this->container['radio_4'] = $data['radio_4'] ?? null;
        $this->container['image_download'] = $data['image_download'] ?? null;
        $this->container['mesh_bridge_enable'] = $data['mesh_bridge_enable'] ?? null;
        $this->container['coordinate_latitude'] = $data['coordinate_latitude'] ?? null;
        $this->container['coordinate_longitude'] = $data['coordinate_longitude'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['wtp_id']) && (mb_strlen($this->container['wtp_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'wtp_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['index']) && ($this->container['index'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'index', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['index']) && ($this->container['index'] < 0)) {
            $invalidProperties[] = "invalid value for 'index', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAdminAllowableValues();
        if (!is_null($this->container['admin']) && !in_array($this->container['admin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin', must be one of '%s'",
                $this->container['admin'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 35)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 35)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['region_x']) && (mb_strlen($this->container['region_x']) > 15)) {
            $invalidProperties[] = "invalid value for 'region_x', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['region_y']) && (mb_strlen($this->container['region_y']) > 15)) {
            $invalidProperties[] = "invalid value for 'region_y', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['firmware_provision']) && (mb_strlen($this->container['firmware_provision']) > 35)) {
            $invalidProperties[] = "invalid value for 'firmware_provision', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['wtp_profile']) && (mb_strlen($this->container['wtp_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'wtp_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['apcfg_profile']) && (mb_strlen($this->container['apcfg_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'apcfg_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['bonjour_profile']) && (mb_strlen($this->container['bonjour_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'bonjour_profile', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getOverrideLedStateAllowableValues();
        if (!is_null($this->container['override_led_state']) && !in_array($this->container['override_led_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_led_state', must be one of '%s'",
                $this->container['override_led_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLedStateAllowableValues();
        if (!is_null($this->container['led_state']) && !in_array($this->container['led_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'led_state', must be one of '%s'",
                $this->container['led_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverrideWanPortModeAllowableValues();
        if (!is_null($this->container['override_wan_port_mode']) && !in_array($this->container['override_wan_port_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_wan_port_mode', must be one of '%s'",
                $this->container['override_wan_port_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWanPortModeAllowableValues();
        if (!is_null($this->container['wan_port_mode']) && !in_array($this->container['wan_port_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wan_port_mode', must be one of '%s'",
                $this->container['wan_port_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverrideIpFragmentAllowableValues();
        if (!is_null($this->container['override_ip_fragment']) && !in_array($this->container['override_ip_fragment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_ip_fragment', must be one of '%s'",
                $this->container['override_ip_fragment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpFragmentPreventingAllowableValues();
        if (!is_null($this->container['ip_fragment_preventing']) && !in_array($this->container['ip_fragment_preventing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_fragment_preventing', must be one of '%s'",
                $this->container['ip_fragment_preventing'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tun_mtu_uplink']) && ($this->container['tun_mtu_uplink'] > 1500)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_uplink', must be smaller than or equal to 1500.";
        }

        if (!is_null($this->container['tun_mtu_uplink']) && ($this->container['tun_mtu_uplink'] < 576)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_uplink', must be bigger than or equal to 576.";
        }

        if (!is_null($this->container['tun_mtu_downlink']) && ($this->container['tun_mtu_downlink'] > 1500)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_downlink', must be smaller than or equal to 1500.";
        }

        if (!is_null($this->container['tun_mtu_downlink']) && ($this->container['tun_mtu_downlink'] < 576)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_downlink', must be bigger than or equal to 576.";
        }

        $allowedValues = $this->getOverrideSplitTunnelAllowableValues();
        if (!is_null($this->container['override_split_tunnel']) && !in_array($this->container['override_split_tunnel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_split_tunnel', must be one of '%s'",
                $this->container['override_split_tunnel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitTunnelingAclPathAllowableValues();
        if (!is_null($this->container['split_tunneling_acl_path']) && !in_array($this->container['split_tunneling_acl_path'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling_acl_path', must be one of '%s'",
                $this->container['split_tunneling_acl_path'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitTunnelingAclLocalApSubnetAllowableValues();
        if (!is_null($this->container['split_tunneling_acl_local_ap_subnet']) && !in_array($this->container['split_tunneling_acl_local_ap_subnet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling_acl_local_ap_subnet', must be one of '%s'",
                $this->container['split_tunneling_acl_local_ap_subnet'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['split_tunneling_acl']) && (count($this->container['split_tunneling_acl']) > 16)) {
            $invalidProperties[] = "invalid value for 'split_tunneling_acl', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getOverrideLanAllowableValues();
        if (!is_null($this->container['override_lan']) && !in_array($this->container['override_lan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_lan', must be one of '%s'",
                $this->container['override_lan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lan']) && (count($this->container['lan']) > 0)) {
            $invalidProperties[] = "invalid value for 'lan', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideAllowaccessAllowableValues();
        if (!is_null($this->container['override_allowaccess']) && !in_array($this->container['override_allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_allowaccess', must be one of '%s'",
                $this->container['override_allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($this->container['allowaccess']) && !in_array($this->container['allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowaccess', must be one of '%s'",
                $this->container['allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverrideLoginPasswdChangeAllowableValues();
        if (!is_null($this->container['override_login_passwd_change']) && !in_array($this->container['override_login_passwd_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_login_passwd_change', must be one of '%s'",
                $this->container['override_login_passwd_change'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoginPasswdChangeAllowableValues();
        if (!is_null($this->container['login_passwd_change']) && !in_array($this->container['login_passwd_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'login_passwd_change', must be one of '%s'",
                $this->container['login_passwd_change'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radio_1']) && (count($this->container['radio_1']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_1', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_2']) && (count($this->container['radio_2']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_2', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_3']) && (count($this->container['radio_3']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_3', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_4']) && (count($this->container['radio_4']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_4', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getImageDownloadAllowableValues();
        if (!is_null($this->container['image_download']) && !in_array($this->container['image_download'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'image_download', must be one of '%s'",
                $this->container['image_download'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMeshBridgeEnableAllowableValues();
        if (!is_null($this->container['mesh_bridge_enable']) && !in_array($this->container['mesh_bridge_enable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mesh_bridge_enable', must be one of '%s'",
                $this->container['mesh_bridge_enable'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['coordinate_latitude']) && (mb_strlen($this->container['coordinate_latitude']) > 19)) {
            $invalidProperties[] = "invalid value for 'coordinate_latitude', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['coordinate_longitude']) && (mb_strlen($this->container['coordinate_longitude']) > 19)) {
            $invalidProperties[] = "invalid value for 'coordinate_longitude', the character length must be smaller than or equal to 19.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wtp_id
     *
     * @return string|null
     */
    public function getWtpId()
    {
        return $this->container['wtp_id'];
    }

    /**
     * Sets wtp_id
     *
     * @param string|null $wtp_id WTP ID.
     *
     * @return self
     */
    public function setWtpId($wtp_id)
    {
        if (!is_null($wtp_id) && (mb_strlen($wtp_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $wtp_id when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['wtp_id'] = $wtp_id;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index Index (0 - 4294967295).
     *
     * @return self
     */
    public function setIndex($index)
    {

        if (!is_null($index) && ($index > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $index when calling InlineObject616., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($index) && ($index < 0)) {
            throw new \InvalidArgumentException('invalid value for $index when calling InlineObject616., must be bigger than or equal to 0.');
        }

        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return string|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param string|null $admin Configure how the FortiGate operating as a wireless controller discovers and manages this WTP, AP or FortiAP.    discovered:FortiGate wireless controller discovers the WTP, AP, or FortiAP though discovery or join request messages.    disable:FortiGate wireless controller is configured to not provide service to this WTP.    enable:FortiGate wireless controller is configured to provide service to this WTP.
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $allowedValues = $this->getAdminAllowableValues();
        if (!is_null($admin) && !in_array($admin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin', must be one of '%s'",
                    $admin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WTP, AP or FortiAP configuration name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Field for describing the physical location of the WTP, AP or FortiAP.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (mb_strlen($location) > 35)) {
            throw new \InvalidArgumentException('invalid length for $location when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region name WTP is associated with.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (!is_null($region) && (mb_strlen($region) > 35)) {
            throw new \InvalidArgumentException('invalid length for $region when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets region_x
     *
     * @return string|null
     */
    public function getRegionX()
    {
        return $this->container['region_x'];
    }

    /**
     * Sets region_x
     *
     * @param string|null $region_x Relative horizontal region coordinate (between 0 and 1).
     *
     * @return self
     */
    public function setRegionX($region_x)
    {
        if (!is_null($region_x) && (mb_strlen($region_x) > 15)) {
            throw new \InvalidArgumentException('invalid length for $region_x when calling InlineObject616., must be smaller than or equal to 15.');
        }

        $this->container['region_x'] = $region_x;

        return $this;
    }

    /**
     * Gets region_y
     *
     * @return string|null
     */
    public function getRegionY()
    {
        return $this->container['region_y'];
    }

    /**
     * Sets region_y
     *
     * @param string|null $region_y Relative vertical region coordinate (between 0 and 1).
     *
     * @return self
     */
    public function setRegionY($region_y)
    {
        if (!is_null($region_y) && (mb_strlen($region_y) > 15)) {
            throw new \InvalidArgumentException('invalid length for $region_y when calling InlineObject616., must be smaller than or equal to 15.');
        }

        $this->container['region_y'] = $region_y;

        return $this;
    }

    /**
     * Gets firmware_provision
     *
     * @return string|null
     */
    public function getFirmwareProvision()
    {
        return $this->container['firmware_provision'];
    }

    /**
     * Sets firmware_provision
     *
     * @param string|null $firmware_provision Firmware version to provision to this FortiAP on bootup (major.minor.build, i.e. 6.2.1234).
     *
     * @return self
     */
    public function setFirmwareProvision($firmware_provision)
    {
        if (!is_null($firmware_provision) && (mb_strlen($firmware_provision) > 35)) {
            throw new \InvalidArgumentException('invalid length for $firmware_provision when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['firmware_provision'] = $firmware_provision;

        return $this;
    }

    /**
     * Gets wtp_profile
     *
     * @return string|null
     */
    public function getWtpProfile()
    {
        return $this->container['wtp_profile'];
    }

    /**
     * Sets wtp_profile
     *
     * @param string|null $wtp_profile WTP profile name to apply to this WTP, AP or FortiAP.
     *
     * @return self
     */
    public function setWtpProfile($wtp_profile)
    {
        if (!is_null($wtp_profile) && (mb_strlen($wtp_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $wtp_profile when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['wtp_profile'] = $wtp_profile;

        return $this;
    }

    /**
     * Gets apcfg_profile
     *
     * @return string|null
     */
    public function getApcfgProfile()
    {
        return $this->container['apcfg_profile'];
    }

    /**
     * Sets apcfg_profile
     *
     * @param string|null $apcfg_profile AP local configuration profile name.
     *
     * @return self
     */
    public function setApcfgProfile($apcfg_profile)
    {
        if (!is_null($apcfg_profile) && (mb_strlen($apcfg_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $apcfg_profile when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['apcfg_profile'] = $apcfg_profile;

        return $this;
    }

    /**
     * Gets bonjour_profile
     *
     * @return string|null
     */
    public function getBonjourProfile()
    {
        return $this->container['bonjour_profile'];
    }

    /**
     * Sets bonjour_profile
     *
     * @param string|null $bonjour_profile Bonjour profile name.
     *
     * @return self
     */
    public function setBonjourProfile($bonjour_profile)
    {
        if (!is_null($bonjour_profile) && (mb_strlen($bonjour_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $bonjour_profile when calling InlineObject616., must be smaller than or equal to 35.');
        }

        $this->container['bonjour_profile'] = $bonjour_profile;

        return $this;
    }

    /**
     * Gets override_led_state
     *
     * @return string|null
     */
    public function getOverrideLedState()
    {
        return $this->container['override_led_state'];
    }

    /**
     * Sets override_led_state
     *
     * @param string|null $override_led_state Enable to override the profile LED state setting for this FortiAP. You must enable this option to use the led-state command to turn off the FortiAP's LEDs.    enable:Override the WTP profile LED state.    disable:Use the WTP profile LED state.
     *
     * @return self
     */
    public function setOverrideLedState($override_led_state)
    {
        $allowedValues = $this->getOverrideLedStateAllowableValues();
        if (!is_null($override_led_state) && !in_array($override_led_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_led_state', must be one of '%s'",
                    $override_led_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_led_state'] = $override_led_state;

        return $this;
    }

    /**
     * Gets led_state
     *
     * @return string|null
     */
    public function getLedState()
    {
        return $this->container['led_state'];
    }

    /**
     * Sets led_state
     *
     * @param string|null $led_state Enable to allow the FortiAPs LEDs to light. Disable to keep the LEDs off. You may want to keep the LEDs off so they are not distracting in low light areas etc.    enable:Allow the LEDs on this FortiAP to light.    disable:Keep the LEDs on this FortiAP off.
     *
     * @return self
     */
    public function setLedState($led_state)
    {
        $allowedValues = $this->getLedStateAllowableValues();
        if (!is_null($led_state) && !in_array($led_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'led_state', must be one of '%s'",
                    $led_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['led_state'] = $led_state;

        return $this;
    }

    /**
     * Gets override_wan_port_mode
     *
     * @return string|null
     */
    public function getOverrideWanPortMode()
    {
        return $this->container['override_wan_port_mode'];
    }

    /**
     * Sets override_wan_port_mode
     *
     * @param string|null $override_wan_port_mode Enable/disable overriding the wan-port-mode in the WTP profile.    enable:Override the WTP profile wan-port-mode.    disable:Use the wan-port-mode in the WTP profile.
     *
     * @return self
     */
    public function setOverrideWanPortMode($override_wan_port_mode)
    {
        $allowedValues = $this->getOverrideWanPortModeAllowableValues();
        if (!is_null($override_wan_port_mode) && !in_array($override_wan_port_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_wan_port_mode', must be one of '%s'",
                    $override_wan_port_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_wan_port_mode'] = $override_wan_port_mode;

        return $this;
    }

    /**
     * Gets wan_port_mode
     *
     * @return string|null
     */
    public function getWanPortMode()
    {
        return $this->container['wan_port_mode'];
    }

    /**
     * Sets wan_port_mode
     *
     * @param string|null $wan_port_mode Enable/disable using the FortiAP WAN port as a LAN port.    wan-lan:Use the FortiAP WAN port as a LAN port.    wan-only:Do not use the WAN port as a LAN port.
     *
     * @return self
     */
    public function setWanPortMode($wan_port_mode)
    {
        $allowedValues = $this->getWanPortModeAllowableValues();
        if (!is_null($wan_port_mode) && !in_array($wan_port_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wan_port_mode', must be one of '%s'",
                    $wan_port_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wan_port_mode'] = $wan_port_mode;

        return $this;
    }

    /**
     * Gets override_ip_fragment
     *
     * @return string|null
     */
    public function getOverrideIpFragment()
    {
        return $this->container['override_ip_fragment'];
    }

    /**
     * Sets override_ip_fragment
     *
     * @param string|null $override_ip_fragment Enable/disable overriding the WTP profile IP fragment prevention setting.    enable:Override the WTP profile IP fragment prevention setting.    disable:Use the WTP profile IP fragment prevention setting.
     *
     * @return self
     */
    public function setOverrideIpFragment($override_ip_fragment)
    {
        $allowedValues = $this->getOverrideIpFragmentAllowableValues();
        if (!is_null($override_ip_fragment) && !in_array($override_ip_fragment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_ip_fragment', must be one of '%s'",
                    $override_ip_fragment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_ip_fragment'] = $override_ip_fragment;

        return $this;
    }

    /**
     * Gets ip_fragment_preventing
     *
     * @return string|null
     */
    public function getIpFragmentPreventing()
    {
        return $this->container['ip_fragment_preventing'];
    }

    /**
     * Sets ip_fragment_preventing
     *
     * @param string|null $ip_fragment_preventing Method(s) by which IP fragmentation is prevented for control and data packets through CAPWAP tunnel (default = tcp-mss-adjust).    tcp-mss-adjust:TCP maximum segment size adjustment.    icmp-unreachable:Drop packet and send ICMP Destination Unreachable
     *
     * @return self
     */
    public function setIpFragmentPreventing($ip_fragment_preventing)
    {
        $allowedValues = $this->getIpFragmentPreventingAllowableValues();
        if (!is_null($ip_fragment_preventing) && !in_array($ip_fragment_preventing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_fragment_preventing', must be one of '%s'",
                    $ip_fragment_preventing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_fragment_preventing'] = $ip_fragment_preventing;

        return $this;
    }

    /**
     * Gets tun_mtu_uplink
     *
     * @return int|null
     */
    public function getTunMtuUplink()
    {
        return $this->container['tun_mtu_uplink'];
    }

    /**
     * Sets tun_mtu_uplink
     *
     * @param int|null $tun_mtu_uplink The maximum transmission unit (MTU) of uplink CAPWAP tunnel (576 - 1500 bytes or 0; 0 means the local MTU of FortiAP; default = 0).
     *
     * @return self
     */
    public function setTunMtuUplink($tun_mtu_uplink)
    {

        if (!is_null($tun_mtu_uplink) && ($tun_mtu_uplink > 1500)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_uplink when calling InlineObject616., must be smaller than or equal to 1500.');
        }
        if (!is_null($tun_mtu_uplink) && ($tun_mtu_uplink < 576)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_uplink when calling InlineObject616., must be bigger than or equal to 576.');
        }

        $this->container['tun_mtu_uplink'] = $tun_mtu_uplink;

        return $this;
    }

    /**
     * Gets tun_mtu_downlink
     *
     * @return int|null
     */
    public function getTunMtuDownlink()
    {
        return $this->container['tun_mtu_downlink'];
    }

    /**
     * Sets tun_mtu_downlink
     *
     * @param int|null $tun_mtu_downlink The MTU of downlink CAPWAP tunnel (576 - 1500 bytes or 0; 0 means the local MTU of FortiAP; default = 0).
     *
     * @return self
     */
    public function setTunMtuDownlink($tun_mtu_downlink)
    {

        if (!is_null($tun_mtu_downlink) && ($tun_mtu_downlink > 1500)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_downlink when calling InlineObject616., must be smaller than or equal to 1500.');
        }
        if (!is_null($tun_mtu_downlink) && ($tun_mtu_downlink < 576)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_downlink when calling InlineObject616., must be bigger than or equal to 576.');
        }

        $this->container['tun_mtu_downlink'] = $tun_mtu_downlink;

        return $this;
    }

    /**
     * Gets override_split_tunnel
     *
     * @return string|null
     */
    public function getOverrideSplitTunnel()
    {
        return $this->container['override_split_tunnel'];
    }

    /**
     * Sets override_split_tunnel
     *
     * @param string|null $override_split_tunnel Enable/disable overriding the WTP profile split tunneling setting.    enable:Override the WTP profile split tunneling setting.    disable:Use the WTP profile split tunneling setting.
     *
     * @return self
     */
    public function setOverrideSplitTunnel($override_split_tunnel)
    {
        $allowedValues = $this->getOverrideSplitTunnelAllowableValues();
        if (!is_null($override_split_tunnel) && !in_array($override_split_tunnel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_split_tunnel', must be one of '%s'",
                    $override_split_tunnel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_split_tunnel'] = $override_split_tunnel;

        return $this;
    }

    /**
     * Gets split_tunneling_acl_path
     *
     * @return string|null
     */
    public function getSplitTunnelingAclPath()
    {
        return $this->container['split_tunneling_acl_path'];
    }

    /**
     * Sets split_tunneling_acl_path
     *
     * @param string|null $split_tunneling_acl_path Split tunneling ACL path is local/tunnel.    tunnel:Split tunneling ACL list traffic will be tunnel.    local:Split tunneling ACL list traffic will be local NATed.
     *
     * @return self
     */
    public function setSplitTunnelingAclPath($split_tunneling_acl_path)
    {
        $allowedValues = $this->getSplitTunnelingAclPathAllowableValues();
        if (!is_null($split_tunneling_acl_path) && !in_array($split_tunneling_acl_path, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling_acl_path', must be one of '%s'",
                    $split_tunneling_acl_path,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling_acl_path'] = $split_tunneling_acl_path;

        return $this;
    }

    /**
     * Gets split_tunneling_acl_local_ap_subnet
     *
     * @return string|null
     */
    public function getSplitTunnelingAclLocalApSubnet()
    {
        return $this->container['split_tunneling_acl_local_ap_subnet'];
    }

    /**
     * Sets split_tunneling_acl_local_ap_subnet
     *
     * @param string|null $split_tunneling_acl_local_ap_subnet Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable).    enable:Enable automatically adding local subnetwork of FortiAP to split-tunneling ACL.    disable:Disable automatically adding local subnetwork of FortiAP to split-tunneling ACL.
     *
     * @return self
     */
    public function setSplitTunnelingAclLocalApSubnet($split_tunneling_acl_local_ap_subnet)
    {
        $allowedValues = $this->getSplitTunnelingAclLocalApSubnetAllowableValues();
        if (!is_null($split_tunneling_acl_local_ap_subnet) && !in_array($split_tunneling_acl_local_ap_subnet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling_acl_local_ap_subnet', must be one of '%s'",
                    $split_tunneling_acl_local_ap_subnet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling_acl_local_ap_subnet'] = $split_tunneling_acl_local_ap_subnet;

        return $this;
    }

    /**
     * Gets split_tunneling_acl
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]|null
     */
    public function getSplitTunnelingAcl()
    {
        return $this->container['split_tunneling_acl'];
    }

    /**
     * Sets split_tunneling_acl
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]|null $split_tunneling_acl Split tunneling ACL filter list.
     *
     * @return self
     */
    public function setSplitTunnelingAcl($split_tunneling_acl)
    {

        if (!is_null($split_tunneling_acl) && (count($split_tunneling_acl) > 16)) {
            throw new \InvalidArgumentException('invalid value for $split_tunneling_acl when calling InlineObject616., number of items must be less than or equal to 16.');
        }
        $this->container['split_tunneling_acl'] = $split_tunneling_acl;

        return $this;
    }

    /**
     * Gets override_lan
     *
     * @return string|null
     */
    public function getOverrideLan()
    {
        return $this->container['override_lan'];
    }

    /**
     * Sets override_lan
     *
     * @param string|null $override_lan Enable to override the WTP profile LAN port setting.    enable:Override the WTP profile LAN port setting.    disable:Use the WTP profile LAN port setting.
     *
     * @return self
     */
    public function setOverrideLan($override_lan)
    {
        $allowedValues = $this->getOverrideLanAllowableValues();
        if (!is_null($override_lan) && !in_array($override_lan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_lan', must be one of '%s'",
                    $override_lan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_lan'] = $override_lan;

        return $this;
    }

    /**
     * Gets lan
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]|null
     */
    public function getLan()
    {
        return $this->container['lan'];
    }

    /**
     * Sets lan
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]|null $lan WTP LAN port mapping.
     *
     * @return self
     */
    public function setLan($lan)
    {

        if (!is_null($lan) && (count($lan) > 0)) {
            throw new \InvalidArgumentException('invalid value for $lan when calling InlineObject616., number of items must be less than or equal to 0.');
        }
        $this->container['lan'] = $lan;

        return $this;
    }

    /**
     * Gets override_allowaccess
     *
     * @return string|null
     */
    public function getOverrideAllowaccess()
    {
        return $this->container['override_allowaccess'];
    }

    /**
     * Sets override_allowaccess
     *
     * @param string|null $override_allowaccess Enable to override the WTP profile management access configuration.    enable:Override the WTP profile management access configuration.    disable:Use the WTP profile management access configuration.
     *
     * @return self
     */
    public function setOverrideAllowaccess($override_allowaccess)
    {
        $allowedValues = $this->getOverrideAllowaccessAllowableValues();
        if (!is_null($override_allowaccess) && !in_array($override_allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_allowaccess', must be one of '%s'",
                    $override_allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_allowaccess'] = $override_allowaccess;

        return $this;
    }

    /**
     * Gets allowaccess
     *
     * @return string|null
     */
    public function getAllowaccess()
    {
        return $this->container['allowaccess'];
    }

    /**
     * Sets allowaccess
     *
     * @param string|null $allowaccess Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.
     *
     * @return self
     */
    public function setAllowaccess($allowaccess)
    {
        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($allowaccess) && !in_array($allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowaccess', must be one of '%s'",
                    $allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowaccess'] = $allowaccess;

        return $this;
    }

    /**
     * Gets override_login_passwd_change
     *
     * @return string|null
     */
    public function getOverrideLoginPasswdChange()
    {
        return $this->container['override_login_passwd_change'];
    }

    /**
     * Sets override_login_passwd_change
     *
     * @param string|null $override_login_passwd_change Enable to override the WTP profile login-password (administrator password) setting.    enable:Override the WTP profile login-password (administrator password) setting.    disable:Use the the WTP profile login-password (administrator password) setting.
     *
     * @return self
     */
    public function setOverrideLoginPasswdChange($override_login_passwd_change)
    {
        $allowedValues = $this->getOverrideLoginPasswdChangeAllowableValues();
        if (!is_null($override_login_passwd_change) && !in_array($override_login_passwd_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_login_passwd_change', must be one of '%s'",
                    $override_login_passwd_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_login_passwd_change'] = $override_login_passwd_change;

        return $this;
    }

    /**
     * Gets login_passwd_change
     *
     * @return string|null
     */
    public function getLoginPasswdChange()
    {
        return $this->container['login_passwd_change'];
    }

    /**
     * Sets login_passwd_change
     *
     * @param string|null $login_passwd_change Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no).    yes:Change the managed WTP, FortiAP or AP's administrator password. Use the login-password option to set the password.    default:Keep the managed WTP, FortiAP or AP's administrator password set to the factory default.    no:Do not change the managed WTP, FortiAP or AP's administrator password.
     *
     * @return self
     */
    public function setLoginPasswdChange($login_passwd_change)
    {
        $allowedValues = $this->getLoginPasswdChangeAllowableValues();
        if (!is_null($login_passwd_change) && !in_array($login_passwd_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'login_passwd_change', must be one of '%s'",
                    $login_passwd_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['login_passwd_change'] = $login_passwd_change;

        return $this;
    }

    /**
     * Gets login_passwd
     *
     * @return string|null
     */
    public function getLoginPasswd()
    {
        return $this->container['login_passwd'];
    }

    /**
     * Sets login_passwd
     *
     * @param string|null $login_passwd Set the managed WTP, FortiAP, or AP's administrator password.
     *
     * @return self
     */
    public function setLoginPasswd($login_passwd)
    {
        $this->container['login_passwd'] = $login_passwd;

        return $this;
    }

    /**
     * Gets radio_1
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio1[]|null
     */
    public function getRadio1()
    {
        return $this->container['radio_1'];
    }

    /**
     * Sets radio_1
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio1[]|null $radio_1 Configuration options for radio 1.
     *
     * @return self
     */
    public function setRadio1($radio_1)
    {

        if (!is_null($radio_1) && (count($radio_1) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_1 when calling InlineObject616., number of items must be less than or equal to 0.');
        }
        $this->container['radio_1'] = $radio_1;

        return $this;
    }

    /**
     * Gets radio_2
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio2[]|null
     */
    public function getRadio2()
    {
        return $this->container['radio_2'];
    }

    /**
     * Sets radio_2
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio2[]|null $radio_2 Configuration options for radio 2.
     *
     * @return self
     */
    public function setRadio2($radio_2)
    {

        if (!is_null($radio_2) && (count($radio_2) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_2 when calling InlineObject616., number of items must be less than or equal to 0.');
        }
        $this->container['radio_2'] = $radio_2;

        return $this;
    }

    /**
     * Gets radio_3
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio3[]|null
     */
    public function getRadio3()
    {
        return $this->container['radio_3'];
    }

    /**
     * Sets radio_3
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio3[]|null $radio_3 Configuration options for radio 3.
     *
     * @return self
     */
    public function setRadio3($radio_3)
    {

        if (!is_null($radio_3) && (count($radio_3) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_3 when calling InlineObject616., number of items must be less than or equal to 0.');
        }
        $this->container['radio_3'] = $radio_3;

        return $this;
    }

    /**
     * Gets radio_4
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio4[]|null
     */
    public function getRadio4()
    {
        return $this->container['radio_4'];
    }

    /**
     * Sets radio_4
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdRadio4[]|null $radio_4 Configuration options for radio 4.
     *
     * @return self
     */
    public function setRadio4($radio_4)
    {

        if (!is_null($radio_4) && (count($radio_4) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_4 when calling InlineObject616., number of items must be less than or equal to 0.');
        }
        $this->container['radio_4'] = $radio_4;

        return $this;
    }

    /**
     * Gets image_download
     *
     * @return string|null
     */
    public function getImageDownload()
    {
        return $this->container['image_download'];
    }

    /**
     * Sets image_download
     *
     * @param string|null $image_download Enable/disable WTP image download.    enable:Enable WTP image download at join time.    disable:Disable WTP image download at join time.
     *
     * @return self
     */
    public function setImageDownload($image_download)
    {
        $allowedValues = $this->getImageDownloadAllowableValues();
        if (!is_null($image_download) && !in_array($image_download, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'image_download', must be one of '%s'",
                    $image_download,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_download'] = $image_download;

        return $this;
    }

    /**
     * Gets mesh_bridge_enable
     *
     * @return string|null
     */
    public function getMeshBridgeEnable()
    {
        return $this->container['mesh_bridge_enable'];
    }

    /**
     * Sets mesh_bridge_enable
     *
     * @param string|null $mesh_bridge_enable Enable/disable mesh Ethernet bridge when WTP is configured as a mesh branch/leaf AP.    default:Use mesh Ethernet bridge local setting on the WTP.    enable:Turn on mesh Ethernet bridge on the WTP.    disable:Turn off mesh Ethernet bridge on the WTP.
     *
     * @return self
     */
    public function setMeshBridgeEnable($mesh_bridge_enable)
    {
        $allowedValues = $this->getMeshBridgeEnableAllowableValues();
        if (!is_null($mesh_bridge_enable) && !in_array($mesh_bridge_enable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mesh_bridge_enable', must be one of '%s'",
                    $mesh_bridge_enable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mesh_bridge_enable'] = $mesh_bridge_enable;

        return $this;
    }

    /**
     * Gets coordinate_latitude
     *
     * @return string|null
     */
    public function getCoordinateLatitude()
    {
        return $this->container['coordinate_latitude'];
    }

    /**
     * Sets coordinate_latitude
     *
     * @param string|null $coordinate_latitude WTP latitude coordinate.
     *
     * @return self
     */
    public function setCoordinateLatitude($coordinate_latitude)
    {
        if (!is_null($coordinate_latitude) && (mb_strlen($coordinate_latitude) > 19)) {
            throw new \InvalidArgumentException('invalid length for $coordinate_latitude when calling InlineObject616., must be smaller than or equal to 19.');
        }

        $this->container['coordinate_latitude'] = $coordinate_latitude;

        return $this;
    }

    /**
     * Gets coordinate_longitude
     *
     * @return string|null
     */
    public function getCoordinateLongitude()
    {
        return $this->container['coordinate_longitude'];
    }

    /**
     * Sets coordinate_longitude
     *
     * @param string|null $coordinate_longitude WTP longitude coordinate.
     *
     * @return self
     */
    public function setCoordinateLongitude($coordinate_longitude)
    {
        if (!is_null($coordinate_longitude) && (mb_strlen($coordinate_longitude) > 19)) {
            throw new \InvalidArgumentException('invalid length for $coordinate_longitude when calling InlineObject616., must be smaller than or equal to 19.');
        }

        $this->container['coordinate_longitude'] = $coordinate_longitude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


