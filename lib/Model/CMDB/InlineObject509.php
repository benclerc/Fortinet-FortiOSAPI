<?php
/**
 * InlineObject509
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject509 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject509 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_509';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'status' => 'string',
        'host_domain_name_suffix' => '\Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameHostDomainNameSuffix[]',
        'category' => 'string',
        'request_cache_control' => 'string',
        'response_cache_control' => 'string',
        'response_expires' => 'string',
        'updateserver' => 'string',
        'rules' => '\Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameRules[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'status' => null,
        'host_domain_name_suffix' => null,
        'category' => null,
        'request_cache_control' => null,
        'response_cache_control' => null,
        'response_expires' => null,
        'updateserver' => null,
        'rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'status' => 'status',
        'host_domain_name_suffix' => 'host-domain-name-suffix',
        'category' => 'category',
        'request_cache_control' => 'request-cache-control',
        'response_cache_control' => 'response-cache-control',
        'response_expires' => 'response-expires',
        'updateserver' => 'updateserver',
        'rules' => 'rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'status' => 'setStatus',
        'host_domain_name_suffix' => 'setHostDomainNameSuffix',
        'category' => 'setCategory',
        'request_cache_control' => 'setRequestCacheControl',
        'response_cache_control' => 'setResponseCacheControl',
        'response_expires' => 'setResponseExpires',
        'updateserver' => 'setUpdateserver',
        'rules' => 'setRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'status' => 'getStatus',
        'host_domain_name_suffix' => 'getHostDomainNameSuffix',
        'category' => 'getCategory',
        'request_cache_control' => 'getRequestCacheControl',
        'response_cache_control' => 'getResponseCacheControl',
        'response_expires' => 'getResponseExpires',
        'updateserver' => 'getUpdateserver',
        'rules' => 'getRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const CATEGORY_VCACHE = 'vcache';
    const CATEGORY_YOUTUBE = 'youtube';
    const REQUEST_CACHE_CONTROL_ENABLE = 'enable';
    const REQUEST_CACHE_CONTROL_DISABLE = 'disable';
    const RESPONSE_CACHE_CONTROL_ENABLE = 'enable';
    const RESPONSE_CACHE_CONTROL_DISABLE = 'disable';
    const RESPONSE_EXPIRES_ENABLE = 'enable';
    const RESPONSE_EXPIRES_DISABLE = 'disable';
    const UPDATESERVER_ENABLE = 'enable';
    const UPDATESERVER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_VCACHE,
            self::CATEGORY_YOUTUBE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestCacheControlAllowableValues()
    {
        return [
            self::REQUEST_CACHE_CONTROL_ENABLE,
            self::REQUEST_CACHE_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseCacheControlAllowableValues()
    {
        return [
            self::RESPONSE_CACHE_CONTROL_ENABLE,
            self::RESPONSE_CACHE_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseExpiresAllowableValues()
    {
        return [
            self::RESPONSE_EXPIRES_ENABLE,
            self::RESPONSE_EXPIRES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateserverAllowableValues()
    {
        return [
            self::UPDATESERVER_ENABLE,
            self::UPDATESERVER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['host_domain_name_suffix'] = $data['host_domain_name_suffix'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['request_cache_control'] = $data['request_cache_control'] ?? null;
        $this->container['response_cache_control'] = $data['response_cache_control'] ?? null;
        $this->container['response_expires'] = $data['response_expires'] ?? null;
        $this->container['updateserver'] = $data['updateserver'] ?? null;
        $this->container['rules'] = $data['rules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['host_domain_name_suffix']) && (count($this->container['host_domain_name_suffix']) > 0)) {
            $invalidProperties[] = "invalid value for 'host_domain_name_suffix', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestCacheControlAllowableValues();
        if (!is_null($this->container['request_cache_control']) && !in_array($this->container['request_cache_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_cache_control', must be one of '%s'",
                $this->container['request_cache_control'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseCacheControlAllowableValues();
        if (!is_null($this->container['response_cache_control']) && !in_array($this->container['response_cache_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_cache_control', must be one of '%s'",
                $this->container['response_cache_control'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseExpiresAllowableValues();
        if (!is_null($this->container['response_expires']) && !in_array($this->container['response_expires'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_expires', must be one of '%s'",
                $this->container['response_expires'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateserverAllowableValues();
        if (!is_null($this->container['updateserver']) && !in_array($this->container['updateserver'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'updateserver', must be one of '%s'",
                $this->container['updateserver'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rules']) && (count($this->container['rules']) > 0)) {
            $invalidProperties[] = "invalid value for 'rules', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of table.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject509., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment about this CDN-rule.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject509., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable WAN optimization content delivery network rules.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets host_domain_name_suffix
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameHostDomainNameSuffix[]|null
     */
    public function getHostDomainNameSuffix()
    {
        return $this->container['host_domain_name_suffix'];
    }

    /**
     * Sets host_domain_name_suffix
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameHostDomainNameSuffix[]|null $host_domain_name_suffix Suffix portion of the fully qualified domain name (eg. fortinet.com in \"www.fortinet.com\").
     *
     * @return self
     */
    public function setHostDomainNameSuffix($host_domain_name_suffix)
    {

        if (!is_null($host_domain_name_suffix) && (count($host_domain_name_suffix) > 0)) {
            throw new \InvalidArgumentException('invalid value for $host_domain_name_suffix when calling InlineObject509., number of items must be less than or equal to 0.');
        }
        $this->container['host_domain_name_suffix'] = $host_domain_name_suffix;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Content delivery network rule category.    vcache:Vcache content delivery network.    youtube:Youtube content delivery network.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets request_cache_control
     *
     * @return string|null
     */
    public function getRequestCacheControl()
    {
        return $this->container['request_cache_control'];
    }

    /**
     * Sets request_cache_control
     *
     * @param string|null $request_cache_control Enable/disable HTTP request cache control.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRequestCacheControl($request_cache_control)
    {
        $allowedValues = $this->getRequestCacheControlAllowableValues();
        if (!is_null($request_cache_control) && !in_array($request_cache_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_cache_control', must be one of '%s'",
                    $request_cache_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_cache_control'] = $request_cache_control;

        return $this;
    }

    /**
     * Gets response_cache_control
     *
     * @return string|null
     */
    public function getResponseCacheControl()
    {
        return $this->container['response_cache_control'];
    }

    /**
     * Sets response_cache_control
     *
     * @param string|null $response_cache_control Enable/disable HTTP response cache control.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setResponseCacheControl($response_cache_control)
    {
        $allowedValues = $this->getResponseCacheControlAllowableValues();
        if (!is_null($response_cache_control) && !in_array($response_cache_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_cache_control', must be one of '%s'",
                    $response_cache_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_cache_control'] = $response_cache_control;

        return $this;
    }

    /**
     * Gets response_expires
     *
     * @return string|null
     */
    public function getResponseExpires()
    {
        return $this->container['response_expires'];
    }

    /**
     * Sets response_expires
     *
     * @param string|null $response_expires Enable/disable HTTP response cache expires.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setResponseExpires($response_expires)
    {
        $allowedValues = $this->getResponseExpiresAllowableValues();
        if (!is_null($response_expires) && !in_array($response_expires, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_expires', must be one of '%s'",
                    $response_expires,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_expires'] = $response_expires;

        return $this;
    }

    /**
     * Gets updateserver
     *
     * @return string|null
     */
    public function getUpdateserver()
    {
        return $this->container['updateserver'];
    }

    /**
     * Sets updateserver
     *
     * @param string|null $updateserver Enable/disable update server.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setUpdateserver($updateserver)
    {
        $allowedValues = $this->getUpdateserverAllowableValues();
        if (!is_null($updateserver) && !in_array($updateserver, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'updateserver', must be one of '%s'",
                    $updateserver,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['updateserver'] = $updateserver;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameRules[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WanoptContentDeliveryNetworkRuleNameRules[]|null $rules WAN optimization content delivery network rule entries.
     *
     * @return self
     */
    public function setRules($rules)
    {

        if (!is_null($rules) && (count($rules) > 0)) {
            throw new \InvalidArgumentException('invalid value for $rules when calling InlineObject509., number of items must be less than or equal to 0.');
        }
        $this->container['rules'] = $rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


