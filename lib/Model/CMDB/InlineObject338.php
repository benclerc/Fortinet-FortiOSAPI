<?php
/**
 * InlineObject338
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject338 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject338 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_338';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'extra_init' => 'string',
        'authtype' => 'string',
        'username' => 'string',
        'passwd' => 'string',
        'apn' => 'string',
        'modem_port' => 'int',
        'mode' => 'string',
        'holddown_timer' => 'int',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'extra_init' => null,
        'authtype' => null,
        'username' => null,
        'passwd' => 'password',
        'apn' => null,
        'modem_port' => null,
        'mode' => null,
        'holddown_timer' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'extra_init' => 'extra-init',
        'authtype' => 'authtype',
        'username' => 'username',
        'passwd' => 'passwd',
        'apn' => 'apn',
        'modem_port' => 'modem-port',
        'mode' => 'mode',
        'holddown_timer' => 'holddown-timer',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'extra_init' => 'setExtraInit',
        'authtype' => 'setAuthtype',
        'username' => 'setUsername',
        'passwd' => 'setPasswd',
        'apn' => 'setApn',
        'modem_port' => 'setModemPort',
        'mode' => 'setMode',
        'holddown_timer' => 'setHolddownTimer',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'extra_init' => 'getExtraInit',
        'authtype' => 'getAuthtype',
        'username' => 'getUsername',
        'passwd' => 'getPasswd',
        'apn' => 'getApn',
        'modem_port' => 'getModemPort',
        'mode' => 'getMode',
        'holddown_timer' => 'getHolddownTimer',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const AUTHTYPE_NONE = 'none';
    const AUTHTYPE_PAP = 'pap';
    const AUTHTYPE_CHAP = 'chap';
    const MODE_STANDALONE = 'standalone';
    const MODE_REDUNDANT = 'redundant';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthtypeAllowableValues()
    {
        return [
            self::AUTHTYPE_NONE,
            self::AUTHTYPE_PAP,
            self::AUTHTYPE_CHAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_STANDALONE,
            self::MODE_REDUNDANT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['extra_init'] = $data['extra_init'] ?? null;
        $this->container['authtype'] = $data['authtype'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['passwd'] = $data['passwd'] ?? null;
        $this->container['apn'] = $data['apn'] ?? null;
        $this->container['modem_port'] = $data['modem_port'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['holddown_timer'] = $data['holddown_timer'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['extra_init']) && (mb_strlen($this->container['extra_init']) > 127)) {
            $invalidProperties[] = "invalid value for 'extra_init', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getAuthtypeAllowableValues();
        if (!is_null($this->container['authtype']) && !in_array($this->container['authtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authtype', must be one of '%s'",
                $this->container['authtype'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 63)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['apn']) && (mb_strlen($this->container['apn']) > 127)) {
            $invalidProperties[] = "invalid value for 'apn', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['modem_port']) && ($this->container['modem_port'] > 20)) {
            $invalidProperties[] = "invalid value for 'modem_port', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['modem_port']) && ($this->container['modem_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'modem_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['holddown_timer']) && ($this->container['holddown_timer'] > 60)) {
            $invalidProperties[] = "invalid value for 'holddown_timer', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['holddown_timer']) && ($this->container['holddown_timer'] < 10)) {
            $invalidProperties[] = "invalid value for 'holddown_timer', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 63)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable USB LTE/WIMAX device.    enable:Enable USB LTE/WIMA device.    disable:Disable USB LTE/WIMA device.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets extra_init
     *
     * @return string|null
     */
    public function getExtraInit()
    {
        return $this->container['extra_init'];
    }

    /**
     * Sets extra_init
     *
     * @param string|null $extra_init Extra initialization string for USB LTE/WIMAX devices.
     *
     * @return self
     */
    public function setExtraInit($extra_init)
    {
        if (!is_null($extra_init) && (mb_strlen($extra_init) > 127)) {
            throw new \InvalidArgumentException('invalid length for $extra_init when calling InlineObject338., must be smaller than or equal to 127.');
        }

        $this->container['extra_init'] = $extra_init;

        return $this;
    }

    /**
     * Gets authtype
     *
     * @return string|null
     */
    public function getAuthtype()
    {
        return $this->container['authtype'];
    }

    /**
     * Sets authtype
     *
     * @param string|null $authtype Authentication type for PDP-IP packet data calls.    none:Username and password not required.    pap:Use PAP authentication.    chap:Use CHAP authentication.
     *
     * @return self
     */
    public function setAuthtype($authtype)
    {
        $allowedValues = $this->getAuthtypeAllowableValues();
        if (!is_null($authtype) && !in_array($authtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authtype', must be one of '%s'",
                    $authtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authtype'] = $authtype;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Authentication username for PDP-IP packet data calls.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject338., must be smaller than or equal to 63.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets passwd
     *
     * @return string|null
     */
    public function getPasswd()
    {
        return $this->container['passwd'];
    }

    /**
     * Sets passwd
     *
     * @param string|null $passwd Authentication password for PDP-IP packet data calls.
     *
     * @return self
     */
    public function setPasswd($passwd)
    {
        $this->container['passwd'] = $passwd;

        return $this;
    }

    /**
     * Gets apn
     *
     * @return string|null
     */
    public function getApn()
    {
        return $this->container['apn'];
    }

    /**
     * Sets apn
     *
     * @param string|null $apn Login APN string for PDP-IP packet data calls.
     *
     * @return self
     */
    public function setApn($apn)
    {
        if (!is_null($apn) && (mb_strlen($apn) > 127)) {
            throw new \InvalidArgumentException('invalid length for $apn when calling InlineObject338., must be smaller than or equal to 127.');
        }

        $this->container['apn'] = $apn;

        return $this;
    }

    /**
     * Gets modem_port
     *
     * @return int|null
     */
    public function getModemPort()
    {
        return $this->container['modem_port'];
    }

    /**
     * Sets modem_port
     *
     * @param int|null $modem_port Modem port index (0 - 20).
     *
     * @return self
     */
    public function setModemPort($modem_port)
    {

        if (!is_null($modem_port) && ($modem_port > 20)) {
            throw new \InvalidArgumentException('invalid value for $modem_port when calling InlineObject338., must be smaller than or equal to 20.');
        }
        if (!is_null($modem_port) && ($modem_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $modem_port when calling InlineObject338., must be bigger than or equal to 0.');
        }

        $this->container['modem_port'] = $modem_port;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Modem operation mode.    standalone:Standalone modem operation mode.    redundant:Redundant modem operation mode where the modem is used as a backup interface.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets holddown_timer
     *
     * @return int|null
     */
    public function getHolddownTimer()
    {
        return $this->container['holddown_timer'];
    }

    /**
     * Sets holddown_timer
     *
     * @param int|null $holddown_timer Hold down timer (10 - 60 sec).
     *
     * @return self
     */
    public function setHolddownTimer($holddown_timer)
    {

        if (!is_null($holddown_timer) && ($holddown_timer > 60)) {
            throw new \InvalidArgumentException('invalid value for $holddown_timer when calling InlineObject338., must be smaller than or equal to 60.');
        }
        if (!is_null($holddown_timer) && ($holddown_timer < 10)) {
            throw new \InvalidArgumentException('invalid value for $holddown_timer when calling InlineObject338., must be bigger than or equal to 10.');
        }

        $this->container['holddown_timer'] = $holddown_timer;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface The interface that the modem is acting as a redundant interface for.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 63)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject338., must be smaller than or equal to 63.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


