<?php
/**
 * WirelessControllerWtpWtpIdRadio2
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerWtpWtpIdRadio2 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerWtpWtpIdRadio2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_wtp__wtp_id__radio_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'override_band' => 'string',
        'band' => 'string',
        'override_txpower' => 'string',
        'auto_power_level' => 'string',
        'auto_power_high' => 'int',
        'auto_power_low' => 'int',
        'auto_power_target' => 'string',
        'power_level' => 'int',
        'override_vaps' => 'string',
        'vap_all' => 'string',
        'vaps' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]',
        'override_channel' => 'string',
        'channel' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]',
        'drma_manual_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'override_band' => null,
        'band' => null,
        'override_txpower' => null,
        'auto_power_level' => null,
        'auto_power_high' => null,
        'auto_power_low' => null,
        'auto_power_target' => null,
        'power_level' => null,
        'override_vaps' => null,
        'vap_all' => null,
        'vaps' => null,
        'override_channel' => null,
        'channel' => null,
        'drma_manual_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'override_band' => 'override-band',
        'band' => 'band',
        'override_txpower' => 'override-txpower',
        'auto_power_level' => 'auto-power-level',
        'auto_power_high' => 'auto-power-high',
        'auto_power_low' => 'auto-power-low',
        'auto_power_target' => 'auto-power-target',
        'power_level' => 'power-level',
        'override_vaps' => 'override-vaps',
        'vap_all' => 'vap-all',
        'vaps' => 'vaps',
        'override_channel' => 'override-channel',
        'channel' => 'channel',
        'drma_manual_mode' => 'drma-manual-mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'override_band' => 'setOverrideBand',
        'band' => 'setBand',
        'override_txpower' => 'setOverrideTxpower',
        'auto_power_level' => 'setAutoPowerLevel',
        'auto_power_high' => 'setAutoPowerHigh',
        'auto_power_low' => 'setAutoPowerLow',
        'auto_power_target' => 'setAutoPowerTarget',
        'power_level' => 'setPowerLevel',
        'override_vaps' => 'setOverrideVaps',
        'vap_all' => 'setVapAll',
        'vaps' => 'setVaps',
        'override_channel' => 'setOverrideChannel',
        'channel' => 'setChannel',
        'drma_manual_mode' => 'setDrmaManualMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'override_band' => 'getOverrideBand',
        'band' => 'getBand',
        'override_txpower' => 'getOverrideTxpower',
        'auto_power_level' => 'getAutoPowerLevel',
        'auto_power_high' => 'getAutoPowerHigh',
        'auto_power_low' => 'getAutoPowerLow',
        'auto_power_target' => 'getAutoPowerTarget',
        'power_level' => 'getPowerLevel',
        'override_vaps' => 'getOverrideVaps',
        'vap_all' => 'getVapAll',
        'vaps' => 'getVaps',
        'override_channel' => 'getOverrideChannel',
        'channel' => 'getChannel',
        'drma_manual_mode' => 'getDrmaManualMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OVERRIDE_BAND_ENABLE = 'enable';
    const OVERRIDE_BAND_DISABLE = 'disable';
    const BAND__11A = '802.11a';
    const BAND__11B = '802.11b';
    const BAND__11G = '802.11g';
    const BAND__11N = '802.11n';
    const BAND__11N_5_G = '802.11n-5G';
    const BAND__11AC = '802.11ac';
    const BAND__11AX_5_G = '802.11ax-5G';
    const BAND__11AX = '802.11ax';
    const BAND__11AC_2_G = '802.11ac-2G';
    const BAND__11NG_ONLY = '802.11n,g-only';
    const BAND__11G_ONLY = '802.11g-only';
    const BAND__11N_ONLY = '802.11n-only';
    const BAND__11N_5_G_ONLY = '802.11n-5G-only';
    const BAND__11ACN_ONLY = '802.11ac,n-only';
    const BAND__11AC_ONLY = '802.11ac-only';
    const BAND__11AXAC_ONLY = '802.11ax,ac-only';
    const BAND__11AXACN_ONLY = '802.11ax,ac,n-only';
    const BAND__11AX_5_G_ONLY = '802.11ax-5G-only';
    const BAND__11AXN_ONLY = '802.11ax,n-only';
    const BAND__11AXNG_ONLY = '802.11ax,n,g-only';
    const BAND__11AX_ONLY = '802.11ax-only';
    const OVERRIDE_TXPOWER_ENABLE = 'enable';
    const OVERRIDE_TXPOWER_DISABLE = 'disable';
    const AUTO_POWER_LEVEL_ENABLE = 'enable';
    const AUTO_POWER_LEVEL_DISABLE = 'disable';
    const OVERRIDE_VAPS_ENABLE = 'enable';
    const OVERRIDE_VAPS_DISABLE = 'disable';
    const VAP_ALL_TUNNEL = 'tunnel';
    const VAP_ALL_BRIDGE = 'bridge';
    const VAP_ALL_MANUAL = 'manual';
    const OVERRIDE_CHANNEL_ENABLE = 'enable';
    const OVERRIDE_CHANNEL_DISABLE = 'disable';
    const DRMA_MANUAL_MODE_AP = 'ap';
    const DRMA_MANUAL_MODE_MONITOR = 'monitor';
    const DRMA_MANUAL_MODE_NCF = 'ncf';
    const DRMA_MANUAL_MODE_NCF_PEEK = 'ncf-peek';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideBandAllowableValues()
    {
        return [
            self::OVERRIDE_BAND_ENABLE,
            self::OVERRIDE_BAND_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandAllowableValues()
    {
        return [
            self::BAND__11A,
            self::BAND__11B,
            self::BAND__11G,
            self::BAND__11N,
            self::BAND__11N_5_G,
            self::BAND__11AC,
            self::BAND__11AX_5_G,
            self::BAND__11AX,
            self::BAND__11AC_2_G,
            self::BAND__11NG_ONLY,
            self::BAND__11G_ONLY,
            self::BAND__11N_ONLY,
            self::BAND__11N_5_G_ONLY,
            self::BAND__11ACN_ONLY,
            self::BAND__11AC_ONLY,
            self::BAND__11AXAC_ONLY,
            self::BAND__11AXACN_ONLY,
            self::BAND__11AX_5_G_ONLY,
            self::BAND__11AXN_ONLY,
            self::BAND__11AXNG_ONLY,
            self::BAND__11AX_ONLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideTxpowerAllowableValues()
    {
        return [
            self::OVERRIDE_TXPOWER_ENABLE,
            self::OVERRIDE_TXPOWER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoPowerLevelAllowableValues()
    {
        return [
            self::AUTO_POWER_LEVEL_ENABLE,
            self::AUTO_POWER_LEVEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideVapsAllowableValues()
    {
        return [
            self::OVERRIDE_VAPS_ENABLE,
            self::OVERRIDE_VAPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVapAllAllowableValues()
    {
        return [
            self::VAP_ALL_TUNNEL,
            self::VAP_ALL_BRIDGE,
            self::VAP_ALL_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideChannelAllowableValues()
    {
        return [
            self::OVERRIDE_CHANNEL_ENABLE,
            self::OVERRIDE_CHANNEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDrmaManualModeAllowableValues()
    {
        return [
            self::DRMA_MANUAL_MODE_AP,
            self::DRMA_MANUAL_MODE_MONITOR,
            self::DRMA_MANUAL_MODE_NCF,
            self::DRMA_MANUAL_MODE_NCF_PEEK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['override_band'] = $data['override_band'] ?? null;
        $this->container['band'] = $data['band'] ?? null;
        $this->container['override_txpower'] = $data['override_txpower'] ?? null;
        $this->container['auto_power_level'] = $data['auto_power_level'] ?? null;
        $this->container['auto_power_high'] = $data['auto_power_high'] ?? null;
        $this->container['auto_power_low'] = $data['auto_power_low'] ?? null;
        $this->container['auto_power_target'] = $data['auto_power_target'] ?? null;
        $this->container['power_level'] = $data['power_level'] ?? null;
        $this->container['override_vaps'] = $data['override_vaps'] ?? null;
        $this->container['vap_all'] = $data['vap_all'] ?? null;
        $this->container['vaps'] = $data['vaps'] ?? null;
        $this->container['override_channel'] = $data['override_channel'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['drma_manual_mode'] = $data['drma_manual_mode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOverrideBandAllowableValues();
        if (!is_null($this->container['override_band']) && !in_array($this->container['override_band'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_band', must be one of '%s'",
                $this->container['override_band'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBandAllowableValues();
        if (!is_null($this->container['band']) && !in_array($this->container['band'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'band', must be one of '%s'",
                $this->container['band'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverrideTxpowerAllowableValues();
        if (!is_null($this->container['override_txpower']) && !in_array($this->container['override_txpower'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_txpower', must be one of '%s'",
                $this->container['override_txpower'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoPowerLevelAllowableValues();
        if (!is_null($this->container['auto_power_level']) && !in_array($this->container['auto_power_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_power_level', must be one of '%s'",
                $this->container['auto_power_level'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auto_power_high']) && ($this->container['auto_power_high'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_power_high', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_power_high']) && ($this->container['auto_power_high'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_power_high', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_power_low']) && ($this->container['auto_power_low'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_power_low', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_power_low']) && ($this->container['auto_power_low'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_power_low', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_power_target']) && (mb_strlen($this->container['auto_power_target']) > 7)) {
            $invalidProperties[] = "invalid value for 'auto_power_target', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['power_level']) && ($this->container['power_level'] > 100)) {
            $invalidProperties[] = "invalid value for 'power_level', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['power_level']) && ($this->container['power_level'] < 0)) {
            $invalidProperties[] = "invalid value for 'power_level', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOverrideVapsAllowableValues();
        if (!is_null($this->container['override_vaps']) && !in_array($this->container['override_vaps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_vaps', must be one of '%s'",
                $this->container['override_vaps'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVapAllAllowableValues();
        if (!is_null($this->container['vap_all']) && !in_array($this->container['vap_all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vap_all', must be one of '%s'",
                $this->container['vap_all'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vaps']) && (count($this->container['vaps']) > 0)) {
            $invalidProperties[] = "invalid value for 'vaps', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideChannelAllowableValues();
        if (!is_null($this->container['override_channel']) && !in_array($this->container['override_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_channel', must be one of '%s'",
                $this->container['override_channel'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['channel']) && (count($this->container['channel']) > 0)) {
            $invalidProperties[] = "invalid value for 'channel', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getDrmaManualModeAllowableValues();
        if (!is_null($this->container['drma_manual_mode']) && !in_array($this->container['drma_manual_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drma_manual_mode', must be one of '%s'",
                $this->container['drma_manual_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets override_band
     *
     * @return string|null
     */
    public function getOverrideBand()
    {
        return $this->container['override_band'];
    }

    /**
     * Sets override_band
     *
     * @param string|null $override_band Enable to override the WTP profile band setting.    enable:Override the WTP profile band setting.    disable:Use the WTP profile band setting.
     *
     * @return self
     */
    public function setOverrideBand($override_band)
    {
        $allowedValues = $this->getOverrideBandAllowableValues();
        if (!is_null($override_band) && !in_array($override_band, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_band', must be one of '%s'",
                    $override_band,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_band'] = $override_band;

        return $this;
    }

    /**
     * Gets band
     *
     * @return string|null
     */
    public function getBand()
    {
        return $this->container['band'];
    }

    /**
     * Sets band
     *
     * @param string|null $band WiFi band that Radio 2 operates on.    802.11a:802.11a.    802.11b:802.11b.    802.11g:802.11g/b.    802.11n:802.11n/g/b at 2.4GHz.    802.11n-5G:802.11n/a at 5GHz.    802.11ac:802.11ac/n/a.    802.11ax-5G:802.11ax/ac/n/a at 5GHz.    802.11ax:802.11ax/n/g/b at 2.4GHz.    802.11ac-2G:802.11ac at 2.4GHz.    802.11n,g-only:802.11n/g at 2.4GHz.    802.11g-only:802.11g.    802.11n-only:802.11n at 2.4GHz.    802.11n-5G-only:802.11n at 5GHz.    802.11ac,n-only:802.11ac/n.    802.11ac-only:802.11ac.    802.11ax,ac-only:802.11ax/ac at 5GHz.    802.11ax,ac,n-only:802.11ax/ac/n at 5GHz.    802.11ax-5G-only:802.11ax at 5GHz.    802.11ax,n-only:802.11ax/n at 2.4GHz.    802.11ax,n,g-only:802.11ax/n/g at 2.4GHz.    802.11ax-only:802.11ax at 2.4GHz.
     *
     * @return self
     */
    public function setBand($band)
    {
        $allowedValues = $this->getBandAllowableValues();
        if (!is_null($band) && !in_array($band, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'band', must be one of '%s'",
                    $band,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band'] = $band;

        return $this;
    }

    /**
     * Gets override_txpower
     *
     * @return string|null
     */
    public function getOverrideTxpower()
    {
        return $this->container['override_txpower'];
    }

    /**
     * Sets override_txpower
     *
     * @param string|null $override_txpower Enable to override the WTP profile power level configuration.    enable:Override the WTP profile power level configuration.    disable:Use the WTP profile power level configuration.
     *
     * @return self
     */
    public function setOverrideTxpower($override_txpower)
    {
        $allowedValues = $this->getOverrideTxpowerAllowableValues();
        if (!is_null($override_txpower) && !in_array($override_txpower, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_txpower', must be one of '%s'",
                    $override_txpower,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_txpower'] = $override_txpower;

        return $this;
    }

    /**
     * Gets auto_power_level
     *
     * @return string|null
     */
    public function getAutoPowerLevel()
    {
        return $this->container['auto_power_level'];
    }

    /**
     * Sets auto_power_level
     *
     * @param string|null $auto_power_level Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable).    enable:Enable automatic transmit power adjustment.    disable:Disable automatic transmit power adjustment.
     *
     * @return self
     */
    public function setAutoPowerLevel($auto_power_level)
    {
        $allowedValues = $this->getAutoPowerLevelAllowableValues();
        if (!is_null($auto_power_level) && !in_array($auto_power_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_power_level', must be one of '%s'",
                    $auto_power_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_power_level'] = $auto_power_level;

        return $this;
    }

    /**
     * Gets auto_power_high
     *
     * @return int|null
     */
    public function getAutoPowerHigh()
    {
        return $this->container['auto_power_high'];
    }

    /**
     * Sets auto_power_high
     *
     * @param int|null $auto_power_high The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     *
     * @return self
     */
    public function setAutoPowerHigh($auto_power_high)
    {

        if (!is_null($auto_power_high) && ($auto_power_high > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_high when calling WirelessControllerWtpWtpIdRadio2., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_power_high) && ($auto_power_high < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_high when calling WirelessControllerWtpWtpIdRadio2., must be bigger than or equal to 0.');
        }

        $this->container['auto_power_high'] = $auto_power_high;

        return $this;
    }

    /**
     * Gets auto_power_low
     *
     * @return int|null
     */
    public function getAutoPowerLow()
    {
        return $this->container['auto_power_low'];
    }

    /**
     * Sets auto_power_low
     *
     * @param int|null $auto_power_low The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     *
     * @return self
     */
    public function setAutoPowerLow($auto_power_low)
    {

        if (!is_null($auto_power_low) && ($auto_power_low > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_low when calling WirelessControllerWtpWtpIdRadio2., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_power_low) && ($auto_power_low < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_low when calling WirelessControllerWtpWtpIdRadio2., must be bigger than or equal to 0.');
        }

        $this->container['auto_power_low'] = $auto_power_low;

        return $this;
    }

    /**
     * Gets auto_power_target
     *
     * @return string|null
     */
    public function getAutoPowerTarget()
    {
        return $this->container['auto_power_target'];
    }

    /**
     * Sets auto_power_target
     *
     * @param string|null $auto_power_target The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     *
     * @return self
     */
    public function setAutoPowerTarget($auto_power_target)
    {
        if (!is_null($auto_power_target) && (mb_strlen($auto_power_target) > 7)) {
            throw new \InvalidArgumentException('invalid length for $auto_power_target when calling WirelessControllerWtpWtpIdRadio2., must be smaller than or equal to 7.');
        }

        $this->container['auto_power_target'] = $auto_power_target;

        return $this;
    }

    /**
     * Gets power_level
     *
     * @return int|null
     */
    public function getPowerLevel()
    {
        return $this->container['power_level'];
    }

    /**
     * Sets power_level
     *
     * @param int|null $power_level Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     *
     * @return self
     */
    public function setPowerLevel($power_level)
    {

        if (!is_null($power_level) && ($power_level > 100)) {
            throw new \InvalidArgumentException('invalid value for $power_level when calling WirelessControllerWtpWtpIdRadio2., must be smaller than or equal to 100.');
        }
        if (!is_null($power_level) && ($power_level < 0)) {
            throw new \InvalidArgumentException('invalid value for $power_level when calling WirelessControllerWtpWtpIdRadio2., must be bigger than or equal to 0.');
        }

        $this->container['power_level'] = $power_level;

        return $this;
    }

    /**
     * Gets override_vaps
     *
     * @return string|null
     */
    public function getOverrideVaps()
    {
        return $this->container['override_vaps'];
    }

    /**
     * Sets override_vaps
     *
     * @param string|null $override_vaps Enable to override WTP profile Virtual Access Point (VAP) settings.    enable:Override WTP profile VAP settings.    disable:Use WTP profile VAP settings.
     *
     * @return self
     */
    public function setOverrideVaps($override_vaps)
    {
        $allowedValues = $this->getOverrideVapsAllowableValues();
        if (!is_null($override_vaps) && !in_array($override_vaps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_vaps', must be one of '%s'",
                    $override_vaps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_vaps'] = $override_vaps;

        return $this;
    }

    /**
     * Gets vap_all
     *
     * @return string|null
     */
    public function getVapAll()
    {
        return $this->container['vap_all'];
    }

    /**
     * Sets vap_all
     *
     * @param string|null $vap_all Configure method for assigning SSIDs to this FortiAP (default = automatically assign tunnel SSIDs).    tunnel:Automatically select tunnel SSIDs.    bridge:Automatically select local-bridging SSIDs.    manual:Manually select SSIDs.
     *
     * @return self
     */
    public function setVapAll($vap_all)
    {
        $allowedValues = $this->getVapAllAllowableValues();
        if (!is_null($vap_all) && !in_array($vap_all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vap_all', must be one of '%s'",
                    $vap_all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vap_all'] = $vap_all;

        return $this;
    }

    /**
     * Gets vaps
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]|null
     */
    public function getVaps()
    {
        return $this->container['vaps'];
    }

    /**
     * Sets vaps
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]|null $vaps Manually selected list of Virtual Access Points (VAPs).
     *
     * @return self
     */
    public function setVaps($vaps)
    {

        if (!is_null($vaps) && (count($vaps) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vaps when calling WirelessControllerWtpWtpIdRadio2., number of items must be less than or equal to 0.');
        }
        $this->container['vaps'] = $vaps;

        return $this;
    }

    /**
     * Gets override_channel
     *
     * @return string|null
     */
    public function getOverrideChannel()
    {
        return $this->container['override_channel'];
    }

    /**
     * Sets override_channel
     *
     * @param string|null $override_channel Enable to override WTP profile channel settings.    enable:Override WTP profile channel settings.    disable:Use WTP profile channel settings.
     *
     * @return self
     */
    public function setOverrideChannel($override_channel)
    {
        $allowedValues = $this->getOverrideChannelAllowableValues();
        if (!is_null($override_channel) && !in_array($override_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_channel', must be one of '%s'",
                    $override_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_channel'] = $override_channel;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]|null $channel Selected list of wireless radio channels.
     *
     * @return self
     */
    public function setChannel($channel)
    {

        if (!is_null($channel) && (count($channel) > 0)) {
            throw new \InvalidArgumentException('invalid value for $channel when calling WirelessControllerWtpWtpIdRadio2., number of items must be less than or equal to 0.');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets drma_manual_mode
     *
     * @return string|null
     */
    public function getDrmaManualMode()
    {
        return $this->container['drma_manual_mode'];
    }

    /**
     * Sets drma_manual_mode
     *
     * @param string|null $drma_manual_mode Radio mode to be used for DRMA manual mode (default = ncf).    ap:Set the radio to AP mode.    monitor:Set the radio to monitor mode    ncf:Select and set the radio mode based on NCF score.    ncf-peek:Select the radio mode based on NCF score, but do not apply.
     *
     * @return self
     */
    public function setDrmaManualMode($drma_manual_mode)
    {
        $allowedValues = $this->getDrmaManualModeAllowableValues();
        if (!is_null($drma_manual_mode) && !in_array($drma_manual_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drma_manual_mode', must be one of '%s'",
                    $drma_manual_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drma_manual_mode'] = $drma_manual_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


