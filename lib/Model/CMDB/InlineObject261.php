<?php
/**
 * InlineObject261
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject261 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject261 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_261';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'engine_id' => 'string',
        'description' => 'string',
        'contact_info' => 'string',
        'location' => 'string',
        'trap_high_cpu_threshold' => 'int',
        'trap_low_memory_threshold' => 'int',
        'trap_log_full_threshold' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'engine_id' => null,
        'description' => null,
        'contact_info' => null,
        'location' => null,
        'trap_high_cpu_threshold' => null,
        'trap_low_memory_threshold' => null,
        'trap_log_full_threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'engine_id' => 'engine-id',
        'description' => 'description',
        'contact_info' => 'contact-info',
        'location' => 'location',
        'trap_high_cpu_threshold' => 'trap-high-cpu-threshold',
        'trap_low_memory_threshold' => 'trap-low-memory-threshold',
        'trap_log_full_threshold' => 'trap-log-full-threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'engine_id' => 'setEngineId',
        'description' => 'setDescription',
        'contact_info' => 'setContactInfo',
        'location' => 'setLocation',
        'trap_high_cpu_threshold' => 'setTrapHighCpuThreshold',
        'trap_low_memory_threshold' => 'setTrapLowMemoryThreshold',
        'trap_log_full_threshold' => 'setTrapLogFullThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'engine_id' => 'getEngineId',
        'description' => 'getDescription',
        'contact_info' => 'getContactInfo',
        'location' => 'getLocation',
        'trap_high_cpu_threshold' => 'getTrapHighCpuThreshold',
        'trap_low_memory_threshold' => 'getTrapLowMemoryThreshold',
        'trap_log_full_threshold' => 'getTrapLogFullThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['engine_id'] = $data['engine_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['contact_info'] = $data['contact_info'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['trap_high_cpu_threshold'] = $data['trap_high_cpu_threshold'] ?? null;
        $this->container['trap_low_memory_threshold'] = $data['trap_low_memory_threshold'] ?? null;
        $this->container['trap_log_full_threshold'] = $data['trap_log_full_threshold'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['engine_id']) && (mb_strlen($this->container['engine_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'engine_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_info']) && (mb_strlen($this->container['contact_info']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_info', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 255)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['trap_high_cpu_threshold']) && ($this->container['trap_high_cpu_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'trap_high_cpu_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['trap_high_cpu_threshold']) && ($this->container['trap_high_cpu_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_high_cpu_threshold', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trap_low_memory_threshold']) && ($this->container['trap_low_memory_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'trap_low_memory_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['trap_low_memory_threshold']) && ($this->container['trap_low_memory_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_low_memory_threshold', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trap_log_full_threshold']) && ($this->container['trap_log_full_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'trap_log_full_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['trap_log_full_threshold']) && ($this->container['trap_log_full_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_log_full_threshold', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable SNMP.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets engine_id
     *
     * @return string|null
     */
    public function getEngineId()
    {
        return $this->container['engine_id'];
    }

    /**
     * Sets engine_id
     *
     * @param string|null $engine_id Local SNMP engineID string (maximum 24 characters).
     *
     * @return self
     */
    public function setEngineId($engine_id)
    {
        if (!is_null($engine_id) && (mb_strlen($engine_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $engine_id when calling InlineObject261., must be smaller than or equal to 24.');
        }

        $this->container['engine_id'] = $engine_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description System description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject261., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets contact_info
     *
     * @return string|null
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     *
     * @param string|null $contact_info Contact information.
     *
     * @return self
     */
    public function setContactInfo($contact_info)
    {
        if (!is_null($contact_info) && (mb_strlen($contact_info) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_info when calling InlineObject261., must be smaller than or equal to 255.');
        }

        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location System location.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (mb_strlen($location) > 255)) {
            throw new \InvalidArgumentException('invalid length for $location when calling InlineObject261., must be smaller than or equal to 255.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets trap_high_cpu_threshold
     *
     * @return int|null
     */
    public function getTrapHighCpuThreshold()
    {
        return $this->container['trap_high_cpu_threshold'];
    }

    /**
     * Sets trap_high_cpu_threshold
     *
     * @param int|null $trap_high_cpu_threshold CPU usage when trap is sent.
     *
     * @return self
     */
    public function setTrapHighCpuThreshold($trap_high_cpu_threshold)
    {

        if (!is_null($trap_high_cpu_threshold) && ($trap_high_cpu_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $trap_high_cpu_threshold when calling InlineObject261., must be smaller than or equal to 100.');
        }
        if (!is_null($trap_high_cpu_threshold) && ($trap_high_cpu_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_high_cpu_threshold when calling InlineObject261., must be bigger than or equal to 1.');
        }

        $this->container['trap_high_cpu_threshold'] = $trap_high_cpu_threshold;

        return $this;
    }

    /**
     * Gets trap_low_memory_threshold
     *
     * @return int|null
     */
    public function getTrapLowMemoryThreshold()
    {
        return $this->container['trap_low_memory_threshold'];
    }

    /**
     * Sets trap_low_memory_threshold
     *
     * @param int|null $trap_low_memory_threshold Memory usage when trap is sent.
     *
     * @return self
     */
    public function setTrapLowMemoryThreshold($trap_low_memory_threshold)
    {

        if (!is_null($trap_low_memory_threshold) && ($trap_low_memory_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $trap_low_memory_threshold when calling InlineObject261., must be smaller than or equal to 100.');
        }
        if (!is_null($trap_low_memory_threshold) && ($trap_low_memory_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_low_memory_threshold when calling InlineObject261., must be bigger than or equal to 1.');
        }

        $this->container['trap_low_memory_threshold'] = $trap_low_memory_threshold;

        return $this;
    }

    /**
     * Gets trap_log_full_threshold
     *
     * @return int|null
     */
    public function getTrapLogFullThreshold()
    {
        return $this->container['trap_log_full_threshold'];
    }

    /**
     * Sets trap_log_full_threshold
     *
     * @param int|null $trap_log_full_threshold Log disk usage when trap is sent.
     *
     * @return self
     */
    public function setTrapLogFullThreshold($trap_log_full_threshold)
    {

        if (!is_null($trap_log_full_threshold) && ($trap_log_full_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $trap_log_full_threshold when calling InlineObject261., must be smaller than or equal to 100.');
        }
        if (!is_null($trap_log_full_threshold) && ($trap_log_full_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_log_full_threshold when calling InlineObject261., must be bigger than or equal to 1.');
        }

        $this->container['trap_log_full_threshold'] = $trap_log_full_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


