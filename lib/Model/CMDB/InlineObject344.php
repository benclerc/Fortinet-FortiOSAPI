<?php
/**
 * InlineObject344
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject344 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject344 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_344';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'nat64_prefix' => 'string',
        'secondary_prefix_status' => 'string',
        'secondary_prefix' => '\Fortigate\FortiOS\Model\CMDB\SystemNat64SecondaryPrefix[]',
        'always_synthesize_aaaa_record' => 'string',
        'generate_ipv6_fragment_header' => 'string',
        'nat46_force_ipv4_packet_forwarding' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'nat64_prefix' => 'ipv6',
        'secondary_prefix_status' => null,
        'secondary_prefix' => null,
        'always_synthesize_aaaa_record' => null,
        'generate_ipv6_fragment_header' => null,
        'nat46_force_ipv4_packet_forwarding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'nat64_prefix' => 'nat64-prefix',
        'secondary_prefix_status' => 'secondary-prefix-status',
        'secondary_prefix' => 'secondary-prefix',
        'always_synthesize_aaaa_record' => 'always-synthesize-aaaa-record',
        'generate_ipv6_fragment_header' => 'generate-ipv6-fragment-header',
        'nat46_force_ipv4_packet_forwarding' => 'nat46-force-ipv4-packet-forwarding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'nat64_prefix' => 'setNat64Prefix',
        'secondary_prefix_status' => 'setSecondaryPrefixStatus',
        'secondary_prefix' => 'setSecondaryPrefix',
        'always_synthesize_aaaa_record' => 'setAlwaysSynthesizeAaaaRecord',
        'generate_ipv6_fragment_header' => 'setGenerateIpv6FragmentHeader',
        'nat46_force_ipv4_packet_forwarding' => 'setNat46ForceIpv4PacketForwarding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'nat64_prefix' => 'getNat64Prefix',
        'secondary_prefix_status' => 'getSecondaryPrefixStatus',
        'secondary_prefix' => 'getSecondaryPrefix',
        'always_synthesize_aaaa_record' => 'getAlwaysSynthesizeAaaaRecord',
        'generate_ipv6_fragment_header' => 'getGenerateIpv6FragmentHeader',
        'nat46_force_ipv4_packet_forwarding' => 'getNat46ForceIpv4PacketForwarding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SECONDARY_PREFIX_STATUS_ENABLE = 'enable';
    const SECONDARY_PREFIX_STATUS_DISABLE = 'disable';
    const ALWAYS_SYNTHESIZE_AAAA_RECORD_ENABLE = 'enable';
    const ALWAYS_SYNTHESIZE_AAAA_RECORD_DISABLE = 'disable';
    const GENERATE_IPV6_FRAGMENT_HEADER_ENABLE = 'enable';
    const GENERATE_IPV6_FRAGMENT_HEADER_DISABLE = 'disable';
    const NAT46_FORCE_IPV4_PACKET_FORWARDING_ENABLE = 'enable';
    const NAT46_FORCE_IPV4_PACKET_FORWARDING_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryPrefixStatusAllowableValues()
    {
        return [
            self::SECONDARY_PREFIX_STATUS_ENABLE,
            self::SECONDARY_PREFIX_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlwaysSynthesizeAaaaRecordAllowableValues()
    {
        return [
            self::ALWAYS_SYNTHESIZE_AAAA_RECORD_ENABLE,
            self::ALWAYS_SYNTHESIZE_AAAA_RECORD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenerateIpv6FragmentHeaderAllowableValues()
    {
        return [
            self::GENERATE_IPV6_FRAGMENT_HEADER_ENABLE,
            self::GENERATE_IPV6_FRAGMENT_HEADER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNat46ForceIpv4PacketForwardingAllowableValues()
    {
        return [
            self::NAT46_FORCE_IPV4_PACKET_FORWARDING_ENABLE,
            self::NAT46_FORCE_IPV4_PACKET_FORWARDING_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['nat64_prefix'] = $data['nat64_prefix'] ?? null;
        $this->container['secondary_prefix_status'] = $data['secondary_prefix_status'] ?? null;
        $this->container['secondary_prefix'] = $data['secondary_prefix'] ?? null;
        $this->container['always_synthesize_aaaa_record'] = $data['always_synthesize_aaaa_record'] ?? null;
        $this->container['generate_ipv6_fragment_header'] = $data['generate_ipv6_fragment_header'] ?? null;
        $this->container['nat46_force_ipv4_packet_forwarding'] = $data['nat46_force_ipv4_packet_forwarding'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondaryPrefixStatusAllowableValues();
        if (!is_null($this->container['secondary_prefix_status']) && !in_array($this->container['secondary_prefix_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secondary_prefix_status', must be one of '%s'",
                $this->container['secondary_prefix_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['secondary_prefix']) && (count($this->container['secondary_prefix']) > 0)) {
            $invalidProperties[] = "invalid value for 'secondary_prefix', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAlwaysSynthesizeAaaaRecordAllowableValues();
        if (!is_null($this->container['always_synthesize_aaaa_record']) && !in_array($this->container['always_synthesize_aaaa_record'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'always_synthesize_aaaa_record', must be one of '%s'",
                $this->container['always_synthesize_aaaa_record'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenerateIpv6FragmentHeaderAllowableValues();
        if (!is_null($this->container['generate_ipv6_fragment_header']) && !in_array($this->container['generate_ipv6_fragment_header'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'generate_ipv6_fragment_header', must be one of '%s'",
                $this->container['generate_ipv6_fragment_header'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNat46ForceIpv4PacketForwardingAllowableValues();
        if (!is_null($this->container['nat46_force_ipv4_packet_forwarding']) && !in_array($this->container['nat46_force_ipv4_packet_forwarding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nat46_force_ipv4_packet_forwarding', must be one of '%s'",
                $this->container['nat46_force_ipv4_packet_forwarding'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable NAT64 (default = disable).    enable:Enable NAT64.    disable:Disable NAT64.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nat64_prefix
     *
     * @return string|null
     */
    public function getNat64Prefix()
    {
        return $this->container['nat64_prefix'];
    }

    /**
     * Sets nat64_prefix
     *
     * @param string|null $nat64_prefix NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
     *
     * @return self
     */
    public function setNat64Prefix($nat64_prefix)
    {
        $this->container['nat64_prefix'] = $nat64_prefix;

        return $this;
    }

    /**
     * Gets secondary_prefix_status
     *
     * @return string|null
     */
    public function getSecondaryPrefixStatus()
    {
        return $this->container['secondary_prefix_status'];
    }

    /**
     * Sets secondary_prefix_status
     *
     * @param string|null $secondary_prefix_status Enable/disable secondary NAT64 prefix.    enable:Enable secondary NAT64.    disable:Disable secondary NAT64.
     *
     * @return self
     */
    public function setSecondaryPrefixStatus($secondary_prefix_status)
    {
        $allowedValues = $this->getSecondaryPrefixStatusAllowableValues();
        if (!is_null($secondary_prefix_status) && !in_array($secondary_prefix_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secondary_prefix_status', must be one of '%s'",
                    $secondary_prefix_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_prefix_status'] = $secondary_prefix_status;

        return $this;
    }

    /**
     * Gets secondary_prefix
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemNat64SecondaryPrefix[]|null
     */
    public function getSecondaryPrefix()
    {
        return $this->container['secondary_prefix'];
    }

    /**
     * Sets secondary_prefix
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemNat64SecondaryPrefix[]|null $secondary_prefix Secondary NAT64 prefix.
     *
     * @return self
     */
    public function setSecondaryPrefix($secondary_prefix)
    {

        if (!is_null($secondary_prefix) && (count($secondary_prefix) > 0)) {
            throw new \InvalidArgumentException('invalid value for $secondary_prefix when calling InlineObject344., number of items must be less than or equal to 0.');
        }
        $this->container['secondary_prefix'] = $secondary_prefix;

        return $this;
    }

    /**
     * Gets always_synthesize_aaaa_record
     *
     * @return string|null
     */
    public function getAlwaysSynthesizeAaaaRecord()
    {
        return $this->container['always_synthesize_aaaa_record'];
    }

    /**
     * Sets always_synthesize_aaaa_record
     *
     * @param string|null $always_synthesize_aaaa_record Enable/disable AAAA record synthesis (default = enable).    enable:Enable AAAA record synthesis.    disable:Disable AAAA record synthesis.
     *
     * @return self
     */
    public function setAlwaysSynthesizeAaaaRecord($always_synthesize_aaaa_record)
    {
        $allowedValues = $this->getAlwaysSynthesizeAaaaRecordAllowableValues();
        if (!is_null($always_synthesize_aaaa_record) && !in_array($always_synthesize_aaaa_record, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'always_synthesize_aaaa_record', must be one of '%s'",
                    $always_synthesize_aaaa_record,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['always_synthesize_aaaa_record'] = $always_synthesize_aaaa_record;

        return $this;
    }

    /**
     * Gets generate_ipv6_fragment_header
     *
     * @return string|null
     */
    public function getGenerateIpv6FragmentHeader()
    {
        return $this->container['generate_ipv6_fragment_header'];
    }

    /**
     * Sets generate_ipv6_fragment_header
     *
     * @param string|null $generate_ipv6_fragment_header Enable/disable IPv6 fragment header generation.    enable:Enable IPv6 fragment header generation.    disable:Disable IPv6 fragment header generation.
     *
     * @return self
     */
    public function setGenerateIpv6FragmentHeader($generate_ipv6_fragment_header)
    {
        $allowedValues = $this->getGenerateIpv6FragmentHeaderAllowableValues();
        if (!is_null($generate_ipv6_fragment_header) && !in_array($generate_ipv6_fragment_header, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'generate_ipv6_fragment_header', must be one of '%s'",
                    $generate_ipv6_fragment_header,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['generate_ipv6_fragment_header'] = $generate_ipv6_fragment_header;

        return $this;
    }

    /**
     * Gets nat46_force_ipv4_packet_forwarding
     *
     * @return string|null
     */
    public function getNat46ForceIpv4PacketForwarding()
    {
        return $this->container['nat46_force_ipv4_packet_forwarding'];
    }

    /**
     * Sets nat46_force_ipv4_packet_forwarding
     *
     * @param string|null $nat46_force_ipv4_packet_forwarding Enable/disable mandatory IPv4 packet forwarding in nat46.    enable:Enable mandatory IPv4 packet forwarding when IPv4 DF is set to 1.    disable:Disable mandatory IPv4 packet forwarding when IPv4 DF is set to 1.
     *
     * @return self
     */
    public function setNat46ForceIpv4PacketForwarding($nat46_force_ipv4_packet_forwarding)
    {
        $allowedValues = $this->getNat46ForceIpv4PacketForwardingAllowableValues();
        if (!is_null($nat46_force_ipv4_packet_forwarding) && !in_array($nat46_force_ipv4_packet_forwarding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nat46_force_ipv4_packet_forwarding', must be one of '%s'",
                    $nat46_force_ipv4_packet_forwarding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nat46_force_ipv4_packet_forwarding'] = $nat46_force_ipv4_packet_forwarding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


