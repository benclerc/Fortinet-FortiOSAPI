<?php
/**
 * InlineObject520
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject520 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject520 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_520';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'addr_type' => 'string',
        'ip' => 'string',
        'fqdn' => 'string',
        'port' => 'int',
        'healthcheck' => 'string',
        'monitor' => 'string',
        'server_down_option' => 'string',
        'username' => 'string',
        'password' => 'string',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'addr_type' => null,
        'ip' => 'ipv4',
        'fqdn' => null,
        'port' => null,
        'healthcheck' => null,
        'monitor' => null,
        'server_down_option' => null,
        'username' => null,
        'password' => 'password',
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'addr_type' => 'addr-type',
        'ip' => 'ip',
        'fqdn' => 'fqdn',
        'port' => 'port',
        'healthcheck' => 'healthcheck',
        'monitor' => 'monitor',
        'server_down_option' => 'server-down-option',
        'username' => 'username',
        'password' => 'password',
        'comment' => 'comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'addr_type' => 'setAddrType',
        'ip' => 'setIp',
        'fqdn' => 'setFqdn',
        'port' => 'setPort',
        'healthcheck' => 'setHealthcheck',
        'monitor' => 'setMonitor',
        'server_down_option' => 'setServerDownOption',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'addr_type' => 'getAddrType',
        'ip' => 'getIp',
        'fqdn' => 'getFqdn',
        'port' => 'getPort',
        'healthcheck' => 'getHealthcheck',
        'monitor' => 'getMonitor',
        'server_down_option' => 'getServerDownOption',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDR_TYPE_IP = 'ip';
    const ADDR_TYPE_FQDN = 'fqdn';
    const HEALTHCHECK_DISABLE = 'disable';
    const HEALTHCHECK_ENABLE = 'enable';
    const SERVER_DOWN_OPTION_BLOCK = 'block';
    const SERVER_DOWN_OPTION_PASS = 'pass';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrTypeAllowableValues()
    {
        return [
            self::ADDR_TYPE_IP,
            self::ADDR_TYPE_FQDN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHealthcheckAllowableValues()
    {
        return [
            self::HEALTHCHECK_DISABLE,
            self::HEALTHCHECK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerDownOptionAllowableValues()
    {
        return [
            self::SERVER_DOWN_OPTION_BLOCK,
            self::SERVER_DOWN_OPTION_PASS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['addr_type'] = $data['addr_type'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['fqdn'] = $data['fqdn'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['healthcheck'] = $data['healthcheck'] ?? null;
        $this->container['monitor'] = $data['monitor'] ?? null;
        $this->container['server_down_option'] = $data['server_down_option'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($this->container['addr_type']) && !in_array($this->container['addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_type', must be one of '%s'",
                $this->container['addr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fqdn']) && (mb_strlen($this->container['fqdn']) > 255)) {
            $invalidProperties[] = "invalid value for 'fqdn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getHealthcheckAllowableValues();
        if (!is_null($this->container['healthcheck']) && !in_array($this->container['healthcheck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'healthcheck', must be one of '%s'",
                $this->container['healthcheck'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['monitor']) && (mb_strlen($this->container['monitor']) > 255)) {
            $invalidProperties[] = "invalid value for 'monitor', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getServerDownOptionAllowableValues();
        if (!is_null($this->container['server_down_option']) && !in_array($this->container['server_down_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_down_option', must be one of '%s'",
                $this->container['server_down_option'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 64)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 63)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Server name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject520., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr_type
     *
     * @return string|null
     */
    public function getAddrType()
    {
        return $this->container['addr_type'];
    }

    /**
     * Sets addr_type
     *
     * @param string|null $addr_type Address type of the forwarding proxy server: IP or FQDN.    ip:Use an IP address for the forwarding proxy server.    fqdn:Use the FQDN for the forwarding proxy server.
     *
     * @return self
     */
    public function setAddrType($addr_type)
    {
        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($addr_type) && !in_array($addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_type', must be one of '%s'",
                    $addr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_type'] = $addr_type;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Forward proxy server IP address.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets fqdn
     *
     * @return string|null
     */
    public function getFqdn()
    {
        return $this->container['fqdn'];
    }

    /**
     * Sets fqdn
     *
     * @param string|null $fqdn Forward server Fully Qualified Domain Name (FQDN).
     *
     * @return self
     */
    public function setFqdn($fqdn)
    {
        if (!is_null($fqdn) && (mb_strlen($fqdn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fqdn when calling InlineObject520., must be smaller than or equal to 255.');
        }

        $this->container['fqdn'] = $fqdn;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject520., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject520., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets healthcheck
     *
     * @return string|null
     */
    public function getHealthcheck()
    {
        return $this->container['healthcheck'];
    }

    /**
     * Sets healthcheck
     *
     * @param string|null $healthcheck Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally.    disable:Disable health checking.    enable:Enable health checking.
     *
     * @return self
     */
    public function setHealthcheck($healthcheck)
    {
        $allowedValues = $this->getHealthcheckAllowableValues();
        if (!is_null($healthcheck) && !in_array($healthcheck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'healthcheck', must be one of '%s'",
                    $healthcheck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['healthcheck'] = $healthcheck;

        return $this;
    }

    /**
     * Gets monitor
     *
     * @return string|null
     */
    public function getMonitor()
    {
        return $this->container['monitor'];
    }

    /**
     * Sets monitor
     *
     * @param string|null $monitor URL for forward server health check monitoring (default = http://www.google.com).
     *
     * @return self
     */
    public function setMonitor($monitor)
    {
        if (!is_null($monitor) && (mb_strlen($monitor) > 255)) {
            throw new \InvalidArgumentException('invalid length for $monitor when calling InlineObject520., must be smaller than or equal to 255.');
        }

        $this->container['monitor'] = $monitor;

        return $this;
    }

    /**
     * Gets server_down_option
     *
     * @return string|null
     */
    public function getServerDownOption()
    {
        return $this->container['server_down_option'];
    }

    /**
     * Sets server_down_option
     *
     * @param string|null $server_down_option Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination.    block:Block sessions until the server is back up.    pass:Pass sessions to their destination bypassing the forward server.
     *
     * @return self
     */
    public function setServerDownOption($server_down_option)
    {
        $allowedValues = $this->getServerDownOptionAllowableValues();
        if (!is_null($server_down_option) && !in_array($server_down_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_down_option', must be one of '%s'",
                    $server_down_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_down_option'] = $server_down_option;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username HTTP authentication user name.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject520., must be smaller than or equal to 64.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password HTTP authentication password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 63)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject520., must be smaller than or equal to 63.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


