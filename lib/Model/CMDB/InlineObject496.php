<?php
/**
 * InlineObject496
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject496 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject496 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_496';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'eip' => 'string',
        'sip' => 'string',
        'usrgrp' => 'string',
        'enforce_ipsec' => 'string',
        'lcp_echo_interval' => 'int',
        'lcp_max_echo_fails' => 'int',
        'compress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'eip' => 'ipv4',
        'sip' => 'ipv4',
        'usrgrp' => null,
        'enforce_ipsec' => null,
        'lcp_echo_interval' => null,
        'lcp_max_echo_fails' => null,
        'compress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'eip' => 'eip',
        'sip' => 'sip',
        'usrgrp' => 'usrgrp',
        'enforce_ipsec' => 'enforce-ipsec',
        'lcp_echo_interval' => 'lcp-echo-interval',
        'lcp_max_echo_fails' => 'lcp-max-echo-fails',
        'compress' => 'compress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'eip' => 'setEip',
        'sip' => 'setSip',
        'usrgrp' => 'setUsrgrp',
        'enforce_ipsec' => 'setEnforceIpsec',
        'lcp_echo_interval' => 'setLcpEchoInterval',
        'lcp_max_echo_fails' => 'setLcpMaxEchoFails',
        'compress' => 'setCompress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'eip' => 'getEip',
        'sip' => 'getSip',
        'usrgrp' => 'getUsrgrp',
        'enforce_ipsec' => 'getEnforceIpsec',
        'lcp_echo_interval' => 'getLcpEchoInterval',
        'lcp_max_echo_fails' => 'getLcpMaxEchoFails',
        'compress' => 'getCompress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const ENFORCE_IPSEC_ENABLE = 'enable';
    const ENFORCE_IPSEC_DISABLE = 'disable';
    const COMPRESS_ENABLE = 'enable';
    const COMPRESS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnforceIpsecAllowableValues()
    {
        return [
            self::ENFORCE_IPSEC_ENABLE,
            self::ENFORCE_IPSEC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompressAllowableValues()
    {
        return [
            self::COMPRESS_ENABLE,
            self::COMPRESS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['eip'] = $data['eip'] ?? null;
        $this->container['sip'] = $data['sip'] ?? null;
        $this->container['usrgrp'] = $data['usrgrp'] ?? null;
        $this->container['enforce_ipsec'] = $data['enforce_ipsec'] ?? null;
        $this->container['lcp_echo_interval'] = $data['lcp_echo_interval'] ?? null;
        $this->container['lcp_max_echo_fails'] = $data['lcp_max_echo_fails'] ?? null;
        $this->container['compress'] = $data['compress'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['usrgrp']) && (mb_strlen($this->container['usrgrp']) > 35)) {
            $invalidProperties[] = "invalid value for 'usrgrp', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getEnforceIpsecAllowableValues();
        if (!is_null($this->container['enforce_ipsec']) && !in_array($this->container['enforce_ipsec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enforce_ipsec', must be one of '%s'",
                $this->container['enforce_ipsec'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lcp_echo_interval']) && ($this->container['lcp_echo_interval'] > 32767)) {
            $invalidProperties[] = "invalid value for 'lcp_echo_interval', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['lcp_echo_interval']) && ($this->container['lcp_echo_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'lcp_echo_interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lcp_max_echo_fails']) && ($this->container['lcp_max_echo_fails'] > 32767)) {
            $invalidProperties[] = "invalid value for 'lcp_max_echo_fails', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['lcp_max_echo_fails']) && ($this->container['lcp_max_echo_fails'] < 0)) {
            $invalidProperties[] = "invalid value for 'lcp_max_echo_fails', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCompressAllowableValues();
        if (!is_null($this->container['compress']) && !in_array($this->container['compress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'compress', must be one of '%s'",
                $this->container['compress'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable FortiGate as a L2TP gateway.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets eip
     *
     * @return string|null
     */
    public function getEip()
    {
        return $this->container['eip'];
    }

    /**
     * Sets eip
     *
     * @param string|null $eip End IP.
     *
     * @return self
     */
    public function setEip($eip)
    {
        $this->container['eip'] = $eip;

        return $this;
    }

    /**
     * Gets sip
     *
     * @return string|null
     */
    public function getSip()
    {
        return $this->container['sip'];
    }

    /**
     * Sets sip
     *
     * @param string|null $sip Start IP.
     *
     * @return self
     */
    public function setSip($sip)
    {
        $this->container['sip'] = $sip;

        return $this;
    }

    /**
     * Gets usrgrp
     *
     * @return string|null
     */
    public function getUsrgrp()
    {
        return $this->container['usrgrp'];
    }

    /**
     * Sets usrgrp
     *
     * @param string|null $usrgrp User group.
     *
     * @return self
     */
    public function setUsrgrp($usrgrp)
    {
        if (!is_null($usrgrp) && (mb_strlen($usrgrp) > 35)) {
            throw new \InvalidArgumentException('invalid length for $usrgrp when calling InlineObject496., must be smaller than or equal to 35.');
        }

        $this->container['usrgrp'] = $usrgrp;

        return $this;
    }

    /**
     * Gets enforce_ipsec
     *
     * @return string|null
     */
    public function getEnforceIpsec()
    {
        return $this->container['enforce_ipsec'];
    }

    /**
     * Sets enforce_ipsec
     *
     * @param string|null $enforce_ipsec Enable/disable IPsec enforcement.    enable:Enable enforce-ipsec    disable:Disable enforce-ipsec
     *
     * @return self
     */
    public function setEnforceIpsec($enforce_ipsec)
    {
        $allowedValues = $this->getEnforceIpsecAllowableValues();
        if (!is_null($enforce_ipsec) && !in_array($enforce_ipsec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enforce_ipsec', must be one of '%s'",
                    $enforce_ipsec,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enforce_ipsec'] = $enforce_ipsec;

        return $this;
    }

    /**
     * Gets lcp_echo_interval
     *
     * @return int|null
     */
    public function getLcpEchoInterval()
    {
        return $this->container['lcp_echo_interval'];
    }

    /**
     * Sets lcp_echo_interval
     *
     * @param int|null $lcp_echo_interval Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     *
     * @return self
     */
    public function setLcpEchoInterval($lcp_echo_interval)
    {

        if (!is_null($lcp_echo_interval) && ($lcp_echo_interval > 32767)) {
            throw new \InvalidArgumentException('invalid value for $lcp_echo_interval when calling InlineObject496., must be smaller than or equal to 32767.');
        }
        if (!is_null($lcp_echo_interval) && ($lcp_echo_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $lcp_echo_interval when calling InlineObject496., must be bigger than or equal to 0.');
        }

        $this->container['lcp_echo_interval'] = $lcp_echo_interval;

        return $this;
    }

    /**
     * Gets lcp_max_echo_fails
     *
     * @return int|null
     */
    public function getLcpMaxEchoFails()
    {
        return $this->container['lcp_max_echo_fails'];
    }

    /**
     * Sets lcp_max_echo_fails
     *
     * @param int|null $lcp_max_echo_fails Maximum number of missed LCP echo messages before disconnect.
     *
     * @return self
     */
    public function setLcpMaxEchoFails($lcp_max_echo_fails)
    {

        if (!is_null($lcp_max_echo_fails) && ($lcp_max_echo_fails > 32767)) {
            throw new \InvalidArgumentException('invalid value for $lcp_max_echo_fails when calling InlineObject496., must be smaller than or equal to 32767.');
        }
        if (!is_null($lcp_max_echo_fails) && ($lcp_max_echo_fails < 0)) {
            throw new \InvalidArgumentException('invalid value for $lcp_max_echo_fails when calling InlineObject496., must be bigger than or equal to 0.');
        }

        $this->container['lcp_max_echo_fails'] = $lcp_max_echo_fails;

        return $this;
    }

    /**
     * Gets compress
     *
     * @return string|null
     */
    public function getCompress()
    {
        return $this->container['compress'];
    }

    /**
     * Sets compress
     *
     * @param string|null $compress Enable/disable data compression.    enable:Enable compress    disable:Disable compress
     *
     * @return self
     */
    public function setCompress($compress)
    {
        $allowedValues = $this->getCompressAllowableValues();
        if (!is_null($compress) && !in_array($compress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'compress', must be one of '%s'",
                    $compress,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compress'] = $compress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


