<?php
/**
 * InlineObject374
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject374 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject374 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_374';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comments' => 'string',
        'opmode' => 'string',
        'ngfw_mode' => 'string',
        'http_external_dest' => 'string',
        'firewall_session_dirty' => 'string',
        'manageip' => 'string',
        'gateway' => 'string',
        'ip' => 'string',
        'manageip6' => 'string',
        'gateway6' => 'string',
        'ip6' => 'string',
        'device' => 'string',
        'bfd' => 'string',
        'bfd_desired_min_tx' => 'int',
        'bfd_required_min_rx' => 'int',
        'bfd_detect_mult' => 'int',
        'bfd_dont_enforce_src_port' => 'string',
        'utf8_spam_tagging' => 'string',
        'wccp_cache_engine' => 'string',
        'vpn_stats_log' => 'string',
        'vpn_stats_period' => 'int',
        'v4_ecmp_mode' => 'string',
        'mac_ttl' => 'int',
        'fw_session_hairpin' => 'string',
        'prp_trailer_action' => 'string',
        'snat_hairpin_traffic' => 'string',
        'dhcp_proxy' => 'string',
        'dhcp_proxy_interface_select_method' => 'string',
        'dhcp_proxy_interface' => 'string',
        'dhcp_server_ip' => 'string',
        'dhcp6_server_ip' => 'string',
        'central_nat' => 'string',
        'gui_default_policy_columns' => '\Fortigate\FortiOS\Model\CMDB\SystemSettingsGuiDefaultPolicyColumns[]',
        'lldp_reception' => 'string',
        'lldp_transmission' => 'string',
        'link_down_access' => 'string',
        'auxiliary_session' => 'string',
        'asymroute' => 'string',
        'asymroute_icmp' => 'string',
        'tcp_session_without_syn' => 'string',
        'ses_denied_traffic' => 'string',
        'strict_src_check' => 'string',
        'allow_linkdown_path' => 'string',
        'asymroute6' => 'string',
        'asymroute6_icmp' => 'string',
        'sctp_session_without_init' => 'string',
        'sip_expectation' => 'string',
        'sip_nat_trace' => 'string',
        'status' => 'string',
        'sip_tcp_port' => 'int',
        'sip_udp_port' => 'int',
        'sip_ssl_port' => 'int',
        'sccp_port' => 'int',
        'multicast_forward' => 'string',
        'multicast_ttl_notchange' => 'string',
        'multicast_skip_policy' => 'string',
        'allow_subnet_overlap' => 'string',
        'deny_tcp_with_icmp' => 'string',
        'ecmp_max_paths' => 'int',
        'discovered_device_timeout' => 'int',
        'email_portal_check_dns' => 'string',
        'default_voip_alg_mode' => 'string',
        'gui_icap' => 'string',
        'gui_nat46_64' => 'string',
        'gui_implicit_policy' => 'string',
        'gui_dns_database' => 'string',
        'gui_load_balance' => 'string',
        'gui_multicast_policy' => 'string',
        'gui_dos_policy' => 'string',
        'gui_object_colors' => 'string',
        'gui_replacement_message_groups' => 'string',
        'gui_voip_profile' => 'string',
        'gui_ap_profile' => 'string',
        'gui_security_profile_group' => 'string',
        'gui_local_in_policy' => 'string',
        'gui_local_reports' => 'string',
        'gui_wanopt_cache' => 'string',
        'gui_explicit_proxy' => 'string',
        'gui_dynamic_routing' => 'string',
        'gui_sslvpn_personal_bookmarks' => 'string',
        'gui_sslvpn_realms' => 'string',
        'gui_policy_based_ipsec' => 'string',
        'gui_threat_weight' => 'string',
        'gui_spamfilter' => 'string',
        'gui_file_filter' => 'string',
        'gui_application_control' => 'string',
        'gui_ips' => 'string',
        'gui_endpoint_control' => 'string',
        'gui_endpoint_control_advanced' => 'string',
        'gui_dhcp_advanced' => 'string',
        'gui_vpn' => 'string',
        'gui_wireless_controller' => 'string',
        'gui_switch_controller' => 'string',
        'gui_fortiap_split_tunneling' => 'string',
        'gui_webfilter_advanced' => 'string',
        'gui_traffic_shaping' => 'string',
        'gui_wan_load_balancing' => 'string',
        'gui_antivirus' => 'string',
        'gui_webfilter' => 'string',
        'gui_dnsfilter' => 'string',
        'gui_waf_profile' => 'string',
        'gui_fortiextender_controller' => 'string',
        'gui_advanced_policy' => 'string',
        'gui_allow_unnamed_policy' => 'string',
        'gui_email_collection' => 'string',
        'gui_multiple_interface_policy' => 'string',
        'gui_policy_disclaimer' => 'string',
        'ike_session_resume' => 'string',
        'ike_quick_crash_detect' => 'string',
        'ike_dn_format' => 'string',
        'block_land_attack' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'comments' => null,
        'opmode' => null,
        'ngfw_mode' => null,
        'http_external_dest' => null,
        'firewall_session_dirty' => null,
        'manageip' => null,
        'gateway' => 'ipv4',
        'ip' => 'ipv4',
        'manageip6' => 'ipv6',
        'gateway6' => 'ipv6',
        'ip6' => 'ipv6',
        'device' => null,
        'bfd' => null,
        'bfd_desired_min_tx' => null,
        'bfd_required_min_rx' => null,
        'bfd_detect_mult' => null,
        'bfd_dont_enforce_src_port' => null,
        'utf8_spam_tagging' => null,
        'wccp_cache_engine' => null,
        'vpn_stats_log' => null,
        'vpn_stats_period' => null,
        'v4_ecmp_mode' => null,
        'mac_ttl' => null,
        'fw_session_hairpin' => null,
        'prp_trailer_action' => null,
        'snat_hairpin_traffic' => null,
        'dhcp_proxy' => null,
        'dhcp_proxy_interface_select_method' => null,
        'dhcp_proxy_interface' => null,
        'dhcp_server_ip' => null,
        'dhcp6_server_ip' => null,
        'central_nat' => null,
        'gui_default_policy_columns' => null,
        'lldp_reception' => null,
        'lldp_transmission' => null,
        'link_down_access' => null,
        'auxiliary_session' => null,
        'asymroute' => null,
        'asymroute_icmp' => null,
        'tcp_session_without_syn' => null,
        'ses_denied_traffic' => null,
        'strict_src_check' => null,
        'allow_linkdown_path' => null,
        'asymroute6' => null,
        'asymroute6_icmp' => null,
        'sctp_session_without_init' => null,
        'sip_expectation' => null,
        'sip_nat_trace' => null,
        'status' => null,
        'sip_tcp_port' => null,
        'sip_udp_port' => null,
        'sip_ssl_port' => null,
        'sccp_port' => null,
        'multicast_forward' => null,
        'multicast_ttl_notchange' => null,
        'multicast_skip_policy' => null,
        'allow_subnet_overlap' => null,
        'deny_tcp_with_icmp' => null,
        'ecmp_max_paths' => null,
        'discovered_device_timeout' => null,
        'email_portal_check_dns' => null,
        'default_voip_alg_mode' => null,
        'gui_icap' => null,
        'gui_nat46_64' => null,
        'gui_implicit_policy' => null,
        'gui_dns_database' => null,
        'gui_load_balance' => null,
        'gui_multicast_policy' => null,
        'gui_dos_policy' => null,
        'gui_object_colors' => null,
        'gui_replacement_message_groups' => null,
        'gui_voip_profile' => null,
        'gui_ap_profile' => null,
        'gui_security_profile_group' => null,
        'gui_local_in_policy' => null,
        'gui_local_reports' => null,
        'gui_wanopt_cache' => null,
        'gui_explicit_proxy' => null,
        'gui_dynamic_routing' => null,
        'gui_sslvpn_personal_bookmarks' => null,
        'gui_sslvpn_realms' => null,
        'gui_policy_based_ipsec' => null,
        'gui_threat_weight' => null,
        'gui_spamfilter' => null,
        'gui_file_filter' => null,
        'gui_application_control' => null,
        'gui_ips' => null,
        'gui_endpoint_control' => null,
        'gui_endpoint_control_advanced' => null,
        'gui_dhcp_advanced' => null,
        'gui_vpn' => null,
        'gui_wireless_controller' => null,
        'gui_switch_controller' => null,
        'gui_fortiap_split_tunneling' => null,
        'gui_webfilter_advanced' => null,
        'gui_traffic_shaping' => null,
        'gui_wan_load_balancing' => null,
        'gui_antivirus' => null,
        'gui_webfilter' => null,
        'gui_dnsfilter' => null,
        'gui_waf_profile' => null,
        'gui_fortiextender_controller' => null,
        'gui_advanced_policy' => null,
        'gui_allow_unnamed_policy' => null,
        'gui_email_collection' => null,
        'gui_multiple_interface_policy' => null,
        'gui_policy_disclaimer' => null,
        'ike_session_resume' => null,
        'ike_quick_crash_detect' => null,
        'ike_dn_format' => null,
        'block_land_attack' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comments' => 'comments',
        'opmode' => 'opmode',
        'ngfw_mode' => 'ngfw-mode',
        'http_external_dest' => 'http-external-dest',
        'firewall_session_dirty' => 'firewall-session-dirty',
        'manageip' => 'manageip',
        'gateway' => 'gateway',
        'ip' => 'ip',
        'manageip6' => 'manageip6',
        'gateway6' => 'gateway6',
        'ip6' => 'ip6',
        'device' => 'device',
        'bfd' => 'bfd',
        'bfd_desired_min_tx' => 'bfd-desired-min-tx',
        'bfd_required_min_rx' => 'bfd-required-min-rx',
        'bfd_detect_mult' => 'bfd-detect-mult',
        'bfd_dont_enforce_src_port' => 'bfd-dont-enforce-src-port',
        'utf8_spam_tagging' => 'utf8-spam-tagging',
        'wccp_cache_engine' => 'wccp-cache-engine',
        'vpn_stats_log' => 'vpn-stats-log',
        'vpn_stats_period' => 'vpn-stats-period',
        'v4_ecmp_mode' => 'v4-ecmp-mode',
        'mac_ttl' => 'mac-ttl',
        'fw_session_hairpin' => 'fw-session-hairpin',
        'prp_trailer_action' => 'prp-trailer-action',
        'snat_hairpin_traffic' => 'snat-hairpin-traffic',
        'dhcp_proxy' => 'dhcp-proxy',
        'dhcp_proxy_interface_select_method' => 'dhcp-proxy-interface-select-method',
        'dhcp_proxy_interface' => 'dhcp-proxy-interface',
        'dhcp_server_ip' => 'dhcp-server-ip',
        'dhcp6_server_ip' => 'dhcp6-server-ip',
        'central_nat' => 'central-nat',
        'gui_default_policy_columns' => 'gui-default-policy-columns',
        'lldp_reception' => 'lldp-reception',
        'lldp_transmission' => 'lldp-transmission',
        'link_down_access' => 'link-down-access',
        'auxiliary_session' => 'auxiliary-session',
        'asymroute' => 'asymroute',
        'asymroute_icmp' => 'asymroute-icmp',
        'tcp_session_without_syn' => 'tcp-session-without-syn',
        'ses_denied_traffic' => 'ses-denied-traffic',
        'strict_src_check' => 'strict-src-check',
        'allow_linkdown_path' => 'allow-linkdown-path',
        'asymroute6' => 'asymroute6',
        'asymroute6_icmp' => 'asymroute6-icmp',
        'sctp_session_without_init' => 'sctp-session-without-init',
        'sip_expectation' => 'sip-expectation',
        'sip_nat_trace' => 'sip-nat-trace',
        'status' => 'status',
        'sip_tcp_port' => 'sip-tcp-port',
        'sip_udp_port' => 'sip-udp-port',
        'sip_ssl_port' => 'sip-ssl-port',
        'sccp_port' => 'sccp-port',
        'multicast_forward' => 'multicast-forward',
        'multicast_ttl_notchange' => 'multicast-ttl-notchange',
        'multicast_skip_policy' => 'multicast-skip-policy',
        'allow_subnet_overlap' => 'allow-subnet-overlap',
        'deny_tcp_with_icmp' => 'deny-tcp-with-icmp',
        'ecmp_max_paths' => 'ecmp-max-paths',
        'discovered_device_timeout' => 'discovered-device-timeout',
        'email_portal_check_dns' => 'email-portal-check-dns',
        'default_voip_alg_mode' => 'default-voip-alg-mode',
        'gui_icap' => 'gui-icap',
        'gui_nat46_64' => 'gui-nat46-64',
        'gui_implicit_policy' => 'gui-implicit-policy',
        'gui_dns_database' => 'gui-dns-database',
        'gui_load_balance' => 'gui-load-balance',
        'gui_multicast_policy' => 'gui-multicast-policy',
        'gui_dos_policy' => 'gui-dos-policy',
        'gui_object_colors' => 'gui-object-colors',
        'gui_replacement_message_groups' => 'gui-replacement-message-groups',
        'gui_voip_profile' => 'gui-voip-profile',
        'gui_ap_profile' => 'gui-ap-profile',
        'gui_security_profile_group' => 'gui-security-profile-group',
        'gui_local_in_policy' => 'gui-local-in-policy',
        'gui_local_reports' => 'gui-local-reports',
        'gui_wanopt_cache' => 'gui-wanopt-cache',
        'gui_explicit_proxy' => 'gui-explicit-proxy',
        'gui_dynamic_routing' => 'gui-dynamic-routing',
        'gui_sslvpn_personal_bookmarks' => 'gui-sslvpn-personal-bookmarks',
        'gui_sslvpn_realms' => 'gui-sslvpn-realms',
        'gui_policy_based_ipsec' => 'gui-policy-based-ipsec',
        'gui_threat_weight' => 'gui-threat-weight',
        'gui_spamfilter' => 'gui-spamfilter',
        'gui_file_filter' => 'gui-file-filter',
        'gui_application_control' => 'gui-application-control',
        'gui_ips' => 'gui-ips',
        'gui_endpoint_control' => 'gui-endpoint-control',
        'gui_endpoint_control_advanced' => 'gui-endpoint-control-advanced',
        'gui_dhcp_advanced' => 'gui-dhcp-advanced',
        'gui_vpn' => 'gui-vpn',
        'gui_wireless_controller' => 'gui-wireless-controller',
        'gui_switch_controller' => 'gui-switch-controller',
        'gui_fortiap_split_tunneling' => 'gui-fortiap-split-tunneling',
        'gui_webfilter_advanced' => 'gui-webfilter-advanced',
        'gui_traffic_shaping' => 'gui-traffic-shaping',
        'gui_wan_load_balancing' => 'gui-wan-load-balancing',
        'gui_antivirus' => 'gui-antivirus',
        'gui_webfilter' => 'gui-webfilter',
        'gui_dnsfilter' => 'gui-dnsfilter',
        'gui_waf_profile' => 'gui-waf-profile',
        'gui_fortiextender_controller' => 'gui-fortiextender-controller',
        'gui_advanced_policy' => 'gui-advanced-policy',
        'gui_allow_unnamed_policy' => 'gui-allow-unnamed-policy',
        'gui_email_collection' => 'gui-email-collection',
        'gui_multiple_interface_policy' => 'gui-multiple-interface-policy',
        'gui_policy_disclaimer' => 'gui-policy-disclaimer',
        'ike_session_resume' => 'ike-session-resume',
        'ike_quick_crash_detect' => 'ike-quick-crash-detect',
        'ike_dn_format' => 'ike-dn-format',
        'block_land_attack' => 'block-land-attack'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comments' => 'setComments',
        'opmode' => 'setOpmode',
        'ngfw_mode' => 'setNgfwMode',
        'http_external_dest' => 'setHttpExternalDest',
        'firewall_session_dirty' => 'setFirewallSessionDirty',
        'manageip' => 'setManageip',
        'gateway' => 'setGateway',
        'ip' => 'setIp',
        'manageip6' => 'setManageip6',
        'gateway6' => 'setGateway6',
        'ip6' => 'setIp6',
        'device' => 'setDevice',
        'bfd' => 'setBfd',
        'bfd_desired_min_tx' => 'setBfdDesiredMinTx',
        'bfd_required_min_rx' => 'setBfdRequiredMinRx',
        'bfd_detect_mult' => 'setBfdDetectMult',
        'bfd_dont_enforce_src_port' => 'setBfdDontEnforceSrcPort',
        'utf8_spam_tagging' => 'setUtf8SpamTagging',
        'wccp_cache_engine' => 'setWccpCacheEngine',
        'vpn_stats_log' => 'setVpnStatsLog',
        'vpn_stats_period' => 'setVpnStatsPeriod',
        'v4_ecmp_mode' => 'setV4EcmpMode',
        'mac_ttl' => 'setMacTtl',
        'fw_session_hairpin' => 'setFwSessionHairpin',
        'prp_trailer_action' => 'setPrpTrailerAction',
        'snat_hairpin_traffic' => 'setSnatHairpinTraffic',
        'dhcp_proxy' => 'setDhcpProxy',
        'dhcp_proxy_interface_select_method' => 'setDhcpProxyInterfaceSelectMethod',
        'dhcp_proxy_interface' => 'setDhcpProxyInterface',
        'dhcp_server_ip' => 'setDhcpServerIp',
        'dhcp6_server_ip' => 'setDhcp6ServerIp',
        'central_nat' => 'setCentralNat',
        'gui_default_policy_columns' => 'setGuiDefaultPolicyColumns',
        'lldp_reception' => 'setLldpReception',
        'lldp_transmission' => 'setLldpTransmission',
        'link_down_access' => 'setLinkDownAccess',
        'auxiliary_session' => 'setAuxiliarySession',
        'asymroute' => 'setAsymroute',
        'asymroute_icmp' => 'setAsymrouteIcmp',
        'tcp_session_without_syn' => 'setTcpSessionWithoutSyn',
        'ses_denied_traffic' => 'setSesDeniedTraffic',
        'strict_src_check' => 'setStrictSrcCheck',
        'allow_linkdown_path' => 'setAllowLinkdownPath',
        'asymroute6' => 'setAsymroute6',
        'asymroute6_icmp' => 'setAsymroute6Icmp',
        'sctp_session_without_init' => 'setSctpSessionWithoutInit',
        'sip_expectation' => 'setSipExpectation',
        'sip_nat_trace' => 'setSipNatTrace',
        'status' => 'setStatus',
        'sip_tcp_port' => 'setSipTcpPort',
        'sip_udp_port' => 'setSipUdpPort',
        'sip_ssl_port' => 'setSipSslPort',
        'sccp_port' => 'setSccpPort',
        'multicast_forward' => 'setMulticastForward',
        'multicast_ttl_notchange' => 'setMulticastTtlNotchange',
        'multicast_skip_policy' => 'setMulticastSkipPolicy',
        'allow_subnet_overlap' => 'setAllowSubnetOverlap',
        'deny_tcp_with_icmp' => 'setDenyTcpWithIcmp',
        'ecmp_max_paths' => 'setEcmpMaxPaths',
        'discovered_device_timeout' => 'setDiscoveredDeviceTimeout',
        'email_portal_check_dns' => 'setEmailPortalCheckDns',
        'default_voip_alg_mode' => 'setDefaultVoipAlgMode',
        'gui_icap' => 'setGuiIcap',
        'gui_nat46_64' => 'setGuiNat4664',
        'gui_implicit_policy' => 'setGuiImplicitPolicy',
        'gui_dns_database' => 'setGuiDnsDatabase',
        'gui_load_balance' => 'setGuiLoadBalance',
        'gui_multicast_policy' => 'setGuiMulticastPolicy',
        'gui_dos_policy' => 'setGuiDosPolicy',
        'gui_object_colors' => 'setGuiObjectColors',
        'gui_replacement_message_groups' => 'setGuiReplacementMessageGroups',
        'gui_voip_profile' => 'setGuiVoipProfile',
        'gui_ap_profile' => 'setGuiApProfile',
        'gui_security_profile_group' => 'setGuiSecurityProfileGroup',
        'gui_local_in_policy' => 'setGuiLocalInPolicy',
        'gui_local_reports' => 'setGuiLocalReports',
        'gui_wanopt_cache' => 'setGuiWanoptCache',
        'gui_explicit_proxy' => 'setGuiExplicitProxy',
        'gui_dynamic_routing' => 'setGuiDynamicRouting',
        'gui_sslvpn_personal_bookmarks' => 'setGuiSslvpnPersonalBookmarks',
        'gui_sslvpn_realms' => 'setGuiSslvpnRealms',
        'gui_policy_based_ipsec' => 'setGuiPolicyBasedIpsec',
        'gui_threat_weight' => 'setGuiThreatWeight',
        'gui_spamfilter' => 'setGuiSpamfilter',
        'gui_file_filter' => 'setGuiFileFilter',
        'gui_application_control' => 'setGuiApplicationControl',
        'gui_ips' => 'setGuiIps',
        'gui_endpoint_control' => 'setGuiEndpointControl',
        'gui_endpoint_control_advanced' => 'setGuiEndpointControlAdvanced',
        'gui_dhcp_advanced' => 'setGuiDhcpAdvanced',
        'gui_vpn' => 'setGuiVpn',
        'gui_wireless_controller' => 'setGuiWirelessController',
        'gui_switch_controller' => 'setGuiSwitchController',
        'gui_fortiap_split_tunneling' => 'setGuiFortiapSplitTunneling',
        'gui_webfilter_advanced' => 'setGuiWebfilterAdvanced',
        'gui_traffic_shaping' => 'setGuiTrafficShaping',
        'gui_wan_load_balancing' => 'setGuiWanLoadBalancing',
        'gui_antivirus' => 'setGuiAntivirus',
        'gui_webfilter' => 'setGuiWebfilter',
        'gui_dnsfilter' => 'setGuiDnsfilter',
        'gui_waf_profile' => 'setGuiWafProfile',
        'gui_fortiextender_controller' => 'setGuiFortiextenderController',
        'gui_advanced_policy' => 'setGuiAdvancedPolicy',
        'gui_allow_unnamed_policy' => 'setGuiAllowUnnamedPolicy',
        'gui_email_collection' => 'setGuiEmailCollection',
        'gui_multiple_interface_policy' => 'setGuiMultipleInterfacePolicy',
        'gui_policy_disclaimer' => 'setGuiPolicyDisclaimer',
        'ike_session_resume' => 'setIkeSessionResume',
        'ike_quick_crash_detect' => 'setIkeQuickCrashDetect',
        'ike_dn_format' => 'setIkeDnFormat',
        'block_land_attack' => 'setBlockLandAttack'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comments' => 'getComments',
        'opmode' => 'getOpmode',
        'ngfw_mode' => 'getNgfwMode',
        'http_external_dest' => 'getHttpExternalDest',
        'firewall_session_dirty' => 'getFirewallSessionDirty',
        'manageip' => 'getManageip',
        'gateway' => 'getGateway',
        'ip' => 'getIp',
        'manageip6' => 'getManageip6',
        'gateway6' => 'getGateway6',
        'ip6' => 'getIp6',
        'device' => 'getDevice',
        'bfd' => 'getBfd',
        'bfd_desired_min_tx' => 'getBfdDesiredMinTx',
        'bfd_required_min_rx' => 'getBfdRequiredMinRx',
        'bfd_detect_mult' => 'getBfdDetectMult',
        'bfd_dont_enforce_src_port' => 'getBfdDontEnforceSrcPort',
        'utf8_spam_tagging' => 'getUtf8SpamTagging',
        'wccp_cache_engine' => 'getWccpCacheEngine',
        'vpn_stats_log' => 'getVpnStatsLog',
        'vpn_stats_period' => 'getVpnStatsPeriod',
        'v4_ecmp_mode' => 'getV4EcmpMode',
        'mac_ttl' => 'getMacTtl',
        'fw_session_hairpin' => 'getFwSessionHairpin',
        'prp_trailer_action' => 'getPrpTrailerAction',
        'snat_hairpin_traffic' => 'getSnatHairpinTraffic',
        'dhcp_proxy' => 'getDhcpProxy',
        'dhcp_proxy_interface_select_method' => 'getDhcpProxyInterfaceSelectMethod',
        'dhcp_proxy_interface' => 'getDhcpProxyInterface',
        'dhcp_server_ip' => 'getDhcpServerIp',
        'dhcp6_server_ip' => 'getDhcp6ServerIp',
        'central_nat' => 'getCentralNat',
        'gui_default_policy_columns' => 'getGuiDefaultPolicyColumns',
        'lldp_reception' => 'getLldpReception',
        'lldp_transmission' => 'getLldpTransmission',
        'link_down_access' => 'getLinkDownAccess',
        'auxiliary_session' => 'getAuxiliarySession',
        'asymroute' => 'getAsymroute',
        'asymroute_icmp' => 'getAsymrouteIcmp',
        'tcp_session_without_syn' => 'getTcpSessionWithoutSyn',
        'ses_denied_traffic' => 'getSesDeniedTraffic',
        'strict_src_check' => 'getStrictSrcCheck',
        'allow_linkdown_path' => 'getAllowLinkdownPath',
        'asymroute6' => 'getAsymroute6',
        'asymroute6_icmp' => 'getAsymroute6Icmp',
        'sctp_session_without_init' => 'getSctpSessionWithoutInit',
        'sip_expectation' => 'getSipExpectation',
        'sip_nat_trace' => 'getSipNatTrace',
        'status' => 'getStatus',
        'sip_tcp_port' => 'getSipTcpPort',
        'sip_udp_port' => 'getSipUdpPort',
        'sip_ssl_port' => 'getSipSslPort',
        'sccp_port' => 'getSccpPort',
        'multicast_forward' => 'getMulticastForward',
        'multicast_ttl_notchange' => 'getMulticastTtlNotchange',
        'multicast_skip_policy' => 'getMulticastSkipPolicy',
        'allow_subnet_overlap' => 'getAllowSubnetOverlap',
        'deny_tcp_with_icmp' => 'getDenyTcpWithIcmp',
        'ecmp_max_paths' => 'getEcmpMaxPaths',
        'discovered_device_timeout' => 'getDiscoveredDeviceTimeout',
        'email_portal_check_dns' => 'getEmailPortalCheckDns',
        'default_voip_alg_mode' => 'getDefaultVoipAlgMode',
        'gui_icap' => 'getGuiIcap',
        'gui_nat46_64' => 'getGuiNat4664',
        'gui_implicit_policy' => 'getGuiImplicitPolicy',
        'gui_dns_database' => 'getGuiDnsDatabase',
        'gui_load_balance' => 'getGuiLoadBalance',
        'gui_multicast_policy' => 'getGuiMulticastPolicy',
        'gui_dos_policy' => 'getGuiDosPolicy',
        'gui_object_colors' => 'getGuiObjectColors',
        'gui_replacement_message_groups' => 'getGuiReplacementMessageGroups',
        'gui_voip_profile' => 'getGuiVoipProfile',
        'gui_ap_profile' => 'getGuiApProfile',
        'gui_security_profile_group' => 'getGuiSecurityProfileGroup',
        'gui_local_in_policy' => 'getGuiLocalInPolicy',
        'gui_local_reports' => 'getGuiLocalReports',
        'gui_wanopt_cache' => 'getGuiWanoptCache',
        'gui_explicit_proxy' => 'getGuiExplicitProxy',
        'gui_dynamic_routing' => 'getGuiDynamicRouting',
        'gui_sslvpn_personal_bookmarks' => 'getGuiSslvpnPersonalBookmarks',
        'gui_sslvpn_realms' => 'getGuiSslvpnRealms',
        'gui_policy_based_ipsec' => 'getGuiPolicyBasedIpsec',
        'gui_threat_weight' => 'getGuiThreatWeight',
        'gui_spamfilter' => 'getGuiSpamfilter',
        'gui_file_filter' => 'getGuiFileFilter',
        'gui_application_control' => 'getGuiApplicationControl',
        'gui_ips' => 'getGuiIps',
        'gui_endpoint_control' => 'getGuiEndpointControl',
        'gui_endpoint_control_advanced' => 'getGuiEndpointControlAdvanced',
        'gui_dhcp_advanced' => 'getGuiDhcpAdvanced',
        'gui_vpn' => 'getGuiVpn',
        'gui_wireless_controller' => 'getGuiWirelessController',
        'gui_switch_controller' => 'getGuiSwitchController',
        'gui_fortiap_split_tunneling' => 'getGuiFortiapSplitTunneling',
        'gui_webfilter_advanced' => 'getGuiWebfilterAdvanced',
        'gui_traffic_shaping' => 'getGuiTrafficShaping',
        'gui_wan_load_balancing' => 'getGuiWanLoadBalancing',
        'gui_antivirus' => 'getGuiAntivirus',
        'gui_webfilter' => 'getGuiWebfilter',
        'gui_dnsfilter' => 'getGuiDnsfilter',
        'gui_waf_profile' => 'getGuiWafProfile',
        'gui_fortiextender_controller' => 'getGuiFortiextenderController',
        'gui_advanced_policy' => 'getGuiAdvancedPolicy',
        'gui_allow_unnamed_policy' => 'getGuiAllowUnnamedPolicy',
        'gui_email_collection' => 'getGuiEmailCollection',
        'gui_multiple_interface_policy' => 'getGuiMultipleInterfacePolicy',
        'gui_policy_disclaimer' => 'getGuiPolicyDisclaimer',
        'ike_session_resume' => 'getIkeSessionResume',
        'ike_quick_crash_detect' => 'getIkeQuickCrashDetect',
        'ike_dn_format' => 'getIkeDnFormat',
        'block_land_attack' => 'getBlockLandAttack'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OPMODE_NAT = 'nat';
    const OPMODE_TRANSPARENT = 'transparent';
    const NGFW_MODE_PROFILE_BASED = 'profile-based';
    const NGFW_MODE_POLICY_BASED = 'policy-based';
    const HTTP_EXTERNAL_DEST_FORTIWEB = 'fortiweb';
    const HTTP_EXTERNAL_DEST_FORTICACHE = 'forticache';
    const FIREWALL_SESSION_DIRTY_ALL = 'check-all';
    const FIREWALL_SESSION_DIRTY__NEW = 'check-new';
    const FIREWALL_SESSION_DIRTY_POLICY_OPTION = 'check-policy-option';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const BFD_DONT_ENFORCE_SRC_PORT_ENABLE = 'enable';
    const BFD_DONT_ENFORCE_SRC_PORT_DISABLE = 'disable';
    const UTF8_SPAM_TAGGING_ENABLE = 'enable';
    const UTF8_SPAM_TAGGING_DISABLE = 'disable';
    const WCCP_CACHE_ENGINE_ENABLE = 'enable';
    const WCCP_CACHE_ENGINE_DISABLE = 'disable';
    const VPN_STATS_LOG_IPSEC = 'ipsec';
    const VPN_STATS_LOG_PPTP = 'pptp';
    const VPN_STATS_LOG_L2TP = 'l2tp';
    const VPN_STATS_LOG_SSL = 'ssl';
    const V4_ECMP_MODE_SOURCE_IP_BASED = 'source-ip-based';
    const V4_ECMP_MODE_WEIGHT_BASED = 'weight-based';
    const V4_ECMP_MODE_USAGE_BASED = 'usage-based';
    const V4_ECMP_MODE_SOURCE_DEST_IP_BASED = 'source-dest-ip-based';
    const FW_SESSION_HAIRPIN_ENABLE = 'enable';
    const FW_SESSION_HAIRPIN_DISABLE = 'disable';
    const PRP_TRAILER_ACTION_ENABLE = 'enable';
    const PRP_TRAILER_ACTION_DISABLE = 'disable';
    const SNAT_HAIRPIN_TRAFFIC_ENABLE = 'enable';
    const SNAT_HAIRPIN_TRAFFIC_DISABLE = 'disable';
    const DHCP_PROXY_ENABLE = 'enable';
    const DHCP_PROXY_DISABLE = 'disable';
    const DHCP_PROXY_INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const DHCP_PROXY_INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const DHCP_PROXY_INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    const CENTRAL_NAT_ENABLE = 'enable';
    const CENTRAL_NAT_DISABLE = 'disable';
    const LLDP_RECEPTION_ENABLE = 'enable';
    const LLDP_RECEPTION_DISABLE = 'disable';
    const LLDP_RECEPTION__GLOBAL = 'global';
    const LLDP_TRANSMISSION_ENABLE = 'enable';
    const LLDP_TRANSMISSION_DISABLE = 'disable';
    const LLDP_TRANSMISSION__GLOBAL = 'global';
    const LINK_DOWN_ACCESS_ENABLE = 'enable';
    const LINK_DOWN_ACCESS_DISABLE = 'disable';
    const AUXILIARY_SESSION_ENABLE = 'enable';
    const AUXILIARY_SESSION_DISABLE = 'disable';
    const ASYMROUTE_ENABLE = 'enable';
    const ASYMROUTE_DISABLE = 'disable';
    const ASYMROUTE_ICMP_ENABLE = 'enable';
    const ASYMROUTE_ICMP_DISABLE = 'disable';
    const TCP_SESSION_WITHOUT_SYN_ENABLE = 'enable';
    const TCP_SESSION_WITHOUT_SYN_DISABLE = 'disable';
    const SES_DENIED_TRAFFIC_ENABLE = 'enable';
    const SES_DENIED_TRAFFIC_DISABLE = 'disable';
    const STRICT_SRC_CHECK_ENABLE = 'enable';
    const STRICT_SRC_CHECK_DISABLE = 'disable';
    const ALLOW_LINKDOWN_PATH_ENABLE = 'enable';
    const ALLOW_LINKDOWN_PATH_DISABLE = 'disable';
    const ASYMROUTE6_ENABLE = 'enable';
    const ASYMROUTE6_DISABLE = 'disable';
    const ASYMROUTE6_ICMP_ENABLE = 'enable';
    const ASYMROUTE6_ICMP_DISABLE = 'disable';
    const SCTP_SESSION_WITHOUT_INIT_ENABLE = 'enable';
    const SCTP_SESSION_WITHOUT_INIT_DISABLE = 'disable';
    const SIP_EXPECTATION_ENABLE = 'enable';
    const SIP_EXPECTATION_DISABLE = 'disable';
    const SIP_NAT_TRACE_ENABLE = 'enable';
    const SIP_NAT_TRACE_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const MULTICAST_FORWARD_ENABLE = 'enable';
    const MULTICAST_FORWARD_DISABLE = 'disable';
    const MULTICAST_TTL_NOTCHANGE_ENABLE = 'enable';
    const MULTICAST_TTL_NOTCHANGE_DISABLE = 'disable';
    const MULTICAST_SKIP_POLICY_ENABLE = 'enable';
    const MULTICAST_SKIP_POLICY_DISABLE = 'disable';
    const ALLOW_SUBNET_OVERLAP_ENABLE = 'enable';
    const ALLOW_SUBNET_OVERLAP_DISABLE = 'disable';
    const DENY_TCP_WITH_ICMP_ENABLE = 'enable';
    const DENY_TCP_WITH_ICMP_DISABLE = 'disable';
    const EMAIL_PORTAL_CHECK_DNS_DISABLE = 'disable';
    const EMAIL_PORTAL_CHECK_DNS_ENABLE = 'enable';
    const DEFAULT_VOIP_ALG_MODE_PROXY_BASED = 'proxy-based';
    const DEFAULT_VOIP_ALG_MODE_KERNEL_HELPER_BASED = 'kernel-helper-based';
    const GUI_ICAP_ENABLE = 'enable';
    const GUI_ICAP_DISABLE = 'disable';
    const GUI_NAT46_64_ENABLE = 'enable';
    const GUI_NAT46_64_DISABLE = 'disable';
    const GUI_IMPLICIT_POLICY_ENABLE = 'enable';
    const GUI_IMPLICIT_POLICY_DISABLE = 'disable';
    const GUI_DNS_DATABASE_ENABLE = 'enable';
    const GUI_DNS_DATABASE_DISABLE = 'disable';
    const GUI_LOAD_BALANCE_ENABLE = 'enable';
    const GUI_LOAD_BALANCE_DISABLE = 'disable';
    const GUI_MULTICAST_POLICY_ENABLE = 'enable';
    const GUI_MULTICAST_POLICY_DISABLE = 'disable';
    const GUI_DOS_POLICY_ENABLE = 'enable';
    const GUI_DOS_POLICY_DISABLE = 'disable';
    const GUI_OBJECT_COLORS_ENABLE = 'enable';
    const GUI_OBJECT_COLORS_DISABLE = 'disable';
    const GUI_REPLACEMENT_MESSAGE_GROUPS_ENABLE = 'enable';
    const GUI_REPLACEMENT_MESSAGE_GROUPS_DISABLE = 'disable';
    const GUI_VOIP_PROFILE_ENABLE = 'enable';
    const GUI_VOIP_PROFILE_DISABLE = 'disable';
    const GUI_AP_PROFILE_ENABLE = 'enable';
    const GUI_AP_PROFILE_DISABLE = 'disable';
    const GUI_SECURITY_PROFILE_GROUP_ENABLE = 'enable';
    const GUI_SECURITY_PROFILE_GROUP_DISABLE = 'disable';
    const GUI_LOCAL_IN_POLICY_ENABLE = 'enable';
    const GUI_LOCAL_IN_POLICY_DISABLE = 'disable';
    const GUI_LOCAL_REPORTS_ENABLE = 'enable';
    const GUI_LOCAL_REPORTS_DISABLE = 'disable';
    const GUI_WANOPT_CACHE_ENABLE = 'enable';
    const GUI_WANOPT_CACHE_DISABLE = 'disable';
    const GUI_EXPLICIT_PROXY_ENABLE = 'enable';
    const GUI_EXPLICIT_PROXY_DISABLE = 'disable';
    const GUI_DYNAMIC_ROUTING_ENABLE = 'enable';
    const GUI_DYNAMIC_ROUTING_DISABLE = 'disable';
    const GUI_SSLVPN_PERSONAL_BOOKMARKS_ENABLE = 'enable';
    const GUI_SSLVPN_PERSONAL_BOOKMARKS_DISABLE = 'disable';
    const GUI_SSLVPN_REALMS_ENABLE = 'enable';
    const GUI_SSLVPN_REALMS_DISABLE = 'disable';
    const GUI_POLICY_BASED_IPSEC_ENABLE = 'enable';
    const GUI_POLICY_BASED_IPSEC_DISABLE = 'disable';
    const GUI_THREAT_WEIGHT_ENABLE = 'enable';
    const GUI_THREAT_WEIGHT_DISABLE = 'disable';
    const GUI_SPAMFILTER_ENABLE = 'enable';
    const GUI_SPAMFILTER_DISABLE = 'disable';
    const GUI_FILE_FILTER_ENABLE = 'enable';
    const GUI_FILE_FILTER_DISABLE = 'disable';
    const GUI_APPLICATION_CONTROL_ENABLE = 'enable';
    const GUI_APPLICATION_CONTROL_DISABLE = 'disable';
    const GUI_IPS_ENABLE = 'enable';
    const GUI_IPS_DISABLE = 'disable';
    const GUI_ENDPOINT_CONTROL_ENABLE = 'enable';
    const GUI_ENDPOINT_CONTROL_DISABLE = 'disable';
    const GUI_ENDPOINT_CONTROL_ADVANCED_ENABLE = 'enable';
    const GUI_ENDPOINT_CONTROL_ADVANCED_DISABLE = 'disable';
    const GUI_DHCP_ADVANCED_ENABLE = 'enable';
    const GUI_DHCP_ADVANCED_DISABLE = 'disable';
    const GUI_VPN_ENABLE = 'enable';
    const GUI_VPN_DISABLE = 'disable';
    const GUI_WIRELESS_CONTROLLER_ENABLE = 'enable';
    const GUI_WIRELESS_CONTROLLER_DISABLE = 'disable';
    const GUI_SWITCH_CONTROLLER_ENABLE = 'enable';
    const GUI_SWITCH_CONTROLLER_DISABLE = 'disable';
    const GUI_FORTIAP_SPLIT_TUNNELING_ENABLE = 'enable';
    const GUI_FORTIAP_SPLIT_TUNNELING_DISABLE = 'disable';
    const GUI_WEBFILTER_ADVANCED_ENABLE = 'enable';
    const GUI_WEBFILTER_ADVANCED_DISABLE = 'disable';
    const GUI_TRAFFIC_SHAPING_ENABLE = 'enable';
    const GUI_TRAFFIC_SHAPING_DISABLE = 'disable';
    const GUI_WAN_LOAD_BALANCING_ENABLE = 'enable';
    const GUI_WAN_LOAD_BALANCING_DISABLE = 'disable';
    const GUI_ANTIVIRUS_ENABLE = 'enable';
    const GUI_ANTIVIRUS_DISABLE = 'disable';
    const GUI_WEBFILTER_ENABLE = 'enable';
    const GUI_WEBFILTER_DISABLE = 'disable';
    const GUI_DNSFILTER_ENABLE = 'enable';
    const GUI_DNSFILTER_DISABLE = 'disable';
    const GUI_WAF_PROFILE_ENABLE = 'enable';
    const GUI_WAF_PROFILE_DISABLE = 'disable';
    const GUI_FORTIEXTENDER_CONTROLLER_ENABLE = 'enable';
    const GUI_FORTIEXTENDER_CONTROLLER_DISABLE = 'disable';
    const GUI_ADVANCED_POLICY_ENABLE = 'enable';
    const GUI_ADVANCED_POLICY_DISABLE = 'disable';
    const GUI_ALLOW_UNNAMED_POLICY_ENABLE = 'enable';
    const GUI_ALLOW_UNNAMED_POLICY_DISABLE = 'disable';
    const GUI_EMAIL_COLLECTION_ENABLE = 'enable';
    const GUI_EMAIL_COLLECTION_DISABLE = 'disable';
    const GUI_MULTIPLE_INTERFACE_POLICY_ENABLE = 'enable';
    const GUI_MULTIPLE_INTERFACE_POLICY_DISABLE = 'disable';
    const GUI_POLICY_DISCLAIMER_ENABLE = 'enable';
    const GUI_POLICY_DISCLAIMER_DISABLE = 'disable';
    const IKE_SESSION_RESUME_ENABLE = 'enable';
    const IKE_SESSION_RESUME_DISABLE = 'disable';
    const IKE_QUICK_CRASH_DETECT_ENABLE = 'enable';
    const IKE_QUICK_CRASH_DETECT_DISABLE = 'disable';
    const IKE_DN_FORMAT_WITH_SPACE = 'with-space';
    const IKE_DN_FORMAT_NO_SPACE = 'no-space';
    const BLOCK_LAND_ATTACK_DISABLE = 'disable';
    const BLOCK_LAND_ATTACK_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpmodeAllowableValues()
    {
        return [
            self::OPMODE_NAT,
            self::OPMODE_TRANSPARENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNgfwModeAllowableValues()
    {
        return [
            self::NGFW_MODE_PROFILE_BASED,
            self::NGFW_MODE_POLICY_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpExternalDestAllowableValues()
    {
        return [
            self::HTTP_EXTERNAL_DEST_FORTIWEB,
            self::HTTP_EXTERNAL_DEST_FORTICACHE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFirewallSessionDirtyAllowableValues()
    {
        return [
            self::FIREWALL_SESSION_DIRTY_ALL,
            self::FIREWALL_SESSION_DIRTY__NEW,
            self::FIREWALL_SESSION_DIRTY_POLICY_OPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdDontEnforceSrcPortAllowableValues()
    {
        return [
            self::BFD_DONT_ENFORCE_SRC_PORT_ENABLE,
            self::BFD_DONT_ENFORCE_SRC_PORT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUtf8SpamTaggingAllowableValues()
    {
        return [
            self::UTF8_SPAM_TAGGING_ENABLE,
            self::UTF8_SPAM_TAGGING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWccpCacheEngineAllowableValues()
    {
        return [
            self::WCCP_CACHE_ENGINE_ENABLE,
            self::WCCP_CACHE_ENGINE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVpnStatsLogAllowableValues()
    {
        return [
            self::VPN_STATS_LOG_IPSEC,
            self::VPN_STATS_LOG_PPTP,
            self::VPN_STATS_LOG_L2TP,
            self::VPN_STATS_LOG_SSL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getV4EcmpModeAllowableValues()
    {
        return [
            self::V4_ECMP_MODE_SOURCE_IP_BASED,
            self::V4_ECMP_MODE_WEIGHT_BASED,
            self::V4_ECMP_MODE_USAGE_BASED,
            self::V4_ECMP_MODE_SOURCE_DEST_IP_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFwSessionHairpinAllowableValues()
    {
        return [
            self::FW_SESSION_HAIRPIN_ENABLE,
            self::FW_SESSION_HAIRPIN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrpTrailerActionAllowableValues()
    {
        return [
            self::PRP_TRAILER_ACTION_ENABLE,
            self::PRP_TRAILER_ACTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSnatHairpinTrafficAllowableValues()
    {
        return [
            self::SNAT_HAIRPIN_TRAFFIC_ENABLE,
            self::SNAT_HAIRPIN_TRAFFIC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpProxyAllowableValues()
    {
        return [
            self::DHCP_PROXY_ENABLE,
            self::DHCP_PROXY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpProxyInterfaceSelectMethodAllowableValues()
    {
        return [
            self::DHCP_PROXY_INTERFACE_SELECT_METHOD_AUTO,
            self::DHCP_PROXY_INTERFACE_SELECT_METHOD_SDWAN,
            self::DHCP_PROXY_INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCentralNatAllowableValues()
    {
        return [
            self::CENTRAL_NAT_ENABLE,
            self::CENTRAL_NAT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpReceptionAllowableValues()
    {
        return [
            self::LLDP_RECEPTION_ENABLE,
            self::LLDP_RECEPTION_DISABLE,
            self::LLDP_RECEPTION__GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpTransmissionAllowableValues()
    {
        return [
            self::LLDP_TRANSMISSION_ENABLE,
            self::LLDP_TRANSMISSION_DISABLE,
            self::LLDP_TRANSMISSION__GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkDownAccessAllowableValues()
    {
        return [
            self::LINK_DOWN_ACCESS_ENABLE,
            self::LINK_DOWN_ACCESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuxiliarySessionAllowableValues()
    {
        return [
            self::AUXILIARY_SESSION_ENABLE,
            self::AUXILIARY_SESSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsymrouteAllowableValues()
    {
        return [
            self::ASYMROUTE_ENABLE,
            self::ASYMROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsymrouteIcmpAllowableValues()
    {
        return [
            self::ASYMROUTE_ICMP_ENABLE,
            self::ASYMROUTE_ICMP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTcpSessionWithoutSynAllowableValues()
    {
        return [
            self::TCP_SESSION_WITHOUT_SYN_ENABLE,
            self::TCP_SESSION_WITHOUT_SYN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSesDeniedTrafficAllowableValues()
    {
        return [
            self::SES_DENIED_TRAFFIC_ENABLE,
            self::SES_DENIED_TRAFFIC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictSrcCheckAllowableValues()
    {
        return [
            self::STRICT_SRC_CHECK_ENABLE,
            self::STRICT_SRC_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowLinkdownPathAllowableValues()
    {
        return [
            self::ALLOW_LINKDOWN_PATH_ENABLE,
            self::ALLOW_LINKDOWN_PATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsymroute6AllowableValues()
    {
        return [
            self::ASYMROUTE6_ENABLE,
            self::ASYMROUTE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsymroute6IcmpAllowableValues()
    {
        return [
            self::ASYMROUTE6_ICMP_ENABLE,
            self::ASYMROUTE6_ICMP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSctpSessionWithoutInitAllowableValues()
    {
        return [
            self::SCTP_SESSION_WITHOUT_INIT_ENABLE,
            self::SCTP_SESSION_WITHOUT_INIT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSipExpectationAllowableValues()
    {
        return [
            self::SIP_EXPECTATION_ENABLE,
            self::SIP_EXPECTATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSipNatTraceAllowableValues()
    {
        return [
            self::SIP_NAT_TRACE_ENABLE,
            self::SIP_NAT_TRACE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastForwardAllowableValues()
    {
        return [
            self::MULTICAST_FORWARD_ENABLE,
            self::MULTICAST_FORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastTtlNotchangeAllowableValues()
    {
        return [
            self::MULTICAST_TTL_NOTCHANGE_ENABLE,
            self::MULTICAST_TTL_NOTCHANGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastSkipPolicyAllowableValues()
    {
        return [
            self::MULTICAST_SKIP_POLICY_ENABLE,
            self::MULTICAST_SKIP_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowSubnetOverlapAllowableValues()
    {
        return [
            self::ALLOW_SUBNET_OVERLAP_ENABLE,
            self::ALLOW_SUBNET_OVERLAP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDenyTcpWithIcmpAllowableValues()
    {
        return [
            self::DENY_TCP_WITH_ICMP_ENABLE,
            self::DENY_TCP_WITH_ICMP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailPortalCheckDnsAllowableValues()
    {
        return [
            self::EMAIL_PORTAL_CHECK_DNS_DISABLE,
            self::EMAIL_PORTAL_CHECK_DNS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultVoipAlgModeAllowableValues()
    {
        return [
            self::DEFAULT_VOIP_ALG_MODE_PROXY_BASED,
            self::DEFAULT_VOIP_ALG_MODE_KERNEL_HELPER_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiIcapAllowableValues()
    {
        return [
            self::GUI_ICAP_ENABLE,
            self::GUI_ICAP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiNat4664AllowableValues()
    {
        return [
            self::GUI_NAT46_64_ENABLE,
            self::GUI_NAT46_64_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiImplicitPolicyAllowableValues()
    {
        return [
            self::GUI_IMPLICIT_POLICY_ENABLE,
            self::GUI_IMPLICIT_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDnsDatabaseAllowableValues()
    {
        return [
            self::GUI_DNS_DATABASE_ENABLE,
            self::GUI_DNS_DATABASE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiLoadBalanceAllowableValues()
    {
        return [
            self::GUI_LOAD_BALANCE_ENABLE,
            self::GUI_LOAD_BALANCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiMulticastPolicyAllowableValues()
    {
        return [
            self::GUI_MULTICAST_POLICY_ENABLE,
            self::GUI_MULTICAST_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDosPolicyAllowableValues()
    {
        return [
            self::GUI_DOS_POLICY_ENABLE,
            self::GUI_DOS_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiObjectColorsAllowableValues()
    {
        return [
            self::GUI_OBJECT_COLORS_ENABLE,
            self::GUI_OBJECT_COLORS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiReplacementMessageGroupsAllowableValues()
    {
        return [
            self::GUI_REPLACEMENT_MESSAGE_GROUPS_ENABLE,
            self::GUI_REPLACEMENT_MESSAGE_GROUPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiVoipProfileAllowableValues()
    {
        return [
            self::GUI_VOIP_PROFILE_ENABLE,
            self::GUI_VOIP_PROFILE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiApProfileAllowableValues()
    {
        return [
            self::GUI_AP_PROFILE_ENABLE,
            self::GUI_AP_PROFILE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiSecurityProfileGroupAllowableValues()
    {
        return [
            self::GUI_SECURITY_PROFILE_GROUP_ENABLE,
            self::GUI_SECURITY_PROFILE_GROUP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiLocalInPolicyAllowableValues()
    {
        return [
            self::GUI_LOCAL_IN_POLICY_ENABLE,
            self::GUI_LOCAL_IN_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiLocalReportsAllowableValues()
    {
        return [
            self::GUI_LOCAL_REPORTS_ENABLE,
            self::GUI_LOCAL_REPORTS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWanoptCacheAllowableValues()
    {
        return [
            self::GUI_WANOPT_CACHE_ENABLE,
            self::GUI_WANOPT_CACHE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiExplicitProxyAllowableValues()
    {
        return [
            self::GUI_EXPLICIT_PROXY_ENABLE,
            self::GUI_EXPLICIT_PROXY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDynamicRoutingAllowableValues()
    {
        return [
            self::GUI_DYNAMIC_ROUTING_ENABLE,
            self::GUI_DYNAMIC_ROUTING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiSslvpnPersonalBookmarksAllowableValues()
    {
        return [
            self::GUI_SSLVPN_PERSONAL_BOOKMARKS_ENABLE,
            self::GUI_SSLVPN_PERSONAL_BOOKMARKS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiSslvpnRealmsAllowableValues()
    {
        return [
            self::GUI_SSLVPN_REALMS_ENABLE,
            self::GUI_SSLVPN_REALMS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiPolicyBasedIpsecAllowableValues()
    {
        return [
            self::GUI_POLICY_BASED_IPSEC_ENABLE,
            self::GUI_POLICY_BASED_IPSEC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiThreatWeightAllowableValues()
    {
        return [
            self::GUI_THREAT_WEIGHT_ENABLE,
            self::GUI_THREAT_WEIGHT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiSpamfilterAllowableValues()
    {
        return [
            self::GUI_SPAMFILTER_ENABLE,
            self::GUI_SPAMFILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiFileFilterAllowableValues()
    {
        return [
            self::GUI_FILE_FILTER_ENABLE,
            self::GUI_FILE_FILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiApplicationControlAllowableValues()
    {
        return [
            self::GUI_APPLICATION_CONTROL_ENABLE,
            self::GUI_APPLICATION_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiIpsAllowableValues()
    {
        return [
            self::GUI_IPS_ENABLE,
            self::GUI_IPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiEndpointControlAllowableValues()
    {
        return [
            self::GUI_ENDPOINT_CONTROL_ENABLE,
            self::GUI_ENDPOINT_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiEndpointControlAdvancedAllowableValues()
    {
        return [
            self::GUI_ENDPOINT_CONTROL_ADVANCED_ENABLE,
            self::GUI_ENDPOINT_CONTROL_ADVANCED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDhcpAdvancedAllowableValues()
    {
        return [
            self::GUI_DHCP_ADVANCED_ENABLE,
            self::GUI_DHCP_ADVANCED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiVpnAllowableValues()
    {
        return [
            self::GUI_VPN_ENABLE,
            self::GUI_VPN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWirelessControllerAllowableValues()
    {
        return [
            self::GUI_WIRELESS_CONTROLLER_ENABLE,
            self::GUI_WIRELESS_CONTROLLER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiSwitchControllerAllowableValues()
    {
        return [
            self::GUI_SWITCH_CONTROLLER_ENABLE,
            self::GUI_SWITCH_CONTROLLER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiFortiapSplitTunnelingAllowableValues()
    {
        return [
            self::GUI_FORTIAP_SPLIT_TUNNELING_ENABLE,
            self::GUI_FORTIAP_SPLIT_TUNNELING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWebfilterAdvancedAllowableValues()
    {
        return [
            self::GUI_WEBFILTER_ADVANCED_ENABLE,
            self::GUI_WEBFILTER_ADVANCED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiTrafficShapingAllowableValues()
    {
        return [
            self::GUI_TRAFFIC_SHAPING_ENABLE,
            self::GUI_TRAFFIC_SHAPING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWanLoadBalancingAllowableValues()
    {
        return [
            self::GUI_WAN_LOAD_BALANCING_ENABLE,
            self::GUI_WAN_LOAD_BALANCING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiAntivirusAllowableValues()
    {
        return [
            self::GUI_ANTIVIRUS_ENABLE,
            self::GUI_ANTIVIRUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWebfilterAllowableValues()
    {
        return [
            self::GUI_WEBFILTER_ENABLE,
            self::GUI_WEBFILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDnsfilterAllowableValues()
    {
        return [
            self::GUI_DNSFILTER_ENABLE,
            self::GUI_DNSFILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWafProfileAllowableValues()
    {
        return [
            self::GUI_WAF_PROFILE_ENABLE,
            self::GUI_WAF_PROFILE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiFortiextenderControllerAllowableValues()
    {
        return [
            self::GUI_FORTIEXTENDER_CONTROLLER_ENABLE,
            self::GUI_FORTIEXTENDER_CONTROLLER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiAdvancedPolicyAllowableValues()
    {
        return [
            self::GUI_ADVANCED_POLICY_ENABLE,
            self::GUI_ADVANCED_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiAllowUnnamedPolicyAllowableValues()
    {
        return [
            self::GUI_ALLOW_UNNAMED_POLICY_ENABLE,
            self::GUI_ALLOW_UNNAMED_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiEmailCollectionAllowableValues()
    {
        return [
            self::GUI_EMAIL_COLLECTION_ENABLE,
            self::GUI_EMAIL_COLLECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiMultipleInterfacePolicyAllowableValues()
    {
        return [
            self::GUI_MULTIPLE_INTERFACE_POLICY_ENABLE,
            self::GUI_MULTIPLE_INTERFACE_POLICY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiPolicyDisclaimerAllowableValues()
    {
        return [
            self::GUI_POLICY_DISCLAIMER_ENABLE,
            self::GUI_POLICY_DISCLAIMER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeSessionResumeAllowableValues()
    {
        return [
            self::IKE_SESSION_RESUME_ENABLE,
            self::IKE_SESSION_RESUME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeQuickCrashDetectAllowableValues()
    {
        return [
            self::IKE_QUICK_CRASH_DETECT_ENABLE,
            self::IKE_QUICK_CRASH_DETECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeDnFormatAllowableValues()
    {
        return [
            self::IKE_DN_FORMAT_WITH_SPACE,
            self::IKE_DN_FORMAT_NO_SPACE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockLandAttackAllowableValues()
    {
        return [
            self::BLOCK_LAND_ATTACK_DISABLE,
            self::BLOCK_LAND_ATTACK_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['opmode'] = $data['opmode'] ?? null;
        $this->container['ngfw_mode'] = $data['ngfw_mode'] ?? null;
        $this->container['http_external_dest'] = $data['http_external_dest'] ?? null;
        $this->container['firewall_session_dirty'] = $data['firewall_session_dirty'] ?? null;
        $this->container['manageip'] = $data['manageip'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['manageip6'] = $data['manageip6'] ?? null;
        $this->container['gateway6'] = $data['gateway6'] ?? null;
        $this->container['ip6'] = $data['ip6'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['bfd_desired_min_tx'] = $data['bfd_desired_min_tx'] ?? null;
        $this->container['bfd_required_min_rx'] = $data['bfd_required_min_rx'] ?? null;
        $this->container['bfd_detect_mult'] = $data['bfd_detect_mult'] ?? null;
        $this->container['bfd_dont_enforce_src_port'] = $data['bfd_dont_enforce_src_port'] ?? null;
        $this->container['utf8_spam_tagging'] = $data['utf8_spam_tagging'] ?? null;
        $this->container['wccp_cache_engine'] = $data['wccp_cache_engine'] ?? null;
        $this->container['vpn_stats_log'] = $data['vpn_stats_log'] ?? null;
        $this->container['vpn_stats_period'] = $data['vpn_stats_period'] ?? null;
        $this->container['v4_ecmp_mode'] = $data['v4_ecmp_mode'] ?? null;
        $this->container['mac_ttl'] = $data['mac_ttl'] ?? null;
        $this->container['fw_session_hairpin'] = $data['fw_session_hairpin'] ?? null;
        $this->container['prp_trailer_action'] = $data['prp_trailer_action'] ?? null;
        $this->container['snat_hairpin_traffic'] = $data['snat_hairpin_traffic'] ?? null;
        $this->container['dhcp_proxy'] = $data['dhcp_proxy'] ?? null;
        $this->container['dhcp_proxy_interface_select_method'] = $data['dhcp_proxy_interface_select_method'] ?? null;
        $this->container['dhcp_proxy_interface'] = $data['dhcp_proxy_interface'] ?? null;
        $this->container['dhcp_server_ip'] = $data['dhcp_server_ip'] ?? null;
        $this->container['dhcp6_server_ip'] = $data['dhcp6_server_ip'] ?? null;
        $this->container['central_nat'] = $data['central_nat'] ?? null;
        $this->container['gui_default_policy_columns'] = $data['gui_default_policy_columns'] ?? null;
        $this->container['lldp_reception'] = $data['lldp_reception'] ?? null;
        $this->container['lldp_transmission'] = $data['lldp_transmission'] ?? null;
        $this->container['link_down_access'] = $data['link_down_access'] ?? null;
        $this->container['auxiliary_session'] = $data['auxiliary_session'] ?? null;
        $this->container['asymroute'] = $data['asymroute'] ?? null;
        $this->container['asymroute_icmp'] = $data['asymroute_icmp'] ?? null;
        $this->container['tcp_session_without_syn'] = $data['tcp_session_without_syn'] ?? null;
        $this->container['ses_denied_traffic'] = $data['ses_denied_traffic'] ?? null;
        $this->container['strict_src_check'] = $data['strict_src_check'] ?? null;
        $this->container['allow_linkdown_path'] = $data['allow_linkdown_path'] ?? null;
        $this->container['asymroute6'] = $data['asymroute6'] ?? null;
        $this->container['asymroute6_icmp'] = $data['asymroute6_icmp'] ?? null;
        $this->container['sctp_session_without_init'] = $data['sctp_session_without_init'] ?? null;
        $this->container['sip_expectation'] = $data['sip_expectation'] ?? null;
        $this->container['sip_nat_trace'] = $data['sip_nat_trace'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sip_tcp_port'] = $data['sip_tcp_port'] ?? null;
        $this->container['sip_udp_port'] = $data['sip_udp_port'] ?? null;
        $this->container['sip_ssl_port'] = $data['sip_ssl_port'] ?? null;
        $this->container['sccp_port'] = $data['sccp_port'] ?? null;
        $this->container['multicast_forward'] = $data['multicast_forward'] ?? null;
        $this->container['multicast_ttl_notchange'] = $data['multicast_ttl_notchange'] ?? null;
        $this->container['multicast_skip_policy'] = $data['multicast_skip_policy'] ?? null;
        $this->container['allow_subnet_overlap'] = $data['allow_subnet_overlap'] ?? null;
        $this->container['deny_tcp_with_icmp'] = $data['deny_tcp_with_icmp'] ?? null;
        $this->container['ecmp_max_paths'] = $data['ecmp_max_paths'] ?? null;
        $this->container['discovered_device_timeout'] = $data['discovered_device_timeout'] ?? null;
        $this->container['email_portal_check_dns'] = $data['email_portal_check_dns'] ?? null;
        $this->container['default_voip_alg_mode'] = $data['default_voip_alg_mode'] ?? null;
        $this->container['gui_icap'] = $data['gui_icap'] ?? null;
        $this->container['gui_nat46_64'] = $data['gui_nat46_64'] ?? null;
        $this->container['gui_implicit_policy'] = $data['gui_implicit_policy'] ?? null;
        $this->container['gui_dns_database'] = $data['gui_dns_database'] ?? null;
        $this->container['gui_load_balance'] = $data['gui_load_balance'] ?? null;
        $this->container['gui_multicast_policy'] = $data['gui_multicast_policy'] ?? null;
        $this->container['gui_dos_policy'] = $data['gui_dos_policy'] ?? null;
        $this->container['gui_object_colors'] = $data['gui_object_colors'] ?? null;
        $this->container['gui_replacement_message_groups'] = $data['gui_replacement_message_groups'] ?? null;
        $this->container['gui_voip_profile'] = $data['gui_voip_profile'] ?? null;
        $this->container['gui_ap_profile'] = $data['gui_ap_profile'] ?? null;
        $this->container['gui_security_profile_group'] = $data['gui_security_profile_group'] ?? null;
        $this->container['gui_local_in_policy'] = $data['gui_local_in_policy'] ?? null;
        $this->container['gui_local_reports'] = $data['gui_local_reports'] ?? null;
        $this->container['gui_wanopt_cache'] = $data['gui_wanopt_cache'] ?? null;
        $this->container['gui_explicit_proxy'] = $data['gui_explicit_proxy'] ?? null;
        $this->container['gui_dynamic_routing'] = $data['gui_dynamic_routing'] ?? null;
        $this->container['gui_sslvpn_personal_bookmarks'] = $data['gui_sslvpn_personal_bookmarks'] ?? null;
        $this->container['gui_sslvpn_realms'] = $data['gui_sslvpn_realms'] ?? null;
        $this->container['gui_policy_based_ipsec'] = $data['gui_policy_based_ipsec'] ?? null;
        $this->container['gui_threat_weight'] = $data['gui_threat_weight'] ?? null;
        $this->container['gui_spamfilter'] = $data['gui_spamfilter'] ?? null;
        $this->container['gui_file_filter'] = $data['gui_file_filter'] ?? null;
        $this->container['gui_application_control'] = $data['gui_application_control'] ?? null;
        $this->container['gui_ips'] = $data['gui_ips'] ?? null;
        $this->container['gui_endpoint_control'] = $data['gui_endpoint_control'] ?? null;
        $this->container['gui_endpoint_control_advanced'] = $data['gui_endpoint_control_advanced'] ?? null;
        $this->container['gui_dhcp_advanced'] = $data['gui_dhcp_advanced'] ?? null;
        $this->container['gui_vpn'] = $data['gui_vpn'] ?? null;
        $this->container['gui_wireless_controller'] = $data['gui_wireless_controller'] ?? null;
        $this->container['gui_switch_controller'] = $data['gui_switch_controller'] ?? null;
        $this->container['gui_fortiap_split_tunneling'] = $data['gui_fortiap_split_tunneling'] ?? null;
        $this->container['gui_webfilter_advanced'] = $data['gui_webfilter_advanced'] ?? null;
        $this->container['gui_traffic_shaping'] = $data['gui_traffic_shaping'] ?? null;
        $this->container['gui_wan_load_balancing'] = $data['gui_wan_load_balancing'] ?? null;
        $this->container['gui_antivirus'] = $data['gui_antivirus'] ?? null;
        $this->container['gui_webfilter'] = $data['gui_webfilter'] ?? null;
        $this->container['gui_dnsfilter'] = $data['gui_dnsfilter'] ?? null;
        $this->container['gui_waf_profile'] = $data['gui_waf_profile'] ?? null;
        $this->container['gui_fortiextender_controller'] = $data['gui_fortiextender_controller'] ?? null;
        $this->container['gui_advanced_policy'] = $data['gui_advanced_policy'] ?? null;
        $this->container['gui_allow_unnamed_policy'] = $data['gui_allow_unnamed_policy'] ?? null;
        $this->container['gui_email_collection'] = $data['gui_email_collection'] ?? null;
        $this->container['gui_multiple_interface_policy'] = $data['gui_multiple_interface_policy'] ?? null;
        $this->container['gui_policy_disclaimer'] = $data['gui_policy_disclaimer'] ?? null;
        $this->container['ike_session_resume'] = $data['ike_session_resume'] ?? null;
        $this->container['ike_quick_crash_detect'] = $data['ike_quick_crash_detect'] ?? null;
        $this->container['ike_dn_format'] = $data['ike_dn_format'] ?? null;
        $this->container['block_land_attack'] = $data['block_land_attack'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getOpmodeAllowableValues();
        if (!is_null($this->container['opmode']) && !in_array($this->container['opmode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'opmode', must be one of '%s'",
                $this->container['opmode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNgfwModeAllowableValues();
        if (!is_null($this->container['ngfw_mode']) && !in_array($this->container['ngfw_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ngfw_mode', must be one of '%s'",
                $this->container['ngfw_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHttpExternalDestAllowableValues();
        if (!is_null($this->container['http_external_dest']) && !in_array($this->container['http_external_dest'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'http_external_dest', must be one of '%s'",
                $this->container['http_external_dest'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFirewallSessionDirtyAllowableValues();
        if (!is_null($this->container['firewall_session_dirty']) && !in_array($this->container['firewall_session_dirty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'firewall_session_dirty', must be one of '%s'",
                $this->container['firewall_session_dirty'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['device']) && (mb_strlen($this->container['device']) > 35)) {
            $invalidProperties[] = "invalid value for 'device', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bfd_desired_min_tx']) && ($this->container['bfd_desired_min_tx'] > 100000)) {
            $invalidProperties[] = "invalid value for 'bfd_desired_min_tx', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['bfd_desired_min_tx']) && ($this->container['bfd_desired_min_tx'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_desired_min_tx', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bfd_required_min_rx']) && ($this->container['bfd_required_min_rx'] > 100000)) {
            $invalidProperties[] = "invalid value for 'bfd_required_min_rx', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['bfd_required_min_rx']) && ($this->container['bfd_required_min_rx'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_required_min_rx', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bfd_detect_mult']) && ($this->container['bfd_detect_mult'] > 50)) {
            $invalidProperties[] = "invalid value for 'bfd_detect_mult', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bfd_detect_mult']) && ($this->container['bfd_detect_mult'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_detect_mult', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBfdDontEnforceSrcPortAllowableValues();
        if (!is_null($this->container['bfd_dont_enforce_src_port']) && !in_array($this->container['bfd_dont_enforce_src_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd_dont_enforce_src_port', must be one of '%s'",
                $this->container['bfd_dont_enforce_src_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUtf8SpamTaggingAllowableValues();
        if (!is_null($this->container['utf8_spam_tagging']) && !in_array($this->container['utf8_spam_tagging'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'utf8_spam_tagging', must be one of '%s'",
                $this->container['utf8_spam_tagging'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWccpCacheEngineAllowableValues();
        if (!is_null($this->container['wccp_cache_engine']) && !in_array($this->container['wccp_cache_engine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wccp_cache_engine', must be one of '%s'",
                $this->container['wccp_cache_engine'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVpnStatsLogAllowableValues();
        if (!is_null($this->container['vpn_stats_log']) && !in_array($this->container['vpn_stats_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vpn_stats_log', must be one of '%s'",
                $this->container['vpn_stats_log'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vpn_stats_period']) && ($this->container['vpn_stats_period'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'vpn_stats_period', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['vpn_stats_period']) && ($this->container['vpn_stats_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'vpn_stats_period', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getV4EcmpModeAllowableValues();
        if (!is_null($this->container['v4_ecmp_mode']) && !in_array($this->container['v4_ecmp_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'v4_ecmp_mode', must be one of '%s'",
                $this->container['v4_ecmp_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac_ttl']) && ($this->container['mac_ttl'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'mac_ttl', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['mac_ttl']) && ($this->container['mac_ttl'] < 300)) {
            $invalidProperties[] = "invalid value for 'mac_ttl', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getFwSessionHairpinAllowableValues();
        if (!is_null($this->container['fw_session_hairpin']) && !in_array($this->container['fw_session_hairpin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fw_session_hairpin', must be one of '%s'",
                $this->container['fw_session_hairpin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrpTrailerActionAllowableValues();
        if (!is_null($this->container['prp_trailer_action']) && !in_array($this->container['prp_trailer_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'prp_trailer_action', must be one of '%s'",
                $this->container['prp_trailer_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSnatHairpinTrafficAllowableValues();
        if (!is_null($this->container['snat_hairpin_traffic']) && !in_array($this->container['snat_hairpin_traffic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'snat_hairpin_traffic', must be one of '%s'",
                $this->container['snat_hairpin_traffic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpProxyAllowableValues();
        if (!is_null($this->container['dhcp_proxy']) && !in_array($this->container['dhcp_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_proxy', must be one of '%s'",
                $this->container['dhcp_proxy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpProxyInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['dhcp_proxy_interface_select_method']) && !in_array($this->container['dhcp_proxy_interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_proxy_interface_select_method', must be one of '%s'",
                $this->container['dhcp_proxy_interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dhcp_proxy_interface']) && (mb_strlen($this->container['dhcp_proxy_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'dhcp_proxy_interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getCentralNatAllowableValues();
        if (!is_null($this->container['central_nat']) && !in_array($this->container['central_nat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'central_nat', must be one of '%s'",
                $this->container['central_nat'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gui_default_policy_columns']) && (count($this->container['gui_default_policy_columns']) > 0)) {
            $invalidProperties[] = "invalid value for 'gui_default_policy_columns', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($this->container['lldp_reception']) && !in_array($this->container['lldp_reception'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_reception', must be one of '%s'",
                $this->container['lldp_reception'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($this->container['lldp_transmission']) && !in_array($this->container['lldp_transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                $this->container['lldp_transmission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkDownAccessAllowableValues();
        if (!is_null($this->container['link_down_access']) && !in_array($this->container['link_down_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_down_access', must be one of '%s'",
                $this->container['link_down_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuxiliarySessionAllowableValues();
        if (!is_null($this->container['auxiliary_session']) && !in_array($this->container['auxiliary_session'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auxiliary_session', must be one of '%s'",
                $this->container['auxiliary_session'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsymrouteAllowableValues();
        if (!is_null($this->container['asymroute']) && !in_array($this->container['asymroute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asymroute', must be one of '%s'",
                $this->container['asymroute'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsymrouteIcmpAllowableValues();
        if (!is_null($this->container['asymroute_icmp']) && !in_array($this->container['asymroute_icmp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asymroute_icmp', must be one of '%s'",
                $this->container['asymroute_icmp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTcpSessionWithoutSynAllowableValues();
        if (!is_null($this->container['tcp_session_without_syn']) && !in_array($this->container['tcp_session_without_syn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tcp_session_without_syn', must be one of '%s'",
                $this->container['tcp_session_without_syn'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSesDeniedTrafficAllowableValues();
        if (!is_null($this->container['ses_denied_traffic']) && !in_array($this->container['ses_denied_traffic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ses_denied_traffic', must be one of '%s'",
                $this->container['ses_denied_traffic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictSrcCheckAllowableValues();
        if (!is_null($this->container['strict_src_check']) && !in_array($this->container['strict_src_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_src_check', must be one of '%s'",
                $this->container['strict_src_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowLinkdownPathAllowableValues();
        if (!is_null($this->container['allow_linkdown_path']) && !in_array($this->container['allow_linkdown_path'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_linkdown_path', must be one of '%s'",
                $this->container['allow_linkdown_path'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsymroute6AllowableValues();
        if (!is_null($this->container['asymroute6']) && !in_array($this->container['asymroute6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asymroute6', must be one of '%s'",
                $this->container['asymroute6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsymroute6IcmpAllowableValues();
        if (!is_null($this->container['asymroute6_icmp']) && !in_array($this->container['asymroute6_icmp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asymroute6_icmp', must be one of '%s'",
                $this->container['asymroute6_icmp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSctpSessionWithoutInitAllowableValues();
        if (!is_null($this->container['sctp_session_without_init']) && !in_array($this->container['sctp_session_without_init'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sctp_session_without_init', must be one of '%s'",
                $this->container['sctp_session_without_init'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSipExpectationAllowableValues();
        if (!is_null($this->container['sip_expectation']) && !in_array($this->container['sip_expectation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sip_expectation', must be one of '%s'",
                $this->container['sip_expectation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSipNatTraceAllowableValues();
        if (!is_null($this->container['sip_nat_trace']) && !in_array($this->container['sip_nat_trace'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sip_nat_trace', must be one of '%s'",
                $this->container['sip_nat_trace'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sip_tcp_port']) && ($this->container['sip_tcp_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'sip_tcp_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['sip_tcp_port']) && ($this->container['sip_tcp_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'sip_tcp_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sip_udp_port']) && ($this->container['sip_udp_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'sip_udp_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['sip_udp_port']) && ($this->container['sip_udp_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'sip_udp_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sip_ssl_port']) && ($this->container['sip_ssl_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'sip_ssl_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['sip_ssl_port']) && ($this->container['sip_ssl_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'sip_ssl_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sccp_port']) && ($this->container['sccp_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'sccp_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['sccp_port']) && ($this->container['sccp_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'sccp_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMulticastForwardAllowableValues();
        if (!is_null($this->container['multicast_forward']) && !in_array($this->container['multicast_forward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_forward', must be one of '%s'",
                $this->container['multicast_forward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMulticastTtlNotchangeAllowableValues();
        if (!is_null($this->container['multicast_ttl_notchange']) && !in_array($this->container['multicast_ttl_notchange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_ttl_notchange', must be one of '%s'",
                $this->container['multicast_ttl_notchange'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMulticastSkipPolicyAllowableValues();
        if (!is_null($this->container['multicast_skip_policy']) && !in_array($this->container['multicast_skip_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_skip_policy', must be one of '%s'",
                $this->container['multicast_skip_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowSubnetOverlapAllowableValues();
        if (!is_null($this->container['allow_subnet_overlap']) && !in_array($this->container['allow_subnet_overlap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_subnet_overlap', must be one of '%s'",
                $this->container['allow_subnet_overlap'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDenyTcpWithIcmpAllowableValues();
        if (!is_null($this->container['deny_tcp_with_icmp']) && !in_array($this->container['deny_tcp_with_icmp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deny_tcp_with_icmp', must be one of '%s'",
                $this->container['deny_tcp_with_icmp'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ecmp_max_paths']) && ($this->container['ecmp_max_paths'] > 255)) {
            $invalidProperties[] = "invalid value for 'ecmp_max_paths', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ecmp_max_paths']) && ($this->container['ecmp_max_paths'] < 1)) {
            $invalidProperties[] = "invalid value for 'ecmp_max_paths', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discovered_device_timeout']) && ($this->container['discovered_device_timeout'] > 365)) {
            $invalidProperties[] = "invalid value for 'discovered_device_timeout', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['discovered_device_timeout']) && ($this->container['discovered_device_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'discovered_device_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEmailPortalCheckDnsAllowableValues();
        if (!is_null($this->container['email_portal_check_dns']) && !in_array($this->container['email_portal_check_dns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email_portal_check_dns', must be one of '%s'",
                $this->container['email_portal_check_dns'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultVoipAlgModeAllowableValues();
        if (!is_null($this->container['default_voip_alg_mode']) && !in_array($this->container['default_voip_alg_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_voip_alg_mode', must be one of '%s'",
                $this->container['default_voip_alg_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiIcapAllowableValues();
        if (!is_null($this->container['gui_icap']) && !in_array($this->container['gui_icap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_icap', must be one of '%s'",
                $this->container['gui_icap'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiNat4664AllowableValues();
        if (!is_null($this->container['gui_nat46_64']) && !in_array($this->container['gui_nat46_64'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_nat46_64', must be one of '%s'",
                $this->container['gui_nat46_64'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiImplicitPolicyAllowableValues();
        if (!is_null($this->container['gui_implicit_policy']) && !in_array($this->container['gui_implicit_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_implicit_policy', must be one of '%s'",
                $this->container['gui_implicit_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDnsDatabaseAllowableValues();
        if (!is_null($this->container['gui_dns_database']) && !in_array($this->container['gui_dns_database'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_dns_database', must be one of '%s'",
                $this->container['gui_dns_database'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiLoadBalanceAllowableValues();
        if (!is_null($this->container['gui_load_balance']) && !in_array($this->container['gui_load_balance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_load_balance', must be one of '%s'",
                $this->container['gui_load_balance'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiMulticastPolicyAllowableValues();
        if (!is_null($this->container['gui_multicast_policy']) && !in_array($this->container['gui_multicast_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_multicast_policy', must be one of '%s'",
                $this->container['gui_multicast_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDosPolicyAllowableValues();
        if (!is_null($this->container['gui_dos_policy']) && !in_array($this->container['gui_dos_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_dos_policy', must be one of '%s'",
                $this->container['gui_dos_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiObjectColorsAllowableValues();
        if (!is_null($this->container['gui_object_colors']) && !in_array($this->container['gui_object_colors'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_object_colors', must be one of '%s'",
                $this->container['gui_object_colors'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiReplacementMessageGroupsAllowableValues();
        if (!is_null($this->container['gui_replacement_message_groups']) && !in_array($this->container['gui_replacement_message_groups'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_replacement_message_groups', must be one of '%s'",
                $this->container['gui_replacement_message_groups'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiVoipProfileAllowableValues();
        if (!is_null($this->container['gui_voip_profile']) && !in_array($this->container['gui_voip_profile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_voip_profile', must be one of '%s'",
                $this->container['gui_voip_profile'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiApProfileAllowableValues();
        if (!is_null($this->container['gui_ap_profile']) && !in_array($this->container['gui_ap_profile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_ap_profile', must be one of '%s'",
                $this->container['gui_ap_profile'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiSecurityProfileGroupAllowableValues();
        if (!is_null($this->container['gui_security_profile_group']) && !in_array($this->container['gui_security_profile_group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_security_profile_group', must be one of '%s'",
                $this->container['gui_security_profile_group'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiLocalInPolicyAllowableValues();
        if (!is_null($this->container['gui_local_in_policy']) && !in_array($this->container['gui_local_in_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_local_in_policy', must be one of '%s'",
                $this->container['gui_local_in_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiLocalReportsAllowableValues();
        if (!is_null($this->container['gui_local_reports']) && !in_array($this->container['gui_local_reports'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_local_reports', must be one of '%s'",
                $this->container['gui_local_reports'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWanoptCacheAllowableValues();
        if (!is_null($this->container['gui_wanopt_cache']) && !in_array($this->container['gui_wanopt_cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_wanopt_cache', must be one of '%s'",
                $this->container['gui_wanopt_cache'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiExplicitProxyAllowableValues();
        if (!is_null($this->container['gui_explicit_proxy']) && !in_array($this->container['gui_explicit_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_explicit_proxy', must be one of '%s'",
                $this->container['gui_explicit_proxy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDynamicRoutingAllowableValues();
        if (!is_null($this->container['gui_dynamic_routing']) && !in_array($this->container['gui_dynamic_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_dynamic_routing', must be one of '%s'",
                $this->container['gui_dynamic_routing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiSslvpnPersonalBookmarksAllowableValues();
        if (!is_null($this->container['gui_sslvpn_personal_bookmarks']) && !in_array($this->container['gui_sslvpn_personal_bookmarks'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_sslvpn_personal_bookmarks', must be one of '%s'",
                $this->container['gui_sslvpn_personal_bookmarks'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiSslvpnRealmsAllowableValues();
        if (!is_null($this->container['gui_sslvpn_realms']) && !in_array($this->container['gui_sslvpn_realms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_sslvpn_realms', must be one of '%s'",
                $this->container['gui_sslvpn_realms'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiPolicyBasedIpsecAllowableValues();
        if (!is_null($this->container['gui_policy_based_ipsec']) && !in_array($this->container['gui_policy_based_ipsec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_policy_based_ipsec', must be one of '%s'",
                $this->container['gui_policy_based_ipsec'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiThreatWeightAllowableValues();
        if (!is_null($this->container['gui_threat_weight']) && !in_array($this->container['gui_threat_weight'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_threat_weight', must be one of '%s'",
                $this->container['gui_threat_weight'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiSpamfilterAllowableValues();
        if (!is_null($this->container['gui_spamfilter']) && !in_array($this->container['gui_spamfilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_spamfilter', must be one of '%s'",
                $this->container['gui_spamfilter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiFileFilterAllowableValues();
        if (!is_null($this->container['gui_file_filter']) && !in_array($this->container['gui_file_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_file_filter', must be one of '%s'",
                $this->container['gui_file_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiApplicationControlAllowableValues();
        if (!is_null($this->container['gui_application_control']) && !in_array($this->container['gui_application_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_application_control', must be one of '%s'",
                $this->container['gui_application_control'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiIpsAllowableValues();
        if (!is_null($this->container['gui_ips']) && !in_array($this->container['gui_ips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_ips', must be one of '%s'",
                $this->container['gui_ips'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiEndpointControlAllowableValues();
        if (!is_null($this->container['gui_endpoint_control']) && !in_array($this->container['gui_endpoint_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_endpoint_control', must be one of '%s'",
                $this->container['gui_endpoint_control'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiEndpointControlAdvancedAllowableValues();
        if (!is_null($this->container['gui_endpoint_control_advanced']) && !in_array($this->container['gui_endpoint_control_advanced'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_endpoint_control_advanced', must be one of '%s'",
                $this->container['gui_endpoint_control_advanced'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDhcpAdvancedAllowableValues();
        if (!is_null($this->container['gui_dhcp_advanced']) && !in_array($this->container['gui_dhcp_advanced'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_dhcp_advanced', must be one of '%s'",
                $this->container['gui_dhcp_advanced'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiVpnAllowableValues();
        if (!is_null($this->container['gui_vpn']) && !in_array($this->container['gui_vpn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_vpn', must be one of '%s'",
                $this->container['gui_vpn'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWirelessControllerAllowableValues();
        if (!is_null($this->container['gui_wireless_controller']) && !in_array($this->container['gui_wireless_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_wireless_controller', must be one of '%s'",
                $this->container['gui_wireless_controller'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiSwitchControllerAllowableValues();
        if (!is_null($this->container['gui_switch_controller']) && !in_array($this->container['gui_switch_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_switch_controller', must be one of '%s'",
                $this->container['gui_switch_controller'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiFortiapSplitTunnelingAllowableValues();
        if (!is_null($this->container['gui_fortiap_split_tunneling']) && !in_array($this->container['gui_fortiap_split_tunneling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_fortiap_split_tunneling', must be one of '%s'",
                $this->container['gui_fortiap_split_tunneling'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWebfilterAdvancedAllowableValues();
        if (!is_null($this->container['gui_webfilter_advanced']) && !in_array($this->container['gui_webfilter_advanced'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_webfilter_advanced', must be one of '%s'",
                $this->container['gui_webfilter_advanced'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiTrafficShapingAllowableValues();
        if (!is_null($this->container['gui_traffic_shaping']) && !in_array($this->container['gui_traffic_shaping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_traffic_shaping', must be one of '%s'",
                $this->container['gui_traffic_shaping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWanLoadBalancingAllowableValues();
        if (!is_null($this->container['gui_wan_load_balancing']) && !in_array($this->container['gui_wan_load_balancing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_wan_load_balancing', must be one of '%s'",
                $this->container['gui_wan_load_balancing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiAntivirusAllowableValues();
        if (!is_null($this->container['gui_antivirus']) && !in_array($this->container['gui_antivirus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_antivirus', must be one of '%s'",
                $this->container['gui_antivirus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWebfilterAllowableValues();
        if (!is_null($this->container['gui_webfilter']) && !in_array($this->container['gui_webfilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_webfilter', must be one of '%s'",
                $this->container['gui_webfilter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDnsfilterAllowableValues();
        if (!is_null($this->container['gui_dnsfilter']) && !in_array($this->container['gui_dnsfilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_dnsfilter', must be one of '%s'",
                $this->container['gui_dnsfilter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWafProfileAllowableValues();
        if (!is_null($this->container['gui_waf_profile']) && !in_array($this->container['gui_waf_profile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_waf_profile', must be one of '%s'",
                $this->container['gui_waf_profile'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiFortiextenderControllerAllowableValues();
        if (!is_null($this->container['gui_fortiextender_controller']) && !in_array($this->container['gui_fortiextender_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_fortiextender_controller', must be one of '%s'",
                $this->container['gui_fortiextender_controller'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiAdvancedPolicyAllowableValues();
        if (!is_null($this->container['gui_advanced_policy']) && !in_array($this->container['gui_advanced_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_advanced_policy', must be one of '%s'",
                $this->container['gui_advanced_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiAllowUnnamedPolicyAllowableValues();
        if (!is_null($this->container['gui_allow_unnamed_policy']) && !in_array($this->container['gui_allow_unnamed_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_allow_unnamed_policy', must be one of '%s'",
                $this->container['gui_allow_unnamed_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiEmailCollectionAllowableValues();
        if (!is_null($this->container['gui_email_collection']) && !in_array($this->container['gui_email_collection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_email_collection', must be one of '%s'",
                $this->container['gui_email_collection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiMultipleInterfacePolicyAllowableValues();
        if (!is_null($this->container['gui_multiple_interface_policy']) && !in_array($this->container['gui_multiple_interface_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_multiple_interface_policy', must be one of '%s'",
                $this->container['gui_multiple_interface_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiPolicyDisclaimerAllowableValues();
        if (!is_null($this->container['gui_policy_disclaimer']) && !in_array($this->container['gui_policy_disclaimer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_policy_disclaimer', must be one of '%s'",
                $this->container['gui_policy_disclaimer'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIkeSessionResumeAllowableValues();
        if (!is_null($this->container['ike_session_resume']) && !in_array($this->container['ike_session_resume'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ike_session_resume', must be one of '%s'",
                $this->container['ike_session_resume'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIkeQuickCrashDetectAllowableValues();
        if (!is_null($this->container['ike_quick_crash_detect']) && !in_array($this->container['ike_quick_crash_detect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ike_quick_crash_detect', must be one of '%s'",
                $this->container['ike_quick_crash_detect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIkeDnFormatAllowableValues();
        if (!is_null($this->container['ike_dn_format']) && !in_array($this->container['ike_dn_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ike_dn_format', must be one of '%s'",
                $this->container['ike_dn_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockLandAttackAllowableValues();
        if (!is_null($this->container['block_land_attack']) && !in_array($this->container['block_land_attack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_land_attack', must be one of '%s'",
                $this->container['block_land_attack'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments VDOM comments.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject374., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets opmode
     *
     * @return string|null
     */
    public function getOpmode()
    {
        return $this->container['opmode'];
    }

    /**
     * Sets opmode
     *
     * @param string|null $opmode Firewall operation mode (NAT or Transparent).    nat:Change to NAT mode.    transparent:Change to transparent mode.
     *
     * @return self
     */
    public function setOpmode($opmode)
    {
        $allowedValues = $this->getOpmodeAllowableValues();
        if (!is_null($opmode) && !in_array($opmode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'opmode', must be one of '%s'",
                    $opmode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['opmode'] = $opmode;

        return $this;
    }

    /**
     * Gets ngfw_mode
     *
     * @return string|null
     */
    public function getNgfwMode()
    {
        return $this->container['ngfw_mode'];
    }

    /**
     * Sets ngfw_mode
     *
     * @param string|null $ngfw_mode Next Generation Firewall (NGFW) mode.    profile-based:Application and web-filtering are configured using profiles applied to policy entries.    policy-based:Application and web-filtering are configured as policy match conditions.
     *
     * @return self
     */
    public function setNgfwMode($ngfw_mode)
    {
        $allowedValues = $this->getNgfwModeAllowableValues();
        if (!is_null($ngfw_mode) && !in_array($ngfw_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ngfw_mode', must be one of '%s'",
                    $ngfw_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ngfw_mode'] = $ngfw_mode;

        return $this;
    }

    /**
     * Gets http_external_dest
     *
     * @return string|null
     */
    public function getHttpExternalDest()
    {
        return $this->container['http_external_dest'];
    }

    /**
     * Sets http_external_dest
     *
     * @param string|null $http_external_dest Offload HTTP traffic to FortiWeb or FortiCache.    fortiweb:Offload HTTP traffic to FortiWeb for Web Application Firewall inspection.    forticache:Offload HTTP traffic to FortiCache for external web caching and WAN optimization.
     *
     * @return self
     */
    public function setHttpExternalDest($http_external_dest)
    {
        $allowedValues = $this->getHttpExternalDestAllowableValues();
        if (!is_null($http_external_dest) && !in_array($http_external_dest, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'http_external_dest', must be one of '%s'",
                    $http_external_dest,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_external_dest'] = $http_external_dest;

        return $this;
    }

    /**
     * Gets firewall_session_dirty
     *
     * @return string|null
     */
    public function getFirewallSessionDirty()
    {
        return $this->container['firewall_session_dirty'];
    }

    /**
     * Sets firewall_session_dirty
     *
     * @param string|null $firewall_session_dirty Select how to manage sessions affected by firewall policy configuration changes.    check-all:All sessions affected by a firewall policy change are flushed from the session table. When new packets are recived they are re-evaluated by stateful inspection and re-added to the session table.    check-new:Estabished sessions for changed firewall policies continue without being affected by the policy configuration change. New sessions are evaluated according to the new firewall policy configuration.    check-policy-option:Sessions are managed individually depending on the firewall policy. Some sessions may restart. Some may continue.
     *
     * @return self
     */
    public function setFirewallSessionDirty($firewall_session_dirty)
    {
        $allowedValues = $this->getFirewallSessionDirtyAllowableValues();
        if (!is_null($firewall_session_dirty) && !in_array($firewall_session_dirty, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'firewall_session_dirty', must be one of '%s'",
                    $firewall_session_dirty,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['firewall_session_dirty'] = $firewall_session_dirty;

        return $this;
    }

    /**
     * Gets manageip
     *
     * @return string|null
     */
    public function getManageip()
    {
        return $this->container['manageip'];
    }

    /**
     * Sets manageip
     *
     * @param string|null $manageip Transparent mode IPv4 management IP address and netmask.
     *
     * @return self
     */
    public function setManageip($manageip)
    {
        $this->container['manageip'] = $manageip;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Transparent mode IPv4 default gateway IP address.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address and netmask.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets manageip6
     *
     * @return string|null
     */
    public function getManageip6()
    {
        return $this->container['manageip6'];
    }

    /**
     * Sets manageip6
     *
     * @param string|null $manageip6 Transparent mode IPv6 management IP address and netmask.
     *
     * @return self
     */
    public function setManageip6($manageip6)
    {
        $this->container['manageip6'] = $manageip6;

        return $this;
    }

    /**
     * Gets gateway6
     *
     * @return string|null
     */
    public function getGateway6()
    {
        return $this->container['gateway6'];
    }

    /**
     * Sets gateway6
     *
     * @param string|null $gateway6 Transparent mode IPv4 default gateway IP address.
     *
     * @return self
     */
    public function setGateway6($gateway6)
    {
        $this->container['gateway6'] = $gateway6;

        return $this;
    }

    /**
     * Gets ip6
     *
     * @return string|null
     */
    public function getIp6()
    {
        return $this->container['ip6'];
    }

    /**
     * Sets ip6
     *
     * @param string|null $ip6 IPv6 address prefix for NAT mode.
     *
     * @return self
     */
    public function setIp6($ip6)
    {
        $this->container['ip6'] = $ip6;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string|null $device Interface to use for management access for NAT mode.
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (!is_null($device) && (mb_strlen($device) > 35)) {
            throw new \InvalidArgumentException('invalid length for $device when calling InlineObject374., must be smaller than or equal to 35.');
        }

        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces.    enable:Enable Bi-directional Forwarding Detection (BFD) on all interfaces.    disable:Disable Bi-directional Forwarding Detection (BFD) on all interfaces.
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets bfd_desired_min_tx
     *
     * @return int|null
     */
    public function getBfdDesiredMinTx()
    {
        return $this->container['bfd_desired_min_tx'];
    }

    /**
     * Sets bfd_desired_min_tx
     *
     * @param int|null $bfd_desired_min_tx BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
     *
     * @return self
     */
    public function setBfdDesiredMinTx($bfd_desired_min_tx)
    {

        if (!is_null($bfd_desired_min_tx) && ($bfd_desired_min_tx > 100000)) {
            throw new \InvalidArgumentException('invalid value for $bfd_desired_min_tx when calling InlineObject374., must be smaller than or equal to 100000.');
        }
        if (!is_null($bfd_desired_min_tx) && ($bfd_desired_min_tx < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_desired_min_tx when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['bfd_desired_min_tx'] = $bfd_desired_min_tx;

        return $this;
    }

    /**
     * Gets bfd_required_min_rx
     *
     * @return int|null
     */
    public function getBfdRequiredMinRx()
    {
        return $this->container['bfd_required_min_rx'];
    }

    /**
     * Sets bfd_required_min_rx
     *
     * @param int|null $bfd_required_min_rx BFD required minimal receive interval (1 - 100000 ms, default = 50).
     *
     * @return self
     */
    public function setBfdRequiredMinRx($bfd_required_min_rx)
    {

        if (!is_null($bfd_required_min_rx) && ($bfd_required_min_rx > 100000)) {
            throw new \InvalidArgumentException('invalid value for $bfd_required_min_rx when calling InlineObject374., must be smaller than or equal to 100000.');
        }
        if (!is_null($bfd_required_min_rx) && ($bfd_required_min_rx < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_required_min_rx when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['bfd_required_min_rx'] = $bfd_required_min_rx;

        return $this;
    }

    /**
     * Gets bfd_detect_mult
     *
     * @return int|null
     */
    public function getBfdDetectMult()
    {
        return $this->container['bfd_detect_mult'];
    }

    /**
     * Sets bfd_detect_mult
     *
     * @param int|null $bfd_detect_mult BFD detection multiplier (1 - 50, default = 3).
     *
     * @return self
     */
    public function setBfdDetectMult($bfd_detect_mult)
    {

        if (!is_null($bfd_detect_mult) && ($bfd_detect_mult > 50)) {
            throw new \InvalidArgumentException('invalid value for $bfd_detect_mult when calling InlineObject374., must be smaller than or equal to 50.');
        }
        if (!is_null($bfd_detect_mult) && ($bfd_detect_mult < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_detect_mult when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['bfd_detect_mult'] = $bfd_detect_mult;

        return $this;
    }

    /**
     * Gets bfd_dont_enforce_src_port
     *
     * @return string|null
     */
    public function getBfdDontEnforceSrcPort()
    {
        return $this->container['bfd_dont_enforce_src_port'];
    }

    /**
     * Sets bfd_dont_enforce_src_port
     *
     * @param string|null $bfd_dont_enforce_src_port Enable to not enforce verifying the source port of BFD Packets.    enable:Enable verifying the source port of BFD Packets.    disable:Disable verifying the source port of BFD Packets.
     *
     * @return self
     */
    public function setBfdDontEnforceSrcPort($bfd_dont_enforce_src_port)
    {
        $allowedValues = $this->getBfdDontEnforceSrcPortAllowableValues();
        if (!is_null($bfd_dont_enforce_src_port) && !in_array($bfd_dont_enforce_src_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd_dont_enforce_src_port', must be one of '%s'",
                    $bfd_dont_enforce_src_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd_dont_enforce_src_port'] = $bfd_dont_enforce_src_port;

        return $this;
    }

    /**
     * Gets utf8_spam_tagging
     *
     * @return string|null
     */
    public function getUtf8SpamTagging()
    {
        return $this->container['utf8_spam_tagging'];
    }

    /**
     * Sets utf8_spam_tagging
     *
     * @param string|null $utf8_spam_tagging Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support.    enable:Convert antispam tags to UTF-8.    disable:Do not convert antispam tags.
     *
     * @return self
     */
    public function setUtf8SpamTagging($utf8_spam_tagging)
    {
        $allowedValues = $this->getUtf8SpamTaggingAllowableValues();
        if (!is_null($utf8_spam_tagging) && !in_array($utf8_spam_tagging, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'utf8_spam_tagging', must be one of '%s'",
                    $utf8_spam_tagging,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['utf8_spam_tagging'] = $utf8_spam_tagging;

        return $this;
    }

    /**
     * Gets wccp_cache_engine
     *
     * @return string|null
     */
    public function getWccpCacheEngine()
    {
        return $this->container['wccp_cache_engine'];
    }

    /**
     * Sets wccp_cache_engine
     *
     * @param string|null $wccp_cache_engine Enable/disable WCCP cache engine.    enable:Enable WCCP cache engine.    disable:Disable WCCP cache engine.
     *
     * @return self
     */
    public function setWccpCacheEngine($wccp_cache_engine)
    {
        $allowedValues = $this->getWccpCacheEngineAllowableValues();
        if (!is_null($wccp_cache_engine) && !in_array($wccp_cache_engine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wccp_cache_engine', must be one of '%s'",
                    $wccp_cache_engine,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wccp_cache_engine'] = $wccp_cache_engine;

        return $this;
    }

    /**
     * Gets vpn_stats_log
     *
     * @return string|null
     */
    public function getVpnStatsLog()
    {
        return $this->container['vpn_stats_log'];
    }

    /**
     * Sets vpn_stats_log
     *
     * @param string|null $vpn_stats_log Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space.    ipsec:IPsec.    pptp:PPTP.    l2tp:L2TP.    ssl:SSL.
     *
     * @return self
     */
    public function setVpnStatsLog($vpn_stats_log)
    {
        $allowedValues = $this->getVpnStatsLogAllowableValues();
        if (!is_null($vpn_stats_log) && !in_array($vpn_stats_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vpn_stats_log', must be one of '%s'",
                    $vpn_stats_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vpn_stats_log'] = $vpn_stats_log;

        return $this;
    }

    /**
     * Gets vpn_stats_period
     *
     * @return int|null
     */
    public function getVpnStatsPeriod()
    {
        return $this->container['vpn_stats_period'];
    }

    /**
     * Sets vpn_stats_period
     *
     * @param int|null $vpn_stats_period Period to send VPN log statistics (0 or 60 - 86400 sec).
     *
     * @return self
     */
    public function setVpnStatsPeriod($vpn_stats_period)
    {

        if (!is_null($vpn_stats_period) && ($vpn_stats_period > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $vpn_stats_period when calling InlineObject374., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($vpn_stats_period) && ($vpn_stats_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $vpn_stats_period when calling InlineObject374., must be bigger than or equal to 0.');
        }

        $this->container['vpn_stats_period'] = $vpn_stats_period;

        return $this;
    }

    /**
     * Gets v4_ecmp_mode
     *
     * @return string|null
     */
    public function getV4EcmpMode()
    {
        return $this->container['v4_ecmp_mode'];
    }

    /**
     * Sets v4_ecmp_mode
     *
     * @param string|null $v4_ecmp_mode IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode.    source-ip-based:Select next hop based on source IP.    weight-based:Select next hop based on weight.    usage-based:Select next hop based on usage.    source-dest-ip-based:Select next hop based on both source and destination IPs.
     *
     * @return self
     */
    public function setV4EcmpMode($v4_ecmp_mode)
    {
        $allowedValues = $this->getV4EcmpModeAllowableValues();
        if (!is_null($v4_ecmp_mode) && !in_array($v4_ecmp_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'v4_ecmp_mode', must be one of '%s'",
                    $v4_ecmp_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['v4_ecmp_mode'] = $v4_ecmp_mode;

        return $this;
    }

    /**
     * Gets mac_ttl
     *
     * @return int|null
     */
    public function getMacTtl()
    {
        return $this->container['mac_ttl'];
    }

    /**
     * Sets mac_ttl
     *
     * @param int|null $mac_ttl Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
     *
     * @return self
     */
    public function setMacTtl($mac_ttl)
    {

        if (!is_null($mac_ttl) && ($mac_ttl > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $mac_ttl when calling InlineObject374., must be smaller than or equal to 8640000.');
        }
        if (!is_null($mac_ttl) && ($mac_ttl < 300)) {
            throw new \InvalidArgumentException('invalid value for $mac_ttl when calling InlineObject374., must be bigger than or equal to 300.');
        }

        $this->container['mac_ttl'] = $mac_ttl;

        return $this;
    }

    /**
     * Gets fw_session_hairpin
     *
     * @return string|null
     */
    public function getFwSessionHairpin()
    {
        return $this->container['fw_session_hairpin'];
    }

    /**
     * Sets fw_session_hairpin
     *
     * @param string|null $fw_session_hairpin Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate.    enable:Perform a policy check every time.    disable:Perform a policy check only the first time the session is received.
     *
     * @return self
     */
    public function setFwSessionHairpin($fw_session_hairpin)
    {
        $allowedValues = $this->getFwSessionHairpinAllowableValues();
        if (!is_null($fw_session_hairpin) && !in_array($fw_session_hairpin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fw_session_hairpin', must be one of '%s'",
                    $fw_session_hairpin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fw_session_hairpin'] = $fw_session_hairpin;

        return $this;
    }

    /**
     * Gets prp_trailer_action
     *
     * @return string|null
     */
    public function getPrpTrailerAction()
    {
        return $this->container['prp_trailer_action'];
    }

    /**
     * Sets prp_trailer_action
     *
     * @param string|null $prp_trailer_action Enable/disable action to take on PRP trailer.    enable:Try to keep PRP trailer.    disable:Trim PRP trailer.
     *
     * @return self
     */
    public function setPrpTrailerAction($prp_trailer_action)
    {
        $allowedValues = $this->getPrpTrailerActionAllowableValues();
        if (!is_null($prp_trailer_action) && !in_array($prp_trailer_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'prp_trailer_action', must be one of '%s'",
                    $prp_trailer_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prp_trailer_action'] = $prp_trailer_action;

        return $this;
    }

    /**
     * Gets snat_hairpin_traffic
     *
     * @return string|null
     */
    public function getSnatHairpinTraffic()
    {
        return $this->container['snat_hairpin_traffic'];
    }

    /**
     * Sets snat_hairpin_traffic
     *
     * @param string|null $snat_hairpin_traffic Enable/disable source NAT (SNAT) for hairpin traffic.    enable:Enable SNAT for hairpin traffic.    disable:Disable SNAT for hairpin traffic.
     *
     * @return self
     */
    public function setSnatHairpinTraffic($snat_hairpin_traffic)
    {
        $allowedValues = $this->getSnatHairpinTrafficAllowableValues();
        if (!is_null($snat_hairpin_traffic) && !in_array($snat_hairpin_traffic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'snat_hairpin_traffic', must be one of '%s'",
                    $snat_hairpin_traffic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['snat_hairpin_traffic'] = $snat_hairpin_traffic;

        return $this;
    }

    /**
     * Gets dhcp_proxy
     *
     * @return string|null
     */
    public function getDhcpProxy()
    {
        return $this->container['dhcp_proxy'];
    }

    /**
     * Sets dhcp_proxy
     *
     * @param string|null $dhcp_proxy Enable/disable the DHCP Proxy.    enable:Enable the DHCP proxy.    disable:Disable the DHCP proxy.
     *
     * @return self
     */
    public function setDhcpProxy($dhcp_proxy)
    {
        $allowedValues = $this->getDhcpProxyAllowableValues();
        if (!is_null($dhcp_proxy) && !in_array($dhcp_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_proxy', must be one of '%s'",
                    $dhcp_proxy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_proxy'] = $dhcp_proxy;

        return $this;
    }

    /**
     * Gets dhcp_proxy_interface_select_method
     *
     * @return string|null
     */
    public function getDhcpProxyInterfaceSelectMethod()
    {
        return $this->container['dhcp_proxy_interface_select_method'];
    }

    /**
     * Sets dhcp_proxy_interface_select_method
     *
     * @param string|null $dhcp_proxy_interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setDhcpProxyInterfaceSelectMethod($dhcp_proxy_interface_select_method)
    {
        $allowedValues = $this->getDhcpProxyInterfaceSelectMethodAllowableValues();
        if (!is_null($dhcp_proxy_interface_select_method) && !in_array($dhcp_proxy_interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_proxy_interface_select_method', must be one of '%s'",
                    $dhcp_proxy_interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_proxy_interface_select_method'] = $dhcp_proxy_interface_select_method;

        return $this;
    }

    /**
     * Gets dhcp_proxy_interface
     *
     * @return string|null
     */
    public function getDhcpProxyInterface()
    {
        return $this->container['dhcp_proxy_interface'];
    }

    /**
     * Sets dhcp_proxy_interface
     *
     * @param string|null $dhcp_proxy_interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setDhcpProxyInterface($dhcp_proxy_interface)
    {
        if (!is_null($dhcp_proxy_interface) && (mb_strlen($dhcp_proxy_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $dhcp_proxy_interface when calling InlineObject374., must be smaller than or equal to 15.');
        }

        $this->container['dhcp_proxy_interface'] = $dhcp_proxy_interface;

        return $this;
    }

    /**
     * Gets dhcp_server_ip
     *
     * @return string|null
     */
    public function getDhcpServerIp()
    {
        return $this->container['dhcp_server_ip'];
    }

    /**
     * Sets dhcp_server_ip
     *
     * @param string|null $dhcp_server_ip DHCP Server IPv4 address.
     *
     * @return self
     */
    public function setDhcpServerIp($dhcp_server_ip)
    {
        $this->container['dhcp_server_ip'] = $dhcp_server_ip;

        return $this;
    }

    /**
     * Gets dhcp6_server_ip
     *
     * @return string|null
     */
    public function getDhcp6ServerIp()
    {
        return $this->container['dhcp6_server_ip'];
    }

    /**
     * Sets dhcp6_server_ip
     *
     * @param string|null $dhcp6_server_ip DHCPv6 server IPv6 address.
     *
     * @return self
     */
    public function setDhcp6ServerIp($dhcp6_server_ip)
    {
        $this->container['dhcp6_server_ip'] = $dhcp6_server_ip;

        return $this;
    }

    /**
     * Gets central_nat
     *
     * @return string|null
     */
    public function getCentralNat()
    {
        return $this->container['central_nat'];
    }

    /**
     * Sets central_nat
     *
     * @param string|null $central_nat Enable/disable central NAT.    enable:Enable central NAT.    disable:Disable central NAT.
     *
     * @return self
     */
    public function setCentralNat($central_nat)
    {
        $allowedValues = $this->getCentralNatAllowableValues();
        if (!is_null($central_nat) && !in_array($central_nat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'central_nat', must be one of '%s'",
                    $central_nat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['central_nat'] = $central_nat;

        return $this;
    }

    /**
     * Gets gui_default_policy_columns
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSettingsGuiDefaultPolicyColumns[]|null
     */
    public function getGuiDefaultPolicyColumns()
    {
        return $this->container['gui_default_policy_columns'];
    }

    /**
     * Sets gui_default_policy_columns
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSettingsGuiDefaultPolicyColumns[]|null $gui_default_policy_columns Default columns to display for policy lists on GUI.
     *
     * @return self
     */
    public function setGuiDefaultPolicyColumns($gui_default_policy_columns)
    {

        if (!is_null($gui_default_policy_columns) && (count($gui_default_policy_columns) > 0)) {
            throw new \InvalidArgumentException('invalid value for $gui_default_policy_columns when calling InlineObject374., number of items must be less than or equal to 0.');
        }
        $this->container['gui_default_policy_columns'] = $gui_default_policy_columns;

        return $this;
    }

    /**
     * Gets lldp_reception
     *
     * @return string|null
     */
    public function getLldpReception()
    {
        return $this->container['lldp_reception'];
    }

    /**
     * Sets lldp_reception
     *
     * @param string|null $lldp_reception Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM.    enable:Enable LLDP reception for this VDOM.    disable:Disable LLDP reception for this VDOM.    global:Use the global LLDP reception configuration for this VDOM.
     *
     * @return self
     */
    public function setLldpReception($lldp_reception)
    {
        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($lldp_reception) && !in_array($lldp_reception, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_reception', must be one of '%s'",
                    $lldp_reception,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_reception'] = $lldp_reception;

        return $this;
    }

    /**
     * Gets lldp_transmission
     *
     * @return string|null
     */
    public function getLldpTransmission()
    {
        return $this->container['lldp_transmission'];
    }

    /**
     * Sets lldp_transmission
     *
     * @param string|null $lldp_transmission Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM.    enable:Enable LLDP transmission for this VDOM.    disable:Disable LLDP transmission for this VDOM.    global:Use the global LLDP transmission configuration for this VDOM.
     *
     * @return self
     */
    public function setLldpTransmission($lldp_transmission)
    {
        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($lldp_transmission) && !in_array($lldp_transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                    $lldp_transmission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_transmission'] = $lldp_transmission;

        return $this;
    }

    /**
     * Gets link_down_access
     *
     * @return string|null
     */
    public function getLinkDownAccess()
    {
        return $this->container['link_down_access'];
    }

    /**
     * Sets link_down_access
     *
     * @param string|null $link_down_access Enable/disable link down access traffic.    enable:Allow link down access traffic.    disable:Block link down access traffic.
     *
     * @return self
     */
    public function setLinkDownAccess($link_down_access)
    {
        $allowedValues = $this->getLinkDownAccessAllowableValues();
        if (!is_null($link_down_access) && !in_array($link_down_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_down_access', must be one of '%s'",
                    $link_down_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_down_access'] = $link_down_access;

        return $this;
    }

    /**
     * Gets auxiliary_session
     *
     * @return string|null
     */
    public function getAuxiliarySession()
    {
        return $this->container['auxiliary_session'];
    }

    /**
     * Sets auxiliary_session
     *
     * @param string|null $auxiliary_session Enable/disable auxiliary session.    enable:Enable auxiliary session for this VDOM.    disable:Disable auxiliary session for this VDOM.
     *
     * @return self
     */
    public function setAuxiliarySession($auxiliary_session)
    {
        $allowedValues = $this->getAuxiliarySessionAllowableValues();
        if (!is_null($auxiliary_session) && !in_array($auxiliary_session, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auxiliary_session', must be one of '%s'",
                    $auxiliary_session,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auxiliary_session'] = $auxiliary_session;

        return $this;
    }

    /**
     * Gets asymroute
     *
     * @return string|null
     */
    public function getAsymroute()
    {
        return $this->container['asymroute'];
    }

    /**
     * Sets asymroute
     *
     * @param string|null $asymroute Enable/disable IPv4 asymmetric routing.    enable:Enable IPv4 asymmetric routing.    disable:Disable IPv4 asymmetric routing.
     *
     * @return self
     */
    public function setAsymroute($asymroute)
    {
        $allowedValues = $this->getAsymrouteAllowableValues();
        if (!is_null($asymroute) && !in_array($asymroute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asymroute', must be one of '%s'",
                    $asymroute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asymroute'] = $asymroute;

        return $this;
    }

    /**
     * Gets asymroute_icmp
     *
     * @return string|null
     */
    public function getAsymrouteIcmp()
    {
        return $this->container['asymroute_icmp'];
    }

    /**
     * Sets asymroute_icmp
     *
     * @param string|null $asymroute_icmp Enable/disable ICMP asymmetric routing.    enable:Enable ICMP asymmetric routing.    disable:Disable ICMP asymmetric routing.
     *
     * @return self
     */
    public function setAsymrouteIcmp($asymroute_icmp)
    {
        $allowedValues = $this->getAsymrouteIcmpAllowableValues();
        if (!is_null($asymroute_icmp) && !in_array($asymroute_icmp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asymroute_icmp', must be one of '%s'",
                    $asymroute_icmp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asymroute_icmp'] = $asymroute_icmp;

        return $this;
    }

    /**
     * Gets tcp_session_without_syn
     *
     * @return string|null
     */
    public function getTcpSessionWithoutSyn()
    {
        return $this->container['tcp_session_without_syn'];
    }

    /**
     * Sets tcp_session_without_syn
     *
     * @param string|null $tcp_session_without_syn Enable/disable allowing TCP session without SYN flags.    enable:Allow TCP session without SYN flags.    disable:Do not allow TCP session without SYN flags.
     *
     * @return self
     */
    public function setTcpSessionWithoutSyn($tcp_session_without_syn)
    {
        $allowedValues = $this->getTcpSessionWithoutSynAllowableValues();
        if (!is_null($tcp_session_without_syn) && !in_array($tcp_session_without_syn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tcp_session_without_syn', must be one of '%s'",
                    $tcp_session_without_syn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tcp_session_without_syn'] = $tcp_session_without_syn;

        return $this;
    }

    /**
     * Gets ses_denied_traffic
     *
     * @return string|null
     */
    public function getSesDeniedTraffic()
    {
        return $this->container['ses_denied_traffic'];
    }

    /**
     * Sets ses_denied_traffic
     *
     * @param string|null $ses_denied_traffic Enable/disable including denied session in the session table.    enable:Include denied sessions in the session table.    disable:Do not add denied sessions to the session table.
     *
     * @return self
     */
    public function setSesDeniedTraffic($ses_denied_traffic)
    {
        $allowedValues = $this->getSesDeniedTrafficAllowableValues();
        if (!is_null($ses_denied_traffic) && !in_array($ses_denied_traffic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ses_denied_traffic', must be one of '%s'",
                    $ses_denied_traffic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ses_denied_traffic'] = $ses_denied_traffic;

        return $this;
    }

    /**
     * Gets strict_src_check
     *
     * @return string|null
     */
    public function getStrictSrcCheck()
    {
        return $this->container['strict_src_check'];
    }

    /**
     * Sets strict_src_check
     *
     * @param string|null $strict_src_check Enable/disable strict source verification.    enable:Enable strict source verification.    disable:Disable strict source verification.
     *
     * @return self
     */
    public function setStrictSrcCheck($strict_src_check)
    {
        $allowedValues = $this->getStrictSrcCheckAllowableValues();
        if (!is_null($strict_src_check) && !in_array($strict_src_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_src_check', must be one of '%s'",
                    $strict_src_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_src_check'] = $strict_src_check;

        return $this;
    }

    /**
     * Gets allow_linkdown_path
     *
     * @return string|null
     */
    public function getAllowLinkdownPath()
    {
        return $this->container['allow_linkdown_path'];
    }

    /**
     * Sets allow_linkdown_path
     *
     * @param string|null $allow_linkdown_path Enable/disable link down path.    enable:Allow link down path.    disable:Do not allow link down path.
     *
     * @return self
     */
    public function setAllowLinkdownPath($allow_linkdown_path)
    {
        $allowedValues = $this->getAllowLinkdownPathAllowableValues();
        if (!is_null($allow_linkdown_path) && !in_array($allow_linkdown_path, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_linkdown_path', must be one of '%s'",
                    $allow_linkdown_path,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_linkdown_path'] = $allow_linkdown_path;

        return $this;
    }

    /**
     * Gets asymroute6
     *
     * @return string|null
     */
    public function getAsymroute6()
    {
        return $this->container['asymroute6'];
    }

    /**
     * Sets asymroute6
     *
     * @param string|null $asymroute6 Enable/disable asymmetric IPv6 routing.    enable:Enable asymmetric IPv6 routing.    disable:Disable asymmetric IPv6 routing.
     *
     * @return self
     */
    public function setAsymroute6($asymroute6)
    {
        $allowedValues = $this->getAsymroute6AllowableValues();
        if (!is_null($asymroute6) && !in_array($asymroute6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asymroute6', must be one of '%s'",
                    $asymroute6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asymroute6'] = $asymroute6;

        return $this;
    }

    /**
     * Gets asymroute6_icmp
     *
     * @return string|null
     */
    public function getAsymroute6Icmp()
    {
        return $this->container['asymroute6_icmp'];
    }

    /**
     * Sets asymroute6_icmp
     *
     * @param string|null $asymroute6_icmp Enable/disable asymmetric ICMPv6 routing.    enable:Enable asymmetric ICMPv6 routing.    disable:Disable asymmetric ICMPv6 routing.
     *
     * @return self
     */
    public function setAsymroute6Icmp($asymroute6_icmp)
    {
        $allowedValues = $this->getAsymroute6IcmpAllowableValues();
        if (!is_null($asymroute6_icmp) && !in_array($asymroute6_icmp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asymroute6_icmp', must be one of '%s'",
                    $asymroute6_icmp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asymroute6_icmp'] = $asymroute6_icmp;

        return $this;
    }

    /**
     * Gets sctp_session_without_init
     *
     * @return string|null
     */
    public function getSctpSessionWithoutInit()
    {
        return $this->container['sctp_session_without_init'];
    }

    /**
     * Sets sctp_session_without_init
     *
     * @param string|null $sctp_session_without_init Enable/disable SCTP session creation without SCTP INIT.    enable:Enable SCTP session creation without SCTP INIT.    disable:Disable SCTP session creation without SCTP INIT.
     *
     * @return self
     */
    public function setSctpSessionWithoutInit($sctp_session_without_init)
    {
        $allowedValues = $this->getSctpSessionWithoutInitAllowableValues();
        if (!is_null($sctp_session_without_init) && !in_array($sctp_session_without_init, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sctp_session_without_init', must be one of '%s'",
                    $sctp_session_without_init,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sctp_session_without_init'] = $sctp_session_without_init;

        return $this;
    }

    /**
     * Gets sip_expectation
     *
     * @return string|null
     */
    public function getSipExpectation()
    {
        return $this->container['sip_expectation'];
    }

    /**
     * Sets sip_expectation
     *
     * @param string|null $sip_expectation Enable/disable the SIP kernel session helper to create an expectation for port 5060.    enable:Allow SIP session helper to create an expectation for port 5060.    disable:Prevent SIP session helper from creating an expectation for port 5060.
     *
     * @return self
     */
    public function setSipExpectation($sip_expectation)
    {
        $allowedValues = $this->getSipExpectationAllowableValues();
        if (!is_null($sip_expectation) && !in_array($sip_expectation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sip_expectation', must be one of '%s'",
                    $sip_expectation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sip_expectation'] = $sip_expectation;

        return $this;
    }

    /**
     * Gets sip_nat_trace
     *
     * @return string|null
     */
    public function getSipNatTrace()
    {
        return $this->container['sip_nat_trace'];
    }

    /**
     * Sets sip_nat_trace
     *
     * @param string|null $sip_nat_trace Enable/disable recording the original SIP source IP address when NAT is used.    enable:Record the original SIP source IP address when NAT is used.    disable:Do not record the original SIP source IP address when NAT is used.
     *
     * @return self
     */
    public function setSipNatTrace($sip_nat_trace)
    {
        $allowedValues = $this->getSipNatTraceAllowableValues();
        if (!is_null($sip_nat_trace) && !in_array($sip_nat_trace, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sip_nat_trace', must be one of '%s'",
                    $sip_nat_trace,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sip_nat_trace'] = $sip_nat_trace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this VDOM.    enable:Enable this VDOM.    disable:Disable this VDOM.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sip_tcp_port
     *
     * @return int|null
     */
    public function getSipTcpPort()
    {
        return $this->container['sip_tcp_port'];
    }

    /**
     * Sets sip_tcp_port
     *
     * @param int|null $sip_tcp_port TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
     *
     * @return self
     */
    public function setSipTcpPort($sip_tcp_port)
    {

        if (!is_null($sip_tcp_port) && ($sip_tcp_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $sip_tcp_port when calling InlineObject374., must be smaller than or equal to 65535.');
        }
        if (!is_null($sip_tcp_port) && ($sip_tcp_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $sip_tcp_port when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['sip_tcp_port'] = $sip_tcp_port;

        return $this;
    }

    /**
     * Gets sip_udp_port
     *
     * @return int|null
     */
    public function getSipUdpPort()
    {
        return $this->container['sip_udp_port'];
    }

    /**
     * Sets sip_udp_port
     *
     * @param int|null $sip_udp_port UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
     *
     * @return self
     */
    public function setSipUdpPort($sip_udp_port)
    {

        if (!is_null($sip_udp_port) && ($sip_udp_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $sip_udp_port when calling InlineObject374., must be smaller than or equal to 65535.');
        }
        if (!is_null($sip_udp_port) && ($sip_udp_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $sip_udp_port when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['sip_udp_port'] = $sip_udp_port;

        return $this;
    }

    /**
     * Gets sip_ssl_port
     *
     * @return int|null
     */
    public function getSipSslPort()
    {
        return $this->container['sip_ssl_port'];
    }

    /**
     * Sets sip_ssl_port
     *
     * @param int|null $sip_ssl_port TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
     *
     * @return self
     */
    public function setSipSslPort($sip_ssl_port)
    {

        if (!is_null($sip_ssl_port) && ($sip_ssl_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $sip_ssl_port when calling InlineObject374., must be smaller than or equal to 65535.');
        }
        if (!is_null($sip_ssl_port) && ($sip_ssl_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $sip_ssl_port when calling InlineObject374., must be bigger than or equal to 0.');
        }

        $this->container['sip_ssl_port'] = $sip_ssl_port;

        return $this;
    }

    /**
     * Gets sccp_port
     *
     * @return int|null
     */
    public function getSccpPort()
    {
        return $this->container['sccp_port'];
    }

    /**
     * Sets sccp_port
     *
     * @param int|null $sccp_port TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
     *
     * @return self
     */
    public function setSccpPort($sccp_port)
    {

        if (!is_null($sccp_port) && ($sccp_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $sccp_port when calling InlineObject374., must be smaller than or equal to 65535.');
        }
        if (!is_null($sccp_port) && ($sccp_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $sccp_port when calling InlineObject374., must be bigger than or equal to 0.');
        }

        $this->container['sccp_port'] = $sccp_port;

        return $this;
    }

    /**
     * Gets multicast_forward
     *
     * @return string|null
     */
    public function getMulticastForward()
    {
        return $this->container['multicast_forward'];
    }

    /**
     * Sets multicast_forward
     *
     * @param string|null $multicast_forward Enable/disable multicast forwarding.    enable:Enable multicast forwarding.    disable:Disable multicast forwarding.
     *
     * @return self
     */
    public function setMulticastForward($multicast_forward)
    {
        $allowedValues = $this->getMulticastForwardAllowableValues();
        if (!is_null($multicast_forward) && !in_array($multicast_forward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_forward', must be one of '%s'",
                    $multicast_forward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_forward'] = $multicast_forward;

        return $this;
    }

    /**
     * Gets multicast_ttl_notchange
     *
     * @return string|null
     */
    public function getMulticastTtlNotchange()
    {
        return $this->container['multicast_ttl_notchange'];
    }

    /**
     * Sets multicast_ttl_notchange
     *
     * @param string|null $multicast_ttl_notchange Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets.    enable:The multicast TTL is not changed.    disable:The multicast TTL may be changed.
     *
     * @return self
     */
    public function setMulticastTtlNotchange($multicast_ttl_notchange)
    {
        $allowedValues = $this->getMulticastTtlNotchangeAllowableValues();
        if (!is_null($multicast_ttl_notchange) && !in_array($multicast_ttl_notchange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_ttl_notchange', must be one of '%s'",
                    $multicast_ttl_notchange,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_ttl_notchange'] = $multicast_ttl_notchange;

        return $this;
    }

    /**
     * Gets multicast_skip_policy
     *
     * @return string|null
     */
    public function getMulticastSkipPolicy()
    {
        return $this->container['multicast_skip_policy'];
    }

    /**
     * Sets multicast_skip_policy
     *
     * @param string|null $multicast_skip_policy Enable/disable allowing multicast traffic through the FortiGate without a policy check.    enable:Allowing multicast traffic through the FortiGate without creating a multicast firewall policy.    disable:Require a multicast policy to allow multicast traffic to pass through the FortiGate.
     *
     * @return self
     */
    public function setMulticastSkipPolicy($multicast_skip_policy)
    {
        $allowedValues = $this->getMulticastSkipPolicyAllowableValues();
        if (!is_null($multicast_skip_policy) && !in_array($multicast_skip_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_skip_policy', must be one of '%s'",
                    $multicast_skip_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_skip_policy'] = $multicast_skip_policy;

        return $this;
    }

    /**
     * Gets allow_subnet_overlap
     *
     * @return string|null
     */
    public function getAllowSubnetOverlap()
    {
        return $this->container['allow_subnet_overlap'];
    }

    /**
     * Sets allow_subnet_overlap
     *
     * @param string|null $allow_subnet_overlap Enable/disable allowing interface subnets to use overlapping IP addresses.    enable:Enable overlapping subnets.    disable:Disable overlapping subnets.
     *
     * @return self
     */
    public function setAllowSubnetOverlap($allow_subnet_overlap)
    {
        $allowedValues = $this->getAllowSubnetOverlapAllowableValues();
        if (!is_null($allow_subnet_overlap) && !in_array($allow_subnet_overlap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_subnet_overlap', must be one of '%s'",
                    $allow_subnet_overlap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_subnet_overlap'] = $allow_subnet_overlap;

        return $this;
    }

    /**
     * Gets deny_tcp_with_icmp
     *
     * @return string|null
     */
    public function getDenyTcpWithIcmp()
    {
        return $this->container['deny_tcp_with_icmp'];
    }

    /**
     * Sets deny_tcp_with_icmp
     *
     * @param string|null $deny_tcp_with_icmp Enable/disable denying TCP by sending an ICMP communication prohibited packet.    enable:Deny TCP with ICMP.    disable:Disable denying TCP with ICMP.
     *
     * @return self
     */
    public function setDenyTcpWithIcmp($deny_tcp_with_icmp)
    {
        $allowedValues = $this->getDenyTcpWithIcmpAllowableValues();
        if (!is_null($deny_tcp_with_icmp) && !in_array($deny_tcp_with_icmp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deny_tcp_with_icmp', must be one of '%s'",
                    $deny_tcp_with_icmp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deny_tcp_with_icmp'] = $deny_tcp_with_icmp;

        return $this;
    }

    /**
     * Gets ecmp_max_paths
     *
     * @return int|null
     */
    public function getEcmpMaxPaths()
    {
        return $this->container['ecmp_max_paths'];
    }

    /**
     * Sets ecmp_max_paths
     *
     * @param int|null $ecmp_max_paths Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 255, default = 255).
     *
     * @return self
     */
    public function setEcmpMaxPaths($ecmp_max_paths)
    {

        if (!is_null($ecmp_max_paths) && ($ecmp_max_paths > 255)) {
            throw new \InvalidArgumentException('invalid value for $ecmp_max_paths when calling InlineObject374., must be smaller than or equal to 255.');
        }
        if (!is_null($ecmp_max_paths) && ($ecmp_max_paths < 1)) {
            throw new \InvalidArgumentException('invalid value for $ecmp_max_paths when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['ecmp_max_paths'] = $ecmp_max_paths;

        return $this;
    }

    /**
     * Gets discovered_device_timeout
     *
     * @return int|null
     */
    public function getDiscoveredDeviceTimeout()
    {
        return $this->container['discovered_device_timeout'];
    }

    /**
     * Sets discovered_device_timeout
     *
     * @param int|null $discovered_device_timeout Timeout for discovered devices (1 - 365 days, default = 28).
     *
     * @return self
     */
    public function setDiscoveredDeviceTimeout($discovered_device_timeout)
    {

        if (!is_null($discovered_device_timeout) && ($discovered_device_timeout > 365)) {
            throw new \InvalidArgumentException('invalid value for $discovered_device_timeout when calling InlineObject374., must be smaller than or equal to 365.');
        }
        if (!is_null($discovered_device_timeout) && ($discovered_device_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $discovered_device_timeout when calling InlineObject374., must be bigger than or equal to 1.');
        }

        $this->container['discovered_device_timeout'] = $discovered_device_timeout;

        return $this;
    }

    /**
     * Gets email_portal_check_dns
     *
     * @return string|null
     */
    public function getEmailPortalCheckDns()
    {
        return $this->container['email_portal_check_dns'];
    }

    /**
     * Sets email_portal_check_dns
     *
     * @param string|null $email_portal_check_dns Enable/disable using DNS to validate email addresses collected by a captive portal.    disable:Disable email address checking with DNS.    enable:Enable email address checking with DNS.
     *
     * @return self
     */
    public function setEmailPortalCheckDns($email_portal_check_dns)
    {
        $allowedValues = $this->getEmailPortalCheckDnsAllowableValues();
        if (!is_null($email_portal_check_dns) && !in_array($email_portal_check_dns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email_portal_check_dns', must be one of '%s'",
                    $email_portal_check_dns,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_portal_check_dns'] = $email_portal_check_dns;

        return $this;
    }

    /**
     * Gets default_voip_alg_mode
     *
     * @return string|null
     */
    public function getDefaultVoipAlgMode()
    {
        return $this->container['default_voip_alg_mode'];
    }

    /**
     * Sets default_voip_alg_mode
     *
     * @param string|null $default_voip_alg_mode Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile.    proxy-based:Use a default proxy-based VoIP ALG.    kernel-helper-based:Use the SIP session helper.
     *
     * @return self
     */
    public function setDefaultVoipAlgMode($default_voip_alg_mode)
    {
        $allowedValues = $this->getDefaultVoipAlgModeAllowableValues();
        if (!is_null($default_voip_alg_mode) && !in_array($default_voip_alg_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_voip_alg_mode', must be one of '%s'",
                    $default_voip_alg_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_voip_alg_mode'] = $default_voip_alg_mode;

        return $this;
    }

    /**
     * Gets gui_icap
     *
     * @return string|null
     */
    public function getGuiIcap()
    {
        return $this->container['gui_icap'];
    }

    /**
     * Sets gui_icap
     *
     * @param string|null $gui_icap Enable/disable ICAP on the GUI.    enable:Enable ICAP on the GUI.    disable:Disable ICAP on the GUI.
     *
     * @return self
     */
    public function setGuiIcap($gui_icap)
    {
        $allowedValues = $this->getGuiIcapAllowableValues();
        if (!is_null($gui_icap) && !in_array($gui_icap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_icap', must be one of '%s'",
                    $gui_icap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_icap'] = $gui_icap;

        return $this;
    }

    /**
     * Gets gui_nat46_64
     *
     * @return string|null
     */
    public function getGuiNat4664()
    {
        return $this->container['gui_nat46_64'];
    }

    /**
     * Sets gui_nat46_64
     *
     * @param string|null $gui_nat46_64 Enable/disable NAT46 and NAT64 settings on the GUI.    enable:Enable NAT46 and NAT64 settings on the GUI.    disable:Disable NAT46 and NAT64 settings on the GUI.
     *
     * @return self
     */
    public function setGuiNat4664($gui_nat46_64)
    {
        $allowedValues = $this->getGuiNat4664AllowableValues();
        if (!is_null($gui_nat46_64) && !in_array($gui_nat46_64, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_nat46_64', must be one of '%s'",
                    $gui_nat46_64,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_nat46_64'] = $gui_nat46_64;

        return $this;
    }

    /**
     * Gets gui_implicit_policy
     *
     * @return string|null
     */
    public function getGuiImplicitPolicy()
    {
        return $this->container['gui_implicit_policy'];
    }

    /**
     * Sets gui_implicit_policy
     *
     * @param string|null $gui_implicit_policy Enable/disable implicit firewall policies on the GUI.    enable:Enable implicit firewall policies on the GUI.    disable:Disable implicit firewall policies on the GUI.
     *
     * @return self
     */
    public function setGuiImplicitPolicy($gui_implicit_policy)
    {
        $allowedValues = $this->getGuiImplicitPolicyAllowableValues();
        if (!is_null($gui_implicit_policy) && !in_array($gui_implicit_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_implicit_policy', must be one of '%s'",
                    $gui_implicit_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_implicit_policy'] = $gui_implicit_policy;

        return $this;
    }

    /**
     * Gets gui_dns_database
     *
     * @return string|null
     */
    public function getGuiDnsDatabase()
    {
        return $this->container['gui_dns_database'];
    }

    /**
     * Sets gui_dns_database
     *
     * @param string|null $gui_dns_database Enable/disable DNS database settings on the GUI.    enable:Enable DNS database settings on the GUI.    disable:Disable DNS database settings on the GUI.
     *
     * @return self
     */
    public function setGuiDnsDatabase($gui_dns_database)
    {
        $allowedValues = $this->getGuiDnsDatabaseAllowableValues();
        if (!is_null($gui_dns_database) && !in_array($gui_dns_database, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_dns_database', must be one of '%s'",
                    $gui_dns_database,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_dns_database'] = $gui_dns_database;

        return $this;
    }

    /**
     * Gets gui_load_balance
     *
     * @return string|null
     */
    public function getGuiLoadBalance()
    {
        return $this->container['gui_load_balance'];
    }

    /**
     * Sets gui_load_balance
     *
     * @param string|null $gui_load_balance Enable/disable server load balancing on the GUI.    enable:Enable server load balancing on the GUI.    disable:Disable server load balancing on the GUI.
     *
     * @return self
     */
    public function setGuiLoadBalance($gui_load_balance)
    {
        $allowedValues = $this->getGuiLoadBalanceAllowableValues();
        if (!is_null($gui_load_balance) && !in_array($gui_load_balance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_load_balance', must be one of '%s'",
                    $gui_load_balance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_load_balance'] = $gui_load_balance;

        return $this;
    }

    /**
     * Gets gui_multicast_policy
     *
     * @return string|null
     */
    public function getGuiMulticastPolicy()
    {
        return $this->container['gui_multicast_policy'];
    }

    /**
     * Sets gui_multicast_policy
     *
     * @param string|null $gui_multicast_policy Enable/disable multicast firewall policies on the GUI.    enable:Enable multicast firewall policies on the GUI.    disable:Disable multicast firewall policies on the GUI.
     *
     * @return self
     */
    public function setGuiMulticastPolicy($gui_multicast_policy)
    {
        $allowedValues = $this->getGuiMulticastPolicyAllowableValues();
        if (!is_null($gui_multicast_policy) && !in_array($gui_multicast_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_multicast_policy', must be one of '%s'",
                    $gui_multicast_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_multicast_policy'] = $gui_multicast_policy;

        return $this;
    }

    /**
     * Gets gui_dos_policy
     *
     * @return string|null
     */
    public function getGuiDosPolicy()
    {
        return $this->container['gui_dos_policy'];
    }

    /**
     * Sets gui_dos_policy
     *
     * @param string|null $gui_dos_policy Enable/disable DoS policies on the GUI.    enable:Enable DoS policies on the GUI.    disable:Disable DoS policies on the GUI.
     *
     * @return self
     */
    public function setGuiDosPolicy($gui_dos_policy)
    {
        $allowedValues = $this->getGuiDosPolicyAllowableValues();
        if (!is_null($gui_dos_policy) && !in_array($gui_dos_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_dos_policy', must be one of '%s'",
                    $gui_dos_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_dos_policy'] = $gui_dos_policy;

        return $this;
    }

    /**
     * Gets gui_object_colors
     *
     * @return string|null
     */
    public function getGuiObjectColors()
    {
        return $this->container['gui_object_colors'];
    }

    /**
     * Sets gui_object_colors
     *
     * @param string|null $gui_object_colors Enable/disable object colors on the GUI.    enable:Enable object colors on the GUI.    disable:Disable object colors on the GUI.
     *
     * @return self
     */
    public function setGuiObjectColors($gui_object_colors)
    {
        $allowedValues = $this->getGuiObjectColorsAllowableValues();
        if (!is_null($gui_object_colors) && !in_array($gui_object_colors, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_object_colors', must be one of '%s'",
                    $gui_object_colors,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_object_colors'] = $gui_object_colors;

        return $this;
    }

    /**
     * Gets gui_replacement_message_groups
     *
     * @return string|null
     */
    public function getGuiReplacementMessageGroups()
    {
        return $this->container['gui_replacement_message_groups'];
    }

    /**
     * Sets gui_replacement_message_groups
     *
     * @param string|null $gui_replacement_message_groups Enable/disable replacement message groups on the GUI.    enable:Enable replacement message groups on the GUI.    disable:Disable replacement message groups on the GUI.
     *
     * @return self
     */
    public function setGuiReplacementMessageGroups($gui_replacement_message_groups)
    {
        $allowedValues = $this->getGuiReplacementMessageGroupsAllowableValues();
        if (!is_null($gui_replacement_message_groups) && !in_array($gui_replacement_message_groups, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_replacement_message_groups', must be one of '%s'",
                    $gui_replacement_message_groups,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_replacement_message_groups'] = $gui_replacement_message_groups;

        return $this;
    }

    /**
     * Gets gui_voip_profile
     *
     * @return string|null
     */
    public function getGuiVoipProfile()
    {
        return $this->container['gui_voip_profile'];
    }

    /**
     * Sets gui_voip_profile
     *
     * @param string|null $gui_voip_profile Enable/disable VoIP profiles on the GUI.    enable:Enable VoIP profiles on the GUI.    disable:Disable VoIP profiles on the GUI.
     *
     * @return self
     */
    public function setGuiVoipProfile($gui_voip_profile)
    {
        $allowedValues = $this->getGuiVoipProfileAllowableValues();
        if (!is_null($gui_voip_profile) && !in_array($gui_voip_profile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_voip_profile', must be one of '%s'",
                    $gui_voip_profile,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_voip_profile'] = $gui_voip_profile;

        return $this;
    }

    /**
     * Gets gui_ap_profile
     *
     * @return string|null
     */
    public function getGuiApProfile()
    {
        return $this->container['gui_ap_profile'];
    }

    /**
     * Sets gui_ap_profile
     *
     * @param string|null $gui_ap_profile Enable/disable FortiAP profiles on the GUI.    enable:Enable FortiAP profiles on the GUI.    disable:Disable FortiAP profiles on the GUI.
     *
     * @return self
     */
    public function setGuiApProfile($gui_ap_profile)
    {
        $allowedValues = $this->getGuiApProfileAllowableValues();
        if (!is_null($gui_ap_profile) && !in_array($gui_ap_profile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_ap_profile', must be one of '%s'",
                    $gui_ap_profile,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_ap_profile'] = $gui_ap_profile;

        return $this;
    }

    /**
     * Gets gui_security_profile_group
     *
     * @return string|null
     */
    public function getGuiSecurityProfileGroup()
    {
        return $this->container['gui_security_profile_group'];
    }

    /**
     * Sets gui_security_profile_group
     *
     * @param string|null $gui_security_profile_group Enable/disable Security Profile Groups on the GUI.    enable:Enable Security Profile Groups on the GUI.    disable:Disable Security Profile Groups on the GUI.
     *
     * @return self
     */
    public function setGuiSecurityProfileGroup($gui_security_profile_group)
    {
        $allowedValues = $this->getGuiSecurityProfileGroupAllowableValues();
        if (!is_null($gui_security_profile_group) && !in_array($gui_security_profile_group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_security_profile_group', must be one of '%s'",
                    $gui_security_profile_group,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_security_profile_group'] = $gui_security_profile_group;

        return $this;
    }

    /**
     * Gets gui_local_in_policy
     *
     * @return string|null
     */
    public function getGuiLocalInPolicy()
    {
        return $this->container['gui_local_in_policy'];
    }

    /**
     * Sets gui_local_in_policy
     *
     * @param string|null $gui_local_in_policy Enable/disable Local-In policies on the GUI.    enable:Enable Local-In policies on the GUI.    disable:Disable Local-In policies on the GUI.
     *
     * @return self
     */
    public function setGuiLocalInPolicy($gui_local_in_policy)
    {
        $allowedValues = $this->getGuiLocalInPolicyAllowableValues();
        if (!is_null($gui_local_in_policy) && !in_array($gui_local_in_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_local_in_policy', must be one of '%s'",
                    $gui_local_in_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_local_in_policy'] = $gui_local_in_policy;

        return $this;
    }

    /**
     * Gets gui_local_reports
     *
     * @return string|null
     */
    public function getGuiLocalReports()
    {
        return $this->container['gui_local_reports'];
    }

    /**
     * Sets gui_local_reports
     *
     * @param string|null $gui_local_reports Enable/disable local reports on the GUI.    enable:Enable local reports on the GUI.    disable:Disable local reports on the GUI.
     *
     * @return self
     */
    public function setGuiLocalReports($gui_local_reports)
    {
        $allowedValues = $this->getGuiLocalReportsAllowableValues();
        if (!is_null($gui_local_reports) && !in_array($gui_local_reports, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_local_reports', must be one of '%s'",
                    $gui_local_reports,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_local_reports'] = $gui_local_reports;

        return $this;
    }

    /**
     * Gets gui_wanopt_cache
     *
     * @return string|null
     */
    public function getGuiWanoptCache()
    {
        return $this->container['gui_wanopt_cache'];
    }

    /**
     * Sets gui_wanopt_cache
     *
     * @param string|null $gui_wanopt_cache Enable/disable WAN Optimization and Web Caching on the GUI.    enable:Enable WAN Optimization and Web Caching on the GUI.    disable:Disable WAN Optimization and Web Caching on the GUI.
     *
     * @return self
     */
    public function setGuiWanoptCache($gui_wanopt_cache)
    {
        $allowedValues = $this->getGuiWanoptCacheAllowableValues();
        if (!is_null($gui_wanopt_cache) && !in_array($gui_wanopt_cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_wanopt_cache', must be one of '%s'",
                    $gui_wanopt_cache,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_wanopt_cache'] = $gui_wanopt_cache;

        return $this;
    }

    /**
     * Gets gui_explicit_proxy
     *
     * @return string|null
     */
    public function getGuiExplicitProxy()
    {
        return $this->container['gui_explicit_proxy'];
    }

    /**
     * Sets gui_explicit_proxy
     *
     * @param string|null $gui_explicit_proxy Enable/disable the explicit proxy on the GUI.    enable:Enable the explicit proxy on the GUI.    disable:Disable the explicit proxy on the GUI.
     *
     * @return self
     */
    public function setGuiExplicitProxy($gui_explicit_proxy)
    {
        $allowedValues = $this->getGuiExplicitProxyAllowableValues();
        if (!is_null($gui_explicit_proxy) && !in_array($gui_explicit_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_explicit_proxy', must be one of '%s'",
                    $gui_explicit_proxy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_explicit_proxy'] = $gui_explicit_proxy;

        return $this;
    }

    /**
     * Gets gui_dynamic_routing
     *
     * @return string|null
     */
    public function getGuiDynamicRouting()
    {
        return $this->container['gui_dynamic_routing'];
    }

    /**
     * Sets gui_dynamic_routing
     *
     * @param string|null $gui_dynamic_routing Enable/disable dynamic routing on the GUI.    enable:Enable dynamic routing on the GUI.    disable:Disable dynamic routing on the GUI.
     *
     * @return self
     */
    public function setGuiDynamicRouting($gui_dynamic_routing)
    {
        $allowedValues = $this->getGuiDynamicRoutingAllowableValues();
        if (!is_null($gui_dynamic_routing) && !in_array($gui_dynamic_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_dynamic_routing', must be one of '%s'",
                    $gui_dynamic_routing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_dynamic_routing'] = $gui_dynamic_routing;

        return $this;
    }

    /**
     * Gets gui_sslvpn_personal_bookmarks
     *
     * @return string|null
     */
    public function getGuiSslvpnPersonalBookmarks()
    {
        return $this->container['gui_sslvpn_personal_bookmarks'];
    }

    /**
     * Sets gui_sslvpn_personal_bookmarks
     *
     * @param string|null $gui_sslvpn_personal_bookmarks Enable/disable SSL-VPN personal bookmark management on the GUI.    enable:Enable SSL-VPN personal bookmark management on the GUI.    disable:Disable SSL-VPN personal bookmark management on the GUI.
     *
     * @return self
     */
    public function setGuiSslvpnPersonalBookmarks($gui_sslvpn_personal_bookmarks)
    {
        $allowedValues = $this->getGuiSslvpnPersonalBookmarksAllowableValues();
        if (!is_null($gui_sslvpn_personal_bookmarks) && !in_array($gui_sslvpn_personal_bookmarks, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_sslvpn_personal_bookmarks', must be one of '%s'",
                    $gui_sslvpn_personal_bookmarks,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_sslvpn_personal_bookmarks'] = $gui_sslvpn_personal_bookmarks;

        return $this;
    }

    /**
     * Gets gui_sslvpn_realms
     *
     * @return string|null
     */
    public function getGuiSslvpnRealms()
    {
        return $this->container['gui_sslvpn_realms'];
    }

    /**
     * Sets gui_sslvpn_realms
     *
     * @param string|null $gui_sslvpn_realms Enable/disable SSL-VPN realms on the GUI.    enable:Enable SSL-VPN realms on the GUI.    disable:Disable SSL-VPN realms on the GUI.
     *
     * @return self
     */
    public function setGuiSslvpnRealms($gui_sslvpn_realms)
    {
        $allowedValues = $this->getGuiSslvpnRealmsAllowableValues();
        if (!is_null($gui_sslvpn_realms) && !in_array($gui_sslvpn_realms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_sslvpn_realms', must be one of '%s'",
                    $gui_sslvpn_realms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_sslvpn_realms'] = $gui_sslvpn_realms;

        return $this;
    }

    /**
     * Gets gui_policy_based_ipsec
     *
     * @return string|null
     */
    public function getGuiPolicyBasedIpsec()
    {
        return $this->container['gui_policy_based_ipsec'];
    }

    /**
     * Sets gui_policy_based_ipsec
     *
     * @param string|null $gui_policy_based_ipsec Enable/disable policy-based IPsec VPN on the GUI.    enable:Enable policy-based IPsec VPN on the GUI.    disable:Disable policy-based IPsec VPN on the GUI.
     *
     * @return self
     */
    public function setGuiPolicyBasedIpsec($gui_policy_based_ipsec)
    {
        $allowedValues = $this->getGuiPolicyBasedIpsecAllowableValues();
        if (!is_null($gui_policy_based_ipsec) && !in_array($gui_policy_based_ipsec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_policy_based_ipsec', must be one of '%s'",
                    $gui_policy_based_ipsec,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_policy_based_ipsec'] = $gui_policy_based_ipsec;

        return $this;
    }

    /**
     * Gets gui_threat_weight
     *
     * @return string|null
     */
    public function getGuiThreatWeight()
    {
        return $this->container['gui_threat_weight'];
    }

    /**
     * Sets gui_threat_weight
     *
     * @param string|null $gui_threat_weight Enable/disable threat weight on the GUI.    enable:Enable threat weight on the GUI.    disable:Disable threat weight on the GUI.
     *
     * @return self
     */
    public function setGuiThreatWeight($gui_threat_weight)
    {
        $allowedValues = $this->getGuiThreatWeightAllowableValues();
        if (!is_null($gui_threat_weight) && !in_array($gui_threat_weight, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_threat_weight', must be one of '%s'",
                    $gui_threat_weight,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_threat_weight'] = $gui_threat_weight;

        return $this;
    }

    /**
     * Gets gui_spamfilter
     *
     * @return string|null
     */
    public function getGuiSpamfilter()
    {
        return $this->container['gui_spamfilter'];
    }

    /**
     * Sets gui_spamfilter
     *
     * @param string|null $gui_spamfilter Enable/disable Antispam on the GUI.    enable:Enable Antispam on the GUI.    disable:Disable Antispam on the GUI.
     *
     * @return self
     */
    public function setGuiSpamfilter($gui_spamfilter)
    {
        $allowedValues = $this->getGuiSpamfilterAllowableValues();
        if (!is_null($gui_spamfilter) && !in_array($gui_spamfilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_spamfilter', must be one of '%s'",
                    $gui_spamfilter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_spamfilter'] = $gui_spamfilter;

        return $this;
    }

    /**
     * Gets gui_file_filter
     *
     * @return string|null
     */
    public function getGuiFileFilter()
    {
        return $this->container['gui_file_filter'];
    }

    /**
     * Sets gui_file_filter
     *
     * @param string|null $gui_file_filter Enable/disable File-filter on the GUI.    enable:Enable File-filter on the GUI.    disable:Disable File-filter on the GUI.
     *
     * @return self
     */
    public function setGuiFileFilter($gui_file_filter)
    {
        $allowedValues = $this->getGuiFileFilterAllowableValues();
        if (!is_null($gui_file_filter) && !in_array($gui_file_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_file_filter', must be one of '%s'",
                    $gui_file_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_file_filter'] = $gui_file_filter;

        return $this;
    }

    /**
     * Gets gui_application_control
     *
     * @return string|null
     */
    public function getGuiApplicationControl()
    {
        return $this->container['gui_application_control'];
    }

    /**
     * Sets gui_application_control
     *
     * @param string|null $gui_application_control Enable/disable application control on the GUI.    enable:Enable application control on the GUI.    disable:Disable application control on the GUI.
     *
     * @return self
     */
    public function setGuiApplicationControl($gui_application_control)
    {
        $allowedValues = $this->getGuiApplicationControlAllowableValues();
        if (!is_null($gui_application_control) && !in_array($gui_application_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_application_control', must be one of '%s'",
                    $gui_application_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_application_control'] = $gui_application_control;

        return $this;
    }

    /**
     * Gets gui_ips
     *
     * @return string|null
     */
    public function getGuiIps()
    {
        return $this->container['gui_ips'];
    }

    /**
     * Sets gui_ips
     *
     * @param string|null $gui_ips Enable/disable IPS on the GUI.    enable:Enable IPS on the GUI.    disable:Disable IPS on the GUI.
     *
     * @return self
     */
    public function setGuiIps($gui_ips)
    {
        $allowedValues = $this->getGuiIpsAllowableValues();
        if (!is_null($gui_ips) && !in_array($gui_ips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_ips', must be one of '%s'",
                    $gui_ips,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_ips'] = $gui_ips;

        return $this;
    }

    /**
     * Gets gui_endpoint_control
     *
     * @return string|null
     */
    public function getGuiEndpointControl()
    {
        return $this->container['gui_endpoint_control'];
    }

    /**
     * Sets gui_endpoint_control
     *
     * @param string|null $gui_endpoint_control Enable/disable endpoint control on the GUI.    enable:Enable endpoint control on the GUI.    disable:Disable endpoint control on the GUI.
     *
     * @return self
     */
    public function setGuiEndpointControl($gui_endpoint_control)
    {
        $allowedValues = $this->getGuiEndpointControlAllowableValues();
        if (!is_null($gui_endpoint_control) && !in_array($gui_endpoint_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_endpoint_control', must be one of '%s'",
                    $gui_endpoint_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_endpoint_control'] = $gui_endpoint_control;

        return $this;
    }

    /**
     * Gets gui_endpoint_control_advanced
     *
     * @return string|null
     */
    public function getGuiEndpointControlAdvanced()
    {
        return $this->container['gui_endpoint_control_advanced'];
    }

    /**
     * Sets gui_endpoint_control_advanced
     *
     * @param string|null $gui_endpoint_control_advanced Enable/disable advanced endpoint control options on the GUI.    enable:Enable advanced endpoint control options on the GUI.    disable:Disable advanced endpoint control options on the GUI.
     *
     * @return self
     */
    public function setGuiEndpointControlAdvanced($gui_endpoint_control_advanced)
    {
        $allowedValues = $this->getGuiEndpointControlAdvancedAllowableValues();
        if (!is_null($gui_endpoint_control_advanced) && !in_array($gui_endpoint_control_advanced, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_endpoint_control_advanced', must be one of '%s'",
                    $gui_endpoint_control_advanced,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_endpoint_control_advanced'] = $gui_endpoint_control_advanced;

        return $this;
    }

    /**
     * Gets gui_dhcp_advanced
     *
     * @return string|null
     */
    public function getGuiDhcpAdvanced()
    {
        return $this->container['gui_dhcp_advanced'];
    }

    /**
     * Sets gui_dhcp_advanced
     *
     * @param string|null $gui_dhcp_advanced Enable/disable advanced DHCP options on the GUI.    enable:Enable advanced DHCP options on the GUI.    disable:Disable advanced DHCP options on the GUI.
     *
     * @return self
     */
    public function setGuiDhcpAdvanced($gui_dhcp_advanced)
    {
        $allowedValues = $this->getGuiDhcpAdvancedAllowableValues();
        if (!is_null($gui_dhcp_advanced) && !in_array($gui_dhcp_advanced, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_dhcp_advanced', must be one of '%s'",
                    $gui_dhcp_advanced,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_dhcp_advanced'] = $gui_dhcp_advanced;

        return $this;
    }

    /**
     * Gets gui_vpn
     *
     * @return string|null
     */
    public function getGuiVpn()
    {
        return $this->container['gui_vpn'];
    }

    /**
     * Sets gui_vpn
     *
     * @param string|null $gui_vpn Enable/disable VPN tunnels on the GUI.    enable:Enable VPN tunnels on the GUI.    disable:Disable VPN tunnels on the GUI.
     *
     * @return self
     */
    public function setGuiVpn($gui_vpn)
    {
        $allowedValues = $this->getGuiVpnAllowableValues();
        if (!is_null($gui_vpn) && !in_array($gui_vpn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_vpn', must be one of '%s'",
                    $gui_vpn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_vpn'] = $gui_vpn;

        return $this;
    }

    /**
     * Gets gui_wireless_controller
     *
     * @return string|null
     */
    public function getGuiWirelessController()
    {
        return $this->container['gui_wireless_controller'];
    }

    /**
     * Sets gui_wireless_controller
     *
     * @param string|null $gui_wireless_controller Enable/disable the wireless controller on the GUI.    enable:Enable the wireless controller on the GUI.    disable:Disable the wireless controller on the GUI.
     *
     * @return self
     */
    public function setGuiWirelessController($gui_wireless_controller)
    {
        $allowedValues = $this->getGuiWirelessControllerAllowableValues();
        if (!is_null($gui_wireless_controller) && !in_array($gui_wireless_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_wireless_controller', must be one of '%s'",
                    $gui_wireless_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_wireless_controller'] = $gui_wireless_controller;

        return $this;
    }

    /**
     * Gets gui_switch_controller
     *
     * @return string|null
     */
    public function getGuiSwitchController()
    {
        return $this->container['gui_switch_controller'];
    }

    /**
     * Sets gui_switch_controller
     *
     * @param string|null $gui_switch_controller Enable/disable the switch controller on the GUI.    enable:Enable the switch controller on the GUI.    disable:Disable the switch controller on the GUI.
     *
     * @return self
     */
    public function setGuiSwitchController($gui_switch_controller)
    {
        $allowedValues = $this->getGuiSwitchControllerAllowableValues();
        if (!is_null($gui_switch_controller) && !in_array($gui_switch_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_switch_controller', must be one of '%s'",
                    $gui_switch_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_switch_controller'] = $gui_switch_controller;

        return $this;
    }

    /**
     * Gets gui_fortiap_split_tunneling
     *
     * @return string|null
     */
    public function getGuiFortiapSplitTunneling()
    {
        return $this->container['gui_fortiap_split_tunneling'];
    }

    /**
     * Sets gui_fortiap_split_tunneling
     *
     * @param string|null $gui_fortiap_split_tunneling Enable/disable FortiAP split tunneling on the GUI.    enable:Enable FortiAP split tunneling on the GUI.    disable:Disable FortiAP split tunneling on the GUI.
     *
     * @return self
     */
    public function setGuiFortiapSplitTunneling($gui_fortiap_split_tunneling)
    {
        $allowedValues = $this->getGuiFortiapSplitTunnelingAllowableValues();
        if (!is_null($gui_fortiap_split_tunneling) && !in_array($gui_fortiap_split_tunneling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_fortiap_split_tunneling', must be one of '%s'",
                    $gui_fortiap_split_tunneling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_fortiap_split_tunneling'] = $gui_fortiap_split_tunneling;

        return $this;
    }

    /**
     * Gets gui_webfilter_advanced
     *
     * @return string|null
     */
    public function getGuiWebfilterAdvanced()
    {
        return $this->container['gui_webfilter_advanced'];
    }

    /**
     * Sets gui_webfilter_advanced
     *
     * @param string|null $gui_webfilter_advanced Enable/disable advanced web filtering on the GUI.    enable:Enable advanced web filtering on the GUI.    disable:Disable advanced web filtering on the GUI.
     *
     * @return self
     */
    public function setGuiWebfilterAdvanced($gui_webfilter_advanced)
    {
        $allowedValues = $this->getGuiWebfilterAdvancedAllowableValues();
        if (!is_null($gui_webfilter_advanced) && !in_array($gui_webfilter_advanced, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_webfilter_advanced', must be one of '%s'",
                    $gui_webfilter_advanced,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_webfilter_advanced'] = $gui_webfilter_advanced;

        return $this;
    }

    /**
     * Gets gui_traffic_shaping
     *
     * @return string|null
     */
    public function getGuiTrafficShaping()
    {
        return $this->container['gui_traffic_shaping'];
    }

    /**
     * Sets gui_traffic_shaping
     *
     * @param string|null $gui_traffic_shaping Enable/disable traffic shaping on the GUI.    enable:Enable traffic shaping on the GUI.    disable:Disable traffic shaping on the GUI.
     *
     * @return self
     */
    public function setGuiTrafficShaping($gui_traffic_shaping)
    {
        $allowedValues = $this->getGuiTrafficShapingAllowableValues();
        if (!is_null($gui_traffic_shaping) && !in_array($gui_traffic_shaping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_traffic_shaping', must be one of '%s'",
                    $gui_traffic_shaping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_traffic_shaping'] = $gui_traffic_shaping;

        return $this;
    }

    /**
     * Gets gui_wan_load_balancing
     *
     * @return string|null
     */
    public function getGuiWanLoadBalancing()
    {
        return $this->container['gui_wan_load_balancing'];
    }

    /**
     * Sets gui_wan_load_balancing
     *
     * @param string|null $gui_wan_load_balancing Enable/disable SD-WAN on the GUI.    enable:Enable SD-WAN on the GUI.    disable:Disable SD-WAN on the GUI.
     *
     * @return self
     */
    public function setGuiWanLoadBalancing($gui_wan_load_balancing)
    {
        $allowedValues = $this->getGuiWanLoadBalancingAllowableValues();
        if (!is_null($gui_wan_load_balancing) && !in_array($gui_wan_load_balancing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_wan_load_balancing', must be one of '%s'",
                    $gui_wan_load_balancing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_wan_load_balancing'] = $gui_wan_load_balancing;

        return $this;
    }

    /**
     * Gets gui_antivirus
     *
     * @return string|null
     */
    public function getGuiAntivirus()
    {
        return $this->container['gui_antivirus'];
    }

    /**
     * Sets gui_antivirus
     *
     * @param string|null $gui_antivirus Enable/disable AntiVirus on the GUI.    enable:Enable AntiVirus on the GUI.    disable:Disable AntiVirus on the GUI.
     *
     * @return self
     */
    public function setGuiAntivirus($gui_antivirus)
    {
        $allowedValues = $this->getGuiAntivirusAllowableValues();
        if (!is_null($gui_antivirus) && !in_array($gui_antivirus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_antivirus', must be one of '%s'",
                    $gui_antivirus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_antivirus'] = $gui_antivirus;

        return $this;
    }

    /**
     * Gets gui_webfilter
     *
     * @return string|null
     */
    public function getGuiWebfilter()
    {
        return $this->container['gui_webfilter'];
    }

    /**
     * Sets gui_webfilter
     *
     * @param string|null $gui_webfilter Enable/disable Web filtering on the GUI.    enable:Enable Web filtering on the GUI.    disable:Disable Web filtering on the GUI.
     *
     * @return self
     */
    public function setGuiWebfilter($gui_webfilter)
    {
        $allowedValues = $this->getGuiWebfilterAllowableValues();
        if (!is_null($gui_webfilter) && !in_array($gui_webfilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_webfilter', must be one of '%s'",
                    $gui_webfilter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_webfilter'] = $gui_webfilter;

        return $this;
    }

    /**
     * Gets gui_dnsfilter
     *
     * @return string|null
     */
    public function getGuiDnsfilter()
    {
        return $this->container['gui_dnsfilter'];
    }

    /**
     * Sets gui_dnsfilter
     *
     * @param string|null $gui_dnsfilter Enable/disable DNS Filtering on the GUI.    enable:Enable DNS Filtering on the GUI.    disable:Disable DNS Filtering on the GUI.
     *
     * @return self
     */
    public function setGuiDnsfilter($gui_dnsfilter)
    {
        $allowedValues = $this->getGuiDnsfilterAllowableValues();
        if (!is_null($gui_dnsfilter) && !in_array($gui_dnsfilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_dnsfilter', must be one of '%s'",
                    $gui_dnsfilter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_dnsfilter'] = $gui_dnsfilter;

        return $this;
    }

    /**
     * Gets gui_waf_profile
     *
     * @return string|null
     */
    public function getGuiWafProfile()
    {
        return $this->container['gui_waf_profile'];
    }

    /**
     * Sets gui_waf_profile
     *
     * @param string|null $gui_waf_profile Enable/disable Web Application Firewall on the GUI.    enable:Enable Web Application Firewall on the GUI.    disable:Disable Web Application Firewall on the GUI.
     *
     * @return self
     */
    public function setGuiWafProfile($gui_waf_profile)
    {
        $allowedValues = $this->getGuiWafProfileAllowableValues();
        if (!is_null($gui_waf_profile) && !in_array($gui_waf_profile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_waf_profile', must be one of '%s'",
                    $gui_waf_profile,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_waf_profile'] = $gui_waf_profile;

        return $this;
    }

    /**
     * Gets gui_fortiextender_controller
     *
     * @return string|null
     */
    public function getGuiFortiextenderController()
    {
        return $this->container['gui_fortiextender_controller'];
    }

    /**
     * Sets gui_fortiextender_controller
     *
     * @param string|null $gui_fortiextender_controller Enable/disable FortiExtender on the GUI.    enable:Enable FortiExtender on the GUI.    disable:Disable FortiExtender on the GUI.
     *
     * @return self
     */
    public function setGuiFortiextenderController($gui_fortiextender_controller)
    {
        $allowedValues = $this->getGuiFortiextenderControllerAllowableValues();
        if (!is_null($gui_fortiextender_controller) && !in_array($gui_fortiextender_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_fortiextender_controller', must be one of '%s'",
                    $gui_fortiextender_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_fortiextender_controller'] = $gui_fortiextender_controller;

        return $this;
    }

    /**
     * Gets gui_advanced_policy
     *
     * @return string|null
     */
    public function getGuiAdvancedPolicy()
    {
        return $this->container['gui_advanced_policy'];
    }

    /**
     * Sets gui_advanced_policy
     *
     * @param string|null $gui_advanced_policy Enable/disable advanced policy configuration on the GUI.    enable:Enable advanced policy configuration on the GUI.    disable:Disable advanced policy configuration on the GUI.
     *
     * @return self
     */
    public function setGuiAdvancedPolicy($gui_advanced_policy)
    {
        $allowedValues = $this->getGuiAdvancedPolicyAllowableValues();
        if (!is_null($gui_advanced_policy) && !in_array($gui_advanced_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_advanced_policy', must be one of '%s'",
                    $gui_advanced_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_advanced_policy'] = $gui_advanced_policy;

        return $this;
    }

    /**
     * Gets gui_allow_unnamed_policy
     *
     * @return string|null
     */
    public function getGuiAllowUnnamedPolicy()
    {
        return $this->container['gui_allow_unnamed_policy'];
    }

    /**
     * Sets gui_allow_unnamed_policy
     *
     * @param string|null $gui_allow_unnamed_policy Enable/disable the requirement for policy naming on the GUI.    enable:Enable the requirement for policy naming on the GUI.    disable:Disable the requirement for policy naming on the GUI.
     *
     * @return self
     */
    public function setGuiAllowUnnamedPolicy($gui_allow_unnamed_policy)
    {
        $allowedValues = $this->getGuiAllowUnnamedPolicyAllowableValues();
        if (!is_null($gui_allow_unnamed_policy) && !in_array($gui_allow_unnamed_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_allow_unnamed_policy', must be one of '%s'",
                    $gui_allow_unnamed_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_allow_unnamed_policy'] = $gui_allow_unnamed_policy;

        return $this;
    }

    /**
     * Gets gui_email_collection
     *
     * @return string|null
     */
    public function getGuiEmailCollection()
    {
        return $this->container['gui_email_collection'];
    }

    /**
     * Sets gui_email_collection
     *
     * @param string|null $gui_email_collection Enable/disable email collection on the GUI.    enable:Enable email collection on the GUI.    disable:Disable email collection on the GUI.
     *
     * @return self
     */
    public function setGuiEmailCollection($gui_email_collection)
    {
        $allowedValues = $this->getGuiEmailCollectionAllowableValues();
        if (!is_null($gui_email_collection) && !in_array($gui_email_collection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_email_collection', must be one of '%s'",
                    $gui_email_collection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_email_collection'] = $gui_email_collection;

        return $this;
    }

    /**
     * Gets gui_multiple_interface_policy
     *
     * @return string|null
     */
    public function getGuiMultipleInterfacePolicy()
    {
        return $this->container['gui_multiple_interface_policy'];
    }

    /**
     * Sets gui_multiple_interface_policy
     *
     * @param string|null $gui_multiple_interface_policy Enable/disable adding multiple interfaces to a policy on the GUI.    enable:Enable adding multiple interfaces to a policy on the GUI.    disable:Disable adding multiple interfaces to a policy on the GUI.
     *
     * @return self
     */
    public function setGuiMultipleInterfacePolicy($gui_multiple_interface_policy)
    {
        $allowedValues = $this->getGuiMultipleInterfacePolicyAllowableValues();
        if (!is_null($gui_multiple_interface_policy) && !in_array($gui_multiple_interface_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_multiple_interface_policy', must be one of '%s'",
                    $gui_multiple_interface_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_multiple_interface_policy'] = $gui_multiple_interface_policy;

        return $this;
    }

    /**
     * Gets gui_policy_disclaimer
     *
     * @return string|null
     */
    public function getGuiPolicyDisclaimer()
    {
        return $this->container['gui_policy_disclaimer'];
    }

    /**
     * Sets gui_policy_disclaimer
     *
     * @param string|null $gui_policy_disclaimer Enable/disable policy disclaimer on the GUI.    enable:Enable policy disclaimer on the GUI.    disable:Disable policy disclaimer on the GUI.
     *
     * @return self
     */
    public function setGuiPolicyDisclaimer($gui_policy_disclaimer)
    {
        $allowedValues = $this->getGuiPolicyDisclaimerAllowableValues();
        if (!is_null($gui_policy_disclaimer) && !in_array($gui_policy_disclaimer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_policy_disclaimer', must be one of '%s'",
                    $gui_policy_disclaimer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_policy_disclaimer'] = $gui_policy_disclaimer;

        return $this;
    }

    /**
     * Gets ike_session_resume
     *
     * @return string|null
     */
    public function getIkeSessionResume()
    {
        return $this->container['ike_session_resume'];
    }

    /**
     * Sets ike_session_resume
     *
     * @param string|null $ike_session_resume Enable/disable IKEv2 session resumption (RFC 5723).    enable:Enable IKEv2 session resumption (RFC 5723).    disable:Disable IKEv2 session resumption (RFC 5723).
     *
     * @return self
     */
    public function setIkeSessionResume($ike_session_resume)
    {
        $allowedValues = $this->getIkeSessionResumeAllowableValues();
        if (!is_null($ike_session_resume) && !in_array($ike_session_resume, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ike_session_resume', must be one of '%s'",
                    $ike_session_resume,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_session_resume'] = $ike_session_resume;

        return $this;
    }

    /**
     * Gets ike_quick_crash_detect
     *
     * @return string|null
     */
    public function getIkeQuickCrashDetect()
    {
        return $this->container['ike_quick_crash_detect'];
    }

    /**
     * Sets ike_quick_crash_detect
     *
     * @param string|null $ike_quick_crash_detect Enable/disable IKE quick crash detection (RFC 6290).    enable:Enable IKE quick crash detection (RFC 6290).    disable:Disable IKE quick crash detection (RFC 6290).
     *
     * @return self
     */
    public function setIkeQuickCrashDetect($ike_quick_crash_detect)
    {
        $allowedValues = $this->getIkeQuickCrashDetectAllowableValues();
        if (!is_null($ike_quick_crash_detect) && !in_array($ike_quick_crash_detect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ike_quick_crash_detect', must be one of '%s'",
                    $ike_quick_crash_detect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_quick_crash_detect'] = $ike_quick_crash_detect;

        return $this;
    }

    /**
     * Gets ike_dn_format
     *
     * @return string|null
     */
    public function getIkeDnFormat()
    {
        return $this->container['ike_dn_format'];
    }

    /**
     * Sets ike_dn_format
     *
     * @param string|null $ike_dn_format Configure IKE ASN.1 Distinguished Name format conventions.    with-space:Format IKE ASN.1 Distinguished Names with spaces between attribute names and values.    no-space:Format IKE ASN.1 Distinguished Names without spaces between attribute names and values.
     *
     * @return self
     */
    public function setIkeDnFormat($ike_dn_format)
    {
        $allowedValues = $this->getIkeDnFormatAllowableValues();
        if (!is_null($ike_dn_format) && !in_array($ike_dn_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ike_dn_format', must be one of '%s'",
                    $ike_dn_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_dn_format'] = $ike_dn_format;

        return $this;
    }

    /**
     * Gets block_land_attack
     *
     * @return string|null
     */
    public function getBlockLandAttack()
    {
        return $this->container['block_land_attack'];
    }

    /**
     * Sets block_land_attack
     *
     * @param string|null $block_land_attack Enable/disable blocking of land attacks.    disable:Do not block land attack.    enable:Block land attack.
     *
     * @return self
     */
    public function setBlockLandAttack($block_land_attack)
    {
        $allowedValues = $this->getBlockLandAttackAllowableValues();
        if (!is_null($block_land_attack) && !in_array($block_land_attack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_land_attack', must be one of '%s'",
                    $block_land_attack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_land_attack'] = $block_land_attack;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


