<?php
/**
 * ReportChartNameXSeries
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportChartNameXSeries Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportChartNameXSeries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_chart__name__x_series';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'databind' => 'string',
        'caption' => 'string',
        'caption_font_size' => 'int',
        'font_size' => 'int',
        'label_angle' => 'string',
        'is_category' => 'string',
        'scale_unit' => 'string',
        'scale_step' => 'int',
        'scale_direction' => 'string',
        'scale_format' => 'string',
        'unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'databind' => null,
        'caption' => null,
        'caption_font_size' => null,
        'font_size' => null,
        'label_angle' => null,
        'is_category' => null,
        'scale_unit' => null,
        'scale_step' => null,
        'scale_direction' => null,
        'scale_format' => null,
        'unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'databind' => 'databind',
        'caption' => 'caption',
        'caption_font_size' => 'caption-font-size',
        'font_size' => 'font-size',
        'label_angle' => 'label-angle',
        'is_category' => 'is-category',
        'scale_unit' => 'scale-unit',
        'scale_step' => 'scale-step',
        'scale_direction' => 'scale-direction',
        'scale_format' => 'scale-format',
        'unit' => 'unit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'databind' => 'setDatabind',
        'caption' => 'setCaption',
        'caption_font_size' => 'setCaptionFontSize',
        'font_size' => 'setFontSize',
        'label_angle' => 'setLabelAngle',
        'is_category' => 'setIsCategory',
        'scale_unit' => 'setScaleUnit',
        'scale_step' => 'setScaleStep',
        'scale_direction' => 'setScaleDirection',
        'scale_format' => 'setScaleFormat',
        'unit' => 'setUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'databind' => 'getDatabind',
        'caption' => 'getCaption',
        'caption_font_size' => 'getCaptionFontSize',
        'font_size' => 'getFontSize',
        'label_angle' => 'getLabelAngle',
        'is_category' => 'getIsCategory',
        'scale_unit' => 'getScaleUnit',
        'scale_step' => 'getScaleStep',
        'scale_direction' => 'getScaleDirection',
        'scale_format' => 'getScaleFormat',
        'unit' => 'getUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LABEL_ANGLE__45_DEGREE = '45-degree';
    const LABEL_ANGLE_VERTICAL = 'vertical';
    const LABEL_ANGLE_HORIZONTAL = 'horizontal';
    const IS_CATEGORY_YES = 'yes';
    const IS_CATEGORY_NO = 'no';
    const SCALE_UNIT_MINUTE = 'minute';
    const SCALE_UNIT_HOUR = 'hour';
    const SCALE_UNIT_DAY = 'day';
    const SCALE_UNIT_MONTH = 'month';
    const SCALE_UNIT_YEAR = 'year';
    const SCALE_DIRECTION_DECREASE = 'decrease';
    const SCALE_DIRECTION_INCREASE = 'increase';
    const SCALE_FORMAT_YYYY_MM_DD_HH_MM = 'YYYY-MM-DD-HH-MM';
    const SCALE_FORMAT_YYYY_MM_DD_HH = 'YYYY-MM-DD HH';
    const SCALE_FORMAT_YYYY_MM_DD = 'YYYY-MM-DD';
    const SCALE_FORMAT_YYYY_MM = 'YYYY-MM';
    const SCALE_FORMAT_YYYY = 'YYYY';
    const SCALE_FORMAT_HH_MM = 'HH-MM';
    const SCALE_FORMAT_MM_DD = 'MM-DD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAngleAllowableValues()
    {
        return [
            self::LABEL_ANGLE__45_DEGREE,
            self::LABEL_ANGLE_VERTICAL,
            self::LABEL_ANGLE_HORIZONTAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsCategoryAllowableValues()
    {
        return [
            self::IS_CATEGORY_YES,
            self::IS_CATEGORY_NO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaleUnitAllowableValues()
    {
        return [
            self::SCALE_UNIT_MINUTE,
            self::SCALE_UNIT_HOUR,
            self::SCALE_UNIT_DAY,
            self::SCALE_UNIT_MONTH,
            self::SCALE_UNIT_YEAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaleDirectionAllowableValues()
    {
        return [
            self::SCALE_DIRECTION_DECREASE,
            self::SCALE_DIRECTION_INCREASE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaleFormatAllowableValues()
    {
        return [
            self::SCALE_FORMAT_YYYY_MM_DD_HH_MM,
            self::SCALE_FORMAT_YYYY_MM_DD_HH,
            self::SCALE_FORMAT_YYYY_MM_DD,
            self::SCALE_FORMAT_YYYY_MM,
            self::SCALE_FORMAT_YYYY,
            self::SCALE_FORMAT_HH_MM,
            self::SCALE_FORMAT_MM_DD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['databind'] = $data['databind'] ?? null;
        $this->container['caption'] = $data['caption'] ?? null;
        $this->container['caption_font_size'] = $data['caption_font_size'] ?? null;
        $this->container['font_size'] = $data['font_size'] ?? null;
        $this->container['label_angle'] = $data['label_angle'] ?? null;
        $this->container['is_category'] = $data['is_category'] ?? null;
        $this->container['scale_unit'] = $data['scale_unit'] ?? null;
        $this->container['scale_step'] = $data['scale_step'] ?? null;
        $this->container['scale_direction'] = $data['scale_direction'] ?? null;
        $this->container['scale_format'] = $data['scale_format'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['databind']) && (mb_strlen($this->container['databind']) > 127)) {
            $invalidProperties[] = "invalid value for 'databind', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['caption']) && (mb_strlen($this->container['caption']) > 35)) {
            $invalidProperties[] = "invalid value for 'caption', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['caption_font_size']) && ($this->container['caption_font_size'] > 20)) {
            $invalidProperties[] = "invalid value for 'caption_font_size', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['caption_font_size']) && ($this->container['caption_font_size'] < 5)) {
            $invalidProperties[] = "invalid value for 'caption_font_size', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['font_size']) && ($this->container['font_size'] > 20)) {
            $invalidProperties[] = "invalid value for 'font_size', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['font_size']) && ($this->container['font_size'] < 5)) {
            $invalidProperties[] = "invalid value for 'font_size', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getLabelAngleAllowableValues();
        if (!is_null($this->container['label_angle']) && !in_array($this->container['label_angle'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label_angle', must be one of '%s'",
                $this->container['label_angle'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsCategoryAllowableValues();
        if (!is_null($this->container['is_category']) && !in_array($this->container['is_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_category', must be one of '%s'",
                $this->container['is_category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaleUnitAllowableValues();
        if (!is_null($this->container['scale_unit']) && !in_array($this->container['scale_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scale_unit', must be one of '%s'",
                $this->container['scale_unit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['scale_step']) && ($this->container['scale_step'] > 65535)) {
            $invalidProperties[] = "invalid value for 'scale_step', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['scale_step']) && ($this->container['scale_step'] < 1)) {
            $invalidProperties[] = "invalid value for 'scale_step', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getScaleDirectionAllowableValues();
        if (!is_null($this->container['scale_direction']) && !in_array($this->container['scale_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scale_direction', must be one of '%s'",
                $this->container['scale_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaleFormatAllowableValues();
        if (!is_null($this->container['scale_format']) && !in_array($this->container['scale_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scale_format', must be one of '%s'",
                $this->container['scale_format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 35)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets databind
     *
     * @return string|null
     */
    public function getDatabind()
    {
        return $this->container['databind'];
    }

    /**
     * Sets databind
     *
     * @param string|null $databind X-series value expression.
     *
     * @return self
     */
    public function setDatabind($databind)
    {
        if (!is_null($databind) && (mb_strlen($databind) > 127)) {
            throw new \InvalidArgumentException('invalid length for $databind when calling ReportChartNameXSeries., must be smaller than or equal to 127.');
        }

        $this->container['databind'] = $databind;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption X-series caption.
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (!is_null($caption) && (mb_strlen($caption) > 35)) {
            throw new \InvalidArgumentException('invalid length for $caption when calling ReportChartNameXSeries., must be smaller than or equal to 35.');
        }

        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets caption_font_size
     *
     * @return int|null
     */
    public function getCaptionFontSize()
    {
        return $this->container['caption_font_size'];
    }

    /**
     * Sets caption_font_size
     *
     * @param int|null $caption_font_size X-series caption font size.
     *
     * @return self
     */
    public function setCaptionFontSize($caption_font_size)
    {

        if (!is_null($caption_font_size) && ($caption_font_size > 20)) {
            throw new \InvalidArgumentException('invalid value for $caption_font_size when calling ReportChartNameXSeries., must be smaller than or equal to 20.');
        }
        if (!is_null($caption_font_size) && ($caption_font_size < 5)) {
            throw new \InvalidArgumentException('invalid value for $caption_font_size when calling ReportChartNameXSeries., must be bigger than or equal to 5.');
        }

        $this->container['caption_font_size'] = $caption_font_size;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return int|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param int|null $font_size X-series label font size.
     *
     * @return self
     */
    public function setFontSize($font_size)
    {

        if (!is_null($font_size) && ($font_size > 20)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling ReportChartNameXSeries., must be smaller than or equal to 20.');
        }
        if (!is_null($font_size) && ($font_size < 5)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling ReportChartNameXSeries., must be bigger than or equal to 5.');
        }

        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets label_angle
     *
     * @return string|null
     */
    public function getLabelAngle()
    {
        return $this->container['label_angle'];
    }

    /**
     * Sets label_angle
     *
     * @param string|null $label_angle X-series label angle.    45-degree:45-degree.    vertical:Vertical.    horizontal:Horizontal.
     *
     * @return self
     */
    public function setLabelAngle($label_angle)
    {
        $allowedValues = $this->getLabelAngleAllowableValues();
        if (!is_null($label_angle) && !in_array($label_angle, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label_angle', must be one of '%s'",
                    $label_angle,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_angle'] = $label_angle;

        return $this;
    }

    /**
     * Gets is_category
     *
     * @return string|null
     */
    public function getIsCategory()
    {
        return $this->container['is_category'];
    }

    /**
     * Sets is_category
     *
     * @param string|null $is_category X-series represent category or not.    yes:X-series is category.    no:X-series is not category.
     *
     * @return self
     */
    public function setIsCategory($is_category)
    {
        $allowedValues = $this->getIsCategoryAllowableValues();
        if (!is_null($is_category) && !in_array($is_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_category', must be one of '%s'",
                    $is_category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_category'] = $is_category;

        return $this;
    }

    /**
     * Gets scale_unit
     *
     * @return string|null
     */
    public function getScaleUnit()
    {
        return $this->container['scale_unit'];
    }

    /**
     * Sets scale_unit
     *
     * @param string|null $scale_unit Scale unit.    minute:Minute.    hour:Hour.    day:Day.    month:Month.    year:Year.
     *
     * @return self
     */
    public function setScaleUnit($scale_unit)
    {
        $allowedValues = $this->getScaleUnitAllowableValues();
        if (!is_null($scale_unit) && !in_array($scale_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scale_unit', must be one of '%s'",
                    $scale_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scale_unit'] = $scale_unit;

        return $this;
    }

    /**
     * Gets scale_step
     *
     * @return int|null
     */
    public function getScaleStep()
    {
        return $this->container['scale_step'];
    }

    /**
     * Sets scale_step
     *
     * @param int|null $scale_step Scale step.
     *
     * @return self
     */
    public function setScaleStep($scale_step)
    {

        if (!is_null($scale_step) && ($scale_step > 65535)) {
            throw new \InvalidArgumentException('invalid value for $scale_step when calling ReportChartNameXSeries., must be smaller than or equal to 65535.');
        }
        if (!is_null($scale_step) && ($scale_step < 1)) {
            throw new \InvalidArgumentException('invalid value for $scale_step when calling ReportChartNameXSeries., must be bigger than or equal to 1.');
        }

        $this->container['scale_step'] = $scale_step;

        return $this;
    }

    /**
     * Gets scale_direction
     *
     * @return string|null
     */
    public function getScaleDirection()
    {
        return $this->container['scale_direction'];
    }

    /**
     * Sets scale_direction
     *
     * @param string|null $scale_direction Scale increase or decrease.    decrease:Decrease.    increase:Increase.
     *
     * @return self
     */
    public function setScaleDirection($scale_direction)
    {
        $allowedValues = $this->getScaleDirectionAllowableValues();
        if (!is_null($scale_direction) && !in_array($scale_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scale_direction', must be one of '%s'",
                    $scale_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scale_direction'] = $scale_direction;

        return $this;
    }

    /**
     * Gets scale_format
     *
     * @return string|null
     */
    public function getScaleFormat()
    {
        return $this->container['scale_format'];
    }

    /**
     * Sets scale_format
     *
     * @param string|null $scale_format Date/time format.    YYYY-MM-DD-HH-MM:YYYY/MM/DD HH:MM    YYYY-MM-DD HH:YYYY/MM/DD HH    YYYY-MM-DD:YYYY/MM/DD    YYYY-MM:YYYY/MM    YYYY:YYYY    HH-MM:HH:MM    MM-DD:MM:DD
     *
     * @return self
     */
    public function setScaleFormat($scale_format)
    {
        $allowedValues = $this->getScaleFormatAllowableValues();
        if (!is_null($scale_format) && !in_array($scale_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scale_format', must be one of '%s'",
                    $scale_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scale_format'] = $scale_format;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit X-series unit.
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 35)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling ReportChartNameXSeries., must be smaller than or equal to 35.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


