<?php
/**
 * InlineObject34
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject34 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject34 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_34';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'server_type' => 'string',
        'server' => 'string',
        'period' => 'string',
        'vdom' => 'string',
        'scan_subdirectories' => 'string',
        'scan_on_creation' => 'string',
        'remove_deleted' => 'string',
        'keep_modified' => 'string',
        'username' => 'string',
        'password' => 'string',
        'file_path' => 'string',
        'file_pattern' => 'string',
        'sensitivity' => 'string',
        'tod_hour' => 'int',
        'tod_min' => 'int',
        'weekday' => 'string',
        'date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'server_type' => null,
        'server' => null,
        'period' => null,
        'vdom' => null,
        'scan_subdirectories' => null,
        'scan_on_creation' => null,
        'remove_deleted' => null,
        'keep_modified' => null,
        'username' => null,
        'password' => 'password',
        'file_path' => null,
        'file_pattern' => null,
        'sensitivity' => null,
        'tod_hour' => null,
        'tod_min' => null,
        'weekday' => null,
        'date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'server_type' => 'server-type',
        'server' => 'server',
        'period' => 'period',
        'vdom' => 'vdom',
        'scan_subdirectories' => 'scan-subdirectories',
        'scan_on_creation' => 'scan-on-creation',
        'remove_deleted' => 'remove-deleted',
        'keep_modified' => 'keep-modified',
        'username' => 'username',
        'password' => 'password',
        'file_path' => 'file-path',
        'file_pattern' => 'file-pattern',
        'sensitivity' => 'sensitivity',
        'tod_hour' => 'tod-hour',
        'tod_min' => 'tod-min',
        'weekday' => 'weekday',
        'date' => 'date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'server_type' => 'setServerType',
        'server' => 'setServer',
        'period' => 'setPeriod',
        'vdom' => 'setVdom',
        'scan_subdirectories' => 'setScanSubdirectories',
        'scan_on_creation' => 'setScanOnCreation',
        'remove_deleted' => 'setRemoveDeleted',
        'keep_modified' => 'setKeepModified',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'file_path' => 'setFilePath',
        'file_pattern' => 'setFilePattern',
        'sensitivity' => 'setSensitivity',
        'tod_hour' => 'setTodHour',
        'tod_min' => 'setTodMin',
        'weekday' => 'setWeekday',
        'date' => 'setDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'server_type' => 'getServerType',
        'server' => 'getServer',
        'period' => 'getPeriod',
        'vdom' => 'getVdom',
        'scan_subdirectories' => 'getScanSubdirectories',
        'scan_on_creation' => 'getScanOnCreation',
        'remove_deleted' => 'getRemoveDeleted',
        'keep_modified' => 'getKeepModified',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'file_path' => 'getFilePath',
        'file_pattern' => 'getFilePattern',
        'sensitivity' => 'getSensitivity',
        'tod_hour' => 'getTodHour',
        'tod_min' => 'getTodMin',
        'weekday' => 'getWeekday',
        'date' => 'getDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SERVER_TYPE_SAMBA = 'samba';
    const PERIOD_NONE = 'none';
    const PERIOD_DAILY = 'daily';
    const PERIOD_WEEKLY = 'weekly';
    const PERIOD_MONTHLY = 'monthly';
    const VDOM_MGMT = 'mgmt';
    const VDOM_CURRENT = 'current';
    const SCAN_SUBDIRECTORIES_ENABLE = 'enable';
    const SCAN_SUBDIRECTORIES_DISABLE = 'disable';
    const SCAN_ON_CREATION_ENABLE = 'enable';
    const SCAN_ON_CREATION_DISABLE = 'disable';
    const REMOVE_DELETED_ENABLE = 'enable';
    const REMOVE_DELETED_DISABLE = 'disable';
    const KEEP_MODIFIED_ENABLE = 'enable';
    const KEEP_MODIFIED_DISABLE = 'disable';
    const WEEKDAY_SUNDAY = 'sunday';
    const WEEKDAY_MONDAY = 'monday';
    const WEEKDAY_TUESDAY = 'tuesday';
    const WEEKDAY_WEDNESDAY = 'wednesday';
    const WEEKDAY_THURSDAY = 'thursday';
    const WEEKDAY_FRIDAY = 'friday';
    const WEEKDAY_SATURDAY = 'saturday';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerTypeAllowableValues()
    {
        return [
            self::SERVER_TYPE_SAMBA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_NONE,
            self::PERIOD_DAILY,
            self::PERIOD_WEEKLY,
            self::PERIOD_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVdomAllowableValues()
    {
        return [
            self::VDOM_MGMT,
            self::VDOM_CURRENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanSubdirectoriesAllowableValues()
    {
        return [
            self::SCAN_SUBDIRECTORIES_ENABLE,
            self::SCAN_SUBDIRECTORIES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanOnCreationAllowableValues()
    {
        return [
            self::SCAN_ON_CREATION_ENABLE,
            self::SCAN_ON_CREATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRemoveDeletedAllowableValues()
    {
        return [
            self::REMOVE_DELETED_ENABLE,
            self::REMOVE_DELETED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeepModifiedAllowableValues()
    {
        return [
            self::KEEP_MODIFIED_ENABLE,
            self::KEEP_MODIFIED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeekdayAllowableValues()
    {
        return [
            self::WEEKDAY_SUNDAY,
            self::WEEKDAY_MONDAY,
            self::WEEKDAY_TUESDAY,
            self::WEEKDAY_WEDNESDAY,
            self::WEEKDAY_THURSDAY,
            self::WEEKDAY_FRIDAY,
            self::WEEKDAY_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['scan_subdirectories'] = $data['scan_subdirectories'] ?? null;
        $this->container['scan_on_creation'] = $data['scan_on_creation'] ?? null;
        $this->container['remove_deleted'] = $data['remove_deleted'] ?? null;
        $this->container['keep_modified'] = $data['keep_modified'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['file_path'] = $data['file_path'] ?? null;
        $this->container['file_pattern'] = $data['file_pattern'] ?? null;
        $this->container['sensitivity'] = $data['sensitivity'] ?? null;
        $this->container['tod_hour'] = $data['tod_hour'] ?? null;
        $this->container['tod_min'] = $data['tod_min'] ?? null;
        $this->container['weekday'] = $data['weekday'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($this->container['server_type']) && !in_array($this->container['server_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_type', must be one of '%s'",
                $this->container['server_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 35)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($this->container['period']) && !in_array($this->container['period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'period', must be one of '%s'",
                $this->container['period'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVdomAllowableValues();
        if (!is_null($this->container['vdom']) && !in_array($this->container['vdom'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vdom', must be one of '%s'",
                $this->container['vdom'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScanSubdirectoriesAllowableValues();
        if (!is_null($this->container['scan_subdirectories']) && !in_array($this->container['scan_subdirectories'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scan_subdirectories', must be one of '%s'",
                $this->container['scan_subdirectories'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScanOnCreationAllowableValues();
        if (!is_null($this->container['scan_on_creation']) && !in_array($this->container['scan_on_creation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scan_on_creation', must be one of '%s'",
                $this->container['scan_on_creation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRemoveDeletedAllowableValues();
        if (!is_null($this->container['remove_deleted']) && !in_array($this->container['remove_deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'remove_deleted', must be one of '%s'",
                $this->container['remove_deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeepModifiedAllowableValues();
        if (!is_null($this->container['keep_modified']) && !in_array($this->container['keep_modified'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keep_modified', must be one of '%s'",
                $this->container['keep_modified'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 35)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['file_path']) && (mb_strlen($this->container['file_path']) > 119)) {
            $invalidProperties[] = "invalid value for 'file_path', the character length must be smaller than or equal to 119.";
        }

        if (!is_null($this->container['file_pattern']) && (mb_strlen($this->container['file_pattern']) > 35)) {
            $invalidProperties[] = "invalid value for 'file_pattern', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sensitivity']) && (mb_strlen($this->container['sensitivity']) > 35)) {
            $invalidProperties[] = "invalid value for 'sensitivity', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['tod_hour']) && ($this->container['tod_hour'] > 23)) {
            $invalidProperties[] = "invalid value for 'tod_hour', must be smaller than or equal to 23.";
        }

        if (!is_null($this->container['tod_hour']) && ($this->container['tod_hour'] < 0)) {
            $invalidProperties[] = "invalid value for 'tod_hour', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tod_min']) && ($this->container['tod_min'] > 59)) {
            $invalidProperties[] = "invalid value for 'tod_min', must be smaller than or equal to 59.";
        }

        if (!is_null($this->container['tod_min']) && ($this->container['tod_min'] < 0)) {
            $invalidProperties[] = "invalid value for 'tod_min', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWeekdayAllowableValues();
        if (!is_null($this->container['weekday']) && !in_array($this->container['weekday'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weekday', must be one of '%s'",
                $this->container['weekday'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['date']) && ($this->container['date'] > 31)) {
            $invalidProperties[] = "invalid value for 'date', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['date']) && ($this->container['date'] < 1)) {
            $invalidProperties[] = "invalid value for 'date', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the DLP fingerprint database.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject34., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string|null $server_type Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported.    samba:SAMBA server.
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($server_type) && !in_array($server_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_type', must be one of '%s'",
                    $server_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server IPv4 or IPv6 address of the server.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject34., must be smaller than or equal to 35.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period Frequency for which the FortiGate checks the server for new or changed files.    none:Check the server when the FortiGate starts up.    daily:Check the server once a day.    weekly:Check the server once a week.    monthly:Check the server once a month.
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($period) && !in_array($period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'period', must be one of '%s'",
                    $period,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom Select the VDOM that can communicate with the file server.    mgmt:Communicate with the file server through the management VDOM.    current:Communicate with the file server through the VDOM containing this DLP fingerprint database configuration.
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        $allowedValues = $this->getVdomAllowableValues();
        if (!is_null($vdom) && !in_array($vdom, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vdom', must be one of '%s'",
                    $vdom,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets scan_subdirectories
     *
     * @return string|null
     */
    public function getScanSubdirectories()
    {
        return $this->container['scan_subdirectories'];
    }

    /**
     * Sets scan_subdirectories
     *
     * @param string|null $scan_subdirectories Enable/disable scanning subdirectories to find files to create fingerprints from.    enable:Scan subdirectories.    disable:Do not scan subdirectories.
     *
     * @return self
     */
    public function setScanSubdirectories($scan_subdirectories)
    {
        $allowedValues = $this->getScanSubdirectoriesAllowableValues();
        if (!is_null($scan_subdirectories) && !in_array($scan_subdirectories, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scan_subdirectories', must be one of '%s'",
                    $scan_subdirectories,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_subdirectories'] = $scan_subdirectories;

        return $this;
    }

    /**
     * Gets scan_on_creation
     *
     * @return string|null
     */
    public function getScanOnCreation()
    {
        return $this->container['scan_on_creation'];
    }

    /**
     * Sets scan_on_creation
     *
     * @param string|null $scan_on_creation Enable to keep the fingerprint database up to date when a file is added or changed on the server.    enable:Keep the fingerprint database up to date when a file is added or changed on the server.    disable:Do not check for added or changed files on the server. Saves system resources.
     *
     * @return self
     */
    public function setScanOnCreation($scan_on_creation)
    {
        $allowedValues = $this->getScanOnCreationAllowableValues();
        if (!is_null($scan_on_creation) && !in_array($scan_on_creation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scan_on_creation', must be one of '%s'",
                    $scan_on_creation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_on_creation'] = $scan_on_creation;

        return $this;
    }

    /**
     * Gets remove_deleted
     *
     * @return string|null
     */
    public function getRemoveDeleted()
    {
        return $this->container['remove_deleted'];
    }

    /**
     * Sets remove_deleted
     *
     * @param string|null $remove_deleted Enable to keep the fingerprint database up to date when a file is deleted from the server.    enable:Keep the fingerprint database up to date when a file is deleted from the server.    disable:Do not check for deleted files on the server. Saves system resources.
     *
     * @return self
     */
    public function setRemoveDeleted($remove_deleted)
    {
        $allowedValues = $this->getRemoveDeletedAllowableValues();
        if (!is_null($remove_deleted) && !in_array($remove_deleted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'remove_deleted', must be one of '%s'",
                    $remove_deleted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['remove_deleted'] = $remove_deleted;

        return $this;
    }

    /**
     * Gets keep_modified
     *
     * @return string|null
     */
    public function getKeepModified()
    {
        return $this->container['keep_modified'];
    }

    /**
     * Sets keep_modified
     *
     * @param string|null $keep_modified Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database.    enable:Keep the old fingerprint and add a new fingerprint when a file is changed on the server.    disable:Replace the old fingerprint with the new fingerprint when a file is changed on the server.
     *
     * @return self
     */
    public function setKeepModified($keep_modified)
    {
        $allowedValues = $this->getKeepModifiedAllowableValues();
        if (!is_null($keep_modified) && !in_array($keep_modified, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keep_modified', must be one of '%s'",
                    $keep_modified,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keep_modified'] = $keep_modified;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username User name required to log into the file server.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 35)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject34., must be smaller than or equal to 35.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password required to log into the file server.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string|null
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string|null $file_path Path on the server to the fingerprint files (max 119 characters).
     *
     * @return self
     */
    public function setFilePath($file_path)
    {
        if (!is_null($file_path) && (mb_strlen($file_path) > 119)) {
            throw new \InvalidArgumentException('invalid length for $file_path when calling InlineObject34., must be smaller than or equal to 119.');
        }

        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets file_pattern
     *
     * @return string|null
     */
    public function getFilePattern()
    {
        return $this->container['file_pattern'];
    }

    /**
     * Sets file_pattern
     *
     * @param string|null $file_pattern Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
     *
     * @return self
     */
    public function setFilePattern($file_pattern)
    {
        if (!is_null($file_pattern) && (mb_strlen($file_pattern) > 35)) {
            throw new \InvalidArgumentException('invalid length for $file_pattern when calling InlineObject34., must be smaller than or equal to 35.');
        }

        $this->container['file_pattern'] = $file_pattern;

        return $this;
    }

    /**
     * Gets sensitivity
     *
     * @return string|null
     */
    public function getSensitivity()
    {
        return $this->container['sensitivity'];
    }

    /**
     * Sets sensitivity
     *
     * @param string|null $sensitivity Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using sensitivity.
     *
     * @return self
     */
    public function setSensitivity($sensitivity)
    {
        if (!is_null($sensitivity) && (mb_strlen($sensitivity) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sensitivity when calling InlineObject34., must be smaller than or equal to 35.');
        }

        $this->container['sensitivity'] = $sensitivity;

        return $this;
    }

    /**
     * Gets tod_hour
     *
     * @return int|null
     */
    public function getTodHour()
    {
        return $this->container['tod_hour'];
    }

    /**
     * Sets tod_hour
     *
     * @param int|null $tod_hour Hour of the day on which to scan the server (0 - 23, default = 1).
     *
     * @return self
     */
    public function setTodHour($tod_hour)
    {

        if (!is_null($tod_hour) && ($tod_hour > 23)) {
            throw new \InvalidArgumentException('invalid value for $tod_hour when calling InlineObject34., must be smaller than or equal to 23.');
        }
        if (!is_null($tod_hour) && ($tod_hour < 0)) {
            throw new \InvalidArgumentException('invalid value for $tod_hour when calling InlineObject34., must be bigger than or equal to 0.');
        }

        $this->container['tod_hour'] = $tod_hour;

        return $this;
    }

    /**
     * Gets tod_min
     *
     * @return int|null
     */
    public function getTodMin()
    {
        return $this->container['tod_min'];
    }

    /**
     * Sets tod_min
     *
     * @param int|null $tod_min Minute of the hour on which to scan the server (0 - 59).
     *
     * @return self
     */
    public function setTodMin($tod_min)
    {

        if (!is_null($tod_min) && ($tod_min > 59)) {
            throw new \InvalidArgumentException('invalid value for $tod_min when calling InlineObject34., must be smaller than or equal to 59.');
        }
        if (!is_null($tod_min) && ($tod_min < 0)) {
            throw new \InvalidArgumentException('invalid value for $tod_min when calling InlineObject34., must be bigger than or equal to 0.');
        }

        $this->container['tod_min'] = $tod_min;

        return $this;
    }

    /**
     * Gets weekday
     *
     * @return string|null
     */
    public function getWeekday()
    {
        return $this->container['weekday'];
    }

    /**
     * Sets weekday
     *
     * @param string|null $weekday Day of the week on which to scan the server.    sunday:Sunday    monday:Monday    tuesday:Tuesday    wednesday:Wednesday    thursday:Thursday    friday:Friday    saturday:Saturday
     *
     * @return self
     */
    public function setWeekday($weekday)
    {
        $allowedValues = $this->getWeekdayAllowableValues();
        if (!is_null($weekday) && !in_array($weekday, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weekday', must be one of '%s'",
                    $weekday,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weekday'] = $weekday;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int|null $date Day of the month on which to scan the server (1 - 31).
     *
     * @return self
     */
    public function setDate($date)
    {

        if (!is_null($date) && ($date > 31)) {
            throw new \InvalidArgumentException('invalid value for $date when calling InlineObject34., must be smaller than or equal to 31.');
        }
        if (!is_null($date) && ($date < 1)) {
            throw new \InvalidArgumentException('invalid value for $date when calling InlineObject34., must be bigger than or equal to 1.');
        }

        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


