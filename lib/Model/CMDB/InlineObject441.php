<?php
/**
 * InlineObject441
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject441 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject441 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_441';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'mandatory_ca_verify' => 'string',
        'ca' => 'string',
        'subject' => 'string',
        'cn' => 'string',
        'cn_type' => 'string',
        'ldap_server' => 'string',
        'ldap_username' => 'string',
        'ldap_password' => 'string',
        'ldap_mode' => 'string',
        'ocsp_override_server' => 'string',
        'two_factor' => 'string',
        'passwd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'mandatory_ca_verify' => null,
        'ca' => null,
        'subject' => null,
        'cn' => null,
        'cn_type' => null,
        'ldap_server' => null,
        'ldap_username' => null,
        'ldap_password' => 'password',
        'ldap_mode' => null,
        'ocsp_override_server' => null,
        'two_factor' => null,
        'passwd' => 'password'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'mandatory_ca_verify' => 'mandatory-ca-verify',
        'ca' => 'ca',
        'subject' => 'subject',
        'cn' => 'cn',
        'cn_type' => 'cn-type',
        'ldap_server' => 'ldap-server',
        'ldap_username' => 'ldap-username',
        'ldap_password' => 'ldap-password',
        'ldap_mode' => 'ldap-mode',
        'ocsp_override_server' => 'ocsp-override-server',
        'two_factor' => 'two-factor',
        'passwd' => 'passwd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'mandatory_ca_verify' => 'setMandatoryCaVerify',
        'ca' => 'setCa',
        'subject' => 'setSubject',
        'cn' => 'setCn',
        'cn_type' => 'setCnType',
        'ldap_server' => 'setLdapServer',
        'ldap_username' => 'setLdapUsername',
        'ldap_password' => 'setLdapPassword',
        'ldap_mode' => 'setLdapMode',
        'ocsp_override_server' => 'setOcspOverrideServer',
        'two_factor' => 'setTwoFactor',
        'passwd' => 'setPasswd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'mandatory_ca_verify' => 'getMandatoryCaVerify',
        'ca' => 'getCa',
        'subject' => 'getSubject',
        'cn' => 'getCn',
        'cn_type' => 'getCnType',
        'ldap_server' => 'getLdapServer',
        'ldap_username' => 'getLdapUsername',
        'ldap_password' => 'getLdapPassword',
        'ldap_mode' => 'getLdapMode',
        'ocsp_override_server' => 'getOcspOverrideServer',
        'two_factor' => 'getTwoFactor',
        'passwd' => 'getPasswd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MANDATORY_CA_VERIFY_ENABLE = 'enable';
    const MANDATORY_CA_VERIFY_DISABLE = 'disable';
    const CN_TYPE_STRING = 'string';
    const CN_TYPE_EMAIL = 'email';
    const CN_TYPE_FQDN = 'FQDN';
    const CN_TYPE_IPV4 = 'ipv4';
    const CN_TYPE_IPV6 = 'ipv6';
    const LDAP_MODE_PASSWORD = 'password';
    const LDAP_MODE_PRINCIPAL_NAME = 'principal-name';
    const TWO_FACTOR_ENABLE = 'enable';
    const TWO_FACTOR_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMandatoryCaVerifyAllowableValues()
    {
        return [
            self::MANDATORY_CA_VERIFY_ENABLE,
            self::MANDATORY_CA_VERIFY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCnTypeAllowableValues()
    {
        return [
            self::CN_TYPE_STRING,
            self::CN_TYPE_EMAIL,
            self::CN_TYPE_FQDN,
            self::CN_TYPE_IPV4,
            self::CN_TYPE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLdapModeAllowableValues()
    {
        return [
            self::LDAP_MODE_PASSWORD,
            self::LDAP_MODE_PRINCIPAL_NAME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAllowableValues()
    {
        return [
            self::TWO_FACTOR_ENABLE,
            self::TWO_FACTOR_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['mandatory_ca_verify'] = $data['mandatory_ca_verify'] ?? null;
        $this->container['ca'] = $data['ca'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['cn'] = $data['cn'] ?? null;
        $this->container['cn_type'] = $data['cn_type'] ?? null;
        $this->container['ldap_server'] = $data['ldap_server'] ?? null;
        $this->container['ldap_username'] = $data['ldap_username'] ?? null;
        $this->container['ldap_password'] = $data['ldap_password'] ?? null;
        $this->container['ldap_mode'] = $data['ldap_mode'] ?? null;
        $this->container['ocsp_override_server'] = $data['ocsp_override_server'] ?? null;
        $this->container['two_factor'] = $data['two_factor'] ?? null;
        $this->container['passwd'] = $data['passwd'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getMandatoryCaVerifyAllowableValues();
        if (!is_null($this->container['mandatory_ca_verify']) && !in_array($this->container['mandatory_ca_verify'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mandatory_ca_verify', must be one of '%s'",
                $this->container['mandatory_ca_verify'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ca']) && (mb_strlen($this->container['ca']) > 127)) {
            $invalidProperties[] = "invalid value for 'ca', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cn']) && (mb_strlen($this->container['cn']) > 255)) {
            $invalidProperties[] = "invalid value for 'cn', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getCnTypeAllowableValues();
        if (!is_null($this->container['cn_type']) && !in_array($this->container['cn_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cn_type', must be one of '%s'",
                $this->container['cn_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ldap_server']) && (mb_strlen($this->container['ldap_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ldap_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ldap_username']) && (mb_strlen($this->container['ldap_username']) > 35)) {
            $invalidProperties[] = "invalid value for 'ldap_username', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getLdapModeAllowableValues();
        if (!is_null($this->container['ldap_mode']) && !in_array($this->container['ldap_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ldap_mode', must be one of '%s'",
                $this->container['ldap_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ocsp_override_server']) && (mb_strlen($this->container['ocsp_override_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ocsp_override_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($this->container['two_factor']) && !in_array($this->container['two_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor', must be one of '%s'",
                $this->container['two_factor'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Peer name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject441., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mandatory_ca_verify
     *
     * @return string|null
     */
    public function getMandatoryCaVerify()
    {
        return $this->container['mandatory_ca_verify'];
    }

    /**
     * Sets mandatory_ca_verify
     *
     * @param string|null $mandatory_ca_verify Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMandatoryCaVerify($mandatory_ca_verify)
    {
        $allowedValues = $this->getMandatoryCaVerifyAllowableValues();
        if (!is_null($mandatory_ca_verify) && !in_array($mandatory_ca_verify, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mandatory_ca_verify', must be one of '%s'",
                    $mandatory_ca_verify,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mandatory_ca_verify'] = $mandatory_ca_verify;

        return $this;
    }

    /**
     * Gets ca
     *
     * @return string|null
     */
    public function getCa()
    {
        return $this->container['ca'];
    }

    /**
     * Sets ca
     *
     * @param string|null $ca Name of the CA certificate.
     *
     * @return self
     */
    public function setCa($ca)
    {
        if (!is_null($ca) && (mb_strlen($ca) > 127)) {
            throw new \InvalidArgumentException('invalid length for $ca when calling InlineObject441., must be smaller than or equal to 127.');
        }

        $this->container['ca'] = $ca;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Peer certificate name constraints.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling InlineObject441., must be smaller than or equal to 255.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets cn
     *
     * @return string|null
     */
    public function getCn()
    {
        return $this->container['cn'];
    }

    /**
     * Sets cn
     *
     * @param string|null $cn Peer certificate common name.
     *
     * @return self
     */
    public function setCn($cn)
    {
        if (!is_null($cn) && (mb_strlen($cn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cn when calling InlineObject441., must be smaller than or equal to 255.');
        }

        $this->container['cn'] = $cn;

        return $this;
    }

    /**
     * Gets cn_type
     *
     * @return string|null
     */
    public function getCnType()
    {
        return $this->container['cn_type'];
    }

    /**
     * Sets cn_type
     *
     * @param string|null $cn_type Peer certificate common name type.    string:Normal string.    email:Email address.    FQDN:Fully Qualified Domain Name.    ipv4:IPv4 address.    ipv6:IPv6 address.
     *
     * @return self
     */
    public function setCnType($cn_type)
    {
        $allowedValues = $this->getCnTypeAllowableValues();
        if (!is_null($cn_type) && !in_array($cn_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cn_type', must be one of '%s'",
                    $cn_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cn_type'] = $cn_type;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return string|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param string|null $ldap_server Name of an LDAP server defined under the user ldap command. Performs client access rights check.
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {
        if (!is_null($ldap_server) && (mb_strlen($ldap_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ldap_server when calling InlineObject441., must be smaller than or equal to 35.');
        }

        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets ldap_username
     *
     * @return string|null
     */
    public function getLdapUsername()
    {
        return $this->container['ldap_username'];
    }

    /**
     * Sets ldap_username
     *
     * @param string|null $ldap_username Username for LDAP server bind.
     *
     * @return self
     */
    public function setLdapUsername($ldap_username)
    {
        if (!is_null($ldap_username) && (mb_strlen($ldap_username) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ldap_username when calling InlineObject441., must be smaller than or equal to 35.');
        }

        $this->container['ldap_username'] = $ldap_username;

        return $this;
    }

    /**
     * Gets ldap_password
     *
     * @return string|null
     */
    public function getLdapPassword()
    {
        return $this->container['ldap_password'];
    }

    /**
     * Sets ldap_password
     *
     * @param string|null $ldap_password Password for LDAP server bind.
     *
     * @return self
     */
    public function setLdapPassword($ldap_password)
    {
        $this->container['ldap_password'] = $ldap_password;

        return $this;
    }

    /**
     * Gets ldap_mode
     *
     * @return string|null
     */
    public function getLdapMode()
    {
        return $this->container['ldap_mode'];
    }

    /**
     * Sets ldap_mode
     *
     * @param string|null $ldap_mode Mode for LDAP peer authentication.    password:Username/password.    principal-name:Principal name.
     *
     * @return self
     */
    public function setLdapMode($ldap_mode)
    {
        $allowedValues = $this->getLdapModeAllowableValues();
        if (!is_null($ldap_mode) && !in_array($ldap_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ldap_mode', must be one of '%s'",
                    $ldap_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ldap_mode'] = $ldap_mode;

        return $this;
    }

    /**
     * Gets ocsp_override_server
     *
     * @return string|null
     */
    public function getOcspOverrideServer()
    {
        return $this->container['ocsp_override_server'];
    }

    /**
     * Sets ocsp_override_server
     *
     * @param string|null $ocsp_override_server Online Certificate Status Protocol (OCSP) server for certificate retrieval.
     *
     * @return self
     */
    public function setOcspOverrideServer($ocsp_override_server)
    {
        if (!is_null($ocsp_override_server) && (mb_strlen($ocsp_override_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ocsp_override_server when calling InlineObject441., must be smaller than or equal to 35.');
        }

        $this->container['ocsp_override_server'] = $ocsp_override_server;

        return $this;
    }

    /**
     * Gets two_factor
     *
     * @return string|null
     */
    public function getTwoFactor()
    {
        return $this->container['two_factor'];
    }

    /**
     * Sets two_factor
     *
     * @param string|null $two_factor Enable/disable two-factor authentication, applying certificate and password-based authentication.    enable:Enable 2-factor authentication.    disable:Disable 2-factor authentication.
     *
     * @return self
     */
    public function setTwoFactor($two_factor)
    {
        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($two_factor) && !in_array($two_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor', must be one of '%s'",
                    $two_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor'] = $two_factor;

        return $this;
    }

    /**
     * Gets passwd
     *
     * @return string|null
     */
    public function getPasswd()
    {
        return $this->container['passwd'];
    }

    /**
     * Sets passwd
     *
     * @param string|null $passwd Peer's password used for two-factor authentication.
     *
     * @return self
     */
    public function setPasswd($passwd)
    {
        $this->container['passwd'] = $passwd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


