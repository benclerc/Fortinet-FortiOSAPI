<?php
/**
 * SystemAccprofileNameSysgrpPermission
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemAccprofileNameSysgrpPermission Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemAccprofileNameSysgrpPermission implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_accprofile__name__sysgrp_permission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin' => 'string',
        'upd' => 'string',
        'cfg' => 'string',
        'mnt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin' => null,
        'upd' => null,
        'cfg' => null,
        'mnt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin' => 'admin',
        'upd' => 'upd',
        'cfg' => 'cfg',
        'mnt' => 'mnt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin' => 'setAdmin',
        'upd' => 'setUpd',
        'cfg' => 'setCfg',
        'mnt' => 'setMnt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin' => 'getAdmin',
        'upd' => 'getUpd',
        'cfg' => 'getCfg',
        'mnt' => 'getMnt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADMIN_NONE = 'none';
    const ADMIN_READ = 'read';
    const ADMIN_READ_WRITE = 'read-write';
    const UPD_NONE = 'none';
    const UPD_READ = 'read';
    const UPD_READ_WRITE = 'read-write';
    const CFG_NONE = 'none';
    const CFG_READ = 'read';
    const CFG_READ_WRITE = 'read-write';
    const MNT_NONE = 'none';
    const MNT_READ = 'read';
    const MNT_READ_WRITE = 'read-write';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminAllowableValues()
    {
        return [
            self::ADMIN_NONE,
            self::ADMIN_READ,
            self::ADMIN_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdAllowableValues()
    {
        return [
            self::UPD_NONE,
            self::UPD_READ,
            self::UPD_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCfgAllowableValues()
    {
        return [
            self::CFG_NONE,
            self::CFG_READ,
            self::CFG_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMntAllowableValues()
    {
        return [
            self::MNT_NONE,
            self::MNT_READ,
            self::MNT_READ_WRITE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['upd'] = $data['upd'] ?? null;
        $this->container['cfg'] = $data['cfg'] ?? null;
        $this->container['mnt'] = $data['mnt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdminAllowableValues();
        if (!is_null($this->container['admin']) && !in_array($this->container['admin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin', must be one of '%s'",
                $this->container['admin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdAllowableValues();
        if (!is_null($this->container['upd']) && !in_array($this->container['upd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upd', must be one of '%s'",
                $this->container['upd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCfgAllowableValues();
        if (!is_null($this->container['cfg']) && !in_array($this->container['cfg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cfg', must be one of '%s'",
                $this->container['cfg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMntAllowableValues();
        if (!is_null($this->container['mnt']) && !in_array($this->container['mnt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mnt', must be one of '%s'",
                $this->container['mnt'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin
     *
     * @return string|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param string|null $admin Administrator Users.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $allowedValues = $this->getAdminAllowableValues();
        if (!is_null($admin) && !in_array($admin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin', must be one of '%s'",
                    $admin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets upd
     *
     * @return string|null
     */
    public function getUpd()
    {
        return $this->container['upd'];
    }

    /**
     * Sets upd
     *
     * @param string|null $upd FortiGuard Updates.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setUpd($upd)
    {
        $allowedValues = $this->getUpdAllowableValues();
        if (!is_null($upd) && !in_array($upd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upd', must be one of '%s'",
                    $upd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upd'] = $upd;

        return $this;
    }

    /**
     * Gets cfg
     *
     * @return string|null
     */
    public function getCfg()
    {
        return $this->container['cfg'];
    }

    /**
     * Sets cfg
     *
     * @param string|null $cfg System Configuration.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setCfg($cfg)
    {
        $allowedValues = $this->getCfgAllowableValues();
        if (!is_null($cfg) && !in_array($cfg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cfg', must be one of '%s'",
                    $cfg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cfg'] = $cfg;

        return $this;
    }

    /**
     * Gets mnt
     *
     * @return string|null
     */
    public function getMnt()
    {
        return $this->container['mnt'];
    }

    /**
     * Sets mnt
     *
     * @param string|null $mnt Maintenance.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setMnt($mnt)
    {
        $allowedValues = $this->getMntAllowableValues();
        if (!is_null($mnt) && !in_array($mnt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mnt', must be one of '%s'",
                    $mnt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mnt'] = $mnt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


