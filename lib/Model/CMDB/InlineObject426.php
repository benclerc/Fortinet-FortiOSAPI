<?php
/**
 * InlineObject426
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject426 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject426 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_426';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'status' => 'string',
        'server' => 'string',
        'default_domain' => 'string',
        'port' => 'int',
        'user' => 'string',
        'password' => 'string',
        'ldap_server' => 'string',
        'logon_history' => 'int',
        'polling_frequency' => 'int',
        'adgrp' => '\Fortigate\FortiOS\Model\CMDB\UserFssoPollingIdAdgrp[]',
        'smbv1' => 'string',
        'smb_ntlmv1_auth' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'server' => null,
        'default_domain' => null,
        'port' => null,
        'user' => null,
        'password' => 'password',
        'ldap_server' => null,
        'logon_history' => null,
        'polling_frequency' => null,
        'adgrp' => null,
        'smbv1' => null,
        'smb_ntlmv1_auth' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'server' => 'server',
        'default_domain' => 'default-domain',
        'port' => 'port',
        'user' => 'user',
        'password' => 'password',
        'ldap_server' => 'ldap-server',
        'logon_history' => 'logon-history',
        'polling_frequency' => 'polling-frequency',
        'adgrp' => 'adgrp',
        'smbv1' => 'smbv1',
        'smb_ntlmv1_auth' => 'smb-ntlmv1-auth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'server' => 'setServer',
        'default_domain' => 'setDefaultDomain',
        'port' => 'setPort',
        'user' => 'setUser',
        'password' => 'setPassword',
        'ldap_server' => 'setLdapServer',
        'logon_history' => 'setLogonHistory',
        'polling_frequency' => 'setPollingFrequency',
        'adgrp' => 'setAdgrp',
        'smbv1' => 'setSmbv1',
        'smb_ntlmv1_auth' => 'setSmbNtlmv1Auth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'server' => 'getServer',
        'default_domain' => 'getDefaultDomain',
        'port' => 'getPort',
        'user' => 'getUser',
        'password' => 'getPassword',
        'ldap_server' => 'getLdapServer',
        'logon_history' => 'getLogonHistory',
        'polling_frequency' => 'getPollingFrequency',
        'adgrp' => 'getAdgrp',
        'smbv1' => 'getSmbv1',
        'smb_ntlmv1_auth' => 'getSmbNtlmv1Auth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SMBV1_ENABLE = 'enable';
    const SMBV1_DISABLE = 'disable';
    const SMB_NTLMV1_AUTH_ENABLE = 'enable';
    const SMB_NTLMV1_AUTH_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbv1AllowableValues()
    {
        return [
            self::SMBV1_ENABLE,
            self::SMBV1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbNtlmv1AuthAllowableValues()
    {
        return [
            self::SMB_NTLMV1_AUTH_ENABLE,
            self::SMB_NTLMV1_AUTH_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['default_domain'] = $data['default_domain'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['ldap_server'] = $data['ldap_server'] ?? null;
        $this->container['logon_history'] = $data['logon_history'] ?? null;
        $this->container['polling_frequency'] = $data['polling_frequency'] ?? null;
        $this->container['adgrp'] = $data['adgrp'] ?? null;
        $this->container['smbv1'] = $data['smbv1'] ?? null;
        $this->container['smb_ntlmv1_auth'] = $data['smb_ntlmv1_auth'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['default_domain']) && (mb_strlen($this->container['default_domain']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_domain', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['user']) && (mb_strlen($this->container['user']) > 35)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ldap_server']) && (mb_strlen($this->container['ldap_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ldap_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['logon_history']) && ($this->container['logon_history'] > 48)) {
            $invalidProperties[] = "invalid value for 'logon_history', must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['logon_history']) && ($this->container['logon_history'] < 0)) {
            $invalidProperties[] = "invalid value for 'logon_history', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['polling_frequency']) && ($this->container['polling_frequency'] > 30)) {
            $invalidProperties[] = "invalid value for 'polling_frequency', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['polling_frequency']) && ($this->container['polling_frequency'] < 1)) {
            $invalidProperties[] = "invalid value for 'polling_frequency', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adgrp']) && (count($this->container['adgrp']) > 0)) {
            $invalidProperties[] = "invalid value for 'adgrp', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSmbv1AllowableValues();
        if (!is_null($this->container['smbv1']) && !in_array($this->container['smbv1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smbv1', must be one of '%s'",
                $this->container['smbv1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmbNtlmv1AuthAllowableValues();
        if (!is_null($this->container['smb_ntlmv1_auth']) && !in_array($this->container['smb_ntlmv1_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smb_ntlmv1_auth', must be one of '%s'",
                $this->container['smb_ntlmv1_auth'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Active Directory server ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject426., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject426., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable polling for the status of this Active Directory server.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server Host name or IP address of the Active Directory server.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject426., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets default_domain
     *
     * @return string|null
     */
    public function getDefaultDomain()
    {
        return $this->container['default_domain'];
    }

    /**
     * Sets default_domain
     *
     * @param string|null $default_domain Default domain managed by this Active Directory server.
     *
     * @return self
     */
    public function setDefaultDomain($default_domain)
    {
        if (!is_null($default_domain) && (mb_strlen($default_domain) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_domain when calling InlineObject426., must be smaller than or equal to 35.');
        }

        $this->container['default_domain'] = $default_domain;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port to communicate with this Active Directory server.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject426., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject426., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user User name required to log into this Active Directory server.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (!is_null($user) && (mb_strlen($user) > 35)) {
            throw new \InvalidArgumentException('invalid length for $user when calling InlineObject426., must be smaller than or equal to 35.');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password required to log into this Active Directory server
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return string|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param string|null $ldap_server LDAP server name used in LDAP connection strings.
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {
        if (!is_null($ldap_server) && (mb_strlen($ldap_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ldap_server when calling InlineObject426., must be smaller than or equal to 35.');
        }

        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets logon_history
     *
     * @return int|null
     */
    public function getLogonHistory()
    {
        return $this->container['logon_history'];
    }

    /**
     * Sets logon_history
     *
     * @param int|null $logon_history Number of hours of logon history to keep, 0 means keep all history.
     *
     * @return self
     */
    public function setLogonHistory($logon_history)
    {

        if (!is_null($logon_history) && ($logon_history > 48)) {
            throw new \InvalidArgumentException('invalid value for $logon_history when calling InlineObject426., must be smaller than or equal to 48.');
        }
        if (!is_null($logon_history) && ($logon_history < 0)) {
            throw new \InvalidArgumentException('invalid value for $logon_history when calling InlineObject426., must be bigger than or equal to 0.');
        }

        $this->container['logon_history'] = $logon_history;

        return $this;
    }

    /**
     * Gets polling_frequency
     *
     * @return int|null
     */
    public function getPollingFrequency()
    {
        return $this->container['polling_frequency'];
    }

    /**
     * Sets polling_frequency
     *
     * @param int|null $polling_frequency Polling frequency (every 1 to 30 seconds).
     *
     * @return self
     */
    public function setPollingFrequency($polling_frequency)
    {

        if (!is_null($polling_frequency) && ($polling_frequency > 30)) {
            throw new \InvalidArgumentException('invalid value for $polling_frequency when calling InlineObject426., must be smaller than or equal to 30.');
        }
        if (!is_null($polling_frequency) && ($polling_frequency < 1)) {
            throw new \InvalidArgumentException('invalid value for $polling_frequency when calling InlineObject426., must be bigger than or equal to 1.');
        }

        $this->container['polling_frequency'] = $polling_frequency;

        return $this;
    }

    /**
     * Gets adgrp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserFssoPollingIdAdgrp[]|null
     */
    public function getAdgrp()
    {
        return $this->container['adgrp'];
    }

    /**
     * Sets adgrp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserFssoPollingIdAdgrp[]|null $adgrp LDAP Group Info.
     *
     * @return self
     */
    public function setAdgrp($adgrp)
    {

        if (!is_null($adgrp) && (count($adgrp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $adgrp when calling InlineObject426., number of items must be less than or equal to 0.');
        }
        $this->container['adgrp'] = $adgrp;

        return $this;
    }

    /**
     * Gets smbv1
     *
     * @return string|null
     */
    public function getSmbv1()
    {
        return $this->container['smbv1'];
    }

    /**
     * Sets smbv1
     *
     * @param string|null $smbv1 Enable/disable support of SMBv1 for Samba.    enable:Enable support of SMBv1 for Samba.    disable:Disable support of SMBv1 for Samba.
     *
     * @return self
     */
    public function setSmbv1($smbv1)
    {
        $allowedValues = $this->getSmbv1AllowableValues();
        if (!is_null($smbv1) && !in_array($smbv1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smbv1', must be one of '%s'",
                    $smbv1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smbv1'] = $smbv1;

        return $this;
    }

    /**
     * Gets smb_ntlmv1_auth
     *
     * @return string|null
     */
    public function getSmbNtlmv1Auth()
    {
        return $this->container['smb_ntlmv1_auth'];
    }

    /**
     * Sets smb_ntlmv1_auth
     *
     * @param string|null $smb_ntlmv1_auth Enable/disable support of NTLMv1 for Samba authentication.    enable:Enable support of NTLMv1 for Samba authentication.    disable:Disable support of NTLMv1 for Samba authentication.
     *
     * @return self
     */
    public function setSmbNtlmv1Auth($smb_ntlmv1_auth)
    {
        $allowedValues = $this->getSmbNtlmv1AuthAllowableValues();
        if (!is_null($smb_ntlmv1_auth) && !in_array($smb_ntlmv1_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smb_ntlmv1_auth', must be one of '%s'",
                    $smb_ntlmv1_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smb_ntlmv1_auth'] = $smb_ntlmv1_auth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


