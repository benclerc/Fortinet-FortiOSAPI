<?php
/**
 * ApplicationListNameDefaultNetworkServices
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ApplicationListNameDefaultNetworkServices Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApplicationListNameDefaultNetworkServices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_application_list__name__default_network_services';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'port' => 'int',
        'services' => 'string',
        'violation_action' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'port' => null,
        'services' => null,
        'violation_action' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'port' => 'port',
        'services' => 'services',
        'violation_action' => 'violation-action'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'port' => 'setPort',
        'services' => 'setServices',
        'violation_action' => 'setViolationAction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'port' => 'getPort',
        'services' => 'getServices',
        'violation_action' => 'getViolationAction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SERVICES_HTTP = 'http';
    const SERVICES_SSH = 'ssh';
    const SERVICES_TELNET = 'telnet';
    const SERVICES_FTP = 'ftp';
    const SERVICES_DNS = 'dns';
    const SERVICES_SMTP = 'smtp';
    const SERVICES_POP3 = 'pop3';
    const SERVICES_IMAP = 'imap';
    const SERVICES_SNMP = 'snmp';
    const SERVICES_NNTP = 'nntp';
    const SERVICES_HTTPS = 'https';
    const VIOLATION_ACTION_PASS = 'pass';
    const VIOLATION_ACTION_MONITOR = 'monitor';
    const VIOLATION_ACTION_BLOCK = 'block';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServicesAllowableValues()
    {
        return [
            self::SERVICES_HTTP,
            self::SERVICES_SSH,
            self::SERVICES_TELNET,
            self::SERVICES_FTP,
            self::SERVICES_DNS,
            self::SERVICES_SMTP,
            self::SERVICES_POP3,
            self::SERVICES_IMAP,
            self::SERVICES_SNMP,
            self::SERVICES_NNTP,
            self::SERVICES_HTTPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViolationActionAllowableValues()
    {
        return [
            self::VIOLATION_ACTION_PASS,
            self::VIOLATION_ACTION_MONITOR,
            self::VIOLATION_ACTION_BLOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['services'] = $data['services'] ?? null;
        $this->container['violation_action'] = $data['violation_action'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getServicesAllowableValues();
        if (!is_null($this->container['services']) && !in_array($this->container['services'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'services', must be one of '%s'",
                $this->container['services'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViolationActionAllowableValues();
        if (!is_null($this->container['violation_action']) && !in_array($this->container['violation_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'violation_action', must be one of '%s'",
                $this->container['violation_action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Entry ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApplicationListNameDefaultNetworkServices., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApplicationListNameDefaultNetworkServices., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling ApplicationListNameDefaultNetworkServices., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling ApplicationListNameDefaultNetworkServices., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string|null $services Network protocols.    http:HTTP.    ssh:SSH.    telnet:TELNET.    ftp:FTP.    dns:DNS.    smtp:SMTP.    pop3:POP3.    imap:IMAP.    snmp:SNMP.    nntp:NNTP.    https:HTTPS.
     *
     * @return self
     */
    public function setServices($services)
    {
        $allowedValues = $this->getServicesAllowableValues();
        if (!is_null($services) && !in_array($services, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'services', must be one of '%s'",
                    $services,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets violation_action
     *
     * @return string|null
     */
    public function getViolationAction()
    {
        return $this->container['violation_action'];
    }

    /**
     * Sets violation_action
     *
     * @param string|null $violation_action Action for protocols not white listed under selected port.    pass:Allow protocols not white listed under selected port.    monitor:Monitor protocols not white listed under selected port.    block:Block protocols not white listed under selected port.
     *
     * @return self
     */
    public function setViolationAction($violation_action)
    {
        $allowedValues = $this->getViolationActionAllowableValues();
        if (!is_null($violation_action) && !in_array($violation_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'violation_action', must be one of '%s'",
                    $violation_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['violation_action'] = $violation_action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


