<?php
/**
 * InlineObject20
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject20 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject20 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_20';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_auth_scheme' => 'string',
        'sso_auth_scheme' => 'string',
        'captive_portal_type' => 'string',
        'captive_portal_ip' => 'string',
        'captive_portal_ip6' => 'string',
        'captive_portal' => 'string',
        'captive_portal6' => 'string',
        'captive_portal_port' => 'int',
        'auth_https' => 'string',
        'captive_portal_ssl_port' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_auth_scheme' => null,
        'sso_auth_scheme' => null,
        'captive_portal_type' => null,
        'captive_portal_ip' => 'ipv4',
        'captive_portal_ip6' => 'ipv6',
        'captive_portal' => null,
        'captive_portal6' => null,
        'captive_portal_port' => null,
        'auth_https' => null,
        'captive_portal_ssl_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_auth_scheme' => 'active-auth-scheme',
        'sso_auth_scheme' => 'sso-auth-scheme',
        'captive_portal_type' => 'captive-portal-type',
        'captive_portal_ip' => 'captive-portal-ip',
        'captive_portal_ip6' => 'captive-portal-ip6',
        'captive_portal' => 'captive-portal',
        'captive_portal6' => 'captive-portal6',
        'captive_portal_port' => 'captive-portal-port',
        'auth_https' => 'auth-https',
        'captive_portal_ssl_port' => 'captive-portal-ssl-port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_auth_scheme' => 'setActiveAuthScheme',
        'sso_auth_scheme' => 'setSsoAuthScheme',
        'captive_portal_type' => 'setCaptivePortalType',
        'captive_portal_ip' => 'setCaptivePortalIp',
        'captive_portal_ip6' => 'setCaptivePortalIp6',
        'captive_portal' => 'setCaptivePortal',
        'captive_portal6' => 'setCaptivePortal6',
        'captive_portal_port' => 'setCaptivePortalPort',
        'auth_https' => 'setAuthHttps',
        'captive_portal_ssl_port' => 'setCaptivePortalSslPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_auth_scheme' => 'getActiveAuthScheme',
        'sso_auth_scheme' => 'getSsoAuthScheme',
        'captive_portal_type' => 'getCaptivePortalType',
        'captive_portal_ip' => 'getCaptivePortalIp',
        'captive_portal_ip6' => 'getCaptivePortalIp6',
        'captive_portal' => 'getCaptivePortal',
        'captive_portal6' => 'getCaptivePortal6',
        'captive_portal_port' => 'getCaptivePortalPort',
        'auth_https' => 'getAuthHttps',
        'captive_portal_ssl_port' => 'getCaptivePortalSslPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CAPTIVE_PORTAL_TYPE_FQDN = 'fqdn';
    const CAPTIVE_PORTAL_TYPE_IP = 'ip';
    const AUTH_HTTPS_ENABLE = 'enable';
    const AUTH_HTTPS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCaptivePortalTypeAllowableValues()
    {
        return [
            self::CAPTIVE_PORTAL_TYPE_FQDN,
            self::CAPTIVE_PORTAL_TYPE_IP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthHttpsAllowableValues()
    {
        return [
            self::AUTH_HTTPS_ENABLE,
            self::AUTH_HTTPS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_auth_scheme'] = $data['active_auth_scheme'] ?? null;
        $this->container['sso_auth_scheme'] = $data['sso_auth_scheme'] ?? null;
        $this->container['captive_portal_type'] = $data['captive_portal_type'] ?? null;
        $this->container['captive_portal_ip'] = $data['captive_portal_ip'] ?? null;
        $this->container['captive_portal_ip6'] = $data['captive_portal_ip6'] ?? null;
        $this->container['captive_portal'] = $data['captive_portal'] ?? null;
        $this->container['captive_portal6'] = $data['captive_portal6'] ?? null;
        $this->container['captive_portal_port'] = $data['captive_portal_port'] ?? null;
        $this->container['auth_https'] = $data['auth_https'] ?? null;
        $this->container['captive_portal_ssl_port'] = $data['captive_portal_ssl_port'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['active_auth_scheme']) && (mb_strlen($this->container['active_auth_scheme']) > 35)) {
            $invalidProperties[] = "invalid value for 'active_auth_scheme', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sso_auth_scheme']) && (mb_strlen($this->container['sso_auth_scheme']) > 35)) {
            $invalidProperties[] = "invalid value for 'sso_auth_scheme', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getCaptivePortalTypeAllowableValues();
        if (!is_null($this->container['captive_portal_type']) && !in_array($this->container['captive_portal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'captive_portal_type', must be one of '%s'",
                $this->container['captive_portal_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['captive_portal']) && (mb_strlen($this->container['captive_portal']) > 255)) {
            $invalidProperties[] = "invalid value for 'captive_portal', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['captive_portal6']) && (mb_strlen($this->container['captive_portal6']) > 255)) {
            $invalidProperties[] = "invalid value for 'captive_portal6', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['captive_portal_port']) && ($this->container['captive_portal_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'captive_portal_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['captive_portal_port']) && ($this->container['captive_portal_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'captive_portal_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthHttpsAllowableValues();
        if (!is_null($this->container['auth_https']) && !in_array($this->container['auth_https'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_https', must be one of '%s'",
                $this->container['auth_https'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['captive_portal_ssl_port']) && ($this->container['captive_portal_ssl_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'captive_portal_ssl_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['captive_portal_ssl_port']) && ($this->container['captive_portal_ssl_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'captive_portal_ssl_port', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_auth_scheme
     *
     * @return string|null
     */
    public function getActiveAuthScheme()
    {
        return $this->container['active_auth_scheme'];
    }

    /**
     * Sets active_auth_scheme
     *
     * @param string|null $active_auth_scheme Active authentication method (scheme name).
     *
     * @return self
     */
    public function setActiveAuthScheme($active_auth_scheme)
    {
        if (!is_null($active_auth_scheme) && (mb_strlen($active_auth_scheme) > 35)) {
            throw new \InvalidArgumentException('invalid length for $active_auth_scheme when calling InlineObject20., must be smaller than or equal to 35.');
        }

        $this->container['active_auth_scheme'] = $active_auth_scheme;

        return $this;
    }

    /**
     * Gets sso_auth_scheme
     *
     * @return string|null
     */
    public function getSsoAuthScheme()
    {
        return $this->container['sso_auth_scheme'];
    }

    /**
     * Sets sso_auth_scheme
     *
     * @param string|null $sso_auth_scheme Single-Sign-On authentication method (scheme name).
     *
     * @return self
     */
    public function setSsoAuthScheme($sso_auth_scheme)
    {
        if (!is_null($sso_auth_scheme) && (mb_strlen($sso_auth_scheme) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sso_auth_scheme when calling InlineObject20., must be smaller than or equal to 35.');
        }

        $this->container['sso_auth_scheme'] = $sso_auth_scheme;

        return $this;
    }

    /**
     * Gets captive_portal_type
     *
     * @return string|null
     */
    public function getCaptivePortalType()
    {
        return $this->container['captive_portal_type'];
    }

    /**
     * Sets captive_portal_type
     *
     * @param string|null $captive_portal_type Captive portal type.    fqdn:Use FQDN for captive portal.    ip:Use an IP address for captive portal.
     *
     * @return self
     */
    public function setCaptivePortalType($captive_portal_type)
    {
        $allowedValues = $this->getCaptivePortalTypeAllowableValues();
        if (!is_null($captive_portal_type) && !in_array($captive_portal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'captive_portal_type', must be one of '%s'",
                    $captive_portal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['captive_portal_type'] = $captive_portal_type;

        return $this;
    }

    /**
     * Gets captive_portal_ip
     *
     * @return string|null
     */
    public function getCaptivePortalIp()
    {
        return $this->container['captive_portal_ip'];
    }

    /**
     * Sets captive_portal_ip
     *
     * @param string|null $captive_portal_ip Captive portal IP address.
     *
     * @return self
     */
    public function setCaptivePortalIp($captive_portal_ip)
    {
        $this->container['captive_portal_ip'] = $captive_portal_ip;

        return $this;
    }

    /**
     * Gets captive_portal_ip6
     *
     * @return string|null
     */
    public function getCaptivePortalIp6()
    {
        return $this->container['captive_portal_ip6'];
    }

    /**
     * Sets captive_portal_ip6
     *
     * @param string|null $captive_portal_ip6 Captive portal IPv6 address.
     *
     * @return self
     */
    public function setCaptivePortalIp6($captive_portal_ip6)
    {
        $this->container['captive_portal_ip6'] = $captive_portal_ip6;

        return $this;
    }

    /**
     * Gets captive_portal
     *
     * @return string|null
     */
    public function getCaptivePortal()
    {
        return $this->container['captive_portal'];
    }

    /**
     * Sets captive_portal
     *
     * @param string|null $captive_portal Captive portal host name.
     *
     * @return self
     */
    public function setCaptivePortal($captive_portal)
    {
        if (!is_null($captive_portal) && (mb_strlen($captive_portal) > 255)) {
            throw new \InvalidArgumentException('invalid length for $captive_portal when calling InlineObject20., must be smaller than or equal to 255.');
        }

        $this->container['captive_portal'] = $captive_portal;

        return $this;
    }

    /**
     * Gets captive_portal6
     *
     * @return string|null
     */
    public function getCaptivePortal6()
    {
        return $this->container['captive_portal6'];
    }

    /**
     * Sets captive_portal6
     *
     * @param string|null $captive_portal6 IPv6 captive portal host name.
     *
     * @return self
     */
    public function setCaptivePortal6($captive_portal6)
    {
        if (!is_null($captive_portal6) && (mb_strlen($captive_portal6) > 255)) {
            throw new \InvalidArgumentException('invalid length for $captive_portal6 when calling InlineObject20., must be smaller than or equal to 255.');
        }

        $this->container['captive_portal6'] = $captive_portal6;

        return $this;
    }

    /**
     * Gets captive_portal_port
     *
     * @return int|null
     */
    public function getCaptivePortalPort()
    {
        return $this->container['captive_portal_port'];
    }

    /**
     * Sets captive_portal_port
     *
     * @param int|null $captive_portal_port Captive portal port number (1 - 65535, default = 7830).
     *
     * @return self
     */
    public function setCaptivePortalPort($captive_portal_port)
    {

        if (!is_null($captive_portal_port) && ($captive_portal_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_port when calling InlineObject20., must be smaller than or equal to 65535.');
        }
        if (!is_null($captive_portal_port) && ($captive_portal_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_port when calling InlineObject20., must be bigger than or equal to 1.');
        }

        $this->container['captive_portal_port'] = $captive_portal_port;

        return $this;
    }

    /**
     * Gets auth_https
     *
     * @return string|null
     */
    public function getAuthHttps()
    {
        return $this->container['auth_https'];
    }

    /**
     * Sets auth_https
     *
     * @param string|null $auth_https Enable/disable redirecting HTTP user authentication to HTTPS.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAuthHttps($auth_https)
    {
        $allowedValues = $this->getAuthHttpsAllowableValues();
        if (!is_null($auth_https) && !in_array($auth_https, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_https', must be one of '%s'",
                    $auth_https,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_https'] = $auth_https;

        return $this;
    }

    /**
     * Gets captive_portal_ssl_port
     *
     * @return int|null
     */
    public function getCaptivePortalSslPort()
    {
        return $this->container['captive_portal_ssl_port'];
    }

    /**
     * Sets captive_portal_ssl_port
     *
     * @param int|null $captive_portal_ssl_port Captive portal SSL port number (1 - 65535, default = 7831).
     *
     * @return self
     */
    public function setCaptivePortalSslPort($captive_portal_ssl_port)
    {

        if (!is_null($captive_portal_ssl_port) && ($captive_portal_ssl_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_ssl_port when calling InlineObject20., must be smaller than or equal to 65535.');
        }
        if (!is_null($captive_portal_ssl_port) && ($captive_portal_ssl_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_ssl_port when calling InlineObject20., must be bigger than or equal to 1.');
        }

        $this->container['captive_portal_ssl_port'] = $captive_portal_ssl_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


