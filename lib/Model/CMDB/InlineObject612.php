<?php
/**
 * InlineObject612
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject612 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject612 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_612';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'tunnel_type' => 'string',
        'wag_ip' => 'string',
        'wag_port' => 'int',
        'ping_interval' => 'int',
        'ping_number' => 'int',
        'return_packet_timeout' => 'int',
        'dhcp_ip_addr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'tunnel_type' => null,
        'wag_ip' => 'ipv4',
        'wag_port' => null,
        'ping_interval' => null,
        'ping_number' => null,
        'return_packet_timeout' => null,
        'dhcp_ip_addr' => 'ipv4'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'tunnel_type' => 'tunnel-type',
        'wag_ip' => 'wag-ip',
        'wag_port' => 'wag-port',
        'ping_interval' => 'ping-interval',
        'ping_number' => 'ping-number',
        'return_packet_timeout' => 'return-packet-timeout',
        'dhcp_ip_addr' => 'dhcp-ip-addr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'tunnel_type' => 'setTunnelType',
        'wag_ip' => 'setWagIp',
        'wag_port' => 'setWagPort',
        'ping_interval' => 'setPingInterval',
        'ping_number' => 'setPingNumber',
        'return_packet_timeout' => 'setReturnPacketTimeout',
        'dhcp_ip_addr' => 'setDhcpIpAddr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'tunnel_type' => 'getTunnelType',
        'wag_ip' => 'getWagIp',
        'wag_port' => 'getWagPort',
        'ping_interval' => 'getPingInterval',
        'ping_number' => 'getPingNumber',
        'return_packet_timeout' => 'getReturnPacketTimeout',
        'dhcp_ip_addr' => 'getDhcpIpAddr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TUNNEL_TYPE_L2TPV3 = 'l2tpv3';
    const TUNNEL_TYPE_GRE = 'gre';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelTypeAllowableValues()
    {
        return [
            self::TUNNEL_TYPE_L2TPV3,
            self::TUNNEL_TYPE_GRE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['tunnel_type'] = $data['tunnel_type'] ?? null;
        $this->container['wag_ip'] = $data['wag_ip'] ?? null;
        $this->container['wag_port'] = $data['wag_port'] ?? null;
        $this->container['ping_interval'] = $data['ping_interval'] ?? null;
        $this->container['ping_number'] = $data['ping_number'] ?? null;
        $this->container['return_packet_timeout'] = $data['return_packet_timeout'] ?? null;
        $this->container['dhcp_ip_addr'] = $data['dhcp_ip_addr'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getTunnelTypeAllowableValues();
        if (!is_null($this->container['tunnel_type']) && !in_array($this->container['tunnel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_type', must be one of '%s'",
                $this->container['tunnel_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wag_port']) && ($this->container['wag_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'wag_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['wag_port']) && ($this->container['wag_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'wag_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ping_interval']) && ($this->container['ping_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ping_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ping_interval']) && ($this->container['ping_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'ping_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ping_number']) && ($this->container['ping_number'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ping_number', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ping_number']) && ($this->container['ping_number'] < 1)) {
            $invalidProperties[] = "invalid value for 'ping_number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['return_packet_timeout']) && ($this->container['return_packet_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'return_packet_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['return_packet_timeout']) && ($this->container['return_packet_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'return_packet_timeout', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tunnel profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject612., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject612., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets tunnel_type
     *
     * @return string|null
     */
    public function getTunnelType()
    {
        return $this->container['tunnel_type'];
    }

    /**
     * Sets tunnel_type
     *
     * @param string|null $tunnel_type Tunnel type.    l2tpv3:L2TPV3 Ethernet Pseudowire.    gre:GRE Ethernet tunnel.
     *
     * @return self
     */
    public function setTunnelType($tunnel_type)
    {
        $allowedValues = $this->getTunnelTypeAllowableValues();
        if (!is_null($tunnel_type) && !in_array($tunnel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_type', must be one of '%s'",
                    $tunnel_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_type'] = $tunnel_type;

        return $this;
    }

    /**
     * Gets wag_ip
     *
     * @return string|null
     */
    public function getWagIp()
    {
        return $this->container['wag_ip'];
    }

    /**
     * Sets wag_ip
     *
     * @param string|null $wag_ip IP Address of the wireless access gateway.
     *
     * @return self
     */
    public function setWagIp($wag_ip)
    {
        $this->container['wag_ip'] = $wag_ip;

        return $this;
    }

    /**
     * Gets wag_port
     *
     * @return int|null
     */
    public function getWagPort()
    {
        return $this->container['wag_port'];
    }

    /**
     * Sets wag_port
     *
     * @param int|null $wag_port UDP port of the wireless access gateway.
     *
     * @return self
     */
    public function setWagPort($wag_port)
    {

        if (!is_null($wag_port) && ($wag_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $wag_port when calling InlineObject612., must be smaller than or equal to 65535.');
        }
        if (!is_null($wag_port) && ($wag_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $wag_port when calling InlineObject612., must be bigger than or equal to 0.');
        }

        $this->container['wag_port'] = $wag_port;

        return $this;
    }

    /**
     * Gets ping_interval
     *
     * @return int|null
     */
    public function getPingInterval()
    {
        return $this->container['ping_interval'];
    }

    /**
     * Sets ping_interval
     *
     * @param int|null $ping_interval Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
     *
     * @return self
     */
    public function setPingInterval($ping_interval)
    {

        if (!is_null($ping_interval) && ($ping_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ping_interval when calling InlineObject612., must be smaller than or equal to 65535.');
        }
        if (!is_null($ping_interval) && ($ping_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $ping_interval when calling InlineObject612., must be bigger than or equal to 1.');
        }

        $this->container['ping_interval'] = $ping_interval;

        return $this;
    }

    /**
     * Gets ping_number
     *
     * @return int|null
     */
    public function getPingNumber()
    {
        return $this->container['ping_number'];
    }

    /**
     * Sets ping_number
     *
     * @param int|null $ping_number Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
     *
     * @return self
     */
    public function setPingNumber($ping_number)
    {

        if (!is_null($ping_number) && ($ping_number > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ping_number when calling InlineObject612., must be smaller than or equal to 65535.');
        }
        if (!is_null($ping_number) && ($ping_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $ping_number when calling InlineObject612., must be bigger than or equal to 1.');
        }

        $this->container['ping_number'] = $ping_number;

        return $this;
    }

    /**
     * Gets return_packet_timeout
     *
     * @return int|null
     */
    public function getReturnPacketTimeout()
    {
        return $this->container['return_packet_timeout'];
    }

    /**
     * Sets return_packet_timeout
     *
     * @param int|null $return_packet_timeout Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
     *
     * @return self
     */
    public function setReturnPacketTimeout($return_packet_timeout)
    {

        if (!is_null($return_packet_timeout) && ($return_packet_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $return_packet_timeout when calling InlineObject612., must be smaller than or equal to 65535.');
        }
        if (!is_null($return_packet_timeout) && ($return_packet_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $return_packet_timeout when calling InlineObject612., must be bigger than or equal to 1.');
        }

        $this->container['return_packet_timeout'] = $return_packet_timeout;

        return $this;
    }

    /**
     * Gets dhcp_ip_addr
     *
     * @return string|null
     */
    public function getDhcpIpAddr()
    {
        return $this->container['dhcp_ip_addr'];
    }

    /**
     * Sets dhcp_ip_addr
     *
     * @param string|null $dhcp_ip_addr IP address of the monitoring DHCP request packet sent through the tunnel
     *
     * @return self
     */
    public function setDhcpIpAddr($dhcp_ip_addr)
    {
        $this->container['dhcp_ip_addr'] = $dhcp_ip_addr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


