<?php
/**
 * InlineObject63
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject63 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject63 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_63';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'string',
        'authorized' => 'string',
        'ext_name' => 'string',
        'description' => 'string',
        'vdom' => 'int',
        'login_password' => 'string',
        'controller_report' => '\Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameControllerReport[]',
        'modem1' => '\Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]',
        'modem2' => '\Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'authorized' => null,
        'ext_name' => null,
        'description' => null,
        'vdom' => null,
        'login_password' => 'password',
        'controller_report' => null,
        'modem1' => null,
        'modem2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'authorized' => 'authorized',
        'ext_name' => 'ext-name',
        'description' => 'description',
        'vdom' => 'vdom',
        'login_password' => 'login-password',
        'controller_report' => 'controller-report',
        'modem1' => 'modem1',
        'modem2' => 'modem2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'authorized' => 'setAuthorized',
        'ext_name' => 'setExtName',
        'description' => 'setDescription',
        'vdom' => 'setVdom',
        'login_password' => 'setLoginPassword',
        'controller_report' => 'setControllerReport',
        'modem1' => 'setModem1',
        'modem2' => 'setModem2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'authorized' => 'getAuthorized',
        'ext_name' => 'getExtName',
        'description' => 'getDescription',
        'vdom' => 'getVdom',
        'login_password' => 'getLoginPassword',
        'controller_report' => 'getControllerReport',
        'modem1' => 'getModem1',
        'modem2' => 'getModem2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHORIZED_DISABLE = 'disable';
    const AUTHORIZED_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizedAllowableValues()
    {
        return [
            self::AUTHORIZED_DISABLE,
            self::AUTHORIZED_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['authorized'] = $data['authorized'] ?? null;
        $this->container['ext_name'] = $data['ext_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['login_password'] = $data['login_password'] ?? null;
        $this->container['controller_report'] = $data['controller_report'] ?? null;
        $this->container['modem1'] = $data['modem1'] ?? null;
        $this->container['modem2'] = $data['modem2'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 19)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 19)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 19.";
        }

        $allowedValues = $this->getAuthorizedAllowableValues();
        if (!is_null($this->container['authorized']) && !in_array($this->container['authorized'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorized', must be one of '%s'",
                $this->container['authorized'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ext_name']) && (mb_strlen($this->container['ext_name']) > 31)) {
            $invalidProperties[] = "invalid value for 'ext_name', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vdom']) && ($this->container['vdom'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'vdom', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['vdom']) && ($this->container['vdom'] < 0)) {
            $invalidProperties[] = "invalid value for 'vdom', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['controller_report']) && (count($this->container['controller_report']) > 0)) {
            $invalidProperties[] = "invalid value for 'controller_report', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['modem1']) && (count($this->container['modem1']) > 0)) {
            $invalidProperties[] = "invalid value for 'modem1', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['modem2']) && (count($this->container['modem2']) > 0)) {
            $invalidProperties[] = "invalid value for 'modem2', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name FortiExtender entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 19)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject63., must be smaller than or equal to 19.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id FortiExtender serial number.
     *
     * @return self
     */
    public function setId($id)
    {
        if (!is_null($id) && (mb_strlen($id) > 19)) {
            throw new \InvalidArgumentException('invalid length for $id when calling InlineObject63., must be smaller than or equal to 19.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return string|null
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param string|null $authorized FortiExtender Administration (enable or disable).    disable:Controller is configured to not provide service to this FortiExtender.    enable:Controller is configured to provide service to this FortiExtender.
     *
     * @return self
     */
    public function setAuthorized($authorized)
    {
        $allowedValues = $this->getAuthorizedAllowableValues();
        if (!is_null($authorized) && !in_array($authorized, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorized', must be one of '%s'",
                    $authorized,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets ext_name
     *
     * @return string|null
     */
    public function getExtName()
    {
        return $this->container['ext_name'];
    }

    /**
     * Sets ext_name
     *
     * @param string|null $ext_name FortiExtender name.
     *
     * @return self
     */
    public function setExtName($ext_name)
    {
        if (!is_null($ext_name) && (mb_strlen($ext_name) > 31)) {
            throw new \InvalidArgumentException('invalid length for $ext_name when calling InlineObject63., must be smaller than or equal to 31.');
        }

        $this->container['ext_name'] = $ext_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject63., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return int|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param int|null $vdom VDOM
     *
     * @return self
     */
    public function setVdom($vdom)
    {

        if (!is_null($vdom) && ($vdom > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $vdom when calling InlineObject63., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($vdom) && ($vdom < 0)) {
            throw new \InvalidArgumentException('invalid value for $vdom when calling InlineObject63., must be bigger than or equal to 0.');
        }

        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets login_password
     *
     * @return string|null
     */
    public function getLoginPassword()
    {
        return $this->container['login_password'];
    }

    /**
     * Sets login_password
     *
     * @param string|null $login_password FortiExtender login password.
     *
     * @return self
     */
    public function setLoginPassword($login_password)
    {
        $this->container['login_password'] = $login_password;

        return $this;
    }

    /**
     * Gets controller_report
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameControllerReport[]|null
     */
    public function getControllerReport()
    {
        return $this->container['controller_report'];
    }

    /**
     * Sets controller_report
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameControllerReport[]|null $controller_report FortiExtender controller report configuration.
     *
     * @return self
     */
    public function setControllerReport($controller_report)
    {

        if (!is_null($controller_report) && (count($controller_report) > 0)) {
            throw new \InvalidArgumentException('invalid value for $controller_report when calling InlineObject63., number of items must be less than or equal to 0.');
        }
        $this->container['controller_report'] = $controller_report;

        return $this;
    }

    /**
     * Gets modem1
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]|null
     */
    public function getModem1()
    {
        return $this->container['modem1'];
    }

    /**
     * Sets modem1
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]|null $modem1 Configuration options for modem 1.
     *
     * @return self
     */
    public function setModem1($modem1)
    {

        if (!is_null($modem1) && (count($modem1) > 0)) {
            throw new \InvalidArgumentException('invalid value for $modem1 when calling InlineObject63., number of items must be less than or equal to 0.');
        }
        $this->container['modem1'] = $modem1;

        return $this;
    }

    /**
     * Gets modem2
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]|null
     */
    public function getModem2()
    {
        return $this->container['modem2'];
    }

    /**
     * Sets modem2
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameModem1[]|null $modem2 Configuration options for modem 2.
     *
     * @return self
     */
    public function setModem2($modem2)
    {

        if (!is_null($modem2) && (count($modem2) > 0)) {
            throw new \InvalidArgumentException('invalid value for $modem2 when calling InlineObject63., number of items must be less than or equal to 0.');
        }
        $this->container['modem2'] = $modem2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


