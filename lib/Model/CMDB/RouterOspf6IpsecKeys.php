<?php
/**
 * RouterOspf6IpsecKeys
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterOspf6IpsecKeys Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterOspf6IpsecKeys implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_ospf6_ipsec_keys';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spi' => 'int',
        'auth_key' => 'string',
        'enc_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'spi' => null,
        'auth_key' => 'password',
        'enc_key' => 'password'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spi' => 'spi',
        'auth_key' => 'auth-key',
        'enc_key' => 'enc-key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spi' => 'setSpi',
        'auth_key' => 'setAuthKey',
        'enc_key' => 'setEncKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spi' => 'getSpi',
        'auth_key' => 'getAuthKey',
        'enc_key' => 'getEncKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['spi'] = $data['spi'] ?? null;
        $this->container['auth_key'] = $data['auth_key'] ?? null;
        $this->container['enc_key'] = $data['enc_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['spi']) && ($this->container['spi'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spi', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spi']) && ($this->container['spi'] < 256)) {
            $invalidProperties[] = "invalid value for 'spi', must be bigger than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spi
     *
     * @return int|null
     */
    public function getSpi()
    {
        return $this->container['spi'];
    }

    /**
     * Sets spi
     *
     * @param int|null $spi Security Parameters Index.
     *
     * @return self
     */
    public function setSpi($spi)
    {

        if (!is_null($spi) && ($spi > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spi when calling RouterOspf6IpsecKeys., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spi) && ($spi < 256)) {
            throw new \InvalidArgumentException('invalid value for $spi when calling RouterOspf6IpsecKeys., must be bigger than or equal to 256.');
        }

        $this->container['spi'] = $spi;

        return $this;
    }

    /**
     * Gets auth_key
     *
     * @return string|null
     */
    public function getAuthKey()
    {
        return $this->container['auth_key'];
    }

    /**
     * Sets auth_key
     *
     * @param string|null $auth_key Authentication key.
     *
     * @return self
     */
    public function setAuthKey($auth_key)
    {
        $this->container['auth_key'] = $auth_key;

        return $this;
    }

    /**
     * Gets enc_key
     *
     * @return string|null
     */
    public function getEncKey()
    {
        return $this->container['enc_key'];
    }

    /**
     * Sets enc_key
     *
     * @param string|null $enc_key Encryption key.
     *
     * @return self
     */
    public function setEncKey($enc_key)
    {
        $this->container['enc_key'] = $enc_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


