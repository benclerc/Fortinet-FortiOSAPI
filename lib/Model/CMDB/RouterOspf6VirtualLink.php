<?php
/**
 * RouterOspf6VirtualLink
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterOspf6VirtualLink Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterOspf6VirtualLink implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_ospf6_virtual_link';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'dead_interval' => 'int',
        'hello_interval' => 'int',
        'retransmit_interval' => 'int',
        'transmit_delay' => 'int',
        'peer' => 'string',
        'authentication' => 'string',
        'key_rollover_interval' => 'int',
        'ipsec_auth_alg' => 'string',
        'ipsec_enc_alg' => 'string',
        'ipsec_keys' => '\Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'dead_interval' => null,
        'hello_interval' => null,
        'retransmit_interval' => null,
        'transmit_delay' => null,
        'peer' => 'ipv4',
        'authentication' => null,
        'key_rollover_interval' => null,
        'ipsec_auth_alg' => null,
        'ipsec_enc_alg' => null,
        'ipsec_keys' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'dead_interval' => 'dead-interval',
        'hello_interval' => 'hello-interval',
        'retransmit_interval' => 'retransmit-interval',
        'transmit_delay' => 'transmit-delay',
        'peer' => 'peer',
        'authentication' => 'authentication',
        'key_rollover_interval' => 'key-rollover-interval',
        'ipsec_auth_alg' => 'ipsec-auth-alg',
        'ipsec_enc_alg' => 'ipsec-enc-alg',
        'ipsec_keys' => 'ipsec-keys'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'dead_interval' => 'setDeadInterval',
        'hello_interval' => 'setHelloInterval',
        'retransmit_interval' => 'setRetransmitInterval',
        'transmit_delay' => 'setTransmitDelay',
        'peer' => 'setPeer',
        'authentication' => 'setAuthentication',
        'key_rollover_interval' => 'setKeyRolloverInterval',
        'ipsec_auth_alg' => 'setIpsecAuthAlg',
        'ipsec_enc_alg' => 'setIpsecEncAlg',
        'ipsec_keys' => 'setIpsecKeys'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'dead_interval' => 'getDeadInterval',
        'hello_interval' => 'getHelloInterval',
        'retransmit_interval' => 'getRetransmitInterval',
        'transmit_delay' => 'getTransmitDelay',
        'peer' => 'getPeer',
        'authentication' => 'getAuthentication',
        'key_rollover_interval' => 'getKeyRolloverInterval',
        'ipsec_auth_alg' => 'getIpsecAuthAlg',
        'ipsec_enc_alg' => 'getIpsecEncAlg',
        'ipsec_keys' => 'getIpsecKeys'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHENTICATION_NONE = 'none';
    const AUTHENTICATION_AH = 'ah';
    const AUTHENTICATION_ESP = 'esp';
    const AUTHENTICATION_AREA = 'area';
    const IPSEC_AUTH_ALG_MD5 = 'md5';
    const IPSEC_AUTH_ALG_SHA1 = 'sha1';
    const IPSEC_AUTH_ALG_SHA256 = 'sha256';
    const IPSEC_AUTH_ALG_SHA384 = 'sha384';
    const IPSEC_AUTH_ALG_SHA512 = 'sha512';
    const IPSEC_ENC_ALG_NULL = 'null';
    const IPSEC_ENC_ALG_DES = 'des';
    const IPSEC_ENC_ALG__3DES = '3des';
    const IPSEC_ENC_ALG_AES128 = 'aes128';
    const IPSEC_ENC_ALG_AES192 = 'aes192';
    const IPSEC_ENC_ALG_AES256 = 'aes256';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_NONE,
            self::AUTHENTICATION_AH,
            self::AUTHENTICATION_ESP,
            self::AUTHENTICATION_AREA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecAuthAlgAllowableValues()
    {
        return [
            self::IPSEC_AUTH_ALG_MD5,
            self::IPSEC_AUTH_ALG_SHA1,
            self::IPSEC_AUTH_ALG_SHA256,
            self::IPSEC_AUTH_ALG_SHA384,
            self::IPSEC_AUTH_ALG_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecEncAlgAllowableValues()
    {
        return [
            self::IPSEC_ENC_ALG_NULL,
            self::IPSEC_ENC_ALG_DES,
            self::IPSEC_ENC_ALG__3DES,
            self::IPSEC_ENC_ALG_AES128,
            self::IPSEC_ENC_ALG_AES192,
            self::IPSEC_ENC_ALG_AES256,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['dead_interval'] = $data['dead_interval'] ?? null;
        $this->container['hello_interval'] = $data['hello_interval'] ?? null;
        $this->container['retransmit_interval'] = $data['retransmit_interval'] ?? null;
        $this->container['transmit_delay'] = $data['transmit_delay'] ?? null;
        $this->container['peer'] = $data['peer'] ?? null;
        $this->container['authentication'] = $data['authentication'] ?? null;
        $this->container['key_rollover_interval'] = $data['key_rollover_interval'] ?? null;
        $this->container['ipsec_auth_alg'] = $data['ipsec_auth_alg'] ?? null;
        $this->container['ipsec_enc_alg'] = $data['ipsec_enc_alg'] ?? null;
        $this->container['ipsec_keys'] = $data['ipsec_keys'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['dead_interval']) && ($this->container['dead_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'dead_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['dead_interval']) && ($this->container['dead_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'dead_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['retransmit_interval']) && ($this->container['retransmit_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'retransmit_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['retransmit_interval']) && ($this->container['retransmit_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'retransmit_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transmit_delay']) && ($this->container['transmit_delay'] > 65535)) {
            $invalidProperties[] = "invalid value for 'transmit_delay', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['transmit_delay']) && ($this->container['transmit_delay'] < 1)) {
            $invalidProperties[] = "invalid value for 'transmit_delay', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($this->container['authentication']) && !in_array($this->container['authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication', must be one of '%s'",
                $this->container['authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] > 216000)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be smaller than or equal to 216000.";
        }

        if (!is_null($this->container['key_rollover_interval']) && ($this->container['key_rollover_interval'] < 300)) {
            $invalidProperties[] = "invalid value for 'key_rollover_interval', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($this->container['ipsec_auth_alg']) && !in_array($this->container['ipsec_auth_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                $this->container['ipsec_auth_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($this->container['ipsec_enc_alg']) && !in_array($this->container['ipsec_enc_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                $this->container['ipsec_enc_alg'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipsec_keys']) && (count($this->container['ipsec_keys']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipsec_keys', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Virtual link entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterOspf6VirtualLink., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dead_interval
     *
     * @return int|null
     */
    public function getDeadInterval()
    {
        return $this->container['dead_interval'];
    }

    /**
     * Sets dead_interval
     *
     * @param int|null $dead_interval Dead interval.
     *
     * @return self
     */
    public function setDeadInterval($dead_interval)
    {

        if (!is_null($dead_interval) && ($dead_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $dead_interval when calling RouterOspf6VirtualLink., must be smaller than or equal to 65535.');
        }
        if (!is_null($dead_interval) && ($dead_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $dead_interval when calling RouterOspf6VirtualLink., must be bigger than or equal to 1.');
        }

        $this->container['dead_interval'] = $dead_interval;

        return $this;
    }

    /**
     * Gets hello_interval
     *
     * @return int|null
     */
    public function getHelloInterval()
    {
        return $this->container['hello_interval'];
    }

    /**
     * Sets hello_interval
     *
     * @param int|null $hello_interval Hello interval.
     *
     * @return self
     */
    public function setHelloInterval($hello_interval)
    {

        if (!is_null($hello_interval) && ($hello_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterOspf6VirtualLink., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_interval) && ($hello_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterOspf6VirtualLink., must be bigger than or equal to 1.');
        }

        $this->container['hello_interval'] = $hello_interval;

        return $this;
    }

    /**
     * Gets retransmit_interval
     *
     * @return int|null
     */
    public function getRetransmitInterval()
    {
        return $this->container['retransmit_interval'];
    }

    /**
     * Sets retransmit_interval
     *
     * @param int|null $retransmit_interval Retransmit interval.
     *
     * @return self
     */
    public function setRetransmitInterval($retransmit_interval)
    {

        if (!is_null($retransmit_interval) && ($retransmit_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $retransmit_interval when calling RouterOspf6VirtualLink., must be smaller than or equal to 65535.');
        }
        if (!is_null($retransmit_interval) && ($retransmit_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $retransmit_interval when calling RouterOspf6VirtualLink., must be bigger than or equal to 1.');
        }

        $this->container['retransmit_interval'] = $retransmit_interval;

        return $this;
    }

    /**
     * Gets transmit_delay
     *
     * @return int|null
     */
    public function getTransmitDelay()
    {
        return $this->container['transmit_delay'];
    }

    /**
     * Sets transmit_delay
     *
     * @param int|null $transmit_delay Transmit delay.
     *
     * @return self
     */
    public function setTransmitDelay($transmit_delay)
    {

        if (!is_null($transmit_delay) && ($transmit_delay > 65535)) {
            throw new \InvalidArgumentException('invalid value for $transmit_delay when calling RouterOspf6VirtualLink., must be smaller than or equal to 65535.');
        }
        if (!is_null($transmit_delay) && ($transmit_delay < 1)) {
            throw new \InvalidArgumentException('invalid value for $transmit_delay when calling RouterOspf6VirtualLink., must be bigger than or equal to 1.');
        }

        $this->container['transmit_delay'] = $transmit_delay;

        return $this;
    }

    /**
     * Gets peer
     *
     * @return string|null
     */
    public function getPeer()
    {
        return $this->container['peer'];
    }

    /**
     * Sets peer
     *
     * @param string|null $peer A.B.C.D, peer router ID.
     *
     * @return self
     */
    public function setPeer($peer)
    {
        $this->container['peer'] = $peer;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication Authentication mode.    none:Disable authentication.    ah:Authentication Header.    esp:Encapsulating Security Payload.    area:Use the routing area's authentication configuration.
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication', must be one of '%s'",
                    $authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets key_rollover_interval
     *
     * @return int|null
     */
    public function getKeyRolloverInterval()
    {
        return $this->container['key_rollover_interval'];
    }

    /**
     * Sets key_rollover_interval
     *
     * @param int|null $key_rollover_interval Key roll-over interval.
     *
     * @return self
     */
    public function setKeyRolloverInterval($key_rollover_interval)
    {

        if (!is_null($key_rollover_interval) && ($key_rollover_interval > 216000)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6VirtualLink., must be smaller than or equal to 216000.');
        }
        if (!is_null($key_rollover_interval) && ($key_rollover_interval < 300)) {
            throw new \InvalidArgumentException('invalid value for $key_rollover_interval when calling RouterOspf6VirtualLink., must be bigger than or equal to 300.');
        }

        $this->container['key_rollover_interval'] = $key_rollover_interval;

        return $this;
    }

    /**
     * Gets ipsec_auth_alg
     *
     * @return string|null
     */
    public function getIpsecAuthAlg()
    {
        return $this->container['ipsec_auth_alg'];
    }

    /**
     * Sets ipsec_auth_alg
     *
     * @param string|null $ipsec_auth_alg Authentication algorithm.    md5:MD5.    sha1:SHA1.    sha256:SHA256.    sha384:SHA384.    sha512:SHA512.
     *
     * @return self
     */
    public function setIpsecAuthAlg($ipsec_auth_alg)
    {
        $allowedValues = $this->getIpsecAuthAlgAllowableValues();
        if (!is_null($ipsec_auth_alg) && !in_array($ipsec_auth_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_auth_alg', must be one of '%s'",
                    $ipsec_auth_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_auth_alg'] = $ipsec_auth_alg;

        return $this;
    }

    /**
     * Gets ipsec_enc_alg
     *
     * @return string|null
     */
    public function getIpsecEncAlg()
    {
        return $this->container['ipsec_enc_alg'];
    }

    /**
     * Sets ipsec_enc_alg
     *
     * @param string|null $ipsec_enc_alg Encryption algorithm.    null:No encryption.    des:DES.    3des:3DES.    aes128:AES128.    aes192:AES192.    aes256:AES256.
     *
     * @return self
     */
    public function setIpsecEncAlg($ipsec_enc_alg)
    {
        $allowedValues = $this->getIpsecEncAlgAllowableValues();
        if (!is_null($ipsec_enc_alg) && !in_array($ipsec_enc_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_enc_alg', must be one of '%s'",
                    $ipsec_enc_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_enc_alg'] = $ipsec_enc_alg;

        return $this;
    }

    /**
     * Gets ipsec_keys
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null
     */
    public function getIpsecKeys()
    {
        return $this->container['ipsec_keys'];
    }

    /**
     * Sets ipsec_keys
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspf6IpsecKeys[]|null $ipsec_keys IPsec authentication and encryption keys.
     *
     * @return self
     */
    public function setIpsecKeys($ipsec_keys)
    {

        if (!is_null($ipsec_keys) && (count($ipsec_keys) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_keys when calling RouterOspf6VirtualLink., number of items must be less than or equal to 0.');
        }
        $this->container['ipsec_keys'] = $ipsec_keys;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


