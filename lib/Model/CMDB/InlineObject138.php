<?php
/**
 * InlineObject138
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject138 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject138 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_138';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'policy' => 'int',
        'query' => 'string',
        'field' => '\Fortigate\FortiOS\Model\CMDB\ReportDatasetNameField[]',
        'parameters' => '\Fortigate\FortiOS\Model\CMDB\ReportDatasetNameParameters[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'policy' => null,
        'query' => null,
        'field' => null,
        'parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'policy' => 'policy',
        'query' => 'query',
        'field' => 'field',
        'parameters' => 'parameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'policy' => 'setPolicy',
        'query' => 'setQuery',
        'field' => 'setField',
        'parameters' => 'setParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'policy' => 'getPolicy',
        'query' => 'getQuery',
        'field' => 'getField',
        'parameters' => 'getParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['policy'] = $data['policy'] ?? null;
        $this->container['query'] = $data['query'] ?? null;
        $this->container['field'] = $data['field'] ?? null;
        $this->container['parameters'] = $data['parameters'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 71)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['policy']) && ($this->container['policy'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'policy', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['policy']) && ($this->container['policy'] < 0)) {
            $invalidProperties[] = "invalid value for 'policy', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['query']) && (mb_strlen($this->container['query']) > 2303)) {
            $invalidProperties[] = "invalid value for 'query', the character length must be smaller than or equal to 2303.";
        }

        if (!is_null($this->container['field']) && (count($this->container['field']) > 32)) {
            $invalidProperties[] = "invalid value for 'field', number of items must be less than or equal to 32.";
        }

        if (!is_null($this->container['parameters']) && (count($this->container['parameters']) > 0)) {
            $invalidProperties[] = "invalid value for 'parameters', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 71)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject138., must be smaller than or equal to 71.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return int|null
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param int|null $policy Used by monitor policy.
     *
     * @return self
     */
    public function setPolicy($policy)
    {

        if (!is_null($policy) && ($policy > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $policy when calling InlineObject138., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($policy) && ($policy < 0)) {
            throw new \InvalidArgumentException('invalid value for $policy when calling InlineObject138., must be bigger than or equal to 0.');
        }

        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query SQL query statement.
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (!is_null($query) && (mb_strlen($query) > 2303)) {
            throw new \InvalidArgumentException('invalid length for $query when calling InlineObject138., must be smaller than or equal to 2303.');
        }

        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportDatasetNameField[]|null
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportDatasetNameField[]|null $field Fields.
     *
     * @return self
     */
    public function setField($field)
    {

        if (!is_null($field) && (count($field) > 32)) {
            throw new \InvalidArgumentException('invalid value for $field when calling InlineObject138., number of items must be less than or equal to 32.');
        }
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportDatasetNameParameters[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportDatasetNameParameters[]|null $parameters Parameters.
     *
     * @return self
     */
    public function setParameters($parameters)
    {

        if (!is_null($parameters) && (count($parameters) > 0)) {
            throw new \InvalidArgumentException('invalid value for $parameters when calling InlineObject138., number of items must be less than or equal to 0.');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


