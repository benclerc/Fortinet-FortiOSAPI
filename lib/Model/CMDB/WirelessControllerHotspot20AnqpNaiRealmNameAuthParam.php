<?php
/**
 * WirelessControllerHotspot20AnqpNaiRealmNameAuthParam
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerHotspot20AnqpNaiRealmNameAuthParam Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerHotspot20AnqpNaiRealmNameAuthParam implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_hotspot20_anqp_nai_realm__name__auth_param';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'index' => 'int',
        'id' => 'string',
        'val' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'index' => null,
        'id' => null,
        'val' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
        'id' => 'id',
        'val' => 'val'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
        'id' => 'setId',
        'val' => 'setVal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
        'id' => 'getId',
        'val' => 'getVal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ID_NON_EAP_INNER_AUTH = 'non-eap-inner-auth';
    const ID_INNER_AUTH_EAP = 'inner-auth-eap';
    const ID_CREDENTIAL = 'credential';
    const ID_TUNNELED_CREDENTIAL = 'tunneled-credential';
    const VAL_EAP_IDENTITY = 'eap-identity';
    const VAL_EAP_MD5 = 'eap-md5';
    const VAL_EAP_TLS = 'eap-tls';
    const VAL_EAP_TTLS = 'eap-ttls';
    const VAL_EAP_PEAP = 'eap-peap';
    const VAL_EAP_SIM = 'eap-sim';
    const VAL_EAP_AKA = 'eap-aka';
    const VAL_EAP_AKA_PRIME = 'eap-aka-prime';
    const VAL_NON_EAP_PAP = 'non-eap-pap';
    const VAL_NON_EAP_CHAP = 'non-eap-chap';
    const VAL_NON_EAP_MSCHAP = 'non-eap-mschap';
    const VAL_NON_EAP_MSCHAPV2 = 'non-eap-mschapv2';
    const VAL_CRED_SIM = 'cred-sim';
    const VAL_CRED_USIM = 'cred-usim';
    const VAL_CRED_NFC = 'cred-nfc';
    const VAL_CRED_HARDWARE_TOKEN = 'cred-hardware-token';
    const VAL_CRED_SOFTOKEN = 'cred-softoken';
    const VAL_CRED_CERTIFICATE = 'cred-certificate';
    const VAL_CRED_USER_PWD = 'cred-user-pwd';
    const VAL_CRED_NONE = 'cred-none';
    const VAL_CRED_VENDOR_SPECIFIC = 'cred-vendor-specific';
    const VAL_TUN_CRED_SIM = 'tun-cred-sim';
    const VAL_TUN_CRED_USIM = 'tun-cred-usim';
    const VAL_TUN_CRED_NFC = 'tun-cred-nfc';
    const VAL_TUN_CRED_HARDWARE_TOKEN = 'tun-cred-hardware-token';
    const VAL_TUN_CRED_SOFTOKEN = 'tun-cred-softoken';
    const VAL_TUN_CRED_CERTIFICATE = 'tun-cred-certificate';
    const VAL_TUN_CRED_USER_PWD = 'tun-cred-user-pwd';
    const VAL_TUN_CRED_ANONYMOUS = 'tun-cred-anonymous';
    const VAL_TUN_CRED_VENDOR_SPECIFIC = 'tun-cred-vendor-specific';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdAllowableValues()
    {
        return [
            self::ID_NON_EAP_INNER_AUTH,
            self::ID_INNER_AUTH_EAP,
            self::ID_CREDENTIAL,
            self::ID_TUNNELED_CREDENTIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValAllowableValues()
    {
        return [
            self::VAL_EAP_IDENTITY,
            self::VAL_EAP_MD5,
            self::VAL_EAP_TLS,
            self::VAL_EAP_TTLS,
            self::VAL_EAP_PEAP,
            self::VAL_EAP_SIM,
            self::VAL_EAP_AKA,
            self::VAL_EAP_AKA_PRIME,
            self::VAL_NON_EAP_PAP,
            self::VAL_NON_EAP_CHAP,
            self::VAL_NON_EAP_MSCHAP,
            self::VAL_NON_EAP_MSCHAPV2,
            self::VAL_CRED_SIM,
            self::VAL_CRED_USIM,
            self::VAL_CRED_NFC,
            self::VAL_CRED_HARDWARE_TOKEN,
            self::VAL_CRED_SOFTOKEN,
            self::VAL_CRED_CERTIFICATE,
            self::VAL_CRED_USER_PWD,
            self::VAL_CRED_NONE,
            self::VAL_CRED_VENDOR_SPECIFIC,
            self::VAL_TUN_CRED_SIM,
            self::VAL_TUN_CRED_USIM,
            self::VAL_TUN_CRED_NFC,
            self::VAL_TUN_CRED_HARDWARE_TOKEN,
            self::VAL_TUN_CRED_SOFTOKEN,
            self::VAL_TUN_CRED_CERTIFICATE,
            self::VAL_TUN_CRED_USER_PWD,
            self::VAL_TUN_CRED_ANONYMOUS,
            self::VAL_TUN_CRED_VENDOR_SPECIFIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index'] = $data['index'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['val'] = $data['val'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['index']) && ($this->container['index'] > 4)) {
            $invalidProperties[] = "invalid value for 'index', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['index']) && ($this->container['index'] < 1)) {
            $invalidProperties[] = "invalid value for 'index', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIdAllowableValues();
        if (!is_null($this->container['id']) && !in_array($this->container['id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'id', must be one of '%s'",
                $this->container['id'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValAllowableValues();
        if (!is_null($this->container['val']) && !in_array($this->container['val'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'val', must be one of '%s'",
                $this->container['val'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index Param index.
     *
     * @return self
     */
    public function setIndex($index)
    {

        if (!is_null($index) && ($index > 4)) {
            throw new \InvalidArgumentException('invalid value for $index when calling WirelessControllerHotspot20AnqpNaiRealmNameAuthParam., must be smaller than or equal to 4.');
        }
        if (!is_null($index) && ($index < 1)) {
            throw new \InvalidArgumentException('invalid value for $index when calling WirelessControllerHotspot20AnqpNaiRealmNameAuthParam., must be bigger than or equal to 1.');
        }

        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of authentication parameter.    non-eap-inner-auth:Non-EAP inner authentication type.    inner-auth-eap:Inner authentication EAP method type.    credential:Credential type.    tunneled-credential:Tunneled EAP method credential type.
     *
     * @return self
     */
    public function setId($id)
    {
        $allowedValues = $this->getIdAllowableValues();
        if (!is_null($id) && !in_array($id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'id', must be one of '%s'",
                    $id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets val
     *
     * @return string|null
     */
    public function getVal()
    {
        return $this->container['val'];
    }

    /**
     * Sets val
     *
     * @param string|null $val Value of authentication parameter.    eap-identity:EAP Identity.    eap-md5:EAP MD5.    eap-tls:EAP TLS.    eap-ttls:EAP TTLS.    eap-peap:EAP PEAP.    eap-sim:EAP SIM.    eap-aka:EAP AKA.    eap-aka-prime:EAP AKA'.    non-eap-pap:Non EAP PAP.    non-eap-chap:Non EAP CHAP.    non-eap-mschap:Non EAP MSCHAP.    non-eap-mschapv2:Non EAP MSCHAPV2.    cred-sim:Credential SIM.    cred-usim:Credential USIM.    cred-nfc:Credential NFC secure element.    cred-hardware-token:Credential hardware token.    cred-softoken:Credential softoken.    cred-certificate:Credential certificate.    cred-user-pwd:Credential username password.    cred-none:Credential none.    cred-vendor-specific:Credential vendor specific.    tun-cred-sim:Tunneled credential SIM.    tun-cred-usim:Tunneled credential USIM.    tun-cred-nfc:Tunneled credential NFC secure element.    tun-cred-hardware-token:Tunneled credential hardware token.    tun-cred-softoken:Tunneled credential softoken.    tun-cred-certificate:Tunneled credential certificate.    tun-cred-user-pwd:Tunneled credential username password.    tun-cred-anonymous:Tunneled credential anonymous.    tun-cred-vendor-specific:Tunneled credential vendor specific.
     *
     * @return self
     */
    public function setVal($val)
    {
        $allowedValues = $this->getValAllowableValues();
        if (!is_null($val) && !in_array($val, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'val', must be one of '%s'",
                    $val,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['val'] = $val;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


