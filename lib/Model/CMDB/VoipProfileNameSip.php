<?php
/**
 * VoipProfileNameSip
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * VoipProfileNameSip Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VoipProfileNameSip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_voip_profile__name__sip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'rtp' => 'string',
        'nat_port_range' => 'string',
        'open_register_pinhole' => 'string',
        'open_contact_pinhole' => 'string',
        'strict_register' => 'string',
        'register_rate' => 'int',
        'invite_rate' => 'int',
        'max_dialogs' => 'int',
        'max_line_length' => 'int',
        'block_long_lines' => 'string',
        'block_unknown' => 'string',
        'call_keepalive' => 'int',
        'block_ack' => 'string',
        'block_bye' => 'string',
        'block_cancel' => 'string',
        'block_info' => 'string',
        'block_invite' => 'string',
        'block_message' => 'string',
        'block_notify' => 'string',
        'block_options' => 'string',
        'block_prack' => 'string',
        'block_publish' => 'string',
        'block_refer' => 'string',
        'block_register' => 'string',
        'block_subscribe' => 'string',
        'block_update' => 'string',
        'register_contact_trace' => 'string',
        'open_via_pinhole' => 'string',
        'open_record_route_pinhole' => 'string',
        'rfc2543_branch' => 'string',
        'log_violations' => 'string',
        'log_call_summary' => 'string',
        'nat_trace' => 'string',
        'subscribe_rate' => 'int',
        'message_rate' => 'int',
        'notify_rate' => 'int',
        'refer_rate' => 'int',
        'update_rate' => 'int',
        'options_rate' => 'int',
        'ack_rate' => 'int',
        'prack_rate' => 'int',
        'info_rate' => 'int',
        'publish_rate' => 'int',
        'bye_rate' => 'int',
        'cancel_rate' => 'int',
        'preserve_override' => 'string',
        'no_sdp_fixup' => 'string',
        'contact_fixup' => 'string',
        'max_idle_dialogs' => 'int',
        'block_geo_red_options' => 'string',
        'hosted_nat_traversal' => 'string',
        'hnt_restrict_source_ip' => 'string',
        'max_body_length' => 'int',
        'unknown_header' => 'string',
        'malformed_request_line' => 'string',
        'malformed_header_via' => 'string',
        'malformed_header_from' => 'string',
        'malformed_header_to' => 'string',
        'malformed_header_call_id' => 'string',
        'malformed_header_cseq' => 'string',
        'malformed_header_rack' => 'string',
        'malformed_header_rseq' => 'string',
        'malformed_header_contact' => 'string',
        'malformed_header_record_route' => 'string',
        'malformed_header_route' => 'string',
        'malformed_header_expires' => 'string',
        'malformed_header_content_type' => 'string',
        'malformed_header_content_length' => 'string',
        'malformed_header_max_forwards' => 'string',
        'malformed_header_allow' => 'string',
        'malformed_header_p_asserted_identity' => 'string',
        'malformed_header_sdp_v' => 'string',
        'malformed_header_sdp_o' => 'string',
        'malformed_header_sdp_s' => 'string',
        'malformed_header_sdp_i' => 'string',
        'malformed_header_sdp_c' => 'string',
        'malformed_header_sdp_b' => 'string',
        'malformed_header_sdp_z' => 'string',
        'malformed_header_sdp_k' => 'string',
        'malformed_header_sdp_a' => 'string',
        'malformed_header_sdp_t' => 'string',
        'malformed_header_sdp_r' => 'string',
        'malformed_header_sdp_m' => 'string',
        'provisional_invite_expiry_time' => 'int',
        'ips_rtp' => 'string',
        'ssl_mode' => 'string',
        'ssl_send_empty_frags' => 'string',
        'ssl_client_renegotiation' => 'string',
        'ssl_algorithm' => 'string',
        'ssl_pfs' => 'string',
        'ssl_min_version' => 'string',
        'ssl_max_version' => 'string',
        'ssl_client_certificate' => 'string',
        'ssl_server_certificate' => 'string',
        'ssl_auth_client' => 'string',
        'ssl_auth_server' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'rtp' => null,
        'nat_port_range' => null,
        'open_register_pinhole' => null,
        'open_contact_pinhole' => null,
        'strict_register' => null,
        'register_rate' => null,
        'invite_rate' => null,
        'max_dialogs' => null,
        'max_line_length' => null,
        'block_long_lines' => null,
        'block_unknown' => null,
        'call_keepalive' => null,
        'block_ack' => null,
        'block_bye' => null,
        'block_cancel' => null,
        'block_info' => null,
        'block_invite' => null,
        'block_message' => null,
        'block_notify' => null,
        'block_options' => null,
        'block_prack' => null,
        'block_publish' => null,
        'block_refer' => null,
        'block_register' => null,
        'block_subscribe' => null,
        'block_update' => null,
        'register_contact_trace' => null,
        'open_via_pinhole' => null,
        'open_record_route_pinhole' => null,
        'rfc2543_branch' => null,
        'log_violations' => null,
        'log_call_summary' => null,
        'nat_trace' => null,
        'subscribe_rate' => null,
        'message_rate' => null,
        'notify_rate' => null,
        'refer_rate' => null,
        'update_rate' => null,
        'options_rate' => null,
        'ack_rate' => null,
        'prack_rate' => null,
        'info_rate' => null,
        'publish_rate' => null,
        'bye_rate' => null,
        'cancel_rate' => null,
        'preserve_override' => null,
        'no_sdp_fixup' => null,
        'contact_fixup' => null,
        'max_idle_dialogs' => null,
        'block_geo_red_options' => null,
        'hosted_nat_traversal' => null,
        'hnt_restrict_source_ip' => null,
        'max_body_length' => null,
        'unknown_header' => null,
        'malformed_request_line' => null,
        'malformed_header_via' => null,
        'malformed_header_from' => null,
        'malformed_header_to' => null,
        'malformed_header_call_id' => null,
        'malformed_header_cseq' => null,
        'malformed_header_rack' => null,
        'malformed_header_rseq' => null,
        'malformed_header_contact' => null,
        'malformed_header_record_route' => null,
        'malformed_header_route' => null,
        'malformed_header_expires' => null,
        'malformed_header_content_type' => null,
        'malformed_header_content_length' => null,
        'malformed_header_max_forwards' => null,
        'malformed_header_allow' => null,
        'malformed_header_p_asserted_identity' => null,
        'malformed_header_sdp_v' => null,
        'malformed_header_sdp_o' => null,
        'malformed_header_sdp_s' => null,
        'malformed_header_sdp_i' => null,
        'malformed_header_sdp_c' => null,
        'malformed_header_sdp_b' => null,
        'malformed_header_sdp_z' => null,
        'malformed_header_sdp_k' => null,
        'malformed_header_sdp_a' => null,
        'malformed_header_sdp_t' => null,
        'malformed_header_sdp_r' => null,
        'malformed_header_sdp_m' => null,
        'provisional_invite_expiry_time' => null,
        'ips_rtp' => null,
        'ssl_mode' => null,
        'ssl_send_empty_frags' => null,
        'ssl_client_renegotiation' => null,
        'ssl_algorithm' => null,
        'ssl_pfs' => null,
        'ssl_min_version' => null,
        'ssl_max_version' => null,
        'ssl_client_certificate' => null,
        'ssl_server_certificate' => null,
        'ssl_auth_client' => null,
        'ssl_auth_server' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'rtp' => 'rtp',
        'nat_port_range' => 'nat-port-range',
        'open_register_pinhole' => 'open-register-pinhole',
        'open_contact_pinhole' => 'open-contact-pinhole',
        'strict_register' => 'strict-register',
        'register_rate' => 'register-rate',
        'invite_rate' => 'invite-rate',
        'max_dialogs' => 'max-dialogs',
        'max_line_length' => 'max-line-length',
        'block_long_lines' => 'block-long-lines',
        'block_unknown' => 'block-unknown',
        'call_keepalive' => 'call-keepalive',
        'block_ack' => 'block-ack',
        'block_bye' => 'block-bye',
        'block_cancel' => 'block-cancel',
        'block_info' => 'block-info',
        'block_invite' => 'block-invite',
        'block_message' => 'block-message',
        'block_notify' => 'block-notify',
        'block_options' => 'block-options',
        'block_prack' => 'block-prack',
        'block_publish' => 'block-publish',
        'block_refer' => 'block-refer',
        'block_register' => 'block-register',
        'block_subscribe' => 'block-subscribe',
        'block_update' => 'block-update',
        'register_contact_trace' => 'register-contact-trace',
        'open_via_pinhole' => 'open-via-pinhole',
        'open_record_route_pinhole' => 'open-record-route-pinhole',
        'rfc2543_branch' => 'rfc2543-branch',
        'log_violations' => 'log-violations',
        'log_call_summary' => 'log-call-summary',
        'nat_trace' => 'nat-trace',
        'subscribe_rate' => 'subscribe-rate',
        'message_rate' => 'message-rate',
        'notify_rate' => 'notify-rate',
        'refer_rate' => 'refer-rate',
        'update_rate' => 'update-rate',
        'options_rate' => 'options-rate',
        'ack_rate' => 'ack-rate',
        'prack_rate' => 'prack-rate',
        'info_rate' => 'info-rate',
        'publish_rate' => 'publish-rate',
        'bye_rate' => 'bye-rate',
        'cancel_rate' => 'cancel-rate',
        'preserve_override' => 'preserve-override',
        'no_sdp_fixup' => 'no-sdp-fixup',
        'contact_fixup' => 'contact-fixup',
        'max_idle_dialogs' => 'max-idle-dialogs',
        'block_geo_red_options' => 'block-geo-red-options',
        'hosted_nat_traversal' => 'hosted-nat-traversal',
        'hnt_restrict_source_ip' => 'hnt-restrict-source-ip',
        'max_body_length' => 'max-body-length',
        'unknown_header' => 'unknown-header',
        'malformed_request_line' => 'malformed-request-line',
        'malformed_header_via' => 'malformed-header-via',
        'malformed_header_from' => 'malformed-header-from',
        'malformed_header_to' => 'malformed-header-to',
        'malformed_header_call_id' => 'malformed-header-call-id',
        'malformed_header_cseq' => 'malformed-header-cseq',
        'malformed_header_rack' => 'malformed-header-rack',
        'malformed_header_rseq' => 'malformed-header-rseq',
        'malformed_header_contact' => 'malformed-header-contact',
        'malformed_header_record_route' => 'malformed-header-record-route',
        'malformed_header_route' => 'malformed-header-route',
        'malformed_header_expires' => 'malformed-header-expires',
        'malformed_header_content_type' => 'malformed-header-content-type',
        'malformed_header_content_length' => 'malformed-header-content-length',
        'malformed_header_max_forwards' => 'malformed-header-max-forwards',
        'malformed_header_allow' => 'malformed-header-allow',
        'malformed_header_p_asserted_identity' => 'malformed-header-p-asserted-identity',
        'malformed_header_sdp_v' => 'malformed-header-sdp-v',
        'malformed_header_sdp_o' => 'malformed-header-sdp-o',
        'malformed_header_sdp_s' => 'malformed-header-sdp-s',
        'malformed_header_sdp_i' => 'malformed-header-sdp-i',
        'malformed_header_sdp_c' => 'malformed-header-sdp-c',
        'malformed_header_sdp_b' => 'malformed-header-sdp-b',
        'malformed_header_sdp_z' => 'malformed-header-sdp-z',
        'malformed_header_sdp_k' => 'malformed-header-sdp-k',
        'malformed_header_sdp_a' => 'malformed-header-sdp-a',
        'malformed_header_sdp_t' => 'malformed-header-sdp-t',
        'malformed_header_sdp_r' => 'malformed-header-sdp-r',
        'malformed_header_sdp_m' => 'malformed-header-sdp-m',
        'provisional_invite_expiry_time' => 'provisional-invite-expiry-time',
        'ips_rtp' => 'ips-rtp',
        'ssl_mode' => 'ssl-mode',
        'ssl_send_empty_frags' => 'ssl-send-empty-frags',
        'ssl_client_renegotiation' => 'ssl-client-renegotiation',
        'ssl_algorithm' => 'ssl-algorithm',
        'ssl_pfs' => 'ssl-pfs',
        'ssl_min_version' => 'ssl-min-version',
        'ssl_max_version' => 'ssl-max-version',
        'ssl_client_certificate' => 'ssl-client-certificate',
        'ssl_server_certificate' => 'ssl-server-certificate',
        'ssl_auth_client' => 'ssl-auth-client',
        'ssl_auth_server' => 'ssl-auth-server'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'rtp' => 'setRtp',
        'nat_port_range' => 'setNatPortRange',
        'open_register_pinhole' => 'setOpenRegisterPinhole',
        'open_contact_pinhole' => 'setOpenContactPinhole',
        'strict_register' => 'setStrictRegister',
        'register_rate' => 'setRegisterRate',
        'invite_rate' => 'setInviteRate',
        'max_dialogs' => 'setMaxDialogs',
        'max_line_length' => 'setMaxLineLength',
        'block_long_lines' => 'setBlockLongLines',
        'block_unknown' => 'setBlockUnknown',
        'call_keepalive' => 'setCallKeepalive',
        'block_ack' => 'setBlockAck',
        'block_bye' => 'setBlockBye',
        'block_cancel' => 'setBlockCancel',
        'block_info' => 'setBlockInfo',
        'block_invite' => 'setBlockInvite',
        'block_message' => 'setBlockMessage',
        'block_notify' => 'setBlockNotify',
        'block_options' => 'setBlockOptions',
        'block_prack' => 'setBlockPrack',
        'block_publish' => 'setBlockPublish',
        'block_refer' => 'setBlockRefer',
        'block_register' => 'setBlockRegister',
        'block_subscribe' => 'setBlockSubscribe',
        'block_update' => 'setBlockUpdate',
        'register_contact_trace' => 'setRegisterContactTrace',
        'open_via_pinhole' => 'setOpenViaPinhole',
        'open_record_route_pinhole' => 'setOpenRecordRoutePinhole',
        'rfc2543_branch' => 'setRfc2543Branch',
        'log_violations' => 'setLogViolations',
        'log_call_summary' => 'setLogCallSummary',
        'nat_trace' => 'setNatTrace',
        'subscribe_rate' => 'setSubscribeRate',
        'message_rate' => 'setMessageRate',
        'notify_rate' => 'setNotifyRate',
        'refer_rate' => 'setReferRate',
        'update_rate' => 'setUpdateRate',
        'options_rate' => 'setOptionsRate',
        'ack_rate' => 'setAckRate',
        'prack_rate' => 'setPrackRate',
        'info_rate' => 'setInfoRate',
        'publish_rate' => 'setPublishRate',
        'bye_rate' => 'setByeRate',
        'cancel_rate' => 'setCancelRate',
        'preserve_override' => 'setPreserveOverride',
        'no_sdp_fixup' => 'setNoSdpFixup',
        'contact_fixup' => 'setContactFixup',
        'max_idle_dialogs' => 'setMaxIdleDialogs',
        'block_geo_red_options' => 'setBlockGeoRedOptions',
        'hosted_nat_traversal' => 'setHostedNatTraversal',
        'hnt_restrict_source_ip' => 'setHntRestrictSourceIp',
        'max_body_length' => 'setMaxBodyLength',
        'unknown_header' => 'setUnknownHeader',
        'malformed_request_line' => 'setMalformedRequestLine',
        'malformed_header_via' => 'setMalformedHeaderVia',
        'malformed_header_from' => 'setMalformedHeaderFrom',
        'malformed_header_to' => 'setMalformedHeaderTo',
        'malformed_header_call_id' => 'setMalformedHeaderCallId',
        'malformed_header_cseq' => 'setMalformedHeaderCseq',
        'malformed_header_rack' => 'setMalformedHeaderRack',
        'malformed_header_rseq' => 'setMalformedHeaderRseq',
        'malformed_header_contact' => 'setMalformedHeaderContact',
        'malformed_header_record_route' => 'setMalformedHeaderRecordRoute',
        'malformed_header_route' => 'setMalformedHeaderRoute',
        'malformed_header_expires' => 'setMalformedHeaderExpires',
        'malformed_header_content_type' => 'setMalformedHeaderContentType',
        'malformed_header_content_length' => 'setMalformedHeaderContentLength',
        'malformed_header_max_forwards' => 'setMalformedHeaderMaxForwards',
        'malformed_header_allow' => 'setMalformedHeaderAllow',
        'malformed_header_p_asserted_identity' => 'setMalformedHeaderPAssertedIdentity',
        'malformed_header_sdp_v' => 'setMalformedHeaderSdpV',
        'malformed_header_sdp_o' => 'setMalformedHeaderSdpO',
        'malformed_header_sdp_s' => 'setMalformedHeaderSdpS',
        'malformed_header_sdp_i' => 'setMalformedHeaderSdpI',
        'malformed_header_sdp_c' => 'setMalformedHeaderSdpC',
        'malformed_header_sdp_b' => 'setMalformedHeaderSdpB',
        'malformed_header_sdp_z' => 'setMalformedHeaderSdpZ',
        'malformed_header_sdp_k' => 'setMalformedHeaderSdpK',
        'malformed_header_sdp_a' => 'setMalformedHeaderSdpA',
        'malformed_header_sdp_t' => 'setMalformedHeaderSdpT',
        'malformed_header_sdp_r' => 'setMalformedHeaderSdpR',
        'malformed_header_sdp_m' => 'setMalformedHeaderSdpM',
        'provisional_invite_expiry_time' => 'setProvisionalInviteExpiryTime',
        'ips_rtp' => 'setIpsRtp',
        'ssl_mode' => 'setSslMode',
        'ssl_send_empty_frags' => 'setSslSendEmptyFrags',
        'ssl_client_renegotiation' => 'setSslClientRenegotiation',
        'ssl_algorithm' => 'setSslAlgorithm',
        'ssl_pfs' => 'setSslPfs',
        'ssl_min_version' => 'setSslMinVersion',
        'ssl_max_version' => 'setSslMaxVersion',
        'ssl_client_certificate' => 'setSslClientCertificate',
        'ssl_server_certificate' => 'setSslServerCertificate',
        'ssl_auth_client' => 'setSslAuthClient',
        'ssl_auth_server' => 'setSslAuthServer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'rtp' => 'getRtp',
        'nat_port_range' => 'getNatPortRange',
        'open_register_pinhole' => 'getOpenRegisterPinhole',
        'open_contact_pinhole' => 'getOpenContactPinhole',
        'strict_register' => 'getStrictRegister',
        'register_rate' => 'getRegisterRate',
        'invite_rate' => 'getInviteRate',
        'max_dialogs' => 'getMaxDialogs',
        'max_line_length' => 'getMaxLineLength',
        'block_long_lines' => 'getBlockLongLines',
        'block_unknown' => 'getBlockUnknown',
        'call_keepalive' => 'getCallKeepalive',
        'block_ack' => 'getBlockAck',
        'block_bye' => 'getBlockBye',
        'block_cancel' => 'getBlockCancel',
        'block_info' => 'getBlockInfo',
        'block_invite' => 'getBlockInvite',
        'block_message' => 'getBlockMessage',
        'block_notify' => 'getBlockNotify',
        'block_options' => 'getBlockOptions',
        'block_prack' => 'getBlockPrack',
        'block_publish' => 'getBlockPublish',
        'block_refer' => 'getBlockRefer',
        'block_register' => 'getBlockRegister',
        'block_subscribe' => 'getBlockSubscribe',
        'block_update' => 'getBlockUpdate',
        'register_contact_trace' => 'getRegisterContactTrace',
        'open_via_pinhole' => 'getOpenViaPinhole',
        'open_record_route_pinhole' => 'getOpenRecordRoutePinhole',
        'rfc2543_branch' => 'getRfc2543Branch',
        'log_violations' => 'getLogViolations',
        'log_call_summary' => 'getLogCallSummary',
        'nat_trace' => 'getNatTrace',
        'subscribe_rate' => 'getSubscribeRate',
        'message_rate' => 'getMessageRate',
        'notify_rate' => 'getNotifyRate',
        'refer_rate' => 'getReferRate',
        'update_rate' => 'getUpdateRate',
        'options_rate' => 'getOptionsRate',
        'ack_rate' => 'getAckRate',
        'prack_rate' => 'getPrackRate',
        'info_rate' => 'getInfoRate',
        'publish_rate' => 'getPublishRate',
        'bye_rate' => 'getByeRate',
        'cancel_rate' => 'getCancelRate',
        'preserve_override' => 'getPreserveOverride',
        'no_sdp_fixup' => 'getNoSdpFixup',
        'contact_fixup' => 'getContactFixup',
        'max_idle_dialogs' => 'getMaxIdleDialogs',
        'block_geo_red_options' => 'getBlockGeoRedOptions',
        'hosted_nat_traversal' => 'getHostedNatTraversal',
        'hnt_restrict_source_ip' => 'getHntRestrictSourceIp',
        'max_body_length' => 'getMaxBodyLength',
        'unknown_header' => 'getUnknownHeader',
        'malformed_request_line' => 'getMalformedRequestLine',
        'malformed_header_via' => 'getMalformedHeaderVia',
        'malformed_header_from' => 'getMalformedHeaderFrom',
        'malformed_header_to' => 'getMalformedHeaderTo',
        'malformed_header_call_id' => 'getMalformedHeaderCallId',
        'malformed_header_cseq' => 'getMalformedHeaderCseq',
        'malformed_header_rack' => 'getMalformedHeaderRack',
        'malformed_header_rseq' => 'getMalformedHeaderRseq',
        'malformed_header_contact' => 'getMalformedHeaderContact',
        'malformed_header_record_route' => 'getMalformedHeaderRecordRoute',
        'malformed_header_route' => 'getMalformedHeaderRoute',
        'malformed_header_expires' => 'getMalformedHeaderExpires',
        'malformed_header_content_type' => 'getMalformedHeaderContentType',
        'malformed_header_content_length' => 'getMalformedHeaderContentLength',
        'malformed_header_max_forwards' => 'getMalformedHeaderMaxForwards',
        'malformed_header_allow' => 'getMalformedHeaderAllow',
        'malformed_header_p_asserted_identity' => 'getMalformedHeaderPAssertedIdentity',
        'malformed_header_sdp_v' => 'getMalformedHeaderSdpV',
        'malformed_header_sdp_o' => 'getMalformedHeaderSdpO',
        'malformed_header_sdp_s' => 'getMalformedHeaderSdpS',
        'malformed_header_sdp_i' => 'getMalformedHeaderSdpI',
        'malformed_header_sdp_c' => 'getMalformedHeaderSdpC',
        'malformed_header_sdp_b' => 'getMalformedHeaderSdpB',
        'malformed_header_sdp_z' => 'getMalformedHeaderSdpZ',
        'malformed_header_sdp_k' => 'getMalformedHeaderSdpK',
        'malformed_header_sdp_a' => 'getMalformedHeaderSdpA',
        'malformed_header_sdp_t' => 'getMalformedHeaderSdpT',
        'malformed_header_sdp_r' => 'getMalformedHeaderSdpR',
        'malformed_header_sdp_m' => 'getMalformedHeaderSdpM',
        'provisional_invite_expiry_time' => 'getProvisionalInviteExpiryTime',
        'ips_rtp' => 'getIpsRtp',
        'ssl_mode' => 'getSslMode',
        'ssl_send_empty_frags' => 'getSslSendEmptyFrags',
        'ssl_client_renegotiation' => 'getSslClientRenegotiation',
        'ssl_algorithm' => 'getSslAlgorithm',
        'ssl_pfs' => 'getSslPfs',
        'ssl_min_version' => 'getSslMinVersion',
        'ssl_max_version' => 'getSslMaxVersion',
        'ssl_client_certificate' => 'getSslClientCertificate',
        'ssl_server_certificate' => 'getSslServerCertificate',
        'ssl_auth_client' => 'getSslAuthClient',
        'ssl_auth_server' => 'getSslAuthServer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const RTP_DISABLE = 'disable';
    const RTP_ENABLE = 'enable';
    const OPEN_REGISTER_PINHOLE_DISABLE = 'disable';
    const OPEN_REGISTER_PINHOLE_ENABLE = 'enable';
    const OPEN_CONTACT_PINHOLE_DISABLE = 'disable';
    const OPEN_CONTACT_PINHOLE_ENABLE = 'enable';
    const STRICT_REGISTER_DISABLE = 'disable';
    const STRICT_REGISTER_ENABLE = 'enable';
    const BLOCK_LONG_LINES_DISABLE = 'disable';
    const BLOCK_LONG_LINES_ENABLE = 'enable';
    const BLOCK_UNKNOWN_DISABLE = 'disable';
    const BLOCK_UNKNOWN_ENABLE = 'enable';
    const BLOCK_ACK_DISABLE = 'disable';
    const BLOCK_ACK_ENABLE = 'enable';
    const BLOCK_BYE_DISABLE = 'disable';
    const BLOCK_BYE_ENABLE = 'enable';
    const BLOCK_CANCEL_DISABLE = 'disable';
    const BLOCK_CANCEL_ENABLE = 'enable';
    const BLOCK_INFO_DISABLE = 'disable';
    const BLOCK_INFO_ENABLE = 'enable';
    const BLOCK_INVITE_DISABLE = 'disable';
    const BLOCK_INVITE_ENABLE = 'enable';
    const BLOCK_MESSAGE_DISABLE = 'disable';
    const BLOCK_MESSAGE_ENABLE = 'enable';
    const BLOCK_NOTIFY_DISABLE = 'disable';
    const BLOCK_NOTIFY_ENABLE = 'enable';
    const BLOCK_OPTIONS_DISABLE = 'disable';
    const BLOCK_OPTIONS_ENABLE = 'enable';
    const BLOCK_PRACK_DISABLE = 'disable';
    const BLOCK_PRACK_ENABLE = 'enable';
    const BLOCK_PUBLISH_DISABLE = 'disable';
    const BLOCK_PUBLISH_ENABLE = 'enable';
    const BLOCK_REFER_DISABLE = 'disable';
    const BLOCK_REFER_ENABLE = 'enable';
    const BLOCK_REGISTER_DISABLE = 'disable';
    const BLOCK_REGISTER_ENABLE = 'enable';
    const BLOCK_SUBSCRIBE_DISABLE = 'disable';
    const BLOCK_SUBSCRIBE_ENABLE = 'enable';
    const BLOCK_UPDATE_DISABLE = 'disable';
    const BLOCK_UPDATE_ENABLE = 'enable';
    const REGISTER_CONTACT_TRACE_DISABLE = 'disable';
    const REGISTER_CONTACT_TRACE_ENABLE = 'enable';
    const OPEN_VIA_PINHOLE_DISABLE = 'disable';
    const OPEN_VIA_PINHOLE_ENABLE = 'enable';
    const OPEN_RECORD_ROUTE_PINHOLE_DISABLE = 'disable';
    const OPEN_RECORD_ROUTE_PINHOLE_ENABLE = 'enable';
    const RFC2543_BRANCH_DISABLE = 'disable';
    const RFC2543_BRANCH_ENABLE = 'enable';
    const LOG_VIOLATIONS_DISABLE = 'disable';
    const LOG_VIOLATIONS_ENABLE = 'enable';
    const LOG_CALL_SUMMARY_DISABLE = 'disable';
    const LOG_CALL_SUMMARY_ENABLE = 'enable';
    const NAT_TRACE_DISABLE = 'disable';
    const NAT_TRACE_ENABLE = 'enable';
    const PRESERVE_OVERRIDE_DISABLE = 'disable';
    const PRESERVE_OVERRIDE_ENABLE = 'enable';
    const NO_SDP_FIXUP_DISABLE = 'disable';
    const NO_SDP_FIXUP_ENABLE = 'enable';
    const CONTACT_FIXUP_DISABLE = 'disable';
    const CONTACT_FIXUP_ENABLE = 'enable';
    const BLOCK_GEO_RED_OPTIONS_DISABLE = 'disable';
    const BLOCK_GEO_RED_OPTIONS_ENABLE = 'enable';
    const HOSTED_NAT_TRAVERSAL_DISABLE = 'disable';
    const HOSTED_NAT_TRAVERSAL_ENABLE = 'enable';
    const HNT_RESTRICT_SOURCE_IP_DISABLE = 'disable';
    const HNT_RESTRICT_SOURCE_IP_ENABLE = 'enable';
    const UNKNOWN_HEADER_DISCARD = 'discard';
    const UNKNOWN_HEADER_PASS = 'pass';
    const UNKNOWN_HEADER_RESPOND = 'respond';
    const MALFORMED_REQUEST_LINE_DISCARD = 'discard';
    const MALFORMED_REQUEST_LINE_PASS = 'pass';
    const MALFORMED_REQUEST_LINE_RESPOND = 'respond';
    const MALFORMED_HEADER_VIA_DISCARD = 'discard';
    const MALFORMED_HEADER_VIA_PASS = 'pass';
    const MALFORMED_HEADER_VIA_RESPOND = 'respond';
    const MALFORMED_HEADER_FROM_DISCARD = 'discard';
    const MALFORMED_HEADER_FROM_PASS = 'pass';
    const MALFORMED_HEADER_FROM_RESPOND = 'respond';
    const MALFORMED_HEADER_TO_DISCARD = 'discard';
    const MALFORMED_HEADER_TO_PASS = 'pass';
    const MALFORMED_HEADER_TO_RESPOND = 'respond';
    const MALFORMED_HEADER_CALL_ID_DISCARD = 'discard';
    const MALFORMED_HEADER_CALL_ID_PASS = 'pass';
    const MALFORMED_HEADER_CALL_ID_RESPOND = 'respond';
    const MALFORMED_HEADER_CSEQ_DISCARD = 'discard';
    const MALFORMED_HEADER_CSEQ_PASS = 'pass';
    const MALFORMED_HEADER_CSEQ_RESPOND = 'respond';
    const MALFORMED_HEADER_RACK_DISCARD = 'discard';
    const MALFORMED_HEADER_RACK_PASS = 'pass';
    const MALFORMED_HEADER_RACK_RESPOND = 'respond';
    const MALFORMED_HEADER_RSEQ_DISCARD = 'discard';
    const MALFORMED_HEADER_RSEQ_PASS = 'pass';
    const MALFORMED_HEADER_RSEQ_RESPOND = 'respond';
    const MALFORMED_HEADER_CONTACT_DISCARD = 'discard';
    const MALFORMED_HEADER_CONTACT_PASS = 'pass';
    const MALFORMED_HEADER_CONTACT_RESPOND = 'respond';
    const MALFORMED_HEADER_RECORD_ROUTE_DISCARD = 'discard';
    const MALFORMED_HEADER_RECORD_ROUTE_PASS = 'pass';
    const MALFORMED_HEADER_RECORD_ROUTE_RESPOND = 'respond';
    const MALFORMED_HEADER_ROUTE_DISCARD = 'discard';
    const MALFORMED_HEADER_ROUTE_PASS = 'pass';
    const MALFORMED_HEADER_ROUTE_RESPOND = 'respond';
    const MALFORMED_HEADER_EXPIRES_DISCARD = 'discard';
    const MALFORMED_HEADER_EXPIRES_PASS = 'pass';
    const MALFORMED_HEADER_EXPIRES_RESPOND = 'respond';
    const MALFORMED_HEADER_CONTENT_TYPE_DISCARD = 'discard';
    const MALFORMED_HEADER_CONTENT_TYPE_PASS = 'pass';
    const MALFORMED_HEADER_CONTENT_TYPE_RESPOND = 'respond';
    const MALFORMED_HEADER_CONTENT_LENGTH_DISCARD = 'discard';
    const MALFORMED_HEADER_CONTENT_LENGTH_PASS = 'pass';
    const MALFORMED_HEADER_CONTENT_LENGTH_RESPOND = 'respond';
    const MALFORMED_HEADER_MAX_FORWARDS_DISCARD = 'discard';
    const MALFORMED_HEADER_MAX_FORWARDS_PASS = 'pass';
    const MALFORMED_HEADER_MAX_FORWARDS_RESPOND = 'respond';
    const MALFORMED_HEADER_ALLOW_DISCARD = 'discard';
    const MALFORMED_HEADER_ALLOW_PASS = 'pass';
    const MALFORMED_HEADER_ALLOW_RESPOND = 'respond';
    const MALFORMED_HEADER_P_ASSERTED_IDENTITY_DISCARD = 'discard';
    const MALFORMED_HEADER_P_ASSERTED_IDENTITY_PASS = 'pass';
    const MALFORMED_HEADER_P_ASSERTED_IDENTITY_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_V_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_V_PASS = 'pass';
    const MALFORMED_HEADER_SDP_V_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_O_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_O_PASS = 'pass';
    const MALFORMED_HEADER_SDP_O_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_S_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_S_PASS = 'pass';
    const MALFORMED_HEADER_SDP_S_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_I_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_I_PASS = 'pass';
    const MALFORMED_HEADER_SDP_I_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_C_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_C_PASS = 'pass';
    const MALFORMED_HEADER_SDP_C_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_B_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_B_PASS = 'pass';
    const MALFORMED_HEADER_SDP_B_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_Z_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_Z_PASS = 'pass';
    const MALFORMED_HEADER_SDP_Z_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_K_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_K_PASS = 'pass';
    const MALFORMED_HEADER_SDP_K_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_A_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_A_PASS = 'pass';
    const MALFORMED_HEADER_SDP_A_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_T_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_T_PASS = 'pass';
    const MALFORMED_HEADER_SDP_T_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_R_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_R_PASS = 'pass';
    const MALFORMED_HEADER_SDP_R_RESPOND = 'respond';
    const MALFORMED_HEADER_SDP_M_DISCARD = 'discard';
    const MALFORMED_HEADER_SDP_M_PASS = 'pass';
    const MALFORMED_HEADER_SDP_M_RESPOND = 'respond';
    const IPS_RTP_DISABLE = 'disable';
    const IPS_RTP_ENABLE = 'enable';
    const SSL_MODE_OFF = 'off';
    const SSL_MODE_FULL = 'full';
    const SSL_SEND_EMPTY_FRAGS_ENABLE = 'enable';
    const SSL_SEND_EMPTY_FRAGS_DISABLE = 'disable';
    const SSL_CLIENT_RENEGOTIATION_ALLOW = 'allow';
    const SSL_CLIENT_RENEGOTIATION_DENY = 'deny';
    const SSL_CLIENT_RENEGOTIATION_SECURE = 'secure';
    const SSL_ALGORITHM_HIGH = 'high';
    const SSL_ALGORITHM_MEDIUM = 'medium';
    const SSL_ALGORITHM_LOW = 'low';
    const SSL_PFS__REQUIRE = 'require';
    const SSL_PFS_DENY = 'deny';
    const SSL_PFS_ALLOW = 'allow';
    const SSL_MIN_VERSION_SSL_3_0 = 'ssl-3.0';
    const SSL_MIN_VERSION_TLS_1_0 = 'tls-1.0';
    const SSL_MIN_VERSION_TLS_1_1 = 'tls-1.1';
    const SSL_MIN_VERSION_TLS_1_2 = 'tls-1.2';
    const SSL_MIN_VERSION_TLS_1_3 = 'tls-1.3';
    const SSL_MAX_VERSION_SSL_3_0 = 'ssl-3.0';
    const SSL_MAX_VERSION_TLS_1_0 = 'tls-1.0';
    const SSL_MAX_VERSION_TLS_1_1 = 'tls-1.1';
    const SSL_MAX_VERSION_TLS_1_2 = 'tls-1.2';
    const SSL_MAX_VERSION_TLS_1_3 = 'tls-1.3';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRtpAllowableValues()
    {
        return [
            self::RTP_DISABLE,
            self::RTP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenRegisterPinholeAllowableValues()
    {
        return [
            self::OPEN_REGISTER_PINHOLE_DISABLE,
            self::OPEN_REGISTER_PINHOLE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenContactPinholeAllowableValues()
    {
        return [
            self::OPEN_CONTACT_PINHOLE_DISABLE,
            self::OPEN_CONTACT_PINHOLE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictRegisterAllowableValues()
    {
        return [
            self::STRICT_REGISTER_DISABLE,
            self::STRICT_REGISTER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockLongLinesAllowableValues()
    {
        return [
            self::BLOCK_LONG_LINES_DISABLE,
            self::BLOCK_LONG_LINES_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockUnknownAllowableValues()
    {
        return [
            self::BLOCK_UNKNOWN_DISABLE,
            self::BLOCK_UNKNOWN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockAckAllowableValues()
    {
        return [
            self::BLOCK_ACK_DISABLE,
            self::BLOCK_ACK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockByeAllowableValues()
    {
        return [
            self::BLOCK_BYE_DISABLE,
            self::BLOCK_BYE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockCancelAllowableValues()
    {
        return [
            self::BLOCK_CANCEL_DISABLE,
            self::BLOCK_CANCEL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockInfoAllowableValues()
    {
        return [
            self::BLOCK_INFO_DISABLE,
            self::BLOCK_INFO_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockInviteAllowableValues()
    {
        return [
            self::BLOCK_INVITE_DISABLE,
            self::BLOCK_INVITE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockMessageAllowableValues()
    {
        return [
            self::BLOCK_MESSAGE_DISABLE,
            self::BLOCK_MESSAGE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockNotifyAllowableValues()
    {
        return [
            self::BLOCK_NOTIFY_DISABLE,
            self::BLOCK_NOTIFY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockOptionsAllowableValues()
    {
        return [
            self::BLOCK_OPTIONS_DISABLE,
            self::BLOCK_OPTIONS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockPrackAllowableValues()
    {
        return [
            self::BLOCK_PRACK_DISABLE,
            self::BLOCK_PRACK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockPublishAllowableValues()
    {
        return [
            self::BLOCK_PUBLISH_DISABLE,
            self::BLOCK_PUBLISH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockReferAllowableValues()
    {
        return [
            self::BLOCK_REFER_DISABLE,
            self::BLOCK_REFER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockRegisterAllowableValues()
    {
        return [
            self::BLOCK_REGISTER_DISABLE,
            self::BLOCK_REGISTER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockSubscribeAllowableValues()
    {
        return [
            self::BLOCK_SUBSCRIBE_DISABLE,
            self::BLOCK_SUBSCRIBE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockUpdateAllowableValues()
    {
        return [
            self::BLOCK_UPDATE_DISABLE,
            self::BLOCK_UPDATE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegisterContactTraceAllowableValues()
    {
        return [
            self::REGISTER_CONTACT_TRACE_DISABLE,
            self::REGISTER_CONTACT_TRACE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenViaPinholeAllowableValues()
    {
        return [
            self::OPEN_VIA_PINHOLE_DISABLE,
            self::OPEN_VIA_PINHOLE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenRecordRoutePinholeAllowableValues()
    {
        return [
            self::OPEN_RECORD_ROUTE_PINHOLE_DISABLE,
            self::OPEN_RECORD_ROUTE_PINHOLE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRfc2543BranchAllowableValues()
    {
        return [
            self::RFC2543_BRANCH_DISABLE,
            self::RFC2543_BRANCH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogViolationsAllowableValues()
    {
        return [
            self::LOG_VIOLATIONS_DISABLE,
            self::LOG_VIOLATIONS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogCallSummaryAllowableValues()
    {
        return [
            self::LOG_CALL_SUMMARY_DISABLE,
            self::LOG_CALL_SUMMARY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNatTraceAllowableValues()
    {
        return [
            self::NAT_TRACE_DISABLE,
            self::NAT_TRACE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreserveOverrideAllowableValues()
    {
        return [
            self::PRESERVE_OVERRIDE_DISABLE,
            self::PRESERVE_OVERRIDE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNoSdpFixupAllowableValues()
    {
        return [
            self::NO_SDP_FIXUP_DISABLE,
            self::NO_SDP_FIXUP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactFixupAllowableValues()
    {
        return [
            self::CONTACT_FIXUP_DISABLE,
            self::CONTACT_FIXUP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockGeoRedOptionsAllowableValues()
    {
        return [
            self::BLOCK_GEO_RED_OPTIONS_DISABLE,
            self::BLOCK_GEO_RED_OPTIONS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostedNatTraversalAllowableValues()
    {
        return [
            self::HOSTED_NAT_TRAVERSAL_DISABLE,
            self::HOSTED_NAT_TRAVERSAL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHntRestrictSourceIpAllowableValues()
    {
        return [
            self::HNT_RESTRICT_SOURCE_IP_DISABLE,
            self::HNT_RESTRICT_SOURCE_IP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownHeaderAllowableValues()
    {
        return [
            self::UNKNOWN_HEADER_DISCARD,
            self::UNKNOWN_HEADER_PASS,
            self::UNKNOWN_HEADER_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedRequestLineAllowableValues()
    {
        return [
            self::MALFORMED_REQUEST_LINE_DISCARD,
            self::MALFORMED_REQUEST_LINE_PASS,
            self::MALFORMED_REQUEST_LINE_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderViaAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_VIA_DISCARD,
            self::MALFORMED_HEADER_VIA_PASS,
            self::MALFORMED_HEADER_VIA_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderFromAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_FROM_DISCARD,
            self::MALFORMED_HEADER_FROM_PASS,
            self::MALFORMED_HEADER_FROM_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderToAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_TO_DISCARD,
            self::MALFORMED_HEADER_TO_PASS,
            self::MALFORMED_HEADER_TO_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderCallIdAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_CALL_ID_DISCARD,
            self::MALFORMED_HEADER_CALL_ID_PASS,
            self::MALFORMED_HEADER_CALL_ID_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderCseqAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_CSEQ_DISCARD,
            self::MALFORMED_HEADER_CSEQ_PASS,
            self::MALFORMED_HEADER_CSEQ_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderRackAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_RACK_DISCARD,
            self::MALFORMED_HEADER_RACK_PASS,
            self::MALFORMED_HEADER_RACK_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderRseqAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_RSEQ_DISCARD,
            self::MALFORMED_HEADER_RSEQ_PASS,
            self::MALFORMED_HEADER_RSEQ_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderContactAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_CONTACT_DISCARD,
            self::MALFORMED_HEADER_CONTACT_PASS,
            self::MALFORMED_HEADER_CONTACT_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderRecordRouteAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_RECORD_ROUTE_DISCARD,
            self::MALFORMED_HEADER_RECORD_ROUTE_PASS,
            self::MALFORMED_HEADER_RECORD_ROUTE_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderRouteAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_ROUTE_DISCARD,
            self::MALFORMED_HEADER_ROUTE_PASS,
            self::MALFORMED_HEADER_ROUTE_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderExpiresAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_EXPIRES_DISCARD,
            self::MALFORMED_HEADER_EXPIRES_PASS,
            self::MALFORMED_HEADER_EXPIRES_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderContentTypeAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_CONTENT_TYPE_DISCARD,
            self::MALFORMED_HEADER_CONTENT_TYPE_PASS,
            self::MALFORMED_HEADER_CONTENT_TYPE_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderContentLengthAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_CONTENT_LENGTH_DISCARD,
            self::MALFORMED_HEADER_CONTENT_LENGTH_PASS,
            self::MALFORMED_HEADER_CONTENT_LENGTH_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderMaxForwardsAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_MAX_FORWARDS_DISCARD,
            self::MALFORMED_HEADER_MAX_FORWARDS_PASS,
            self::MALFORMED_HEADER_MAX_FORWARDS_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderAllowAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_ALLOW_DISCARD,
            self::MALFORMED_HEADER_ALLOW_PASS,
            self::MALFORMED_HEADER_ALLOW_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderPAssertedIdentityAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_P_ASSERTED_IDENTITY_DISCARD,
            self::MALFORMED_HEADER_P_ASSERTED_IDENTITY_PASS,
            self::MALFORMED_HEADER_P_ASSERTED_IDENTITY_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpVAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_V_DISCARD,
            self::MALFORMED_HEADER_SDP_V_PASS,
            self::MALFORMED_HEADER_SDP_V_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpOAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_O_DISCARD,
            self::MALFORMED_HEADER_SDP_O_PASS,
            self::MALFORMED_HEADER_SDP_O_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpSAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_S_DISCARD,
            self::MALFORMED_HEADER_SDP_S_PASS,
            self::MALFORMED_HEADER_SDP_S_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpIAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_I_DISCARD,
            self::MALFORMED_HEADER_SDP_I_PASS,
            self::MALFORMED_HEADER_SDP_I_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpCAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_C_DISCARD,
            self::MALFORMED_HEADER_SDP_C_PASS,
            self::MALFORMED_HEADER_SDP_C_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpBAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_B_DISCARD,
            self::MALFORMED_HEADER_SDP_B_PASS,
            self::MALFORMED_HEADER_SDP_B_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpZAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_Z_DISCARD,
            self::MALFORMED_HEADER_SDP_Z_PASS,
            self::MALFORMED_HEADER_SDP_Z_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpKAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_K_DISCARD,
            self::MALFORMED_HEADER_SDP_K_PASS,
            self::MALFORMED_HEADER_SDP_K_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpAAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_A_DISCARD,
            self::MALFORMED_HEADER_SDP_A_PASS,
            self::MALFORMED_HEADER_SDP_A_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpTAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_T_DISCARD,
            self::MALFORMED_HEADER_SDP_T_PASS,
            self::MALFORMED_HEADER_SDP_T_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpRAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_R_DISCARD,
            self::MALFORMED_HEADER_SDP_R_PASS,
            self::MALFORMED_HEADER_SDP_R_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedHeaderSdpMAllowableValues()
    {
        return [
            self::MALFORMED_HEADER_SDP_M_DISCARD,
            self::MALFORMED_HEADER_SDP_M_PASS,
            self::MALFORMED_HEADER_SDP_M_RESPOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsRtpAllowableValues()
    {
        return [
            self::IPS_RTP_DISABLE,
            self::IPS_RTP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslModeAllowableValues()
    {
        return [
            self::SSL_MODE_OFF,
            self::SSL_MODE_FULL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslSendEmptyFragsAllowableValues()
    {
        return [
            self::SSL_SEND_EMPTY_FRAGS_ENABLE,
            self::SSL_SEND_EMPTY_FRAGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslClientRenegotiationAllowableValues()
    {
        return [
            self::SSL_CLIENT_RENEGOTIATION_ALLOW,
            self::SSL_CLIENT_RENEGOTIATION_DENY,
            self::SSL_CLIENT_RENEGOTIATION_SECURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAlgorithmAllowableValues()
    {
        return [
            self::SSL_ALGORITHM_HIGH,
            self::SSL_ALGORITHM_MEDIUM,
            self::SSL_ALGORITHM_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslPfsAllowableValues()
    {
        return [
            self::SSL_PFS__REQUIRE,
            self::SSL_PFS_DENY,
            self::SSL_PFS_ALLOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinVersionAllowableValues()
    {
        return [
            self::SSL_MIN_VERSION_SSL_3_0,
            self::SSL_MIN_VERSION_TLS_1_0,
            self::SSL_MIN_VERSION_TLS_1_1,
            self::SSL_MIN_VERSION_TLS_1_2,
            self::SSL_MIN_VERSION_TLS_1_3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMaxVersionAllowableValues()
    {
        return [
            self::SSL_MAX_VERSION_SSL_3_0,
            self::SSL_MAX_VERSION_TLS_1_0,
            self::SSL_MAX_VERSION_TLS_1_1,
            self::SSL_MAX_VERSION_TLS_1_2,
            self::SSL_MAX_VERSION_TLS_1_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['rtp'] = $data['rtp'] ?? null;
        $this->container['nat_port_range'] = $data['nat_port_range'] ?? null;
        $this->container['open_register_pinhole'] = $data['open_register_pinhole'] ?? null;
        $this->container['open_contact_pinhole'] = $data['open_contact_pinhole'] ?? null;
        $this->container['strict_register'] = $data['strict_register'] ?? null;
        $this->container['register_rate'] = $data['register_rate'] ?? null;
        $this->container['invite_rate'] = $data['invite_rate'] ?? null;
        $this->container['max_dialogs'] = $data['max_dialogs'] ?? null;
        $this->container['max_line_length'] = $data['max_line_length'] ?? null;
        $this->container['block_long_lines'] = $data['block_long_lines'] ?? null;
        $this->container['block_unknown'] = $data['block_unknown'] ?? null;
        $this->container['call_keepalive'] = $data['call_keepalive'] ?? null;
        $this->container['block_ack'] = $data['block_ack'] ?? null;
        $this->container['block_bye'] = $data['block_bye'] ?? null;
        $this->container['block_cancel'] = $data['block_cancel'] ?? null;
        $this->container['block_info'] = $data['block_info'] ?? null;
        $this->container['block_invite'] = $data['block_invite'] ?? null;
        $this->container['block_message'] = $data['block_message'] ?? null;
        $this->container['block_notify'] = $data['block_notify'] ?? null;
        $this->container['block_options'] = $data['block_options'] ?? null;
        $this->container['block_prack'] = $data['block_prack'] ?? null;
        $this->container['block_publish'] = $data['block_publish'] ?? null;
        $this->container['block_refer'] = $data['block_refer'] ?? null;
        $this->container['block_register'] = $data['block_register'] ?? null;
        $this->container['block_subscribe'] = $data['block_subscribe'] ?? null;
        $this->container['block_update'] = $data['block_update'] ?? null;
        $this->container['register_contact_trace'] = $data['register_contact_trace'] ?? null;
        $this->container['open_via_pinhole'] = $data['open_via_pinhole'] ?? null;
        $this->container['open_record_route_pinhole'] = $data['open_record_route_pinhole'] ?? null;
        $this->container['rfc2543_branch'] = $data['rfc2543_branch'] ?? null;
        $this->container['log_violations'] = $data['log_violations'] ?? null;
        $this->container['log_call_summary'] = $data['log_call_summary'] ?? null;
        $this->container['nat_trace'] = $data['nat_trace'] ?? null;
        $this->container['subscribe_rate'] = $data['subscribe_rate'] ?? null;
        $this->container['message_rate'] = $data['message_rate'] ?? null;
        $this->container['notify_rate'] = $data['notify_rate'] ?? null;
        $this->container['refer_rate'] = $data['refer_rate'] ?? null;
        $this->container['update_rate'] = $data['update_rate'] ?? null;
        $this->container['options_rate'] = $data['options_rate'] ?? null;
        $this->container['ack_rate'] = $data['ack_rate'] ?? null;
        $this->container['prack_rate'] = $data['prack_rate'] ?? null;
        $this->container['info_rate'] = $data['info_rate'] ?? null;
        $this->container['publish_rate'] = $data['publish_rate'] ?? null;
        $this->container['bye_rate'] = $data['bye_rate'] ?? null;
        $this->container['cancel_rate'] = $data['cancel_rate'] ?? null;
        $this->container['preserve_override'] = $data['preserve_override'] ?? null;
        $this->container['no_sdp_fixup'] = $data['no_sdp_fixup'] ?? null;
        $this->container['contact_fixup'] = $data['contact_fixup'] ?? null;
        $this->container['max_idle_dialogs'] = $data['max_idle_dialogs'] ?? null;
        $this->container['block_geo_red_options'] = $data['block_geo_red_options'] ?? null;
        $this->container['hosted_nat_traversal'] = $data['hosted_nat_traversal'] ?? null;
        $this->container['hnt_restrict_source_ip'] = $data['hnt_restrict_source_ip'] ?? null;
        $this->container['max_body_length'] = $data['max_body_length'] ?? null;
        $this->container['unknown_header'] = $data['unknown_header'] ?? null;
        $this->container['malformed_request_line'] = $data['malformed_request_line'] ?? null;
        $this->container['malformed_header_via'] = $data['malformed_header_via'] ?? null;
        $this->container['malformed_header_from'] = $data['malformed_header_from'] ?? null;
        $this->container['malformed_header_to'] = $data['malformed_header_to'] ?? null;
        $this->container['malformed_header_call_id'] = $data['malformed_header_call_id'] ?? null;
        $this->container['malformed_header_cseq'] = $data['malformed_header_cseq'] ?? null;
        $this->container['malformed_header_rack'] = $data['malformed_header_rack'] ?? null;
        $this->container['malformed_header_rseq'] = $data['malformed_header_rseq'] ?? null;
        $this->container['malformed_header_contact'] = $data['malformed_header_contact'] ?? null;
        $this->container['malformed_header_record_route'] = $data['malformed_header_record_route'] ?? null;
        $this->container['malformed_header_route'] = $data['malformed_header_route'] ?? null;
        $this->container['malformed_header_expires'] = $data['malformed_header_expires'] ?? null;
        $this->container['malformed_header_content_type'] = $data['malformed_header_content_type'] ?? null;
        $this->container['malformed_header_content_length'] = $data['malformed_header_content_length'] ?? null;
        $this->container['malformed_header_max_forwards'] = $data['malformed_header_max_forwards'] ?? null;
        $this->container['malformed_header_allow'] = $data['malformed_header_allow'] ?? null;
        $this->container['malformed_header_p_asserted_identity'] = $data['malformed_header_p_asserted_identity'] ?? null;
        $this->container['malformed_header_sdp_v'] = $data['malformed_header_sdp_v'] ?? null;
        $this->container['malformed_header_sdp_o'] = $data['malformed_header_sdp_o'] ?? null;
        $this->container['malformed_header_sdp_s'] = $data['malformed_header_sdp_s'] ?? null;
        $this->container['malformed_header_sdp_i'] = $data['malformed_header_sdp_i'] ?? null;
        $this->container['malformed_header_sdp_c'] = $data['malformed_header_sdp_c'] ?? null;
        $this->container['malformed_header_sdp_b'] = $data['malformed_header_sdp_b'] ?? null;
        $this->container['malformed_header_sdp_z'] = $data['malformed_header_sdp_z'] ?? null;
        $this->container['malformed_header_sdp_k'] = $data['malformed_header_sdp_k'] ?? null;
        $this->container['malformed_header_sdp_a'] = $data['malformed_header_sdp_a'] ?? null;
        $this->container['malformed_header_sdp_t'] = $data['malformed_header_sdp_t'] ?? null;
        $this->container['malformed_header_sdp_r'] = $data['malformed_header_sdp_r'] ?? null;
        $this->container['malformed_header_sdp_m'] = $data['malformed_header_sdp_m'] ?? null;
        $this->container['provisional_invite_expiry_time'] = $data['provisional_invite_expiry_time'] ?? null;
        $this->container['ips_rtp'] = $data['ips_rtp'] ?? null;
        $this->container['ssl_mode'] = $data['ssl_mode'] ?? null;
        $this->container['ssl_send_empty_frags'] = $data['ssl_send_empty_frags'] ?? null;
        $this->container['ssl_client_renegotiation'] = $data['ssl_client_renegotiation'] ?? null;
        $this->container['ssl_algorithm'] = $data['ssl_algorithm'] ?? null;
        $this->container['ssl_pfs'] = $data['ssl_pfs'] ?? null;
        $this->container['ssl_min_version'] = $data['ssl_min_version'] ?? null;
        $this->container['ssl_max_version'] = $data['ssl_max_version'] ?? null;
        $this->container['ssl_client_certificate'] = $data['ssl_client_certificate'] ?? null;
        $this->container['ssl_server_certificate'] = $data['ssl_server_certificate'] ?? null;
        $this->container['ssl_auth_client'] = $data['ssl_auth_client'] ?? null;
        $this->container['ssl_auth_server'] = $data['ssl_auth_server'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRtpAllowableValues();
        if (!is_null($this->container['rtp']) && !in_array($this->container['rtp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rtp', must be one of '%s'",
                $this->container['rtp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenRegisterPinholeAllowableValues();
        if (!is_null($this->container['open_register_pinhole']) && !in_array($this->container['open_register_pinhole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'open_register_pinhole', must be one of '%s'",
                $this->container['open_register_pinhole'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenContactPinholeAllowableValues();
        if (!is_null($this->container['open_contact_pinhole']) && !in_array($this->container['open_contact_pinhole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'open_contact_pinhole', must be one of '%s'",
                $this->container['open_contact_pinhole'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictRegisterAllowableValues();
        if (!is_null($this->container['strict_register']) && !in_array($this->container['strict_register'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_register', must be one of '%s'",
                $this->container['strict_register'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['register_rate']) && ($this->container['register_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'register_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['register_rate']) && ($this->container['register_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'register_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invite_rate']) && ($this->container['invite_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'invite_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['invite_rate']) && ($this->container['invite_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'invite_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_dialogs']) && ($this->container['max_dialogs'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_dialogs', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_dialogs']) && ($this->container['max_dialogs'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_dialogs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_line_length']) && ($this->container['max_line_length'] > 4096)) {
            $invalidProperties[] = "invalid value for 'max_line_length', must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['max_line_length']) && ($this->container['max_line_length'] < 78)) {
            $invalidProperties[] = "invalid value for 'max_line_length', must be bigger than or equal to 78.";
        }

        $allowedValues = $this->getBlockLongLinesAllowableValues();
        if (!is_null($this->container['block_long_lines']) && !in_array($this->container['block_long_lines'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_long_lines', must be one of '%s'",
                $this->container['block_long_lines'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockUnknownAllowableValues();
        if (!is_null($this->container['block_unknown']) && !in_array($this->container['block_unknown'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_unknown', must be one of '%s'",
                $this->container['block_unknown'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['call_keepalive']) && ($this->container['call_keepalive'] > 10080)) {
            $invalidProperties[] = "invalid value for 'call_keepalive', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['call_keepalive']) && ($this->container['call_keepalive'] < 0)) {
            $invalidProperties[] = "invalid value for 'call_keepalive', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBlockAckAllowableValues();
        if (!is_null($this->container['block_ack']) && !in_array($this->container['block_ack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_ack', must be one of '%s'",
                $this->container['block_ack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockByeAllowableValues();
        if (!is_null($this->container['block_bye']) && !in_array($this->container['block_bye'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_bye', must be one of '%s'",
                $this->container['block_bye'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockCancelAllowableValues();
        if (!is_null($this->container['block_cancel']) && !in_array($this->container['block_cancel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_cancel', must be one of '%s'",
                $this->container['block_cancel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockInfoAllowableValues();
        if (!is_null($this->container['block_info']) && !in_array($this->container['block_info'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_info', must be one of '%s'",
                $this->container['block_info'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockInviteAllowableValues();
        if (!is_null($this->container['block_invite']) && !in_array($this->container['block_invite'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_invite', must be one of '%s'",
                $this->container['block_invite'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockMessageAllowableValues();
        if (!is_null($this->container['block_message']) && !in_array($this->container['block_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_message', must be one of '%s'",
                $this->container['block_message'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockNotifyAllowableValues();
        if (!is_null($this->container['block_notify']) && !in_array($this->container['block_notify'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_notify', must be one of '%s'",
                $this->container['block_notify'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockOptionsAllowableValues();
        if (!is_null($this->container['block_options']) && !in_array($this->container['block_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_options', must be one of '%s'",
                $this->container['block_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockPrackAllowableValues();
        if (!is_null($this->container['block_prack']) && !in_array($this->container['block_prack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_prack', must be one of '%s'",
                $this->container['block_prack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockPublishAllowableValues();
        if (!is_null($this->container['block_publish']) && !in_array($this->container['block_publish'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_publish', must be one of '%s'",
                $this->container['block_publish'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockReferAllowableValues();
        if (!is_null($this->container['block_refer']) && !in_array($this->container['block_refer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_refer', must be one of '%s'",
                $this->container['block_refer'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockRegisterAllowableValues();
        if (!is_null($this->container['block_register']) && !in_array($this->container['block_register'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_register', must be one of '%s'",
                $this->container['block_register'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockSubscribeAllowableValues();
        if (!is_null($this->container['block_subscribe']) && !in_array($this->container['block_subscribe'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_subscribe', must be one of '%s'",
                $this->container['block_subscribe'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockUpdateAllowableValues();
        if (!is_null($this->container['block_update']) && !in_array($this->container['block_update'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_update', must be one of '%s'",
                $this->container['block_update'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRegisterContactTraceAllowableValues();
        if (!is_null($this->container['register_contact_trace']) && !in_array($this->container['register_contact_trace'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'register_contact_trace', must be one of '%s'",
                $this->container['register_contact_trace'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenViaPinholeAllowableValues();
        if (!is_null($this->container['open_via_pinhole']) && !in_array($this->container['open_via_pinhole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'open_via_pinhole', must be one of '%s'",
                $this->container['open_via_pinhole'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenRecordRoutePinholeAllowableValues();
        if (!is_null($this->container['open_record_route_pinhole']) && !in_array($this->container['open_record_route_pinhole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'open_record_route_pinhole', must be one of '%s'",
                $this->container['open_record_route_pinhole'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRfc2543BranchAllowableValues();
        if (!is_null($this->container['rfc2543_branch']) && !in_array($this->container['rfc2543_branch'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rfc2543_branch', must be one of '%s'",
                $this->container['rfc2543_branch'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogViolationsAllowableValues();
        if (!is_null($this->container['log_violations']) && !in_array($this->container['log_violations'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_violations', must be one of '%s'",
                $this->container['log_violations'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogCallSummaryAllowableValues();
        if (!is_null($this->container['log_call_summary']) && !in_array($this->container['log_call_summary'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_call_summary', must be one of '%s'",
                $this->container['log_call_summary'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNatTraceAllowableValues();
        if (!is_null($this->container['nat_trace']) && !in_array($this->container['nat_trace'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nat_trace', must be one of '%s'",
                $this->container['nat_trace'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['subscribe_rate']) && ($this->container['subscribe_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'subscribe_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['subscribe_rate']) && ($this->container['subscribe_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'subscribe_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['message_rate']) && ($this->container['message_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'message_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['message_rate']) && ($this->container['message_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'message_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['notify_rate']) && ($this->container['notify_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'notify_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['notify_rate']) && ($this->container['notify_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'notify_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['refer_rate']) && ($this->container['refer_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'refer_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['refer_rate']) && ($this->container['refer_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'refer_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['update_rate']) && ($this->container['update_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'update_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['update_rate']) && ($this->container['update_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'update_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['options_rate']) && ($this->container['options_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'options_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['options_rate']) && ($this->container['options_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'options_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ack_rate']) && ($this->container['ack_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'ack_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['ack_rate']) && ($this->container['ack_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'ack_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['prack_rate']) && ($this->container['prack_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'prack_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['prack_rate']) && ($this->container['prack_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'prack_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['info_rate']) && ($this->container['info_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'info_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['info_rate']) && ($this->container['info_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'info_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['publish_rate']) && ($this->container['publish_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'publish_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['publish_rate']) && ($this->container['publish_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'publish_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bye_rate']) && ($this->container['bye_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'bye_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['bye_rate']) && ($this->container['bye_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'bye_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cancel_rate']) && ($this->container['cancel_rate'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'cancel_rate', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['cancel_rate']) && ($this->container['cancel_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'cancel_rate', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPreserveOverrideAllowableValues();
        if (!is_null($this->container['preserve_override']) && !in_array($this->container['preserve_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preserve_override', must be one of '%s'",
                $this->container['preserve_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNoSdpFixupAllowableValues();
        if (!is_null($this->container['no_sdp_fixup']) && !in_array($this->container['no_sdp_fixup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'no_sdp_fixup', must be one of '%s'",
                $this->container['no_sdp_fixup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContactFixupAllowableValues();
        if (!is_null($this->container['contact_fixup']) && !in_array($this->container['contact_fixup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contact_fixup', must be one of '%s'",
                $this->container['contact_fixup'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_idle_dialogs']) && ($this->container['max_idle_dialogs'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_idle_dialogs', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_idle_dialogs']) && ($this->container['max_idle_dialogs'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_idle_dialogs', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBlockGeoRedOptionsAllowableValues();
        if (!is_null($this->container['block_geo_red_options']) && !in_array($this->container['block_geo_red_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_geo_red_options', must be one of '%s'",
                $this->container['block_geo_red_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHostedNatTraversalAllowableValues();
        if (!is_null($this->container['hosted_nat_traversal']) && !in_array($this->container['hosted_nat_traversal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hosted_nat_traversal', must be one of '%s'",
                $this->container['hosted_nat_traversal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHntRestrictSourceIpAllowableValues();
        if (!is_null($this->container['hnt_restrict_source_ip']) && !in_array($this->container['hnt_restrict_source_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hnt_restrict_source_ip', must be one of '%s'",
                $this->container['hnt_restrict_source_ip'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_body_length']) && ($this->container['max_body_length'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_body_length', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_body_length']) && ($this->container['max_body_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_body_length', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getUnknownHeaderAllowableValues();
        if (!is_null($this->container['unknown_header']) && !in_array($this->container['unknown_header'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_header', must be one of '%s'",
                $this->container['unknown_header'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedRequestLineAllowableValues();
        if (!is_null($this->container['malformed_request_line']) && !in_array($this->container['malformed_request_line'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_request_line', must be one of '%s'",
                $this->container['malformed_request_line'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderViaAllowableValues();
        if (!is_null($this->container['malformed_header_via']) && !in_array($this->container['malformed_header_via'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_via', must be one of '%s'",
                $this->container['malformed_header_via'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderFromAllowableValues();
        if (!is_null($this->container['malformed_header_from']) && !in_array($this->container['malformed_header_from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_from', must be one of '%s'",
                $this->container['malformed_header_from'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderToAllowableValues();
        if (!is_null($this->container['malformed_header_to']) && !in_array($this->container['malformed_header_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_to', must be one of '%s'",
                $this->container['malformed_header_to'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderCallIdAllowableValues();
        if (!is_null($this->container['malformed_header_call_id']) && !in_array($this->container['malformed_header_call_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_call_id', must be one of '%s'",
                $this->container['malformed_header_call_id'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderCseqAllowableValues();
        if (!is_null($this->container['malformed_header_cseq']) && !in_array($this->container['malformed_header_cseq'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_cseq', must be one of '%s'",
                $this->container['malformed_header_cseq'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderRackAllowableValues();
        if (!is_null($this->container['malformed_header_rack']) && !in_array($this->container['malformed_header_rack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_rack', must be one of '%s'",
                $this->container['malformed_header_rack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderRseqAllowableValues();
        if (!is_null($this->container['malformed_header_rseq']) && !in_array($this->container['malformed_header_rseq'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_rseq', must be one of '%s'",
                $this->container['malformed_header_rseq'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderContactAllowableValues();
        if (!is_null($this->container['malformed_header_contact']) && !in_array($this->container['malformed_header_contact'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_contact', must be one of '%s'",
                $this->container['malformed_header_contact'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderRecordRouteAllowableValues();
        if (!is_null($this->container['malformed_header_record_route']) && !in_array($this->container['malformed_header_record_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_record_route', must be one of '%s'",
                $this->container['malformed_header_record_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderRouteAllowableValues();
        if (!is_null($this->container['malformed_header_route']) && !in_array($this->container['malformed_header_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_route', must be one of '%s'",
                $this->container['malformed_header_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderExpiresAllowableValues();
        if (!is_null($this->container['malformed_header_expires']) && !in_array($this->container['malformed_header_expires'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_expires', must be one of '%s'",
                $this->container['malformed_header_expires'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderContentTypeAllowableValues();
        if (!is_null($this->container['malformed_header_content_type']) && !in_array($this->container['malformed_header_content_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_content_type', must be one of '%s'",
                $this->container['malformed_header_content_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderContentLengthAllowableValues();
        if (!is_null($this->container['malformed_header_content_length']) && !in_array($this->container['malformed_header_content_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_content_length', must be one of '%s'",
                $this->container['malformed_header_content_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderMaxForwardsAllowableValues();
        if (!is_null($this->container['malformed_header_max_forwards']) && !in_array($this->container['malformed_header_max_forwards'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_max_forwards', must be one of '%s'",
                $this->container['malformed_header_max_forwards'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderAllowAllowableValues();
        if (!is_null($this->container['malformed_header_allow']) && !in_array($this->container['malformed_header_allow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_allow', must be one of '%s'",
                $this->container['malformed_header_allow'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderPAssertedIdentityAllowableValues();
        if (!is_null($this->container['malformed_header_p_asserted_identity']) && !in_array($this->container['malformed_header_p_asserted_identity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_p_asserted_identity', must be one of '%s'",
                $this->container['malformed_header_p_asserted_identity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpVAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_v']) && !in_array($this->container['malformed_header_sdp_v'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_v', must be one of '%s'",
                $this->container['malformed_header_sdp_v'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpOAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_o']) && !in_array($this->container['malformed_header_sdp_o'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_o', must be one of '%s'",
                $this->container['malformed_header_sdp_o'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpSAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_s']) && !in_array($this->container['malformed_header_sdp_s'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_s', must be one of '%s'",
                $this->container['malformed_header_sdp_s'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpIAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_i']) && !in_array($this->container['malformed_header_sdp_i'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_i', must be one of '%s'",
                $this->container['malformed_header_sdp_i'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpCAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_c']) && !in_array($this->container['malformed_header_sdp_c'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_c', must be one of '%s'",
                $this->container['malformed_header_sdp_c'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpBAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_b']) && !in_array($this->container['malformed_header_sdp_b'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_b', must be one of '%s'",
                $this->container['malformed_header_sdp_b'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpZAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_z']) && !in_array($this->container['malformed_header_sdp_z'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_z', must be one of '%s'",
                $this->container['malformed_header_sdp_z'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpKAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_k']) && !in_array($this->container['malformed_header_sdp_k'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_k', must be one of '%s'",
                $this->container['malformed_header_sdp_k'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpAAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_a']) && !in_array($this->container['malformed_header_sdp_a'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_a', must be one of '%s'",
                $this->container['malformed_header_sdp_a'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpTAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_t']) && !in_array($this->container['malformed_header_sdp_t'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_t', must be one of '%s'",
                $this->container['malformed_header_sdp_t'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpRAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_r']) && !in_array($this->container['malformed_header_sdp_r'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_r', must be one of '%s'",
                $this->container['malformed_header_sdp_r'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedHeaderSdpMAllowableValues();
        if (!is_null($this->container['malformed_header_sdp_m']) && !in_array($this->container['malformed_header_sdp_m'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed_header_sdp_m', must be one of '%s'",
                $this->container['malformed_header_sdp_m'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['provisional_invite_expiry_time']) && ($this->container['provisional_invite_expiry_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'provisional_invite_expiry_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['provisional_invite_expiry_time']) && ($this->container['provisional_invite_expiry_time'] < 10)) {
            $invalidProperties[] = "invalid value for 'provisional_invite_expiry_time', must be bigger than or equal to 10.";
        }

        $allowedValues = $this->getIpsRtpAllowableValues();
        if (!is_null($this->container['ips_rtp']) && !in_array($this->container['ips_rtp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ips_rtp', must be one of '%s'",
                $this->container['ips_rtp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslModeAllowableValues();
        if (!is_null($this->container['ssl_mode']) && !in_array($this->container['ssl_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_mode', must be one of '%s'",
                $this->container['ssl_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslSendEmptyFragsAllowableValues();
        if (!is_null($this->container['ssl_send_empty_frags']) && !in_array($this->container['ssl_send_empty_frags'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_send_empty_frags', must be one of '%s'",
                $this->container['ssl_send_empty_frags'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslClientRenegotiationAllowableValues();
        if (!is_null($this->container['ssl_client_renegotiation']) && !in_array($this->container['ssl_client_renegotiation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_client_renegotiation', must be one of '%s'",
                $this->container['ssl_client_renegotiation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($this->container['ssl_algorithm']) && !in_array($this->container['ssl_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                $this->container['ssl_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslPfsAllowableValues();
        if (!is_null($this->container['ssl_pfs']) && !in_array($this->container['ssl_pfs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_pfs', must be one of '%s'",
                $this->container['ssl_pfs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinVersionAllowableValues();
        if (!is_null($this->container['ssl_min_version']) && !in_array($this->container['ssl_min_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_version', must be one of '%s'",
                $this->container['ssl_min_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMaxVersionAllowableValues();
        if (!is_null($this->container['ssl_max_version']) && !in_array($this->container['ssl_max_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_max_version', must be one of '%s'",
                $this->container['ssl_max_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssl_client_certificate']) && (mb_strlen($this->container['ssl_client_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_client_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ssl_server_certificate']) && (mb_strlen($this->container['ssl_server_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_server_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ssl_auth_client']) && (mb_strlen($this->container['ssl_auth_client']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_auth_client', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ssl_auth_server']) && (mb_strlen($this->container['ssl_auth_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_auth_server', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable SIP.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rtp
     *
     * @return string|null
     */
    public function getRtp()
    {
        return $this->container['rtp'];
    }

    /**
     * Sets rtp
     *
     * @param string|null $rtp Enable/disable create pinholes for RTP traffic to traverse firewall.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setRtp($rtp)
    {
        $allowedValues = $this->getRtpAllowableValues();
        if (!is_null($rtp) && !in_array($rtp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rtp', must be one of '%s'",
                    $rtp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rtp'] = $rtp;

        return $this;
    }

    /**
     * Gets nat_port_range
     *
     * @return string|null
     */
    public function getNatPortRange()
    {
        return $this->container['nat_port_range'];
    }

    /**
     * Sets nat_port_range
     *
     * @param string|null $nat_port_range RTP NAT port range.
     *
     * @return self
     */
    public function setNatPortRange($nat_port_range)
    {
        $this->container['nat_port_range'] = $nat_port_range;

        return $this;
    }

    /**
     * Gets open_register_pinhole
     *
     * @return string|null
     */
    public function getOpenRegisterPinhole()
    {
        return $this->container['open_register_pinhole'];
    }

    /**
     * Sets open_register_pinhole
     *
     * @param string|null $open_register_pinhole Enable/disable open pinhole for REGISTER Contact port.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setOpenRegisterPinhole($open_register_pinhole)
    {
        $allowedValues = $this->getOpenRegisterPinholeAllowableValues();
        if (!is_null($open_register_pinhole) && !in_array($open_register_pinhole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'open_register_pinhole', must be one of '%s'",
                    $open_register_pinhole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_register_pinhole'] = $open_register_pinhole;

        return $this;
    }

    /**
     * Gets open_contact_pinhole
     *
     * @return string|null
     */
    public function getOpenContactPinhole()
    {
        return $this->container['open_contact_pinhole'];
    }

    /**
     * Sets open_contact_pinhole
     *
     * @param string|null $open_contact_pinhole Enable/disable open pinhole for non-REGISTER Contact port.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setOpenContactPinhole($open_contact_pinhole)
    {
        $allowedValues = $this->getOpenContactPinholeAllowableValues();
        if (!is_null($open_contact_pinhole) && !in_array($open_contact_pinhole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'open_contact_pinhole', must be one of '%s'",
                    $open_contact_pinhole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_contact_pinhole'] = $open_contact_pinhole;

        return $this;
    }

    /**
     * Gets strict_register
     *
     * @return string|null
     */
    public function getStrictRegister()
    {
        return $this->container['strict_register'];
    }

    /**
     * Sets strict_register
     *
     * @param string|null $strict_register Enable/disable only allow the registrar to connect.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setStrictRegister($strict_register)
    {
        $allowedValues = $this->getStrictRegisterAllowableValues();
        if (!is_null($strict_register) && !in_array($strict_register, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_register', must be one of '%s'",
                    $strict_register,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_register'] = $strict_register;

        return $this;
    }

    /**
     * Gets register_rate
     *
     * @return int|null
     */
    public function getRegisterRate()
    {
        return $this->container['register_rate'];
    }

    /**
     * Sets register_rate
     *
     * @param int|null $register_rate REGISTER request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setRegisterRate($register_rate)
    {

        if (!is_null($register_rate) && ($register_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $register_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($register_rate) && ($register_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $register_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['register_rate'] = $register_rate;

        return $this;
    }

    /**
     * Gets invite_rate
     *
     * @return int|null
     */
    public function getInviteRate()
    {
        return $this->container['invite_rate'];
    }

    /**
     * Sets invite_rate
     *
     * @param int|null $invite_rate INVITE request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setInviteRate($invite_rate)
    {

        if (!is_null($invite_rate) && ($invite_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $invite_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($invite_rate) && ($invite_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $invite_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['invite_rate'] = $invite_rate;

        return $this;
    }

    /**
     * Gets max_dialogs
     *
     * @return int|null
     */
    public function getMaxDialogs()
    {
        return $this->container['max_dialogs'];
    }

    /**
     * Sets max_dialogs
     *
     * @param int|null $max_dialogs Maximum number of concurrent calls/dialogs (per policy).
     *
     * @return self
     */
    public function setMaxDialogs($max_dialogs)
    {

        if (!is_null($max_dialogs) && ($max_dialogs > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_dialogs when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_dialogs) && ($max_dialogs < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_dialogs when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['max_dialogs'] = $max_dialogs;

        return $this;
    }

    /**
     * Gets max_line_length
     *
     * @return int|null
     */
    public function getMaxLineLength()
    {
        return $this->container['max_line_length'];
    }

    /**
     * Sets max_line_length
     *
     * @param int|null $max_line_length Maximum SIP header line length (78-4096).
     *
     * @return self
     */
    public function setMaxLineLength($max_line_length)
    {

        if (!is_null($max_line_length) && ($max_line_length > 4096)) {
            throw new \InvalidArgumentException('invalid value for $max_line_length when calling VoipProfileNameSip., must be smaller than or equal to 4096.');
        }
        if (!is_null($max_line_length) && ($max_line_length < 78)) {
            throw new \InvalidArgumentException('invalid value for $max_line_length when calling VoipProfileNameSip., must be bigger than or equal to 78.');
        }

        $this->container['max_line_length'] = $max_line_length;

        return $this;
    }

    /**
     * Gets block_long_lines
     *
     * @return string|null
     */
    public function getBlockLongLines()
    {
        return $this->container['block_long_lines'];
    }

    /**
     * Sets block_long_lines
     *
     * @param string|null $block_long_lines Enable/disable block requests with headers exceeding max-line-length.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockLongLines($block_long_lines)
    {
        $allowedValues = $this->getBlockLongLinesAllowableValues();
        if (!is_null($block_long_lines) && !in_array($block_long_lines, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_long_lines', must be one of '%s'",
                    $block_long_lines,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_long_lines'] = $block_long_lines;

        return $this;
    }

    /**
     * Gets block_unknown
     *
     * @return string|null
     */
    public function getBlockUnknown()
    {
        return $this->container['block_unknown'];
    }

    /**
     * Sets block_unknown
     *
     * @param string|null $block_unknown Block unrecognized SIP requests (enabled by default).    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockUnknown($block_unknown)
    {
        $allowedValues = $this->getBlockUnknownAllowableValues();
        if (!is_null($block_unknown) && !in_array($block_unknown, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_unknown', must be one of '%s'",
                    $block_unknown,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_unknown'] = $block_unknown;

        return $this;
    }

    /**
     * Gets call_keepalive
     *
     * @return int|null
     */
    public function getCallKeepalive()
    {
        return $this->container['call_keepalive'];
    }

    /**
     * Sets call_keepalive
     *
     * @param int|null $call_keepalive Continue tracking calls with no RTP for this many minutes.
     *
     * @return self
     */
    public function setCallKeepalive($call_keepalive)
    {

        if (!is_null($call_keepalive) && ($call_keepalive > 10080)) {
            throw new \InvalidArgumentException('invalid value for $call_keepalive when calling VoipProfileNameSip., must be smaller than or equal to 10080.');
        }
        if (!is_null($call_keepalive) && ($call_keepalive < 0)) {
            throw new \InvalidArgumentException('invalid value for $call_keepalive when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['call_keepalive'] = $call_keepalive;

        return $this;
    }

    /**
     * Gets block_ack
     *
     * @return string|null
     */
    public function getBlockAck()
    {
        return $this->container['block_ack'];
    }

    /**
     * Sets block_ack
     *
     * @param string|null $block_ack Enable/disable block ACK requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockAck($block_ack)
    {
        $allowedValues = $this->getBlockAckAllowableValues();
        if (!is_null($block_ack) && !in_array($block_ack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_ack', must be one of '%s'",
                    $block_ack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_ack'] = $block_ack;

        return $this;
    }

    /**
     * Gets block_bye
     *
     * @return string|null
     */
    public function getBlockBye()
    {
        return $this->container['block_bye'];
    }

    /**
     * Sets block_bye
     *
     * @param string|null $block_bye Enable/disable block BYE requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockBye($block_bye)
    {
        $allowedValues = $this->getBlockByeAllowableValues();
        if (!is_null($block_bye) && !in_array($block_bye, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_bye', must be one of '%s'",
                    $block_bye,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_bye'] = $block_bye;

        return $this;
    }

    /**
     * Gets block_cancel
     *
     * @return string|null
     */
    public function getBlockCancel()
    {
        return $this->container['block_cancel'];
    }

    /**
     * Sets block_cancel
     *
     * @param string|null $block_cancel Enable/disable block CANCEL requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockCancel($block_cancel)
    {
        $allowedValues = $this->getBlockCancelAllowableValues();
        if (!is_null($block_cancel) && !in_array($block_cancel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_cancel', must be one of '%s'",
                    $block_cancel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_cancel'] = $block_cancel;

        return $this;
    }

    /**
     * Gets block_info
     *
     * @return string|null
     */
    public function getBlockInfo()
    {
        return $this->container['block_info'];
    }

    /**
     * Sets block_info
     *
     * @param string|null $block_info Enable/disable block INFO requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockInfo($block_info)
    {
        $allowedValues = $this->getBlockInfoAllowableValues();
        if (!is_null($block_info) && !in_array($block_info, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_info', must be one of '%s'",
                    $block_info,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_info'] = $block_info;

        return $this;
    }

    /**
     * Gets block_invite
     *
     * @return string|null
     */
    public function getBlockInvite()
    {
        return $this->container['block_invite'];
    }

    /**
     * Sets block_invite
     *
     * @param string|null $block_invite Enable/disable block INVITE requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockInvite($block_invite)
    {
        $allowedValues = $this->getBlockInviteAllowableValues();
        if (!is_null($block_invite) && !in_array($block_invite, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_invite', must be one of '%s'",
                    $block_invite,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_invite'] = $block_invite;

        return $this;
    }

    /**
     * Gets block_message
     *
     * @return string|null
     */
    public function getBlockMessage()
    {
        return $this->container['block_message'];
    }

    /**
     * Sets block_message
     *
     * @param string|null $block_message Enable/disable block MESSAGE requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockMessage($block_message)
    {
        $allowedValues = $this->getBlockMessageAllowableValues();
        if (!is_null($block_message) && !in_array($block_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_message', must be one of '%s'",
                    $block_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_message'] = $block_message;

        return $this;
    }

    /**
     * Gets block_notify
     *
     * @return string|null
     */
    public function getBlockNotify()
    {
        return $this->container['block_notify'];
    }

    /**
     * Sets block_notify
     *
     * @param string|null $block_notify Enable/disable block NOTIFY requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockNotify($block_notify)
    {
        $allowedValues = $this->getBlockNotifyAllowableValues();
        if (!is_null($block_notify) && !in_array($block_notify, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_notify', must be one of '%s'",
                    $block_notify,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_notify'] = $block_notify;

        return $this;
    }

    /**
     * Gets block_options
     *
     * @return string|null
     */
    public function getBlockOptions()
    {
        return $this->container['block_options'];
    }

    /**
     * Sets block_options
     *
     * @param string|null $block_options Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockOptions($block_options)
    {
        $allowedValues = $this->getBlockOptionsAllowableValues();
        if (!is_null($block_options) && !in_array($block_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_options', must be one of '%s'",
                    $block_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_options'] = $block_options;

        return $this;
    }

    /**
     * Gets block_prack
     *
     * @return string|null
     */
    public function getBlockPrack()
    {
        return $this->container['block_prack'];
    }

    /**
     * Sets block_prack
     *
     * @param string|null $block_prack Enable/disable block prack requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockPrack($block_prack)
    {
        $allowedValues = $this->getBlockPrackAllowableValues();
        if (!is_null($block_prack) && !in_array($block_prack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_prack', must be one of '%s'",
                    $block_prack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_prack'] = $block_prack;

        return $this;
    }

    /**
     * Gets block_publish
     *
     * @return string|null
     */
    public function getBlockPublish()
    {
        return $this->container['block_publish'];
    }

    /**
     * Sets block_publish
     *
     * @param string|null $block_publish Enable/disable block PUBLISH requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockPublish($block_publish)
    {
        $allowedValues = $this->getBlockPublishAllowableValues();
        if (!is_null($block_publish) && !in_array($block_publish, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_publish', must be one of '%s'",
                    $block_publish,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_publish'] = $block_publish;

        return $this;
    }

    /**
     * Gets block_refer
     *
     * @return string|null
     */
    public function getBlockRefer()
    {
        return $this->container['block_refer'];
    }

    /**
     * Sets block_refer
     *
     * @param string|null $block_refer Enable/disable block REFER requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockRefer($block_refer)
    {
        $allowedValues = $this->getBlockReferAllowableValues();
        if (!is_null($block_refer) && !in_array($block_refer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_refer', must be one of '%s'",
                    $block_refer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_refer'] = $block_refer;

        return $this;
    }

    /**
     * Gets block_register
     *
     * @return string|null
     */
    public function getBlockRegister()
    {
        return $this->container['block_register'];
    }

    /**
     * Sets block_register
     *
     * @param string|null $block_register Enable/disable block REGISTER requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockRegister($block_register)
    {
        $allowedValues = $this->getBlockRegisterAllowableValues();
        if (!is_null($block_register) && !in_array($block_register, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_register', must be one of '%s'",
                    $block_register,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_register'] = $block_register;

        return $this;
    }

    /**
     * Gets block_subscribe
     *
     * @return string|null
     */
    public function getBlockSubscribe()
    {
        return $this->container['block_subscribe'];
    }

    /**
     * Sets block_subscribe
     *
     * @param string|null $block_subscribe Enable/disable block SUBSCRIBE requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockSubscribe($block_subscribe)
    {
        $allowedValues = $this->getBlockSubscribeAllowableValues();
        if (!is_null($block_subscribe) && !in_array($block_subscribe, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_subscribe', must be one of '%s'",
                    $block_subscribe,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_subscribe'] = $block_subscribe;

        return $this;
    }

    /**
     * Gets block_update
     *
     * @return string|null
     */
    public function getBlockUpdate()
    {
        return $this->container['block_update'];
    }

    /**
     * Sets block_update
     *
     * @param string|null $block_update Enable/disable block UPDATE requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockUpdate($block_update)
    {
        $allowedValues = $this->getBlockUpdateAllowableValues();
        if (!is_null($block_update) && !in_array($block_update, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_update', must be one of '%s'",
                    $block_update,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_update'] = $block_update;

        return $this;
    }

    /**
     * Gets register_contact_trace
     *
     * @return string|null
     */
    public function getRegisterContactTrace()
    {
        return $this->container['register_contact_trace'];
    }

    /**
     * Sets register_contact_trace
     *
     * @param string|null $register_contact_trace Enable/disable trace original IP/port within the contact header of REGISTER requests.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setRegisterContactTrace($register_contact_trace)
    {
        $allowedValues = $this->getRegisterContactTraceAllowableValues();
        if (!is_null($register_contact_trace) && !in_array($register_contact_trace, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'register_contact_trace', must be one of '%s'",
                    $register_contact_trace,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['register_contact_trace'] = $register_contact_trace;

        return $this;
    }

    /**
     * Gets open_via_pinhole
     *
     * @return string|null
     */
    public function getOpenViaPinhole()
    {
        return $this->container['open_via_pinhole'];
    }

    /**
     * Sets open_via_pinhole
     *
     * @param string|null $open_via_pinhole Enable/disable open pinhole for Via port.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setOpenViaPinhole($open_via_pinhole)
    {
        $allowedValues = $this->getOpenViaPinholeAllowableValues();
        if (!is_null($open_via_pinhole) && !in_array($open_via_pinhole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'open_via_pinhole', must be one of '%s'",
                    $open_via_pinhole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_via_pinhole'] = $open_via_pinhole;

        return $this;
    }

    /**
     * Gets open_record_route_pinhole
     *
     * @return string|null
     */
    public function getOpenRecordRoutePinhole()
    {
        return $this->container['open_record_route_pinhole'];
    }

    /**
     * Sets open_record_route_pinhole
     *
     * @param string|null $open_record_route_pinhole Enable/disable open pinhole for Record-Route port.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setOpenRecordRoutePinhole($open_record_route_pinhole)
    {
        $allowedValues = $this->getOpenRecordRoutePinholeAllowableValues();
        if (!is_null($open_record_route_pinhole) && !in_array($open_record_route_pinhole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'open_record_route_pinhole', must be one of '%s'",
                    $open_record_route_pinhole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_record_route_pinhole'] = $open_record_route_pinhole;

        return $this;
    }

    /**
     * Gets rfc2543_branch
     *
     * @return string|null
     */
    public function getRfc2543Branch()
    {
        return $this->container['rfc2543_branch'];
    }

    /**
     * Sets rfc2543_branch
     *
     * @param string|null $rfc2543_branch Enable/disable support via branch compliant with RFC 2543.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setRfc2543Branch($rfc2543_branch)
    {
        $allowedValues = $this->getRfc2543BranchAllowableValues();
        if (!is_null($rfc2543_branch) && !in_array($rfc2543_branch, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rfc2543_branch', must be one of '%s'",
                    $rfc2543_branch,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rfc2543_branch'] = $rfc2543_branch;

        return $this;
    }

    /**
     * Gets log_violations
     *
     * @return string|null
     */
    public function getLogViolations()
    {
        return $this->container['log_violations'];
    }

    /**
     * Sets log_violations
     *
     * @param string|null $log_violations Enable/disable logging of SIP violations.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setLogViolations($log_violations)
    {
        $allowedValues = $this->getLogViolationsAllowableValues();
        if (!is_null($log_violations) && !in_array($log_violations, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_violations', must be one of '%s'",
                    $log_violations,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_violations'] = $log_violations;

        return $this;
    }

    /**
     * Gets log_call_summary
     *
     * @return string|null
     */
    public function getLogCallSummary()
    {
        return $this->container['log_call_summary'];
    }

    /**
     * Sets log_call_summary
     *
     * @param string|null $log_call_summary Enable/disable logging of SIP call summary.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setLogCallSummary($log_call_summary)
    {
        $allowedValues = $this->getLogCallSummaryAllowableValues();
        if (!is_null($log_call_summary) && !in_array($log_call_summary, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_call_summary', must be one of '%s'",
                    $log_call_summary,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_call_summary'] = $log_call_summary;

        return $this;
    }

    /**
     * Gets nat_trace
     *
     * @return string|null
     */
    public function getNatTrace()
    {
        return $this->container['nat_trace'];
    }

    /**
     * Sets nat_trace
     *
     * @param string|null $nat_trace Enable/disable preservation of original IP in SDP i line.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setNatTrace($nat_trace)
    {
        $allowedValues = $this->getNatTraceAllowableValues();
        if (!is_null($nat_trace) && !in_array($nat_trace, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nat_trace', must be one of '%s'",
                    $nat_trace,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nat_trace'] = $nat_trace;

        return $this;
    }

    /**
     * Gets subscribe_rate
     *
     * @return int|null
     */
    public function getSubscribeRate()
    {
        return $this->container['subscribe_rate'];
    }

    /**
     * Sets subscribe_rate
     *
     * @param int|null $subscribe_rate SUBSCRIBE request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setSubscribeRate($subscribe_rate)
    {

        if (!is_null($subscribe_rate) && ($subscribe_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $subscribe_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($subscribe_rate) && ($subscribe_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $subscribe_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['subscribe_rate'] = $subscribe_rate;

        return $this;
    }

    /**
     * Gets message_rate
     *
     * @return int|null
     */
    public function getMessageRate()
    {
        return $this->container['message_rate'];
    }

    /**
     * Sets message_rate
     *
     * @param int|null $message_rate MESSAGE request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setMessageRate($message_rate)
    {

        if (!is_null($message_rate) && ($message_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $message_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($message_rate) && ($message_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $message_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['message_rate'] = $message_rate;

        return $this;
    }

    /**
     * Gets notify_rate
     *
     * @return int|null
     */
    public function getNotifyRate()
    {
        return $this->container['notify_rate'];
    }

    /**
     * Sets notify_rate
     *
     * @param int|null $notify_rate NOTIFY request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setNotifyRate($notify_rate)
    {

        if (!is_null($notify_rate) && ($notify_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $notify_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($notify_rate) && ($notify_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $notify_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['notify_rate'] = $notify_rate;

        return $this;
    }

    /**
     * Gets refer_rate
     *
     * @return int|null
     */
    public function getReferRate()
    {
        return $this->container['refer_rate'];
    }

    /**
     * Sets refer_rate
     *
     * @param int|null $refer_rate REFER request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setReferRate($refer_rate)
    {

        if (!is_null($refer_rate) && ($refer_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $refer_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($refer_rate) && ($refer_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $refer_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['refer_rate'] = $refer_rate;

        return $this;
    }

    /**
     * Gets update_rate
     *
     * @return int|null
     */
    public function getUpdateRate()
    {
        return $this->container['update_rate'];
    }

    /**
     * Sets update_rate
     *
     * @param int|null $update_rate UPDATE request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setUpdateRate($update_rate)
    {

        if (!is_null($update_rate) && ($update_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $update_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($update_rate) && ($update_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $update_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['update_rate'] = $update_rate;

        return $this;
    }

    /**
     * Gets options_rate
     *
     * @return int|null
     */
    public function getOptionsRate()
    {
        return $this->container['options_rate'];
    }

    /**
     * Sets options_rate
     *
     * @param int|null $options_rate OPTIONS request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setOptionsRate($options_rate)
    {

        if (!is_null($options_rate) && ($options_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $options_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($options_rate) && ($options_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $options_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['options_rate'] = $options_rate;

        return $this;
    }

    /**
     * Gets ack_rate
     *
     * @return int|null
     */
    public function getAckRate()
    {
        return $this->container['ack_rate'];
    }

    /**
     * Sets ack_rate
     *
     * @param int|null $ack_rate ACK request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setAckRate($ack_rate)
    {

        if (!is_null($ack_rate) && ($ack_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $ack_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($ack_rate) && ($ack_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $ack_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['ack_rate'] = $ack_rate;

        return $this;
    }

    /**
     * Gets prack_rate
     *
     * @return int|null
     */
    public function getPrackRate()
    {
        return $this->container['prack_rate'];
    }

    /**
     * Sets prack_rate
     *
     * @param int|null $prack_rate PRACK request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setPrackRate($prack_rate)
    {

        if (!is_null($prack_rate) && ($prack_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $prack_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($prack_rate) && ($prack_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $prack_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['prack_rate'] = $prack_rate;

        return $this;
    }

    /**
     * Gets info_rate
     *
     * @return int|null
     */
    public function getInfoRate()
    {
        return $this->container['info_rate'];
    }

    /**
     * Sets info_rate
     *
     * @param int|null $info_rate INFO request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setInfoRate($info_rate)
    {

        if (!is_null($info_rate) && ($info_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $info_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($info_rate) && ($info_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $info_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['info_rate'] = $info_rate;

        return $this;
    }

    /**
     * Gets publish_rate
     *
     * @return int|null
     */
    public function getPublishRate()
    {
        return $this->container['publish_rate'];
    }

    /**
     * Sets publish_rate
     *
     * @param int|null $publish_rate PUBLISH request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setPublishRate($publish_rate)
    {

        if (!is_null($publish_rate) && ($publish_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $publish_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($publish_rate) && ($publish_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $publish_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['publish_rate'] = $publish_rate;

        return $this;
    }

    /**
     * Gets bye_rate
     *
     * @return int|null
     */
    public function getByeRate()
    {
        return $this->container['bye_rate'];
    }

    /**
     * Sets bye_rate
     *
     * @param int|null $bye_rate BYE request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setByeRate($bye_rate)
    {

        if (!is_null($bye_rate) && ($bye_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $bye_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($bye_rate) && ($bye_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $bye_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['bye_rate'] = $bye_rate;

        return $this;
    }

    /**
     * Gets cancel_rate
     *
     * @return int|null
     */
    public function getCancelRate()
    {
        return $this->container['cancel_rate'];
    }

    /**
     * Sets cancel_rate
     *
     * @param int|null $cancel_rate CANCEL request rate limit (per second, per policy).
     *
     * @return self
     */
    public function setCancelRate($cancel_rate)
    {

        if (!is_null($cancel_rate) && ($cancel_rate > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $cancel_rate when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($cancel_rate) && ($cancel_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $cancel_rate when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['cancel_rate'] = $cancel_rate;

        return $this;
    }

    /**
     * Gets preserve_override
     *
     * @return string|null
     */
    public function getPreserveOverride()
    {
        return $this->container['preserve_override'];
    }

    /**
     * Sets preserve_override
     *
     * @param string|null $preserve_override Override i line to preserve original IPS (default: append).    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setPreserveOverride($preserve_override)
    {
        $allowedValues = $this->getPreserveOverrideAllowableValues();
        if (!is_null($preserve_override) && !in_array($preserve_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preserve_override', must be one of '%s'",
                    $preserve_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preserve_override'] = $preserve_override;

        return $this;
    }

    /**
     * Gets no_sdp_fixup
     *
     * @return string|null
     */
    public function getNoSdpFixup()
    {
        return $this->container['no_sdp_fixup'];
    }

    /**
     * Sets no_sdp_fixup
     *
     * @param string|null $no_sdp_fixup Enable/disable no SDP fix-up.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setNoSdpFixup($no_sdp_fixup)
    {
        $allowedValues = $this->getNoSdpFixupAllowableValues();
        if (!is_null($no_sdp_fixup) && !in_array($no_sdp_fixup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'no_sdp_fixup', must be one of '%s'",
                    $no_sdp_fixup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['no_sdp_fixup'] = $no_sdp_fixup;

        return $this;
    }

    /**
     * Gets contact_fixup
     *
     * @return string|null
     */
    public function getContactFixup()
    {
        return $this->container['contact_fixup'];
    }

    /**
     * Sets contact_fixup
     *
     * @param string|null $contact_fixup Fixup contact anyway even if contact's IP:port doesn't match session's IP:port.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setContactFixup($contact_fixup)
    {
        $allowedValues = $this->getContactFixupAllowableValues();
        if (!is_null($contact_fixup) && !in_array($contact_fixup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contact_fixup', must be one of '%s'",
                    $contact_fixup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_fixup'] = $contact_fixup;

        return $this;
    }

    /**
     * Gets max_idle_dialogs
     *
     * @return int|null
     */
    public function getMaxIdleDialogs()
    {
        return $this->container['max_idle_dialogs'];
    }

    /**
     * Sets max_idle_dialogs
     *
     * @param int|null $max_idle_dialogs Maximum number established but idle dialogs to retain (per policy).
     *
     * @return self
     */
    public function setMaxIdleDialogs($max_idle_dialogs)
    {

        if (!is_null($max_idle_dialogs) && ($max_idle_dialogs > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_idle_dialogs when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_idle_dialogs) && ($max_idle_dialogs < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_idle_dialogs when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['max_idle_dialogs'] = $max_idle_dialogs;

        return $this;
    }

    /**
     * Gets block_geo_red_options
     *
     * @return string|null
     */
    public function getBlockGeoRedOptions()
    {
        return $this->container['block_geo_red_options'];
    }

    /**
     * Sets block_geo_red_options
     *
     * @param string|null $block_geo_red_options Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setBlockGeoRedOptions($block_geo_red_options)
    {
        $allowedValues = $this->getBlockGeoRedOptionsAllowableValues();
        if (!is_null($block_geo_red_options) && !in_array($block_geo_red_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_geo_red_options', must be one of '%s'",
                    $block_geo_red_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_geo_red_options'] = $block_geo_red_options;

        return $this;
    }

    /**
     * Gets hosted_nat_traversal
     *
     * @return string|null
     */
    public function getHostedNatTraversal()
    {
        return $this->container['hosted_nat_traversal'];
    }

    /**
     * Sets hosted_nat_traversal
     *
     * @param string|null $hosted_nat_traversal Hosted NAT Traversal (HNT).    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setHostedNatTraversal($hosted_nat_traversal)
    {
        $allowedValues = $this->getHostedNatTraversalAllowableValues();
        if (!is_null($hosted_nat_traversal) && !in_array($hosted_nat_traversal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hosted_nat_traversal', must be one of '%s'",
                    $hosted_nat_traversal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hosted_nat_traversal'] = $hosted_nat_traversal;

        return $this;
    }

    /**
     * Gets hnt_restrict_source_ip
     *
     * @return string|null
     */
    public function getHntRestrictSourceIp()
    {
        return $this->container['hnt_restrict_source_ip'];
    }

    /**
     * Sets hnt_restrict_source_ip
     *
     * @param string|null $hnt_restrict_source_ip Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setHntRestrictSourceIp($hnt_restrict_source_ip)
    {
        $allowedValues = $this->getHntRestrictSourceIpAllowableValues();
        if (!is_null($hnt_restrict_source_ip) && !in_array($hnt_restrict_source_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hnt_restrict_source_ip', must be one of '%s'",
                    $hnt_restrict_source_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hnt_restrict_source_ip'] = $hnt_restrict_source_ip;

        return $this;
    }

    /**
     * Gets max_body_length
     *
     * @return int|null
     */
    public function getMaxBodyLength()
    {
        return $this->container['max_body_length'];
    }

    /**
     * Sets max_body_length
     *
     * @param int|null $max_body_length Maximum SIP message body length (0 meaning no limit).
     *
     * @return self
     */
    public function setMaxBodyLength($max_body_length)
    {

        if (!is_null($max_body_length) && ($max_body_length > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_body_length when calling VoipProfileNameSip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_body_length) && ($max_body_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_body_length when calling VoipProfileNameSip., must be bigger than or equal to 0.');
        }

        $this->container['max_body_length'] = $max_body_length;

        return $this;
    }

    /**
     * Gets unknown_header
     *
     * @return string|null
     */
    public function getUnknownHeader()
    {
        return $this->container['unknown_header'];
    }

    /**
     * Sets unknown_header
     *
     * @param string|null $unknown_header Action for unknown SIP header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setUnknownHeader($unknown_header)
    {
        $allowedValues = $this->getUnknownHeaderAllowableValues();
        if (!is_null($unknown_header) && !in_array($unknown_header, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_header', must be one of '%s'",
                    $unknown_header,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_header'] = $unknown_header;

        return $this;
    }

    /**
     * Gets malformed_request_line
     *
     * @return string|null
     */
    public function getMalformedRequestLine()
    {
        return $this->container['malformed_request_line'];
    }

    /**
     * Sets malformed_request_line
     *
     * @param string|null $malformed_request_line Action for malformed request line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedRequestLine($malformed_request_line)
    {
        $allowedValues = $this->getMalformedRequestLineAllowableValues();
        if (!is_null($malformed_request_line) && !in_array($malformed_request_line, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_request_line', must be one of '%s'",
                    $malformed_request_line,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_request_line'] = $malformed_request_line;

        return $this;
    }

    /**
     * Gets malformed_header_via
     *
     * @return string|null
     */
    public function getMalformedHeaderVia()
    {
        return $this->container['malformed_header_via'];
    }

    /**
     * Sets malformed_header_via
     *
     * @param string|null $malformed_header_via Action for malformed VIA header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderVia($malformed_header_via)
    {
        $allowedValues = $this->getMalformedHeaderViaAllowableValues();
        if (!is_null($malformed_header_via) && !in_array($malformed_header_via, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_via', must be one of '%s'",
                    $malformed_header_via,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_via'] = $malformed_header_via;

        return $this;
    }

    /**
     * Gets malformed_header_from
     *
     * @return string|null
     */
    public function getMalformedHeaderFrom()
    {
        return $this->container['malformed_header_from'];
    }

    /**
     * Sets malformed_header_from
     *
     * @param string|null $malformed_header_from Action for malformed From header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderFrom($malformed_header_from)
    {
        $allowedValues = $this->getMalformedHeaderFromAllowableValues();
        if (!is_null($malformed_header_from) && !in_array($malformed_header_from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_from', must be one of '%s'",
                    $malformed_header_from,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_from'] = $malformed_header_from;

        return $this;
    }

    /**
     * Gets malformed_header_to
     *
     * @return string|null
     */
    public function getMalformedHeaderTo()
    {
        return $this->container['malformed_header_to'];
    }

    /**
     * Sets malformed_header_to
     *
     * @param string|null $malformed_header_to Action for malformed To header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderTo($malformed_header_to)
    {
        $allowedValues = $this->getMalformedHeaderToAllowableValues();
        if (!is_null($malformed_header_to) && !in_array($malformed_header_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_to', must be one of '%s'",
                    $malformed_header_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_to'] = $malformed_header_to;

        return $this;
    }

    /**
     * Gets malformed_header_call_id
     *
     * @return string|null
     */
    public function getMalformedHeaderCallId()
    {
        return $this->container['malformed_header_call_id'];
    }

    /**
     * Sets malformed_header_call_id
     *
     * @param string|null $malformed_header_call_id Action for malformed Call-ID header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderCallId($malformed_header_call_id)
    {
        $allowedValues = $this->getMalformedHeaderCallIdAllowableValues();
        if (!is_null($malformed_header_call_id) && !in_array($malformed_header_call_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_call_id', must be one of '%s'",
                    $malformed_header_call_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_call_id'] = $malformed_header_call_id;

        return $this;
    }

    /**
     * Gets malformed_header_cseq
     *
     * @return string|null
     */
    public function getMalformedHeaderCseq()
    {
        return $this->container['malformed_header_cseq'];
    }

    /**
     * Sets malformed_header_cseq
     *
     * @param string|null $malformed_header_cseq Action for malformed CSeq header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderCseq($malformed_header_cseq)
    {
        $allowedValues = $this->getMalformedHeaderCseqAllowableValues();
        if (!is_null($malformed_header_cseq) && !in_array($malformed_header_cseq, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_cseq', must be one of '%s'",
                    $malformed_header_cseq,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_cseq'] = $malformed_header_cseq;

        return $this;
    }

    /**
     * Gets malformed_header_rack
     *
     * @return string|null
     */
    public function getMalformedHeaderRack()
    {
        return $this->container['malformed_header_rack'];
    }

    /**
     * Sets malformed_header_rack
     *
     * @param string|null $malformed_header_rack Action for malformed RAck header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderRack($malformed_header_rack)
    {
        $allowedValues = $this->getMalformedHeaderRackAllowableValues();
        if (!is_null($malformed_header_rack) && !in_array($malformed_header_rack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_rack', must be one of '%s'",
                    $malformed_header_rack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_rack'] = $malformed_header_rack;

        return $this;
    }

    /**
     * Gets malformed_header_rseq
     *
     * @return string|null
     */
    public function getMalformedHeaderRseq()
    {
        return $this->container['malformed_header_rseq'];
    }

    /**
     * Sets malformed_header_rseq
     *
     * @param string|null $malformed_header_rseq Action for malformed RSeq header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderRseq($malformed_header_rseq)
    {
        $allowedValues = $this->getMalformedHeaderRseqAllowableValues();
        if (!is_null($malformed_header_rseq) && !in_array($malformed_header_rseq, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_rseq', must be one of '%s'",
                    $malformed_header_rseq,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_rseq'] = $malformed_header_rseq;

        return $this;
    }

    /**
     * Gets malformed_header_contact
     *
     * @return string|null
     */
    public function getMalformedHeaderContact()
    {
        return $this->container['malformed_header_contact'];
    }

    /**
     * Sets malformed_header_contact
     *
     * @param string|null $malformed_header_contact Action for malformed Contact header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderContact($malformed_header_contact)
    {
        $allowedValues = $this->getMalformedHeaderContactAllowableValues();
        if (!is_null($malformed_header_contact) && !in_array($malformed_header_contact, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_contact', must be one of '%s'",
                    $malformed_header_contact,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_contact'] = $malformed_header_contact;

        return $this;
    }

    /**
     * Gets malformed_header_record_route
     *
     * @return string|null
     */
    public function getMalformedHeaderRecordRoute()
    {
        return $this->container['malformed_header_record_route'];
    }

    /**
     * Sets malformed_header_record_route
     *
     * @param string|null $malformed_header_record_route Action for malformed Record-Route header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderRecordRoute($malformed_header_record_route)
    {
        $allowedValues = $this->getMalformedHeaderRecordRouteAllowableValues();
        if (!is_null($malformed_header_record_route) && !in_array($malformed_header_record_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_record_route', must be one of '%s'",
                    $malformed_header_record_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_record_route'] = $malformed_header_record_route;

        return $this;
    }

    /**
     * Gets malformed_header_route
     *
     * @return string|null
     */
    public function getMalformedHeaderRoute()
    {
        return $this->container['malformed_header_route'];
    }

    /**
     * Sets malformed_header_route
     *
     * @param string|null $malformed_header_route Action for malformed Route header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderRoute($malformed_header_route)
    {
        $allowedValues = $this->getMalformedHeaderRouteAllowableValues();
        if (!is_null($malformed_header_route) && !in_array($malformed_header_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_route', must be one of '%s'",
                    $malformed_header_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_route'] = $malformed_header_route;

        return $this;
    }

    /**
     * Gets malformed_header_expires
     *
     * @return string|null
     */
    public function getMalformedHeaderExpires()
    {
        return $this->container['malformed_header_expires'];
    }

    /**
     * Sets malformed_header_expires
     *
     * @param string|null $malformed_header_expires Action for malformed Expires header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderExpires($malformed_header_expires)
    {
        $allowedValues = $this->getMalformedHeaderExpiresAllowableValues();
        if (!is_null($malformed_header_expires) && !in_array($malformed_header_expires, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_expires', must be one of '%s'",
                    $malformed_header_expires,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_expires'] = $malformed_header_expires;

        return $this;
    }

    /**
     * Gets malformed_header_content_type
     *
     * @return string|null
     */
    public function getMalformedHeaderContentType()
    {
        return $this->container['malformed_header_content_type'];
    }

    /**
     * Sets malformed_header_content_type
     *
     * @param string|null $malformed_header_content_type Action for malformed Content-Type header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderContentType($malformed_header_content_type)
    {
        $allowedValues = $this->getMalformedHeaderContentTypeAllowableValues();
        if (!is_null($malformed_header_content_type) && !in_array($malformed_header_content_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_content_type', must be one of '%s'",
                    $malformed_header_content_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_content_type'] = $malformed_header_content_type;

        return $this;
    }

    /**
     * Gets malformed_header_content_length
     *
     * @return string|null
     */
    public function getMalformedHeaderContentLength()
    {
        return $this->container['malformed_header_content_length'];
    }

    /**
     * Sets malformed_header_content_length
     *
     * @param string|null $malformed_header_content_length Action for malformed Content-Length header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderContentLength($malformed_header_content_length)
    {
        $allowedValues = $this->getMalformedHeaderContentLengthAllowableValues();
        if (!is_null($malformed_header_content_length) && !in_array($malformed_header_content_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_content_length', must be one of '%s'",
                    $malformed_header_content_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_content_length'] = $malformed_header_content_length;

        return $this;
    }

    /**
     * Gets malformed_header_max_forwards
     *
     * @return string|null
     */
    public function getMalformedHeaderMaxForwards()
    {
        return $this->container['malformed_header_max_forwards'];
    }

    /**
     * Sets malformed_header_max_forwards
     *
     * @param string|null $malformed_header_max_forwards Action for malformed Max-Forwards header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderMaxForwards($malformed_header_max_forwards)
    {
        $allowedValues = $this->getMalformedHeaderMaxForwardsAllowableValues();
        if (!is_null($malformed_header_max_forwards) && !in_array($malformed_header_max_forwards, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_max_forwards', must be one of '%s'",
                    $malformed_header_max_forwards,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_max_forwards'] = $malformed_header_max_forwards;

        return $this;
    }

    /**
     * Gets malformed_header_allow
     *
     * @return string|null
     */
    public function getMalformedHeaderAllow()
    {
        return $this->container['malformed_header_allow'];
    }

    /**
     * Sets malformed_header_allow
     *
     * @param string|null $malformed_header_allow Action for malformed Allow header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderAllow($malformed_header_allow)
    {
        $allowedValues = $this->getMalformedHeaderAllowAllowableValues();
        if (!is_null($malformed_header_allow) && !in_array($malformed_header_allow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_allow', must be one of '%s'",
                    $malformed_header_allow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_allow'] = $malformed_header_allow;

        return $this;
    }

    /**
     * Gets malformed_header_p_asserted_identity
     *
     * @return string|null
     */
    public function getMalformedHeaderPAssertedIdentity()
    {
        return $this->container['malformed_header_p_asserted_identity'];
    }

    /**
     * Sets malformed_header_p_asserted_identity
     *
     * @param string|null $malformed_header_p_asserted_identity Action for malformed P-Asserted-Identity header.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderPAssertedIdentity($malformed_header_p_asserted_identity)
    {
        $allowedValues = $this->getMalformedHeaderPAssertedIdentityAllowableValues();
        if (!is_null($malformed_header_p_asserted_identity) && !in_array($malformed_header_p_asserted_identity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_p_asserted_identity', must be one of '%s'",
                    $malformed_header_p_asserted_identity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_p_asserted_identity'] = $malformed_header_p_asserted_identity;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_v
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpV()
    {
        return $this->container['malformed_header_sdp_v'];
    }

    /**
     * Sets malformed_header_sdp_v
     *
     * @param string|null $malformed_header_sdp_v Action for malformed SDP v line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpV($malformed_header_sdp_v)
    {
        $allowedValues = $this->getMalformedHeaderSdpVAllowableValues();
        if (!is_null($malformed_header_sdp_v) && !in_array($malformed_header_sdp_v, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_v', must be one of '%s'",
                    $malformed_header_sdp_v,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_v'] = $malformed_header_sdp_v;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_o
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpO()
    {
        return $this->container['malformed_header_sdp_o'];
    }

    /**
     * Sets malformed_header_sdp_o
     *
     * @param string|null $malformed_header_sdp_o Action for malformed SDP o line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpO($malformed_header_sdp_o)
    {
        $allowedValues = $this->getMalformedHeaderSdpOAllowableValues();
        if (!is_null($malformed_header_sdp_o) && !in_array($malformed_header_sdp_o, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_o', must be one of '%s'",
                    $malformed_header_sdp_o,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_o'] = $malformed_header_sdp_o;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_s
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpS()
    {
        return $this->container['malformed_header_sdp_s'];
    }

    /**
     * Sets malformed_header_sdp_s
     *
     * @param string|null $malformed_header_sdp_s Action for malformed SDP s line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpS($malformed_header_sdp_s)
    {
        $allowedValues = $this->getMalformedHeaderSdpSAllowableValues();
        if (!is_null($malformed_header_sdp_s) && !in_array($malformed_header_sdp_s, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_s', must be one of '%s'",
                    $malformed_header_sdp_s,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_s'] = $malformed_header_sdp_s;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_i
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpI()
    {
        return $this->container['malformed_header_sdp_i'];
    }

    /**
     * Sets malformed_header_sdp_i
     *
     * @param string|null $malformed_header_sdp_i Action for malformed SDP i line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpI($malformed_header_sdp_i)
    {
        $allowedValues = $this->getMalformedHeaderSdpIAllowableValues();
        if (!is_null($malformed_header_sdp_i) && !in_array($malformed_header_sdp_i, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_i', must be one of '%s'",
                    $malformed_header_sdp_i,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_i'] = $malformed_header_sdp_i;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_c
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpC()
    {
        return $this->container['malformed_header_sdp_c'];
    }

    /**
     * Sets malformed_header_sdp_c
     *
     * @param string|null $malformed_header_sdp_c Action for malformed SDP c line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpC($malformed_header_sdp_c)
    {
        $allowedValues = $this->getMalformedHeaderSdpCAllowableValues();
        if (!is_null($malformed_header_sdp_c) && !in_array($malformed_header_sdp_c, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_c', must be one of '%s'",
                    $malformed_header_sdp_c,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_c'] = $malformed_header_sdp_c;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_b
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpB()
    {
        return $this->container['malformed_header_sdp_b'];
    }

    /**
     * Sets malformed_header_sdp_b
     *
     * @param string|null $malformed_header_sdp_b Action for malformed SDP b line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpB($malformed_header_sdp_b)
    {
        $allowedValues = $this->getMalformedHeaderSdpBAllowableValues();
        if (!is_null($malformed_header_sdp_b) && !in_array($malformed_header_sdp_b, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_b', must be one of '%s'",
                    $malformed_header_sdp_b,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_b'] = $malformed_header_sdp_b;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_z
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpZ()
    {
        return $this->container['malformed_header_sdp_z'];
    }

    /**
     * Sets malformed_header_sdp_z
     *
     * @param string|null $malformed_header_sdp_z Action for malformed SDP z line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpZ($malformed_header_sdp_z)
    {
        $allowedValues = $this->getMalformedHeaderSdpZAllowableValues();
        if (!is_null($malformed_header_sdp_z) && !in_array($malformed_header_sdp_z, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_z', must be one of '%s'",
                    $malformed_header_sdp_z,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_z'] = $malformed_header_sdp_z;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_k
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpK()
    {
        return $this->container['malformed_header_sdp_k'];
    }

    /**
     * Sets malformed_header_sdp_k
     *
     * @param string|null $malformed_header_sdp_k Action for malformed SDP k line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpK($malformed_header_sdp_k)
    {
        $allowedValues = $this->getMalformedHeaderSdpKAllowableValues();
        if (!is_null($malformed_header_sdp_k) && !in_array($malformed_header_sdp_k, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_k', must be one of '%s'",
                    $malformed_header_sdp_k,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_k'] = $malformed_header_sdp_k;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_a
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpA()
    {
        return $this->container['malformed_header_sdp_a'];
    }

    /**
     * Sets malformed_header_sdp_a
     *
     * @param string|null $malformed_header_sdp_a Action for malformed SDP a line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpA($malformed_header_sdp_a)
    {
        $allowedValues = $this->getMalformedHeaderSdpAAllowableValues();
        if (!is_null($malformed_header_sdp_a) && !in_array($malformed_header_sdp_a, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_a', must be one of '%s'",
                    $malformed_header_sdp_a,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_a'] = $malformed_header_sdp_a;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_t
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpT()
    {
        return $this->container['malformed_header_sdp_t'];
    }

    /**
     * Sets malformed_header_sdp_t
     *
     * @param string|null $malformed_header_sdp_t Action for malformed SDP t line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpT($malformed_header_sdp_t)
    {
        $allowedValues = $this->getMalformedHeaderSdpTAllowableValues();
        if (!is_null($malformed_header_sdp_t) && !in_array($malformed_header_sdp_t, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_t', must be one of '%s'",
                    $malformed_header_sdp_t,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_t'] = $malformed_header_sdp_t;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_r
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpR()
    {
        return $this->container['malformed_header_sdp_r'];
    }

    /**
     * Sets malformed_header_sdp_r
     *
     * @param string|null $malformed_header_sdp_r Action for malformed SDP r line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpR($malformed_header_sdp_r)
    {
        $allowedValues = $this->getMalformedHeaderSdpRAllowableValues();
        if (!is_null($malformed_header_sdp_r) && !in_array($malformed_header_sdp_r, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_r', must be one of '%s'",
                    $malformed_header_sdp_r,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_r'] = $malformed_header_sdp_r;

        return $this;
    }

    /**
     * Gets malformed_header_sdp_m
     *
     * @return string|null
     */
    public function getMalformedHeaderSdpM()
    {
        return $this->container['malformed_header_sdp_m'];
    }

    /**
     * Sets malformed_header_sdp_m
     *
     * @param string|null $malformed_header_sdp_m Action for malformed SDP m line.    discard:Discard malformed messages.    pass:Bypass malformed messages.    respond:Respond with error code.
     *
     * @return self
     */
    public function setMalformedHeaderSdpM($malformed_header_sdp_m)
    {
        $allowedValues = $this->getMalformedHeaderSdpMAllowableValues();
        if (!is_null($malformed_header_sdp_m) && !in_array($malformed_header_sdp_m, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed_header_sdp_m', must be one of '%s'",
                    $malformed_header_sdp_m,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed_header_sdp_m'] = $malformed_header_sdp_m;

        return $this;
    }

    /**
     * Gets provisional_invite_expiry_time
     *
     * @return int|null
     */
    public function getProvisionalInviteExpiryTime()
    {
        return $this->container['provisional_invite_expiry_time'];
    }

    /**
     * Sets provisional_invite_expiry_time
     *
     * @param int|null $provisional_invite_expiry_time Expiry time for provisional INVITE (10 - 3600 sec).
     *
     * @return self
     */
    public function setProvisionalInviteExpiryTime($provisional_invite_expiry_time)
    {

        if (!is_null($provisional_invite_expiry_time) && ($provisional_invite_expiry_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $provisional_invite_expiry_time when calling VoipProfileNameSip., must be smaller than or equal to 3600.');
        }
        if (!is_null($provisional_invite_expiry_time) && ($provisional_invite_expiry_time < 10)) {
            throw new \InvalidArgumentException('invalid value for $provisional_invite_expiry_time when calling VoipProfileNameSip., must be bigger than or equal to 10.');
        }

        $this->container['provisional_invite_expiry_time'] = $provisional_invite_expiry_time;

        return $this;
    }

    /**
     * Gets ips_rtp
     *
     * @return string|null
     */
    public function getIpsRtp()
    {
        return $this->container['ips_rtp'];
    }

    /**
     * Sets ips_rtp
     *
     * @param string|null $ips_rtp Enable/disable allow IPS on RTP.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setIpsRtp($ips_rtp)
    {
        $allowedValues = $this->getIpsRtpAllowableValues();
        if (!is_null($ips_rtp) && !in_array($ips_rtp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ips_rtp', must be one of '%s'",
                    $ips_rtp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ips_rtp'] = $ips_rtp;

        return $this;
    }

    /**
     * Gets ssl_mode
     *
     * @return string|null
     */
    public function getSslMode()
    {
        return $this->container['ssl_mode'];
    }

    /**
     * Sets ssl_mode
     *
     * @param string|null $ssl_mode SSL/TLS mode for encryption & decryption of traffic.    off:No SSL.    full:Client to FortiGate and FortiGate to Server SSL.
     *
     * @return self
     */
    public function setSslMode($ssl_mode)
    {
        $allowedValues = $this->getSslModeAllowableValues();
        if (!is_null($ssl_mode) && !in_array($ssl_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_mode', must be one of '%s'",
                    $ssl_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_mode'] = $ssl_mode;

        return $this;
    }

    /**
     * Gets ssl_send_empty_frags
     *
     * @return string|null
     */
    public function getSslSendEmptyFrags()
    {
        return $this->container['ssl_send_empty_frags'];
    }

    /**
     * Sets ssl_send_empty_frags
     *
     * @param string|null $ssl_send_empty_frags Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only).    enable:Send empty fragments.    disable:Do not send empty fragments.
     *
     * @return self
     */
    public function setSslSendEmptyFrags($ssl_send_empty_frags)
    {
        $allowedValues = $this->getSslSendEmptyFragsAllowableValues();
        if (!is_null($ssl_send_empty_frags) && !in_array($ssl_send_empty_frags, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_send_empty_frags', must be one of '%s'",
                    $ssl_send_empty_frags,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_send_empty_frags'] = $ssl_send_empty_frags;

        return $this;
    }

    /**
     * Gets ssl_client_renegotiation
     *
     * @return string|null
     */
    public function getSslClientRenegotiation()
    {
        return $this->container['ssl_client_renegotiation'];
    }

    /**
     * Sets ssl_client_renegotiation
     *
     * @param string|null $ssl_client_renegotiation Allow/block client renegotiation by server.    allow:Allow a SSL client to renegotiate.    deny:Abort any SSL connection that attempts to renegotiate.    secure:Reject any SSL connection that does not offer a RFC 5746 Secure Renegotiation Indication.
     *
     * @return self
     */
    public function setSslClientRenegotiation($ssl_client_renegotiation)
    {
        $allowedValues = $this->getSslClientRenegotiationAllowableValues();
        if (!is_null($ssl_client_renegotiation) && !in_array($ssl_client_renegotiation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_client_renegotiation', must be one of '%s'",
                    $ssl_client_renegotiation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_client_renegotiation'] = $ssl_client_renegotiation;

        return $this;
    }

    /**
     * Gets ssl_algorithm
     *
     * @return string|null
     */
    public function getSslAlgorithm()
    {
        return $this->container['ssl_algorithm'];
    }

    /**
     * Sets ssl_algorithm
     *
     * @param string|null $ssl_algorithm Relative strength of encryption algorithms accepted in negotiation.    high:High encryption. Allow only AES and ChaCha.    medium:Medium encryption. Allow AES, ChaCha, 3DES, and RC4.    low:Low encryption. Allow AES, ChaCha, 3DES, RC4, and DES.
     *
     * @return self
     */
    public function setSslAlgorithm($ssl_algorithm)
    {
        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($ssl_algorithm) && !in_array($ssl_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                    $ssl_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_algorithm'] = $ssl_algorithm;

        return $this;
    }

    /**
     * Gets ssl_pfs
     *
     * @return string|null
     */
    public function getSslPfs()
    {
        return $this->container['ssl_pfs'];
    }

    /**
     * Sets ssl_pfs
     *
     * @param string|null $ssl_pfs SSL Perfect Forward Secrecy.    require:PFS mandatory.    deny:PFS rejected.    allow:PFS allowed.
     *
     * @return self
     */
    public function setSslPfs($ssl_pfs)
    {
        $allowedValues = $this->getSslPfsAllowableValues();
        if (!is_null($ssl_pfs) && !in_array($ssl_pfs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_pfs', must be one of '%s'",
                    $ssl_pfs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_pfs'] = $ssl_pfs;

        return $this;
    }

    /**
     * Gets ssl_min_version
     *
     * @return string|null
     */
    public function getSslMinVersion()
    {
        return $this->container['ssl_min_version'];
    }

    /**
     * Sets ssl_min_version
     *
     * @param string|null $ssl_min_version Lowest SSL/TLS version to negotiate.    ssl-3.0:SSL 3.0.    tls-1.0:TLS 1.0.    tls-1.1:TLS 1.1.    tls-1.2:TLS 1.2.    tls-1.3:TLS 1.3.
     *
     * @return self
     */
    public function setSslMinVersion($ssl_min_version)
    {
        $allowedValues = $this->getSslMinVersionAllowableValues();
        if (!is_null($ssl_min_version) && !in_array($ssl_min_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_version', must be one of '%s'",
                    $ssl_min_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_version'] = $ssl_min_version;

        return $this;
    }

    /**
     * Gets ssl_max_version
     *
     * @return string|null
     */
    public function getSslMaxVersion()
    {
        return $this->container['ssl_max_version'];
    }

    /**
     * Sets ssl_max_version
     *
     * @param string|null $ssl_max_version Highest SSL/TLS version to negotiate.    ssl-3.0:SSL 3.0.    tls-1.0:TLS 1.0.    tls-1.1:TLS 1.1.    tls-1.2:TLS 1.2.    tls-1.3:TLS 1.3.
     *
     * @return self
     */
    public function setSslMaxVersion($ssl_max_version)
    {
        $allowedValues = $this->getSslMaxVersionAllowableValues();
        if (!is_null($ssl_max_version) && !in_array($ssl_max_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_max_version', must be one of '%s'",
                    $ssl_max_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_max_version'] = $ssl_max_version;

        return $this;
    }

    /**
     * Gets ssl_client_certificate
     *
     * @return string|null
     */
    public function getSslClientCertificate()
    {
        return $this->container['ssl_client_certificate'];
    }

    /**
     * Sets ssl_client_certificate
     *
     * @param string|null $ssl_client_certificate Name of Certificate to offer to server if requested.
     *
     * @return self
     */
    public function setSslClientCertificate($ssl_client_certificate)
    {
        if (!is_null($ssl_client_certificate) && (mb_strlen($ssl_client_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_client_certificate when calling VoipProfileNameSip., must be smaller than or equal to 35.');
        }

        $this->container['ssl_client_certificate'] = $ssl_client_certificate;

        return $this;
    }

    /**
     * Gets ssl_server_certificate
     *
     * @return string|null
     */
    public function getSslServerCertificate()
    {
        return $this->container['ssl_server_certificate'];
    }

    /**
     * Sets ssl_server_certificate
     *
     * @param string|null $ssl_server_certificate Name of Certificate return to the client in every SSL connection.
     *
     * @return self
     */
    public function setSslServerCertificate($ssl_server_certificate)
    {
        if (!is_null($ssl_server_certificate) && (mb_strlen($ssl_server_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_server_certificate when calling VoipProfileNameSip., must be smaller than or equal to 35.');
        }

        $this->container['ssl_server_certificate'] = $ssl_server_certificate;

        return $this;
    }

    /**
     * Gets ssl_auth_client
     *
     * @return string|null
     */
    public function getSslAuthClient()
    {
        return $this->container['ssl_auth_client'];
    }

    /**
     * Sets ssl_auth_client
     *
     * @param string|null $ssl_auth_client Require a client certificate and authenticate it with the peer/peergrp.
     *
     * @return self
     */
    public function setSslAuthClient($ssl_auth_client)
    {
        if (!is_null($ssl_auth_client) && (mb_strlen($ssl_auth_client) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_auth_client when calling VoipProfileNameSip., must be smaller than or equal to 35.');
        }

        $this->container['ssl_auth_client'] = $ssl_auth_client;

        return $this;
    }

    /**
     * Gets ssl_auth_server
     *
     * @return string|null
     */
    public function getSslAuthServer()
    {
        return $this->container['ssl_auth_server'];
    }

    /**
     * Sets ssl_auth_server
     *
     * @param string|null $ssl_auth_server Authenticate the server's certificate with the peer/peergrp.
     *
     * @return self
     */
    public function setSslAuthServer($ssl_auth_server)
    {
        if (!is_null($ssl_auth_server) && (mb_strlen($ssl_auth_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_auth_server when calling VoipProfileNameSip., must be smaller than or equal to 35.');
        }

        $this->container['ssl_auth_server'] = $ssl_auth_server;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


