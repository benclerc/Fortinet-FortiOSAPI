<?php
/**
 * InlineObject446
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject446 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject446 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_446';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quarantine' => 'string',
        'traffic_policy' => 'string',
        'firewall_groups' => 'string',
        'targets' => '\Fortigate\FortiOS\Model\CMDB\UserQuarantineTargets[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quarantine' => null,
        'traffic_policy' => null,
        'firewall_groups' => null,
        'targets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quarantine' => 'quarantine',
        'traffic_policy' => 'traffic-policy',
        'firewall_groups' => 'firewall-groups',
        'targets' => 'targets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quarantine' => 'setQuarantine',
        'traffic_policy' => 'setTrafficPolicy',
        'firewall_groups' => 'setFirewallGroups',
        'targets' => 'setTargets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quarantine' => 'getQuarantine',
        'traffic_policy' => 'getTrafficPolicy',
        'firewall_groups' => 'getFirewallGroups',
        'targets' => 'getTargets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const QUARANTINE_ENABLE = 'enable';
    const QUARANTINE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuarantineAllowableValues()
    {
        return [
            self::QUARANTINE_ENABLE,
            self::QUARANTINE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quarantine'] = $data['quarantine'] ?? null;
        $this->container['traffic_policy'] = $data['traffic_policy'] ?? null;
        $this->container['firewall_groups'] = $data['firewall_groups'] ?? null;
        $this->container['targets'] = $data['targets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($this->container['quarantine']) && !in_array($this->container['quarantine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quarantine', must be one of '%s'",
                $this->container['quarantine'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['traffic_policy']) && (mb_strlen($this->container['traffic_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'traffic_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['firewall_groups']) && (mb_strlen($this->container['firewall_groups']) > 79)) {
            $invalidProperties[] = "invalid value for 'firewall_groups', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['targets']) && (count($this->container['targets']) > 0)) {
            $invalidProperties[] = "invalid value for 'targets', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quarantine
     *
     * @return string|null
     */
    public function getQuarantine()
    {
        return $this->container['quarantine'];
    }

    /**
     * Sets quarantine
     *
     * @param string|null $quarantine Enable/disable quarantine.    enable:Enable quarantine.    disable:Disable quarantine.
     *
     * @return self
     */
    public function setQuarantine($quarantine)
    {
        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($quarantine) && !in_array($quarantine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quarantine', must be one of '%s'",
                    $quarantine,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quarantine'] = $quarantine;

        return $this;
    }

    /**
     * Gets traffic_policy
     *
     * @return string|null
     */
    public function getTrafficPolicy()
    {
        return $this->container['traffic_policy'];
    }

    /**
     * Sets traffic_policy
     *
     * @param string|null $traffic_policy Traffic policy for quarantined MACs.
     *
     * @return self
     */
    public function setTrafficPolicy($traffic_policy)
    {
        if (!is_null($traffic_policy) && (mb_strlen($traffic_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $traffic_policy when calling InlineObject446., must be smaller than or equal to 63.');
        }

        $this->container['traffic_policy'] = $traffic_policy;

        return $this;
    }

    /**
     * Gets firewall_groups
     *
     * @return string|null
     */
    public function getFirewallGroups()
    {
        return $this->container['firewall_groups'];
    }

    /**
     * Sets firewall_groups
     *
     * @param string|null $firewall_groups Firewall address group which includes all quarantine MAC address.
     *
     * @return self
     */
    public function setFirewallGroups($firewall_groups)
    {
        if (!is_null($firewall_groups) && (mb_strlen($firewall_groups) > 79)) {
            throw new \InvalidArgumentException('invalid length for $firewall_groups when calling InlineObject446., must be smaller than or equal to 79.');
        }

        $this->container['firewall_groups'] = $firewall_groups;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserQuarantineTargets[]|null
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserQuarantineTargets[]|null $targets Quarantine entry to hold multiple MACs.
     *
     * @return self
     */
    public function setTargets($targets)
    {

        if (!is_null($targets) && (count($targets) > 0)) {
            throw new \InvalidArgumentException('invalid value for $targets when calling InlineObject446., number of items must be less than or equal to 0.');
        }
        $this->container['targets'] = $targets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


