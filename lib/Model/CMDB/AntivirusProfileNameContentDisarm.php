<?php
/**
 * AntivirusProfileNameContentDisarm
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * AntivirusProfileNameContentDisarm Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AntivirusProfileNameContentDisarm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_antivirus_profile__name__content_disarm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'original_file_destination' => 'string',
        'error_action' => 'string',
        'office_macro' => 'string',
        'office_hylink' => 'string',
        'office_linked' => 'string',
        'office_embed' => 'string',
        'office_dde' => 'string',
        'office_action' => 'string',
        'pdf_javacode' => 'string',
        'pdf_embedfile' => 'string',
        'pdf_hyperlink' => 'string',
        'pdf_act_gotor' => 'string',
        'pdf_act_launch' => 'string',
        'pdf_act_sound' => 'string',
        'pdf_act_movie' => 'string',
        'pdf_act_java' => 'string',
        'pdf_act_form' => 'string',
        'cover_page' => 'string',
        'detect_only' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'original_file_destination' => null,
        'error_action' => null,
        'office_macro' => null,
        'office_hylink' => null,
        'office_linked' => null,
        'office_embed' => null,
        'office_dde' => null,
        'office_action' => null,
        'pdf_javacode' => null,
        'pdf_embedfile' => null,
        'pdf_hyperlink' => null,
        'pdf_act_gotor' => null,
        'pdf_act_launch' => null,
        'pdf_act_sound' => null,
        'pdf_act_movie' => null,
        'pdf_act_java' => null,
        'pdf_act_form' => null,
        'cover_page' => null,
        'detect_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'original_file_destination' => 'original-file-destination',
        'error_action' => 'error-action',
        'office_macro' => 'office-macro',
        'office_hylink' => 'office-hylink',
        'office_linked' => 'office-linked',
        'office_embed' => 'office-embed',
        'office_dde' => 'office-dde',
        'office_action' => 'office-action',
        'pdf_javacode' => 'pdf-javacode',
        'pdf_embedfile' => 'pdf-embedfile',
        'pdf_hyperlink' => 'pdf-hyperlink',
        'pdf_act_gotor' => 'pdf-act-gotor',
        'pdf_act_launch' => 'pdf-act-launch',
        'pdf_act_sound' => 'pdf-act-sound',
        'pdf_act_movie' => 'pdf-act-movie',
        'pdf_act_java' => 'pdf-act-java',
        'pdf_act_form' => 'pdf-act-form',
        'cover_page' => 'cover-page',
        'detect_only' => 'detect-only'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'original_file_destination' => 'setOriginalFileDestination',
        'error_action' => 'setErrorAction',
        'office_macro' => 'setOfficeMacro',
        'office_hylink' => 'setOfficeHylink',
        'office_linked' => 'setOfficeLinked',
        'office_embed' => 'setOfficeEmbed',
        'office_dde' => 'setOfficeDde',
        'office_action' => 'setOfficeAction',
        'pdf_javacode' => 'setPdfJavacode',
        'pdf_embedfile' => 'setPdfEmbedfile',
        'pdf_hyperlink' => 'setPdfHyperlink',
        'pdf_act_gotor' => 'setPdfActGotor',
        'pdf_act_launch' => 'setPdfActLaunch',
        'pdf_act_sound' => 'setPdfActSound',
        'pdf_act_movie' => 'setPdfActMovie',
        'pdf_act_java' => 'setPdfActJava',
        'pdf_act_form' => 'setPdfActForm',
        'cover_page' => 'setCoverPage',
        'detect_only' => 'setDetectOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'original_file_destination' => 'getOriginalFileDestination',
        'error_action' => 'getErrorAction',
        'office_macro' => 'getOfficeMacro',
        'office_hylink' => 'getOfficeHylink',
        'office_linked' => 'getOfficeLinked',
        'office_embed' => 'getOfficeEmbed',
        'office_dde' => 'getOfficeDde',
        'office_action' => 'getOfficeAction',
        'pdf_javacode' => 'getPdfJavacode',
        'pdf_embedfile' => 'getPdfEmbedfile',
        'pdf_hyperlink' => 'getPdfHyperlink',
        'pdf_act_gotor' => 'getPdfActGotor',
        'pdf_act_launch' => 'getPdfActLaunch',
        'pdf_act_sound' => 'getPdfActSound',
        'pdf_act_movie' => 'getPdfActMovie',
        'pdf_act_java' => 'getPdfActJava',
        'pdf_act_form' => 'getPdfActForm',
        'cover_page' => 'getCoverPage',
        'detect_only' => 'getDetectOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ORIGINAL_FILE_DESTINATION_FORTISANDBOX = 'fortisandbox';
    const ORIGINAL_FILE_DESTINATION_QUARANTINE = 'quarantine';
    const ORIGINAL_FILE_DESTINATION_DISCARD = 'discard';
    const ERROR_ACTION_BLOCK = 'block';
    const ERROR_ACTION_LOG_ONLY = 'log-only';
    const ERROR_ACTION_IGNORE = 'ignore';
    const OFFICE_MACRO_DISABLE = 'disable';
    const OFFICE_MACRO_ENABLE = 'enable';
    const OFFICE_HYLINK_DISABLE = 'disable';
    const OFFICE_HYLINK_ENABLE = 'enable';
    const OFFICE_LINKED_DISABLE = 'disable';
    const OFFICE_LINKED_ENABLE = 'enable';
    const OFFICE_EMBED_DISABLE = 'disable';
    const OFFICE_EMBED_ENABLE = 'enable';
    const OFFICE_DDE_DISABLE = 'disable';
    const OFFICE_DDE_ENABLE = 'enable';
    const OFFICE_ACTION_DISABLE = 'disable';
    const OFFICE_ACTION_ENABLE = 'enable';
    const PDF_JAVACODE_DISABLE = 'disable';
    const PDF_JAVACODE_ENABLE = 'enable';
    const PDF_EMBEDFILE_DISABLE = 'disable';
    const PDF_EMBEDFILE_ENABLE = 'enable';
    const PDF_HYPERLINK_DISABLE = 'disable';
    const PDF_HYPERLINK_ENABLE = 'enable';
    const PDF_ACT_GOTOR_DISABLE = 'disable';
    const PDF_ACT_GOTOR_ENABLE = 'enable';
    const PDF_ACT_LAUNCH_DISABLE = 'disable';
    const PDF_ACT_LAUNCH_ENABLE = 'enable';
    const PDF_ACT_SOUND_DISABLE = 'disable';
    const PDF_ACT_SOUND_ENABLE = 'enable';
    const PDF_ACT_MOVIE_DISABLE = 'disable';
    const PDF_ACT_MOVIE_ENABLE = 'enable';
    const PDF_ACT_JAVA_DISABLE = 'disable';
    const PDF_ACT_JAVA_ENABLE = 'enable';
    const PDF_ACT_FORM_DISABLE = 'disable';
    const PDF_ACT_FORM_ENABLE = 'enable';
    const COVER_PAGE_DISABLE = 'disable';
    const COVER_PAGE_ENABLE = 'enable';
    const DETECT_ONLY_DISABLE = 'disable';
    const DETECT_ONLY_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginalFileDestinationAllowableValues()
    {
        return [
            self::ORIGINAL_FILE_DESTINATION_FORTISANDBOX,
            self::ORIGINAL_FILE_DESTINATION_QUARANTINE,
            self::ORIGINAL_FILE_DESTINATION_DISCARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorActionAllowableValues()
    {
        return [
            self::ERROR_ACTION_BLOCK,
            self::ERROR_ACTION_LOG_ONLY,
            self::ERROR_ACTION_IGNORE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeMacroAllowableValues()
    {
        return [
            self::OFFICE_MACRO_DISABLE,
            self::OFFICE_MACRO_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeHylinkAllowableValues()
    {
        return [
            self::OFFICE_HYLINK_DISABLE,
            self::OFFICE_HYLINK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeLinkedAllowableValues()
    {
        return [
            self::OFFICE_LINKED_DISABLE,
            self::OFFICE_LINKED_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeEmbedAllowableValues()
    {
        return [
            self::OFFICE_EMBED_DISABLE,
            self::OFFICE_EMBED_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeDdeAllowableValues()
    {
        return [
            self::OFFICE_DDE_DISABLE,
            self::OFFICE_DDE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfficeActionAllowableValues()
    {
        return [
            self::OFFICE_ACTION_DISABLE,
            self::OFFICE_ACTION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfJavacodeAllowableValues()
    {
        return [
            self::PDF_JAVACODE_DISABLE,
            self::PDF_JAVACODE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfEmbedfileAllowableValues()
    {
        return [
            self::PDF_EMBEDFILE_DISABLE,
            self::PDF_EMBEDFILE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfHyperlinkAllowableValues()
    {
        return [
            self::PDF_HYPERLINK_DISABLE,
            self::PDF_HYPERLINK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActGotorAllowableValues()
    {
        return [
            self::PDF_ACT_GOTOR_DISABLE,
            self::PDF_ACT_GOTOR_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActLaunchAllowableValues()
    {
        return [
            self::PDF_ACT_LAUNCH_DISABLE,
            self::PDF_ACT_LAUNCH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActSoundAllowableValues()
    {
        return [
            self::PDF_ACT_SOUND_DISABLE,
            self::PDF_ACT_SOUND_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActMovieAllowableValues()
    {
        return [
            self::PDF_ACT_MOVIE_DISABLE,
            self::PDF_ACT_MOVIE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActJavaAllowableValues()
    {
        return [
            self::PDF_ACT_JAVA_DISABLE,
            self::PDF_ACT_JAVA_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfActFormAllowableValues()
    {
        return [
            self::PDF_ACT_FORM_DISABLE,
            self::PDF_ACT_FORM_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCoverPageAllowableValues()
    {
        return [
            self::COVER_PAGE_DISABLE,
            self::COVER_PAGE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDetectOnlyAllowableValues()
    {
        return [
            self::DETECT_ONLY_DISABLE,
            self::DETECT_ONLY_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_file_destination'] = $data['original_file_destination'] ?? null;
        $this->container['error_action'] = $data['error_action'] ?? null;
        $this->container['office_macro'] = $data['office_macro'] ?? null;
        $this->container['office_hylink'] = $data['office_hylink'] ?? null;
        $this->container['office_linked'] = $data['office_linked'] ?? null;
        $this->container['office_embed'] = $data['office_embed'] ?? null;
        $this->container['office_dde'] = $data['office_dde'] ?? null;
        $this->container['office_action'] = $data['office_action'] ?? null;
        $this->container['pdf_javacode'] = $data['pdf_javacode'] ?? null;
        $this->container['pdf_embedfile'] = $data['pdf_embedfile'] ?? null;
        $this->container['pdf_hyperlink'] = $data['pdf_hyperlink'] ?? null;
        $this->container['pdf_act_gotor'] = $data['pdf_act_gotor'] ?? null;
        $this->container['pdf_act_launch'] = $data['pdf_act_launch'] ?? null;
        $this->container['pdf_act_sound'] = $data['pdf_act_sound'] ?? null;
        $this->container['pdf_act_movie'] = $data['pdf_act_movie'] ?? null;
        $this->container['pdf_act_java'] = $data['pdf_act_java'] ?? null;
        $this->container['pdf_act_form'] = $data['pdf_act_form'] ?? null;
        $this->container['cover_page'] = $data['cover_page'] ?? null;
        $this->container['detect_only'] = $data['detect_only'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOriginalFileDestinationAllowableValues();
        if (!is_null($this->container['original_file_destination']) && !in_array($this->container['original_file_destination'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'original_file_destination', must be one of '%s'",
                $this->container['original_file_destination'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorActionAllowableValues();
        if (!is_null($this->container['error_action']) && !in_array($this->container['error_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error_action', must be one of '%s'",
                $this->container['error_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeMacroAllowableValues();
        if (!is_null($this->container['office_macro']) && !in_array($this->container['office_macro'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_macro', must be one of '%s'",
                $this->container['office_macro'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeHylinkAllowableValues();
        if (!is_null($this->container['office_hylink']) && !in_array($this->container['office_hylink'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_hylink', must be one of '%s'",
                $this->container['office_hylink'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeLinkedAllowableValues();
        if (!is_null($this->container['office_linked']) && !in_array($this->container['office_linked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_linked', must be one of '%s'",
                $this->container['office_linked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeEmbedAllowableValues();
        if (!is_null($this->container['office_embed']) && !in_array($this->container['office_embed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_embed', must be one of '%s'",
                $this->container['office_embed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeDdeAllowableValues();
        if (!is_null($this->container['office_dde']) && !in_array($this->container['office_dde'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_dde', must be one of '%s'",
                $this->container['office_dde'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOfficeActionAllowableValues();
        if (!is_null($this->container['office_action']) && !in_array($this->container['office_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'office_action', must be one of '%s'",
                $this->container['office_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfJavacodeAllowableValues();
        if (!is_null($this->container['pdf_javacode']) && !in_array($this->container['pdf_javacode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_javacode', must be one of '%s'",
                $this->container['pdf_javacode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfEmbedfileAllowableValues();
        if (!is_null($this->container['pdf_embedfile']) && !in_array($this->container['pdf_embedfile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_embedfile', must be one of '%s'",
                $this->container['pdf_embedfile'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfHyperlinkAllowableValues();
        if (!is_null($this->container['pdf_hyperlink']) && !in_array($this->container['pdf_hyperlink'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_hyperlink', must be one of '%s'",
                $this->container['pdf_hyperlink'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActGotorAllowableValues();
        if (!is_null($this->container['pdf_act_gotor']) && !in_array($this->container['pdf_act_gotor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_gotor', must be one of '%s'",
                $this->container['pdf_act_gotor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActLaunchAllowableValues();
        if (!is_null($this->container['pdf_act_launch']) && !in_array($this->container['pdf_act_launch'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_launch', must be one of '%s'",
                $this->container['pdf_act_launch'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActSoundAllowableValues();
        if (!is_null($this->container['pdf_act_sound']) && !in_array($this->container['pdf_act_sound'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_sound', must be one of '%s'",
                $this->container['pdf_act_sound'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActMovieAllowableValues();
        if (!is_null($this->container['pdf_act_movie']) && !in_array($this->container['pdf_act_movie'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_movie', must be one of '%s'",
                $this->container['pdf_act_movie'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActJavaAllowableValues();
        if (!is_null($this->container['pdf_act_java']) && !in_array($this->container['pdf_act_java'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_java', must be one of '%s'",
                $this->container['pdf_act_java'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPdfActFormAllowableValues();
        if (!is_null($this->container['pdf_act_form']) && !in_array($this->container['pdf_act_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_act_form', must be one of '%s'",
                $this->container['pdf_act_form'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCoverPageAllowableValues();
        if (!is_null($this->container['cover_page']) && !in_array($this->container['cover_page'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cover_page', must be one of '%s'",
                $this->container['cover_page'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDetectOnlyAllowableValues();
        if (!is_null($this->container['detect_only']) && !in_array($this->container['detect_only'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'detect_only', must be one of '%s'",
                $this->container['detect_only'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets original_file_destination
     *
     * @return string|null
     */
    public function getOriginalFileDestination()
    {
        return $this->container['original_file_destination'];
    }

    /**
     * Sets original_file_destination
     *
     * @param string|null $original_file_destination Destination to send original file if active content is removed.    fortisandbox:Send original file to configured FortiSandbox.    quarantine:Send original file to quarantine.    discard:Original file will be discarded after content disarm.
     *
     * @return self
     */
    public function setOriginalFileDestination($original_file_destination)
    {
        $allowedValues = $this->getOriginalFileDestinationAllowableValues();
        if (!is_null($original_file_destination) && !in_array($original_file_destination, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'original_file_destination', must be one of '%s'",
                    $original_file_destination,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['original_file_destination'] = $original_file_destination;

        return $this;
    }

    /**
     * Gets error_action
     *
     * @return string|null
     */
    public function getErrorAction()
    {
        return $this->container['error_action'];
    }

    /**
     * Sets error_action
     *
     * @param string|null $error_action Action to be taken if CDR engine encounters an unrecoverable error.    block:Block file on CDR error.    log-only:Log CDR error, but allow file.    ignore:Do nothing on CDR error.
     *
     * @return self
     */
    public function setErrorAction($error_action)
    {
        $allowedValues = $this->getErrorActionAllowableValues();
        if (!is_null($error_action) && !in_array($error_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error_action', must be one of '%s'",
                    $error_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_action'] = $error_action;

        return $this;
    }

    /**
     * Gets office_macro
     *
     * @return string|null
     */
    public function getOfficeMacro()
    {
        return $this->container['office_macro'];
    }

    /**
     * Sets office_macro
     *
     * @param string|null $office_macro Enable/disable stripping of macros in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeMacro($office_macro)
    {
        $allowedValues = $this->getOfficeMacroAllowableValues();
        if (!is_null($office_macro) && !in_array($office_macro, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_macro', must be one of '%s'",
                    $office_macro,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_macro'] = $office_macro;

        return $this;
    }

    /**
     * Gets office_hylink
     *
     * @return string|null
     */
    public function getOfficeHylink()
    {
        return $this->container['office_hylink'];
    }

    /**
     * Sets office_hylink
     *
     * @param string|null $office_hylink Enable/disable stripping of hyperlinks in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeHylink($office_hylink)
    {
        $allowedValues = $this->getOfficeHylinkAllowableValues();
        if (!is_null($office_hylink) && !in_array($office_hylink, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_hylink', must be one of '%s'",
                    $office_hylink,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_hylink'] = $office_hylink;

        return $this;
    }

    /**
     * Gets office_linked
     *
     * @return string|null
     */
    public function getOfficeLinked()
    {
        return $this->container['office_linked'];
    }

    /**
     * Sets office_linked
     *
     * @param string|null $office_linked Enable/disable stripping of linked objects in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeLinked($office_linked)
    {
        $allowedValues = $this->getOfficeLinkedAllowableValues();
        if (!is_null($office_linked) && !in_array($office_linked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_linked', must be one of '%s'",
                    $office_linked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_linked'] = $office_linked;

        return $this;
    }

    /**
     * Gets office_embed
     *
     * @return string|null
     */
    public function getOfficeEmbed()
    {
        return $this->container['office_embed'];
    }

    /**
     * Sets office_embed
     *
     * @param string|null $office_embed Enable/disable stripping of embedded objects in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeEmbed($office_embed)
    {
        $allowedValues = $this->getOfficeEmbedAllowableValues();
        if (!is_null($office_embed) && !in_array($office_embed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_embed', must be one of '%s'",
                    $office_embed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_embed'] = $office_embed;

        return $this;
    }

    /**
     * Gets office_dde
     *
     * @return string|null
     */
    public function getOfficeDde()
    {
        return $this->container['office_dde'];
    }

    /**
     * Sets office_dde
     *
     * @param string|null $office_dde Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeDde($office_dde)
    {
        $allowedValues = $this->getOfficeDdeAllowableValues();
        if (!is_null($office_dde) && !in_array($office_dde, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_dde', must be one of '%s'",
                    $office_dde,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_dde'] = $office_dde;

        return $this;
    }

    /**
     * Gets office_action
     *
     * @return string|null
     */
    public function getOfficeAction()
    {
        return $this->container['office_action'];
    }

    /**
     * Sets office_action
     *
     * @param string|null $office_action Enable/disable stripping of PowerPoint action events in Microsoft Office documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setOfficeAction($office_action)
    {
        $allowedValues = $this->getOfficeActionAllowableValues();
        if (!is_null($office_action) && !in_array($office_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'office_action', must be one of '%s'",
                    $office_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['office_action'] = $office_action;

        return $this;
    }

    /**
     * Gets pdf_javacode
     *
     * @return string|null
     */
    public function getPdfJavacode()
    {
        return $this->container['pdf_javacode'];
    }

    /**
     * Sets pdf_javacode
     *
     * @param string|null $pdf_javacode Enable/disable stripping of JavaScript code in PDF documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfJavacode($pdf_javacode)
    {
        $allowedValues = $this->getPdfJavacodeAllowableValues();
        if (!is_null($pdf_javacode) && !in_array($pdf_javacode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_javacode', must be one of '%s'",
                    $pdf_javacode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_javacode'] = $pdf_javacode;

        return $this;
    }

    /**
     * Gets pdf_embedfile
     *
     * @return string|null
     */
    public function getPdfEmbedfile()
    {
        return $this->container['pdf_embedfile'];
    }

    /**
     * Sets pdf_embedfile
     *
     * @param string|null $pdf_embedfile Enable/disable stripping of embedded files in PDF documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfEmbedfile($pdf_embedfile)
    {
        $allowedValues = $this->getPdfEmbedfileAllowableValues();
        if (!is_null($pdf_embedfile) && !in_array($pdf_embedfile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_embedfile', must be one of '%s'",
                    $pdf_embedfile,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_embedfile'] = $pdf_embedfile;

        return $this;
    }

    /**
     * Gets pdf_hyperlink
     *
     * @return string|null
     */
    public function getPdfHyperlink()
    {
        return $this->container['pdf_hyperlink'];
    }

    /**
     * Sets pdf_hyperlink
     *
     * @param string|null $pdf_hyperlink Enable/disable stripping of hyperlinks from PDF documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfHyperlink($pdf_hyperlink)
    {
        $allowedValues = $this->getPdfHyperlinkAllowableValues();
        if (!is_null($pdf_hyperlink) && !in_array($pdf_hyperlink, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_hyperlink', must be one of '%s'",
                    $pdf_hyperlink,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_hyperlink'] = $pdf_hyperlink;

        return $this;
    }

    /**
     * Gets pdf_act_gotor
     *
     * @return string|null
     */
    public function getPdfActGotor()
    {
        return $this->container['pdf_act_gotor'];
    }

    /**
     * Sets pdf_act_gotor
     *
     * @param string|null $pdf_act_gotor Enable/disable stripping of PDF document actions that access other PDF documents.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActGotor($pdf_act_gotor)
    {
        $allowedValues = $this->getPdfActGotorAllowableValues();
        if (!is_null($pdf_act_gotor) && !in_array($pdf_act_gotor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_gotor', must be one of '%s'",
                    $pdf_act_gotor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_gotor'] = $pdf_act_gotor;

        return $this;
    }

    /**
     * Gets pdf_act_launch
     *
     * @return string|null
     */
    public function getPdfActLaunch()
    {
        return $this->container['pdf_act_launch'];
    }

    /**
     * Sets pdf_act_launch
     *
     * @param string|null $pdf_act_launch Enable/disable stripping of PDF document actions that launch other applications.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActLaunch($pdf_act_launch)
    {
        $allowedValues = $this->getPdfActLaunchAllowableValues();
        if (!is_null($pdf_act_launch) && !in_array($pdf_act_launch, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_launch', must be one of '%s'",
                    $pdf_act_launch,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_launch'] = $pdf_act_launch;

        return $this;
    }

    /**
     * Gets pdf_act_sound
     *
     * @return string|null
     */
    public function getPdfActSound()
    {
        return $this->container['pdf_act_sound'];
    }

    /**
     * Sets pdf_act_sound
     *
     * @param string|null $pdf_act_sound Enable/disable stripping of PDF document actions that play a sound.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActSound($pdf_act_sound)
    {
        $allowedValues = $this->getPdfActSoundAllowableValues();
        if (!is_null($pdf_act_sound) && !in_array($pdf_act_sound, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_sound', must be one of '%s'",
                    $pdf_act_sound,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_sound'] = $pdf_act_sound;

        return $this;
    }

    /**
     * Gets pdf_act_movie
     *
     * @return string|null
     */
    public function getPdfActMovie()
    {
        return $this->container['pdf_act_movie'];
    }

    /**
     * Sets pdf_act_movie
     *
     * @param string|null $pdf_act_movie Enable/disable stripping of PDF document actions that play a movie.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActMovie($pdf_act_movie)
    {
        $allowedValues = $this->getPdfActMovieAllowableValues();
        if (!is_null($pdf_act_movie) && !in_array($pdf_act_movie, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_movie', must be one of '%s'",
                    $pdf_act_movie,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_movie'] = $pdf_act_movie;

        return $this;
    }

    /**
     * Gets pdf_act_java
     *
     * @return string|null
     */
    public function getPdfActJava()
    {
        return $this->container['pdf_act_java'];
    }

    /**
     * Sets pdf_act_java
     *
     * @param string|null $pdf_act_java Enable/disable stripping of PDF document actions that execute JavaScript code.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActJava($pdf_act_java)
    {
        $allowedValues = $this->getPdfActJavaAllowableValues();
        if (!is_null($pdf_act_java) && !in_array($pdf_act_java, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_java', must be one of '%s'",
                    $pdf_act_java,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_java'] = $pdf_act_java;

        return $this;
    }

    /**
     * Gets pdf_act_form
     *
     * @return string|null
     */
    public function getPdfActForm()
    {
        return $this->container['pdf_act_form'];
    }

    /**
     * Sets pdf_act_form
     *
     * @param string|null $pdf_act_form Enable/disable stripping of PDF document actions that submit data to other targets.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setPdfActForm($pdf_act_form)
    {
        $allowedValues = $this->getPdfActFormAllowableValues();
        if (!is_null($pdf_act_form) && !in_array($pdf_act_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_act_form', must be one of '%s'",
                    $pdf_act_form,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_act_form'] = $pdf_act_form;

        return $this;
    }

    /**
     * Gets cover_page
     *
     * @return string|null
     */
    public function getCoverPage()
    {
        return $this->container['cover_page'];
    }

    /**
     * Sets cover_page
     *
     * @param string|null $cover_page Enable/disable inserting a cover page into the disarmed document.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setCoverPage($cover_page)
    {
        $allowedValues = $this->getCoverPageAllowableValues();
        if (!is_null($cover_page) && !in_array($cover_page, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cover_page', must be one of '%s'",
                    $cover_page,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cover_page'] = $cover_page;

        return $this;
    }

    /**
     * Gets detect_only
     *
     * @return string|null
     */
    public function getDetectOnly()
    {
        return $this->container['detect_only'];
    }

    /**
     * Sets detect_only
     *
     * @param string|null $detect_only Enable/disable only detect disarmable files, do not alter content.    disable:Disable this Content Disarm and Reconstruction feature.    enable:Enable this Content Disarm and Reconstruction feature.
     *
     * @return self
     */
    public function setDetectOnly($detect_only)
    {
        $allowedValues = $this->getDetectOnlyAllowableValues();
        if (!is_null($detect_only) && !in_array($detect_only, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'detect_only', must be one of '%s'",
                    $detect_only,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['detect_only'] = $detect_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


