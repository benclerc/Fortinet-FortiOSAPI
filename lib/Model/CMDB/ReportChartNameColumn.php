<?php
/**
 * ReportChartNameColumn
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportChartNameColumn Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportChartNameColumn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_chart__name__column';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'header_value' => 'string',
        'detail_value' => 'string',
        'footer_value' => 'string',
        'detail_unit' => 'string',
        'footer_unit' => 'string',
        'mapping' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameMapping[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'header_value' => null,
        'detail_value' => null,
        'footer_value' => null,
        'detail_unit' => null,
        'footer_unit' => null,
        'mapping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'header_value' => 'header-value',
        'detail_value' => 'detail-value',
        'footer_value' => 'footer-value',
        'detail_unit' => 'detail-unit',
        'footer_unit' => 'footer-unit',
        'mapping' => 'mapping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'header_value' => 'setHeaderValue',
        'detail_value' => 'setDetailValue',
        'footer_value' => 'setFooterValue',
        'detail_unit' => 'setDetailUnit',
        'footer_unit' => 'setFooterUnit',
        'mapping' => 'setMapping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'header_value' => 'getHeaderValue',
        'detail_value' => 'getDetailValue',
        'footer_value' => 'getFooterValue',
        'detail_unit' => 'getDetailUnit',
        'footer_unit' => 'getFooterUnit',
        'mapping' => 'getMapping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['header_value'] = $data['header_value'] ?? null;
        $this->container['detail_value'] = $data['detail_value'] ?? null;
        $this->container['footer_value'] = $data['footer_value'] ?? null;
        $this->container['detail_unit'] = $data['detail_unit'] ?? null;
        $this->container['footer_unit'] = $data['footer_unit'] ?? null;
        $this->container['mapping'] = $data['mapping'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['header_value']) && (mb_strlen($this->container['header_value']) > 127)) {
            $invalidProperties[] = "invalid value for 'header_value', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['detail_value']) && (mb_strlen($this->container['detail_value']) > 127)) {
            $invalidProperties[] = "invalid value for 'detail_value', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['footer_value']) && (mb_strlen($this->container['footer_value']) > 127)) {
            $invalidProperties[] = "invalid value for 'footer_value', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['detail_unit']) && (mb_strlen($this->container['detail_unit']) > 35)) {
            $invalidProperties[] = "invalid value for 'detail_unit', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['footer_unit']) && (mb_strlen($this->container['footer_unit']) > 35)) {
            $invalidProperties[] = "invalid value for 'footer_unit', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['mapping']) && (count($this->container['mapping']) > 8)) {
            $invalidProperties[] = "invalid value for 'mapping', number of items must be less than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportChartNameColumn., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportChartNameColumn., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets header_value
     *
     * @return string|null
     */
    public function getHeaderValue()
    {
        return $this->container['header_value'];
    }

    /**
     * Sets header_value
     *
     * @param string|null $header_value Display name of table header.
     *
     * @return self
     */
    public function setHeaderValue($header_value)
    {
        if (!is_null($header_value) && (mb_strlen($header_value) > 127)) {
            throw new \InvalidArgumentException('invalid length for $header_value when calling ReportChartNameColumn., must be smaller than or equal to 127.');
        }

        $this->container['header_value'] = $header_value;

        return $this;
    }

    /**
     * Gets detail_value
     *
     * @return string|null
     */
    public function getDetailValue()
    {
        return $this->container['detail_value'];
    }

    /**
     * Sets detail_value
     *
     * @param string|null $detail_value Detail value of column.
     *
     * @return self
     */
    public function setDetailValue($detail_value)
    {
        if (!is_null($detail_value) && (mb_strlen($detail_value) > 127)) {
            throw new \InvalidArgumentException('invalid length for $detail_value when calling ReportChartNameColumn., must be smaller than or equal to 127.');
        }

        $this->container['detail_value'] = $detail_value;

        return $this;
    }

    /**
     * Gets footer_value
     *
     * @return string|null
     */
    public function getFooterValue()
    {
        return $this->container['footer_value'];
    }

    /**
     * Sets footer_value
     *
     * @param string|null $footer_value Footer value of column.
     *
     * @return self
     */
    public function setFooterValue($footer_value)
    {
        if (!is_null($footer_value) && (mb_strlen($footer_value) > 127)) {
            throw new \InvalidArgumentException('invalid length for $footer_value when calling ReportChartNameColumn., must be smaller than or equal to 127.');
        }

        $this->container['footer_value'] = $footer_value;

        return $this;
    }

    /**
     * Gets detail_unit
     *
     * @return string|null
     */
    public function getDetailUnit()
    {
        return $this->container['detail_unit'];
    }

    /**
     * Sets detail_unit
     *
     * @param string|null $detail_unit Detail unit of column.
     *
     * @return self
     */
    public function setDetailUnit($detail_unit)
    {
        if (!is_null($detail_unit) && (mb_strlen($detail_unit) > 35)) {
            throw new \InvalidArgumentException('invalid length for $detail_unit when calling ReportChartNameColumn., must be smaller than or equal to 35.');
        }

        $this->container['detail_unit'] = $detail_unit;

        return $this;
    }

    /**
     * Gets footer_unit
     *
     * @return string|null
     */
    public function getFooterUnit()
    {
        return $this->container['footer_unit'];
    }

    /**
     * Sets footer_unit
     *
     * @param string|null $footer_unit Footer unit of column.
     *
     * @return self
     */
    public function setFooterUnit($footer_unit)
    {
        if (!is_null($footer_unit) && (mb_strlen($footer_unit) > 35)) {
            throw new \InvalidArgumentException('invalid length for $footer_unit when calling ReportChartNameColumn., must be smaller than or equal to 35.');
        }

        $this->container['footer_unit'] = $footer_unit;

        return $this;
    }

    /**
     * Gets mapping
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameMapping[]|null
     */
    public function getMapping()
    {
        return $this->container['mapping'];
    }

    /**
     * Sets mapping
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameMapping[]|null $mapping Show detail in certain display value for certain condition.
     *
     * @return self
     */
    public function setMapping($mapping)
    {

        if (!is_null($mapping) && (count($mapping) > 8)) {
            throw new \InvalidArgumentException('invalid value for $mapping when calling ReportChartNameColumn., number of items must be less than or equal to 8.');
        }
        $this->container['mapping'] = $mapping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


