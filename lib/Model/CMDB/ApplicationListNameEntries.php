<?php
/**
 * ApplicationListNameEntries
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ApplicationListNameEntries Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApplicationListNameEntries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_application_list__name__entries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'risk' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameRisk[]',
        'category' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameCategory[]',
        'application' => '\Fortigate\FortiOS\Model\CMDB\ApplicationGroupNameApplication[]',
        'protocols' => 'string',
        'vendor' => 'string',
        'technology' => 'string',
        'behavior' => 'string',
        'popularity' => 'string',
        'exclusion' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameExclusion[]',
        'parameters' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameParameters[]',
        'action' => 'string',
        'log' => 'string',
        'log_packet' => 'string',
        'rate_count' => 'int',
        'rate_duration' => 'int',
        'rate_mode' => 'string',
        'rate_track' => 'string',
        'session_ttl' => 'int',
        'shaper' => 'string',
        'shaper_reverse' => 'string',
        'per_ip_shaper' => 'string',
        'quarantine' => 'string',
        'quarantine_expiry' => 'string',
        'quarantine_log' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'risk' => null,
        'category' => null,
        'application' => null,
        'protocols' => null,
        'vendor' => null,
        'technology' => null,
        'behavior' => null,
        'popularity' => null,
        'exclusion' => null,
        'parameters' => null,
        'action' => null,
        'log' => null,
        'log_packet' => null,
        'rate_count' => null,
        'rate_duration' => null,
        'rate_mode' => null,
        'rate_track' => null,
        'session_ttl' => null,
        'shaper' => null,
        'shaper_reverse' => null,
        'per_ip_shaper' => null,
        'quarantine' => null,
        'quarantine_expiry' => null,
        'quarantine_log' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'risk' => 'risk',
        'category' => 'category',
        'application' => 'application',
        'protocols' => 'protocols',
        'vendor' => 'vendor',
        'technology' => 'technology',
        'behavior' => 'behavior',
        'popularity' => 'popularity',
        'exclusion' => 'exclusion',
        'parameters' => 'parameters',
        'action' => 'action',
        'log' => 'log',
        'log_packet' => 'log-packet',
        'rate_count' => 'rate-count',
        'rate_duration' => 'rate-duration',
        'rate_mode' => 'rate-mode',
        'rate_track' => 'rate-track',
        'session_ttl' => 'session-ttl',
        'shaper' => 'shaper',
        'shaper_reverse' => 'shaper-reverse',
        'per_ip_shaper' => 'per-ip-shaper',
        'quarantine' => 'quarantine',
        'quarantine_expiry' => 'quarantine-expiry',
        'quarantine_log' => 'quarantine-log'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'risk' => 'setRisk',
        'category' => 'setCategory',
        'application' => 'setApplication',
        'protocols' => 'setProtocols',
        'vendor' => 'setVendor',
        'technology' => 'setTechnology',
        'behavior' => 'setBehavior',
        'popularity' => 'setPopularity',
        'exclusion' => 'setExclusion',
        'parameters' => 'setParameters',
        'action' => 'setAction',
        'log' => 'setLog',
        'log_packet' => 'setLogPacket',
        'rate_count' => 'setRateCount',
        'rate_duration' => 'setRateDuration',
        'rate_mode' => 'setRateMode',
        'rate_track' => 'setRateTrack',
        'session_ttl' => 'setSessionTtl',
        'shaper' => 'setShaper',
        'shaper_reverse' => 'setShaperReverse',
        'per_ip_shaper' => 'setPerIpShaper',
        'quarantine' => 'setQuarantine',
        'quarantine_expiry' => 'setQuarantineExpiry',
        'quarantine_log' => 'setQuarantineLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'risk' => 'getRisk',
        'category' => 'getCategory',
        'application' => 'getApplication',
        'protocols' => 'getProtocols',
        'vendor' => 'getVendor',
        'technology' => 'getTechnology',
        'behavior' => 'getBehavior',
        'popularity' => 'getPopularity',
        'exclusion' => 'getExclusion',
        'parameters' => 'getParameters',
        'action' => 'getAction',
        'log' => 'getLog',
        'log_packet' => 'getLogPacket',
        'rate_count' => 'getRateCount',
        'rate_duration' => 'getRateDuration',
        'rate_mode' => 'getRateMode',
        'rate_track' => 'getRateTrack',
        'session_ttl' => 'getSessionTtl',
        'shaper' => 'getShaper',
        'shaper_reverse' => 'getShaperReverse',
        'per_ip_shaper' => 'getPerIpShaper',
        'quarantine' => 'getQuarantine',
        'quarantine_expiry' => 'getQuarantineExpiry',
        'quarantine_log' => 'getQuarantineLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const POPULARITY__1 = '1';
    const POPULARITY__2 = '2';
    const POPULARITY__3 = '3';
    const POPULARITY__4 = '4';
    const POPULARITY__5 = '5';
    const ACTION_PASS = 'pass';
    const ACTION_BLOCK = 'block';
    const ACTION_RESET = 'reset';
    const LOG_DISABLE = 'disable';
    const LOG_ENABLE = 'enable';
    const LOG_PACKET_DISABLE = 'disable';
    const LOG_PACKET_ENABLE = 'enable';
    const RATE_MODE_PERIODICAL = 'periodical';
    const RATE_MODE_CONTINUOUS = 'continuous';
    const RATE_TRACK_NONE = 'none';
    const RATE_TRACK_SRC_IP = 'src-ip';
    const RATE_TRACK_DEST_IP = 'dest-ip';
    const RATE_TRACK_DHCP_CLIENT_MAC = 'dhcp-client-mac';
    const RATE_TRACK_DNS_DOMAIN = 'dns-domain';
    const QUARANTINE_NONE = 'none';
    const QUARANTINE_ATTACKER = 'attacker';
    const QUARANTINE_LOG_DISABLE = 'disable';
    const QUARANTINE_LOG_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPopularityAllowableValues()
    {
        return [
            self::POPULARITY__1,
            self::POPULARITY__2,
            self::POPULARITY__3,
            self::POPULARITY__4,
            self::POPULARITY__5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_PASS,
            self::ACTION_BLOCK,
            self::ACTION_RESET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllowableValues()
    {
        return [
            self::LOG_DISABLE,
            self::LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogPacketAllowableValues()
    {
        return [
            self::LOG_PACKET_DISABLE,
            self::LOG_PACKET_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateModeAllowableValues()
    {
        return [
            self::RATE_MODE_PERIODICAL,
            self::RATE_MODE_CONTINUOUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTrackAllowableValues()
    {
        return [
            self::RATE_TRACK_NONE,
            self::RATE_TRACK_SRC_IP,
            self::RATE_TRACK_DEST_IP,
            self::RATE_TRACK_DHCP_CLIENT_MAC,
            self::RATE_TRACK_DNS_DOMAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuarantineAllowableValues()
    {
        return [
            self::QUARANTINE_NONE,
            self::QUARANTINE_ATTACKER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuarantineLogAllowableValues()
    {
        return [
            self::QUARANTINE_LOG_DISABLE,
            self::QUARANTINE_LOG_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['risk'] = $data['risk'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['protocols'] = $data['protocols'] ?? null;
        $this->container['vendor'] = $data['vendor'] ?? null;
        $this->container['technology'] = $data['technology'] ?? null;
        $this->container['behavior'] = $data['behavior'] ?? null;
        $this->container['popularity'] = $data['popularity'] ?? null;
        $this->container['exclusion'] = $data['exclusion'] ?? null;
        $this->container['parameters'] = $data['parameters'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['log_packet'] = $data['log_packet'] ?? null;
        $this->container['rate_count'] = $data['rate_count'] ?? null;
        $this->container['rate_duration'] = $data['rate_duration'] ?? null;
        $this->container['rate_mode'] = $data['rate_mode'] ?? null;
        $this->container['rate_track'] = $data['rate_track'] ?? null;
        $this->container['session_ttl'] = $data['session_ttl'] ?? null;
        $this->container['shaper'] = $data['shaper'] ?? null;
        $this->container['shaper_reverse'] = $data['shaper_reverse'] ?? null;
        $this->container['per_ip_shaper'] = $data['per_ip_shaper'] ?? null;
        $this->container['quarantine'] = $data['quarantine'] ?? null;
        $this->container['quarantine_expiry'] = $data['quarantine_expiry'] ?? null;
        $this->container['quarantine_log'] = $data['quarantine_log'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['risk']) && (count($this->container['risk']) > 0)) {
            $invalidProperties[] = "invalid value for 'risk', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['category']) && (count($this->container['category']) > 0)) {
            $invalidProperties[] = "invalid value for 'category', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['application']) && (count($this->container['application']) > 0)) {
            $invalidProperties[] = "invalid value for 'application', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getPopularityAllowableValues();
        if (!is_null($this->container['popularity']) && !in_array($this->container['popularity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'popularity', must be one of '%s'",
                $this->container['popularity'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['exclusion']) && (count($this->container['exclusion']) > 0)) {
            $invalidProperties[] = "invalid value for 'exclusion', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['parameters']) && (count($this->container['parameters']) > 0)) {
            $invalidProperties[] = "invalid value for 'parameters', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($this->container['log']) && !in_array($this->container['log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log', must be one of '%s'",
                $this->container['log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogPacketAllowableValues();
        if (!is_null($this->container['log_packet']) && !in_array($this->container['log_packet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_packet', must be one of '%s'",
                $this->container['log_packet'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rate_count']) && ($this->container['rate_count'] > 65535)) {
            $invalidProperties[] = "invalid value for 'rate_count', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['rate_count']) && ($this->container['rate_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'rate_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rate_duration']) && ($this->container['rate_duration'] > 65535)) {
            $invalidProperties[] = "invalid value for 'rate_duration', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['rate_duration']) && ($this->container['rate_duration'] < 1)) {
            $invalidProperties[] = "invalid value for 'rate_duration', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRateModeAllowableValues();
        if (!is_null($this->container['rate_mode']) && !in_array($this->container['rate_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_mode', must be one of '%s'",
                $this->container['rate_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateTrackAllowableValues();
        if (!is_null($this->container['rate_track']) && !in_array($this->container['rate_track'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_track', must be one of '%s'",
                $this->container['rate_track'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['session_ttl']) && ($this->container['session_ttl'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'session_ttl', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['session_ttl']) && ($this->container['session_ttl'] < 0)) {
            $invalidProperties[] = "invalid value for 'session_ttl', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shaper']) && (mb_strlen($this->container['shaper']) > 35)) {
            $invalidProperties[] = "invalid value for 'shaper', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['shaper_reverse']) && (mb_strlen($this->container['shaper_reverse']) > 35)) {
            $invalidProperties[] = "invalid value for 'shaper_reverse', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['per_ip_shaper']) && (mb_strlen($this->container['per_ip_shaper']) > 35)) {
            $invalidProperties[] = "invalid value for 'per_ip_shaper', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($this->container['quarantine']) && !in_array($this->container['quarantine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quarantine', must be one of '%s'",
                $this->container['quarantine'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQuarantineLogAllowableValues();
        if (!is_null($this->container['quarantine_log']) && !in_array($this->container['quarantine_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quarantine_log', must be one of '%s'",
                $this->container['quarantine_log'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Entry ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApplicationListNameEntries., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApplicationListNameEntries., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameRisk[]|null
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameRisk[]|null $risk Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
     *
     * @return self
     */
    public function setRisk($risk)
    {

        if (!is_null($risk) && (count($risk) > 0)) {
            throw new \InvalidArgumentException('invalid value for $risk when calling ApplicationListNameEntries., number of items must be less than or equal to 0.');
        }
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameCategory[]|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameCategory[]|null $category Category ID list.
     *
     * @return self
     */
    public function setCategory($category)
    {

        if (!is_null($category) && (count($category) > 0)) {
            throw new \InvalidArgumentException('invalid value for $category when calling ApplicationListNameEntries., number of items must be less than or equal to 0.');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationGroupNameApplication[]|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationGroupNameApplication[]|null $application ID of allowed applications.
     *
     * @return self
     */
    public function setApplication($application)
    {

        if (!is_null($application) && (count($application) > 0)) {
            throw new \InvalidArgumentException('invalid value for $application when calling ApplicationListNameEntries., number of items must be less than or equal to 0.');
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets protocols
     *
     * @return string|null
     */
    public function getProtocols()
    {
        return $this->container['protocols'];
    }

    /**
     * Sets protocols
     *
     * @param string|null $protocols Application protocol filter.
     *
     * @return self
     */
    public function setProtocols($protocols)
    {
        $this->container['protocols'] = $protocols;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor Application vendor filter.
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return string|null
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param string|null $technology Application technology filter.
     *
     * @return self
     */
    public function setTechnology($technology)
    {
        $this->container['technology'] = $technology;

        return $this;
    }

    /**
     * Gets behavior
     *
     * @return string|null
     */
    public function getBehavior()
    {
        return $this->container['behavior'];
    }

    /**
     * Sets behavior
     *
     * @param string|null $behavior Application behavior filter.
     *
     * @return self
     */
    public function setBehavior($behavior)
    {
        $this->container['behavior'] = $behavior;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return string|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param string|null $popularity Application popularity filter (1 - 5, from least to most popular).    1:Popularity level 1.    2:Popularity level 2.    3:Popularity level 3.    4:Popularity level 4.    5:Popularity level 5.
     *
     * @return self
     */
    public function setPopularity($popularity)
    {
        $allowedValues = $this->getPopularityAllowableValues();
        if (!is_null($popularity) && !in_array($popularity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'popularity', must be one of '%s'",
                    $popularity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets exclusion
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameExclusion[]|null
     */
    public function getExclusion()
    {
        return $this->container['exclusion'];
    }

    /**
     * Sets exclusion
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameExclusion[]|null $exclusion ID of excluded applications.
     *
     * @return self
     */
    public function setExclusion($exclusion)
    {

        if (!is_null($exclusion) && (count($exclusion) > 0)) {
            throw new \InvalidArgumentException('invalid value for $exclusion when calling ApplicationListNameEntries., number of items must be less than or equal to 0.');
        }
        $this->container['exclusion'] = $exclusion;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameParameters[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameParameters[]|null $parameters Application parameters.
     *
     * @return self
     */
    public function setParameters($parameters)
    {

        if (!is_null($parameters) && (count($parameters) > 0)) {
            throw new \InvalidArgumentException('invalid value for $parameters when calling ApplicationListNameEntries., number of items must be less than or equal to 0.');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Pass or block traffic, or reset connection for traffic from this application.    pass:Pass or allow matching traffic.    block:Block or drop matching traffic.    reset:Reset sessions for matching traffic.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string|null $log Enable/disable logging for this application list.    disable:Disable logging.    enable:Enable logging.
     *
     * @return self
     */
    public function setLog($log)
    {
        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($log) && !in_array($log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log', must be one of '%s'",
                    $log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets log_packet
     *
     * @return string|null
     */
    public function getLogPacket()
    {
        return $this->container['log_packet'];
    }

    /**
     * Sets log_packet
     *
     * @param string|null $log_packet Enable/disable packet logging.    disable:Disable packet logging.    enable:Enable packet logging.
     *
     * @return self
     */
    public function setLogPacket($log_packet)
    {
        $allowedValues = $this->getLogPacketAllowableValues();
        if (!is_null($log_packet) && !in_array($log_packet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_packet', must be one of '%s'",
                    $log_packet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_packet'] = $log_packet;

        return $this;
    }

    /**
     * Gets rate_count
     *
     * @return int|null
     */
    public function getRateCount()
    {
        return $this->container['rate_count'];
    }

    /**
     * Sets rate_count
     *
     * @param int|null $rate_count Count of the rate.
     *
     * @return self
     */
    public function setRateCount($rate_count)
    {

        if (!is_null($rate_count) && ($rate_count > 65535)) {
            throw new \InvalidArgumentException('invalid value for $rate_count when calling ApplicationListNameEntries., must be smaller than or equal to 65535.');
        }
        if (!is_null($rate_count) && ($rate_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $rate_count when calling ApplicationListNameEntries., must be bigger than or equal to 0.');
        }

        $this->container['rate_count'] = $rate_count;

        return $this;
    }

    /**
     * Gets rate_duration
     *
     * @return int|null
     */
    public function getRateDuration()
    {
        return $this->container['rate_duration'];
    }

    /**
     * Sets rate_duration
     *
     * @param int|null $rate_duration Duration (sec) of the rate.
     *
     * @return self
     */
    public function setRateDuration($rate_duration)
    {

        if (!is_null($rate_duration) && ($rate_duration > 65535)) {
            throw new \InvalidArgumentException('invalid value for $rate_duration when calling ApplicationListNameEntries., must be smaller than or equal to 65535.');
        }
        if (!is_null($rate_duration) && ($rate_duration < 1)) {
            throw new \InvalidArgumentException('invalid value for $rate_duration when calling ApplicationListNameEntries., must be bigger than or equal to 1.');
        }

        $this->container['rate_duration'] = $rate_duration;

        return $this;
    }

    /**
     * Gets rate_mode
     *
     * @return string|null
     */
    public function getRateMode()
    {
        return $this->container['rate_mode'];
    }

    /**
     * Sets rate_mode
     *
     * @param string|null $rate_mode Rate limit mode.    periodical:Allow configured number of packets every rate-duration.    continuous:Block packets once the rate is reached.
     *
     * @return self
     */
    public function setRateMode($rate_mode)
    {
        $allowedValues = $this->getRateModeAllowableValues();
        if (!is_null($rate_mode) && !in_array($rate_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_mode', must be one of '%s'",
                    $rate_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_mode'] = $rate_mode;

        return $this;
    }

    /**
     * Gets rate_track
     *
     * @return string|null
     */
    public function getRateTrack()
    {
        return $this->container['rate_track'];
    }

    /**
     * Sets rate_track
     *
     * @param string|null $rate_track Track the packet protocol field.    none:none    src-ip:Source IP.    dest-ip:Destination IP.    dhcp-client-mac:DHCP client.    dns-domain:DNS domain.
     *
     * @return self
     */
    public function setRateTrack($rate_track)
    {
        $allowedValues = $this->getRateTrackAllowableValues();
        if (!is_null($rate_track) && !in_array($rate_track, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_track', must be one of '%s'",
                    $rate_track,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_track'] = $rate_track;

        return $this;
    }

    /**
     * Gets session_ttl
     *
     * @return int|null
     */
    public function getSessionTtl()
    {
        return $this->container['session_ttl'];
    }

    /**
     * Sets session_ttl
     *
     * @param int|null $session_ttl Session TTL (0 = default).
     *
     * @return self
     */
    public function setSessionTtl($session_ttl)
    {

        if (!is_null($session_ttl) && ($session_ttl > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $session_ttl when calling ApplicationListNameEntries., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($session_ttl) && ($session_ttl < 0)) {
            throw new \InvalidArgumentException('invalid value for $session_ttl when calling ApplicationListNameEntries., must be bigger than or equal to 0.');
        }

        $this->container['session_ttl'] = $session_ttl;

        return $this;
    }

    /**
     * Gets shaper
     *
     * @return string|null
     */
    public function getShaper()
    {
        return $this->container['shaper'];
    }

    /**
     * Sets shaper
     *
     * @param string|null $shaper Traffic shaper.
     *
     * @return self
     */
    public function setShaper($shaper)
    {
        if (!is_null($shaper) && (mb_strlen($shaper) > 35)) {
            throw new \InvalidArgumentException('invalid length for $shaper when calling ApplicationListNameEntries., must be smaller than or equal to 35.');
        }

        $this->container['shaper'] = $shaper;

        return $this;
    }

    /**
     * Gets shaper_reverse
     *
     * @return string|null
     */
    public function getShaperReverse()
    {
        return $this->container['shaper_reverse'];
    }

    /**
     * Sets shaper_reverse
     *
     * @param string|null $shaper_reverse Reverse traffic shaper.
     *
     * @return self
     */
    public function setShaperReverse($shaper_reverse)
    {
        if (!is_null($shaper_reverse) && (mb_strlen($shaper_reverse) > 35)) {
            throw new \InvalidArgumentException('invalid length for $shaper_reverse when calling ApplicationListNameEntries., must be smaller than or equal to 35.');
        }

        $this->container['shaper_reverse'] = $shaper_reverse;

        return $this;
    }

    /**
     * Gets per_ip_shaper
     *
     * @return string|null
     */
    public function getPerIpShaper()
    {
        return $this->container['per_ip_shaper'];
    }

    /**
     * Sets per_ip_shaper
     *
     * @param string|null $per_ip_shaper Per-IP traffic shaper.
     *
     * @return self
     */
    public function setPerIpShaper($per_ip_shaper)
    {
        if (!is_null($per_ip_shaper) && (mb_strlen($per_ip_shaper) > 35)) {
            throw new \InvalidArgumentException('invalid length for $per_ip_shaper when calling ApplicationListNameEntries., must be smaller than or equal to 35.');
        }

        $this->container['per_ip_shaper'] = $per_ip_shaper;

        return $this;
    }

    /**
     * Gets quarantine
     *
     * @return string|null
     */
    public function getQuarantine()
    {
        return $this->container['quarantine'];
    }

    /**
     * Sets quarantine
     *
     * @param string|null $quarantine Quarantine method.    none:Quarantine is disabled.    attacker:Block all traffic sent from attacker's IP address. The attacker's IP address is also added to the banned user list. The target's address is not affected.
     *
     * @return self
     */
    public function setQuarantine($quarantine)
    {
        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($quarantine) && !in_array($quarantine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quarantine', must be one of '%s'",
                    $quarantine,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quarantine'] = $quarantine;

        return $this;
    }

    /**
     * Gets quarantine_expiry
     *
     * @return string|null
     */
    public function getQuarantineExpiry()
    {
        return $this->container['quarantine_expiry'];
    }

    /**
     * Sets quarantine_expiry
     *
     * @param string|null $quarantine_expiry Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
     *
     * @return self
     */
    public function setQuarantineExpiry($quarantine_expiry)
    {
        $this->container['quarantine_expiry'] = $quarantine_expiry;

        return $this;
    }

    /**
     * Gets quarantine_log
     *
     * @return string|null
     */
    public function getQuarantineLog()
    {
        return $this->container['quarantine_log'];
    }

    /**
     * Sets quarantine_log
     *
     * @param string|null $quarantine_log Enable/disable quarantine logging.    disable:Disable quarantine logging.    enable:Enable quarantine logging.
     *
     * @return self
     */
    public function setQuarantineLog($quarantine_log)
    {
        $allowedValues = $this->getQuarantineLogAllowableValues();
        if (!is_null($quarantine_log) && !in_array($quarantine_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quarantine_log', must be one of '%s'",
                    $quarantine_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quarantine_log'] = $quarantine_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


