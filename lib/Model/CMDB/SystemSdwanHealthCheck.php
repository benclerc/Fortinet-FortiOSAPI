<?php
/**
 * SystemSdwanHealthCheck
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanHealthCheck Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanHealthCheck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_health_check';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'probe_packets' => 'string',
        'addr_mode' => 'string',
        'system_dns' => 'string',
        'server' => 'string',
        'protocol' => 'string',
        'port' => 'int',
        'quality_measured_method' => 'string',
        'security_mode' => 'string',
        'user' => 'string',
        'password' => 'string',
        'packet_size' => 'int',
        'ha_priority' => 'int',
        'ftp_mode' => 'string',
        'ftp_file' => 'string',
        'http_get' => 'string',
        'http_agent' => 'string',
        'http_match' => 'string',
        'dns_request_domain' => 'string',
        'dns_match_ip' => 'string',
        'interval' => 'int',
        'probe_timeout' => 'int',
        'failtime' => 'int',
        'recoverytime' => 'int',
        'probe_count' => 'int',
        'diffservcode' => 'string',
        'update_cascade_interface' => 'string',
        'update_static_route' => 'string',
        'sla_fail_log_period' => 'int',
        'sla_pass_log_period' => 'int',
        'threshold_warning_packetloss' => 'int',
        'threshold_alert_packetloss' => 'int',
        'threshold_warning_latency' => 'int',
        'threshold_alert_latency' => 'int',
        'threshold_warning_jitter' => 'int',
        'threshold_alert_jitter' => 'int',
        'members' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]',
        'sla' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanSla[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'probe_packets' => null,
        'addr_mode' => null,
        'system_dns' => null,
        'server' => null,
        'protocol' => null,
        'port' => null,
        'quality_measured_method' => null,
        'security_mode' => null,
        'user' => null,
        'password' => 'password',
        'packet_size' => null,
        'ha_priority' => null,
        'ftp_mode' => null,
        'ftp_file' => null,
        'http_get' => null,
        'http_agent' => null,
        'http_match' => null,
        'dns_request_domain' => null,
        'dns_match_ip' => 'ipv4',
        'interval' => null,
        'probe_timeout' => null,
        'failtime' => null,
        'recoverytime' => null,
        'probe_count' => null,
        'diffservcode' => null,
        'update_cascade_interface' => null,
        'update_static_route' => null,
        'sla_fail_log_period' => null,
        'sla_pass_log_period' => null,
        'threshold_warning_packetloss' => null,
        'threshold_alert_packetloss' => null,
        'threshold_warning_latency' => null,
        'threshold_alert_latency' => null,
        'threshold_warning_jitter' => null,
        'threshold_alert_jitter' => null,
        'members' => null,
        'sla' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'probe_packets' => 'probe-packets',
        'addr_mode' => 'addr-mode',
        'system_dns' => 'system-dns',
        'server' => 'server',
        'protocol' => 'protocol',
        'port' => 'port',
        'quality_measured_method' => 'quality-measured-method',
        'security_mode' => 'security-mode',
        'user' => 'user',
        'password' => 'password',
        'packet_size' => 'packet-size',
        'ha_priority' => 'ha-priority',
        'ftp_mode' => 'ftp-mode',
        'ftp_file' => 'ftp-file',
        'http_get' => 'http-get',
        'http_agent' => 'http-agent',
        'http_match' => 'http-match',
        'dns_request_domain' => 'dns-request-domain',
        'dns_match_ip' => 'dns-match-ip',
        'interval' => 'interval',
        'probe_timeout' => 'probe-timeout',
        'failtime' => 'failtime',
        'recoverytime' => 'recoverytime',
        'probe_count' => 'probe-count',
        'diffservcode' => 'diffservcode',
        'update_cascade_interface' => 'update-cascade-interface',
        'update_static_route' => 'update-static-route',
        'sla_fail_log_period' => 'sla-fail-log-period',
        'sla_pass_log_period' => 'sla-pass-log-period',
        'threshold_warning_packetloss' => 'threshold-warning-packetloss',
        'threshold_alert_packetloss' => 'threshold-alert-packetloss',
        'threshold_warning_latency' => 'threshold-warning-latency',
        'threshold_alert_latency' => 'threshold-alert-latency',
        'threshold_warning_jitter' => 'threshold-warning-jitter',
        'threshold_alert_jitter' => 'threshold-alert-jitter',
        'members' => 'members',
        'sla' => 'sla'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'probe_packets' => 'setProbePackets',
        'addr_mode' => 'setAddrMode',
        'system_dns' => 'setSystemDns',
        'server' => 'setServer',
        'protocol' => 'setProtocol',
        'port' => 'setPort',
        'quality_measured_method' => 'setQualityMeasuredMethod',
        'security_mode' => 'setSecurityMode',
        'user' => 'setUser',
        'password' => 'setPassword',
        'packet_size' => 'setPacketSize',
        'ha_priority' => 'setHaPriority',
        'ftp_mode' => 'setFtpMode',
        'ftp_file' => 'setFtpFile',
        'http_get' => 'setHttpGet',
        'http_agent' => 'setHttpAgent',
        'http_match' => 'setHttpMatch',
        'dns_request_domain' => 'setDnsRequestDomain',
        'dns_match_ip' => 'setDnsMatchIp',
        'interval' => 'setInterval',
        'probe_timeout' => 'setProbeTimeout',
        'failtime' => 'setFailtime',
        'recoverytime' => 'setRecoverytime',
        'probe_count' => 'setProbeCount',
        'diffservcode' => 'setDiffservcode',
        'update_cascade_interface' => 'setUpdateCascadeInterface',
        'update_static_route' => 'setUpdateStaticRoute',
        'sla_fail_log_period' => 'setSlaFailLogPeriod',
        'sla_pass_log_period' => 'setSlaPassLogPeriod',
        'threshold_warning_packetloss' => 'setThresholdWarningPacketloss',
        'threshold_alert_packetloss' => 'setThresholdAlertPacketloss',
        'threshold_warning_latency' => 'setThresholdWarningLatency',
        'threshold_alert_latency' => 'setThresholdAlertLatency',
        'threshold_warning_jitter' => 'setThresholdWarningJitter',
        'threshold_alert_jitter' => 'setThresholdAlertJitter',
        'members' => 'setMembers',
        'sla' => 'setSla'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'probe_packets' => 'getProbePackets',
        'addr_mode' => 'getAddrMode',
        'system_dns' => 'getSystemDns',
        'server' => 'getServer',
        'protocol' => 'getProtocol',
        'port' => 'getPort',
        'quality_measured_method' => 'getQualityMeasuredMethod',
        'security_mode' => 'getSecurityMode',
        'user' => 'getUser',
        'password' => 'getPassword',
        'packet_size' => 'getPacketSize',
        'ha_priority' => 'getHaPriority',
        'ftp_mode' => 'getFtpMode',
        'ftp_file' => 'getFtpFile',
        'http_get' => 'getHttpGet',
        'http_agent' => 'getHttpAgent',
        'http_match' => 'getHttpMatch',
        'dns_request_domain' => 'getDnsRequestDomain',
        'dns_match_ip' => 'getDnsMatchIp',
        'interval' => 'getInterval',
        'probe_timeout' => 'getProbeTimeout',
        'failtime' => 'getFailtime',
        'recoverytime' => 'getRecoverytime',
        'probe_count' => 'getProbeCount',
        'diffservcode' => 'getDiffservcode',
        'update_cascade_interface' => 'getUpdateCascadeInterface',
        'update_static_route' => 'getUpdateStaticRoute',
        'sla_fail_log_period' => 'getSlaFailLogPeriod',
        'sla_pass_log_period' => 'getSlaPassLogPeriod',
        'threshold_warning_packetloss' => 'getThresholdWarningPacketloss',
        'threshold_alert_packetloss' => 'getThresholdAlertPacketloss',
        'threshold_warning_latency' => 'getThresholdWarningLatency',
        'threshold_alert_latency' => 'getThresholdAlertLatency',
        'threshold_warning_jitter' => 'getThresholdWarningJitter',
        'threshold_alert_jitter' => 'getThresholdAlertJitter',
        'members' => 'getMembers',
        'sla' => 'getSla'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PROBE_PACKETS_DISABLE = 'disable';
    const PROBE_PACKETS_ENABLE = 'enable';
    const ADDR_MODE_IPV4 = 'ipv4';
    const ADDR_MODE_IPV6 = 'ipv6';
    const SYSTEM_DNS_DISABLE = 'disable';
    const SYSTEM_DNS_ENABLE = 'enable';
    const PROTOCOL_PING = 'ping';
    const PROTOCOL_TCP_ECHO = 'tcp-echo';
    const PROTOCOL_UDP_ECHO = 'udp-echo';
    const PROTOCOL_HTTP = 'http';
    const PROTOCOL_TWAMP = 'twamp';
    const PROTOCOL_DNS = 'dns';
    const PROTOCOL_TCP_CONNECT = 'tcp-connect';
    const PROTOCOL_FTP = 'ftp';
    const QUALITY_MEASURED_METHOD_OPEN = 'half-open';
    const QUALITY_MEASURED_METHOD_CLOSE = 'half-close';
    const SECURITY_MODE_NONE = 'none';
    const SECURITY_MODE_AUTHENTICATION = 'authentication';
    const FTP_MODE_PASSIVE = 'passive';
    const FTP_MODE_PORT = 'port';
    const UPDATE_CASCADE_INTERFACE_ENABLE = 'enable';
    const UPDATE_CASCADE_INTERFACE_DISABLE = 'disable';
    const UPDATE_STATIC_ROUTE_ENABLE = 'enable';
    const UPDATE_STATIC_ROUTE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProbePacketsAllowableValues()
    {
        return [
            self::PROBE_PACKETS_DISABLE,
            self::PROBE_PACKETS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrModeAllowableValues()
    {
        return [
            self::ADDR_MODE_IPV4,
            self::ADDR_MODE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemDnsAllowableValues()
    {
        return [
            self::SYSTEM_DNS_DISABLE,
            self::SYSTEM_DNS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_PING,
            self::PROTOCOL_TCP_ECHO,
            self::PROTOCOL_UDP_ECHO,
            self::PROTOCOL_HTTP,
            self::PROTOCOL_TWAMP,
            self::PROTOCOL_DNS,
            self::PROTOCOL_TCP_CONNECT,
            self::PROTOCOL_FTP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQualityMeasuredMethodAllowableValues()
    {
        return [
            self::QUALITY_MEASURED_METHOD_OPEN,
            self::QUALITY_MEASURED_METHOD_CLOSE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityModeAllowableValues()
    {
        return [
            self::SECURITY_MODE_NONE,
            self::SECURITY_MODE_AUTHENTICATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtpModeAllowableValues()
    {
        return [
            self::FTP_MODE_PASSIVE,
            self::FTP_MODE_PORT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateCascadeInterfaceAllowableValues()
    {
        return [
            self::UPDATE_CASCADE_INTERFACE_ENABLE,
            self::UPDATE_CASCADE_INTERFACE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateStaticRouteAllowableValues()
    {
        return [
            self::UPDATE_STATIC_ROUTE_ENABLE,
            self::UPDATE_STATIC_ROUTE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['probe_packets'] = $data['probe_packets'] ?? null;
        $this->container['addr_mode'] = $data['addr_mode'] ?? null;
        $this->container['system_dns'] = $data['system_dns'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['quality_measured_method'] = $data['quality_measured_method'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['packet_size'] = $data['packet_size'] ?? null;
        $this->container['ha_priority'] = $data['ha_priority'] ?? null;
        $this->container['ftp_mode'] = $data['ftp_mode'] ?? null;
        $this->container['ftp_file'] = $data['ftp_file'] ?? null;
        $this->container['http_get'] = $data['http_get'] ?? null;
        $this->container['http_agent'] = $data['http_agent'] ?? null;
        $this->container['http_match'] = $data['http_match'] ?? null;
        $this->container['dns_request_domain'] = $data['dns_request_domain'] ?? null;
        $this->container['dns_match_ip'] = $data['dns_match_ip'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['probe_timeout'] = $data['probe_timeout'] ?? null;
        $this->container['failtime'] = $data['failtime'] ?? null;
        $this->container['recoverytime'] = $data['recoverytime'] ?? null;
        $this->container['probe_count'] = $data['probe_count'] ?? null;
        $this->container['diffservcode'] = $data['diffservcode'] ?? null;
        $this->container['update_cascade_interface'] = $data['update_cascade_interface'] ?? null;
        $this->container['update_static_route'] = $data['update_static_route'] ?? null;
        $this->container['sla_fail_log_period'] = $data['sla_fail_log_period'] ?? null;
        $this->container['sla_pass_log_period'] = $data['sla_pass_log_period'] ?? null;
        $this->container['threshold_warning_packetloss'] = $data['threshold_warning_packetloss'] ?? null;
        $this->container['threshold_alert_packetloss'] = $data['threshold_alert_packetloss'] ?? null;
        $this->container['threshold_warning_latency'] = $data['threshold_warning_latency'] ?? null;
        $this->container['threshold_alert_latency'] = $data['threshold_alert_latency'] ?? null;
        $this->container['threshold_warning_jitter'] = $data['threshold_warning_jitter'] ?? null;
        $this->container['threshold_alert_jitter'] = $data['threshold_alert_jitter'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['sla'] = $data['sla'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getProbePacketsAllowableValues();
        if (!is_null($this->container['probe_packets']) && !in_array($this->container['probe_packets'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'probe_packets', must be one of '%s'",
                $this->container['probe_packets'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($this->container['addr_mode']) && !in_array($this->container['addr_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_mode', must be one of '%s'",
                $this->container['addr_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSystemDnsAllowableValues();
        if (!is_null($this->container['system_dns']) && !in_array($this->container['system_dns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'system_dns', must be one of '%s'",
                $this->container['system_dns'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 79)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getQualityMeasuredMethodAllowableValues();
        if (!is_null($this->container['quality_measured_method']) && !in_array($this->container['quality_measured_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quality_measured_method', must be one of '%s'",
                $this->container['quality_measured_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($this->container['security_mode']) && !in_array($this->container['security_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mode', must be one of '%s'",
                $this->container['security_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['user']) && (mb_strlen($this->container['user']) > 64)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['packet_size']) && ($this->container['packet_size'] > 1024)) {
            $invalidProperties[] = "invalid value for 'packet_size', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['packet_size']) && ($this->container['packet_size'] < 64)) {
            $invalidProperties[] = "invalid value for 'packet_size', must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] > 50)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getFtpModeAllowableValues();
        if (!is_null($this->container['ftp_mode']) && !in_array($this->container['ftp_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ftp_mode', must be one of '%s'",
                $this->container['ftp_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ftp_file']) && (mb_strlen($this->container['ftp_file']) > 254)) {
            $invalidProperties[] = "invalid value for 'ftp_file', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['http_get']) && (mb_strlen($this->container['http_get']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_get', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['http_agent']) && (mb_strlen($this->container['http_agent']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_agent', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['http_match']) && (mb_strlen($this->container['http_match']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_match', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['dns_request_domain']) && (mb_strlen($this->container['dns_request_domain']) > 255)) {
            $invalidProperties[] = "invalid value for 'dns_request_domain', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] > 3600000)) {
            $invalidProperties[] = "invalid value for 'interval', must be smaller than or equal to 3600000.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] < 500)) {
            $invalidProperties[] = "invalid value for 'interval', must be bigger than or equal to 500.";
        }

        if (!is_null($this->container['probe_timeout']) && ($this->container['probe_timeout'] > 3600000)) {
            $invalidProperties[] = "invalid value for 'probe_timeout', must be smaller than or equal to 3600000.";
        }

        if (!is_null($this->container['probe_timeout']) && ($this->container['probe_timeout'] < 500)) {
            $invalidProperties[] = "invalid value for 'probe_timeout', must be bigger than or equal to 500.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] > 3600)) {
            $invalidProperties[] = "invalid value for 'failtime', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] < 1)) {
            $invalidProperties[] = "invalid value for 'failtime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recoverytime']) && ($this->container['recoverytime'] > 3600)) {
            $invalidProperties[] = "invalid value for 'recoverytime', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['recoverytime']) && ($this->container['recoverytime'] < 1)) {
            $invalidProperties[] = "invalid value for 'recoverytime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['probe_count']) && ($this->container['probe_count'] > 30)) {
            $invalidProperties[] = "invalid value for 'probe_count', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['probe_count']) && ($this->container['probe_count'] < 5)) {
            $invalidProperties[] = "invalid value for 'probe_count', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getUpdateCascadeInterfaceAllowableValues();
        if (!is_null($this->container['update_cascade_interface']) && !in_array($this->container['update_cascade_interface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_cascade_interface', must be one of '%s'",
                $this->container['update_cascade_interface'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateStaticRouteAllowableValues();
        if (!is_null($this->container['update_static_route']) && !in_array($this->container['update_static_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_static_route', must be one of '%s'",
                $this->container['update_static_route'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sla_fail_log_period']) && ($this->container['sla_fail_log_period'] > 3600)) {
            $invalidProperties[] = "invalid value for 'sla_fail_log_period', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['sla_fail_log_period']) && ($this->container['sla_fail_log_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'sla_fail_log_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sla_pass_log_period']) && ($this->container['sla_pass_log_period'] > 3600)) {
            $invalidProperties[] = "invalid value for 'sla_pass_log_period', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['sla_pass_log_period']) && ($this->container['sla_pass_log_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'sla_pass_log_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_warning_packetloss']) && ($this->container['threshold_warning_packetloss'] > 100)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_packetloss', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['threshold_warning_packetloss']) && ($this->container['threshold_warning_packetloss'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_packetloss', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_alert_packetloss']) && ($this->container['threshold_alert_packetloss'] > 100)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_packetloss', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['threshold_alert_packetloss']) && ($this->container['threshold_alert_packetloss'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_packetloss', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_warning_latency']) && ($this->container['threshold_warning_latency'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_latency', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['threshold_warning_latency']) && ($this->container['threshold_warning_latency'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_latency', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_alert_latency']) && ($this->container['threshold_alert_latency'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_latency', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['threshold_alert_latency']) && ($this->container['threshold_alert_latency'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_latency', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_warning_jitter']) && ($this->container['threshold_warning_jitter'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_jitter', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['threshold_warning_jitter']) && ($this->container['threshold_warning_jitter'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_warning_jitter', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['threshold_alert_jitter']) && ($this->container['threshold_alert_jitter'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_jitter', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['threshold_alert_jitter']) && ($this->container['threshold_alert_jitter'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold_alert_jitter', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['members']) && (count($this->container['members']) > 0)) {
            $invalidProperties[] = "invalid value for 'members', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['sla']) && (count($this->container['sla']) > 0)) {
            $invalidProperties[] = "invalid value for 'sla', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Status check or health check name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SystemSdwanHealthCheck., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets probe_packets
     *
     * @return string|null
     */
    public function getProbePackets()
    {
        return $this->container['probe_packets'];
    }

    /**
     * Sets probe_packets
     *
     * @param string|null $probe_packets Enable/disable transmission of probe packets.    disable:Disable transmission of probe packets.    enable:Enable transmission of probe packets.
     *
     * @return self
     */
    public function setProbePackets($probe_packets)
    {
        $allowedValues = $this->getProbePacketsAllowableValues();
        if (!is_null($probe_packets) && !in_array($probe_packets, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'probe_packets', must be one of '%s'",
                    $probe_packets,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['probe_packets'] = $probe_packets;

        return $this;
    }

    /**
     * Gets addr_mode
     *
     * @return string|null
     */
    public function getAddrMode()
    {
        return $this->container['addr_mode'];
    }

    /**
     * Sets addr_mode
     *
     * @param string|null $addr_mode Address mode (IPv4 or IPv6).    ipv4:IPv4 mode.    ipv6:IPv6 mode.
     *
     * @return self
     */
    public function setAddrMode($addr_mode)
    {
        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($addr_mode) && !in_array($addr_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_mode', must be one of '%s'",
                    $addr_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_mode'] = $addr_mode;

        return $this;
    }

    /**
     * Gets system_dns
     *
     * @return string|null
     */
    public function getSystemDns()
    {
        return $this->container['system_dns'];
    }

    /**
     * Sets system_dns
     *
     * @param string|null $system_dns Enable/disable system DNS as the probe server.    disable:Disable system DNS as the probe server.    enable:Enable system DNS as the probe server.
     *
     * @return self
     */
    public function setSystemDns($system_dns)
    {
        $allowedValues = $this->getSystemDnsAllowableValues();
        if (!is_null($system_dns) && !in_array($system_dns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'system_dns', must be one of '%s'",
                    $system_dns,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['system_dns'] = $system_dns;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server IP address or FQDN name of the server.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 79)) {
            throw new \InvalidArgumentException('invalid length for $server when calling SystemSdwanHealthCheck., must be smaller than or equal to 79.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Protocol used to determine if the FortiGate can communicate with the server.    ping:Use PING to test the link with the server.    tcp-echo:Use TCP echo to test the link with the server.    udp-echo:Use UDP echo to test the link with the server.    http:Use HTTP-GET to test the link with the server.    twamp:Use TWAMP to test the link with the server.    dns:Use DNS query to test the link with the server.    tcp-connect:Use a full TCP connection to test the link with the server.    ftp:Use FTP to test the link with the server.
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling SystemSdwanHealthCheck., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets quality_measured_method
     *
     * @return string|null
     */
    public function getQualityMeasuredMethod()
    {
        return $this->container['quality_measured_method'];
    }

    /**
     * Sets quality_measured_method
     *
     * @param string|null $quality_measured_method Method to measure the quality of tcp-connect.    half-open:Measure the round trip between syn and ack.    half-close:Measure the round trip between fin and ack.
     *
     * @return self
     */
    public function setQualityMeasuredMethod($quality_measured_method)
    {
        $allowedValues = $this->getQualityMeasuredMethodAllowableValues();
        if (!is_null($quality_measured_method) && !in_array($quality_measured_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quality_measured_method', must be one of '%s'",
                    $quality_measured_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quality_measured_method'] = $quality_measured_method;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode Twamp controller security mode.    none:Unauthenticated mode.    authentication:Authenticated mode.
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($security_mode) && !in_array($security_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mode', must be one of '%s'",
                    $security_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user name to access probe server.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (!is_null($user) && (mb_strlen($user) > 64)) {
            throw new \InvalidArgumentException('invalid length for $user when calling SystemSdwanHealthCheck., must be smaller than or equal to 64.');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Twamp controller password in authentication mode
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets packet_size
     *
     * @return int|null
     */
    public function getPacketSize()
    {
        return $this->container['packet_size'];
    }

    /**
     * Sets packet_size
     *
     * @param int|null $packet_size Packet size of a twamp test session,
     *
     * @return self
     */
    public function setPacketSize($packet_size)
    {

        if (!is_null($packet_size) && ($packet_size > 1024)) {
            throw new \InvalidArgumentException('invalid value for $packet_size when calling SystemSdwanHealthCheck., must be smaller than or equal to 1024.');
        }
        if (!is_null($packet_size) && ($packet_size < 64)) {
            throw new \InvalidArgumentException('invalid value for $packet_size when calling SystemSdwanHealthCheck., must be bigger than or equal to 64.');
        }

        $this->container['packet_size'] = $packet_size;

        return $this;
    }

    /**
     * Gets ha_priority
     *
     * @return int|null
     */
    public function getHaPriority()
    {
        return $this->container['ha_priority'];
    }

    /**
     * Sets ha_priority
     *
     * @param int|null $ha_priority HA election priority (1 - 50).
     *
     * @return self
     */
    public function setHaPriority($ha_priority)
    {

        if (!is_null($ha_priority) && ($ha_priority > 50)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling SystemSdwanHealthCheck., must be smaller than or equal to 50.');
        }
        if (!is_null($ha_priority) && ($ha_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling SystemSdwanHealthCheck., must be bigger than or equal to 1.');
        }

        $this->container['ha_priority'] = $ha_priority;

        return $this;
    }

    /**
     * Gets ftp_mode
     *
     * @return string|null
     */
    public function getFtpMode()
    {
        return $this->container['ftp_mode'];
    }

    /**
     * Sets ftp_mode
     *
     * @param string|null $ftp_mode FTP mode.    passive:The FTP health-check initiates and establishes the data connection.    port:The FTP server initiates and establishes the data connection.
     *
     * @return self
     */
    public function setFtpMode($ftp_mode)
    {
        $allowedValues = $this->getFtpModeAllowableValues();
        if (!is_null($ftp_mode) && !in_array($ftp_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ftp_mode', must be one of '%s'",
                    $ftp_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ftp_mode'] = $ftp_mode;

        return $this;
    }

    /**
     * Gets ftp_file
     *
     * @return string|null
     */
    public function getFtpFile()
    {
        return $this->container['ftp_file'];
    }

    /**
     * Sets ftp_file
     *
     * @param string|null $ftp_file Full path and file name on the FTP server to download for FTP health-check to probe.
     *
     * @return self
     */
    public function setFtpFile($ftp_file)
    {
        if (!is_null($ftp_file) && (mb_strlen($ftp_file) > 254)) {
            throw new \InvalidArgumentException('invalid length for $ftp_file when calling SystemSdwanHealthCheck., must be smaller than or equal to 254.');
        }

        $this->container['ftp_file'] = $ftp_file;

        return $this;
    }

    /**
     * Gets http_get
     *
     * @return string|null
     */
    public function getHttpGet()
    {
        return $this->container['http_get'];
    }

    /**
     * Sets http_get
     *
     * @param string|null $http_get URL used to communicate with the server if the protocol if the protocol is HTTP.
     *
     * @return self
     */
    public function setHttpGet($http_get)
    {
        if (!is_null($http_get) && (mb_strlen($http_get) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_get when calling SystemSdwanHealthCheck., must be smaller than or equal to 1024.');
        }

        $this->container['http_get'] = $http_get;

        return $this;
    }

    /**
     * Gets http_agent
     *
     * @return string|null
     */
    public function getHttpAgent()
    {
        return $this->container['http_agent'];
    }

    /**
     * Sets http_agent
     *
     * @param string|null $http_agent String in the http-agent field in the HTTP header.
     *
     * @return self
     */
    public function setHttpAgent($http_agent)
    {
        if (!is_null($http_agent) && (mb_strlen($http_agent) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_agent when calling SystemSdwanHealthCheck., must be smaller than or equal to 1024.');
        }

        $this->container['http_agent'] = $http_agent;

        return $this;
    }

    /**
     * Gets http_match
     *
     * @return string|null
     */
    public function getHttpMatch()
    {
        return $this->container['http_match'];
    }

    /**
     * Sets http_match
     *
     * @param string|null $http_match Response string expected from the server if the protocol is HTTP.
     *
     * @return self
     */
    public function setHttpMatch($http_match)
    {
        if (!is_null($http_match) && (mb_strlen($http_match) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_match when calling SystemSdwanHealthCheck., must be smaller than or equal to 1024.');
        }

        $this->container['http_match'] = $http_match;

        return $this;
    }

    /**
     * Gets dns_request_domain
     *
     * @return string|null
     */
    public function getDnsRequestDomain()
    {
        return $this->container['dns_request_domain'];
    }

    /**
     * Sets dns_request_domain
     *
     * @param string|null $dns_request_domain Fully qualified domain name to resolve for the DNS probe.
     *
     * @return self
     */
    public function setDnsRequestDomain($dns_request_domain)
    {
        if (!is_null($dns_request_domain) && (mb_strlen($dns_request_domain) > 255)) {
            throw new \InvalidArgumentException('invalid length for $dns_request_domain when calling SystemSdwanHealthCheck., must be smaller than or equal to 255.');
        }

        $this->container['dns_request_domain'] = $dns_request_domain;

        return $this;
    }

    /**
     * Gets dns_match_ip
     *
     * @return string|null
     */
    public function getDnsMatchIp()
    {
        return $this->container['dns_match_ip'];
    }

    /**
     * Sets dns_match_ip
     *
     * @param string|null $dns_match_ip Response IP expected from DNS server if the protocol is DNS.
     *
     * @return self
     */
    public function setDnsMatchIp($dns_match_ip)
    {
        $this->container['dns_match_ip'] = $dns_match_ip;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
     *
     * @return self
     */
    public function setInterval($interval)
    {

        if (!is_null($interval) && ($interval > 3600000)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600000.');
        }
        if (!is_null($interval) && ($interval < 500)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling SystemSdwanHealthCheck., must be bigger than or equal to 500.');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets probe_timeout
     *
     * @return int|null
     */
    public function getProbeTimeout()
    {
        return $this->container['probe_timeout'];
    }

    /**
     * Sets probe_timeout
     *
     * @param int|null $probe_timeout Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
     *
     * @return self
     */
    public function setProbeTimeout($probe_timeout)
    {

        if (!is_null($probe_timeout) && ($probe_timeout > 3600000)) {
            throw new \InvalidArgumentException('invalid value for $probe_timeout when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600000.');
        }
        if (!is_null($probe_timeout) && ($probe_timeout < 500)) {
            throw new \InvalidArgumentException('invalid value for $probe_timeout when calling SystemSdwanHealthCheck., must be bigger than or equal to 500.');
        }

        $this->container['probe_timeout'] = $probe_timeout;

        return $this;
    }

    /**
     * Gets failtime
     *
     * @return int|null
     */
    public function getFailtime()
    {
        return $this->container['failtime'];
    }

    /**
     * Sets failtime
     *
     * @param int|null $failtime Number of failures before server is considered lost (1 - 3600, default = 5).
     *
     * @return self
     */
    public function setFailtime($failtime)
    {

        if (!is_null($failtime) && ($failtime > 3600)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600.');
        }
        if (!is_null($failtime) && ($failtime < 1)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling SystemSdwanHealthCheck., must be bigger than or equal to 1.');
        }

        $this->container['failtime'] = $failtime;

        return $this;
    }

    /**
     * Gets recoverytime
     *
     * @return int|null
     */
    public function getRecoverytime()
    {
        return $this->container['recoverytime'];
    }

    /**
     * Sets recoverytime
     *
     * @param int|null $recoverytime Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
     *
     * @return self
     */
    public function setRecoverytime($recoverytime)
    {

        if (!is_null($recoverytime) && ($recoverytime > 3600)) {
            throw new \InvalidArgumentException('invalid value for $recoverytime when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600.');
        }
        if (!is_null($recoverytime) && ($recoverytime < 1)) {
            throw new \InvalidArgumentException('invalid value for $recoverytime when calling SystemSdwanHealthCheck., must be bigger than or equal to 1.');
        }

        $this->container['recoverytime'] = $recoverytime;

        return $this;
    }

    /**
     * Gets probe_count
     *
     * @return int|null
     */
    public function getProbeCount()
    {
        return $this->container['probe_count'];
    }

    /**
     * Sets probe_count
     *
     * @param int|null $probe_count Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     *
     * @return self
     */
    public function setProbeCount($probe_count)
    {

        if (!is_null($probe_count) && ($probe_count > 30)) {
            throw new \InvalidArgumentException('invalid value for $probe_count when calling SystemSdwanHealthCheck., must be smaller than or equal to 30.');
        }
        if (!is_null($probe_count) && ($probe_count < 5)) {
            throw new \InvalidArgumentException('invalid value for $probe_count when calling SystemSdwanHealthCheck., must be bigger than or equal to 5.');
        }

        $this->container['probe_count'] = $probe_count;

        return $this;
    }

    /**
     * Gets diffservcode
     *
     * @return string|null
     */
    public function getDiffservcode()
    {
        return $this->container['diffservcode'];
    }

    /**
     * Sets diffservcode
     *
     * @param string|null $diffservcode Differentiated services code point (DSCP) in the IP header of the probe packet.
     *
     * @return self
     */
    public function setDiffservcode($diffservcode)
    {
        $this->container['diffservcode'] = $diffservcode;

        return $this;
    }

    /**
     * Gets update_cascade_interface
     *
     * @return string|null
     */
    public function getUpdateCascadeInterface()
    {
        return $this->container['update_cascade_interface'];
    }

    /**
     * Sets update_cascade_interface
     *
     * @param string|null $update_cascade_interface Enable/disable update cascade interface.    enable:Enable update cascade interface.    disable:Disable update cascade interface.
     *
     * @return self
     */
    public function setUpdateCascadeInterface($update_cascade_interface)
    {
        $allowedValues = $this->getUpdateCascadeInterfaceAllowableValues();
        if (!is_null($update_cascade_interface) && !in_array($update_cascade_interface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_cascade_interface', must be one of '%s'",
                    $update_cascade_interface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_cascade_interface'] = $update_cascade_interface;

        return $this;
    }

    /**
     * Gets update_static_route
     *
     * @return string|null
     */
    public function getUpdateStaticRoute()
    {
        return $this->container['update_static_route'];
    }

    /**
     * Sets update_static_route
     *
     * @param string|null $update_static_route Enable/disable updating the static route.    enable:Enable updating the static route.    disable:Disable updating the static route.
     *
     * @return self
     */
    public function setUpdateStaticRoute($update_static_route)
    {
        $allowedValues = $this->getUpdateStaticRouteAllowableValues();
        if (!is_null($update_static_route) && !in_array($update_static_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_static_route', must be one of '%s'",
                    $update_static_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_static_route'] = $update_static_route;

        return $this;
    }

    /**
     * Gets sla_fail_log_period
     *
     * @return int|null
     */
    public function getSlaFailLogPeriod()
    {
        return $this->container['sla_fail_log_period'];
    }

    /**
     * Sets sla_fail_log_period
     *
     * @param int|null $sla_fail_log_period Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
     *
     * @return self
     */
    public function setSlaFailLogPeriod($sla_fail_log_period)
    {

        if (!is_null($sla_fail_log_period) && ($sla_fail_log_period > 3600)) {
            throw new \InvalidArgumentException('invalid value for $sla_fail_log_period when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600.');
        }
        if (!is_null($sla_fail_log_period) && ($sla_fail_log_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $sla_fail_log_period when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['sla_fail_log_period'] = $sla_fail_log_period;

        return $this;
    }

    /**
     * Gets sla_pass_log_period
     *
     * @return int|null
     */
    public function getSlaPassLogPeriod()
    {
        return $this->container['sla_pass_log_period'];
    }

    /**
     * Sets sla_pass_log_period
     *
     * @param int|null $sla_pass_log_period Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
     *
     * @return self
     */
    public function setSlaPassLogPeriod($sla_pass_log_period)
    {

        if (!is_null($sla_pass_log_period) && ($sla_pass_log_period > 3600)) {
            throw new \InvalidArgumentException('invalid value for $sla_pass_log_period when calling SystemSdwanHealthCheck., must be smaller than or equal to 3600.');
        }
        if (!is_null($sla_pass_log_period) && ($sla_pass_log_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $sla_pass_log_period when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['sla_pass_log_period'] = $sla_pass_log_period;

        return $this;
    }

    /**
     * Gets threshold_warning_packetloss
     *
     * @return int|null
     */
    public function getThresholdWarningPacketloss()
    {
        return $this->container['threshold_warning_packetloss'];
    }

    /**
     * Sets threshold_warning_packetloss
     *
     * @param int|null $threshold_warning_packetloss Warning threshold for packet loss (percentage, default = 0).
     *
     * @return self
     */
    public function setThresholdWarningPacketloss($threshold_warning_packetloss)
    {

        if (!is_null($threshold_warning_packetloss) && ($threshold_warning_packetloss > 100)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_packetloss when calling SystemSdwanHealthCheck., must be smaller than or equal to 100.');
        }
        if (!is_null($threshold_warning_packetloss) && ($threshold_warning_packetloss < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_packetloss when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_warning_packetloss'] = $threshold_warning_packetloss;

        return $this;
    }

    /**
     * Gets threshold_alert_packetloss
     *
     * @return int|null
     */
    public function getThresholdAlertPacketloss()
    {
        return $this->container['threshold_alert_packetloss'];
    }

    /**
     * Sets threshold_alert_packetloss
     *
     * @param int|null $threshold_alert_packetloss Alert threshold for packet loss (percentage, default = 0).
     *
     * @return self
     */
    public function setThresholdAlertPacketloss($threshold_alert_packetloss)
    {

        if (!is_null($threshold_alert_packetloss) && ($threshold_alert_packetloss > 100)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_packetloss when calling SystemSdwanHealthCheck., must be smaller than or equal to 100.');
        }
        if (!is_null($threshold_alert_packetloss) && ($threshold_alert_packetloss < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_packetloss when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_alert_packetloss'] = $threshold_alert_packetloss;

        return $this;
    }

    /**
     * Gets threshold_warning_latency
     *
     * @return int|null
     */
    public function getThresholdWarningLatency()
    {
        return $this->container['threshold_warning_latency'];
    }

    /**
     * Sets threshold_warning_latency
     *
     * @param int|null $threshold_warning_latency Warning threshold for latency (ms, default = 0).
     *
     * @return self
     */
    public function setThresholdWarningLatency($threshold_warning_latency)
    {

        if (!is_null($threshold_warning_latency) && ($threshold_warning_latency > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_latency when calling SystemSdwanHealthCheck., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($threshold_warning_latency) && ($threshold_warning_latency < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_latency when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_warning_latency'] = $threshold_warning_latency;

        return $this;
    }

    /**
     * Gets threshold_alert_latency
     *
     * @return int|null
     */
    public function getThresholdAlertLatency()
    {
        return $this->container['threshold_alert_latency'];
    }

    /**
     * Sets threshold_alert_latency
     *
     * @param int|null $threshold_alert_latency Alert threshold for latency (ms, default = 0).
     *
     * @return self
     */
    public function setThresholdAlertLatency($threshold_alert_latency)
    {

        if (!is_null($threshold_alert_latency) && ($threshold_alert_latency > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_latency when calling SystemSdwanHealthCheck., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($threshold_alert_latency) && ($threshold_alert_latency < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_latency when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_alert_latency'] = $threshold_alert_latency;

        return $this;
    }

    /**
     * Gets threshold_warning_jitter
     *
     * @return int|null
     */
    public function getThresholdWarningJitter()
    {
        return $this->container['threshold_warning_jitter'];
    }

    /**
     * Sets threshold_warning_jitter
     *
     * @param int|null $threshold_warning_jitter Warning threshold for jitter (ms, default = 0).
     *
     * @return self
     */
    public function setThresholdWarningJitter($threshold_warning_jitter)
    {

        if (!is_null($threshold_warning_jitter) && ($threshold_warning_jitter > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_jitter when calling SystemSdwanHealthCheck., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($threshold_warning_jitter) && ($threshold_warning_jitter < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_warning_jitter when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_warning_jitter'] = $threshold_warning_jitter;

        return $this;
    }

    /**
     * Gets threshold_alert_jitter
     *
     * @return int|null
     */
    public function getThresholdAlertJitter()
    {
        return $this->container['threshold_alert_jitter'];
    }

    /**
     * Sets threshold_alert_jitter
     *
     * @param int|null $threshold_alert_jitter Alert threshold for jitter (ms, default = 0).
     *
     * @return self
     */
    public function setThresholdAlertJitter($threshold_alert_jitter)
    {

        if (!is_null($threshold_alert_jitter) && ($threshold_alert_jitter > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_jitter when calling SystemSdwanHealthCheck., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($threshold_alert_jitter) && ($threshold_alert_jitter < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold_alert_jitter when calling SystemSdwanHealthCheck., must be bigger than or equal to 0.');
        }

        $this->container['threshold_alert_jitter'] = $threshold_alert_jitter;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]|null $members Member sequence number list.
     *
     * @return self
     */
    public function setMembers($members)
    {

        if (!is_null($members) && (count($members) > 0)) {
            throw new \InvalidArgumentException('invalid value for $members when calling SystemSdwanHealthCheck., number of items must be less than or equal to 0.');
        }
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets sla
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanSla[]|null
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanSla[]|null $sla Service level agreement (SLA).
     *
     * @return self
     */
    public function setSla($sla)
    {

        if (!is_null($sla) && (count($sla) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sla when calling SystemSdwanHealthCheck., number of items must be less than or equal to 0.');
        }
        $this->container['sla'] = $sla;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


