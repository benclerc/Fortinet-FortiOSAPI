<?php
/**
 * InlineObject282
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject282 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject282 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_282';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'trigger_type' => 'string',
        'event_type' => 'string',
        'license_type' => 'string',
        'ioc_level' => 'string',
        'report_type' => 'string',
        'logid' => 'int',
        'trigger_frequency' => 'string',
        'trigger_weekday' => 'string',
        'trigger_day' => 'int',
        'trigger_hour' => 'int',
        'trigger_minute' => 'int',
        'fields' => '\Fortigate\FortiOS\Model\CMDB\SystemAutomationTriggerNameFields[]',
        'faz_event_name' => 'string',
        'faz_event_severity' => 'string',
        'faz_event_tags' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'trigger_type' => null,
        'event_type' => null,
        'license_type' => null,
        'ioc_level' => null,
        'report_type' => null,
        'logid' => null,
        'trigger_frequency' => null,
        'trigger_weekday' => null,
        'trigger_day' => null,
        'trigger_hour' => null,
        'trigger_minute' => null,
        'fields' => null,
        'faz_event_name' => null,
        'faz_event_severity' => null,
        'faz_event_tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'trigger_type' => 'trigger-type',
        'event_type' => 'event-type',
        'license_type' => 'license-type',
        'ioc_level' => 'ioc-level',
        'report_type' => 'report-type',
        'logid' => 'logid',
        'trigger_frequency' => 'trigger-frequency',
        'trigger_weekday' => 'trigger-weekday',
        'trigger_day' => 'trigger-day',
        'trigger_hour' => 'trigger-hour',
        'trigger_minute' => 'trigger-minute',
        'fields' => 'fields',
        'faz_event_name' => 'faz-event-name',
        'faz_event_severity' => 'faz-event-severity',
        'faz_event_tags' => 'faz-event-tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'trigger_type' => 'setTriggerType',
        'event_type' => 'setEventType',
        'license_type' => 'setLicenseType',
        'ioc_level' => 'setIocLevel',
        'report_type' => 'setReportType',
        'logid' => 'setLogid',
        'trigger_frequency' => 'setTriggerFrequency',
        'trigger_weekday' => 'setTriggerWeekday',
        'trigger_day' => 'setTriggerDay',
        'trigger_hour' => 'setTriggerHour',
        'trigger_minute' => 'setTriggerMinute',
        'fields' => 'setFields',
        'faz_event_name' => 'setFazEventName',
        'faz_event_severity' => 'setFazEventSeverity',
        'faz_event_tags' => 'setFazEventTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'trigger_type' => 'getTriggerType',
        'event_type' => 'getEventType',
        'license_type' => 'getLicenseType',
        'ioc_level' => 'getIocLevel',
        'report_type' => 'getReportType',
        'logid' => 'getLogid',
        'trigger_frequency' => 'getTriggerFrequency',
        'trigger_weekday' => 'getTriggerWeekday',
        'trigger_day' => 'getTriggerDay',
        'trigger_hour' => 'getTriggerHour',
        'trigger_minute' => 'getTriggerMinute',
        'fields' => 'getFields',
        'faz_event_name' => 'getFazEventName',
        'faz_event_severity' => 'getFazEventSeverity',
        'faz_event_tags' => 'getFazEventTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRIGGER_TYPE_EVENT_BASED = 'event-based';
    const TRIGGER_TYPE_SCHEDULED = 'scheduled';
    const EVENT_TYPE_IOC = 'ioc';
    const EVENT_TYPE_EVENT_LOG = 'event-log';
    const EVENT_TYPE_REBOOT = 'reboot';
    const EVENT_TYPE_LOW_MEMORY = 'low-memory';
    const EVENT_TYPE_HIGH_CPU = 'high-cpu';
    const EVENT_TYPE_LICENSE_NEAR_EXPIRY = 'license-near-expiry';
    const EVENT_TYPE_HA_FAILOVER = 'ha-failover';
    const EVENT_TYPE_CONFIG_CHANGE = 'config-change';
    const EVENT_TYPE_SECURITY_RATING_SUMMARY = 'security-rating-summary';
    const EVENT_TYPE_VIRUS_IPS_DB_UPDATED = 'virus-ips-db-updated';
    const EVENT_TYPE_FAZ_EVENT = 'faz-event';
    const EVENT_TYPE_INCOMING_WEBHOOK = 'incoming-webhook';
    const LICENSE_TYPE_FORTICARE_SUPPORT = 'forticare-support';
    const LICENSE_TYPE_FORTIGUARD_WEBFILTER = 'fortiguard-webfilter';
    const LICENSE_TYPE_FORTIGUARD_ANTISPAM = 'fortiguard-antispam';
    const LICENSE_TYPE_FORTIGUARD_ANTIVIRUS = 'fortiguard-antivirus';
    const LICENSE_TYPE_FORTIGUARD_IPS = 'fortiguard-ips';
    const LICENSE_TYPE_FORTIGUARD_MANAGEMENT = 'fortiguard-management';
    const LICENSE_TYPE_FORTICLOUD = 'forticloud';
    const LICENSE_TYPE_ANY = 'any';
    const IOC_LEVEL_MEDIUM = 'medium';
    const IOC_LEVEL_HIGH = 'high';
    const REPORT_TYPE_POSTURE_REPORT = 'PostureReport';
    const REPORT_TYPE_COVERAGE_REPORT = 'CoverageReport';
    const REPORT_TYPE_OPTIMIZATION_REPORT = 'OptimizationReport';
    const TRIGGER_FREQUENCY_HOURLY = 'hourly';
    const TRIGGER_FREQUENCY_DAILY = 'daily';
    const TRIGGER_FREQUENCY_WEEKLY = 'weekly';
    const TRIGGER_FREQUENCY_MONTHLY = 'monthly';
    const TRIGGER_WEEKDAY_SUNDAY = 'sunday';
    const TRIGGER_WEEKDAY_MONDAY = 'monday';
    const TRIGGER_WEEKDAY_TUESDAY = 'tuesday';
    const TRIGGER_WEEKDAY_WEDNESDAY = 'wednesday';
    const TRIGGER_WEEKDAY_THURSDAY = 'thursday';
    const TRIGGER_WEEKDAY_FRIDAY = 'friday';
    const TRIGGER_WEEKDAY_SATURDAY = 'saturday';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerTypeAllowableValues()
    {
        return [
            self::TRIGGER_TYPE_EVENT_BASED,
            self::TRIGGER_TYPE_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_IOC,
            self::EVENT_TYPE_EVENT_LOG,
            self::EVENT_TYPE_REBOOT,
            self::EVENT_TYPE_LOW_MEMORY,
            self::EVENT_TYPE_HIGH_CPU,
            self::EVENT_TYPE_LICENSE_NEAR_EXPIRY,
            self::EVENT_TYPE_HA_FAILOVER,
            self::EVENT_TYPE_CONFIG_CHANGE,
            self::EVENT_TYPE_SECURITY_RATING_SUMMARY,
            self::EVENT_TYPE_VIRUS_IPS_DB_UPDATED,
            self::EVENT_TYPE_FAZ_EVENT,
            self::EVENT_TYPE_INCOMING_WEBHOOK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLicenseTypeAllowableValues()
    {
        return [
            self::LICENSE_TYPE_FORTICARE_SUPPORT,
            self::LICENSE_TYPE_FORTIGUARD_WEBFILTER,
            self::LICENSE_TYPE_FORTIGUARD_ANTISPAM,
            self::LICENSE_TYPE_FORTIGUARD_ANTIVIRUS,
            self::LICENSE_TYPE_FORTIGUARD_IPS,
            self::LICENSE_TYPE_FORTIGUARD_MANAGEMENT,
            self::LICENSE_TYPE_FORTICLOUD,
            self::LICENSE_TYPE_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIocLevelAllowableValues()
    {
        return [
            self::IOC_LEVEL_MEDIUM,
            self::IOC_LEVEL_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTypeAllowableValues()
    {
        return [
            self::REPORT_TYPE_POSTURE_REPORT,
            self::REPORT_TYPE_COVERAGE_REPORT,
            self::REPORT_TYPE_OPTIMIZATION_REPORT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerFrequencyAllowableValues()
    {
        return [
            self::TRIGGER_FREQUENCY_HOURLY,
            self::TRIGGER_FREQUENCY_DAILY,
            self::TRIGGER_FREQUENCY_WEEKLY,
            self::TRIGGER_FREQUENCY_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerWeekdayAllowableValues()
    {
        return [
            self::TRIGGER_WEEKDAY_SUNDAY,
            self::TRIGGER_WEEKDAY_MONDAY,
            self::TRIGGER_WEEKDAY_TUESDAY,
            self::TRIGGER_WEEKDAY_WEDNESDAY,
            self::TRIGGER_WEEKDAY_THURSDAY,
            self::TRIGGER_WEEKDAY_FRIDAY,
            self::TRIGGER_WEEKDAY_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['trigger_type'] = $data['trigger_type'] ?? null;
        $this->container['event_type'] = $data['event_type'] ?? null;
        $this->container['license_type'] = $data['license_type'] ?? null;
        $this->container['ioc_level'] = $data['ioc_level'] ?? null;
        $this->container['report_type'] = $data['report_type'] ?? null;
        $this->container['logid'] = $data['logid'] ?? null;
        $this->container['trigger_frequency'] = $data['trigger_frequency'] ?? null;
        $this->container['trigger_weekday'] = $data['trigger_weekday'] ?? null;
        $this->container['trigger_day'] = $data['trigger_day'] ?? null;
        $this->container['trigger_hour'] = $data['trigger_hour'] ?? null;
        $this->container['trigger_minute'] = $data['trigger_minute'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['faz_event_name'] = $data['faz_event_name'] ?? null;
        $this->container['faz_event_severity'] = $data['faz_event_severity'] ?? null;
        $this->container['faz_event_tags'] = $data['faz_event_tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($this->container['trigger_type']) && !in_array($this->container['trigger_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger_type', must be one of '%s'",
                $this->container['trigger_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_type', must be one of '%s'",
                $this->container['event_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLicenseTypeAllowableValues();
        if (!is_null($this->container['license_type']) && !in_array($this->container['license_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'license_type', must be one of '%s'",
                $this->container['license_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIocLevelAllowableValues();
        if (!is_null($this->container['ioc_level']) && !in_array($this->container['ioc_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ioc_level', must be one of '%s'",
                $this->container['ioc_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($this->container['report_type']) && !in_array($this->container['report_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'report_type', must be one of '%s'",
                $this->container['report_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['logid']) && ($this->container['logid'] > 65535)) {
            $invalidProperties[] = "invalid value for 'logid', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['logid']) && ($this->container['logid'] < 1)) {
            $invalidProperties[] = "invalid value for 'logid', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTriggerFrequencyAllowableValues();
        if (!is_null($this->container['trigger_frequency']) && !in_array($this->container['trigger_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger_frequency', must be one of '%s'",
                $this->container['trigger_frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTriggerWeekdayAllowableValues();
        if (!is_null($this->container['trigger_weekday']) && !in_array($this->container['trigger_weekday'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger_weekday', must be one of '%s'",
                $this->container['trigger_weekday'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['trigger_day']) && ($this->container['trigger_day'] > 31)) {
            $invalidProperties[] = "invalid value for 'trigger_day', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['trigger_day']) && ($this->container['trigger_day'] < 1)) {
            $invalidProperties[] = "invalid value for 'trigger_day', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trigger_hour']) && ($this->container['trigger_hour'] > 23)) {
            $invalidProperties[] = "invalid value for 'trigger_hour', must be smaller than or equal to 23.";
        }

        if (!is_null($this->container['trigger_hour']) && ($this->container['trigger_hour'] < 0)) {
            $invalidProperties[] = "invalid value for 'trigger_hour', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['trigger_minute']) && ($this->container['trigger_minute'] > 59)) {
            $invalidProperties[] = "invalid value for 'trigger_minute', must be smaller than or equal to 59.";
        }

        if (!is_null($this->container['trigger_minute']) && ($this->container['trigger_minute'] < 0)) {
            $invalidProperties[] = "invalid value for 'trigger_minute', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fields']) && (count($this->container['fields']) > 5)) {
            $invalidProperties[] = "invalid value for 'fields', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['faz_event_name']) && (mb_strlen($this->container['faz_event_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'faz_event_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['faz_event_severity']) && (mb_strlen($this->container['faz_event_severity']) > 255)) {
            $invalidProperties[] = "invalid value for 'faz_event_severity', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['faz_event_tags']) && (mb_strlen($this->container['faz_event_tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'faz_event_tags', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject282., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trigger_type
     *
     * @return string|null
     */
    public function getTriggerType()
    {
        return $this->container['trigger_type'];
    }

    /**
     * Sets trigger_type
     *
     * @param string|null $trigger_type Trigger type.    event-based:Event based trigger.    scheduled:Scheduled trigger.
     *
     * @return self
     */
    public function setTriggerType($trigger_type)
    {
        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($trigger_type) && !in_array($trigger_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger_type', must be one of '%s'",
                    $trigger_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger_type'] = $trigger_type;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type Event type.    ioc:Indicator of compromise detected.    event-log:Use log ID as trigger.    reboot:Device reboot.    low-memory:Conserve mode due to low memory.    high-cpu:High CPU usage.    license-near-expiry:License near expiration date.    ha-failover:HA failover.    config-change:Configuration change.    security-rating-summary:Security rating summary.    virus-ips-db-updated:Virus and IPS database updated.    faz-event:FortiAnalyzer event.    incoming-webhook:Incoming webhook call.
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($event_type) && !in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_type', must be one of '%s'",
                    $event_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets license_type
     *
     * @return string|null
     */
    public function getLicenseType()
    {
        return $this->container['license_type'];
    }

    /**
     * Sets license_type
     *
     * @param string|null $license_type License type.    forticare-support:FortiCare support license.    fortiguard-webfilter:FortiGuard web filter license.    fortiguard-antispam:FortiGuard antispam license.    fortiguard-antivirus:FortiGuard AntiVirus license.    fortiguard-ips:FortiGuard IPS license.    fortiguard-management:FortiGuard management service license.    forticloud:FortiCloud license.    any:Any license.
     *
     * @return self
     */
    public function setLicenseType($license_type)
    {
        $allowedValues = $this->getLicenseTypeAllowableValues();
        if (!is_null($license_type) && !in_array($license_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'license_type', must be one of '%s'",
                    $license_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['license_type'] = $license_type;

        return $this;
    }

    /**
     * Gets ioc_level
     *
     * @return string|null
     */
    public function getIocLevel()
    {
        return $this->container['ioc_level'];
    }

    /**
     * Sets ioc_level
     *
     * @param string|null $ioc_level IOC threat level.    medium:IOC level medium and high.    high:IOC level high only.
     *
     * @return self
     */
    public function setIocLevel($ioc_level)
    {
        $allowedValues = $this->getIocLevelAllowableValues();
        if (!is_null($ioc_level) && !in_array($ioc_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ioc_level', must be one of '%s'",
                    $ioc_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ioc_level'] = $ioc_level;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type Security Rating report.    PostureReport:Posture Report.    CoverageReport:Coverage Report.    OptimizationReport:Optimization Report
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($report_type) && !in_array($report_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'report_type', must be one of '%s'",
                    $report_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets logid
     *
     * @return int|null
     */
    public function getLogid()
    {
        return $this->container['logid'];
    }

    /**
     * Sets logid
     *
     * @param int|null $logid Log ID to trigger event.
     *
     * @return self
     */
    public function setLogid($logid)
    {

        if (!is_null($logid) && ($logid > 65535)) {
            throw new \InvalidArgumentException('invalid value for $logid when calling InlineObject282., must be smaller than or equal to 65535.');
        }
        if (!is_null($logid) && ($logid < 1)) {
            throw new \InvalidArgumentException('invalid value for $logid when calling InlineObject282., must be bigger than or equal to 1.');
        }

        $this->container['logid'] = $logid;

        return $this;
    }

    /**
     * Gets trigger_frequency
     *
     * @return string|null
     */
    public function getTriggerFrequency()
    {
        return $this->container['trigger_frequency'];
    }

    /**
     * Sets trigger_frequency
     *
     * @param string|null $trigger_frequency Scheduled trigger frequency (default = daily).    hourly:Run hourly.    daily:Run daily.    weekly:Run weekly.    monthly:Run monthly.
     *
     * @return self
     */
    public function setTriggerFrequency($trigger_frequency)
    {
        $allowedValues = $this->getTriggerFrequencyAllowableValues();
        if (!is_null($trigger_frequency) && !in_array($trigger_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger_frequency', must be one of '%s'",
                    $trigger_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger_frequency'] = $trigger_frequency;

        return $this;
    }

    /**
     * Gets trigger_weekday
     *
     * @return string|null
     */
    public function getTriggerWeekday()
    {
        return $this->container['trigger_weekday'];
    }

    /**
     * Sets trigger_weekday
     *
     * @param string|null $trigger_weekday Day of week for trigger.    sunday:Sunday.    monday:Monday.    tuesday:Tuesday.    wednesday:Wednesday.    thursday:Thursday.    friday:Friday.    saturday:Saturday.
     *
     * @return self
     */
    public function setTriggerWeekday($trigger_weekday)
    {
        $allowedValues = $this->getTriggerWeekdayAllowableValues();
        if (!is_null($trigger_weekday) && !in_array($trigger_weekday, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger_weekday', must be one of '%s'",
                    $trigger_weekday,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger_weekday'] = $trigger_weekday;

        return $this;
    }

    /**
     * Gets trigger_day
     *
     * @return int|null
     */
    public function getTriggerDay()
    {
        return $this->container['trigger_day'];
    }

    /**
     * Sets trigger_day
     *
     * @param int|null $trigger_day Day within a month to trigger.
     *
     * @return self
     */
    public function setTriggerDay($trigger_day)
    {

        if (!is_null($trigger_day) && ($trigger_day > 31)) {
            throw new \InvalidArgumentException('invalid value for $trigger_day when calling InlineObject282., must be smaller than or equal to 31.');
        }
        if (!is_null($trigger_day) && ($trigger_day < 1)) {
            throw new \InvalidArgumentException('invalid value for $trigger_day when calling InlineObject282., must be bigger than or equal to 1.');
        }

        $this->container['trigger_day'] = $trigger_day;

        return $this;
    }

    /**
     * Gets trigger_hour
     *
     * @return int|null
     */
    public function getTriggerHour()
    {
        return $this->container['trigger_hour'];
    }

    /**
     * Sets trigger_hour
     *
     * @param int|null $trigger_hour Hour of the day on which to trigger (0 - 23, default = 1).
     *
     * @return self
     */
    public function setTriggerHour($trigger_hour)
    {

        if (!is_null($trigger_hour) && ($trigger_hour > 23)) {
            throw new \InvalidArgumentException('invalid value for $trigger_hour when calling InlineObject282., must be smaller than or equal to 23.');
        }
        if (!is_null($trigger_hour) && ($trigger_hour < 0)) {
            throw new \InvalidArgumentException('invalid value for $trigger_hour when calling InlineObject282., must be bigger than or equal to 0.');
        }

        $this->container['trigger_hour'] = $trigger_hour;

        return $this;
    }

    /**
     * Gets trigger_minute
     *
     * @return int|null
     */
    public function getTriggerMinute()
    {
        return $this->container['trigger_minute'];
    }

    /**
     * Sets trigger_minute
     *
     * @param int|null $trigger_minute Minute of the hour on which to trigger (0 - 59, default = 0).
     *
     * @return self
     */
    public function setTriggerMinute($trigger_minute)
    {

        if (!is_null($trigger_minute) && ($trigger_minute > 59)) {
            throw new \InvalidArgumentException('invalid value for $trigger_minute when calling InlineObject282., must be smaller than or equal to 59.');
        }
        if (!is_null($trigger_minute) && ($trigger_minute < 0)) {
            throw new \InvalidArgumentException('invalid value for $trigger_minute when calling InlineObject282., must be bigger than or equal to 0.');
        }

        $this->container['trigger_minute'] = $trigger_minute;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAutomationTriggerNameFields[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAutomationTriggerNameFields[]|null $fields Customized trigger field settings.
     *
     * @return self
     */
    public function setFields($fields)
    {

        if (!is_null($fields) && (count($fields) > 5)) {
            throw new \InvalidArgumentException('invalid value for $fields when calling InlineObject282., number of items must be less than or equal to 5.');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets faz_event_name
     *
     * @return string|null
     */
    public function getFazEventName()
    {
        return $this->container['faz_event_name'];
    }

    /**
     * Sets faz_event_name
     *
     * @param string|null $faz_event_name FortiAnalyzer event handler name.
     *
     * @return self
     */
    public function setFazEventName($faz_event_name)
    {
        if (!is_null($faz_event_name) && (mb_strlen($faz_event_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $faz_event_name when calling InlineObject282., must be smaller than or equal to 255.');
        }

        $this->container['faz_event_name'] = $faz_event_name;

        return $this;
    }

    /**
     * Gets faz_event_severity
     *
     * @return string|null
     */
    public function getFazEventSeverity()
    {
        return $this->container['faz_event_severity'];
    }

    /**
     * Sets faz_event_severity
     *
     * @param string|null $faz_event_severity FortiAnalyzer event severity.
     *
     * @return self
     */
    public function setFazEventSeverity($faz_event_severity)
    {
        if (!is_null($faz_event_severity) && (mb_strlen($faz_event_severity) > 255)) {
            throw new \InvalidArgumentException('invalid length for $faz_event_severity when calling InlineObject282., must be smaller than or equal to 255.');
        }

        $this->container['faz_event_severity'] = $faz_event_severity;

        return $this;
    }

    /**
     * Gets faz_event_tags
     *
     * @return string|null
     */
    public function getFazEventTags()
    {
        return $this->container['faz_event_tags'];
    }

    /**
     * Sets faz_event_tags
     *
     * @param string|null $faz_event_tags FortiAnalyzer event tags.
     *
     * @return self
     */
    public function setFazEventTags($faz_event_tags)
    {
        if (!is_null($faz_event_tags) && (mb_strlen($faz_event_tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $faz_event_tags when calling InlineObject282., must be smaller than or equal to 255.');
        }

        $this->container['faz_event_tags'] = $faz_event_tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


