<?php
/**
 * InlineObject424
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject424 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject424 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_424';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'server' => 'string',
        'port' => 'int',
        'password' => 'string',
        'server2' => 'string',
        'port2' => 'int',
        'password2' => 'string',
        'server3' => 'string',
        'port3' => 'int',
        'password3' => 'string',
        'server4' => 'string',
        'port4' => 'int',
        'password4' => 'string',
        'server5' => 'string',
        'port5' => 'int',
        'password5' => 'string',
        'ldap_server' => 'string',
        'group_poll_interval' => 'int',
        'ldap_poll' => 'string',
        'ldap_poll_interval' => 'int',
        'ldap_poll_filter' => 'string',
        'user_info_server' => 'string',
        'ssl' => 'string',
        'ssl_trusted_cert' => 'string',
        'source_ip' => 'string',
        'source_ip6' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'server' => null,
        'port' => null,
        'password' => 'password',
        'server2' => null,
        'port2' => null,
        'password2' => 'password',
        'server3' => null,
        'port3' => null,
        'password3' => 'password',
        'server4' => null,
        'port4' => null,
        'password4' => 'password',
        'server5' => null,
        'port5' => null,
        'password5' => 'password',
        'ldap_server' => null,
        'group_poll_interval' => null,
        'ldap_poll' => null,
        'ldap_poll_interval' => null,
        'ldap_poll_filter' => null,
        'user_info_server' => null,
        'ssl' => null,
        'ssl_trusted_cert' => null,
        'source_ip' => 'ipv4',
        'source_ip6' => 'ipv6',
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'server' => 'server',
        'port' => 'port',
        'password' => 'password',
        'server2' => 'server2',
        'port2' => 'port2',
        'password2' => 'password2',
        'server3' => 'server3',
        'port3' => 'port3',
        'password3' => 'password3',
        'server4' => 'server4',
        'port4' => 'port4',
        'password4' => 'password4',
        'server5' => 'server5',
        'port5' => 'port5',
        'password5' => 'password5',
        'ldap_server' => 'ldap-server',
        'group_poll_interval' => 'group-poll-interval',
        'ldap_poll' => 'ldap-poll',
        'ldap_poll_interval' => 'ldap-poll-interval',
        'ldap_poll_filter' => 'ldap-poll-filter',
        'user_info_server' => 'user-info-server',
        'ssl' => 'ssl',
        'ssl_trusted_cert' => 'ssl-trusted-cert',
        'source_ip' => 'source-ip',
        'source_ip6' => 'source-ip6',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'server' => 'setServer',
        'port' => 'setPort',
        'password' => 'setPassword',
        'server2' => 'setServer2',
        'port2' => 'setPort2',
        'password2' => 'setPassword2',
        'server3' => 'setServer3',
        'port3' => 'setPort3',
        'password3' => 'setPassword3',
        'server4' => 'setServer4',
        'port4' => 'setPort4',
        'password4' => 'setPassword4',
        'server5' => 'setServer5',
        'port5' => 'setPort5',
        'password5' => 'setPassword5',
        'ldap_server' => 'setLdapServer',
        'group_poll_interval' => 'setGroupPollInterval',
        'ldap_poll' => 'setLdapPoll',
        'ldap_poll_interval' => 'setLdapPollInterval',
        'ldap_poll_filter' => 'setLdapPollFilter',
        'user_info_server' => 'setUserInfoServer',
        'ssl' => 'setSsl',
        'ssl_trusted_cert' => 'setSslTrustedCert',
        'source_ip' => 'setSourceIp',
        'source_ip6' => 'setSourceIp6',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'server' => 'getServer',
        'port' => 'getPort',
        'password' => 'getPassword',
        'server2' => 'getServer2',
        'port2' => 'getPort2',
        'password2' => 'getPassword2',
        'server3' => 'getServer3',
        'port3' => 'getPort3',
        'password3' => 'getPassword3',
        'server4' => 'getServer4',
        'port4' => 'getPort4',
        'password4' => 'getPassword4',
        'server5' => 'getServer5',
        'port5' => 'getPort5',
        'password5' => 'getPassword5',
        'ldap_server' => 'getLdapServer',
        'group_poll_interval' => 'getGroupPollInterval',
        'ldap_poll' => 'getLdapPoll',
        'ldap_poll_interval' => 'getLdapPollInterval',
        'ldap_poll_filter' => 'getLdapPollFilter',
        'user_info_server' => 'getUserInfoServer',
        'ssl' => 'getSsl',
        'ssl_trusted_cert' => 'getSslTrustedCert',
        'source_ip' => 'getSourceIp',
        'source_ip6' => 'getSourceIp6',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE__DEFAULT = 'default';
    const TYPE_FORTINAC = 'fortinac';
    const LDAP_POLL_ENABLE = 'enable';
    const LDAP_POLL_DISABLE = 'disable';
    const SSL_ENABLE = 'enable';
    const SSL_DISABLE = 'disable';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__DEFAULT,
            self::TYPE_FORTINAC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLdapPollAllowableValues()
    {
        return [
            self::LDAP_POLL_ENABLE,
            self::LDAP_POLL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_ENABLE,
            self::SSL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['server2'] = $data['server2'] ?? null;
        $this->container['port2'] = $data['port2'] ?? null;
        $this->container['password2'] = $data['password2'] ?? null;
        $this->container['server3'] = $data['server3'] ?? null;
        $this->container['port3'] = $data['port3'] ?? null;
        $this->container['password3'] = $data['password3'] ?? null;
        $this->container['server4'] = $data['server4'] ?? null;
        $this->container['port4'] = $data['port4'] ?? null;
        $this->container['password4'] = $data['password4'] ?? null;
        $this->container['server5'] = $data['server5'] ?? null;
        $this->container['port5'] = $data['port5'] ?? null;
        $this->container['password5'] = $data['password5'] ?? null;
        $this->container['ldap_server'] = $data['ldap_server'] ?? null;
        $this->container['group_poll_interval'] = $data['group_poll_interval'] ?? null;
        $this->container['ldap_poll'] = $data['ldap_poll'] ?? null;
        $this->container['ldap_poll_interval'] = $data['ldap_poll_interval'] ?? null;
        $this->container['ldap_poll_filter'] = $data['ldap_poll_filter'] ?? null;
        $this->container['user_info_server'] = $data['user_info_server'] ?? null;
        $this->container['ssl'] = $data['ssl'] ?? null;
        $this->container['ssl_trusted_cert'] = $data['ssl_trusted_cert'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['source_ip6'] = $data['source_ip6'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['server2']) && (mb_strlen($this->container['server2']) > 63)) {
            $invalidProperties[] = "invalid value for 'server2', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port2']) && ($this->container['port2'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port2', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port2']) && ($this->container['port2'] < 1)) {
            $invalidProperties[] = "invalid value for 'port2', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['server3']) && (mb_strlen($this->container['server3']) > 63)) {
            $invalidProperties[] = "invalid value for 'server3', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port3']) && ($this->container['port3'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port3', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port3']) && ($this->container['port3'] < 1)) {
            $invalidProperties[] = "invalid value for 'port3', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['server4']) && (mb_strlen($this->container['server4']) > 63)) {
            $invalidProperties[] = "invalid value for 'server4', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port4']) && ($this->container['port4'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port4', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port4']) && ($this->container['port4'] < 1)) {
            $invalidProperties[] = "invalid value for 'port4', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['server5']) && (mb_strlen($this->container['server5']) > 63)) {
            $invalidProperties[] = "invalid value for 'server5', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port5']) && ($this->container['port5'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port5', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port5']) && ($this->container['port5'] < 1)) {
            $invalidProperties[] = "invalid value for 'port5', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ldap_server']) && (mb_strlen($this->container['ldap_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ldap_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['group_poll_interval']) && ($this->container['group_poll_interval'] > 2880)) {
            $invalidProperties[] = "invalid value for 'group_poll_interval', must be smaller than or equal to 2880.";
        }

        if (!is_null($this->container['group_poll_interval']) && ($this->container['group_poll_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'group_poll_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getLdapPollAllowableValues();
        if (!is_null($this->container['ldap_poll']) && !in_array($this->container['ldap_poll'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ldap_poll', must be one of '%s'",
                $this->container['ldap_poll'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ldap_poll_interval']) && ($this->container['ldap_poll_interval'] > 2880)) {
            $invalidProperties[] = "invalid value for 'ldap_poll_interval', must be smaller than or equal to 2880.";
        }

        if (!is_null($this->container['ldap_poll_interval']) && ($this->container['ldap_poll_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'ldap_poll_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ldap_poll_filter']) && (mb_strlen($this->container['ldap_poll_filter']) > 2047)) {
            $invalidProperties[] = "invalid value for 'ldap_poll_filter', the character length must be smaller than or equal to 2047.";
        }

        if (!is_null($this->container['user_info_server']) && (mb_strlen($this->container['user_info_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'user_info_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl', must be one of '%s'",
                $this->container['ssl'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssl_trusted_cert']) && (mb_strlen($this->container['ssl_trusted_cert']) > 79)) {
            $invalidProperties[] = "invalid value for 'ssl_trusted_cert', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject424., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Server type.    default:All other unspecified types of servers.    fortinac:FortiNAC server.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server Domain name or IP address of the first FSSO collector agent.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject424., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port of the first FSSO collector agent.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject424., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password of the first FSSO collector agent.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets server2
     *
     * @return string|null
     */
    public function getServer2()
    {
        return $this->container['server2'];
    }

    /**
     * Sets server2
     *
     * @param string|null $server2 Domain name or IP address of the second FSSO collector agent.
     *
     * @return self
     */
    public function setServer2($server2)
    {
        if (!is_null($server2) && (mb_strlen($server2) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server2 when calling InlineObject424., must be smaller than or equal to 63.');
        }

        $this->container['server2'] = $server2;

        return $this;
    }

    /**
     * Gets port2
     *
     * @return int|null
     */
    public function getPort2()
    {
        return $this->container['port2'];
    }

    /**
     * Sets port2
     *
     * @param int|null $port2 Port of the second FSSO collector agent.
     *
     * @return self
     */
    public function setPort2($port2)
    {

        if (!is_null($port2) && ($port2 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port2 when calling InlineObject424., must be smaller than or equal to 65535.');
        }
        if (!is_null($port2) && ($port2 < 1)) {
            throw new \InvalidArgumentException('invalid value for $port2 when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['port2'] = $port2;

        return $this;
    }

    /**
     * Gets password2
     *
     * @return string|null
     */
    public function getPassword2()
    {
        return $this->container['password2'];
    }

    /**
     * Sets password2
     *
     * @param string|null $password2 Password of the second FSSO collector agent.
     *
     * @return self
     */
    public function setPassword2($password2)
    {
        $this->container['password2'] = $password2;

        return $this;
    }

    /**
     * Gets server3
     *
     * @return string|null
     */
    public function getServer3()
    {
        return $this->container['server3'];
    }

    /**
     * Sets server3
     *
     * @param string|null $server3 Domain name or IP address of the third FSSO collector agent.
     *
     * @return self
     */
    public function setServer3($server3)
    {
        if (!is_null($server3) && (mb_strlen($server3) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server3 when calling InlineObject424., must be smaller than or equal to 63.');
        }

        $this->container['server3'] = $server3;

        return $this;
    }

    /**
     * Gets port3
     *
     * @return int|null
     */
    public function getPort3()
    {
        return $this->container['port3'];
    }

    /**
     * Sets port3
     *
     * @param int|null $port3 Port of the third FSSO collector agent.
     *
     * @return self
     */
    public function setPort3($port3)
    {

        if (!is_null($port3) && ($port3 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port3 when calling InlineObject424., must be smaller than or equal to 65535.');
        }
        if (!is_null($port3) && ($port3 < 1)) {
            throw new \InvalidArgumentException('invalid value for $port3 when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['port3'] = $port3;

        return $this;
    }

    /**
     * Gets password3
     *
     * @return string|null
     */
    public function getPassword3()
    {
        return $this->container['password3'];
    }

    /**
     * Sets password3
     *
     * @param string|null $password3 Password of the third FSSO collector agent.
     *
     * @return self
     */
    public function setPassword3($password3)
    {
        $this->container['password3'] = $password3;

        return $this;
    }

    /**
     * Gets server4
     *
     * @return string|null
     */
    public function getServer4()
    {
        return $this->container['server4'];
    }

    /**
     * Sets server4
     *
     * @param string|null $server4 Domain name or IP address of the fourth FSSO collector agent.
     *
     * @return self
     */
    public function setServer4($server4)
    {
        if (!is_null($server4) && (mb_strlen($server4) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server4 when calling InlineObject424., must be smaller than or equal to 63.');
        }

        $this->container['server4'] = $server4;

        return $this;
    }

    /**
     * Gets port4
     *
     * @return int|null
     */
    public function getPort4()
    {
        return $this->container['port4'];
    }

    /**
     * Sets port4
     *
     * @param int|null $port4 Port of the fourth FSSO collector agent.
     *
     * @return self
     */
    public function setPort4($port4)
    {

        if (!is_null($port4) && ($port4 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port4 when calling InlineObject424., must be smaller than or equal to 65535.');
        }
        if (!is_null($port4) && ($port4 < 1)) {
            throw new \InvalidArgumentException('invalid value for $port4 when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['port4'] = $port4;

        return $this;
    }

    /**
     * Gets password4
     *
     * @return string|null
     */
    public function getPassword4()
    {
        return $this->container['password4'];
    }

    /**
     * Sets password4
     *
     * @param string|null $password4 Password of the fourth FSSO collector agent.
     *
     * @return self
     */
    public function setPassword4($password4)
    {
        $this->container['password4'] = $password4;

        return $this;
    }

    /**
     * Gets server5
     *
     * @return string|null
     */
    public function getServer5()
    {
        return $this->container['server5'];
    }

    /**
     * Sets server5
     *
     * @param string|null $server5 Domain name or IP address of the fifth FSSO collector agent.
     *
     * @return self
     */
    public function setServer5($server5)
    {
        if (!is_null($server5) && (mb_strlen($server5) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server5 when calling InlineObject424., must be smaller than or equal to 63.');
        }

        $this->container['server5'] = $server5;

        return $this;
    }

    /**
     * Gets port5
     *
     * @return int|null
     */
    public function getPort5()
    {
        return $this->container['port5'];
    }

    /**
     * Sets port5
     *
     * @param int|null $port5 Port of the fifth FSSO collector agent.
     *
     * @return self
     */
    public function setPort5($port5)
    {

        if (!is_null($port5) && ($port5 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port5 when calling InlineObject424., must be smaller than or equal to 65535.');
        }
        if (!is_null($port5) && ($port5 < 1)) {
            throw new \InvalidArgumentException('invalid value for $port5 when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['port5'] = $port5;

        return $this;
    }

    /**
     * Gets password5
     *
     * @return string|null
     */
    public function getPassword5()
    {
        return $this->container['password5'];
    }

    /**
     * Sets password5
     *
     * @param string|null $password5 Password of the fifth FSSO collector agent.
     *
     * @return self
     */
    public function setPassword5($password5)
    {
        $this->container['password5'] = $password5;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return string|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param string|null $ldap_server LDAP server to get group information.
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {
        if (!is_null($ldap_server) && (mb_strlen($ldap_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ldap_server when calling InlineObject424., must be smaller than or equal to 35.');
        }

        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets group_poll_interval
     *
     * @return int|null
     */
    public function getGroupPollInterval()
    {
        return $this->container['group_poll_interval'];
    }

    /**
     * Sets group_poll_interval
     *
     * @param int|null $group_poll_interval Interval in minutes within to fetch groups from FSSO server, or unset to disable.
     *
     * @return self
     */
    public function setGroupPollInterval($group_poll_interval)
    {

        if (!is_null($group_poll_interval) && ($group_poll_interval > 2880)) {
            throw new \InvalidArgumentException('invalid value for $group_poll_interval when calling InlineObject424., must be smaller than or equal to 2880.');
        }
        if (!is_null($group_poll_interval) && ($group_poll_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $group_poll_interval when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['group_poll_interval'] = $group_poll_interval;

        return $this;
    }

    /**
     * Gets ldap_poll
     *
     * @return string|null
     */
    public function getLdapPoll()
    {
        return $this->container['ldap_poll'];
    }

    /**
     * Sets ldap_poll
     *
     * @param string|null $ldap_poll Enable/disable automatic fetching of groups from LDAP server.    enable:Enable automatic fetching of groups from LDAP server.    disable:Disable automatic fetching of groups from LDAP server.
     *
     * @return self
     */
    public function setLdapPoll($ldap_poll)
    {
        $allowedValues = $this->getLdapPollAllowableValues();
        if (!is_null($ldap_poll) && !in_array($ldap_poll, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ldap_poll', must be one of '%s'",
                    $ldap_poll,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ldap_poll'] = $ldap_poll;

        return $this;
    }

    /**
     * Gets ldap_poll_interval
     *
     * @return int|null
     */
    public function getLdapPollInterval()
    {
        return $this->container['ldap_poll_interval'];
    }

    /**
     * Sets ldap_poll_interval
     *
     * @param int|null $ldap_poll_interval Interval in minutes within to fetch groups from LDAP server.
     *
     * @return self
     */
    public function setLdapPollInterval($ldap_poll_interval)
    {

        if (!is_null($ldap_poll_interval) && ($ldap_poll_interval > 2880)) {
            throw new \InvalidArgumentException('invalid value for $ldap_poll_interval when calling InlineObject424., must be smaller than or equal to 2880.');
        }
        if (!is_null($ldap_poll_interval) && ($ldap_poll_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $ldap_poll_interval when calling InlineObject424., must be bigger than or equal to 1.');
        }

        $this->container['ldap_poll_interval'] = $ldap_poll_interval;

        return $this;
    }

    /**
     * Gets ldap_poll_filter
     *
     * @return string|null
     */
    public function getLdapPollFilter()
    {
        return $this->container['ldap_poll_filter'];
    }

    /**
     * Sets ldap_poll_filter
     *
     * @param string|null $ldap_poll_filter Filter used to fetch groups.
     *
     * @return self
     */
    public function setLdapPollFilter($ldap_poll_filter)
    {
        if (!is_null($ldap_poll_filter) && (mb_strlen($ldap_poll_filter) > 2047)) {
            throw new \InvalidArgumentException('invalid length for $ldap_poll_filter when calling InlineObject424., must be smaller than or equal to 2047.');
        }

        $this->container['ldap_poll_filter'] = $ldap_poll_filter;

        return $this;
    }

    /**
     * Gets user_info_server
     *
     * @return string|null
     */
    public function getUserInfoServer()
    {
        return $this->container['user_info_server'];
    }

    /**
     * Sets user_info_server
     *
     * @param string|null $user_info_server LDAP server to get user information.
     *
     * @return self
     */
    public function setUserInfoServer($user_info_server)
    {
        if (!is_null($user_info_server) && (mb_strlen($user_info_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $user_info_server when calling InlineObject424., must be smaller than or equal to 35.');
        }

        $this->container['user_info_server'] = $user_info_server;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string|null $ssl Enable/disable use of SSL.    enable:Enable use of SSL.    disable:Disable use of SSL.
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl', must be one of '%s'",
                    $ssl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ssl_trusted_cert
     *
     * @return string|null
     */
    public function getSslTrustedCert()
    {
        return $this->container['ssl_trusted_cert'];
    }

    /**
     * Sets ssl_trusted_cert
     *
     * @param string|null $ssl_trusted_cert Trusted server certificate or CA certificate.
     *
     * @return self
     */
    public function setSslTrustedCert($ssl_trusted_cert)
    {
        if (!is_null($ssl_trusted_cert) && (mb_strlen($ssl_trusted_cert) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ssl_trusted_cert when calling InlineObject424., must be smaller than or equal to 79.');
        }

        $this->container['ssl_trusted_cert'] = $ssl_trusted_cert;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP for communications to FSSO agent.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip6
     *
     * @return string|null
     */
    public function getSourceIp6()
    {
        return $this->container['source_ip6'];
    }

    /**
     * Sets source_ip6
     *
     * @param string|null $source_ip6 IPv6 source for communications to FSSO agent.
     *
     * @return self
     */
    public function setSourceIp6($source_ip6)
    {
        $this->container['source_ip6'] = $source_ip6;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject424., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


