<?php
/**
 * InlineObject553
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject553 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject553 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_553';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'ipv6_address_type' => 'string',
        'ipv4_address_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'ipv6_address_type' => null,
        'ipv4_address_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ipv6_address_type' => 'ipv6-address-type',
        'ipv4_address_type' => 'ipv4-address-type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ipv6_address_type' => 'setIpv6AddressType',
        'ipv4_address_type' => 'setIpv4AddressType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ipv6_address_type' => 'getIpv6AddressType',
        'ipv4_address_type' => 'getIpv4AddressType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IPV6_ADDRESS_TYPE_NOT_AVAILABLE = 'not-available';
    const IPV6_ADDRESS_TYPE_AVAILABLE = 'available';
    const IPV6_ADDRESS_TYPE_NOT_KNOWN = 'not-known';
    const IPV4_ADDRESS_TYPE_NOT_AVAILABLE = 'not-available';
    const IPV4_ADDRESS_TYPE__PUBLIC = 'public';
    const IPV4_ADDRESS_TYPE_PORT_RESTRICTED = 'port-restricted';
    const IPV4_ADDRESS_TYPE_SINGLE_NA_TED_PRIVATE = 'single-NATed-private';
    const IPV4_ADDRESS_TYPE_DOUBLE_NA_TED_PRIVATE = 'double-NATed-private';
    const IPV4_ADDRESS_TYPE_PORT_RESTRICTED_AND_SINGLE_NA_TED = 'port-restricted-and-single-NATed';
    const IPV4_ADDRESS_TYPE_PORT_RESTRICTED_AND_DOUBLE_NA_TED = 'port-restricted-and-double-NATed';
    const IPV4_ADDRESS_TYPE_NOT_KNOWN = 'not-known';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6AddressTypeAllowableValues()
    {
        return [
            self::IPV6_ADDRESS_TYPE_NOT_AVAILABLE,
            self::IPV6_ADDRESS_TYPE_AVAILABLE,
            self::IPV6_ADDRESS_TYPE_NOT_KNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4AddressTypeAllowableValues()
    {
        return [
            self::IPV4_ADDRESS_TYPE_NOT_AVAILABLE,
            self::IPV4_ADDRESS_TYPE__PUBLIC,
            self::IPV4_ADDRESS_TYPE_PORT_RESTRICTED,
            self::IPV4_ADDRESS_TYPE_SINGLE_NA_TED_PRIVATE,
            self::IPV4_ADDRESS_TYPE_DOUBLE_NA_TED_PRIVATE,
            self::IPV4_ADDRESS_TYPE_PORT_RESTRICTED_AND_SINGLE_NA_TED,
            self::IPV4_ADDRESS_TYPE_PORT_RESTRICTED_AND_DOUBLE_NA_TED,
            self::IPV4_ADDRESS_TYPE_NOT_KNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ipv6_address_type'] = $data['ipv6_address_type'] ?? null;
        $this->container['ipv4_address_type'] = $data['ipv4_address_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getIpv6AddressTypeAllowableValues();
        if (!is_null($this->container['ipv6_address_type']) && !in_array($this->container['ipv6_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_address_type', must be one of '%s'",
                $this->container['ipv6_address_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4AddressTypeAllowableValues();
        if (!is_null($this->container['ipv4_address_type']) && !in_array($this->container['ipv4_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_address_type', must be one of '%s'",
                $this->container['ipv4_address_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IP type name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject553., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ipv6_address_type
     *
     * @return string|null
     */
    public function getIpv6AddressType()
    {
        return $this->container['ipv6_address_type'];
    }

    /**
     * Sets ipv6_address_type
     *
     * @param string|null $ipv6_address_type IPv6 address type.    not-available:Address type not available.    available:Address type available.    not-known:Availability of the address type not known.
     *
     * @return self
     */
    public function setIpv6AddressType($ipv6_address_type)
    {
        $allowedValues = $this->getIpv6AddressTypeAllowableValues();
        if (!is_null($ipv6_address_type) && !in_array($ipv6_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_address_type', must be one of '%s'",
                    $ipv6_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_address_type'] = $ipv6_address_type;

        return $this;
    }

    /**
     * Gets ipv4_address_type
     *
     * @return string|null
     */
    public function getIpv4AddressType()
    {
        return $this->container['ipv4_address_type'];
    }

    /**
     * Sets ipv4_address_type
     *
     * @param string|null $ipv4_address_type IPv4 address type.    not-available:Address type not available.    public:Public IPv4 address available.    port-restricted:Port-restricted IPv4 address available.    single-NATed-private:Single NATed private IPv4 address available.    double-NATed-private:Double NATed private IPv4 address available.    port-restricted-and-single-NATed:Port-restricted IPv4 address and single NATed IPv4 address available.    port-restricted-and-double-NATed:Port-restricted IPv4 address and double NATed IPv4 address available.    not-known:Availability of the address type is not known.
     *
     * @return self
     */
    public function setIpv4AddressType($ipv4_address_type)
    {
        $allowedValues = $this->getIpv4AddressTypeAllowableValues();
        if (!is_null($ipv4_address_type) && !in_array($ipv4_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_address_type', must be one of '%s'",
                    $ipv4_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_address_type'] = $ipv4_address_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


