<?php
/**
 * InlineObject42
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject42 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject42 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_42';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'domain_filter' => '\Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDomainFilter[]',
        'ftgd_dns' => '\Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameFtgdDns[]',
        'log_all_domain' => 'string',
        'sdns_ftgd_err_log' => 'string',
        'sdns_domain_log' => 'string',
        'block_action' => 'string',
        'redirect_portal' => 'string',
        'redirect_portal6' => 'string',
        'block_botnet' => 'string',
        'safe_search' => 'string',
        'youtube_restrict' => 'string',
        'external_ip_blocklist' => '\Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameExternalIpBlocklist[]',
        'dns_translation' => '\Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDnsTranslation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'domain_filter' => null,
        'ftgd_dns' => null,
        'log_all_domain' => null,
        'sdns_ftgd_err_log' => null,
        'sdns_domain_log' => null,
        'block_action' => null,
        'redirect_portal' => 'ipv4',
        'redirect_portal6' => 'ipv6',
        'block_botnet' => null,
        'safe_search' => null,
        'youtube_restrict' => null,
        'external_ip_blocklist' => null,
        'dns_translation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'domain_filter' => 'domain-filter',
        'ftgd_dns' => 'ftgd-dns',
        'log_all_domain' => 'log-all-domain',
        'sdns_ftgd_err_log' => 'sdns-ftgd-err-log',
        'sdns_domain_log' => 'sdns-domain-log',
        'block_action' => 'block-action',
        'redirect_portal' => 'redirect-portal',
        'redirect_portal6' => 'redirect-portal6',
        'block_botnet' => 'block-botnet',
        'safe_search' => 'safe-search',
        'youtube_restrict' => 'youtube-restrict',
        'external_ip_blocklist' => 'external-ip-blocklist',
        'dns_translation' => 'dns-translation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'domain_filter' => 'setDomainFilter',
        'ftgd_dns' => 'setFtgdDns',
        'log_all_domain' => 'setLogAllDomain',
        'sdns_ftgd_err_log' => 'setSdnsFtgdErrLog',
        'sdns_domain_log' => 'setSdnsDomainLog',
        'block_action' => 'setBlockAction',
        'redirect_portal' => 'setRedirectPortal',
        'redirect_portal6' => 'setRedirectPortal6',
        'block_botnet' => 'setBlockBotnet',
        'safe_search' => 'setSafeSearch',
        'youtube_restrict' => 'setYoutubeRestrict',
        'external_ip_blocklist' => 'setExternalIpBlocklist',
        'dns_translation' => 'setDnsTranslation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'domain_filter' => 'getDomainFilter',
        'ftgd_dns' => 'getFtgdDns',
        'log_all_domain' => 'getLogAllDomain',
        'sdns_ftgd_err_log' => 'getSdnsFtgdErrLog',
        'sdns_domain_log' => 'getSdnsDomainLog',
        'block_action' => 'getBlockAction',
        'redirect_portal' => 'getRedirectPortal',
        'redirect_portal6' => 'getRedirectPortal6',
        'block_botnet' => 'getBlockBotnet',
        'safe_search' => 'getSafeSearch',
        'youtube_restrict' => 'getYoutubeRestrict',
        'external_ip_blocklist' => 'getExternalIpBlocklist',
        'dns_translation' => 'getDnsTranslation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOG_ALL_DOMAIN_ENABLE = 'enable';
    const LOG_ALL_DOMAIN_DISABLE = 'disable';
    const SDNS_FTGD_ERR_LOG_ENABLE = 'enable';
    const SDNS_FTGD_ERR_LOG_DISABLE = 'disable';
    const SDNS_DOMAIN_LOG_ENABLE = 'enable';
    const SDNS_DOMAIN_LOG_DISABLE = 'disable';
    const BLOCK_ACTION_BLOCK = 'block';
    const BLOCK_ACTION_REDIRECT = 'redirect';
    const BLOCK_BOTNET_DISABLE = 'disable';
    const BLOCK_BOTNET_ENABLE = 'enable';
    const SAFE_SEARCH_DISABLE = 'disable';
    const SAFE_SEARCH_ENABLE = 'enable';
    const YOUTUBE_RESTRICT_STRICT = 'strict';
    const YOUTUBE_RESTRICT_MODERATE = 'moderate';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllDomainAllowableValues()
    {
        return [
            self::LOG_ALL_DOMAIN_ENABLE,
            self::LOG_ALL_DOMAIN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdnsFtgdErrLogAllowableValues()
    {
        return [
            self::SDNS_FTGD_ERR_LOG_ENABLE,
            self::SDNS_FTGD_ERR_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdnsDomainLogAllowableValues()
    {
        return [
            self::SDNS_DOMAIN_LOG_ENABLE,
            self::SDNS_DOMAIN_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockActionAllowableValues()
    {
        return [
            self::BLOCK_ACTION_BLOCK,
            self::BLOCK_ACTION_REDIRECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockBotnetAllowableValues()
    {
        return [
            self::BLOCK_BOTNET_DISABLE,
            self::BLOCK_BOTNET_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSafeSearchAllowableValues()
    {
        return [
            self::SAFE_SEARCH_DISABLE,
            self::SAFE_SEARCH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getYoutubeRestrictAllowableValues()
    {
        return [
            self::YOUTUBE_RESTRICT_STRICT,
            self::YOUTUBE_RESTRICT_MODERATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['domain_filter'] = $data['domain_filter'] ?? null;
        $this->container['ftgd_dns'] = $data['ftgd_dns'] ?? null;
        $this->container['log_all_domain'] = $data['log_all_domain'] ?? null;
        $this->container['sdns_ftgd_err_log'] = $data['sdns_ftgd_err_log'] ?? null;
        $this->container['sdns_domain_log'] = $data['sdns_domain_log'] ?? null;
        $this->container['block_action'] = $data['block_action'] ?? null;
        $this->container['redirect_portal'] = $data['redirect_portal'] ?? null;
        $this->container['redirect_portal6'] = $data['redirect_portal6'] ?? null;
        $this->container['block_botnet'] = $data['block_botnet'] ?? null;
        $this->container['safe_search'] = $data['safe_search'] ?? null;
        $this->container['youtube_restrict'] = $data['youtube_restrict'] ?? null;
        $this->container['external_ip_blocklist'] = $data['external_ip_blocklist'] ?? null;
        $this->container['dns_translation'] = $data['dns_translation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['domain_filter']) && (count($this->container['domain_filter']) > 0)) {
            $invalidProperties[] = "invalid value for 'domain_filter', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ftgd_dns']) && (count($this->container['ftgd_dns']) > 0)) {
            $invalidProperties[] = "invalid value for 'ftgd_dns', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getLogAllDomainAllowableValues();
        if (!is_null($this->container['log_all_domain']) && !in_array($this->container['log_all_domain'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_all_domain', must be one of '%s'",
                $this->container['log_all_domain'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSdnsFtgdErrLogAllowableValues();
        if (!is_null($this->container['sdns_ftgd_err_log']) && !in_array($this->container['sdns_ftgd_err_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdns_ftgd_err_log', must be one of '%s'",
                $this->container['sdns_ftgd_err_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSdnsDomainLogAllowableValues();
        if (!is_null($this->container['sdns_domain_log']) && !in_array($this->container['sdns_domain_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdns_domain_log', must be one of '%s'",
                $this->container['sdns_domain_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockActionAllowableValues();
        if (!is_null($this->container['block_action']) && !in_array($this->container['block_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_action', must be one of '%s'",
                $this->container['block_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockBotnetAllowableValues();
        if (!is_null($this->container['block_botnet']) && !in_array($this->container['block_botnet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_botnet', must be one of '%s'",
                $this->container['block_botnet'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSafeSearchAllowableValues();
        if (!is_null($this->container['safe_search']) && !in_array($this->container['safe_search'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'safe_search', must be one of '%s'",
                $this->container['safe_search'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getYoutubeRestrictAllowableValues();
        if (!is_null($this->container['youtube_restrict']) && !in_array($this->container['youtube_restrict'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'youtube_restrict', must be one of '%s'",
                $this->container['youtube_restrict'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['external_ip_blocklist']) && (count($this->container['external_ip_blocklist']) > 0)) {
            $invalidProperties[] = "invalid value for 'external_ip_blocklist', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dns_translation']) && (count($this->container['dns_translation']) > 0)) {
            $invalidProperties[] = "invalid value for 'dns_translation', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject42., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject42., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets domain_filter
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDomainFilter[]|null
     */
    public function getDomainFilter()
    {
        return $this->container['domain_filter'];
    }

    /**
     * Sets domain_filter
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDomainFilter[]|null $domain_filter Domain filter settings.
     *
     * @return self
     */
    public function setDomainFilter($domain_filter)
    {

        if (!is_null($domain_filter) && (count($domain_filter) > 0)) {
            throw new \InvalidArgumentException('invalid value for $domain_filter when calling InlineObject42., number of items must be less than or equal to 0.');
        }
        $this->container['domain_filter'] = $domain_filter;

        return $this;
    }

    /**
     * Gets ftgd_dns
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameFtgdDns[]|null
     */
    public function getFtgdDns()
    {
        return $this->container['ftgd_dns'];
    }

    /**
     * Sets ftgd_dns
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameFtgdDns[]|null $ftgd_dns FortiGuard DNS Filter settings.
     *
     * @return self
     */
    public function setFtgdDns($ftgd_dns)
    {

        if (!is_null($ftgd_dns) && (count($ftgd_dns) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ftgd_dns when calling InlineObject42., number of items must be less than or equal to 0.');
        }
        $this->container['ftgd_dns'] = $ftgd_dns;

        return $this;
    }

    /**
     * Gets log_all_domain
     *
     * @return string|null
     */
    public function getLogAllDomain()
    {
        return $this->container['log_all_domain'];
    }

    /**
     * Sets log_all_domain
     *
     * @param string|null $log_all_domain Enable/disable logging of all domains visited (detailed DNS logging).    enable:Enable logging of all domains visited.    disable:Disable logging of all domains visited.
     *
     * @return self
     */
    public function setLogAllDomain($log_all_domain)
    {
        $allowedValues = $this->getLogAllDomainAllowableValues();
        if (!is_null($log_all_domain) && !in_array($log_all_domain, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_all_domain', must be one of '%s'",
                    $log_all_domain,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_all_domain'] = $log_all_domain;

        return $this;
    }

    /**
     * Gets sdns_ftgd_err_log
     *
     * @return string|null
     */
    public function getSdnsFtgdErrLog()
    {
        return $this->container['sdns_ftgd_err_log'];
    }

    /**
     * Sets sdns_ftgd_err_log
     *
     * @param string|null $sdns_ftgd_err_log Enable/disable FortiGuard SDNS rating error logging.    enable:Enable FortiGuard SDNS rating error logging.    disable:Disable FortiGuard SDNS rating error logging.
     *
     * @return self
     */
    public function setSdnsFtgdErrLog($sdns_ftgd_err_log)
    {
        $allowedValues = $this->getSdnsFtgdErrLogAllowableValues();
        if (!is_null($sdns_ftgd_err_log) && !in_array($sdns_ftgd_err_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdns_ftgd_err_log', must be one of '%s'",
                    $sdns_ftgd_err_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdns_ftgd_err_log'] = $sdns_ftgd_err_log;

        return $this;
    }

    /**
     * Gets sdns_domain_log
     *
     * @return string|null
     */
    public function getSdnsDomainLog()
    {
        return $this->container['sdns_domain_log'];
    }

    /**
     * Sets sdns_domain_log
     *
     * @param string|null $sdns_domain_log Enable/disable domain filtering and botnet domain logging.    enable:Enable domain filtering and botnet domain logging.    disable:Disable domain filtering and botnet domain logging.
     *
     * @return self
     */
    public function setSdnsDomainLog($sdns_domain_log)
    {
        $allowedValues = $this->getSdnsDomainLogAllowableValues();
        if (!is_null($sdns_domain_log) && !in_array($sdns_domain_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdns_domain_log', must be one of '%s'",
                    $sdns_domain_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdns_domain_log'] = $sdns_domain_log;

        return $this;
    }

    /**
     * Gets block_action
     *
     * @return string|null
     */
    public function getBlockAction()
    {
        return $this->container['block_action'];
    }

    /**
     * Sets block_action
     *
     * @param string|null $block_action Action to take for blocked domains.    block:Return NXDOMAIN for blocked domains.    redirect:Redirect blocked domains to SDNS portal.
     *
     * @return self
     */
    public function setBlockAction($block_action)
    {
        $allowedValues = $this->getBlockActionAllowableValues();
        if (!is_null($block_action) && !in_array($block_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_action', must be one of '%s'",
                    $block_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_action'] = $block_action;

        return $this;
    }

    /**
     * Gets redirect_portal
     *
     * @return string|null
     */
    public function getRedirectPortal()
    {
        return $this->container['redirect_portal'];
    }

    /**
     * Sets redirect_portal
     *
     * @param string|null $redirect_portal IPv4 address of the SDNS redirect portal.
     *
     * @return self
     */
    public function setRedirectPortal($redirect_portal)
    {
        $this->container['redirect_portal'] = $redirect_portal;

        return $this;
    }

    /**
     * Gets redirect_portal6
     *
     * @return string|null
     */
    public function getRedirectPortal6()
    {
        return $this->container['redirect_portal6'];
    }

    /**
     * Sets redirect_portal6
     *
     * @param string|null $redirect_portal6 IPv6 address of the SDNS redirect portal.
     *
     * @return self
     */
    public function setRedirectPortal6($redirect_portal6)
    {
        $this->container['redirect_portal6'] = $redirect_portal6;

        return $this;
    }

    /**
     * Gets block_botnet
     *
     * @return string|null
     */
    public function getBlockBotnet()
    {
        return $this->container['block_botnet'];
    }

    /**
     * Sets block_botnet
     *
     * @param string|null $block_botnet Enable/disable blocking botnet C&C DNS lookups.    disable:Disable blocking botnet C&C DNS lookups.    enable:Enable blocking botnet C&C DNS lookups.
     *
     * @return self
     */
    public function setBlockBotnet($block_botnet)
    {
        $allowedValues = $this->getBlockBotnetAllowableValues();
        if (!is_null($block_botnet) && !in_array($block_botnet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_botnet', must be one of '%s'",
                    $block_botnet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_botnet'] = $block_botnet;

        return $this;
    }

    /**
     * Gets safe_search
     *
     * @return string|null
     */
    public function getSafeSearch()
    {
        return $this->container['safe_search'];
    }

    /**
     * Sets safe_search
     *
     * @param string|null $safe_search Enable/disable Google, Bing, and YouTube safe search.    disable:Disable Google, Bing, and YouTube safe search.    enable:Enable Google, Bing, and YouTube safe search.
     *
     * @return self
     */
    public function setSafeSearch($safe_search)
    {
        $allowedValues = $this->getSafeSearchAllowableValues();
        if (!is_null($safe_search) && !in_array($safe_search, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'safe_search', must be one of '%s'",
                    $safe_search,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['safe_search'] = $safe_search;

        return $this;
    }

    /**
     * Gets youtube_restrict
     *
     * @return string|null
     */
    public function getYoutubeRestrict()
    {
        return $this->container['youtube_restrict'];
    }

    /**
     * Sets youtube_restrict
     *
     * @param string|null $youtube_restrict Set safe search for YouTube restriction level.    strict:Enable strict safe seach for YouTube.    moderate:Enable moderate safe search for YouTube.
     *
     * @return self
     */
    public function setYoutubeRestrict($youtube_restrict)
    {
        $allowedValues = $this->getYoutubeRestrictAllowableValues();
        if (!is_null($youtube_restrict) && !in_array($youtube_restrict, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'youtube_restrict', must be one of '%s'",
                    $youtube_restrict,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['youtube_restrict'] = $youtube_restrict;

        return $this;
    }

    /**
     * Gets external_ip_blocklist
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameExternalIpBlocklist[]|null
     */
    public function getExternalIpBlocklist()
    {
        return $this->container['external_ip_blocklist'];
    }

    /**
     * Sets external_ip_blocklist
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameExternalIpBlocklist[]|null $external_ip_blocklist One or more external IP block lists.
     *
     * @return self
     */
    public function setExternalIpBlocklist($external_ip_blocklist)
    {

        if (!is_null($external_ip_blocklist) && (count($external_ip_blocklist) > 0)) {
            throw new \InvalidArgumentException('invalid value for $external_ip_blocklist when calling InlineObject42., number of items must be less than or equal to 0.');
        }
        $this->container['external_ip_blocklist'] = $external_ip_blocklist;

        return $this;
    }

    /**
     * Gets dns_translation
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDnsTranslation[]|null
     */
    public function getDnsTranslation()
    {
        return $this->container['dns_translation'];
    }

    /**
     * Sets dns_translation
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DnsfilterProfileNameDnsTranslation[]|null $dns_translation DNS translation settings.
     *
     * @return self
     */
    public function setDnsTranslation($dns_translation)
    {

        if (!is_null($dns_translation) && (count($dns_translation) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dns_translation when calling InlineObject42., number of items must be less than or equal to 0.');
        }
        $this->container['dns_translation'] = $dns_translation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


