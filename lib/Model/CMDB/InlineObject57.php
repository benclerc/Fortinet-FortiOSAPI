<?php
/**
 * InlineObject57
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject57 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject57 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_57';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'feature_set' => 'string',
        'replacemsg_group' => 'string',
        'spam_log' => 'string',
        'spam_log_fortiguard_response' => 'string',
        'spam_filtering' => 'string',
        'external' => 'string',
        'options' => 'string',
        'imap' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]',
        'pop3' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]',
        'smtp' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameSmtp[]',
        'mapi' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMapi[]',
        'msn_hotmail' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]',
        'yahoo_mail' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]',
        'gmail' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]',
        'other_webmails' => '\Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]',
        'spam_bword_threshold' => 'int',
        'spam_bword_table' => 'int',
        'spam_bwl_table' => 'int',
        'spam_mheader_table' => 'int',
        'spam_rbl_table' => 'int',
        'spam_iptrust_table' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'feature_set' => null,
        'replacemsg_group' => null,
        'spam_log' => null,
        'spam_log_fortiguard_response' => null,
        'spam_filtering' => null,
        'external' => null,
        'options' => null,
        'imap' => null,
        'pop3' => null,
        'smtp' => null,
        'mapi' => null,
        'msn_hotmail' => null,
        'yahoo_mail' => null,
        'gmail' => null,
        'other_webmails' => null,
        'spam_bword_threshold' => null,
        'spam_bword_table' => null,
        'spam_bwl_table' => null,
        'spam_mheader_table' => null,
        'spam_rbl_table' => null,
        'spam_iptrust_table' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'feature_set' => 'feature-set',
        'replacemsg_group' => 'replacemsg-group',
        'spam_log' => 'spam-log',
        'spam_log_fortiguard_response' => 'spam-log-fortiguard-response',
        'spam_filtering' => 'spam-filtering',
        'external' => 'external',
        'options' => 'options',
        'imap' => 'imap',
        'pop3' => 'pop3',
        'smtp' => 'smtp',
        'mapi' => 'mapi',
        'msn_hotmail' => 'msn-hotmail',
        'yahoo_mail' => 'yahoo-mail',
        'gmail' => 'gmail',
        'other_webmails' => 'other-webmails',
        'spam_bword_threshold' => 'spam-bword-threshold',
        'spam_bword_table' => 'spam-bword-table',
        'spam_bwl_table' => 'spam-bwl-table',
        'spam_mheader_table' => 'spam-mheader-table',
        'spam_rbl_table' => 'spam-rbl-table',
        'spam_iptrust_table' => 'spam-iptrust-table'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'feature_set' => 'setFeatureSet',
        'replacemsg_group' => 'setReplacemsgGroup',
        'spam_log' => 'setSpamLog',
        'spam_log_fortiguard_response' => 'setSpamLogFortiguardResponse',
        'spam_filtering' => 'setSpamFiltering',
        'external' => 'setExternal',
        'options' => 'setOptions',
        'imap' => 'setImap',
        'pop3' => 'setPop3',
        'smtp' => 'setSmtp',
        'mapi' => 'setMapi',
        'msn_hotmail' => 'setMsnHotmail',
        'yahoo_mail' => 'setYahooMail',
        'gmail' => 'setGmail',
        'other_webmails' => 'setOtherWebmails',
        'spam_bword_threshold' => 'setSpamBwordThreshold',
        'spam_bword_table' => 'setSpamBwordTable',
        'spam_bwl_table' => 'setSpamBwlTable',
        'spam_mheader_table' => 'setSpamMheaderTable',
        'spam_rbl_table' => 'setSpamRblTable',
        'spam_iptrust_table' => 'setSpamIptrustTable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'feature_set' => 'getFeatureSet',
        'replacemsg_group' => 'getReplacemsgGroup',
        'spam_log' => 'getSpamLog',
        'spam_log_fortiguard_response' => 'getSpamLogFortiguardResponse',
        'spam_filtering' => 'getSpamFiltering',
        'external' => 'getExternal',
        'options' => 'getOptions',
        'imap' => 'getImap',
        'pop3' => 'getPop3',
        'smtp' => 'getSmtp',
        'mapi' => 'getMapi',
        'msn_hotmail' => 'getMsnHotmail',
        'yahoo_mail' => 'getYahooMail',
        'gmail' => 'getGmail',
        'other_webmails' => 'getOtherWebmails',
        'spam_bword_threshold' => 'getSpamBwordThreshold',
        'spam_bword_table' => 'getSpamBwordTable',
        'spam_bwl_table' => 'getSpamBwlTable',
        'spam_mheader_table' => 'getSpamMheaderTable',
        'spam_rbl_table' => 'getSpamRblTable',
        'spam_iptrust_table' => 'getSpamIptrustTable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FEATURE_SET_FLOW = 'flow';
    const FEATURE_SET_PROXY = 'proxy';
    const SPAM_LOG_DISABLE = 'disable';
    const SPAM_LOG_ENABLE = 'enable';
    const SPAM_LOG_FORTIGUARD_RESPONSE_DISABLE = 'disable';
    const SPAM_LOG_FORTIGUARD_RESPONSE_ENABLE = 'enable';
    const SPAM_FILTERING_ENABLE = 'enable';
    const SPAM_FILTERING_DISABLE = 'disable';
    const EXTERNAL_ENABLE = 'enable';
    const EXTERNAL_DISABLE = 'disable';
    const OPTIONS_BANNEDWORD = 'bannedword';
    const OPTIONS_SPAMBWL = 'spambwl';
    const OPTIONS_SPAMFSIP = 'spamfsip';
    const OPTIONS_SPAMFSSUBMIT = 'spamfssubmit';
    const OPTIONS_SPAMFSCHKSUM = 'spamfschksum';
    const OPTIONS_SPAMFSURL = 'spamfsurl';
    const OPTIONS_SPAMHELODNS = 'spamhelodns';
    const OPTIONS_SPAMRADDRDNS = 'spamraddrdns';
    const OPTIONS_SPAMRBL = 'spamrbl';
    const OPTIONS_SPAMHDRCHECK = 'spamhdrcheck';
    const OPTIONS_SPAMFSPHISH = 'spamfsphish';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureSetAllowableValues()
    {
        return [
            self::FEATURE_SET_FLOW,
            self::FEATURE_SET_PROXY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpamLogAllowableValues()
    {
        return [
            self::SPAM_LOG_DISABLE,
            self::SPAM_LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpamLogFortiguardResponseAllowableValues()
    {
        return [
            self::SPAM_LOG_FORTIGUARD_RESPONSE_DISABLE,
            self::SPAM_LOG_FORTIGUARD_RESPONSE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpamFilteringAllowableValues()
    {
        return [
            self::SPAM_FILTERING_ENABLE,
            self::SPAM_FILTERING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalAllowableValues()
    {
        return [
            self::EXTERNAL_ENABLE,
            self::EXTERNAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_BANNEDWORD,
            self::OPTIONS_SPAMBWL,
            self::OPTIONS_SPAMFSIP,
            self::OPTIONS_SPAMFSSUBMIT,
            self::OPTIONS_SPAMFSCHKSUM,
            self::OPTIONS_SPAMFSURL,
            self::OPTIONS_SPAMHELODNS,
            self::OPTIONS_SPAMRADDRDNS,
            self::OPTIONS_SPAMRBL,
            self::OPTIONS_SPAMHDRCHECK,
            self::OPTIONS_SPAMFSPHISH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['feature_set'] = $data['feature_set'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['spam_log'] = $data['spam_log'] ?? null;
        $this->container['spam_log_fortiguard_response'] = $data['spam_log_fortiguard_response'] ?? null;
        $this->container['spam_filtering'] = $data['spam_filtering'] ?? null;
        $this->container['external'] = $data['external'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['imap'] = $data['imap'] ?? null;
        $this->container['pop3'] = $data['pop3'] ?? null;
        $this->container['smtp'] = $data['smtp'] ?? null;
        $this->container['mapi'] = $data['mapi'] ?? null;
        $this->container['msn_hotmail'] = $data['msn_hotmail'] ?? null;
        $this->container['yahoo_mail'] = $data['yahoo_mail'] ?? null;
        $this->container['gmail'] = $data['gmail'] ?? null;
        $this->container['other_webmails'] = $data['other_webmails'] ?? null;
        $this->container['spam_bword_threshold'] = $data['spam_bword_threshold'] ?? null;
        $this->container['spam_bword_table'] = $data['spam_bword_table'] ?? null;
        $this->container['spam_bwl_table'] = $data['spam_bwl_table'] ?? null;
        $this->container['spam_mheader_table'] = $data['spam_mheader_table'] ?? null;
        $this->container['spam_rbl_table'] = $data['spam_rbl_table'] ?? null;
        $this->container['spam_iptrust_table'] = $data['spam_iptrust_table'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($this->container['feature_set']) && !in_array($this->container['feature_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature_set', must be one of '%s'",
                $this->container['feature_set'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSpamLogAllowableValues();
        if (!is_null($this->container['spam_log']) && !in_array($this->container['spam_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spam_log', must be one of '%s'",
                $this->container['spam_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpamLogFortiguardResponseAllowableValues();
        if (!is_null($this->container['spam_log_fortiguard_response']) && !in_array($this->container['spam_log_fortiguard_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spam_log_fortiguard_response', must be one of '%s'",
                $this->container['spam_log_fortiguard_response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpamFilteringAllowableValues();
        if (!is_null($this->container['spam_filtering']) && !in_array($this->container['spam_filtering'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spam_filtering', must be one of '%s'",
                $this->container['spam_filtering'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($this->container['external']) && !in_array($this->container['external'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external', must be one of '%s'",
                $this->container['external'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['imap']) && (count($this->container['imap']) > 0)) {
            $invalidProperties[] = "invalid value for 'imap', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['pop3']) && (count($this->container['pop3']) > 0)) {
            $invalidProperties[] = "invalid value for 'pop3', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['smtp']) && (count($this->container['smtp']) > 0)) {
            $invalidProperties[] = "invalid value for 'smtp', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['mapi']) && (count($this->container['mapi']) > 0)) {
            $invalidProperties[] = "invalid value for 'mapi', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['msn_hotmail']) && (count($this->container['msn_hotmail']) > 0)) {
            $invalidProperties[] = "invalid value for 'msn_hotmail', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['yahoo_mail']) && (count($this->container['yahoo_mail']) > 0)) {
            $invalidProperties[] = "invalid value for 'yahoo_mail', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['gmail']) && (count($this->container['gmail']) > 0)) {
            $invalidProperties[] = "invalid value for 'gmail', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['other_webmails']) && (count($this->container['other_webmails']) > 0)) {
            $invalidProperties[] = "invalid value for 'other_webmails', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['spam_bword_threshold']) && ($this->container['spam_bword_threshold'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'spam_bword_threshold', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['spam_bword_threshold']) && ($this->container['spam_bword_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_bword_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spam_bword_table']) && ($this->container['spam_bword_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spam_bword_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spam_bword_table']) && ($this->container['spam_bword_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_bword_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spam_bwl_table']) && ($this->container['spam_bwl_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spam_bwl_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spam_bwl_table']) && ($this->container['spam_bwl_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_bwl_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spam_mheader_table']) && ($this->container['spam_mheader_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spam_mheader_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spam_mheader_table']) && ($this->container['spam_mheader_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_mheader_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spam_rbl_table']) && ($this->container['spam_rbl_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spam_rbl_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spam_rbl_table']) && ($this->container['spam_rbl_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_rbl_table', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spam_iptrust_table']) && ($this->container['spam_iptrust_table'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'spam_iptrust_table', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['spam_iptrust_table']) && ($this->container['spam_iptrust_table'] < 0)) {
            $invalidProperties[] = "invalid value for 'spam_iptrust_table', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject57., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject57., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return string|null
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param string|null $feature_set Flow/proxy feature set.    flow:Flow feature set.    proxy:Proxy feature set.
     *
     * @return self
     */
    public function setFeatureSet($feature_set)
    {
        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($feature_set) && !in_array($feature_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature_set', must be one of '%s'",
                    $feature_set,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject57., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets spam_log
     *
     * @return string|null
     */
    public function getSpamLog()
    {
        return $this->container['spam_log'];
    }

    /**
     * Sets spam_log
     *
     * @param string|null $spam_log Enable/disable spam logging for email filtering.    disable:Disable spam logging for email filtering.    enable:Enable spam logging for email filtering.
     *
     * @return self
     */
    public function setSpamLog($spam_log)
    {
        $allowedValues = $this->getSpamLogAllowableValues();
        if (!is_null($spam_log) && !in_array($spam_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spam_log', must be one of '%s'",
                    $spam_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spam_log'] = $spam_log;

        return $this;
    }

    /**
     * Gets spam_log_fortiguard_response
     *
     * @return string|null
     */
    public function getSpamLogFortiguardResponse()
    {
        return $this->container['spam_log_fortiguard_response'];
    }

    /**
     * Sets spam_log_fortiguard_response
     *
     * @param string|null $spam_log_fortiguard_response Enable/disable logging FortiGuard spam response.    disable:Disable logging FortiGuard spam response.    enable:Enable logging FortiGuard spam response.
     *
     * @return self
     */
    public function setSpamLogFortiguardResponse($spam_log_fortiguard_response)
    {
        $allowedValues = $this->getSpamLogFortiguardResponseAllowableValues();
        if (!is_null($spam_log_fortiguard_response) && !in_array($spam_log_fortiguard_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spam_log_fortiguard_response', must be one of '%s'",
                    $spam_log_fortiguard_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spam_log_fortiguard_response'] = $spam_log_fortiguard_response;

        return $this;
    }

    /**
     * Gets spam_filtering
     *
     * @return string|null
     */
    public function getSpamFiltering()
    {
        return $this->container['spam_filtering'];
    }

    /**
     * Sets spam_filtering
     *
     * @param string|null $spam_filtering Enable/disable spam filtering.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSpamFiltering($spam_filtering)
    {
        $allowedValues = $this->getSpamFilteringAllowableValues();
        if (!is_null($spam_filtering) && !in_array($spam_filtering, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spam_filtering', must be one of '%s'",
                    $spam_filtering,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spam_filtering'] = $spam_filtering;

        return $this;
    }

    /**
     * Gets external
     *
     * @return string|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param string|null $external Enable/disable external Email inspection.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExternal($external)
    {
        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($external) && !in_array($external, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external', must be one of '%s'",
                    $external,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Options.    bannedword:Content block.    spambwl:Black/white list.    spamfsip:Email IP address FortiGuard AntiSpam black list check.    spamfssubmit:Add FortiGuard AntiSpam spam submission text.    spamfschksum:Email checksum FortiGuard AntiSpam check.    spamfsurl:Email content URL FortiGuard AntiSpam check.    spamhelodns:Email helo/ehlo domain DNS check.    spamraddrdns:Email return address DNS check.    spamrbl:Email DNSBL & ORBL check.    spamhdrcheck:Email mime header check.    spamfsphish:Email content phishing URL FortiGuard AntiSpam check.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets imap
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]|null
     */
    public function getImap()
    {
        return $this->container['imap'];
    }

    /**
     * Sets imap
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]|null $imap IMAP.
     *
     * @return self
     */
    public function setImap($imap)
    {

        if (!is_null($imap) && (count($imap) > 0)) {
            throw new \InvalidArgumentException('invalid value for $imap when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['imap'] = $imap;

        return $this;
    }

    /**
     * Gets pop3
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]|null
     */
    public function getPop3()
    {
        return $this->container['pop3'];
    }

    /**
     * Sets pop3
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameImap[]|null $pop3 POP3.
     *
     * @return self
     */
    public function setPop3($pop3)
    {

        if (!is_null($pop3) && (count($pop3) > 0)) {
            throw new \InvalidArgumentException('invalid value for $pop3 when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['pop3'] = $pop3;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameSmtp[]|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameSmtp[]|null $smtp SMTP.
     *
     * @return self
     */
    public function setSmtp($smtp)
    {

        if (!is_null($smtp) && (count($smtp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $smtp when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets mapi
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMapi[]|null
     */
    public function getMapi()
    {
        return $this->container['mapi'];
    }

    /**
     * Sets mapi
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMapi[]|null $mapi MAPI.
     *
     * @return self
     */
    public function setMapi($mapi)
    {

        if (!is_null($mapi) && (count($mapi) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mapi when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['mapi'] = $mapi;

        return $this;
    }

    /**
     * Gets msn_hotmail
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null
     */
    public function getMsnHotmail()
    {
        return $this->container['msn_hotmail'];
    }

    /**
     * Sets msn_hotmail
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null $msn_hotmail MSN Hotmail.
     *
     * @return self
     */
    public function setMsnHotmail($msn_hotmail)
    {

        if (!is_null($msn_hotmail) && (count($msn_hotmail) > 0)) {
            throw new \InvalidArgumentException('invalid value for $msn_hotmail when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['msn_hotmail'] = $msn_hotmail;

        return $this;
    }

    /**
     * Gets yahoo_mail
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null
     */
    public function getYahooMail()
    {
        return $this->container['yahoo_mail'];
    }

    /**
     * Sets yahoo_mail
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null $yahoo_mail Yahoo! Mail.
     *
     * @return self
     */
    public function setYahooMail($yahoo_mail)
    {

        if (!is_null($yahoo_mail) && (count($yahoo_mail) > 0)) {
            throw new \InvalidArgumentException('invalid value for $yahoo_mail when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['yahoo_mail'] = $yahoo_mail;

        return $this;
    }

    /**
     * Gets gmail
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null
     */
    public function getGmail()
    {
        return $this->container['gmail'];
    }

    /**
     * Sets gmail
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null $gmail Gmail.
     *
     * @return self
     */
    public function setGmail($gmail)
    {

        if (!is_null($gmail) && (count($gmail) > 0)) {
            throw new \InvalidArgumentException('invalid value for $gmail when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['gmail'] = $gmail;

        return $this;
    }

    /**
     * Gets other_webmails
     *
     * @return \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null
     */
    public function getOtherWebmails()
    {
        return $this->container['other_webmails'];
    }

    /**
     * Sets other_webmails
     *
     * @param \Fortigate\FortiOS\Model\CMDB\EmailfilterProfileNameMsnHotmail[]|null $other_webmails Other supported webmails.
     *
     * @return self
     */
    public function setOtherWebmails($other_webmails)
    {

        if (!is_null($other_webmails) && (count($other_webmails) > 0)) {
            throw new \InvalidArgumentException('invalid value for $other_webmails when calling InlineObject57., number of items must be less than or equal to 0.');
        }
        $this->container['other_webmails'] = $other_webmails;

        return $this;
    }

    /**
     * Gets spam_bword_threshold
     *
     * @return int|null
     */
    public function getSpamBwordThreshold()
    {
        return $this->container['spam_bword_threshold'];
    }

    /**
     * Sets spam_bword_threshold
     *
     * @param int|null $spam_bword_threshold Spam banned word threshold.
     *
     * @return self
     */
    public function setSpamBwordThreshold($spam_bword_threshold)
    {

        if (!is_null($spam_bword_threshold) && ($spam_bword_threshold > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $spam_bword_threshold when calling InlineObject57., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($spam_bword_threshold) && ($spam_bword_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_bword_threshold when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_bword_threshold'] = $spam_bword_threshold;

        return $this;
    }

    /**
     * Gets spam_bword_table
     *
     * @return int|null
     */
    public function getSpamBwordTable()
    {
        return $this->container['spam_bword_table'];
    }

    /**
     * Sets spam_bword_table
     *
     * @param int|null $spam_bword_table Anti-spam banned word table ID.
     *
     * @return self
     */
    public function setSpamBwordTable($spam_bword_table)
    {

        if (!is_null($spam_bword_table) && ($spam_bword_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spam_bword_table when calling InlineObject57., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spam_bword_table) && ($spam_bword_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_bword_table when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_bword_table'] = $spam_bword_table;

        return $this;
    }

    /**
     * Gets spam_bwl_table
     *
     * @return int|null
     */
    public function getSpamBwlTable()
    {
        return $this->container['spam_bwl_table'];
    }

    /**
     * Sets spam_bwl_table
     *
     * @param int|null $spam_bwl_table Anti-spam black/white list table ID.
     *
     * @return self
     */
    public function setSpamBwlTable($spam_bwl_table)
    {

        if (!is_null($spam_bwl_table) && ($spam_bwl_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spam_bwl_table when calling InlineObject57., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spam_bwl_table) && ($spam_bwl_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_bwl_table when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_bwl_table'] = $spam_bwl_table;

        return $this;
    }

    /**
     * Gets spam_mheader_table
     *
     * @return int|null
     */
    public function getSpamMheaderTable()
    {
        return $this->container['spam_mheader_table'];
    }

    /**
     * Sets spam_mheader_table
     *
     * @param int|null $spam_mheader_table Anti-spam MIME header table ID.
     *
     * @return self
     */
    public function setSpamMheaderTable($spam_mheader_table)
    {

        if (!is_null($spam_mheader_table) && ($spam_mheader_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spam_mheader_table when calling InlineObject57., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spam_mheader_table) && ($spam_mheader_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_mheader_table when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_mheader_table'] = $spam_mheader_table;

        return $this;
    }

    /**
     * Gets spam_rbl_table
     *
     * @return int|null
     */
    public function getSpamRblTable()
    {
        return $this->container['spam_rbl_table'];
    }

    /**
     * Sets spam_rbl_table
     *
     * @param int|null $spam_rbl_table Anti-spam DNSBL table ID.
     *
     * @return self
     */
    public function setSpamRblTable($spam_rbl_table)
    {

        if (!is_null($spam_rbl_table) && ($spam_rbl_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spam_rbl_table when calling InlineObject57., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spam_rbl_table) && ($spam_rbl_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_rbl_table when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_rbl_table'] = $spam_rbl_table;

        return $this;
    }

    /**
     * Gets spam_iptrust_table
     *
     * @return int|null
     */
    public function getSpamIptrustTable()
    {
        return $this->container['spam_iptrust_table'];
    }

    /**
     * Sets spam_iptrust_table
     *
     * @param int|null $spam_iptrust_table Anti-spam IP trust table ID.
     *
     * @return self
     */
    public function setSpamIptrustTable($spam_iptrust_table)
    {

        if (!is_null($spam_iptrust_table) && ($spam_iptrust_table > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $spam_iptrust_table when calling InlineObject57., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($spam_iptrust_table) && ($spam_iptrust_table < 0)) {
            throw new \InvalidArgumentException('invalid value for $spam_iptrust_table when calling InlineObject57., must be bigger than or equal to 0.');
        }

        $this->container['spam_iptrust_table'] = $spam_iptrust_table;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


