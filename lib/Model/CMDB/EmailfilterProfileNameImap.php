<?php
/**
 * EmailfilterProfileNameImap
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * EmailfilterProfileNameImap Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EmailfilterProfileNameImap implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_emailfilter_profile__name__imap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'log_all' => 'string',
        'action' => 'string',
        'tag_type' => 'string',
        'tag_msg' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'log_all' => null,
        'action' => null,
        'tag_type' => null,
        'tag_msg' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'log_all' => 'log-all',
        'action' => 'action',
        'tag_type' => 'tag-type',
        'tag_msg' => 'tag-msg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'log_all' => 'setLogAll',
        'action' => 'setAction',
        'tag_type' => 'setTagType',
        'tag_msg' => 'setTagMsg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'log_all' => 'getLogAll',
        'action' => 'getAction',
        'tag_type' => 'getTagType',
        'tag_msg' => 'getTagMsg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOG_ALL_DISABLE = 'disable';
    const LOG_ALL_ENABLE = 'enable';
    const ACTION_PASS = 'pass';
    const ACTION_TAG = 'tag';
    const TAG_TYPE_SUBJECT = 'subject';
    const TAG_TYPE_HEADER = 'header';
    const TAG_TYPE_SPAMINFO = 'spaminfo';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllAllowableValues()
    {
        return [
            self::LOG_ALL_DISABLE,
            self::LOG_ALL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_PASS,
            self::ACTION_TAG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTagTypeAllowableValues()
    {
        return [
            self::TAG_TYPE_SUBJECT,
            self::TAG_TYPE_HEADER,
            self::TAG_TYPE_SPAMINFO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['log_all'] = $data['log_all'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['tag_type'] = $data['tag_type'] ?? null;
        $this->container['tag_msg'] = $data['tag_msg'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLogAllAllowableValues();
        if (!is_null($this->container['log_all']) && !in_array($this->container['log_all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_all', must be one of '%s'",
                $this->container['log_all'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTagTypeAllowableValues();
        if (!is_null($this->container['tag_type']) && !in_array($this->container['tag_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tag_type', must be one of '%s'",
                $this->container['tag_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tag_msg']) && (mb_strlen($this->container['tag_msg']) > 63)) {
            $invalidProperties[] = "invalid value for 'tag_msg', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets log_all
     *
     * @return string|null
     */
    public function getLogAll()
    {
        return $this->container['log_all'];
    }

    /**
     * Sets log_all
     *
     * @param string|null $log_all Enable/disable logging of all email traffic.    disable:Disable logging of all email traffic.    enable:Enable logging of all email traffic.
     *
     * @return self
     */
    public function setLogAll($log_all)
    {
        $allowedValues = $this->getLogAllAllowableValues();
        if (!is_null($log_all) && !in_array($log_all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_all', must be one of '%s'",
                    $log_all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_all'] = $log_all;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action for spam email.    pass:Allow spam email to pass through.    tag:Tag spam email with configured text in subject or header.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets tag_type
     *
     * @return string|null
     */
    public function getTagType()
    {
        return $this->container['tag_type'];
    }

    /**
     * Sets tag_type
     *
     * @param string|null $tag_type Tag subject or header for spam email.    subject:Prepend text to spam email subject.    header:Append a user defined mime header to spam email.    spaminfo:Append spam info to spam email header.
     *
     * @return self
     */
    public function setTagType($tag_type)
    {
        $allowedValues = $this->getTagTypeAllowableValues();
        if (!is_null($tag_type) && !in_array($tag_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tag_type', must be one of '%s'",
                    $tag_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tag_type'] = $tag_type;

        return $this;
    }

    /**
     * Gets tag_msg
     *
     * @return string|null
     */
    public function getTagMsg()
    {
        return $this->container['tag_msg'];
    }

    /**
     * Sets tag_msg
     *
     * @param string|null $tag_msg Subject text or header added to spam email.
     *
     * @return self
     */
    public function setTagMsg($tag_msg)
    {
        if (!is_null($tag_msg) && (mb_strlen($tag_msg) > 63)) {
            throw new \InvalidArgumentException('invalid length for $tag_msg when calling EmailfilterProfileNameImap., must be smaller than or equal to 63.');
        }

        $this->container['tag_msg'] = $tag_msg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


