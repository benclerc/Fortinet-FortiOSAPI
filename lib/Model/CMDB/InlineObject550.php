<?php
/**
 * InlineObject550
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject550 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject550 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_550';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'comment' => 'string',
        'one_arm_ips_urlfilter' => 'string',
        'ip_addr_block' => 'string',
        'entries' => '\Fortigate\FortiOS\Model\CMDB\WebfilterUrlfilterIdEntries[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'comment' => null,
        'one_arm_ips_urlfilter' => null,
        'ip_addr_block' => null,
        'entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'comment' => 'comment',
        'one_arm_ips_urlfilter' => 'one-arm-ips-urlfilter',
        'ip_addr_block' => 'ip-addr-block',
        'entries' => 'entries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'comment' => 'setComment',
        'one_arm_ips_urlfilter' => 'setOneArmIpsUrlfilter',
        'ip_addr_block' => 'setIpAddrBlock',
        'entries' => 'setEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'comment' => 'getComment',
        'one_arm_ips_urlfilter' => 'getOneArmIpsUrlfilter',
        'ip_addr_block' => 'getIpAddrBlock',
        'entries' => 'getEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ONE_ARM_IPS_URLFILTER_ENABLE = 'enable';
    const ONE_ARM_IPS_URLFILTER_DISABLE = 'disable';
    const IP_ADDR_BLOCK_ENABLE = 'enable';
    const IP_ADDR_BLOCK_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOneArmIpsUrlfilterAllowableValues()
    {
        return [
            self::ONE_ARM_IPS_URLFILTER_ENABLE,
            self::ONE_ARM_IPS_URLFILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpAddrBlockAllowableValues()
    {
        return [
            self::IP_ADDR_BLOCK_ENABLE,
            self::IP_ADDR_BLOCK_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['one_arm_ips_urlfilter'] = $data['one_arm_ips_urlfilter'] ?? null;
        $this->container['ip_addr_block'] = $data['ip_addr_block'] ?? null;
        $this->container['entries'] = $data['entries'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getOneArmIpsUrlfilterAllowableValues();
        if (!is_null($this->container['one_arm_ips_urlfilter']) && !in_array($this->container['one_arm_ips_urlfilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'one_arm_ips_urlfilter', must be one of '%s'",
                $this->container['one_arm_ips_urlfilter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpAddrBlockAllowableValues();
        if (!is_null($this->container['ip_addr_block']) && !in_array($this->container['ip_addr_block'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_addr_block', must be one of '%s'",
                $this->container['ip_addr_block'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['entries']) && (count($this->container['entries']) > 0)) {
            $invalidProperties[] = "invalid value for 'entries', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject550., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject550., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of URL filter list.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject550., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Optional comments.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject550., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets one_arm_ips_urlfilter
     *
     * @return string|null
     */
    public function getOneArmIpsUrlfilter()
    {
        return $this->container['one_arm_ips_urlfilter'];
    }

    /**
     * Sets one_arm_ips_urlfilter
     *
     * @param string|null $one_arm_ips_urlfilter Enable/disable DNS resolver for one-arm IPS URL filter operation.    enable:Enable DNS resolver for one-arm IPS URL filter operation.    disable:Disable DNS resolver for one-arm IPS URL filter operation.
     *
     * @return self
     */
    public function setOneArmIpsUrlfilter($one_arm_ips_urlfilter)
    {
        $allowedValues = $this->getOneArmIpsUrlfilterAllowableValues();
        if (!is_null($one_arm_ips_urlfilter) && !in_array($one_arm_ips_urlfilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'one_arm_ips_urlfilter', must be one of '%s'",
                    $one_arm_ips_urlfilter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['one_arm_ips_urlfilter'] = $one_arm_ips_urlfilter;

        return $this;
    }

    /**
     * Gets ip_addr_block
     *
     * @return string|null
     */
    public function getIpAddrBlock()
    {
        return $this->container['ip_addr_block'];
    }

    /**
     * Sets ip_addr_block
     *
     * @param string|null $ip_addr_block Enable/disable blocking URLs when the hostname appears as an IP address.    enable:Enable blocking URLs when the hostname appears as an IP address.    disable:Disable blocking URLs when the hostname appears as an IP address.
     *
     * @return self
     */
    public function setIpAddrBlock($ip_addr_block)
    {
        $allowedValues = $this->getIpAddrBlockAllowableValues();
        if (!is_null($ip_addr_block) && !in_array($ip_addr_block, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_addr_block', must be one of '%s'",
                    $ip_addr_block,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_addr_block'] = $ip_addr_block;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterUrlfilterIdEntries[]|null
     */
    public function getEntries()
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterUrlfilterIdEntries[]|null $entries URL filter entries.
     *
     * @return self
     */
    public function setEntries($entries)
    {

        if (!is_null($entries) && (count($entries) > 0)) {
            throw new \InvalidArgumentException('invalid value for $entries when calling InlineObject550., number of items must be less than or equal to 0.');
        }
        $this->container['entries'] = $entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


