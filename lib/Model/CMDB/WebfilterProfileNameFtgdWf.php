<?php
/**
 * WebfilterProfileNameFtgdWf
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebfilterProfileNameFtgdWf Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebfilterProfileNameFtgdWf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_webfilter_profile__name__ftgd_wf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'options' => 'string',
        'exempt_quota' => 'string',
        'ovrd' => 'string',
        'filters' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFilters[]',
        'quota' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameQuota[]',
        'max_quota_timeout' => 'int',
        'rate_javascript_urls' => 'string',
        'rate_css_urls' => 'string',
        'rate_crl_urls' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'options' => null,
        'exempt_quota' => null,
        'ovrd' => null,
        'filters' => null,
        'quota' => null,
        'max_quota_timeout' => null,
        'rate_javascript_urls' => null,
        'rate_css_urls' => null,
        'rate_crl_urls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'options' => 'options',
        'exempt_quota' => 'exempt-quota',
        'ovrd' => 'ovrd',
        'filters' => 'filters',
        'quota' => 'quota',
        'max_quota_timeout' => 'max-quota-timeout',
        'rate_javascript_urls' => 'rate-javascript-urls',
        'rate_css_urls' => 'rate-css-urls',
        'rate_crl_urls' => 'rate-crl-urls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'options' => 'setOptions',
        'exempt_quota' => 'setExemptQuota',
        'ovrd' => 'setOvrd',
        'filters' => 'setFilters',
        'quota' => 'setQuota',
        'max_quota_timeout' => 'setMaxQuotaTimeout',
        'rate_javascript_urls' => 'setRateJavascriptUrls',
        'rate_css_urls' => 'setRateCssUrls',
        'rate_crl_urls' => 'setRateCrlUrls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'options' => 'getOptions',
        'exempt_quota' => 'getExemptQuota',
        'ovrd' => 'getOvrd',
        'filters' => 'getFilters',
        'quota' => 'getQuota',
        'max_quota_timeout' => 'getMaxQuotaTimeout',
        'rate_javascript_urls' => 'getRateJavascriptUrls',
        'rate_css_urls' => 'getRateCssUrls',
        'rate_crl_urls' => 'getRateCrlUrls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OPTIONS_ERROR_ALLOW = 'error-allow';
    const OPTIONS_RATE_SERVER_IP = 'rate-server-ip';
    const OPTIONS_CONNECT_REQUEST_BYPASS = 'connect-request-bypass';
    const OPTIONS_FTGD_DISABLE = 'ftgd-disable';
    const RATE_JAVASCRIPT_URLS_DISABLE = 'disable';
    const RATE_JAVASCRIPT_URLS_ENABLE = 'enable';
    const RATE_CSS_URLS_DISABLE = 'disable';
    const RATE_CSS_URLS_ENABLE = 'enable';
    const RATE_CRL_URLS_DISABLE = 'disable';
    const RATE_CRL_URLS_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_ERROR_ALLOW,
            self::OPTIONS_RATE_SERVER_IP,
            self::OPTIONS_CONNECT_REQUEST_BYPASS,
            self::OPTIONS_FTGD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateJavascriptUrlsAllowableValues()
    {
        return [
            self::RATE_JAVASCRIPT_URLS_DISABLE,
            self::RATE_JAVASCRIPT_URLS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateCssUrlsAllowableValues()
    {
        return [
            self::RATE_CSS_URLS_DISABLE,
            self::RATE_CSS_URLS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateCrlUrlsAllowableValues()
    {
        return [
            self::RATE_CRL_URLS_DISABLE,
            self::RATE_CRL_URLS_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['options'] = $data['options'] ?? null;
        $this->container['exempt_quota'] = $data['exempt_quota'] ?? null;
        $this->container['ovrd'] = $data['ovrd'] ?? null;
        $this->container['filters'] = $data['filters'] ?? null;
        $this->container['quota'] = $data['quota'] ?? null;
        $this->container['max_quota_timeout'] = $data['max_quota_timeout'] ?? null;
        $this->container['rate_javascript_urls'] = $data['rate_javascript_urls'] ?? null;
        $this->container['rate_css_urls'] = $data['rate_css_urls'] ?? null;
        $this->container['rate_crl_urls'] = $data['rate_crl_urls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['filters']) && (count($this->container['filters']) > 0)) {
            $invalidProperties[] = "invalid value for 'filters', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['quota']) && (count($this->container['quota']) > 0)) {
            $invalidProperties[] = "invalid value for 'quota', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['max_quota_timeout']) && ($this->container['max_quota_timeout'] > 86400)) {
            $invalidProperties[] = "invalid value for 'max_quota_timeout', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['max_quota_timeout']) && ($this->container['max_quota_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_quota_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRateJavascriptUrlsAllowableValues();
        if (!is_null($this->container['rate_javascript_urls']) && !in_array($this->container['rate_javascript_urls'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_javascript_urls', must be one of '%s'",
                $this->container['rate_javascript_urls'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateCssUrlsAllowableValues();
        if (!is_null($this->container['rate_css_urls']) && !in_array($this->container['rate_css_urls'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_css_urls', must be one of '%s'",
                $this->container['rate_css_urls'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateCrlUrlsAllowableValues();
        if (!is_null($this->container['rate_crl_urls']) && !in_array($this->container['rate_crl_urls'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_crl_urls', must be one of '%s'",
                $this->container['rate_crl_urls'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Options for FortiGuard Web Filter.    error-allow:Allow web pages with a rating error to pass through.    rate-server-ip:Rate the server IP in addition to the domain name.    connect-request-bypass:Bypass connection which has CONNECT request.    ftgd-disable:Disable FortiGuard scanning.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets exempt_quota
     *
     * @return string|null
     */
    public function getExemptQuota()
    {
        return $this->container['exempt_quota'];
    }

    /**
     * Sets exempt_quota
     *
     * @param string|null $exempt_quota Do not stop quota for these categories.
     *
     * @return self
     */
    public function setExemptQuota($exempt_quota)
    {
        $this->container['exempt_quota'] = $exempt_quota;

        return $this;
    }

    /**
     * Gets ovrd
     *
     * @return string|null
     */
    public function getOvrd()
    {
        return $this->container['ovrd'];
    }

    /**
     * Sets ovrd
     *
     * @param string|null $ovrd Allow web filter profile overrides.
     *
     * @return self
     */
    public function setOvrd($ovrd)
    {
        $this->container['ovrd'] = $ovrd;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFilters[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFilters[]|null $filters FortiGuard filters.
     *
     * @return self
     */
    public function setFilters($filters)
    {

        if (!is_null($filters) && (count($filters) > 0)) {
            throw new \InvalidArgumentException('invalid value for $filters when calling WebfilterProfileNameFtgdWf., number of items must be less than or equal to 0.');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameQuota[]|null
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameQuota[]|null $quota FortiGuard traffic quota settings.
     *
     * @return self
     */
    public function setQuota($quota)
    {

        if (!is_null($quota) && (count($quota) > 0)) {
            throw new \InvalidArgumentException('invalid value for $quota when calling WebfilterProfileNameFtgdWf., number of items must be less than or equal to 0.');
        }
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets max_quota_timeout
     *
     * @return int|null
     */
    public function getMaxQuotaTimeout()
    {
        return $this->container['max_quota_timeout'];
    }

    /**
     * Sets max_quota_timeout
     *
     * @param int|null $max_quota_timeout Maximum FortiGuard quota used by single page view in seconds (excludes streams).
     *
     * @return self
     */
    public function setMaxQuotaTimeout($max_quota_timeout)
    {

        if (!is_null($max_quota_timeout) && ($max_quota_timeout > 86400)) {
            throw new \InvalidArgumentException('invalid value for $max_quota_timeout when calling WebfilterProfileNameFtgdWf., must be smaller than or equal to 86400.');
        }
        if (!is_null($max_quota_timeout) && ($max_quota_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_quota_timeout when calling WebfilterProfileNameFtgdWf., must be bigger than or equal to 1.');
        }

        $this->container['max_quota_timeout'] = $max_quota_timeout;

        return $this;
    }

    /**
     * Gets rate_javascript_urls
     *
     * @return string|null
     */
    public function getRateJavascriptUrls()
    {
        return $this->container['rate_javascript_urls'];
    }

    /**
     * Sets rate_javascript_urls
     *
     * @param string|null $rate_javascript_urls Enable/disable rating JavaScript by URL.    disable:Disable rating JavaScript by URL.    enable:Enable rating JavaScript by URL.
     *
     * @return self
     */
    public function setRateJavascriptUrls($rate_javascript_urls)
    {
        $allowedValues = $this->getRateJavascriptUrlsAllowableValues();
        if (!is_null($rate_javascript_urls) && !in_array($rate_javascript_urls, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_javascript_urls', must be one of '%s'",
                    $rate_javascript_urls,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_javascript_urls'] = $rate_javascript_urls;

        return $this;
    }

    /**
     * Gets rate_css_urls
     *
     * @return string|null
     */
    public function getRateCssUrls()
    {
        return $this->container['rate_css_urls'];
    }

    /**
     * Sets rate_css_urls
     *
     * @param string|null $rate_css_urls Enable/disable rating CSS by URL.    disable:Disable rating CSS by URL.    enable:Enable rating CSS by URL.
     *
     * @return self
     */
    public function setRateCssUrls($rate_css_urls)
    {
        $allowedValues = $this->getRateCssUrlsAllowableValues();
        if (!is_null($rate_css_urls) && !in_array($rate_css_urls, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_css_urls', must be one of '%s'",
                    $rate_css_urls,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_css_urls'] = $rate_css_urls;

        return $this;
    }

    /**
     * Gets rate_crl_urls
     *
     * @return string|null
     */
    public function getRateCrlUrls()
    {
        return $this->container['rate_crl_urls'];
    }

    /**
     * Sets rate_crl_urls
     *
     * @param string|null $rate_crl_urls Enable/disable rating CRL by URL.    disable:Disable rating CRL by URL.    enable:Enable rating CRL by URL.
     *
     * @return self
     */
    public function setRateCrlUrls($rate_crl_urls)
    {
        $allowedValues = $this->getRateCrlUrlsAllowableValues();
        if (!is_null($rate_crl_urls) && !in_array($rate_crl_urls, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_crl_urls', must be one of '%s'",
                    $rate_crl_urls,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_crl_urls'] = $rate_crl_urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


