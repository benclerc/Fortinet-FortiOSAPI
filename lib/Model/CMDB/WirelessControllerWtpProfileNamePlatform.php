<?php
/**
 * WirelessControllerWtpProfileNamePlatform
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerWtpProfileNamePlatform Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerWtpProfileNamePlatform implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_wtp_profile__name__platform';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'mode' => 'string',
        'ddscan' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'mode' => null,
        'ddscan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'mode' => 'mode',
        'ddscan' => 'ddscan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'mode' => 'setMode',
        'ddscan' => 'setDdscan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'mode' => 'getMode',
        'ddscan' => 'getDdscan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_AP_11_N = 'AP-11N';
    const TYPE__220_B = '220B';
    const TYPE__210_B = '210B';
    const TYPE__222_B = '222B';
    const TYPE__112_B = '112B';
    const TYPE__320_B = '320B';
    const TYPE__11_C = '11C';
    const TYPE__14_C = '14C';
    const TYPE__223_B = '223B';
    const TYPE__28_C = '28C';
    const TYPE__320_C = '320C';
    const TYPE__221_C = '221C';
    const TYPE__25_D = '25D';
    const TYPE__222_C = '222C';
    const TYPE__224_D = '224D';
    const TYPE__214_B = '214B';
    const TYPE__21_D = '21D';
    const TYPE__24_D = '24D';
    const TYPE__112_D = '112D';
    const TYPE__223_C = '223C';
    const TYPE__321_C = '321C';
    const TYPE_C220_C = 'C220C';
    const TYPE_C225_C = 'C225C';
    const TYPE_C23_JD = 'C23JD';
    const TYPE_C24_JE = 'C24JE';
    const TYPE_S321_C = 'S321C';
    const TYPE_S322_C = 'S322C';
    const TYPE_S323_C = 'S323C';
    const TYPE_S311_C = 'S311C';
    const TYPE_S313_C = 'S313C';
    const TYPE_S321_CR = 'S321CR';
    const TYPE_S322_CR = 'S322CR';
    const TYPE_S323_CR = 'S323CR';
    const TYPE_S421_E = 'S421E';
    const TYPE_S422_E = 'S422E';
    const TYPE_S423_E = 'S423E';
    const TYPE__421_E = '421E';
    const TYPE__423_E = '423E';
    const TYPE__221_E = '221E';
    const TYPE__222_E = '222E';
    const TYPE__223_E = '223E';
    const TYPE__224_E = '224E';
    const TYPE__231_E = '231E';
    const TYPE_S221_E = 'S221E';
    const TYPE_S223_E = 'S223E';
    const TYPE__321_E = '321E';
    const TYPE__431_F = '431F';
    const TYPE__432_F = '432F';
    const TYPE__433_F = '433F';
    const TYPE__231_F = '231F';
    const TYPE__234_F = '234F';
    const TYPE__23_JF = '23JF';
    const TYPE__831_F = '831F';
    const TYPE_U421_E = 'U421E';
    const TYPE_U422_EV = 'U422EV';
    const TYPE_U423_E = 'U423E';
    const TYPE_U221_EV = 'U221EV';
    const TYPE_U223_EV = 'U223EV';
    const TYPE_U24_JEV = 'U24JEV';
    const TYPE_U321_EV = 'U321EV';
    const TYPE_U323_EV = 'U323EV';
    const TYPE_U431_F = 'U431F';
    const TYPE_U433_F = 'U433F';
    const TYPE_U231_F = 'U231F';
    const TYPE_U234_F = 'U234F';
    const TYPE_U432_F = 'U432F';
    const MODE_SINGLE_5_G = 'single-5G';
    const MODE_DUAL_5_G = 'dual-5G';
    const DDSCAN_ENABLE = 'enable';
    const DDSCAN_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AP_11_N,
            self::TYPE__220_B,
            self::TYPE__210_B,
            self::TYPE__222_B,
            self::TYPE__112_B,
            self::TYPE__320_B,
            self::TYPE__11_C,
            self::TYPE__14_C,
            self::TYPE__223_B,
            self::TYPE__28_C,
            self::TYPE__320_C,
            self::TYPE__221_C,
            self::TYPE__25_D,
            self::TYPE__222_C,
            self::TYPE__224_D,
            self::TYPE__214_B,
            self::TYPE__21_D,
            self::TYPE__24_D,
            self::TYPE__112_D,
            self::TYPE__223_C,
            self::TYPE__321_C,
            self::TYPE_C220_C,
            self::TYPE_C225_C,
            self::TYPE_C23_JD,
            self::TYPE_C24_JE,
            self::TYPE_S321_C,
            self::TYPE_S322_C,
            self::TYPE_S323_C,
            self::TYPE_S311_C,
            self::TYPE_S313_C,
            self::TYPE_S321_CR,
            self::TYPE_S322_CR,
            self::TYPE_S323_CR,
            self::TYPE_S421_E,
            self::TYPE_S422_E,
            self::TYPE_S423_E,
            self::TYPE__421_E,
            self::TYPE__423_E,
            self::TYPE__221_E,
            self::TYPE__222_E,
            self::TYPE__223_E,
            self::TYPE__224_E,
            self::TYPE__231_E,
            self::TYPE_S221_E,
            self::TYPE_S223_E,
            self::TYPE__321_E,
            self::TYPE__431_F,
            self::TYPE__432_F,
            self::TYPE__433_F,
            self::TYPE__231_F,
            self::TYPE__234_F,
            self::TYPE__23_JF,
            self::TYPE__831_F,
            self::TYPE_U421_E,
            self::TYPE_U422_EV,
            self::TYPE_U423_E,
            self::TYPE_U221_EV,
            self::TYPE_U223_EV,
            self::TYPE_U24_JEV,
            self::TYPE_U321_EV,
            self::TYPE_U323_EV,
            self::TYPE_U431_F,
            self::TYPE_U433_F,
            self::TYPE_U231_F,
            self::TYPE_U234_F,
            self::TYPE_U432_F,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_SINGLE_5_G,
            self::MODE_DUAL_5_G,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdscanAllowableValues()
    {
        return [
            self::DDSCAN_ENABLE,
            self::DDSCAN_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['ddscan'] = $data['ddscan'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDdscanAllowableValues();
        if (!is_null($this->container['ddscan']) && !in_array($this->container['ddscan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddscan', must be one of '%s'",
                $this->container['ddscan'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.    AP-11N:Default 11n AP.    220B:FAP220B/221B.    210B:FAP210B.    222B:FAP222B.    112B:FAP112B.    320B:FAP320B.    11C:FAP11C.    14C:FAP14C.    223B:FAP223B.    28C:FAP28C.    320C:FAP320C.    221C:FAP221C.    25D:FAP25D.    222C:FAP222C.    224D:FAP224D.    214B:FK214B.    21D:FAP21D.    24D:FAP24D.    112D:FAP112D.    223C:FAP223C.    321C:FAP321C.    C220C:FAPC220C.    C225C:FAPC225C.    C23JD:FAPC23JD.    C24JE:FAPC24JE.    S321C:FAPS321C.    S322C:FAPS322C.    S323C:FAPS323C.    S311C:FAPS311C.    S313C:FAPS313C.    S321CR:FAPS321CR.    S322CR:FAPS322CR.    S323CR:FAPS323CR.    S421E:FAPS421E.    S422E:FAPS422E.    S423E:FAPS423E.    421E:FAP421E.    423E:FAP423E.    221E:FAP221E.    222E:FAP222E.    223E:FAP223E.    224E:FAP224E.    231E:FAP231E.    S221E:FAPS221E.    S223E:FAPS223E.    321E:FAP321E.    431F:FAP431F.    432F:FAP432F.    433F:FAP433F.    231F:FAP231F.    234F:FAP234F.    23JF:FAP23JF.    831F:FAP831F.    U421E:FAPU421EV.    U422EV:FAPU422EV.    U423E:FAPU423EV.    U221EV:FAPU221EV.    U223EV:FAPU223EV.    U24JEV:FAPU24JEV.    U321EV:FAPU321EV.    U323EV:FAPU323EV.    U431F:FAPU431F.    U433F:FAPU433F.    U231F:FAPU231F.    U234F:FAPU234F.    U432F:FAPU432F.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Configure operation mode of 5G radios (default = single-5G).    single-5G:Configure radios as one 5GHz band, one 2.4GHz band, and one dedicated monitor or sniffer.    dual-5G:Configure radios as one lower 5GHz band, one higher 5GHz band and one 2.4GHz band respectively.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets ddscan
     *
     * @return string|null
     */
    public function getDdscan()
    {
        return $this->container['ddscan'];
    }

    /**
     * Sets ddscan
     *
     * @param string|null $ddscan Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management.    enable:Enable dedicated dual-band scan mode.    disable:Disable dedicated dual-band scan mode.
     *
     * @return self
     */
    public function setDdscan($ddscan)
    {
        $allowedValues = $this->getDdscanAllowableValues();
        if (!is_null($ddscan) && !in_array($ddscan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddscan', must be one of '%s'",
                    $ddscan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddscan'] = $ddscan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


