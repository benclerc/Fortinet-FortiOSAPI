<?php
/**
 * InlineObject488
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject488 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject488 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_488';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'tunnel_mode' => 'string',
        'ip_mode' => 'string',
        'auto_connect' => 'string',
        'keep_alive' => 'string',
        'save_password' => 'string',
        'ip_pools' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'exclusive_routing' => 'string',
        'service_restriction' => 'string',
        'split_tunneling' => 'string',
        'split_tunneling_routing_negate' => 'string',
        'split_tunneling_routing_address' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'dns_server1' => 'string',
        'dns_server2' => 'string',
        'dns_suffix' => 'string',
        'wins_server1' => 'string',
        'wins_server2' => 'string',
        'ipv6_tunnel_mode' => 'string',
        'ipv6_pools' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'ipv6_exclusive_routing' => 'string',
        'ipv6_service_restriction' => 'string',
        'ipv6_split_tunneling' => 'string',
        'ipv6_split_tunneling_routing_negate' => 'string',
        'ipv6_split_tunneling_routing_address' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'ipv6_dns_server1' => 'string',
        'ipv6_dns_server2' => 'string',
        'ipv6_wins_server1' => 'string',
        'ipv6_wins_server2' => 'string',
        'web_mode' => 'string',
        'display_bookmark' => 'string',
        'user_bookmark' => 'string',
        'allow_user_access' => 'string',
        'user_group_bookmark' => 'string',
        'bookmark_group' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameBookmarkGroup[]',
        'display_connection_tools' => 'string',
        'display_history' => 'string',
        'display_status' => 'string',
        'heading' => 'string',
        'redir_url' => 'string',
        'theme' => 'string',
        'custom_lang' => 'string',
        'smb_ntlmv1_auth' => 'string',
        'smbv1' => 'string',
        'smb_min_version' => 'string',
        'smb_max_version' => 'string',
        'use_sdwan' => 'string',
        'host_check' => 'string',
        'host_check_interval' => 'int',
        'host_check_policy' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameHostCheckPolicy[]',
        'limit_user_logins' => 'string',
        'mac_addr_check' => 'string',
        'mac_addr_action' => 'string',
        'mac_addr_check_rule' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameMacAddrCheckRule[]',
        'os_check' => 'string',
        'os_check_list' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameOsCheckList[]',
        'forticlient_download' => 'string',
        'forticlient_download_method' => 'string',
        'customize_forticlient_download_url' => 'string',
        'windows_forticlient_download_url' => 'string',
        'macos_forticlient_download_url' => 'string',
        'skip_check_for_unsupported_os' => 'string',
        'skip_check_for_browser' => 'string',
        'hide_sso_credential' => 'string',
        'split_dns' => '\Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameSplitDns[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'tunnel_mode' => null,
        'ip_mode' => null,
        'auto_connect' => null,
        'keep_alive' => null,
        'save_password' => null,
        'ip_pools' => null,
        'exclusive_routing' => null,
        'service_restriction' => null,
        'split_tunneling' => null,
        'split_tunneling_routing_negate' => null,
        'split_tunneling_routing_address' => null,
        'dns_server1' => 'ipv4',
        'dns_server2' => 'ipv4',
        'dns_suffix' => null,
        'wins_server1' => 'ipv4',
        'wins_server2' => 'ipv4',
        'ipv6_tunnel_mode' => null,
        'ipv6_pools' => null,
        'ipv6_exclusive_routing' => null,
        'ipv6_service_restriction' => null,
        'ipv6_split_tunneling' => null,
        'ipv6_split_tunneling_routing_negate' => null,
        'ipv6_split_tunneling_routing_address' => null,
        'ipv6_dns_server1' => 'ipv6',
        'ipv6_dns_server2' => 'ipv6',
        'ipv6_wins_server1' => 'ipv6',
        'ipv6_wins_server2' => 'ipv6',
        'web_mode' => null,
        'display_bookmark' => null,
        'user_bookmark' => null,
        'allow_user_access' => null,
        'user_group_bookmark' => null,
        'bookmark_group' => null,
        'display_connection_tools' => null,
        'display_history' => null,
        'display_status' => null,
        'heading' => null,
        'redir_url' => null,
        'theme' => null,
        'custom_lang' => null,
        'smb_ntlmv1_auth' => null,
        'smbv1' => null,
        'smb_min_version' => null,
        'smb_max_version' => null,
        'use_sdwan' => null,
        'host_check' => null,
        'host_check_interval' => null,
        'host_check_policy' => null,
        'limit_user_logins' => null,
        'mac_addr_check' => null,
        'mac_addr_action' => null,
        'mac_addr_check_rule' => null,
        'os_check' => null,
        'os_check_list' => null,
        'forticlient_download' => null,
        'forticlient_download_method' => null,
        'customize_forticlient_download_url' => null,
        'windows_forticlient_download_url' => null,
        'macos_forticlient_download_url' => null,
        'skip_check_for_unsupported_os' => null,
        'skip_check_for_browser' => null,
        'hide_sso_credential' => null,
        'split_dns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'tunnel_mode' => 'tunnel-mode',
        'ip_mode' => 'ip-mode',
        'auto_connect' => 'auto-connect',
        'keep_alive' => 'keep-alive',
        'save_password' => 'save-password',
        'ip_pools' => 'ip-pools',
        'exclusive_routing' => 'exclusive-routing',
        'service_restriction' => 'service-restriction',
        'split_tunneling' => 'split-tunneling',
        'split_tunneling_routing_negate' => 'split-tunneling-routing-negate',
        'split_tunneling_routing_address' => 'split-tunneling-routing-address',
        'dns_server1' => 'dns-server1',
        'dns_server2' => 'dns-server2',
        'dns_suffix' => 'dns-suffix',
        'wins_server1' => 'wins-server1',
        'wins_server2' => 'wins-server2',
        'ipv6_tunnel_mode' => 'ipv6-tunnel-mode',
        'ipv6_pools' => 'ipv6-pools',
        'ipv6_exclusive_routing' => 'ipv6-exclusive-routing',
        'ipv6_service_restriction' => 'ipv6-service-restriction',
        'ipv6_split_tunneling' => 'ipv6-split-tunneling',
        'ipv6_split_tunneling_routing_negate' => 'ipv6-split-tunneling-routing-negate',
        'ipv6_split_tunneling_routing_address' => 'ipv6-split-tunneling-routing-address',
        'ipv6_dns_server1' => 'ipv6-dns-server1',
        'ipv6_dns_server2' => 'ipv6-dns-server2',
        'ipv6_wins_server1' => 'ipv6-wins-server1',
        'ipv6_wins_server2' => 'ipv6-wins-server2',
        'web_mode' => 'web-mode',
        'display_bookmark' => 'display-bookmark',
        'user_bookmark' => 'user-bookmark',
        'allow_user_access' => 'allow-user-access',
        'user_group_bookmark' => 'user-group-bookmark',
        'bookmark_group' => 'bookmark-group',
        'display_connection_tools' => 'display-connection-tools',
        'display_history' => 'display-history',
        'display_status' => 'display-status',
        'heading' => 'heading',
        'redir_url' => 'redir-url',
        'theme' => 'theme',
        'custom_lang' => 'custom-lang',
        'smb_ntlmv1_auth' => 'smb-ntlmv1-auth',
        'smbv1' => 'smbv1',
        'smb_min_version' => 'smb-min-version',
        'smb_max_version' => 'smb-max-version',
        'use_sdwan' => 'use-sdwan',
        'host_check' => 'host-check',
        'host_check_interval' => 'host-check-interval',
        'host_check_policy' => 'host-check-policy',
        'limit_user_logins' => 'limit-user-logins',
        'mac_addr_check' => 'mac-addr-check',
        'mac_addr_action' => 'mac-addr-action',
        'mac_addr_check_rule' => 'mac-addr-check-rule',
        'os_check' => 'os-check',
        'os_check_list' => 'os-check-list',
        'forticlient_download' => 'forticlient-download',
        'forticlient_download_method' => 'forticlient-download-method',
        'customize_forticlient_download_url' => 'customize-forticlient-download-url',
        'windows_forticlient_download_url' => 'windows-forticlient-download-url',
        'macos_forticlient_download_url' => 'macos-forticlient-download-url',
        'skip_check_for_unsupported_os' => 'skip-check-for-unsupported-os',
        'skip_check_for_browser' => 'skip-check-for-browser',
        'hide_sso_credential' => 'hide-sso-credential',
        'split_dns' => 'split-dns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'tunnel_mode' => 'setTunnelMode',
        'ip_mode' => 'setIpMode',
        'auto_connect' => 'setAutoConnect',
        'keep_alive' => 'setKeepAlive',
        'save_password' => 'setSavePassword',
        'ip_pools' => 'setIpPools',
        'exclusive_routing' => 'setExclusiveRouting',
        'service_restriction' => 'setServiceRestriction',
        'split_tunneling' => 'setSplitTunneling',
        'split_tunneling_routing_negate' => 'setSplitTunnelingRoutingNegate',
        'split_tunneling_routing_address' => 'setSplitTunnelingRoutingAddress',
        'dns_server1' => 'setDnsServer1',
        'dns_server2' => 'setDnsServer2',
        'dns_suffix' => 'setDnsSuffix',
        'wins_server1' => 'setWinsServer1',
        'wins_server2' => 'setWinsServer2',
        'ipv6_tunnel_mode' => 'setIpv6TunnelMode',
        'ipv6_pools' => 'setIpv6Pools',
        'ipv6_exclusive_routing' => 'setIpv6ExclusiveRouting',
        'ipv6_service_restriction' => 'setIpv6ServiceRestriction',
        'ipv6_split_tunneling' => 'setIpv6SplitTunneling',
        'ipv6_split_tunneling_routing_negate' => 'setIpv6SplitTunnelingRoutingNegate',
        'ipv6_split_tunneling_routing_address' => 'setIpv6SplitTunnelingRoutingAddress',
        'ipv6_dns_server1' => 'setIpv6DnsServer1',
        'ipv6_dns_server2' => 'setIpv6DnsServer2',
        'ipv6_wins_server1' => 'setIpv6WinsServer1',
        'ipv6_wins_server2' => 'setIpv6WinsServer2',
        'web_mode' => 'setWebMode',
        'display_bookmark' => 'setDisplayBookmark',
        'user_bookmark' => 'setUserBookmark',
        'allow_user_access' => 'setAllowUserAccess',
        'user_group_bookmark' => 'setUserGroupBookmark',
        'bookmark_group' => 'setBookmarkGroup',
        'display_connection_tools' => 'setDisplayConnectionTools',
        'display_history' => 'setDisplayHistory',
        'display_status' => 'setDisplayStatus',
        'heading' => 'setHeading',
        'redir_url' => 'setRedirUrl',
        'theme' => 'setTheme',
        'custom_lang' => 'setCustomLang',
        'smb_ntlmv1_auth' => 'setSmbNtlmv1Auth',
        'smbv1' => 'setSmbv1',
        'smb_min_version' => 'setSmbMinVersion',
        'smb_max_version' => 'setSmbMaxVersion',
        'use_sdwan' => 'setUseSdwan',
        'host_check' => 'setHostCheck',
        'host_check_interval' => 'setHostCheckInterval',
        'host_check_policy' => 'setHostCheckPolicy',
        'limit_user_logins' => 'setLimitUserLogins',
        'mac_addr_check' => 'setMacAddrCheck',
        'mac_addr_action' => 'setMacAddrAction',
        'mac_addr_check_rule' => 'setMacAddrCheckRule',
        'os_check' => 'setOsCheck',
        'os_check_list' => 'setOsCheckList',
        'forticlient_download' => 'setForticlientDownload',
        'forticlient_download_method' => 'setForticlientDownloadMethod',
        'customize_forticlient_download_url' => 'setCustomizeForticlientDownloadUrl',
        'windows_forticlient_download_url' => 'setWindowsForticlientDownloadUrl',
        'macos_forticlient_download_url' => 'setMacosForticlientDownloadUrl',
        'skip_check_for_unsupported_os' => 'setSkipCheckForUnsupportedOs',
        'skip_check_for_browser' => 'setSkipCheckForBrowser',
        'hide_sso_credential' => 'setHideSsoCredential',
        'split_dns' => 'setSplitDns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'tunnel_mode' => 'getTunnelMode',
        'ip_mode' => 'getIpMode',
        'auto_connect' => 'getAutoConnect',
        'keep_alive' => 'getKeepAlive',
        'save_password' => 'getSavePassword',
        'ip_pools' => 'getIpPools',
        'exclusive_routing' => 'getExclusiveRouting',
        'service_restriction' => 'getServiceRestriction',
        'split_tunneling' => 'getSplitTunneling',
        'split_tunneling_routing_negate' => 'getSplitTunnelingRoutingNegate',
        'split_tunneling_routing_address' => 'getSplitTunnelingRoutingAddress',
        'dns_server1' => 'getDnsServer1',
        'dns_server2' => 'getDnsServer2',
        'dns_suffix' => 'getDnsSuffix',
        'wins_server1' => 'getWinsServer1',
        'wins_server2' => 'getWinsServer2',
        'ipv6_tunnel_mode' => 'getIpv6TunnelMode',
        'ipv6_pools' => 'getIpv6Pools',
        'ipv6_exclusive_routing' => 'getIpv6ExclusiveRouting',
        'ipv6_service_restriction' => 'getIpv6ServiceRestriction',
        'ipv6_split_tunneling' => 'getIpv6SplitTunneling',
        'ipv6_split_tunneling_routing_negate' => 'getIpv6SplitTunnelingRoutingNegate',
        'ipv6_split_tunneling_routing_address' => 'getIpv6SplitTunnelingRoutingAddress',
        'ipv6_dns_server1' => 'getIpv6DnsServer1',
        'ipv6_dns_server2' => 'getIpv6DnsServer2',
        'ipv6_wins_server1' => 'getIpv6WinsServer1',
        'ipv6_wins_server2' => 'getIpv6WinsServer2',
        'web_mode' => 'getWebMode',
        'display_bookmark' => 'getDisplayBookmark',
        'user_bookmark' => 'getUserBookmark',
        'allow_user_access' => 'getAllowUserAccess',
        'user_group_bookmark' => 'getUserGroupBookmark',
        'bookmark_group' => 'getBookmarkGroup',
        'display_connection_tools' => 'getDisplayConnectionTools',
        'display_history' => 'getDisplayHistory',
        'display_status' => 'getDisplayStatus',
        'heading' => 'getHeading',
        'redir_url' => 'getRedirUrl',
        'theme' => 'getTheme',
        'custom_lang' => 'getCustomLang',
        'smb_ntlmv1_auth' => 'getSmbNtlmv1Auth',
        'smbv1' => 'getSmbv1',
        'smb_min_version' => 'getSmbMinVersion',
        'smb_max_version' => 'getSmbMaxVersion',
        'use_sdwan' => 'getUseSdwan',
        'host_check' => 'getHostCheck',
        'host_check_interval' => 'getHostCheckInterval',
        'host_check_policy' => 'getHostCheckPolicy',
        'limit_user_logins' => 'getLimitUserLogins',
        'mac_addr_check' => 'getMacAddrCheck',
        'mac_addr_action' => 'getMacAddrAction',
        'mac_addr_check_rule' => 'getMacAddrCheckRule',
        'os_check' => 'getOsCheck',
        'os_check_list' => 'getOsCheckList',
        'forticlient_download' => 'getForticlientDownload',
        'forticlient_download_method' => 'getForticlientDownloadMethod',
        'customize_forticlient_download_url' => 'getCustomizeForticlientDownloadUrl',
        'windows_forticlient_download_url' => 'getWindowsForticlientDownloadUrl',
        'macos_forticlient_download_url' => 'getMacosForticlientDownloadUrl',
        'skip_check_for_unsupported_os' => 'getSkipCheckForUnsupportedOs',
        'skip_check_for_browser' => 'getSkipCheckForBrowser',
        'hide_sso_credential' => 'getHideSsoCredential',
        'split_dns' => 'getSplitDns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TUNNEL_MODE_ENABLE = 'enable';
    const TUNNEL_MODE_DISABLE = 'disable';
    const IP_MODE_RANGE = 'range';
    const IP_MODE_USER_GROUP = 'user-group';
    const AUTO_CONNECT_ENABLE = 'enable';
    const AUTO_CONNECT_DISABLE = 'disable';
    const KEEP_ALIVE_ENABLE = 'enable';
    const KEEP_ALIVE_DISABLE = 'disable';
    const SAVE_PASSWORD_ENABLE = 'enable';
    const SAVE_PASSWORD_DISABLE = 'disable';
    const EXCLUSIVE_ROUTING_ENABLE = 'enable';
    const EXCLUSIVE_ROUTING_DISABLE = 'disable';
    const SERVICE_RESTRICTION_ENABLE = 'enable';
    const SERVICE_RESTRICTION_DISABLE = 'disable';
    const SPLIT_TUNNELING_ENABLE = 'enable';
    const SPLIT_TUNNELING_DISABLE = 'disable';
    const SPLIT_TUNNELING_ROUTING_NEGATE_ENABLE = 'enable';
    const SPLIT_TUNNELING_ROUTING_NEGATE_DISABLE = 'disable';
    const IPV6_TUNNEL_MODE_ENABLE = 'enable';
    const IPV6_TUNNEL_MODE_DISABLE = 'disable';
    const IPV6_EXCLUSIVE_ROUTING_ENABLE = 'enable';
    const IPV6_EXCLUSIVE_ROUTING_DISABLE = 'disable';
    const IPV6_SERVICE_RESTRICTION_ENABLE = 'enable';
    const IPV6_SERVICE_RESTRICTION_DISABLE = 'disable';
    const IPV6_SPLIT_TUNNELING_ENABLE = 'enable';
    const IPV6_SPLIT_TUNNELING_DISABLE = 'disable';
    const IPV6_SPLIT_TUNNELING_ROUTING_NEGATE_ENABLE = 'enable';
    const IPV6_SPLIT_TUNNELING_ROUTING_NEGATE_DISABLE = 'disable';
    const WEB_MODE_ENABLE = 'enable';
    const WEB_MODE_DISABLE = 'disable';
    const DISPLAY_BOOKMARK_ENABLE = 'enable';
    const DISPLAY_BOOKMARK_DISABLE = 'disable';
    const USER_BOOKMARK_ENABLE = 'enable';
    const USER_BOOKMARK_DISABLE = 'disable';
    const ALLOW_USER_ACCESS_WEB = 'web';
    const ALLOW_USER_ACCESS_FTP = 'ftp';
    const ALLOW_USER_ACCESS_SMB = 'smb';
    const ALLOW_USER_ACCESS_SFTP = 'sftp';
    const ALLOW_USER_ACCESS_TELNET = 'telnet';
    const ALLOW_USER_ACCESS_SSH = 'ssh';
    const ALLOW_USER_ACCESS_VNC = 'vnc';
    const ALLOW_USER_ACCESS_RDP = 'rdp';
    const ALLOW_USER_ACCESS_PING = 'ping';
    const ALLOW_USER_ACCESS_CITRIX = 'citrix';
    const ALLOW_USER_ACCESS_PORTFORWARD = 'portforward';
    const USER_GROUP_BOOKMARK_ENABLE = 'enable';
    const USER_GROUP_BOOKMARK_DISABLE = 'disable';
    const DISPLAY_CONNECTION_TOOLS_ENABLE = 'enable';
    const DISPLAY_CONNECTION_TOOLS_DISABLE = 'disable';
    const DISPLAY_HISTORY_ENABLE = 'enable';
    const DISPLAY_HISTORY_DISABLE = 'disable';
    const DISPLAY_STATUS_ENABLE = 'enable';
    const DISPLAY_STATUS_DISABLE = 'disable';
    const THEME_BLUE = 'blue';
    const THEME_GREEN = 'green';
    const THEME_NEUTRINO = 'neutrino';
    const THEME_MELONGENE = 'melongene';
    const THEME_MARINER = 'mariner';
    const SMB_NTLMV1_AUTH_ENABLE = 'enable';
    const SMB_NTLMV1_AUTH_DISABLE = 'disable';
    const SMBV1_ENABLE = 'enable';
    const SMBV1_DISABLE = 'disable';
    const SMB_MIN_VERSION_SMBV1 = 'smbv1';
    const SMB_MIN_VERSION_SMBV2 = 'smbv2';
    const SMB_MIN_VERSION_SMBV3 = 'smbv3';
    const SMB_MAX_VERSION_SMBV1 = 'smbv1';
    const SMB_MAX_VERSION_SMBV2 = 'smbv2';
    const SMB_MAX_VERSION_SMBV3 = 'smbv3';
    const USE_SDWAN_ENABLE = 'enable';
    const USE_SDWAN_DISABLE = 'disable';
    const HOST_CHECK_NONE = 'none';
    const HOST_CHECK_AV = 'av';
    const HOST_CHECK_FW = 'fw';
    const HOST_CHECK_AV_FW = 'av-fw';
    const HOST_CHECK_CUSTOM = 'custom';
    const LIMIT_USER_LOGINS_ENABLE = 'enable';
    const LIMIT_USER_LOGINS_DISABLE = 'disable';
    const MAC_ADDR_CHECK_ENABLE = 'enable';
    const MAC_ADDR_CHECK_DISABLE = 'disable';
    const MAC_ADDR_ACTION_ALLOW = 'allow';
    const MAC_ADDR_ACTION_DENY = 'deny';
    const OS_CHECK_ENABLE = 'enable';
    const OS_CHECK_DISABLE = 'disable';
    const FORTICLIENT_DOWNLOAD_ENABLE = 'enable';
    const FORTICLIENT_DOWNLOAD_DISABLE = 'disable';
    const FORTICLIENT_DOWNLOAD_METHOD_DIRECT = 'direct';
    const FORTICLIENT_DOWNLOAD_METHOD_SSL_VPN = 'ssl-vpn';
    const CUSTOMIZE_FORTICLIENT_DOWNLOAD_URL_ENABLE = 'enable';
    const CUSTOMIZE_FORTICLIENT_DOWNLOAD_URL_DISABLE = 'disable';
    const SKIP_CHECK_FOR_UNSUPPORTED_OS_ENABLE = 'enable';
    const SKIP_CHECK_FOR_UNSUPPORTED_OS_DISABLE = 'disable';
    const SKIP_CHECK_FOR_BROWSER_ENABLE = 'enable';
    const SKIP_CHECK_FOR_BROWSER_DISABLE = 'disable';
    const HIDE_SSO_CREDENTIAL_ENABLE = 'enable';
    const HIDE_SSO_CREDENTIAL_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelModeAllowableValues()
    {
        return [
            self::TUNNEL_MODE_ENABLE,
            self::TUNNEL_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpModeAllowableValues()
    {
        return [
            self::IP_MODE_RANGE,
            self::IP_MODE_USER_GROUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoConnectAllowableValues()
    {
        return [
            self::AUTO_CONNECT_ENABLE,
            self::AUTO_CONNECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeepAliveAllowableValues()
    {
        return [
            self::KEEP_ALIVE_ENABLE,
            self::KEEP_ALIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSavePasswordAllowableValues()
    {
        return [
            self::SAVE_PASSWORD_ENABLE,
            self::SAVE_PASSWORD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExclusiveRoutingAllowableValues()
    {
        return [
            self::EXCLUSIVE_ROUTING_ENABLE,
            self::EXCLUSIVE_ROUTING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceRestrictionAllowableValues()
    {
        return [
            self::SERVICE_RESTRICTION_ENABLE,
            self::SERVICE_RESTRICTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ENABLE,
            self::SPLIT_TUNNELING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingRoutingNegateAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ROUTING_NEGATE_ENABLE,
            self::SPLIT_TUNNELING_ROUTING_NEGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6TunnelModeAllowableValues()
    {
        return [
            self::IPV6_TUNNEL_MODE_ENABLE,
            self::IPV6_TUNNEL_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6ExclusiveRoutingAllowableValues()
    {
        return [
            self::IPV6_EXCLUSIVE_ROUTING_ENABLE,
            self::IPV6_EXCLUSIVE_ROUTING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6ServiceRestrictionAllowableValues()
    {
        return [
            self::IPV6_SERVICE_RESTRICTION_ENABLE,
            self::IPV6_SERVICE_RESTRICTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6SplitTunnelingAllowableValues()
    {
        return [
            self::IPV6_SPLIT_TUNNELING_ENABLE,
            self::IPV6_SPLIT_TUNNELING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6SplitTunnelingRoutingNegateAllowableValues()
    {
        return [
            self::IPV6_SPLIT_TUNNELING_ROUTING_NEGATE_ENABLE,
            self::IPV6_SPLIT_TUNNELING_ROUTING_NEGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebModeAllowableValues()
    {
        return [
            self::WEB_MODE_ENABLE,
            self::WEB_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayBookmarkAllowableValues()
    {
        return [
            self::DISPLAY_BOOKMARK_ENABLE,
            self::DISPLAY_BOOKMARK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserBookmarkAllowableValues()
    {
        return [
            self::USER_BOOKMARK_ENABLE,
            self::USER_BOOKMARK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowUserAccessAllowableValues()
    {
        return [
            self::ALLOW_USER_ACCESS_WEB,
            self::ALLOW_USER_ACCESS_FTP,
            self::ALLOW_USER_ACCESS_SMB,
            self::ALLOW_USER_ACCESS_SFTP,
            self::ALLOW_USER_ACCESS_TELNET,
            self::ALLOW_USER_ACCESS_SSH,
            self::ALLOW_USER_ACCESS_VNC,
            self::ALLOW_USER_ACCESS_RDP,
            self::ALLOW_USER_ACCESS_PING,
            self::ALLOW_USER_ACCESS_CITRIX,
            self::ALLOW_USER_ACCESS_PORTFORWARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserGroupBookmarkAllowableValues()
    {
        return [
            self::USER_GROUP_BOOKMARK_ENABLE,
            self::USER_GROUP_BOOKMARK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayConnectionToolsAllowableValues()
    {
        return [
            self::DISPLAY_CONNECTION_TOOLS_ENABLE,
            self::DISPLAY_CONNECTION_TOOLS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayHistoryAllowableValues()
    {
        return [
            self::DISPLAY_HISTORY_ENABLE,
            self::DISPLAY_HISTORY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayStatusAllowableValues()
    {
        return [
            self::DISPLAY_STATUS_ENABLE,
            self::DISPLAY_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThemeAllowableValues()
    {
        return [
            self::THEME_BLUE,
            self::THEME_GREEN,
            self::THEME_NEUTRINO,
            self::THEME_MELONGENE,
            self::THEME_MARINER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbNtlmv1AuthAllowableValues()
    {
        return [
            self::SMB_NTLMV1_AUTH_ENABLE,
            self::SMB_NTLMV1_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbv1AllowableValues()
    {
        return [
            self::SMBV1_ENABLE,
            self::SMBV1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbMinVersionAllowableValues()
    {
        return [
            self::SMB_MIN_VERSION_SMBV1,
            self::SMB_MIN_VERSION_SMBV2,
            self::SMB_MIN_VERSION_SMBV3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmbMaxVersionAllowableValues()
    {
        return [
            self::SMB_MAX_VERSION_SMBV1,
            self::SMB_MAX_VERSION_SMBV2,
            self::SMB_MAX_VERSION_SMBV3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseSdwanAllowableValues()
    {
        return [
            self::USE_SDWAN_ENABLE,
            self::USE_SDWAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostCheckAllowableValues()
    {
        return [
            self::HOST_CHECK_NONE,
            self::HOST_CHECK_AV,
            self::HOST_CHECK_FW,
            self::HOST_CHECK_AV_FW,
            self::HOST_CHECK_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLimitUserLoginsAllowableValues()
    {
        return [
            self::LIMIT_USER_LOGINS_ENABLE,
            self::LIMIT_USER_LOGINS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacAddrCheckAllowableValues()
    {
        return [
            self::MAC_ADDR_CHECK_ENABLE,
            self::MAC_ADDR_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacAddrActionAllowableValues()
    {
        return [
            self::MAC_ADDR_ACTION_ALLOW,
            self::MAC_ADDR_ACTION_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsCheckAllowableValues()
    {
        return [
            self::OS_CHECK_ENABLE,
            self::OS_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForticlientDownloadAllowableValues()
    {
        return [
            self::FORTICLIENT_DOWNLOAD_ENABLE,
            self::FORTICLIENT_DOWNLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForticlientDownloadMethodAllowableValues()
    {
        return [
            self::FORTICLIENT_DOWNLOAD_METHOD_DIRECT,
            self::FORTICLIENT_DOWNLOAD_METHOD_SSL_VPN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomizeForticlientDownloadUrlAllowableValues()
    {
        return [
            self::CUSTOMIZE_FORTICLIENT_DOWNLOAD_URL_ENABLE,
            self::CUSTOMIZE_FORTICLIENT_DOWNLOAD_URL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSkipCheckForUnsupportedOsAllowableValues()
    {
        return [
            self::SKIP_CHECK_FOR_UNSUPPORTED_OS_ENABLE,
            self::SKIP_CHECK_FOR_UNSUPPORTED_OS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSkipCheckForBrowserAllowableValues()
    {
        return [
            self::SKIP_CHECK_FOR_BROWSER_ENABLE,
            self::SKIP_CHECK_FOR_BROWSER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHideSsoCredentialAllowableValues()
    {
        return [
            self::HIDE_SSO_CREDENTIAL_ENABLE,
            self::HIDE_SSO_CREDENTIAL_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['tunnel_mode'] = $data['tunnel_mode'] ?? null;
        $this->container['ip_mode'] = $data['ip_mode'] ?? null;
        $this->container['auto_connect'] = $data['auto_connect'] ?? null;
        $this->container['keep_alive'] = $data['keep_alive'] ?? null;
        $this->container['save_password'] = $data['save_password'] ?? null;
        $this->container['ip_pools'] = $data['ip_pools'] ?? null;
        $this->container['exclusive_routing'] = $data['exclusive_routing'] ?? null;
        $this->container['service_restriction'] = $data['service_restriction'] ?? null;
        $this->container['split_tunneling'] = $data['split_tunneling'] ?? null;
        $this->container['split_tunneling_routing_negate'] = $data['split_tunneling_routing_negate'] ?? null;
        $this->container['split_tunneling_routing_address'] = $data['split_tunneling_routing_address'] ?? null;
        $this->container['dns_server1'] = $data['dns_server1'] ?? null;
        $this->container['dns_server2'] = $data['dns_server2'] ?? null;
        $this->container['dns_suffix'] = $data['dns_suffix'] ?? null;
        $this->container['wins_server1'] = $data['wins_server1'] ?? null;
        $this->container['wins_server2'] = $data['wins_server2'] ?? null;
        $this->container['ipv6_tunnel_mode'] = $data['ipv6_tunnel_mode'] ?? null;
        $this->container['ipv6_pools'] = $data['ipv6_pools'] ?? null;
        $this->container['ipv6_exclusive_routing'] = $data['ipv6_exclusive_routing'] ?? null;
        $this->container['ipv6_service_restriction'] = $data['ipv6_service_restriction'] ?? null;
        $this->container['ipv6_split_tunneling'] = $data['ipv6_split_tunneling'] ?? null;
        $this->container['ipv6_split_tunneling_routing_negate'] = $data['ipv6_split_tunneling_routing_negate'] ?? null;
        $this->container['ipv6_split_tunneling_routing_address'] = $data['ipv6_split_tunneling_routing_address'] ?? null;
        $this->container['ipv6_dns_server1'] = $data['ipv6_dns_server1'] ?? null;
        $this->container['ipv6_dns_server2'] = $data['ipv6_dns_server2'] ?? null;
        $this->container['ipv6_wins_server1'] = $data['ipv6_wins_server1'] ?? null;
        $this->container['ipv6_wins_server2'] = $data['ipv6_wins_server2'] ?? null;
        $this->container['web_mode'] = $data['web_mode'] ?? null;
        $this->container['display_bookmark'] = $data['display_bookmark'] ?? null;
        $this->container['user_bookmark'] = $data['user_bookmark'] ?? null;
        $this->container['allow_user_access'] = $data['allow_user_access'] ?? null;
        $this->container['user_group_bookmark'] = $data['user_group_bookmark'] ?? null;
        $this->container['bookmark_group'] = $data['bookmark_group'] ?? null;
        $this->container['display_connection_tools'] = $data['display_connection_tools'] ?? null;
        $this->container['display_history'] = $data['display_history'] ?? null;
        $this->container['display_status'] = $data['display_status'] ?? null;
        $this->container['heading'] = $data['heading'] ?? null;
        $this->container['redir_url'] = $data['redir_url'] ?? null;
        $this->container['theme'] = $data['theme'] ?? null;
        $this->container['custom_lang'] = $data['custom_lang'] ?? null;
        $this->container['smb_ntlmv1_auth'] = $data['smb_ntlmv1_auth'] ?? null;
        $this->container['smbv1'] = $data['smbv1'] ?? null;
        $this->container['smb_min_version'] = $data['smb_min_version'] ?? null;
        $this->container['smb_max_version'] = $data['smb_max_version'] ?? null;
        $this->container['use_sdwan'] = $data['use_sdwan'] ?? null;
        $this->container['host_check'] = $data['host_check'] ?? null;
        $this->container['host_check_interval'] = $data['host_check_interval'] ?? null;
        $this->container['host_check_policy'] = $data['host_check_policy'] ?? null;
        $this->container['limit_user_logins'] = $data['limit_user_logins'] ?? null;
        $this->container['mac_addr_check'] = $data['mac_addr_check'] ?? null;
        $this->container['mac_addr_action'] = $data['mac_addr_action'] ?? null;
        $this->container['mac_addr_check_rule'] = $data['mac_addr_check_rule'] ?? null;
        $this->container['os_check'] = $data['os_check'] ?? null;
        $this->container['os_check_list'] = $data['os_check_list'] ?? null;
        $this->container['forticlient_download'] = $data['forticlient_download'] ?? null;
        $this->container['forticlient_download_method'] = $data['forticlient_download_method'] ?? null;
        $this->container['customize_forticlient_download_url'] = $data['customize_forticlient_download_url'] ?? null;
        $this->container['windows_forticlient_download_url'] = $data['windows_forticlient_download_url'] ?? null;
        $this->container['macos_forticlient_download_url'] = $data['macos_forticlient_download_url'] ?? null;
        $this->container['skip_check_for_unsupported_os'] = $data['skip_check_for_unsupported_os'] ?? null;
        $this->container['skip_check_for_browser'] = $data['skip_check_for_browser'] ?? null;
        $this->container['hide_sso_credential'] = $data['hide_sso_credential'] ?? null;
        $this->container['split_dns'] = $data['split_dns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTunnelModeAllowableValues();
        if (!is_null($this->container['tunnel_mode']) && !in_array($this->container['tunnel_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_mode', must be one of '%s'",
                $this->container['tunnel_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($this->container['ip_mode']) && !in_array($this->container['ip_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_mode', must be one of '%s'",
                $this->container['ip_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoConnectAllowableValues();
        if (!is_null($this->container['auto_connect']) && !in_array($this->container['auto_connect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_connect', must be one of '%s'",
                $this->container['auto_connect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeepAliveAllowableValues();
        if (!is_null($this->container['keep_alive']) && !in_array($this->container['keep_alive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keep_alive', must be one of '%s'",
                $this->container['keep_alive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSavePasswordAllowableValues();
        if (!is_null($this->container['save_password']) && !in_array($this->container['save_password'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'save_password', must be one of '%s'",
                $this->container['save_password'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ip_pools']) && (count($this->container['ip_pools']) > 0)) {
            $invalidProperties[] = "invalid value for 'ip_pools', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getExclusiveRoutingAllowableValues();
        if (!is_null($this->container['exclusive_routing']) && !in_array($this->container['exclusive_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exclusive_routing', must be one of '%s'",
                $this->container['exclusive_routing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServiceRestrictionAllowableValues();
        if (!is_null($this->container['service_restriction']) && !in_array($this->container['service_restriction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_restriction', must be one of '%s'",
                $this->container['service_restriction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitTunnelingAllowableValues();
        if (!is_null($this->container['split_tunneling']) && !in_array($this->container['split_tunneling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling', must be one of '%s'",
                $this->container['split_tunneling'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitTunnelingRoutingNegateAllowableValues();
        if (!is_null($this->container['split_tunneling_routing_negate']) && !in_array($this->container['split_tunneling_routing_negate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling_routing_negate', must be one of '%s'",
                $this->container['split_tunneling_routing_negate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['split_tunneling_routing_address']) && (count($this->container['split_tunneling_routing_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'split_tunneling_routing_address', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dns_suffix']) && (mb_strlen($this->container['dns_suffix']) > 253)) {
            $invalidProperties[] = "invalid value for 'dns_suffix', the character length must be smaller than or equal to 253.";
        }

        $allowedValues = $this->getIpv6TunnelModeAllowableValues();
        if (!is_null($this->container['ipv6_tunnel_mode']) && !in_array($this->container['ipv6_tunnel_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_tunnel_mode', must be one of '%s'",
                $this->container['ipv6_tunnel_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipv6_pools']) && (count($this->container['ipv6_pools']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipv6_pools', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getIpv6ExclusiveRoutingAllowableValues();
        if (!is_null($this->container['ipv6_exclusive_routing']) && !in_array($this->container['ipv6_exclusive_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_exclusive_routing', must be one of '%s'",
                $this->container['ipv6_exclusive_routing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6ServiceRestrictionAllowableValues();
        if (!is_null($this->container['ipv6_service_restriction']) && !in_array($this->container['ipv6_service_restriction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_service_restriction', must be one of '%s'",
                $this->container['ipv6_service_restriction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6SplitTunnelingAllowableValues();
        if (!is_null($this->container['ipv6_split_tunneling']) && !in_array($this->container['ipv6_split_tunneling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_split_tunneling', must be one of '%s'",
                $this->container['ipv6_split_tunneling'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6SplitTunnelingRoutingNegateAllowableValues();
        if (!is_null($this->container['ipv6_split_tunneling_routing_negate']) && !in_array($this->container['ipv6_split_tunneling_routing_negate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_split_tunneling_routing_negate', must be one of '%s'",
                $this->container['ipv6_split_tunneling_routing_negate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipv6_split_tunneling_routing_address']) && (count($this->container['ipv6_split_tunneling_routing_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipv6_split_tunneling_routing_address', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getWebModeAllowableValues();
        if (!is_null($this->container['web_mode']) && !in_array($this->container['web_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_mode', must be one of '%s'",
                $this->container['web_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisplayBookmarkAllowableValues();
        if (!is_null($this->container['display_bookmark']) && !in_array($this->container['display_bookmark'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'display_bookmark', must be one of '%s'",
                $this->container['display_bookmark'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserBookmarkAllowableValues();
        if (!is_null($this->container['user_bookmark']) && !in_array($this->container['user_bookmark'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_bookmark', must be one of '%s'",
                $this->container['user_bookmark'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowUserAccessAllowableValues();
        if (!is_null($this->container['allow_user_access']) && !in_array($this->container['allow_user_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_user_access', must be one of '%s'",
                $this->container['allow_user_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserGroupBookmarkAllowableValues();
        if (!is_null($this->container['user_group_bookmark']) && !in_array($this->container['user_group_bookmark'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_group_bookmark', must be one of '%s'",
                $this->container['user_group_bookmark'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bookmark_group']) && (count($this->container['bookmark_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'bookmark_group', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getDisplayConnectionToolsAllowableValues();
        if (!is_null($this->container['display_connection_tools']) && !in_array($this->container['display_connection_tools'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'display_connection_tools', must be one of '%s'",
                $this->container['display_connection_tools'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisplayHistoryAllowableValues();
        if (!is_null($this->container['display_history']) && !in_array($this->container['display_history'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'display_history', must be one of '%s'",
                $this->container['display_history'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisplayStatusAllowableValues();
        if (!is_null($this->container['display_status']) && !in_array($this->container['display_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'display_status', must be one of '%s'",
                $this->container['display_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['heading']) && (mb_strlen($this->container['heading']) > 31)) {
            $invalidProperties[] = "invalid value for 'heading', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['redir_url']) && (mb_strlen($this->container['redir_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'redir_url', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getThemeAllowableValues();
        if (!is_null($this->container['theme']) && !in_array($this->container['theme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'theme', must be one of '%s'",
                $this->container['theme'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_lang']) && (mb_strlen($this->container['custom_lang']) > 35)) {
            $invalidProperties[] = "invalid value for 'custom_lang', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSmbNtlmv1AuthAllowableValues();
        if (!is_null($this->container['smb_ntlmv1_auth']) && !in_array($this->container['smb_ntlmv1_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smb_ntlmv1_auth', must be one of '%s'",
                $this->container['smb_ntlmv1_auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmbv1AllowableValues();
        if (!is_null($this->container['smbv1']) && !in_array($this->container['smbv1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smbv1', must be one of '%s'",
                $this->container['smbv1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmbMinVersionAllowableValues();
        if (!is_null($this->container['smb_min_version']) && !in_array($this->container['smb_min_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smb_min_version', must be one of '%s'",
                $this->container['smb_min_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmbMaxVersionAllowableValues();
        if (!is_null($this->container['smb_max_version']) && !in_array($this->container['smb_max_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smb_max_version', must be one of '%s'",
                $this->container['smb_max_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseSdwanAllowableValues();
        if (!is_null($this->container['use_sdwan']) && !in_array($this->container['use_sdwan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_sdwan', must be one of '%s'",
                $this->container['use_sdwan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHostCheckAllowableValues();
        if (!is_null($this->container['host_check']) && !in_array($this->container['host_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'host_check', must be one of '%s'",
                $this->container['host_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['host_check_interval']) && ($this->container['host_check_interval'] > 259200)) {
            $invalidProperties[] = "invalid value for 'host_check_interval', must be smaller than or equal to 259200.";
        }

        if (!is_null($this->container['host_check_interval']) && ($this->container['host_check_interval'] < 120)) {
            $invalidProperties[] = "invalid value for 'host_check_interval', must be bigger than or equal to 120.";
        }

        if (!is_null($this->container['host_check_policy']) && (count($this->container['host_check_policy']) > 0)) {
            $invalidProperties[] = "invalid value for 'host_check_policy', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getLimitUserLoginsAllowableValues();
        if (!is_null($this->container['limit_user_logins']) && !in_array($this->container['limit_user_logins'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'limit_user_logins', must be one of '%s'",
                $this->container['limit_user_logins'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMacAddrCheckAllowableValues();
        if (!is_null($this->container['mac_addr_check']) && !in_array($this->container['mac_addr_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_addr_check', must be one of '%s'",
                $this->container['mac_addr_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMacAddrActionAllowableValues();
        if (!is_null($this->container['mac_addr_action']) && !in_array($this->container['mac_addr_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_addr_action', must be one of '%s'",
                $this->container['mac_addr_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac_addr_check_rule']) && (count($this->container['mac_addr_check_rule']) > 0)) {
            $invalidProperties[] = "invalid value for 'mac_addr_check_rule', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOsCheckAllowableValues();
        if (!is_null($this->container['os_check']) && !in_array($this->container['os_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'os_check', must be one of '%s'",
                $this->container['os_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['os_check_list']) && (count($this->container['os_check_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'os_check_list', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getForticlientDownloadAllowableValues();
        if (!is_null($this->container['forticlient_download']) && !in_array($this->container['forticlient_download'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forticlient_download', must be one of '%s'",
                $this->container['forticlient_download'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForticlientDownloadMethodAllowableValues();
        if (!is_null($this->container['forticlient_download_method']) && !in_array($this->container['forticlient_download_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forticlient_download_method', must be one of '%s'",
                $this->container['forticlient_download_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomizeForticlientDownloadUrlAllowableValues();
        if (!is_null($this->container['customize_forticlient_download_url']) && !in_array($this->container['customize_forticlient_download_url'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customize_forticlient_download_url', must be one of '%s'",
                $this->container['customize_forticlient_download_url'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['windows_forticlient_download_url']) && (mb_strlen($this->container['windows_forticlient_download_url']) > 1023)) {
            $invalidProperties[] = "invalid value for 'windows_forticlient_download_url', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['macos_forticlient_download_url']) && (mb_strlen($this->container['macos_forticlient_download_url']) > 1023)) {
            $invalidProperties[] = "invalid value for 'macos_forticlient_download_url', the character length must be smaller than or equal to 1023.";
        }

        $allowedValues = $this->getSkipCheckForUnsupportedOsAllowableValues();
        if (!is_null($this->container['skip_check_for_unsupported_os']) && !in_array($this->container['skip_check_for_unsupported_os'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'skip_check_for_unsupported_os', must be one of '%s'",
                $this->container['skip_check_for_unsupported_os'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSkipCheckForBrowserAllowableValues();
        if (!is_null($this->container['skip_check_for_browser']) && !in_array($this->container['skip_check_for_browser'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'skip_check_for_browser', must be one of '%s'",
                $this->container['skip_check_for_browser'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHideSsoCredentialAllowableValues();
        if (!is_null($this->container['hide_sso_credential']) && !in_array($this->container['hide_sso_credential'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hide_sso_credential', must be one of '%s'",
                $this->container['hide_sso_credential'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['split_dns']) && (count($this->container['split_dns']) > 0)) {
            $invalidProperties[] = "invalid value for 'split_dns', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Portal name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject488., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tunnel_mode
     *
     * @return string|null
     */
    public function getTunnelMode()
    {
        return $this->container['tunnel_mode'];
    }

    /**
     * Sets tunnel_mode
     *
     * @param string|null $tunnel_mode Enable/disable IPv4 SSL-VPN tunnel mode.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setTunnelMode($tunnel_mode)
    {
        $allowedValues = $this->getTunnelModeAllowableValues();
        if (!is_null($tunnel_mode) && !in_array($tunnel_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_mode', must be one of '%s'",
                    $tunnel_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_mode'] = $tunnel_mode;

        return $this;
    }

    /**
     * Gets ip_mode
     *
     * @return string|null
     */
    public function getIpMode()
    {
        return $this->container['ip_mode'];
    }

    /**
     * Sets ip_mode
     *
     * @param string|null $ip_mode Method by which users of this SSL-VPN tunnel obtain IP addresses.    range:Use the IP addresses available for all SSL-VPN users as defined by the SSL settings command.    user-group:Use IP the addresses associated with individual users or user groups (usually from external auth servers).
     *
     * @return self
     */
    public function setIpMode($ip_mode)
    {
        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($ip_mode) && !in_array($ip_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_mode', must be one of '%s'",
                    $ip_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_mode'] = $ip_mode;

        return $this;
    }

    /**
     * Gets auto_connect
     *
     * @return string|null
     */
    public function getAutoConnect()
    {
        return $this->container['auto_connect'];
    }

    /**
     * Sets auto_connect
     *
     * @param string|null $auto_connect Enable/disable automatic connect by client when system is up.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAutoConnect($auto_connect)
    {
        $allowedValues = $this->getAutoConnectAllowableValues();
        if (!is_null($auto_connect) && !in_array($auto_connect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_connect', must be one of '%s'",
                    $auto_connect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_connect'] = $auto_connect;

        return $this;
    }

    /**
     * Gets keep_alive
     *
     * @return string|null
     */
    public function getKeepAlive()
    {
        return $this->container['keep_alive'];
    }

    /**
     * Sets keep_alive
     *
     * @param string|null $keep_alive Enable/disable automatic reconnect for FortiClient connections.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setKeepAlive($keep_alive)
    {
        $allowedValues = $this->getKeepAliveAllowableValues();
        if (!is_null($keep_alive) && !in_array($keep_alive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keep_alive', must be one of '%s'",
                    $keep_alive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keep_alive'] = $keep_alive;

        return $this;
    }

    /**
     * Gets save_password
     *
     * @return string|null
     */
    public function getSavePassword()
    {
        return $this->container['save_password'];
    }

    /**
     * Sets save_password
     *
     * @param string|null $save_password Enable/disable FortiClient saving the user's password.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSavePassword($save_password)
    {
        $allowedValues = $this->getSavePasswordAllowableValues();
        if (!is_null($save_password) && !in_array($save_password, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'save_password', must be one of '%s'",
                    $save_password,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['save_password'] = $save_password;

        return $this;
    }

    /**
     * Gets ip_pools
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getIpPools()
    {
        return $this->container['ip_pools'];
    }

    /**
     * Sets ip_pools
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $ip_pools IPv4 firewall source address objects reserved for SSL-VPN tunnel mode clients.
     *
     * @return self
     */
    public function setIpPools($ip_pools)
    {

        if (!is_null($ip_pools) && (count($ip_pools) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ip_pools when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['ip_pools'] = $ip_pools;

        return $this;
    }

    /**
     * Gets exclusive_routing
     *
     * @return string|null
     */
    public function getExclusiveRouting()
    {
        return $this->container['exclusive_routing'];
    }

    /**
     * Sets exclusive_routing
     *
     * @param string|null $exclusive_routing Enable/disable all traffic go through tunnel only.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExclusiveRouting($exclusive_routing)
    {
        $allowedValues = $this->getExclusiveRoutingAllowableValues();
        if (!is_null($exclusive_routing) && !in_array($exclusive_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exclusive_routing', must be one of '%s'",
                    $exclusive_routing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclusive_routing'] = $exclusive_routing;

        return $this;
    }

    /**
     * Gets service_restriction
     *
     * @return string|null
     */
    public function getServiceRestriction()
    {
        return $this->container['service_restriction'];
    }

    /**
     * Sets service_restriction
     *
     * @param string|null $service_restriction Enable/disable tunnel service restriction.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setServiceRestriction($service_restriction)
    {
        $allowedValues = $this->getServiceRestrictionAllowableValues();
        if (!is_null($service_restriction) && !in_array($service_restriction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_restriction', must be one of '%s'",
                    $service_restriction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_restriction'] = $service_restriction;

        return $this;
    }

    /**
     * Gets split_tunneling
     *
     * @return string|null
     */
    public function getSplitTunneling()
    {
        return $this->container['split_tunneling'];
    }

    /**
     * Sets split_tunneling
     *
     * @param string|null $split_tunneling Enable/disable IPv4 split tunneling.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSplitTunneling($split_tunneling)
    {
        $allowedValues = $this->getSplitTunnelingAllowableValues();
        if (!is_null($split_tunneling) && !in_array($split_tunneling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling', must be one of '%s'",
                    $split_tunneling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling'] = $split_tunneling;

        return $this;
    }

    /**
     * Gets split_tunneling_routing_negate
     *
     * @return string|null
     */
    public function getSplitTunnelingRoutingNegate()
    {
        return $this->container['split_tunneling_routing_negate'];
    }

    /**
     * Sets split_tunneling_routing_negate
     *
     * @param string|null $split_tunneling_routing_negate Enable to negate split tunneling routing address.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSplitTunnelingRoutingNegate($split_tunneling_routing_negate)
    {
        $allowedValues = $this->getSplitTunnelingRoutingNegateAllowableValues();
        if (!is_null($split_tunneling_routing_negate) && !in_array($split_tunneling_routing_negate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling_routing_negate', must be one of '%s'",
                    $split_tunneling_routing_negate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling_routing_negate'] = $split_tunneling_routing_negate;

        return $this;
    }

    /**
     * Gets split_tunneling_routing_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getSplitTunnelingRoutingAddress()
    {
        return $this->container['split_tunneling_routing_address'];
    }

    /**
     * Sets split_tunneling_routing_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $split_tunneling_routing_address IPv4 SSL-VPN tunnel mode firewall address objects that override firewall policy destination addresses to control split-tunneling access.
     *
     * @return self
     */
    public function setSplitTunnelingRoutingAddress($split_tunneling_routing_address)
    {

        if (!is_null($split_tunneling_routing_address) && (count($split_tunneling_routing_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $split_tunneling_routing_address when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['split_tunneling_routing_address'] = $split_tunneling_routing_address;

        return $this;
    }

    /**
     * Gets dns_server1
     *
     * @return string|null
     */
    public function getDnsServer1()
    {
        return $this->container['dns_server1'];
    }

    /**
     * Sets dns_server1
     *
     * @param string|null $dns_server1 IPv4 DNS server 1.
     *
     * @return self
     */
    public function setDnsServer1($dns_server1)
    {
        $this->container['dns_server1'] = $dns_server1;

        return $this;
    }

    /**
     * Gets dns_server2
     *
     * @return string|null
     */
    public function getDnsServer2()
    {
        return $this->container['dns_server2'];
    }

    /**
     * Sets dns_server2
     *
     * @param string|null $dns_server2 IPv4 DNS server 2.
     *
     * @return self
     */
    public function setDnsServer2($dns_server2)
    {
        $this->container['dns_server2'] = $dns_server2;

        return $this;
    }

    /**
     * Gets dns_suffix
     *
     * @return string|null
     */
    public function getDnsSuffix()
    {
        return $this->container['dns_suffix'];
    }

    /**
     * Sets dns_suffix
     *
     * @param string|null $dns_suffix DNS suffix.
     *
     * @return self
     */
    public function setDnsSuffix($dns_suffix)
    {
        if (!is_null($dns_suffix) && (mb_strlen($dns_suffix) > 253)) {
            throw new \InvalidArgumentException('invalid length for $dns_suffix when calling InlineObject488., must be smaller than or equal to 253.');
        }

        $this->container['dns_suffix'] = $dns_suffix;

        return $this;
    }

    /**
     * Gets wins_server1
     *
     * @return string|null
     */
    public function getWinsServer1()
    {
        return $this->container['wins_server1'];
    }

    /**
     * Sets wins_server1
     *
     * @param string|null $wins_server1 IPv4 WINS server 1.
     *
     * @return self
     */
    public function setWinsServer1($wins_server1)
    {
        $this->container['wins_server1'] = $wins_server1;

        return $this;
    }

    /**
     * Gets wins_server2
     *
     * @return string|null
     */
    public function getWinsServer2()
    {
        return $this->container['wins_server2'];
    }

    /**
     * Sets wins_server2
     *
     * @param string|null $wins_server2 IPv4 WINS server 1.
     *
     * @return self
     */
    public function setWinsServer2($wins_server2)
    {
        $this->container['wins_server2'] = $wins_server2;

        return $this;
    }

    /**
     * Gets ipv6_tunnel_mode
     *
     * @return string|null
     */
    public function getIpv6TunnelMode()
    {
        return $this->container['ipv6_tunnel_mode'];
    }

    /**
     * Sets ipv6_tunnel_mode
     *
     * @param string|null $ipv6_tunnel_mode Enable/disable IPv6 SSL-VPN tunnel mode.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIpv6TunnelMode($ipv6_tunnel_mode)
    {
        $allowedValues = $this->getIpv6TunnelModeAllowableValues();
        if (!is_null($ipv6_tunnel_mode) && !in_array($ipv6_tunnel_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_tunnel_mode', must be one of '%s'",
                    $ipv6_tunnel_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_tunnel_mode'] = $ipv6_tunnel_mode;

        return $this;
    }

    /**
     * Gets ipv6_pools
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getIpv6Pools()
    {
        return $this->container['ipv6_pools'];
    }

    /**
     * Sets ipv6_pools
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $ipv6_pools IPv6 firewall source address objects reserved for SSL-VPN tunnel mode clients.
     *
     * @return self
     */
    public function setIpv6Pools($ipv6_pools)
    {

        if (!is_null($ipv6_pools) && (count($ipv6_pools) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_pools when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['ipv6_pools'] = $ipv6_pools;

        return $this;
    }

    /**
     * Gets ipv6_exclusive_routing
     *
     * @return string|null
     */
    public function getIpv6ExclusiveRouting()
    {
        return $this->container['ipv6_exclusive_routing'];
    }

    /**
     * Sets ipv6_exclusive_routing
     *
     * @param string|null $ipv6_exclusive_routing Enable/disable all IPv6 traffic go through tunnel only.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIpv6ExclusiveRouting($ipv6_exclusive_routing)
    {
        $allowedValues = $this->getIpv6ExclusiveRoutingAllowableValues();
        if (!is_null($ipv6_exclusive_routing) && !in_array($ipv6_exclusive_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_exclusive_routing', must be one of '%s'",
                    $ipv6_exclusive_routing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_exclusive_routing'] = $ipv6_exclusive_routing;

        return $this;
    }

    /**
     * Gets ipv6_service_restriction
     *
     * @return string|null
     */
    public function getIpv6ServiceRestriction()
    {
        return $this->container['ipv6_service_restriction'];
    }

    /**
     * Sets ipv6_service_restriction
     *
     * @param string|null $ipv6_service_restriction Enable/disable IPv6 tunnel service restriction.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIpv6ServiceRestriction($ipv6_service_restriction)
    {
        $allowedValues = $this->getIpv6ServiceRestrictionAllowableValues();
        if (!is_null($ipv6_service_restriction) && !in_array($ipv6_service_restriction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_service_restriction', must be one of '%s'",
                    $ipv6_service_restriction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_service_restriction'] = $ipv6_service_restriction;

        return $this;
    }

    /**
     * Gets ipv6_split_tunneling
     *
     * @return string|null
     */
    public function getIpv6SplitTunneling()
    {
        return $this->container['ipv6_split_tunneling'];
    }

    /**
     * Sets ipv6_split_tunneling
     *
     * @param string|null $ipv6_split_tunneling Enable/disable IPv6 split tunneling.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIpv6SplitTunneling($ipv6_split_tunneling)
    {
        $allowedValues = $this->getIpv6SplitTunnelingAllowableValues();
        if (!is_null($ipv6_split_tunneling) && !in_array($ipv6_split_tunneling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_split_tunneling', must be one of '%s'",
                    $ipv6_split_tunneling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_split_tunneling'] = $ipv6_split_tunneling;

        return $this;
    }

    /**
     * Gets ipv6_split_tunneling_routing_negate
     *
     * @return string|null
     */
    public function getIpv6SplitTunnelingRoutingNegate()
    {
        return $this->container['ipv6_split_tunneling_routing_negate'];
    }

    /**
     * Sets ipv6_split_tunneling_routing_negate
     *
     * @param string|null $ipv6_split_tunneling_routing_negate Enable to negate IPv6 split tunneling routing address.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIpv6SplitTunnelingRoutingNegate($ipv6_split_tunneling_routing_negate)
    {
        $allowedValues = $this->getIpv6SplitTunnelingRoutingNegateAllowableValues();
        if (!is_null($ipv6_split_tunneling_routing_negate) && !in_array($ipv6_split_tunneling_routing_negate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_split_tunneling_routing_negate', must be one of '%s'",
                    $ipv6_split_tunneling_routing_negate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_split_tunneling_routing_negate'] = $ipv6_split_tunneling_routing_negate;

        return $this;
    }

    /**
     * Gets ipv6_split_tunneling_routing_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getIpv6SplitTunnelingRoutingAddress()
    {
        return $this->container['ipv6_split_tunneling_routing_address'];
    }

    /**
     * Sets ipv6_split_tunneling_routing_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $ipv6_split_tunneling_routing_address IPv6 SSL-VPN tunnel mode firewall address objects that override firewall policy destination addresses to control split-tunneling access.
     *
     * @return self
     */
    public function setIpv6SplitTunnelingRoutingAddress($ipv6_split_tunneling_routing_address)
    {

        if (!is_null($ipv6_split_tunneling_routing_address) && (count($ipv6_split_tunneling_routing_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_split_tunneling_routing_address when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['ipv6_split_tunneling_routing_address'] = $ipv6_split_tunneling_routing_address;

        return $this;
    }

    /**
     * Gets ipv6_dns_server1
     *
     * @return string|null
     */
    public function getIpv6DnsServer1()
    {
        return $this->container['ipv6_dns_server1'];
    }

    /**
     * Sets ipv6_dns_server1
     *
     * @param string|null $ipv6_dns_server1 IPv6 DNS server 1.
     *
     * @return self
     */
    public function setIpv6DnsServer1($ipv6_dns_server1)
    {
        $this->container['ipv6_dns_server1'] = $ipv6_dns_server1;

        return $this;
    }

    /**
     * Gets ipv6_dns_server2
     *
     * @return string|null
     */
    public function getIpv6DnsServer2()
    {
        return $this->container['ipv6_dns_server2'];
    }

    /**
     * Sets ipv6_dns_server2
     *
     * @param string|null $ipv6_dns_server2 IPv6 DNS server 2.
     *
     * @return self
     */
    public function setIpv6DnsServer2($ipv6_dns_server2)
    {
        $this->container['ipv6_dns_server2'] = $ipv6_dns_server2;

        return $this;
    }

    /**
     * Gets ipv6_wins_server1
     *
     * @return string|null
     */
    public function getIpv6WinsServer1()
    {
        return $this->container['ipv6_wins_server1'];
    }

    /**
     * Sets ipv6_wins_server1
     *
     * @param string|null $ipv6_wins_server1 IPv6 WINS server 1.
     *
     * @return self
     */
    public function setIpv6WinsServer1($ipv6_wins_server1)
    {
        $this->container['ipv6_wins_server1'] = $ipv6_wins_server1;

        return $this;
    }

    /**
     * Gets ipv6_wins_server2
     *
     * @return string|null
     */
    public function getIpv6WinsServer2()
    {
        return $this->container['ipv6_wins_server2'];
    }

    /**
     * Sets ipv6_wins_server2
     *
     * @param string|null $ipv6_wins_server2 IPv6 WINS server 2.
     *
     * @return self
     */
    public function setIpv6WinsServer2($ipv6_wins_server2)
    {
        $this->container['ipv6_wins_server2'] = $ipv6_wins_server2;

        return $this;
    }

    /**
     * Gets web_mode
     *
     * @return string|null
     */
    public function getWebMode()
    {
        return $this->container['web_mode'];
    }

    /**
     * Sets web_mode
     *
     * @param string|null $web_mode Enable/disable SSL VPN web mode.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebMode($web_mode)
    {
        $allowedValues = $this->getWebModeAllowableValues();
        if (!is_null($web_mode) && !in_array($web_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_mode', must be one of '%s'",
                    $web_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_mode'] = $web_mode;

        return $this;
    }

    /**
     * Gets display_bookmark
     *
     * @return string|null
     */
    public function getDisplayBookmark()
    {
        return $this->container['display_bookmark'];
    }

    /**
     * Sets display_bookmark
     *
     * @param string|null $display_bookmark Enable to display the web portal bookmark widget.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDisplayBookmark($display_bookmark)
    {
        $allowedValues = $this->getDisplayBookmarkAllowableValues();
        if (!is_null($display_bookmark) && !in_array($display_bookmark, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'display_bookmark', must be one of '%s'",
                    $display_bookmark,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_bookmark'] = $display_bookmark;

        return $this;
    }

    /**
     * Gets user_bookmark
     *
     * @return string|null
     */
    public function getUserBookmark()
    {
        return $this->container['user_bookmark'];
    }

    /**
     * Sets user_bookmark
     *
     * @param string|null $user_bookmark Enable to allow web portal users to create their own bookmarks.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setUserBookmark($user_bookmark)
    {
        $allowedValues = $this->getUserBookmarkAllowableValues();
        if (!is_null($user_bookmark) && !in_array($user_bookmark, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_bookmark', must be one of '%s'",
                    $user_bookmark,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_bookmark'] = $user_bookmark;

        return $this;
    }

    /**
     * Gets allow_user_access
     *
     * @return string|null
     */
    public function getAllowUserAccess()
    {
        return $this->container['allow_user_access'];
    }

    /**
     * Sets allow_user_access
     *
     * @param string|null $allow_user_access Allow user access to SSL-VPN applications.    web:HTTP/HTTPS access.    ftp:FTP access.    smb:SMB/CIFS access.    sftp:SFTP access.    telnet:TELNET access.    ssh:SSH access.    vnc:VNC access.    rdp:RDP access.    ping:PING access.    citrix:CITRIX access.    portforward:Port Forward access.
     *
     * @return self
     */
    public function setAllowUserAccess($allow_user_access)
    {
        $allowedValues = $this->getAllowUserAccessAllowableValues();
        if (!is_null($allow_user_access) && !in_array($allow_user_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_user_access', must be one of '%s'",
                    $allow_user_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_user_access'] = $allow_user_access;

        return $this;
    }

    /**
     * Gets user_group_bookmark
     *
     * @return string|null
     */
    public function getUserGroupBookmark()
    {
        return $this->container['user_group_bookmark'];
    }

    /**
     * Sets user_group_bookmark
     *
     * @param string|null $user_group_bookmark Enable to allow web portal users to create bookmarks for all users in the same user group.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setUserGroupBookmark($user_group_bookmark)
    {
        $allowedValues = $this->getUserGroupBookmarkAllowableValues();
        if (!is_null($user_group_bookmark) && !in_array($user_group_bookmark, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_group_bookmark', must be one of '%s'",
                    $user_group_bookmark,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_group_bookmark'] = $user_group_bookmark;

        return $this;
    }

    /**
     * Gets bookmark_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameBookmarkGroup[]|null
     */
    public function getBookmarkGroup()
    {
        return $this->container['bookmark_group'];
    }

    /**
     * Sets bookmark_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameBookmarkGroup[]|null $bookmark_group Portal bookmark group.
     *
     * @return self
     */
    public function setBookmarkGroup($bookmark_group)
    {

        if (!is_null($bookmark_group) && (count($bookmark_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $bookmark_group when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['bookmark_group'] = $bookmark_group;

        return $this;
    }

    /**
     * Gets display_connection_tools
     *
     * @return string|null
     */
    public function getDisplayConnectionTools()
    {
        return $this->container['display_connection_tools'];
    }

    /**
     * Sets display_connection_tools
     *
     * @param string|null $display_connection_tools Enable to display the web portal connection tools widget.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDisplayConnectionTools($display_connection_tools)
    {
        $allowedValues = $this->getDisplayConnectionToolsAllowableValues();
        if (!is_null($display_connection_tools) && !in_array($display_connection_tools, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'display_connection_tools', must be one of '%s'",
                    $display_connection_tools,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_connection_tools'] = $display_connection_tools;

        return $this;
    }

    /**
     * Gets display_history
     *
     * @return string|null
     */
    public function getDisplayHistory()
    {
        return $this->container['display_history'];
    }

    /**
     * Sets display_history
     *
     * @param string|null $display_history Enable to display the web portal user login history widget.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDisplayHistory($display_history)
    {
        $allowedValues = $this->getDisplayHistoryAllowableValues();
        if (!is_null($display_history) && !in_array($display_history, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'display_history', must be one of '%s'",
                    $display_history,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_history'] = $display_history;

        return $this;
    }

    /**
     * Gets display_status
     *
     * @return string|null
     */
    public function getDisplayStatus()
    {
        return $this->container['display_status'];
    }

    /**
     * Sets display_status
     *
     * @param string|null $display_status Enable to display the web portal status widget.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDisplayStatus($display_status)
    {
        $allowedValues = $this->getDisplayStatusAllowableValues();
        if (!is_null($display_status) && !in_array($display_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'display_status', must be one of '%s'",
                    $display_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_status'] = $display_status;

        return $this;
    }

    /**
     * Gets heading
     *
     * @return string|null
     */
    public function getHeading()
    {
        return $this->container['heading'];
    }

    /**
     * Sets heading
     *
     * @param string|null $heading Web portal heading message.
     *
     * @return self
     */
    public function setHeading($heading)
    {
        if (!is_null($heading) && (mb_strlen($heading) > 31)) {
            throw new \InvalidArgumentException('invalid length for $heading when calling InlineObject488., must be smaller than or equal to 31.');
        }

        $this->container['heading'] = $heading;

        return $this;
    }

    /**
     * Gets redir_url
     *
     * @return string|null
     */
    public function getRedirUrl()
    {
        return $this->container['redir_url'];
    }

    /**
     * Sets redir_url
     *
     * @param string|null $redir_url Client login redirect URL.
     *
     * @return self
     */
    public function setRedirUrl($redir_url)
    {
        if (!is_null($redir_url) && (mb_strlen($redir_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $redir_url when calling InlineObject488., must be smaller than or equal to 255.');
        }

        $this->container['redir_url'] = $redir_url;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme Web portal color scheme.    blue:Light blue theme.    green:Green theme.    neutrino:Neutrino theme.    melongene:Melongene theme (eggplant color).    mariner:Mariner theme (dark blue color).
     *
     * @return self
     */
    public function setTheme($theme)
    {
        $allowedValues = $this->getThemeAllowableValues();
        if (!is_null($theme) && !in_array($theme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'theme', must be one of '%s'",
                    $theme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets custom_lang
     *
     * @return string|null
     */
    public function getCustomLang()
    {
        return $this->container['custom_lang'];
    }

    /**
     * Sets custom_lang
     *
     * @param string|null $custom_lang Change the web portal display language. Overrides config system global set language. You can use config system custom-language and execute system custom-language to add custom language files.
     *
     * @return self
     */
    public function setCustomLang($custom_lang)
    {
        if (!is_null($custom_lang) && (mb_strlen($custom_lang) > 35)) {
            throw new \InvalidArgumentException('invalid length for $custom_lang when calling InlineObject488., must be smaller than or equal to 35.');
        }

        $this->container['custom_lang'] = $custom_lang;

        return $this;
    }

    /**
     * Gets smb_ntlmv1_auth
     *
     * @return string|null
     */
    public function getSmbNtlmv1Auth()
    {
        return $this->container['smb_ntlmv1_auth'];
    }

    /**
     * Sets smb_ntlmv1_auth
     *
     * @param string|null $smb_ntlmv1_auth Enable support of NTLMv1 for Samba authentication.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSmbNtlmv1Auth($smb_ntlmv1_auth)
    {
        $allowedValues = $this->getSmbNtlmv1AuthAllowableValues();
        if (!is_null($smb_ntlmv1_auth) && !in_array($smb_ntlmv1_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smb_ntlmv1_auth', must be one of '%s'",
                    $smb_ntlmv1_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smb_ntlmv1_auth'] = $smb_ntlmv1_auth;

        return $this;
    }

    /**
     * Gets smbv1
     *
     * @return string|null
     */
    public function getSmbv1()
    {
        return $this->container['smbv1'];
    }

    /**
     * Sets smbv1
     *
     * @param string|null $smbv1 smbv1    enable:enable    disable:disable
     *
     * @return self
     */
    public function setSmbv1($smbv1)
    {
        $allowedValues = $this->getSmbv1AllowableValues();
        if (!is_null($smbv1) && !in_array($smbv1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smbv1', must be one of '%s'",
                    $smbv1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smbv1'] = $smbv1;

        return $this;
    }

    /**
     * Gets smb_min_version
     *
     * @return string|null
     */
    public function getSmbMinVersion()
    {
        return $this->container['smb_min_version'];
    }

    /**
     * Sets smb_min_version
     *
     * @param string|null $smb_min_version SMB minimum client protocol version.    smbv1:SMB version 1.    smbv2:SMB version 2.    smbv3:SMB version 3.
     *
     * @return self
     */
    public function setSmbMinVersion($smb_min_version)
    {
        $allowedValues = $this->getSmbMinVersionAllowableValues();
        if (!is_null($smb_min_version) && !in_array($smb_min_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smb_min_version', must be one of '%s'",
                    $smb_min_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smb_min_version'] = $smb_min_version;

        return $this;
    }

    /**
     * Gets smb_max_version
     *
     * @return string|null
     */
    public function getSmbMaxVersion()
    {
        return $this->container['smb_max_version'];
    }

    /**
     * Sets smb_max_version
     *
     * @param string|null $smb_max_version SMB maximum client protocol version.    smbv1:SMB version 1.    smbv2:SMB version 2.    smbv3:SMB version 3.
     *
     * @return self
     */
    public function setSmbMaxVersion($smb_max_version)
    {
        $allowedValues = $this->getSmbMaxVersionAllowableValues();
        if (!is_null($smb_max_version) && !in_array($smb_max_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smb_max_version', must be one of '%s'",
                    $smb_max_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smb_max_version'] = $smb_max_version;

        return $this;
    }

    /**
     * Gets use_sdwan
     *
     * @return string|null
     */
    public function getUseSdwan()
    {
        return $this->container['use_sdwan'];
    }

    /**
     * Sets use_sdwan
     *
     * @param string|null $use_sdwan Use SD-WAN rules to get output interface.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setUseSdwan($use_sdwan)
    {
        $allowedValues = $this->getUseSdwanAllowableValues();
        if (!is_null($use_sdwan) && !in_array($use_sdwan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_sdwan', must be one of '%s'",
                    $use_sdwan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_sdwan'] = $use_sdwan;

        return $this;
    }

    /**
     * Gets host_check
     *
     * @return string|null
     */
    public function getHostCheck()
    {
        return $this->container['host_check'];
    }

    /**
     * Sets host_check
     *
     * @param string|null $host_check Type of host checking performed on endpoints.    none:No host checking.    av:AntiVirus software recognized by the Windows Security Center.    fw:Firewall software recognized by the Windows Security Center.    av-fw:AntiVirus and firewall software recognized by the Windows Security Center.    custom:Custom.
     *
     * @return self
     */
    public function setHostCheck($host_check)
    {
        $allowedValues = $this->getHostCheckAllowableValues();
        if (!is_null($host_check) && !in_array($host_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'host_check', must be one of '%s'",
                    $host_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['host_check'] = $host_check;

        return $this;
    }

    /**
     * Gets host_check_interval
     *
     * @return int|null
     */
    public function getHostCheckInterval()
    {
        return $this->container['host_check_interval'];
    }

    /**
     * Sets host_check_interval
     *
     * @param int|null $host_check_interval Periodic host check interval. Value of 0 means disabled and host checking only happens when the endpoint connects.
     *
     * @return self
     */
    public function setHostCheckInterval($host_check_interval)
    {

        if (!is_null($host_check_interval) && ($host_check_interval > 259200)) {
            throw new \InvalidArgumentException('invalid value for $host_check_interval when calling InlineObject488., must be smaller than or equal to 259200.');
        }
        if (!is_null($host_check_interval) && ($host_check_interval < 120)) {
            throw new \InvalidArgumentException('invalid value for $host_check_interval when calling InlineObject488., must be bigger than or equal to 120.');
        }

        $this->container['host_check_interval'] = $host_check_interval;

        return $this;
    }

    /**
     * Gets host_check_policy
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameHostCheckPolicy[]|null
     */
    public function getHostCheckPolicy()
    {
        return $this->container['host_check_policy'];
    }

    /**
     * Sets host_check_policy
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameHostCheckPolicy[]|null $host_check_policy One or more policies to require the endpoint to have specific security software.
     *
     * @return self
     */
    public function setHostCheckPolicy($host_check_policy)
    {

        if (!is_null($host_check_policy) && (count($host_check_policy) > 0)) {
            throw new \InvalidArgumentException('invalid value for $host_check_policy when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['host_check_policy'] = $host_check_policy;

        return $this;
    }

    /**
     * Gets limit_user_logins
     *
     * @return string|null
     */
    public function getLimitUserLogins()
    {
        return $this->container['limit_user_logins'];
    }

    /**
     * Sets limit_user_logins
     *
     * @param string|null $limit_user_logins Enable to limit each user to one SSL-VPN session at a time.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLimitUserLogins($limit_user_logins)
    {
        $allowedValues = $this->getLimitUserLoginsAllowableValues();
        if (!is_null($limit_user_logins) && !in_array($limit_user_logins, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'limit_user_logins', must be one of '%s'",
                    $limit_user_logins,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['limit_user_logins'] = $limit_user_logins;

        return $this;
    }

    /**
     * Gets mac_addr_check
     *
     * @return string|null
     */
    public function getMacAddrCheck()
    {
        return $this->container['mac_addr_check'];
    }

    /**
     * Sets mac_addr_check
     *
     * @param string|null $mac_addr_check Enable/disable MAC address host checking.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMacAddrCheck($mac_addr_check)
    {
        $allowedValues = $this->getMacAddrCheckAllowableValues();
        if (!is_null($mac_addr_check) && !in_array($mac_addr_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_addr_check', must be one of '%s'",
                    $mac_addr_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_addr_check'] = $mac_addr_check;

        return $this;
    }

    /**
     * Gets mac_addr_action
     *
     * @return string|null
     */
    public function getMacAddrAction()
    {
        return $this->container['mac_addr_action'];
    }

    /**
     * Sets mac_addr_action
     *
     * @param string|null $mac_addr_action Client MAC address action.    allow:Allow connection when client MAC address is matched.    deny:Deny connection when client MAC address is matched.
     *
     * @return self
     */
    public function setMacAddrAction($mac_addr_action)
    {
        $allowedValues = $this->getMacAddrActionAllowableValues();
        if (!is_null($mac_addr_action) && !in_array($mac_addr_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_addr_action', must be one of '%s'",
                    $mac_addr_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_addr_action'] = $mac_addr_action;

        return $this;
    }

    /**
     * Gets mac_addr_check_rule
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameMacAddrCheckRule[]|null
     */
    public function getMacAddrCheckRule()
    {
        return $this->container['mac_addr_check_rule'];
    }

    /**
     * Sets mac_addr_check_rule
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameMacAddrCheckRule[]|null $mac_addr_check_rule Client MAC address check rule.
     *
     * @return self
     */
    public function setMacAddrCheckRule($mac_addr_check_rule)
    {

        if (!is_null($mac_addr_check_rule) && (count($mac_addr_check_rule) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mac_addr_check_rule when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['mac_addr_check_rule'] = $mac_addr_check_rule;

        return $this;
    }

    /**
     * Gets os_check
     *
     * @return string|null
     */
    public function getOsCheck()
    {
        return $this->container['os_check'];
    }

    /**
     * Sets os_check
     *
     * @param string|null $os_check Enable to let the FortiGate decide action based on client OS.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setOsCheck($os_check)
    {
        $allowedValues = $this->getOsCheckAllowableValues();
        if (!is_null($os_check) && !in_array($os_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'os_check', must be one of '%s'",
                    $os_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['os_check'] = $os_check;

        return $this;
    }

    /**
     * Gets os_check_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameOsCheckList[]|null
     */
    public function getOsCheckList()
    {
        return $this->container['os_check_list'];
    }

    /**
     * Sets os_check_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameOsCheckList[]|null $os_check_list SSL VPN OS checks.
     *
     * @return self
     */
    public function setOsCheckList($os_check_list)
    {

        if (!is_null($os_check_list) && (count($os_check_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $os_check_list when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['os_check_list'] = $os_check_list;

        return $this;
    }

    /**
     * Gets forticlient_download
     *
     * @return string|null
     */
    public function getForticlientDownload()
    {
        return $this->container['forticlient_download'];
    }

    /**
     * Sets forticlient_download
     *
     * @param string|null $forticlient_download Enable/disable download option for FortiClient.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setForticlientDownload($forticlient_download)
    {
        $allowedValues = $this->getForticlientDownloadAllowableValues();
        if (!is_null($forticlient_download) && !in_array($forticlient_download, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forticlient_download', must be one of '%s'",
                    $forticlient_download,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forticlient_download'] = $forticlient_download;

        return $this;
    }

    /**
     * Gets forticlient_download_method
     *
     * @return string|null
     */
    public function getForticlientDownloadMethod()
    {
        return $this->container['forticlient_download_method'];
    }

    /**
     * Sets forticlient_download_method
     *
     * @param string|null $forticlient_download_method FortiClient download method.    direct:Download via direct link.    ssl-vpn:Download via SSL-VPN.
     *
     * @return self
     */
    public function setForticlientDownloadMethod($forticlient_download_method)
    {
        $allowedValues = $this->getForticlientDownloadMethodAllowableValues();
        if (!is_null($forticlient_download_method) && !in_array($forticlient_download_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forticlient_download_method', must be one of '%s'",
                    $forticlient_download_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forticlient_download_method'] = $forticlient_download_method;

        return $this;
    }

    /**
     * Gets customize_forticlient_download_url
     *
     * @return string|null
     */
    public function getCustomizeForticlientDownloadUrl()
    {
        return $this->container['customize_forticlient_download_url'];
    }

    /**
     * Sets customize_forticlient_download_url
     *
     * @param string|null $customize_forticlient_download_url Enable support of customized download URL for FortiClient.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCustomizeForticlientDownloadUrl($customize_forticlient_download_url)
    {
        $allowedValues = $this->getCustomizeForticlientDownloadUrlAllowableValues();
        if (!is_null($customize_forticlient_download_url) && !in_array($customize_forticlient_download_url, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customize_forticlient_download_url', must be one of '%s'",
                    $customize_forticlient_download_url,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customize_forticlient_download_url'] = $customize_forticlient_download_url;

        return $this;
    }

    /**
     * Gets windows_forticlient_download_url
     *
     * @return string|null
     */
    public function getWindowsForticlientDownloadUrl()
    {
        return $this->container['windows_forticlient_download_url'];
    }

    /**
     * Sets windows_forticlient_download_url
     *
     * @param string|null $windows_forticlient_download_url Download URL for Windows FortiClient.
     *
     * @return self
     */
    public function setWindowsForticlientDownloadUrl($windows_forticlient_download_url)
    {
        if (!is_null($windows_forticlient_download_url) && (mb_strlen($windows_forticlient_download_url) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $windows_forticlient_download_url when calling InlineObject488., must be smaller than or equal to 1023.');
        }

        $this->container['windows_forticlient_download_url'] = $windows_forticlient_download_url;

        return $this;
    }

    /**
     * Gets macos_forticlient_download_url
     *
     * @return string|null
     */
    public function getMacosForticlientDownloadUrl()
    {
        return $this->container['macos_forticlient_download_url'];
    }

    /**
     * Sets macos_forticlient_download_url
     *
     * @param string|null $macos_forticlient_download_url Download URL for Mac FortiClient.
     *
     * @return self
     */
    public function setMacosForticlientDownloadUrl($macos_forticlient_download_url)
    {
        if (!is_null($macos_forticlient_download_url) && (mb_strlen($macos_forticlient_download_url) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $macos_forticlient_download_url when calling InlineObject488., must be smaller than or equal to 1023.');
        }

        $this->container['macos_forticlient_download_url'] = $macos_forticlient_download_url;

        return $this;
    }

    /**
     * Gets skip_check_for_unsupported_os
     *
     * @return string|null
     */
    public function getSkipCheckForUnsupportedOs()
    {
        return $this->container['skip_check_for_unsupported_os'];
    }

    /**
     * Sets skip_check_for_unsupported_os
     *
     * @param string|null $skip_check_for_unsupported_os Enable to skip host check if client OS does not support it.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSkipCheckForUnsupportedOs($skip_check_for_unsupported_os)
    {
        $allowedValues = $this->getSkipCheckForUnsupportedOsAllowableValues();
        if (!is_null($skip_check_for_unsupported_os) && !in_array($skip_check_for_unsupported_os, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'skip_check_for_unsupported_os', must be one of '%s'",
                    $skip_check_for_unsupported_os,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['skip_check_for_unsupported_os'] = $skip_check_for_unsupported_os;

        return $this;
    }

    /**
     * Gets skip_check_for_browser
     *
     * @return string|null
     */
    public function getSkipCheckForBrowser()
    {
        return $this->container['skip_check_for_browser'];
    }

    /**
     * Sets skip_check_for_browser
     *
     * @param string|null $skip_check_for_browser Enable to skip host check for browser support.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSkipCheckForBrowser($skip_check_for_browser)
    {
        $allowedValues = $this->getSkipCheckForBrowserAllowableValues();
        if (!is_null($skip_check_for_browser) && !in_array($skip_check_for_browser, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'skip_check_for_browser', must be one of '%s'",
                    $skip_check_for_browser,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['skip_check_for_browser'] = $skip_check_for_browser;

        return $this;
    }

    /**
     * Gets hide_sso_credential
     *
     * @return string|null
     */
    public function getHideSsoCredential()
    {
        return $this->container['hide_sso_credential'];
    }

    /**
     * Sets hide_sso_credential
     *
     * @param string|null $hide_sso_credential Enable to prevent SSO credential being sent to client.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setHideSsoCredential($hide_sso_credential)
    {
        $allowedValues = $this->getHideSsoCredentialAllowableValues();
        if (!is_null($hide_sso_credential) && !in_array($hide_sso_credential, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hide_sso_credential', must be one of '%s'",
                    $hide_sso_credential,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hide_sso_credential'] = $hide_sso_credential;

        return $this;
    }

    /**
     * Gets split_dns
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameSplitDns[]|null
     */
    public function getSplitDns()
    {
        return $this->container['split_dns'];
    }

    /**
     * Sets split_dns
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnSslWebPortalNameSplitDns[]|null $split_dns Split DNS for SSL VPN.
     *
     * @return self
     */
    public function setSplitDns($split_dns)
    {

        if (!is_null($split_dns) && (count($split_dns) > 0)) {
            throw new \InvalidArgumentException('invalid value for $split_dns when calling InlineObject488., number of items must be less than or equal to 0.');
        }
        $this->container['split_dns'] = $split_dns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


