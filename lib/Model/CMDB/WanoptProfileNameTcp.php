<?php
/**
 * WanoptProfileNameTcp
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WanoptProfileNameTcp Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WanoptProfileNameTcp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wanopt_profile__name__tcp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'secure_tunnel' => 'string',
        'byte_caching' => 'string',
        'byte_caching_opt' => 'string',
        'tunnel_sharing' => 'string',
        'log_traffic' => 'string',
        'port' => 'string',
        'ssl' => 'string',
        'ssl_port' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'secure_tunnel' => null,
        'byte_caching' => null,
        'byte_caching_opt' => null,
        'tunnel_sharing' => null,
        'log_traffic' => null,
        'port' => null,
        'ssl' => null,
        'ssl_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'secure_tunnel' => 'secure-tunnel',
        'byte_caching' => 'byte-caching',
        'byte_caching_opt' => 'byte-caching-opt',
        'tunnel_sharing' => 'tunnel-sharing',
        'log_traffic' => 'log-traffic',
        'port' => 'port',
        'ssl' => 'ssl',
        'ssl_port' => 'ssl-port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'secure_tunnel' => 'setSecureTunnel',
        'byte_caching' => 'setByteCaching',
        'byte_caching_opt' => 'setByteCachingOpt',
        'tunnel_sharing' => 'setTunnelSharing',
        'log_traffic' => 'setLogTraffic',
        'port' => 'setPort',
        'ssl' => 'setSsl',
        'ssl_port' => 'setSslPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'secure_tunnel' => 'getSecureTunnel',
        'byte_caching' => 'getByteCaching',
        'byte_caching_opt' => 'getByteCachingOpt',
        'tunnel_sharing' => 'getTunnelSharing',
        'log_traffic' => 'getLogTraffic',
        'port' => 'getPort',
        'ssl' => 'getSsl',
        'ssl_port' => 'getSslPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SECURE_TUNNEL_ENABLE = 'enable';
    const SECURE_TUNNEL_DISABLE = 'disable';
    const BYTE_CACHING_ENABLE = 'enable';
    const BYTE_CACHING_DISABLE = 'disable';
    const BYTE_CACHING_OPT_ONLY = 'mem-only';
    const BYTE_CACHING_OPT_DISK = 'mem-disk';
    const TUNNEL_SHARING_SHARED = 'shared';
    const TUNNEL_SHARING_EXPRESS_SHARED = 'express-shared';
    const TUNNEL_SHARING__PRIVATE = 'private';
    const LOG_TRAFFIC_ENABLE = 'enable';
    const LOG_TRAFFIC_DISABLE = 'disable';
    const SSL_ENABLE = 'enable';
    const SSL_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecureTunnelAllowableValues()
    {
        return [
            self::SECURE_TUNNEL_ENABLE,
            self::SECURE_TUNNEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getByteCachingAllowableValues()
    {
        return [
            self::BYTE_CACHING_ENABLE,
            self::BYTE_CACHING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getByteCachingOptAllowableValues()
    {
        return [
            self::BYTE_CACHING_OPT_ONLY,
            self::BYTE_CACHING_OPT_DISK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelSharingAllowableValues()
    {
        return [
            self::TUNNEL_SHARING_SHARED,
            self::TUNNEL_SHARING_EXPRESS_SHARED,
            self::TUNNEL_SHARING__PRIVATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogTrafficAllowableValues()
    {
        return [
            self::LOG_TRAFFIC_ENABLE,
            self::LOG_TRAFFIC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_ENABLE,
            self::SSL_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['secure_tunnel'] = $data['secure_tunnel'] ?? null;
        $this->container['byte_caching'] = $data['byte_caching'] ?? null;
        $this->container['byte_caching_opt'] = $data['byte_caching_opt'] ?? null;
        $this->container['tunnel_sharing'] = $data['tunnel_sharing'] ?? null;
        $this->container['log_traffic'] = $data['log_traffic'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['ssl'] = $data['ssl'] ?? null;
        $this->container['ssl_port'] = $data['ssl_port'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecureTunnelAllowableValues();
        if (!is_null($this->container['secure_tunnel']) && !in_array($this->container['secure_tunnel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secure_tunnel', must be one of '%s'",
                $this->container['secure_tunnel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getByteCachingAllowableValues();
        if (!is_null($this->container['byte_caching']) && !in_array($this->container['byte_caching'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'byte_caching', must be one of '%s'",
                $this->container['byte_caching'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getByteCachingOptAllowableValues();
        if (!is_null($this->container['byte_caching_opt']) && !in_array($this->container['byte_caching_opt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'byte_caching_opt', must be one of '%s'",
                $this->container['byte_caching_opt'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTunnelSharingAllowableValues();
        if (!is_null($this->container['tunnel_sharing']) && !in_array($this->container['tunnel_sharing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_sharing', must be one of '%s'",
                $this->container['tunnel_sharing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogTrafficAllowableValues();
        if (!is_null($this->container['log_traffic']) && !in_array($this->container['log_traffic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_traffic', must be one of '%s'",
                $this->container['log_traffic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl', must be one of '%s'",
                $this->container['ssl'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable WAN Optimization.    enable:Enable WAN Optimization.    disable:Disable WAN Optimization.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets secure_tunnel
     *
     * @return string|null
     */
    public function getSecureTunnel()
    {
        return $this->container['secure_tunnel'];
    }

    /**
     * Sets secure_tunnel
     *
     * @param string|null $secure_tunnel Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810).    enable:Enable SSL-secured tunnelling.    disable:Disable SSL-secured tunnelling.
     *
     * @return self
     */
    public function setSecureTunnel($secure_tunnel)
    {
        $allowedValues = $this->getSecureTunnelAllowableValues();
        if (!is_null($secure_tunnel) && !in_array($secure_tunnel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secure_tunnel', must be one of '%s'",
                    $secure_tunnel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secure_tunnel'] = $secure_tunnel;

        return $this;
    }

    /**
     * Gets byte_caching
     *
     * @return string|null
     */
    public function getByteCaching()
    {
        return $this->container['byte_caching'];
    }

    /**
     * Sets byte_caching
     *
     * @param string|null $byte_caching Enable/disable byte-caching. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache.    enable:Enable byte-caching.    disable:Disable byte-caching.
     *
     * @return self
     */
    public function setByteCaching($byte_caching)
    {
        $allowedValues = $this->getByteCachingAllowableValues();
        if (!is_null($byte_caching) && !in_array($byte_caching, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'byte_caching', must be one of '%s'",
                    $byte_caching,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['byte_caching'] = $byte_caching;

        return $this;
    }

    /**
     * Gets byte_caching_opt
     *
     * @return string|null
     */
    public function getByteCachingOpt()
    {
        return $this->container['byte_caching_opt'];
    }

    /**
     * Sets byte_caching_opt
     *
     * @param string|null $byte_caching_opt Select whether TCP byte-caching uses system memory only or both memory and disk space.    mem-only:Byte caching with memory only.    mem-disk:Byte caching with memory and disk.
     *
     * @return self
     */
    public function setByteCachingOpt($byte_caching_opt)
    {
        $allowedValues = $this->getByteCachingOptAllowableValues();
        if (!is_null($byte_caching_opt) && !in_array($byte_caching_opt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'byte_caching_opt', must be one of '%s'",
                    $byte_caching_opt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['byte_caching_opt'] = $byte_caching_opt;

        return $this;
    }

    /**
     * Gets tunnel_sharing
     *
     * @return string|null
     */
    public function getTunnelSharing()
    {
        return $this->container['tunnel_sharing'];
    }

    /**
     * Sets tunnel_sharing
     *
     * @param string|null $tunnel_sharing Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols.    shared:For profiles that accept nonaggressive and non-interactive protocols.    express-shared:For profiles that accept interactive protocols such as Telnet.    private:For profiles that accept aggressive protocols such as HTTP and FTP so that these aggressive protocols do not share tunnels with less-aggressive protocols.
     *
     * @return self
     */
    public function setTunnelSharing($tunnel_sharing)
    {
        $allowedValues = $this->getTunnelSharingAllowableValues();
        if (!is_null($tunnel_sharing) && !in_array($tunnel_sharing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_sharing', must be one of '%s'",
                    $tunnel_sharing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_sharing'] = $tunnel_sharing;

        return $this;
    }

    /**
     * Gets log_traffic
     *
     * @return string|null
     */
    public function getLogTraffic()
    {
        return $this->container['log_traffic'];
    }

    /**
     * Sets log_traffic
     *
     * @param string|null $log_traffic Enable/disable logging.    enable:Enable logging.    disable:Disable logging.
     *
     * @return self
     */
    public function setLogTraffic($log_traffic)
    {
        $allowedValues = $this->getLogTrafficAllowableValues();
        if (!is_null($log_traffic) && !in_array($log_traffic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_traffic', must be one of '%s'",
                    $log_traffic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_traffic'] = $log_traffic;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port Port numbers or port number ranges for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string|null $ssl Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel.    enable:Enable SSL/TLS offloading.    disable:Disable SSL/TLS offloading.
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl', must be one of '%s'",
                    $ssl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ssl_port
     *
     * @return string|null
     */
    public function getSslPort()
    {
        return $this->container['ssl_port'];
    }

    /**
     * Sets ssl_port
     *
     * @param string|null $ssl_port Port numbers or port number ranges on which to expect HTTPS traffic for SSL/TLS offloading.
     *
     * @return self
     */
    public function setSslPort($ssl_port)
    {
        $this->container['ssl_port'] = $ssl_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


