<?php
/**
 * InlineObject594
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject594 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject594 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_594';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inter_controller_mode' => 'string',
        'inter_controller_key' => 'string',
        'inter_controller_pri' => 'string',
        'fast_failover_max' => 'int',
        'fast_failover_wait' => 'int',
        'inter_controller_peer' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerInterControllerInterControllerPeer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inter_controller_mode' => null,
        'inter_controller_key' => 'password',
        'inter_controller_pri' => null,
        'fast_failover_max' => null,
        'fast_failover_wait' => null,
        'inter_controller_peer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inter_controller_mode' => 'inter-controller-mode',
        'inter_controller_key' => 'inter-controller-key',
        'inter_controller_pri' => 'inter-controller-pri',
        'fast_failover_max' => 'fast-failover-max',
        'fast_failover_wait' => 'fast-failover-wait',
        'inter_controller_peer' => 'inter-controller-peer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inter_controller_mode' => 'setInterControllerMode',
        'inter_controller_key' => 'setInterControllerKey',
        'inter_controller_pri' => 'setInterControllerPri',
        'fast_failover_max' => 'setFastFailoverMax',
        'fast_failover_wait' => 'setFastFailoverWait',
        'inter_controller_peer' => 'setInterControllerPeer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inter_controller_mode' => 'getInterControllerMode',
        'inter_controller_key' => 'getInterControllerKey',
        'inter_controller_pri' => 'getInterControllerPri',
        'fast_failover_max' => 'getFastFailoverMax',
        'fast_failover_wait' => 'getFastFailoverWait',
        'inter_controller_peer' => 'getInterControllerPeer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INTER_CONTROLLER_MODE_DISABLE = 'disable';
    const INTER_CONTROLLER_MODE_L2_ROAMING = 'l2-roaming';
    const INTER_CONTROLLER_MODE__11 = '1+1';
    const INTER_CONTROLLER_PRI_PRIMARY = 'primary';
    const INTER_CONTROLLER_PRI_SECONDARY = 'secondary';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterControllerModeAllowableValues()
    {
        return [
            self::INTER_CONTROLLER_MODE_DISABLE,
            self::INTER_CONTROLLER_MODE_L2_ROAMING,
            self::INTER_CONTROLLER_MODE__11,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterControllerPriAllowableValues()
    {
        return [
            self::INTER_CONTROLLER_PRI_PRIMARY,
            self::INTER_CONTROLLER_PRI_SECONDARY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inter_controller_mode'] = $data['inter_controller_mode'] ?? null;
        $this->container['inter_controller_key'] = $data['inter_controller_key'] ?? null;
        $this->container['inter_controller_pri'] = $data['inter_controller_pri'] ?? null;
        $this->container['fast_failover_max'] = $data['fast_failover_max'] ?? null;
        $this->container['fast_failover_wait'] = $data['fast_failover_wait'] ?? null;
        $this->container['inter_controller_peer'] = $data['inter_controller_peer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInterControllerModeAllowableValues();
        if (!is_null($this->container['inter_controller_mode']) && !in_array($this->container['inter_controller_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inter_controller_mode', must be one of '%s'",
                $this->container['inter_controller_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterControllerPriAllowableValues();
        if (!is_null($this->container['inter_controller_pri']) && !in_array($this->container['inter_controller_pri'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inter_controller_pri', must be one of '%s'",
                $this->container['inter_controller_pri'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fast_failover_max']) && ($this->container['fast_failover_max'] > 64)) {
            $invalidProperties[] = "invalid value for 'fast_failover_max', must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['fast_failover_max']) && ($this->container['fast_failover_max'] < 3)) {
            $invalidProperties[] = "invalid value for 'fast_failover_max', must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['fast_failover_wait']) && ($this->container['fast_failover_wait'] > 86400)) {
            $invalidProperties[] = "invalid value for 'fast_failover_wait', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['fast_failover_wait']) && ($this->container['fast_failover_wait'] < 10)) {
            $invalidProperties[] = "invalid value for 'fast_failover_wait', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['inter_controller_peer']) && (count($this->container['inter_controller_peer']) > 0)) {
            $invalidProperties[] = "invalid value for 'inter_controller_peer', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inter_controller_mode
     *
     * @return string|null
     */
    public function getInterControllerMode()
    {
        return $this->container['inter_controller_mode'];
    }

    /**
     * Sets inter_controller_mode
     *
     * @param string|null $inter_controller_mode Configure inter-controller mode (disable, l2-roaming, 1+1, default = disable).    disable:Disable inter-controller mode.    l2-roaming:Enable layer 2 roaming support between inter-controllers.    1+1:Enable 1+1 fast failover mode.
     *
     * @return self
     */
    public function setInterControllerMode($inter_controller_mode)
    {
        $allowedValues = $this->getInterControllerModeAllowableValues();
        if (!is_null($inter_controller_mode) && !in_array($inter_controller_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inter_controller_mode', must be one of '%s'",
                    $inter_controller_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inter_controller_mode'] = $inter_controller_mode;

        return $this;
    }

    /**
     * Gets inter_controller_key
     *
     * @return string|null
     */
    public function getInterControllerKey()
    {
        return $this->container['inter_controller_key'];
    }

    /**
     * Sets inter_controller_key
     *
     * @param string|null $inter_controller_key Secret key for inter-controller communications.
     *
     * @return self
     */
    public function setInterControllerKey($inter_controller_key)
    {
        $this->container['inter_controller_key'] = $inter_controller_key;

        return $this;
    }

    /**
     * Gets inter_controller_pri
     *
     * @return string|null
     */
    public function getInterControllerPri()
    {
        return $this->container['inter_controller_pri'];
    }

    /**
     * Sets inter_controller_pri
     *
     * @param string|null $inter_controller_pri Configure inter-controller's priority (primary or secondary, default = primary).    primary:Primary fast failover mode.    secondary:Secondary fast failover mode.
     *
     * @return self
     */
    public function setInterControllerPri($inter_controller_pri)
    {
        $allowedValues = $this->getInterControllerPriAllowableValues();
        if (!is_null($inter_controller_pri) && !in_array($inter_controller_pri, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inter_controller_pri', must be one of '%s'",
                    $inter_controller_pri,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inter_controller_pri'] = $inter_controller_pri;

        return $this;
    }

    /**
     * Gets fast_failover_max
     *
     * @return int|null
     */
    public function getFastFailoverMax()
    {
        return $this->container['fast_failover_max'];
    }

    /**
     * Sets fast_failover_max
     *
     * @param int|null $fast_failover_max Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64, default = 10).
     *
     * @return self
     */
    public function setFastFailoverMax($fast_failover_max)
    {

        if (!is_null($fast_failover_max) && ($fast_failover_max > 64)) {
            throw new \InvalidArgumentException('invalid value for $fast_failover_max when calling InlineObject594., must be smaller than or equal to 64.');
        }
        if (!is_null($fast_failover_max) && ($fast_failover_max < 3)) {
            throw new \InvalidArgumentException('invalid value for $fast_failover_max when calling InlineObject594., must be bigger than or equal to 3.');
        }

        $this->container['fast_failover_max'] = $fast_failover_max;

        return $this;
    }

    /**
     * Gets fast_failover_wait
     *
     * @return int|null
     */
    public function getFastFailoverWait()
    {
        return $this->container['fast_failover_wait'];
    }

    /**
     * Sets fast_failover_wait
     *
     * @param int|null $fast_failover_wait Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec, default = 10).
     *
     * @return self
     */
    public function setFastFailoverWait($fast_failover_wait)
    {

        if (!is_null($fast_failover_wait) && ($fast_failover_wait > 86400)) {
            throw new \InvalidArgumentException('invalid value for $fast_failover_wait when calling InlineObject594., must be smaller than or equal to 86400.');
        }
        if (!is_null($fast_failover_wait) && ($fast_failover_wait < 10)) {
            throw new \InvalidArgumentException('invalid value for $fast_failover_wait when calling InlineObject594., must be bigger than or equal to 10.');
        }

        $this->container['fast_failover_wait'] = $fast_failover_wait;

        return $this;
    }

    /**
     * Gets inter_controller_peer
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerInterControllerInterControllerPeer[]|null
     */
    public function getInterControllerPeer()
    {
        return $this->container['inter_controller_peer'];
    }

    /**
     * Sets inter_controller_peer
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerInterControllerInterControllerPeer[]|null $inter_controller_peer Fast failover peer wireless controller list.
     *
     * @return self
     */
    public function setInterControllerPeer($inter_controller_peer)
    {

        if (!is_null($inter_controller_peer) && (count($inter_controller_peer) > 0)) {
            throw new \InvalidArgumentException('invalid value for $inter_controller_peer when calling InlineObject594., number of items must be less than or equal to 0.');
        }
        $this->container['inter_controller_peer'] = $inter_controller_peer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


