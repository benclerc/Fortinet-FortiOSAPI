<?php
/**
 * ExtenderControllerExtenderNameAutoSwitch
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ExtenderControllerExtenderNameAutoSwitch Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ExtenderControllerExtenderNameAutoSwitch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_extender_controller_extender__name__auto_switch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disconnect' => 'string',
        'disconnect_threshold' => 'int',
        'disconnect_period' => 'int',
        'signal' => 'string',
        'dataplan' => 'string',
        'switch_back' => 'string',
        'switch_back_time' => 'string',
        'switch_back_timer' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disconnect' => null,
        'disconnect_threshold' => null,
        'disconnect_period' => null,
        'signal' => null,
        'dataplan' => null,
        'switch_back' => null,
        'switch_back_time' => null,
        'switch_back_timer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disconnect' => 'disconnect',
        'disconnect_threshold' => 'disconnect-threshold',
        'disconnect_period' => 'disconnect-period',
        'signal' => 'signal',
        'dataplan' => 'dataplan',
        'switch_back' => 'switch-back',
        'switch_back_time' => 'switch-back-time',
        'switch_back_timer' => 'switch-back-timer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disconnect' => 'setDisconnect',
        'disconnect_threshold' => 'setDisconnectThreshold',
        'disconnect_period' => 'setDisconnectPeriod',
        'signal' => 'setSignal',
        'dataplan' => 'setDataplan',
        'switch_back' => 'setSwitchBack',
        'switch_back_time' => 'setSwitchBackTime',
        'switch_back_timer' => 'setSwitchBackTimer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disconnect' => 'getDisconnect',
        'disconnect_threshold' => 'getDisconnectThreshold',
        'disconnect_period' => 'getDisconnectPeriod',
        'signal' => 'getSignal',
        'dataplan' => 'getDataplan',
        'switch_back' => 'getSwitchBack',
        'switch_back_time' => 'getSwitchBackTime',
        'switch_back_timer' => 'getSwitchBackTimer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISCONNECT_DISABLE = 'disable';
    const DISCONNECT_ENABLE = 'enable';
    const SIGNAL_DISABLE = 'disable';
    const SIGNAL_ENABLE = 'enable';
    const DATAPLAN_DISABLE = 'disable';
    const DATAPLAN_ENABLE = 'enable';
    const SWITCH_BACK_TIME = 'time';
    const SWITCH_BACK_TIMER = 'timer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisconnectAllowableValues()
    {
        return [
            self::DISCONNECT_DISABLE,
            self::DISCONNECT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignalAllowableValues()
    {
        return [
            self::SIGNAL_DISABLE,
            self::SIGNAL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataplanAllowableValues()
    {
        return [
            self::DATAPLAN_DISABLE,
            self::DATAPLAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchBackAllowableValues()
    {
        return [
            self::SWITCH_BACK_TIME,
            self::SWITCH_BACK_TIMER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disconnect'] = $data['disconnect'] ?? null;
        $this->container['disconnect_threshold'] = $data['disconnect_threshold'] ?? null;
        $this->container['disconnect_period'] = $data['disconnect_period'] ?? null;
        $this->container['signal'] = $data['signal'] ?? null;
        $this->container['dataplan'] = $data['dataplan'] ?? null;
        $this->container['switch_back'] = $data['switch_back'] ?? null;
        $this->container['switch_back_time'] = $data['switch_back_time'] ?? null;
        $this->container['switch_back_timer'] = $data['switch_back_timer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDisconnectAllowableValues();
        if (!is_null($this->container['disconnect']) && !in_array($this->container['disconnect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disconnect', must be one of '%s'",
                $this->container['disconnect'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['disconnect_threshold']) && ($this->container['disconnect_threshold'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'disconnect_threshold', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['disconnect_threshold']) && ($this->container['disconnect_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'disconnect_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['disconnect_period']) && ($this->container['disconnect_period'] > 18000)) {
            $invalidProperties[] = "invalid value for 'disconnect_period', must be smaller than or equal to 18000.";
        }

        if (!is_null($this->container['disconnect_period']) && ($this->container['disconnect_period'] < 600)) {
            $invalidProperties[] = "invalid value for 'disconnect_period', must be bigger than or equal to 600.";
        }

        $allowedValues = $this->getSignalAllowableValues();
        if (!is_null($this->container['signal']) && !in_array($this->container['signal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'signal', must be one of '%s'",
                $this->container['signal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataplanAllowableValues();
        if (!is_null($this->container['dataplan']) && !in_array($this->container['dataplan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dataplan', must be one of '%s'",
                $this->container['dataplan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchBackAllowableValues();
        if (!is_null($this->container['switch_back']) && !in_array($this->container['switch_back'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_back', must be one of '%s'",
                $this->container['switch_back'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_back_time']) && (mb_strlen($this->container['switch_back_time']) > 31)) {
            $invalidProperties[] = "invalid value for 'switch_back_time', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['switch_back_timer']) && ($this->container['switch_back_timer'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'switch_back_timer', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['switch_back_timer']) && ($this->container['switch_back_timer'] < 3600)) {
            $invalidProperties[] = "invalid value for 'switch_back_timer', must be bigger than or equal to 3600.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disconnect
     *
     * @return string|null
     */
    public function getDisconnect()
    {
        return $this->container['disconnect'];
    }

    /**
     * Sets disconnect
     *
     * @param string|null $disconnect Auto switch by disconnect.    disable:Disable switching of SIM card based on cellular disconnections.    enable:Enable switching of SIM card based on cellular disconnections.
     *
     * @return self
     */
    public function setDisconnect($disconnect)
    {
        $allowedValues = $this->getDisconnectAllowableValues();
        if (!is_null($disconnect) && !in_array($disconnect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disconnect', must be one of '%s'",
                    $disconnect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disconnect'] = $disconnect;

        return $this;
    }

    /**
     * Gets disconnect_threshold
     *
     * @return int|null
     */
    public function getDisconnectThreshold()
    {
        return $this->container['disconnect_threshold'];
    }

    /**
     * Sets disconnect_threshold
     *
     * @param int|null $disconnect_threshold Automatically switch based on disconnect threshold.
     *
     * @return self
     */
    public function setDisconnectThreshold($disconnect_threshold)
    {

        if (!is_null($disconnect_threshold) && ($disconnect_threshold > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_threshold when calling ExtenderControllerExtenderNameAutoSwitch., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($disconnect_threshold) && ($disconnect_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_threshold when calling ExtenderControllerExtenderNameAutoSwitch., must be bigger than or equal to 0.');
        }

        $this->container['disconnect_threshold'] = $disconnect_threshold;

        return $this;
    }

    /**
     * Gets disconnect_period
     *
     * @return int|null
     */
    public function getDisconnectPeriod()
    {
        return $this->container['disconnect_period'];
    }

    /**
     * Sets disconnect_period
     *
     * @param int|null $disconnect_period Automatically switch based on disconnect period.
     *
     * @return self
     */
    public function setDisconnectPeriod($disconnect_period)
    {

        if (!is_null($disconnect_period) && ($disconnect_period > 18000)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_period when calling ExtenderControllerExtenderNameAutoSwitch., must be smaller than or equal to 18000.');
        }
        if (!is_null($disconnect_period) && ($disconnect_period < 600)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_period when calling ExtenderControllerExtenderNameAutoSwitch., must be bigger than or equal to 600.');
        }

        $this->container['disconnect_period'] = $disconnect_period;

        return $this;
    }

    /**
     * Gets signal
     *
     * @return string|null
     */
    public function getSignal()
    {
        return $this->container['signal'];
    }

    /**
     * Sets signal
     *
     * @param string|null $signal Automatically switch based on signal strength.    disable:Disable switching of SIM card based on cellular signal quality.    enable:Enable switching of SIM card based on cellular signal quality.
     *
     * @return self
     */
    public function setSignal($signal)
    {
        $allowedValues = $this->getSignalAllowableValues();
        if (!is_null($signal) && !in_array($signal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'signal', must be one of '%s'",
                    $signal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signal'] = $signal;

        return $this;
    }

    /**
     * Gets dataplan
     *
     * @return string|null
     */
    public function getDataplan()
    {
        return $this->container['dataplan'];
    }

    /**
     * Sets dataplan
     *
     * @param string|null $dataplan Automatically switch based on data usage.    disable:Disable switching of SIM card based on cellular data usage.    enable:Enable switching of SIM card based on cellular data usage.
     *
     * @return self
     */
    public function setDataplan($dataplan)
    {
        $allowedValues = $this->getDataplanAllowableValues();
        if (!is_null($dataplan) && !in_array($dataplan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dataplan', must be one of '%s'",
                    $dataplan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dataplan'] = $dataplan;

        return $this;
    }

    /**
     * Gets switch_back
     *
     * @return string|null
     */
    public function getSwitchBack()
    {
        return $this->container['switch_back'];
    }

    /**
     * Sets switch_back
     *
     * @param string|null $switch_back Auto switch with switch back multi-options.    time:Switch back based on specific time in UTC (HH:MM).    timer:Switch back based on an interval.
     *
     * @return self
     */
    public function setSwitchBack($switch_back)
    {
        $allowedValues = $this->getSwitchBackAllowableValues();
        if (!is_null($switch_back) && !in_array($switch_back, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_back', must be one of '%s'",
                    $switch_back,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_back'] = $switch_back;

        return $this;
    }

    /**
     * Gets switch_back_time
     *
     * @return string|null
     */
    public function getSwitchBackTime()
    {
        return $this->container['switch_back_time'];
    }

    /**
     * Sets switch_back_time
     *
     * @param string|null $switch_back_time Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
     *
     * @return self
     */
    public function setSwitchBackTime($switch_back_time)
    {
        if (!is_null($switch_back_time) && (mb_strlen($switch_back_time) > 31)) {
            throw new \InvalidArgumentException('invalid length for $switch_back_time when calling ExtenderControllerExtenderNameAutoSwitch., must be smaller than or equal to 31.');
        }

        $this->container['switch_back_time'] = $switch_back_time;

        return $this;
    }

    /**
     * Gets switch_back_timer
     *
     * @return int|null
     */
    public function getSwitchBackTimer()
    {
        return $this->container['switch_back_timer'];
    }

    /**
     * Sets switch_back_timer
     *
     * @param int|null $switch_back_timer Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
     *
     * @return self
     */
    public function setSwitchBackTimer($switch_back_timer)
    {

        if (!is_null($switch_back_timer) && ($switch_back_timer > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $switch_back_timer when calling ExtenderControllerExtenderNameAutoSwitch., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($switch_back_timer) && ($switch_back_timer < 3600)) {
            throw new \InvalidArgumentException('invalid value for $switch_back_timer when calling ExtenderControllerExtenderNameAutoSwitch., must be bigger than or equal to 3600.');
        }

        $this->container['switch_back_timer'] = $switch_back_timer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


