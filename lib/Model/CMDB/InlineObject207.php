<?php
/**
 * InlineObject207
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject207 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject207 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_207';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'mode' => 'string',
        'inactive_timer' => 'int',
        'onboarding_vlan' => 'string',
        'auto_auth' => 'string',
        'bounce_nac_port' => 'string',
        'link_down_flush' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'mode' => null,
        'inactive_timer' => null,
        'onboarding_vlan' => null,
        'auto_auth' => null,
        'bounce_nac_port' => null,
        'link_down_flush' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'mode' => 'mode',
        'inactive_timer' => 'inactive-timer',
        'onboarding_vlan' => 'onboarding-vlan',
        'auto_auth' => 'auto-auth',
        'bounce_nac_port' => 'bounce-nac-port',
        'link_down_flush' => 'link-down-flush'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'mode' => 'setMode',
        'inactive_timer' => 'setInactiveTimer',
        'onboarding_vlan' => 'setOnboardingVlan',
        'auto_auth' => 'setAutoAuth',
        'bounce_nac_port' => 'setBounceNacPort',
        'link_down_flush' => 'setLinkDownFlush'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'mode' => 'getMode',
        'inactive_timer' => 'getInactiveTimer',
        'onboarding_vlan' => 'getOnboardingVlan',
        'auto_auth' => 'getAutoAuth',
        'bounce_nac_port' => 'getBounceNacPort',
        'link_down_flush' => 'getLinkDownFlush'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODE_LOCAL = 'local';
    const MODE__GLOBAL = 'global';
    const AUTO_AUTH_DISABLE = 'disable';
    const AUTO_AUTH_ENABLE = 'enable';
    const BOUNCE_NAC_PORT_DISABLE = 'disable';
    const BOUNCE_NAC_PORT_ENABLE = 'enable';
    const LINK_DOWN_FLUSH_DISABLE = 'disable';
    const LINK_DOWN_FLUSH_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_LOCAL,
            self::MODE__GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoAuthAllowableValues()
    {
        return [
            self::AUTO_AUTH_DISABLE,
            self::AUTO_AUTH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBounceNacPortAllowableValues()
    {
        return [
            self::BOUNCE_NAC_PORT_DISABLE,
            self::BOUNCE_NAC_PORT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkDownFlushAllowableValues()
    {
        return [
            self::LINK_DOWN_FLUSH_DISABLE,
            self::LINK_DOWN_FLUSH_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['inactive_timer'] = $data['inactive_timer'] ?? null;
        $this->container['onboarding_vlan'] = $data['onboarding_vlan'] ?? null;
        $this->container['auto_auth'] = $data['auto_auth'] ?? null;
        $this->container['bounce_nac_port'] = $data['bounce_nac_port'] ?? null;
        $this->container['link_down_flush'] = $data['link_down_flush'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['inactive_timer']) && ($this->container['inactive_timer'] > 1440)) {
            $invalidProperties[] = "invalid value for 'inactive_timer', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['inactive_timer']) && ($this->container['inactive_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'inactive_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['onboarding_vlan']) && (mb_strlen($this->container['onboarding_vlan']) > 15)) {
            $invalidProperties[] = "invalid value for 'onboarding_vlan', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getAutoAuthAllowableValues();
        if (!is_null($this->container['auto_auth']) && !in_array($this->container['auto_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_auth', must be one of '%s'",
                $this->container['auto_auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBounceNacPortAllowableValues();
        if (!is_null($this->container['bounce_nac_port']) && !in_array($this->container['bounce_nac_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bounce_nac_port', must be one of '%s'",
                $this->container['bounce_nac_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkDownFlushAllowableValues();
        if (!is_null($this->container['link_down_flush']) && !in_array($this->container['link_down_flush'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_down_flush', must be one of '%s'",
                $this->container['link_down_flush'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name NAC settings name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject207., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Set NAC mode to be used on the FortiSwitch ports.    local:Local mode in which managed FortiSwitch port local settings is used.    global:Global mode which enables NAC on all the managed FortiSwitch ports.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets inactive_timer
     *
     * @return int|null
     */
    public function getInactiveTimer()
    {
        return $this->container['inactive_timer'];
    }

    /**
     * Sets inactive_timer
     *
     * @param int|null $inactive_timer Time interval(minutes, 0 = no expiry) to be included in the inactive NAC devices expiry calculation (mac age-out + inactive-time + periodic scan interval).
     *
     * @return self
     */
    public function setInactiveTimer($inactive_timer)
    {

        if (!is_null($inactive_timer) && ($inactive_timer > 1440)) {
            throw new \InvalidArgumentException('invalid value for $inactive_timer when calling InlineObject207., must be smaller than or equal to 1440.');
        }
        if (!is_null($inactive_timer) && ($inactive_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $inactive_timer when calling InlineObject207., must be bigger than or equal to 0.');
        }

        $this->container['inactive_timer'] = $inactive_timer;

        return $this;
    }

    /**
     * Gets onboarding_vlan
     *
     * @return string|null
     */
    public function getOnboardingVlan()
    {
        return $this->container['onboarding_vlan'];
    }

    /**
     * Sets onboarding_vlan
     *
     * @param string|null $onboarding_vlan Default NAC Onboarding VLAN when NAC devices are discovered.
     *
     * @return self
     */
    public function setOnboardingVlan($onboarding_vlan)
    {
        if (!is_null($onboarding_vlan) && (mb_strlen($onboarding_vlan) > 15)) {
            throw new \InvalidArgumentException('invalid length for $onboarding_vlan when calling InlineObject207., must be smaller than or equal to 15.');
        }

        $this->container['onboarding_vlan'] = $onboarding_vlan;

        return $this;
    }

    /**
     * Gets auto_auth
     *
     * @return string|null
     */
    public function getAutoAuth()
    {
        return $this->container['auto_auth'];
    }

    /**
     * Sets auto_auth
     *
     * @param string|null $auto_auth Enable/disable NAC device auto authorization when discovered and nac-policy matched.    disable:Disable NAC device auto authorization.    enable:Enable NAC device auto authorization.
     *
     * @return self
     */
    public function setAutoAuth($auto_auth)
    {
        $allowedValues = $this->getAutoAuthAllowableValues();
        if (!is_null($auto_auth) && !in_array($auto_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_auth', must be one of '%s'",
                    $auto_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_auth'] = $auto_auth;

        return $this;
    }

    /**
     * Gets bounce_nac_port
     *
     * @return string|null
     */
    public function getBounceNacPort()
    {
        return $this->container['bounce_nac_port'];
    }

    /**
     * Sets bounce_nac_port
     *
     * @param string|null $bounce_nac_port Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device.    disable:Disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured.    enable:Enable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured.
     *
     * @return self
     */
    public function setBounceNacPort($bounce_nac_port)
    {
        $allowedValues = $this->getBounceNacPortAllowableValues();
        if (!is_null($bounce_nac_port) && !in_array($bounce_nac_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bounce_nac_port', must be one of '%s'",
                    $bounce_nac_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bounce_nac_port'] = $bounce_nac_port;

        return $this;
    }

    /**
     * Gets link_down_flush
     *
     * @return string|null
     */
    public function getLinkDownFlush()
    {
        return $this->container['link_down_flush'];
    }

    /**
     * Sets link_down_flush
     *
     * @param string|null $link_down_flush Clear NAC devices on switch ports on link down event.    disable:Disable clearing NAC devices on a switch port when link down event happens.    enable:Enable clearing NAC devices on a switch port when link down event happens.
     *
     * @return self
     */
    public function setLinkDownFlush($link_down_flush)
    {
        $allowedValues = $this->getLinkDownFlushAllowableValues();
        if (!is_null($link_down_flush) && !in_array($link_down_flush, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_down_flush', must be one of '%s'",
                    $link_down_flush,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_down_flush'] = $link_down_flush;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


