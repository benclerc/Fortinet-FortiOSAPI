<?php
/**
 * InlineObject515
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject515 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject515 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_515';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host_id' => 'string',
        'tunnel_ssl_algorithm' => 'string',
        'auto_detect_algorithm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host_id' => null,
        'tunnel_ssl_algorithm' => null,
        'auto_detect_algorithm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_id' => 'host-id',
        'tunnel_ssl_algorithm' => 'tunnel-ssl-algorithm',
        'auto_detect_algorithm' => 'auto-detect-algorithm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_id' => 'setHostId',
        'tunnel_ssl_algorithm' => 'setTunnelSslAlgorithm',
        'auto_detect_algorithm' => 'setAutoDetectAlgorithm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_id' => 'getHostId',
        'tunnel_ssl_algorithm' => 'getTunnelSslAlgorithm',
        'auto_detect_algorithm' => 'getAutoDetectAlgorithm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TUNNEL_SSL_ALGORITHM_HIGH = 'high';
    const TUNNEL_SSL_ALGORITHM_MEDIUM = 'medium';
    const TUNNEL_SSL_ALGORITHM_LOW = 'low';
    const AUTO_DETECT_ALGORITHM_SIMPLE = 'simple';
    const AUTO_DETECT_ALGORITHM_DIFF_REQ_RESP = 'diff-req-resp';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelSslAlgorithmAllowableValues()
    {
        return [
            self::TUNNEL_SSL_ALGORITHM_HIGH,
            self::TUNNEL_SSL_ALGORITHM_MEDIUM,
            self::TUNNEL_SSL_ALGORITHM_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDetectAlgorithmAllowableValues()
    {
        return [
            self::AUTO_DETECT_ALGORITHM_SIMPLE,
            self::AUTO_DETECT_ALGORITHM_DIFF_REQ_RESP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_id'] = $data['host_id'] ?? null;
        $this->container['tunnel_ssl_algorithm'] = $data['tunnel_ssl_algorithm'] ?? null;
        $this->container['auto_detect_algorithm'] = $data['auto_detect_algorithm'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['host_id']) && (mb_strlen($this->container['host_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'host_id', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTunnelSslAlgorithmAllowableValues();
        if (!is_null($this->container['tunnel_ssl_algorithm']) && !in_array($this->container['tunnel_ssl_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_ssl_algorithm', must be one of '%s'",
                $this->container['tunnel_ssl_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoDetectAlgorithmAllowableValues();
        if (!is_null($this->container['auto_detect_algorithm']) && !in_array($this->container['auto_detect_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_detect_algorithm', must be one of '%s'",
                $this->container['auto_detect_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_id
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string|null $host_id Local host ID (must also be entered in the remote FortiGate's peer list).
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (!is_null($host_id) && (mb_strlen($host_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $host_id when calling InlineObject515., must be smaller than or equal to 35.');
        }

        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets tunnel_ssl_algorithm
     *
     * @return string|null
     */
    public function getTunnelSslAlgorithm()
    {
        return $this->container['tunnel_ssl_algorithm'];
    }

    /**
     * Sets tunnel_ssl_algorithm
     *
     * @param string|null $tunnel_ssl_algorithm Relative strength of encryption algorithms accepted during tunnel negotiation.    high:High encryption. Allow only AES and ChaCha.    medium:Medium encryption. Allow AES, ChaCha, 3DES, and RC4.    low:Low encryption. Allow AES, ChaCha, 3DES, RC4, and DES.
     *
     * @return self
     */
    public function setTunnelSslAlgorithm($tunnel_ssl_algorithm)
    {
        $allowedValues = $this->getTunnelSslAlgorithmAllowableValues();
        if (!is_null($tunnel_ssl_algorithm) && !in_array($tunnel_ssl_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_ssl_algorithm', must be one of '%s'",
                    $tunnel_ssl_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_ssl_algorithm'] = $tunnel_ssl_algorithm;

        return $this;
    }

    /**
     * Gets auto_detect_algorithm
     *
     * @return string|null
     */
    public function getAutoDetectAlgorithm()
    {
        return $this->container['auto_detect_algorithm'];
    }

    /**
     * Sets auto_detect_algorithm
     *
     * @param string|null $auto_detect_algorithm Auto detection algorithms used in tunnel negotiations.    simple:Use the same TCP option value in SYN/SYNACK packets. Backward compatible.    diff-req-resp:Use different TCP option values in SYN/SYNACK packets to avoid false positive detection.
     *
     * @return self
     */
    public function setAutoDetectAlgorithm($auto_detect_algorithm)
    {
        $allowedValues = $this->getAutoDetectAlgorithmAllowableValues();
        if (!is_null($auto_detect_algorithm) && !in_array($auto_detect_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_detect_algorithm', must be one of '%s'",
                    $auto_detect_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_detect_algorithm'] = $auto_detect_algorithm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


