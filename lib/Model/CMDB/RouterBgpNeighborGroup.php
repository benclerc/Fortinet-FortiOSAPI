<?php
/**
 * RouterBgpNeighborGroup
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterBgpNeighborGroup Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterBgpNeighborGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_bgp_neighbor_group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'advertisement_interval' => 'int',
        'allowas_in_enable' => 'string',
        'allowas_in_enable6' => 'string',
        'allowas_in' => 'int',
        'allowas_in6' => 'int',
        'attribute_unchanged' => 'string',
        'attribute_unchanged6' => 'string',
        'activate' => 'string',
        'activate6' => 'string',
        'bfd' => 'string',
        'capability_dynamic' => 'string',
        'capability_orf' => 'string',
        'capability_orf6' => 'string',
        'capability_graceful_restart' => 'string',
        'capability_graceful_restart6' => 'string',
        'capability_route_refresh' => 'string',
        'capability_default_originate' => 'string',
        'capability_default_originate6' => 'string',
        'dont_capability_negotiate' => 'string',
        'ebgp_enforce_multihop' => 'string',
        'link_down_failover' => 'string',
        'stale_route' => 'string',
        'next_hop_self' => 'string',
        'next_hop_self6' => 'string',
        'next_hop_self_rr' => 'string',
        'next_hop_self_rr6' => 'string',
        'override_capability' => 'string',
        'passive' => 'string',
        'remove_private_as' => 'string',
        'remove_private_as6' => 'string',
        'route_reflector_client' => 'string',
        'route_reflector_client6' => 'string',
        'route_server_client' => 'string',
        'route_server_client6' => 'string',
        'shutdown' => 'string',
        'soft_reconfiguration' => 'string',
        'soft_reconfiguration6' => 'string',
        'as_override' => 'string',
        'as_override6' => 'string',
        'strict_capability_match' => 'string',
        'default_originate_routemap' => 'string',
        'default_originate_routemap6' => 'string',
        'description' => 'string',
        'distribute_list_in' => 'string',
        'distribute_list_in6' => 'string',
        'distribute_list_out' => 'string',
        'distribute_list_out6' => 'string',
        'ebgp_multihop_ttl' => 'int',
        'filter_list_in' => 'string',
        'filter_list_in6' => 'string',
        'filter_list_out' => 'string',
        'filter_list_out6' => 'string',
        'interface' => 'string',
        'maximum_prefix' => 'int',
        'maximum_prefix6' => 'int',
        'maximum_prefix_threshold' => 'int',
        'maximum_prefix_threshold6' => 'int',
        'maximum_prefix_warning_only' => 'string',
        'maximum_prefix_warning_only6' => 'string',
        'prefix_list_in' => 'string',
        'prefix_list_in6' => 'string',
        'prefix_list_out' => 'string',
        'prefix_list_out6' => 'string',
        'remote_as' => 'int',
        'local_as' => 'int',
        'local_as_no_prepend' => 'string',
        'local_as_replace_as' => 'string',
        'retain_stale_time' => 'int',
        'route_map_in' => 'string',
        'route_map_in6' => 'string',
        'route_map_out' => 'string',
        'route_map_out_preferable' => 'string',
        'route_map_out6' => 'string',
        'route_map_out6_preferable' => 'string',
        'send_community' => 'string',
        'send_community6' => 'string',
        'keep_alive_timer' => 'int',
        'holdtime_timer' => 'int',
        'connect_timer' => 'int',
        'unsuppress_map' => 'string',
        'unsuppress_map6' => 'string',
        'update_source' => 'string',
        'weight' => 'int',
        'restart_time' => 'int',
        'additional_path' => 'string',
        'additional_path6' => 'string',
        'adv_additional_path' => 'int',
        'adv_additional_path6' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'advertisement_interval' => null,
        'allowas_in_enable' => null,
        'allowas_in_enable6' => null,
        'allowas_in' => null,
        'allowas_in6' => null,
        'attribute_unchanged' => null,
        'attribute_unchanged6' => null,
        'activate' => null,
        'activate6' => null,
        'bfd' => null,
        'capability_dynamic' => null,
        'capability_orf' => null,
        'capability_orf6' => null,
        'capability_graceful_restart' => null,
        'capability_graceful_restart6' => null,
        'capability_route_refresh' => null,
        'capability_default_originate' => null,
        'capability_default_originate6' => null,
        'dont_capability_negotiate' => null,
        'ebgp_enforce_multihop' => null,
        'link_down_failover' => null,
        'stale_route' => null,
        'next_hop_self' => null,
        'next_hop_self6' => null,
        'next_hop_self_rr' => null,
        'next_hop_self_rr6' => null,
        'override_capability' => null,
        'passive' => null,
        'remove_private_as' => null,
        'remove_private_as6' => null,
        'route_reflector_client' => null,
        'route_reflector_client6' => null,
        'route_server_client' => null,
        'route_server_client6' => null,
        'shutdown' => null,
        'soft_reconfiguration' => null,
        'soft_reconfiguration6' => null,
        'as_override' => null,
        'as_override6' => null,
        'strict_capability_match' => null,
        'default_originate_routemap' => null,
        'default_originate_routemap6' => null,
        'description' => null,
        'distribute_list_in' => null,
        'distribute_list_in6' => null,
        'distribute_list_out' => null,
        'distribute_list_out6' => null,
        'ebgp_multihop_ttl' => null,
        'filter_list_in' => null,
        'filter_list_in6' => null,
        'filter_list_out' => null,
        'filter_list_out6' => null,
        'interface' => null,
        'maximum_prefix' => null,
        'maximum_prefix6' => null,
        'maximum_prefix_threshold' => null,
        'maximum_prefix_threshold6' => null,
        'maximum_prefix_warning_only' => null,
        'maximum_prefix_warning_only6' => null,
        'prefix_list_in' => null,
        'prefix_list_in6' => null,
        'prefix_list_out' => null,
        'prefix_list_out6' => null,
        'remote_as' => null,
        'local_as' => null,
        'local_as_no_prepend' => null,
        'local_as_replace_as' => null,
        'retain_stale_time' => null,
        'route_map_in' => null,
        'route_map_in6' => null,
        'route_map_out' => null,
        'route_map_out_preferable' => null,
        'route_map_out6' => null,
        'route_map_out6_preferable' => null,
        'send_community' => null,
        'send_community6' => null,
        'keep_alive_timer' => null,
        'holdtime_timer' => null,
        'connect_timer' => null,
        'unsuppress_map' => null,
        'unsuppress_map6' => null,
        'update_source' => null,
        'weight' => null,
        'restart_time' => null,
        'additional_path' => null,
        'additional_path6' => null,
        'adv_additional_path' => null,
        'adv_additional_path6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'advertisement_interval' => 'advertisement-interval',
        'allowas_in_enable' => 'allowas-in-enable',
        'allowas_in_enable6' => 'allowas-in-enable6',
        'allowas_in' => 'allowas-in',
        'allowas_in6' => 'allowas-in6',
        'attribute_unchanged' => 'attribute-unchanged',
        'attribute_unchanged6' => 'attribute-unchanged6',
        'activate' => 'activate',
        'activate6' => 'activate6',
        'bfd' => 'bfd',
        'capability_dynamic' => 'capability-dynamic',
        'capability_orf' => 'capability-orf',
        'capability_orf6' => 'capability-orf6',
        'capability_graceful_restart' => 'capability-graceful-restart',
        'capability_graceful_restart6' => 'capability-graceful-restart6',
        'capability_route_refresh' => 'capability-route-refresh',
        'capability_default_originate' => 'capability-default-originate',
        'capability_default_originate6' => 'capability-default-originate6',
        'dont_capability_negotiate' => 'dont-capability-negotiate',
        'ebgp_enforce_multihop' => 'ebgp-enforce-multihop',
        'link_down_failover' => 'link-down-failover',
        'stale_route' => 'stale-route',
        'next_hop_self' => 'next-hop-self',
        'next_hop_self6' => 'next-hop-self6',
        'next_hop_self_rr' => 'next-hop-self-rr',
        'next_hop_self_rr6' => 'next-hop-self-rr6',
        'override_capability' => 'override-capability',
        'passive' => 'passive',
        'remove_private_as' => 'remove-private-as',
        'remove_private_as6' => 'remove-private-as6',
        'route_reflector_client' => 'route-reflector-client',
        'route_reflector_client6' => 'route-reflector-client6',
        'route_server_client' => 'route-server-client',
        'route_server_client6' => 'route-server-client6',
        'shutdown' => 'shutdown',
        'soft_reconfiguration' => 'soft-reconfiguration',
        'soft_reconfiguration6' => 'soft-reconfiguration6',
        'as_override' => 'as-override',
        'as_override6' => 'as-override6',
        'strict_capability_match' => 'strict-capability-match',
        'default_originate_routemap' => 'default-originate-routemap',
        'default_originate_routemap6' => 'default-originate-routemap6',
        'description' => 'description',
        'distribute_list_in' => 'distribute-list-in',
        'distribute_list_in6' => 'distribute-list-in6',
        'distribute_list_out' => 'distribute-list-out',
        'distribute_list_out6' => 'distribute-list-out6',
        'ebgp_multihop_ttl' => 'ebgp-multihop-ttl',
        'filter_list_in' => 'filter-list-in',
        'filter_list_in6' => 'filter-list-in6',
        'filter_list_out' => 'filter-list-out',
        'filter_list_out6' => 'filter-list-out6',
        'interface' => 'interface',
        'maximum_prefix' => 'maximum-prefix',
        'maximum_prefix6' => 'maximum-prefix6',
        'maximum_prefix_threshold' => 'maximum-prefix-threshold',
        'maximum_prefix_threshold6' => 'maximum-prefix-threshold6',
        'maximum_prefix_warning_only' => 'maximum-prefix-warning-only',
        'maximum_prefix_warning_only6' => 'maximum-prefix-warning-only6',
        'prefix_list_in' => 'prefix-list-in',
        'prefix_list_in6' => 'prefix-list-in6',
        'prefix_list_out' => 'prefix-list-out',
        'prefix_list_out6' => 'prefix-list-out6',
        'remote_as' => 'remote-as',
        'local_as' => 'local-as',
        'local_as_no_prepend' => 'local-as-no-prepend',
        'local_as_replace_as' => 'local-as-replace-as',
        'retain_stale_time' => 'retain-stale-time',
        'route_map_in' => 'route-map-in',
        'route_map_in6' => 'route-map-in6',
        'route_map_out' => 'route-map-out',
        'route_map_out_preferable' => 'route-map-out-preferable',
        'route_map_out6' => 'route-map-out6',
        'route_map_out6_preferable' => 'route-map-out6-preferable',
        'send_community' => 'send-community',
        'send_community6' => 'send-community6',
        'keep_alive_timer' => 'keep-alive-timer',
        'holdtime_timer' => 'holdtime-timer',
        'connect_timer' => 'connect-timer',
        'unsuppress_map' => 'unsuppress-map',
        'unsuppress_map6' => 'unsuppress-map6',
        'update_source' => 'update-source',
        'weight' => 'weight',
        'restart_time' => 'restart-time',
        'additional_path' => 'additional-path',
        'additional_path6' => 'additional-path6',
        'adv_additional_path' => 'adv-additional-path',
        'adv_additional_path6' => 'adv-additional-path6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'advertisement_interval' => 'setAdvertisementInterval',
        'allowas_in_enable' => 'setAllowasInEnable',
        'allowas_in_enable6' => 'setAllowasInEnable6',
        'allowas_in' => 'setAllowasIn',
        'allowas_in6' => 'setAllowasIn6',
        'attribute_unchanged' => 'setAttributeUnchanged',
        'attribute_unchanged6' => 'setAttributeUnchanged6',
        'activate' => 'setActivate',
        'activate6' => 'setActivate6',
        'bfd' => 'setBfd',
        'capability_dynamic' => 'setCapabilityDynamic',
        'capability_orf' => 'setCapabilityOrf',
        'capability_orf6' => 'setCapabilityOrf6',
        'capability_graceful_restart' => 'setCapabilityGracefulRestart',
        'capability_graceful_restart6' => 'setCapabilityGracefulRestart6',
        'capability_route_refresh' => 'setCapabilityRouteRefresh',
        'capability_default_originate' => 'setCapabilityDefaultOriginate',
        'capability_default_originate6' => 'setCapabilityDefaultOriginate6',
        'dont_capability_negotiate' => 'setDontCapabilityNegotiate',
        'ebgp_enforce_multihop' => 'setEbgpEnforceMultihop',
        'link_down_failover' => 'setLinkDownFailover',
        'stale_route' => 'setStaleRoute',
        'next_hop_self' => 'setNextHopSelf',
        'next_hop_self6' => 'setNextHopSelf6',
        'next_hop_self_rr' => 'setNextHopSelfRr',
        'next_hop_self_rr6' => 'setNextHopSelfRr6',
        'override_capability' => 'setOverrideCapability',
        'passive' => 'setPassive',
        'remove_private_as' => 'setRemovePrivateAs',
        'remove_private_as6' => 'setRemovePrivateAs6',
        'route_reflector_client' => 'setRouteReflectorClient',
        'route_reflector_client6' => 'setRouteReflectorClient6',
        'route_server_client' => 'setRouteServerClient',
        'route_server_client6' => 'setRouteServerClient6',
        'shutdown' => 'setShutdown',
        'soft_reconfiguration' => 'setSoftReconfiguration',
        'soft_reconfiguration6' => 'setSoftReconfiguration6',
        'as_override' => 'setAsOverride',
        'as_override6' => 'setAsOverride6',
        'strict_capability_match' => 'setStrictCapabilityMatch',
        'default_originate_routemap' => 'setDefaultOriginateRoutemap',
        'default_originate_routemap6' => 'setDefaultOriginateRoutemap6',
        'description' => 'setDescription',
        'distribute_list_in' => 'setDistributeListIn',
        'distribute_list_in6' => 'setDistributeListIn6',
        'distribute_list_out' => 'setDistributeListOut',
        'distribute_list_out6' => 'setDistributeListOut6',
        'ebgp_multihop_ttl' => 'setEbgpMultihopTtl',
        'filter_list_in' => 'setFilterListIn',
        'filter_list_in6' => 'setFilterListIn6',
        'filter_list_out' => 'setFilterListOut',
        'filter_list_out6' => 'setFilterListOut6',
        'interface' => 'setInterface',
        'maximum_prefix' => 'setMaximumPrefix',
        'maximum_prefix6' => 'setMaximumPrefix6',
        'maximum_prefix_threshold' => 'setMaximumPrefixThreshold',
        'maximum_prefix_threshold6' => 'setMaximumPrefixThreshold6',
        'maximum_prefix_warning_only' => 'setMaximumPrefixWarningOnly',
        'maximum_prefix_warning_only6' => 'setMaximumPrefixWarningOnly6',
        'prefix_list_in' => 'setPrefixListIn',
        'prefix_list_in6' => 'setPrefixListIn6',
        'prefix_list_out' => 'setPrefixListOut',
        'prefix_list_out6' => 'setPrefixListOut6',
        'remote_as' => 'setRemoteAs',
        'local_as' => 'setLocalAs',
        'local_as_no_prepend' => 'setLocalAsNoPrepend',
        'local_as_replace_as' => 'setLocalAsReplaceAs',
        'retain_stale_time' => 'setRetainStaleTime',
        'route_map_in' => 'setRouteMapIn',
        'route_map_in6' => 'setRouteMapIn6',
        'route_map_out' => 'setRouteMapOut',
        'route_map_out_preferable' => 'setRouteMapOutPreferable',
        'route_map_out6' => 'setRouteMapOut6',
        'route_map_out6_preferable' => 'setRouteMapOut6Preferable',
        'send_community' => 'setSendCommunity',
        'send_community6' => 'setSendCommunity6',
        'keep_alive_timer' => 'setKeepAliveTimer',
        'holdtime_timer' => 'setHoldtimeTimer',
        'connect_timer' => 'setConnectTimer',
        'unsuppress_map' => 'setUnsuppressMap',
        'unsuppress_map6' => 'setUnsuppressMap6',
        'update_source' => 'setUpdateSource',
        'weight' => 'setWeight',
        'restart_time' => 'setRestartTime',
        'additional_path' => 'setAdditionalPath',
        'additional_path6' => 'setAdditionalPath6',
        'adv_additional_path' => 'setAdvAdditionalPath',
        'adv_additional_path6' => 'setAdvAdditionalPath6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'advertisement_interval' => 'getAdvertisementInterval',
        'allowas_in_enable' => 'getAllowasInEnable',
        'allowas_in_enable6' => 'getAllowasInEnable6',
        'allowas_in' => 'getAllowasIn',
        'allowas_in6' => 'getAllowasIn6',
        'attribute_unchanged' => 'getAttributeUnchanged',
        'attribute_unchanged6' => 'getAttributeUnchanged6',
        'activate' => 'getActivate',
        'activate6' => 'getActivate6',
        'bfd' => 'getBfd',
        'capability_dynamic' => 'getCapabilityDynamic',
        'capability_orf' => 'getCapabilityOrf',
        'capability_orf6' => 'getCapabilityOrf6',
        'capability_graceful_restart' => 'getCapabilityGracefulRestart',
        'capability_graceful_restart6' => 'getCapabilityGracefulRestart6',
        'capability_route_refresh' => 'getCapabilityRouteRefresh',
        'capability_default_originate' => 'getCapabilityDefaultOriginate',
        'capability_default_originate6' => 'getCapabilityDefaultOriginate6',
        'dont_capability_negotiate' => 'getDontCapabilityNegotiate',
        'ebgp_enforce_multihop' => 'getEbgpEnforceMultihop',
        'link_down_failover' => 'getLinkDownFailover',
        'stale_route' => 'getStaleRoute',
        'next_hop_self' => 'getNextHopSelf',
        'next_hop_self6' => 'getNextHopSelf6',
        'next_hop_self_rr' => 'getNextHopSelfRr',
        'next_hop_self_rr6' => 'getNextHopSelfRr6',
        'override_capability' => 'getOverrideCapability',
        'passive' => 'getPassive',
        'remove_private_as' => 'getRemovePrivateAs',
        'remove_private_as6' => 'getRemovePrivateAs6',
        'route_reflector_client' => 'getRouteReflectorClient',
        'route_reflector_client6' => 'getRouteReflectorClient6',
        'route_server_client' => 'getRouteServerClient',
        'route_server_client6' => 'getRouteServerClient6',
        'shutdown' => 'getShutdown',
        'soft_reconfiguration' => 'getSoftReconfiguration',
        'soft_reconfiguration6' => 'getSoftReconfiguration6',
        'as_override' => 'getAsOverride',
        'as_override6' => 'getAsOverride6',
        'strict_capability_match' => 'getStrictCapabilityMatch',
        'default_originate_routemap' => 'getDefaultOriginateRoutemap',
        'default_originate_routemap6' => 'getDefaultOriginateRoutemap6',
        'description' => 'getDescription',
        'distribute_list_in' => 'getDistributeListIn',
        'distribute_list_in6' => 'getDistributeListIn6',
        'distribute_list_out' => 'getDistributeListOut',
        'distribute_list_out6' => 'getDistributeListOut6',
        'ebgp_multihop_ttl' => 'getEbgpMultihopTtl',
        'filter_list_in' => 'getFilterListIn',
        'filter_list_in6' => 'getFilterListIn6',
        'filter_list_out' => 'getFilterListOut',
        'filter_list_out6' => 'getFilterListOut6',
        'interface' => 'getInterface',
        'maximum_prefix' => 'getMaximumPrefix',
        'maximum_prefix6' => 'getMaximumPrefix6',
        'maximum_prefix_threshold' => 'getMaximumPrefixThreshold',
        'maximum_prefix_threshold6' => 'getMaximumPrefixThreshold6',
        'maximum_prefix_warning_only' => 'getMaximumPrefixWarningOnly',
        'maximum_prefix_warning_only6' => 'getMaximumPrefixWarningOnly6',
        'prefix_list_in' => 'getPrefixListIn',
        'prefix_list_in6' => 'getPrefixListIn6',
        'prefix_list_out' => 'getPrefixListOut',
        'prefix_list_out6' => 'getPrefixListOut6',
        'remote_as' => 'getRemoteAs',
        'local_as' => 'getLocalAs',
        'local_as_no_prepend' => 'getLocalAsNoPrepend',
        'local_as_replace_as' => 'getLocalAsReplaceAs',
        'retain_stale_time' => 'getRetainStaleTime',
        'route_map_in' => 'getRouteMapIn',
        'route_map_in6' => 'getRouteMapIn6',
        'route_map_out' => 'getRouteMapOut',
        'route_map_out_preferable' => 'getRouteMapOutPreferable',
        'route_map_out6' => 'getRouteMapOut6',
        'route_map_out6_preferable' => 'getRouteMapOut6Preferable',
        'send_community' => 'getSendCommunity',
        'send_community6' => 'getSendCommunity6',
        'keep_alive_timer' => 'getKeepAliveTimer',
        'holdtime_timer' => 'getHoldtimeTimer',
        'connect_timer' => 'getConnectTimer',
        'unsuppress_map' => 'getUnsuppressMap',
        'unsuppress_map6' => 'getUnsuppressMap6',
        'update_source' => 'getUpdateSource',
        'weight' => 'getWeight',
        'restart_time' => 'getRestartTime',
        'additional_path' => 'getAdditionalPath',
        'additional_path6' => 'getAdditionalPath6',
        'adv_additional_path' => 'getAdvAdditionalPath',
        'adv_additional_path6' => 'getAdvAdditionalPath6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALLOWAS_IN_ENABLE_ENABLE = 'enable';
    const ALLOWAS_IN_ENABLE_DISABLE = 'disable';
    const ALLOWAS_IN_ENABLE6_ENABLE = 'enable';
    const ALLOWAS_IN_ENABLE6_DISABLE = 'disable';
    const ATTRIBUTE_UNCHANGED_AS_PATH = 'as-path';
    const ATTRIBUTE_UNCHANGED_MED = 'med';
    const ATTRIBUTE_UNCHANGED_NEXT_HOP = 'next-hop';
    const ATTRIBUTE_UNCHANGED6_AS_PATH = 'as-path';
    const ATTRIBUTE_UNCHANGED6_MED = 'med';
    const ATTRIBUTE_UNCHANGED6_NEXT_HOP = 'next-hop';
    const ACTIVATE_ENABLE = 'enable';
    const ACTIVATE_DISABLE = 'disable';
    const ACTIVATE6_ENABLE = 'enable';
    const ACTIVATE6_DISABLE = 'disable';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const CAPABILITY_DYNAMIC_ENABLE = 'enable';
    const CAPABILITY_DYNAMIC_DISABLE = 'disable';
    const CAPABILITY_ORF_NONE = 'none';
    const CAPABILITY_ORF_RECEIVE = 'receive';
    const CAPABILITY_ORF_SEND = 'send';
    const CAPABILITY_ORF_BOTH = 'both';
    const CAPABILITY_ORF6_NONE = 'none';
    const CAPABILITY_ORF6_RECEIVE = 'receive';
    const CAPABILITY_ORF6_SEND = 'send';
    const CAPABILITY_ORF6_BOTH = 'both';
    const CAPABILITY_GRACEFUL_RESTART_ENABLE = 'enable';
    const CAPABILITY_GRACEFUL_RESTART_DISABLE = 'disable';
    const CAPABILITY_GRACEFUL_RESTART6_ENABLE = 'enable';
    const CAPABILITY_GRACEFUL_RESTART6_DISABLE = 'disable';
    const CAPABILITY_ROUTE_REFRESH_ENABLE = 'enable';
    const CAPABILITY_ROUTE_REFRESH_DISABLE = 'disable';
    const CAPABILITY_DEFAULT_ORIGINATE_ENABLE = 'enable';
    const CAPABILITY_DEFAULT_ORIGINATE_DISABLE = 'disable';
    const CAPABILITY_DEFAULT_ORIGINATE6_ENABLE = 'enable';
    const CAPABILITY_DEFAULT_ORIGINATE6_DISABLE = 'disable';
    const DONT_CAPABILITY_NEGOTIATE_ENABLE = 'enable';
    const DONT_CAPABILITY_NEGOTIATE_DISABLE = 'disable';
    const EBGP_ENFORCE_MULTIHOP_ENABLE = 'enable';
    const EBGP_ENFORCE_MULTIHOP_DISABLE = 'disable';
    const LINK_DOWN_FAILOVER_ENABLE = 'enable';
    const LINK_DOWN_FAILOVER_DISABLE = 'disable';
    const STALE_ROUTE_ENABLE = 'enable';
    const STALE_ROUTE_DISABLE = 'disable';
    const NEXT_HOP_SELF_ENABLE = 'enable';
    const NEXT_HOP_SELF_DISABLE = 'disable';
    const NEXT_HOP_SELF6_ENABLE = 'enable';
    const NEXT_HOP_SELF6_DISABLE = 'disable';
    const NEXT_HOP_SELF_RR_ENABLE = 'enable';
    const NEXT_HOP_SELF_RR_DISABLE = 'disable';
    const NEXT_HOP_SELF_RR6_ENABLE = 'enable';
    const NEXT_HOP_SELF_RR6_DISABLE = 'disable';
    const OVERRIDE_CAPABILITY_ENABLE = 'enable';
    const OVERRIDE_CAPABILITY_DISABLE = 'disable';
    const PASSIVE_ENABLE = 'enable';
    const PASSIVE_DISABLE = 'disable';
    const REMOVE_PRIVATE_AS_ENABLE = 'enable';
    const REMOVE_PRIVATE_AS_DISABLE = 'disable';
    const REMOVE_PRIVATE_AS6_ENABLE = 'enable';
    const REMOVE_PRIVATE_AS6_DISABLE = 'disable';
    const ROUTE_REFLECTOR_CLIENT_ENABLE = 'enable';
    const ROUTE_REFLECTOR_CLIENT_DISABLE = 'disable';
    const ROUTE_REFLECTOR_CLIENT6_ENABLE = 'enable';
    const ROUTE_REFLECTOR_CLIENT6_DISABLE = 'disable';
    const ROUTE_SERVER_CLIENT_ENABLE = 'enable';
    const ROUTE_SERVER_CLIENT_DISABLE = 'disable';
    const ROUTE_SERVER_CLIENT6_ENABLE = 'enable';
    const ROUTE_SERVER_CLIENT6_DISABLE = 'disable';
    const SHUTDOWN_ENABLE = 'enable';
    const SHUTDOWN_DISABLE = 'disable';
    const SOFT_RECONFIGURATION_ENABLE = 'enable';
    const SOFT_RECONFIGURATION_DISABLE = 'disable';
    const SOFT_RECONFIGURATION6_ENABLE = 'enable';
    const SOFT_RECONFIGURATION6_DISABLE = 'disable';
    const AS_OVERRIDE_ENABLE = 'enable';
    const AS_OVERRIDE_DISABLE = 'disable';
    const AS_OVERRIDE6_ENABLE = 'enable';
    const AS_OVERRIDE6_DISABLE = 'disable';
    const STRICT_CAPABILITY_MATCH_ENABLE = 'enable';
    const STRICT_CAPABILITY_MATCH_DISABLE = 'disable';
    const MAXIMUM_PREFIX_WARNING_ONLY_ENABLE = 'enable';
    const MAXIMUM_PREFIX_WARNING_ONLY_DISABLE = 'disable';
    const MAXIMUM_PREFIX_WARNING_ONLY6_ENABLE = 'enable';
    const MAXIMUM_PREFIX_WARNING_ONLY6_DISABLE = 'disable';
    const LOCAL_AS_NO_PREPEND_ENABLE = 'enable';
    const LOCAL_AS_NO_PREPEND_DISABLE = 'disable';
    const LOCAL_AS_REPLACE_AS_ENABLE = 'enable';
    const LOCAL_AS_REPLACE_AS_DISABLE = 'disable';
    const SEND_COMMUNITY_STANDARD = 'standard';
    const SEND_COMMUNITY_EXTENDED = 'extended';
    const SEND_COMMUNITY_BOTH = 'both';
    const SEND_COMMUNITY_DISABLE = 'disable';
    const SEND_COMMUNITY6_STANDARD = 'standard';
    const SEND_COMMUNITY6_EXTENDED = 'extended';
    const SEND_COMMUNITY6_BOTH = 'both';
    const SEND_COMMUNITY6_DISABLE = 'disable';
    const ADDITIONAL_PATH_SEND = 'send';
    const ADDITIONAL_PATH_RECEIVE = 'receive';
    const ADDITIONAL_PATH_BOTH = 'both';
    const ADDITIONAL_PATH_DISABLE = 'disable';
    const ADDITIONAL_PATH6_SEND = 'send';
    const ADDITIONAL_PATH6_RECEIVE = 'receive';
    const ADDITIONAL_PATH6_BOTH = 'both';
    const ADDITIONAL_PATH6_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowasInEnableAllowableValues()
    {
        return [
            self::ALLOWAS_IN_ENABLE_ENABLE,
            self::ALLOWAS_IN_ENABLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowasInEnable6AllowableValues()
    {
        return [
            self::ALLOWAS_IN_ENABLE6_ENABLE,
            self::ALLOWAS_IN_ENABLE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttributeUnchangedAllowableValues()
    {
        return [
            self::ATTRIBUTE_UNCHANGED_AS_PATH,
            self::ATTRIBUTE_UNCHANGED_MED,
            self::ATTRIBUTE_UNCHANGED_NEXT_HOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttributeUnchanged6AllowableValues()
    {
        return [
            self::ATTRIBUTE_UNCHANGED6_AS_PATH,
            self::ATTRIBUTE_UNCHANGED6_MED,
            self::ATTRIBUTE_UNCHANGED6_NEXT_HOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivateAllowableValues()
    {
        return [
            self::ACTIVATE_ENABLE,
            self::ACTIVATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivate6AllowableValues()
    {
        return [
            self::ACTIVATE6_ENABLE,
            self::ACTIVATE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityDynamicAllowableValues()
    {
        return [
            self::CAPABILITY_DYNAMIC_ENABLE,
            self::CAPABILITY_DYNAMIC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityOrfAllowableValues()
    {
        return [
            self::CAPABILITY_ORF_NONE,
            self::CAPABILITY_ORF_RECEIVE,
            self::CAPABILITY_ORF_SEND,
            self::CAPABILITY_ORF_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityOrf6AllowableValues()
    {
        return [
            self::CAPABILITY_ORF6_NONE,
            self::CAPABILITY_ORF6_RECEIVE,
            self::CAPABILITY_ORF6_SEND,
            self::CAPABILITY_ORF6_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityGracefulRestartAllowableValues()
    {
        return [
            self::CAPABILITY_GRACEFUL_RESTART_ENABLE,
            self::CAPABILITY_GRACEFUL_RESTART_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityGracefulRestart6AllowableValues()
    {
        return [
            self::CAPABILITY_GRACEFUL_RESTART6_ENABLE,
            self::CAPABILITY_GRACEFUL_RESTART6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityRouteRefreshAllowableValues()
    {
        return [
            self::CAPABILITY_ROUTE_REFRESH_ENABLE,
            self::CAPABILITY_ROUTE_REFRESH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityDefaultOriginateAllowableValues()
    {
        return [
            self::CAPABILITY_DEFAULT_ORIGINATE_ENABLE,
            self::CAPABILITY_DEFAULT_ORIGINATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilityDefaultOriginate6AllowableValues()
    {
        return [
            self::CAPABILITY_DEFAULT_ORIGINATE6_ENABLE,
            self::CAPABILITY_DEFAULT_ORIGINATE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDontCapabilityNegotiateAllowableValues()
    {
        return [
            self::DONT_CAPABILITY_NEGOTIATE_ENABLE,
            self::DONT_CAPABILITY_NEGOTIATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEbgpEnforceMultihopAllowableValues()
    {
        return [
            self::EBGP_ENFORCE_MULTIHOP_ENABLE,
            self::EBGP_ENFORCE_MULTIHOP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkDownFailoverAllowableValues()
    {
        return [
            self::LINK_DOWN_FAILOVER_ENABLE,
            self::LINK_DOWN_FAILOVER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStaleRouteAllowableValues()
    {
        return [
            self::STALE_ROUTE_ENABLE,
            self::STALE_ROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextHopSelfAllowableValues()
    {
        return [
            self::NEXT_HOP_SELF_ENABLE,
            self::NEXT_HOP_SELF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextHopSelf6AllowableValues()
    {
        return [
            self::NEXT_HOP_SELF6_ENABLE,
            self::NEXT_HOP_SELF6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextHopSelfRrAllowableValues()
    {
        return [
            self::NEXT_HOP_SELF_RR_ENABLE,
            self::NEXT_HOP_SELF_RR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextHopSelfRr6AllowableValues()
    {
        return [
            self::NEXT_HOP_SELF_RR6_ENABLE,
            self::NEXT_HOP_SELF_RR6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideCapabilityAllowableValues()
    {
        return [
            self::OVERRIDE_CAPABILITY_ENABLE,
            self::OVERRIDE_CAPABILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPassiveAllowableValues()
    {
        return [
            self::PASSIVE_ENABLE,
            self::PASSIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRemovePrivateAsAllowableValues()
    {
        return [
            self::REMOVE_PRIVATE_AS_ENABLE,
            self::REMOVE_PRIVATE_AS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRemovePrivateAs6AllowableValues()
    {
        return [
            self::REMOVE_PRIVATE_AS6_ENABLE,
            self::REMOVE_PRIVATE_AS6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteReflectorClientAllowableValues()
    {
        return [
            self::ROUTE_REFLECTOR_CLIENT_ENABLE,
            self::ROUTE_REFLECTOR_CLIENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteReflectorClient6AllowableValues()
    {
        return [
            self::ROUTE_REFLECTOR_CLIENT6_ENABLE,
            self::ROUTE_REFLECTOR_CLIENT6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteServerClientAllowableValues()
    {
        return [
            self::ROUTE_SERVER_CLIENT_ENABLE,
            self::ROUTE_SERVER_CLIENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteServerClient6AllowableValues()
    {
        return [
            self::ROUTE_SERVER_CLIENT6_ENABLE,
            self::ROUTE_SERVER_CLIENT6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShutdownAllowableValues()
    {
        return [
            self::SHUTDOWN_ENABLE,
            self::SHUTDOWN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSoftReconfigurationAllowableValues()
    {
        return [
            self::SOFT_RECONFIGURATION_ENABLE,
            self::SOFT_RECONFIGURATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSoftReconfiguration6AllowableValues()
    {
        return [
            self::SOFT_RECONFIGURATION6_ENABLE,
            self::SOFT_RECONFIGURATION6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsOverrideAllowableValues()
    {
        return [
            self::AS_OVERRIDE_ENABLE,
            self::AS_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsOverride6AllowableValues()
    {
        return [
            self::AS_OVERRIDE6_ENABLE,
            self::AS_OVERRIDE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictCapabilityMatchAllowableValues()
    {
        return [
            self::STRICT_CAPABILITY_MATCH_ENABLE,
            self::STRICT_CAPABILITY_MATCH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaximumPrefixWarningOnlyAllowableValues()
    {
        return [
            self::MAXIMUM_PREFIX_WARNING_ONLY_ENABLE,
            self::MAXIMUM_PREFIX_WARNING_ONLY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaximumPrefixWarningOnly6AllowableValues()
    {
        return [
            self::MAXIMUM_PREFIX_WARNING_ONLY6_ENABLE,
            self::MAXIMUM_PREFIX_WARNING_ONLY6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalAsNoPrependAllowableValues()
    {
        return [
            self::LOCAL_AS_NO_PREPEND_ENABLE,
            self::LOCAL_AS_NO_PREPEND_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalAsReplaceAsAllowableValues()
    {
        return [
            self::LOCAL_AS_REPLACE_AS_ENABLE,
            self::LOCAL_AS_REPLACE_AS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendCommunityAllowableValues()
    {
        return [
            self::SEND_COMMUNITY_STANDARD,
            self::SEND_COMMUNITY_EXTENDED,
            self::SEND_COMMUNITY_BOTH,
            self::SEND_COMMUNITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendCommunity6AllowableValues()
    {
        return [
            self::SEND_COMMUNITY6_STANDARD,
            self::SEND_COMMUNITY6_EXTENDED,
            self::SEND_COMMUNITY6_BOTH,
            self::SEND_COMMUNITY6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalPathAllowableValues()
    {
        return [
            self::ADDITIONAL_PATH_SEND,
            self::ADDITIONAL_PATH_RECEIVE,
            self::ADDITIONAL_PATH_BOTH,
            self::ADDITIONAL_PATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalPath6AllowableValues()
    {
        return [
            self::ADDITIONAL_PATH6_SEND,
            self::ADDITIONAL_PATH6_RECEIVE,
            self::ADDITIONAL_PATH6_BOTH,
            self::ADDITIONAL_PATH6_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['advertisement_interval'] = $data['advertisement_interval'] ?? null;
        $this->container['allowas_in_enable'] = $data['allowas_in_enable'] ?? null;
        $this->container['allowas_in_enable6'] = $data['allowas_in_enable6'] ?? null;
        $this->container['allowas_in'] = $data['allowas_in'] ?? null;
        $this->container['allowas_in6'] = $data['allowas_in6'] ?? null;
        $this->container['attribute_unchanged'] = $data['attribute_unchanged'] ?? null;
        $this->container['attribute_unchanged6'] = $data['attribute_unchanged6'] ?? null;
        $this->container['activate'] = $data['activate'] ?? null;
        $this->container['activate6'] = $data['activate6'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['capability_dynamic'] = $data['capability_dynamic'] ?? null;
        $this->container['capability_orf'] = $data['capability_orf'] ?? null;
        $this->container['capability_orf6'] = $data['capability_orf6'] ?? null;
        $this->container['capability_graceful_restart'] = $data['capability_graceful_restart'] ?? null;
        $this->container['capability_graceful_restart6'] = $data['capability_graceful_restart6'] ?? null;
        $this->container['capability_route_refresh'] = $data['capability_route_refresh'] ?? null;
        $this->container['capability_default_originate'] = $data['capability_default_originate'] ?? null;
        $this->container['capability_default_originate6'] = $data['capability_default_originate6'] ?? null;
        $this->container['dont_capability_negotiate'] = $data['dont_capability_negotiate'] ?? null;
        $this->container['ebgp_enforce_multihop'] = $data['ebgp_enforce_multihop'] ?? null;
        $this->container['link_down_failover'] = $data['link_down_failover'] ?? null;
        $this->container['stale_route'] = $data['stale_route'] ?? null;
        $this->container['next_hop_self'] = $data['next_hop_self'] ?? null;
        $this->container['next_hop_self6'] = $data['next_hop_self6'] ?? null;
        $this->container['next_hop_self_rr'] = $data['next_hop_self_rr'] ?? null;
        $this->container['next_hop_self_rr6'] = $data['next_hop_self_rr6'] ?? null;
        $this->container['override_capability'] = $data['override_capability'] ?? null;
        $this->container['passive'] = $data['passive'] ?? null;
        $this->container['remove_private_as'] = $data['remove_private_as'] ?? null;
        $this->container['remove_private_as6'] = $data['remove_private_as6'] ?? null;
        $this->container['route_reflector_client'] = $data['route_reflector_client'] ?? null;
        $this->container['route_reflector_client6'] = $data['route_reflector_client6'] ?? null;
        $this->container['route_server_client'] = $data['route_server_client'] ?? null;
        $this->container['route_server_client6'] = $data['route_server_client6'] ?? null;
        $this->container['shutdown'] = $data['shutdown'] ?? null;
        $this->container['soft_reconfiguration'] = $data['soft_reconfiguration'] ?? null;
        $this->container['soft_reconfiguration6'] = $data['soft_reconfiguration6'] ?? null;
        $this->container['as_override'] = $data['as_override'] ?? null;
        $this->container['as_override6'] = $data['as_override6'] ?? null;
        $this->container['strict_capability_match'] = $data['strict_capability_match'] ?? null;
        $this->container['default_originate_routemap'] = $data['default_originate_routemap'] ?? null;
        $this->container['default_originate_routemap6'] = $data['default_originate_routemap6'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['distribute_list_in'] = $data['distribute_list_in'] ?? null;
        $this->container['distribute_list_in6'] = $data['distribute_list_in6'] ?? null;
        $this->container['distribute_list_out'] = $data['distribute_list_out'] ?? null;
        $this->container['distribute_list_out6'] = $data['distribute_list_out6'] ?? null;
        $this->container['ebgp_multihop_ttl'] = $data['ebgp_multihop_ttl'] ?? null;
        $this->container['filter_list_in'] = $data['filter_list_in'] ?? null;
        $this->container['filter_list_in6'] = $data['filter_list_in6'] ?? null;
        $this->container['filter_list_out'] = $data['filter_list_out'] ?? null;
        $this->container['filter_list_out6'] = $data['filter_list_out6'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['maximum_prefix'] = $data['maximum_prefix'] ?? null;
        $this->container['maximum_prefix6'] = $data['maximum_prefix6'] ?? null;
        $this->container['maximum_prefix_threshold'] = $data['maximum_prefix_threshold'] ?? null;
        $this->container['maximum_prefix_threshold6'] = $data['maximum_prefix_threshold6'] ?? null;
        $this->container['maximum_prefix_warning_only'] = $data['maximum_prefix_warning_only'] ?? null;
        $this->container['maximum_prefix_warning_only6'] = $data['maximum_prefix_warning_only6'] ?? null;
        $this->container['prefix_list_in'] = $data['prefix_list_in'] ?? null;
        $this->container['prefix_list_in6'] = $data['prefix_list_in6'] ?? null;
        $this->container['prefix_list_out'] = $data['prefix_list_out'] ?? null;
        $this->container['prefix_list_out6'] = $data['prefix_list_out6'] ?? null;
        $this->container['remote_as'] = $data['remote_as'] ?? null;
        $this->container['local_as'] = $data['local_as'] ?? null;
        $this->container['local_as_no_prepend'] = $data['local_as_no_prepend'] ?? null;
        $this->container['local_as_replace_as'] = $data['local_as_replace_as'] ?? null;
        $this->container['retain_stale_time'] = $data['retain_stale_time'] ?? null;
        $this->container['route_map_in'] = $data['route_map_in'] ?? null;
        $this->container['route_map_in6'] = $data['route_map_in6'] ?? null;
        $this->container['route_map_out'] = $data['route_map_out'] ?? null;
        $this->container['route_map_out_preferable'] = $data['route_map_out_preferable'] ?? null;
        $this->container['route_map_out6'] = $data['route_map_out6'] ?? null;
        $this->container['route_map_out6_preferable'] = $data['route_map_out6_preferable'] ?? null;
        $this->container['send_community'] = $data['send_community'] ?? null;
        $this->container['send_community6'] = $data['send_community6'] ?? null;
        $this->container['keep_alive_timer'] = $data['keep_alive_timer'] ?? null;
        $this->container['holdtime_timer'] = $data['holdtime_timer'] ?? null;
        $this->container['connect_timer'] = $data['connect_timer'] ?? null;
        $this->container['unsuppress_map'] = $data['unsuppress_map'] ?? null;
        $this->container['unsuppress_map6'] = $data['unsuppress_map6'] ?? null;
        $this->container['update_source'] = $data['update_source'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['restart_time'] = $data['restart_time'] ?? null;
        $this->container['additional_path'] = $data['additional_path'] ?? null;
        $this->container['additional_path6'] = $data['additional_path6'] ?? null;
        $this->container['adv_additional_path'] = $data['adv_additional_path'] ?? null;
        $this->container['adv_additional_path6'] = $data['adv_additional_path6'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['advertisement_interval']) && ($this->container['advertisement_interval'] > 600)) {
            $invalidProperties[] = "invalid value for 'advertisement_interval', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['advertisement_interval']) && ($this->container['advertisement_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'advertisement_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAllowasInEnableAllowableValues();
        if (!is_null($this->container['allowas_in_enable']) && !in_array($this->container['allowas_in_enable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowas_in_enable', must be one of '%s'",
                $this->container['allowas_in_enable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowasInEnable6AllowableValues();
        if (!is_null($this->container['allowas_in_enable6']) && !in_array($this->container['allowas_in_enable6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowas_in_enable6', must be one of '%s'",
                $this->container['allowas_in_enable6'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['allowas_in']) && ($this->container['allowas_in'] > 10)) {
            $invalidProperties[] = "invalid value for 'allowas_in', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['allowas_in']) && ($this->container['allowas_in'] < 1)) {
            $invalidProperties[] = "invalid value for 'allowas_in', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['allowas_in6']) && ($this->container['allowas_in6'] > 10)) {
            $invalidProperties[] = "invalid value for 'allowas_in6', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['allowas_in6']) && ($this->container['allowas_in6'] < 1)) {
            $invalidProperties[] = "invalid value for 'allowas_in6', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAttributeUnchangedAllowableValues();
        if (!is_null($this->container['attribute_unchanged']) && !in_array($this->container['attribute_unchanged'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attribute_unchanged', must be one of '%s'",
                $this->container['attribute_unchanged'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAttributeUnchanged6AllowableValues();
        if (!is_null($this->container['attribute_unchanged6']) && !in_array($this->container['attribute_unchanged6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attribute_unchanged6', must be one of '%s'",
                $this->container['attribute_unchanged6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActivateAllowableValues();
        if (!is_null($this->container['activate']) && !in_array($this->container['activate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'activate', must be one of '%s'",
                $this->container['activate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActivate6AllowableValues();
        if (!is_null($this->container['activate6']) && !in_array($this->container['activate6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'activate6', must be one of '%s'",
                $this->container['activate6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityDynamicAllowableValues();
        if (!is_null($this->container['capability_dynamic']) && !in_array($this->container['capability_dynamic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_dynamic', must be one of '%s'",
                $this->container['capability_dynamic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityOrfAllowableValues();
        if (!is_null($this->container['capability_orf']) && !in_array($this->container['capability_orf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_orf', must be one of '%s'",
                $this->container['capability_orf'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityOrf6AllowableValues();
        if (!is_null($this->container['capability_orf6']) && !in_array($this->container['capability_orf6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_orf6', must be one of '%s'",
                $this->container['capability_orf6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityGracefulRestartAllowableValues();
        if (!is_null($this->container['capability_graceful_restart']) && !in_array($this->container['capability_graceful_restart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_graceful_restart', must be one of '%s'",
                $this->container['capability_graceful_restart'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityGracefulRestart6AllowableValues();
        if (!is_null($this->container['capability_graceful_restart6']) && !in_array($this->container['capability_graceful_restart6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_graceful_restart6', must be one of '%s'",
                $this->container['capability_graceful_restart6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityRouteRefreshAllowableValues();
        if (!is_null($this->container['capability_route_refresh']) && !in_array($this->container['capability_route_refresh'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_route_refresh', must be one of '%s'",
                $this->container['capability_route_refresh'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityDefaultOriginateAllowableValues();
        if (!is_null($this->container['capability_default_originate']) && !in_array($this->container['capability_default_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_default_originate', must be one of '%s'",
                $this->container['capability_default_originate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCapabilityDefaultOriginate6AllowableValues();
        if (!is_null($this->container['capability_default_originate6']) && !in_array($this->container['capability_default_originate6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'capability_default_originate6', must be one of '%s'",
                $this->container['capability_default_originate6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDontCapabilityNegotiateAllowableValues();
        if (!is_null($this->container['dont_capability_negotiate']) && !in_array($this->container['dont_capability_negotiate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dont_capability_negotiate', must be one of '%s'",
                $this->container['dont_capability_negotiate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEbgpEnforceMultihopAllowableValues();
        if (!is_null($this->container['ebgp_enforce_multihop']) && !in_array($this->container['ebgp_enforce_multihop'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ebgp_enforce_multihop', must be one of '%s'",
                $this->container['ebgp_enforce_multihop'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkDownFailoverAllowableValues();
        if (!is_null($this->container['link_down_failover']) && !in_array($this->container['link_down_failover'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_down_failover', must be one of '%s'",
                $this->container['link_down_failover'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStaleRouteAllowableValues();
        if (!is_null($this->container['stale_route']) && !in_array($this->container['stale_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stale_route', must be one of '%s'",
                $this->container['stale_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNextHopSelfAllowableValues();
        if (!is_null($this->container['next_hop_self']) && !in_array($this->container['next_hop_self'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_hop_self', must be one of '%s'",
                $this->container['next_hop_self'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNextHopSelf6AllowableValues();
        if (!is_null($this->container['next_hop_self6']) && !in_array($this->container['next_hop_self6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_hop_self6', must be one of '%s'",
                $this->container['next_hop_self6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNextHopSelfRrAllowableValues();
        if (!is_null($this->container['next_hop_self_rr']) && !in_array($this->container['next_hop_self_rr'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_hop_self_rr', must be one of '%s'",
                $this->container['next_hop_self_rr'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNextHopSelfRr6AllowableValues();
        if (!is_null($this->container['next_hop_self_rr6']) && !in_array($this->container['next_hop_self_rr6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_hop_self_rr6', must be one of '%s'",
                $this->container['next_hop_self_rr6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverrideCapabilityAllowableValues();
        if (!is_null($this->container['override_capability']) && !in_array($this->container['override_capability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_capability', must be one of '%s'",
                $this->container['override_capability'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPassiveAllowableValues();
        if (!is_null($this->container['passive']) && !in_array($this->container['passive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'passive', must be one of '%s'",
                $this->container['passive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRemovePrivateAsAllowableValues();
        if (!is_null($this->container['remove_private_as']) && !in_array($this->container['remove_private_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'remove_private_as', must be one of '%s'",
                $this->container['remove_private_as'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRemovePrivateAs6AllowableValues();
        if (!is_null($this->container['remove_private_as6']) && !in_array($this->container['remove_private_as6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'remove_private_as6', must be one of '%s'",
                $this->container['remove_private_as6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouteReflectorClientAllowableValues();
        if (!is_null($this->container['route_reflector_client']) && !in_array($this->container['route_reflector_client'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'route_reflector_client', must be one of '%s'",
                $this->container['route_reflector_client'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouteReflectorClient6AllowableValues();
        if (!is_null($this->container['route_reflector_client6']) && !in_array($this->container['route_reflector_client6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'route_reflector_client6', must be one of '%s'",
                $this->container['route_reflector_client6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouteServerClientAllowableValues();
        if (!is_null($this->container['route_server_client']) && !in_array($this->container['route_server_client'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'route_server_client', must be one of '%s'",
                $this->container['route_server_client'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouteServerClient6AllowableValues();
        if (!is_null($this->container['route_server_client6']) && !in_array($this->container['route_server_client6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'route_server_client6', must be one of '%s'",
                $this->container['route_server_client6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShutdownAllowableValues();
        if (!is_null($this->container['shutdown']) && !in_array($this->container['shutdown'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shutdown', must be one of '%s'",
                $this->container['shutdown'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSoftReconfigurationAllowableValues();
        if (!is_null($this->container['soft_reconfiguration']) && !in_array($this->container['soft_reconfiguration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'soft_reconfiguration', must be one of '%s'",
                $this->container['soft_reconfiguration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSoftReconfiguration6AllowableValues();
        if (!is_null($this->container['soft_reconfiguration6']) && !in_array($this->container['soft_reconfiguration6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'soft_reconfiguration6', must be one of '%s'",
                $this->container['soft_reconfiguration6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsOverrideAllowableValues();
        if (!is_null($this->container['as_override']) && !in_array($this->container['as_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'as_override', must be one of '%s'",
                $this->container['as_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsOverride6AllowableValues();
        if (!is_null($this->container['as_override6']) && !in_array($this->container['as_override6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'as_override6', must be one of '%s'",
                $this->container['as_override6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictCapabilityMatchAllowableValues();
        if (!is_null($this->container['strict_capability_match']) && !in_array($this->container['strict_capability_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_capability_match', must be one of '%s'",
                $this->container['strict_capability_match'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_originate_routemap']) && (mb_strlen($this->container['default_originate_routemap']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_originate_routemap', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['default_originate_routemap6']) && (mb_strlen($this->container['default_originate_routemap6']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_originate_routemap6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['distribute_list_in']) && (mb_strlen($this->container['distribute_list_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_list_in', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['distribute_list_in6']) && (mb_strlen($this->container['distribute_list_in6']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_list_in6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['distribute_list_out']) && (mb_strlen($this->container['distribute_list_out']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_list_out', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['distribute_list_out6']) && (mb_strlen($this->container['distribute_list_out6']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_list_out6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ebgp_multihop_ttl']) && ($this->container['ebgp_multihop_ttl'] > 255)) {
            $invalidProperties[] = "invalid value for 'ebgp_multihop_ttl', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ebgp_multihop_ttl']) && ($this->container['ebgp_multihop_ttl'] < 1)) {
            $invalidProperties[] = "invalid value for 'ebgp_multihop_ttl', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['filter_list_in']) && (mb_strlen($this->container['filter_list_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'filter_list_in', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['filter_list_in6']) && (mb_strlen($this->container['filter_list_in6']) > 35)) {
            $invalidProperties[] = "invalid value for 'filter_list_in6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['filter_list_out']) && (mb_strlen($this->container['filter_list_out']) > 35)) {
            $invalidProperties[] = "invalid value for 'filter_list_out', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['filter_list_out6']) && (mb_strlen($this->container['filter_list_out6']) > 35)) {
            $invalidProperties[] = "invalid value for 'filter_list_out6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['maximum_prefix']) && ($this->container['maximum_prefix'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['maximum_prefix']) && ($this->container['maximum_prefix'] < 1)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maximum_prefix6']) && ($this->container['maximum_prefix6'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix6', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['maximum_prefix6']) && ($this->container['maximum_prefix6'] < 1)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix6', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maximum_prefix_threshold']) && ($this->container['maximum_prefix_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['maximum_prefix_threshold']) && ($this->container['maximum_prefix_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix_threshold', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maximum_prefix_threshold6']) && ($this->container['maximum_prefix_threshold6'] > 100)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix_threshold6', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['maximum_prefix_threshold6']) && ($this->container['maximum_prefix_threshold6'] < 1)) {
            $invalidProperties[] = "invalid value for 'maximum_prefix_threshold6', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getMaximumPrefixWarningOnlyAllowableValues();
        if (!is_null($this->container['maximum_prefix_warning_only']) && !in_array($this->container['maximum_prefix_warning_only'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'maximum_prefix_warning_only', must be one of '%s'",
                $this->container['maximum_prefix_warning_only'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaximumPrefixWarningOnly6AllowableValues();
        if (!is_null($this->container['maximum_prefix_warning_only6']) && !in_array($this->container['maximum_prefix_warning_only6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'maximum_prefix_warning_only6', must be one of '%s'",
                $this->container['maximum_prefix_warning_only6'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['prefix_list_in']) && (mb_strlen($this->container['prefix_list_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'prefix_list_in', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['prefix_list_in6']) && (mb_strlen($this->container['prefix_list_in6']) > 35)) {
            $invalidProperties[] = "invalid value for 'prefix_list_in6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['prefix_list_out']) && (mb_strlen($this->container['prefix_list_out']) > 35)) {
            $invalidProperties[] = "invalid value for 'prefix_list_out', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['prefix_list_out6']) && (mb_strlen($this->container['prefix_list_out6']) > 35)) {
            $invalidProperties[] = "invalid value for 'prefix_list_out6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['remote_as']) && ($this->container['remote_as'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'remote_as', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['remote_as']) && ($this->container['remote_as'] < 1)) {
            $invalidProperties[] = "invalid value for 'remote_as', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_as']) && ($this->container['local_as'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'local_as', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['local_as']) && ($this->container['local_as'] < 0)) {
            $invalidProperties[] = "invalid value for 'local_as', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getLocalAsNoPrependAllowableValues();
        if (!is_null($this->container['local_as_no_prepend']) && !in_array($this->container['local_as_no_prepend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_as_no_prepend', must be one of '%s'",
                $this->container['local_as_no_prepend'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalAsReplaceAsAllowableValues();
        if (!is_null($this->container['local_as_replace_as']) && !in_array($this->container['local_as_replace_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_as_replace_as', must be one of '%s'",
                $this->container['local_as_replace_as'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['retain_stale_time']) && ($this->container['retain_stale_time'] > 65535)) {
            $invalidProperties[] = "invalid value for 'retain_stale_time', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['retain_stale_time']) && ($this->container['retain_stale_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'retain_stale_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['route_map_in']) && (mb_strlen($this->container['route_map_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_in', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['route_map_in6']) && (mb_strlen($this->container['route_map_in6']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_in6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['route_map_out']) && (mb_strlen($this->container['route_map_out']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_out', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['route_map_out_preferable']) && (mb_strlen($this->container['route_map_out_preferable']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_out_preferable', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['route_map_out6']) && (mb_strlen($this->container['route_map_out6']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_out6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['route_map_out6_preferable']) && (mb_strlen($this->container['route_map_out6_preferable']) > 35)) {
            $invalidProperties[] = "invalid value for 'route_map_out6_preferable', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSendCommunityAllowableValues();
        if (!is_null($this->container['send_community']) && !in_array($this->container['send_community'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_community', must be one of '%s'",
                $this->container['send_community'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendCommunity6AllowableValues();
        if (!is_null($this->container['send_community6']) && !in_array($this->container['send_community6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_community6', must be one of '%s'",
                $this->container['send_community6'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keep_alive_timer']) && ($this->container['keep_alive_timer'] > 65535)) {
            $invalidProperties[] = "invalid value for 'keep_alive_timer', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['keep_alive_timer']) && ($this->container['keep_alive_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'keep_alive_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['holdtime_timer']) && ($this->container['holdtime_timer'] > 65535)) {
            $invalidProperties[] = "invalid value for 'holdtime_timer', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['holdtime_timer']) && ($this->container['holdtime_timer'] < 3)) {
            $invalidProperties[] = "invalid value for 'holdtime_timer', must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['connect_timer']) && ($this->container['connect_timer'] > 65535)) {
            $invalidProperties[] = "invalid value for 'connect_timer', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['connect_timer']) && ($this->container['connect_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'connect_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unsuppress_map']) && (mb_strlen($this->container['unsuppress_map']) > 35)) {
            $invalidProperties[] = "invalid value for 'unsuppress_map', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['unsuppress_map6']) && (mb_strlen($this->container['unsuppress_map6']) > 35)) {
            $invalidProperties[] = "invalid value for 'unsuppress_map6', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['update_source']) && (mb_strlen($this->container['update_source']) > 15)) {
            $invalidProperties[] = "invalid value for 'update_source', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 65535)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['restart_time']) && ($this->container['restart_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'restart_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['restart_time']) && ($this->container['restart_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'restart_time', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAdditionalPathAllowableValues();
        if (!is_null($this->container['additional_path']) && !in_array($this->container['additional_path'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'additional_path', must be one of '%s'",
                $this->container['additional_path'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdditionalPath6AllowableValues();
        if (!is_null($this->container['additional_path6']) && !in_array($this->container['additional_path6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'additional_path6', must be one of '%s'",
                $this->container['additional_path6'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['adv_additional_path']) && ($this->container['adv_additional_path'] > 255)) {
            $invalidProperties[] = "invalid value for 'adv_additional_path', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['adv_additional_path']) && ($this->container['adv_additional_path'] < 2)) {
            $invalidProperties[] = "invalid value for 'adv_additional_path', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['adv_additional_path6']) && ($this->container['adv_additional_path6'] > 255)) {
            $invalidProperties[] = "invalid value for 'adv_additional_path6', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['adv_additional_path6']) && ($this->container['adv_additional_path6'] < 2)) {
            $invalidProperties[] = "invalid value for 'adv_additional_path6', must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Neighbor group name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterBgpNeighborGroup., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets advertisement_interval
     *
     * @return int|null
     */
    public function getAdvertisementInterval()
    {
        return $this->container['advertisement_interval'];
    }

    /**
     * Sets advertisement_interval
     *
     * @param int|null $advertisement_interval Minimum interval (sec) between sending updates.
     *
     * @return self
     */
    public function setAdvertisementInterval($advertisement_interval)
    {

        if (!is_null($advertisement_interval) && ($advertisement_interval > 600)) {
            throw new \InvalidArgumentException('invalid value for $advertisement_interval when calling RouterBgpNeighborGroup., must be smaller than or equal to 600.');
        }
        if (!is_null($advertisement_interval) && ($advertisement_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $advertisement_interval when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['advertisement_interval'] = $advertisement_interval;

        return $this;
    }

    /**
     * Gets allowas_in_enable
     *
     * @return string|null
     */
    public function getAllowasInEnable()
    {
        return $this->container['allowas_in_enable'];
    }

    /**
     * Sets allowas_in_enable
     *
     * @param string|null $allowas_in_enable Enable/disable IPv4 Enable to allow my AS in AS path.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAllowasInEnable($allowas_in_enable)
    {
        $allowedValues = $this->getAllowasInEnableAllowableValues();
        if (!is_null($allowas_in_enable) && !in_array($allowas_in_enable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowas_in_enable', must be one of '%s'",
                    $allowas_in_enable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowas_in_enable'] = $allowas_in_enable;

        return $this;
    }

    /**
     * Gets allowas_in_enable6
     *
     * @return string|null
     */
    public function getAllowasInEnable6()
    {
        return $this->container['allowas_in_enable6'];
    }

    /**
     * Sets allowas_in_enable6
     *
     * @param string|null $allowas_in_enable6 Enable/disable IPv6 Enable to allow my AS in AS path.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAllowasInEnable6($allowas_in_enable6)
    {
        $allowedValues = $this->getAllowasInEnable6AllowableValues();
        if (!is_null($allowas_in_enable6) && !in_array($allowas_in_enable6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowas_in_enable6', must be one of '%s'",
                    $allowas_in_enable6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowas_in_enable6'] = $allowas_in_enable6;

        return $this;
    }

    /**
     * Gets allowas_in
     *
     * @return int|null
     */
    public function getAllowasIn()
    {
        return $this->container['allowas_in'];
    }

    /**
     * Sets allowas_in
     *
     * @param int|null $allowas_in IPv4 The maximum number of occurrence of my AS number allowed.
     *
     * @return self
     */
    public function setAllowasIn($allowas_in)
    {

        if (!is_null($allowas_in) && ($allowas_in > 10)) {
            throw new \InvalidArgumentException('invalid value for $allowas_in when calling RouterBgpNeighborGroup., must be smaller than or equal to 10.');
        }
        if (!is_null($allowas_in) && ($allowas_in < 1)) {
            throw new \InvalidArgumentException('invalid value for $allowas_in when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['allowas_in'] = $allowas_in;

        return $this;
    }

    /**
     * Gets allowas_in6
     *
     * @return int|null
     */
    public function getAllowasIn6()
    {
        return $this->container['allowas_in6'];
    }

    /**
     * Sets allowas_in6
     *
     * @param int|null $allowas_in6 IPv6 The maximum number of occurrence of my AS number allowed.
     *
     * @return self
     */
    public function setAllowasIn6($allowas_in6)
    {

        if (!is_null($allowas_in6) && ($allowas_in6 > 10)) {
            throw new \InvalidArgumentException('invalid value for $allowas_in6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 10.');
        }
        if (!is_null($allowas_in6) && ($allowas_in6 < 1)) {
            throw new \InvalidArgumentException('invalid value for $allowas_in6 when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['allowas_in6'] = $allowas_in6;

        return $this;
    }

    /**
     * Gets attribute_unchanged
     *
     * @return string|null
     */
    public function getAttributeUnchanged()
    {
        return $this->container['attribute_unchanged'];
    }

    /**
     * Sets attribute_unchanged
     *
     * @param string|null $attribute_unchanged IPv4 List of attributes that should be unchanged.    as-path:AS path.    med:MED.    next-hop:Next hop.
     *
     * @return self
     */
    public function setAttributeUnchanged($attribute_unchanged)
    {
        $allowedValues = $this->getAttributeUnchangedAllowableValues();
        if (!is_null($attribute_unchanged) && !in_array($attribute_unchanged, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attribute_unchanged', must be one of '%s'",
                    $attribute_unchanged,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attribute_unchanged'] = $attribute_unchanged;

        return $this;
    }

    /**
     * Gets attribute_unchanged6
     *
     * @return string|null
     */
    public function getAttributeUnchanged6()
    {
        return $this->container['attribute_unchanged6'];
    }

    /**
     * Sets attribute_unchanged6
     *
     * @param string|null $attribute_unchanged6 IPv6 List of attributes that should be unchanged.    as-path:AS path.    med:MED.    next-hop:Next hop.
     *
     * @return self
     */
    public function setAttributeUnchanged6($attribute_unchanged6)
    {
        $allowedValues = $this->getAttributeUnchanged6AllowableValues();
        if (!is_null($attribute_unchanged6) && !in_array($attribute_unchanged6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attribute_unchanged6', must be one of '%s'",
                    $attribute_unchanged6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attribute_unchanged6'] = $attribute_unchanged6;

        return $this;
    }

    /**
     * Gets activate
     *
     * @return string|null
     */
    public function getActivate()
    {
        return $this->container['activate'];
    }

    /**
     * Sets activate
     *
     * @param string|null $activate Enable/disable address family IPv4 for this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setActivate($activate)
    {
        $allowedValues = $this->getActivateAllowableValues();
        if (!is_null($activate) && !in_array($activate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'activate', must be one of '%s'",
                    $activate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activate'] = $activate;

        return $this;
    }

    /**
     * Gets activate6
     *
     * @return string|null
     */
    public function getActivate6()
    {
        return $this->container['activate6'];
    }

    /**
     * Sets activate6
     *
     * @param string|null $activate6 Enable/disable address family IPv6 for this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setActivate6($activate6)
    {
        $allowedValues = $this->getActivate6AllowableValues();
        if (!is_null($activate6) && !in_array($activate6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'activate6', must be one of '%s'",
                    $activate6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activate6'] = $activate6;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable BFD for this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets capability_dynamic
     *
     * @return string|null
     */
    public function getCapabilityDynamic()
    {
        return $this->container['capability_dynamic'];
    }

    /**
     * Sets capability_dynamic
     *
     * @param string|null $capability_dynamic Enable/disable advertise dynamic capability to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityDynamic($capability_dynamic)
    {
        $allowedValues = $this->getCapabilityDynamicAllowableValues();
        if (!is_null($capability_dynamic) && !in_array($capability_dynamic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_dynamic', must be one of '%s'",
                    $capability_dynamic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_dynamic'] = $capability_dynamic;

        return $this;
    }

    /**
     * Gets capability_orf
     *
     * @return string|null
     */
    public function getCapabilityOrf()
    {
        return $this->container['capability_orf'];
    }

    /**
     * Sets capability_orf
     *
     * @param string|null $capability_orf Accept/Send IPv4 ORF lists to/from this neighbor.    none:None.    receive:Receive ORF lists.    send:Send ORF list.    both:Send and receive ORF lists.
     *
     * @return self
     */
    public function setCapabilityOrf($capability_orf)
    {
        $allowedValues = $this->getCapabilityOrfAllowableValues();
        if (!is_null($capability_orf) && !in_array($capability_orf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_orf', must be one of '%s'",
                    $capability_orf,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_orf'] = $capability_orf;

        return $this;
    }

    /**
     * Gets capability_orf6
     *
     * @return string|null
     */
    public function getCapabilityOrf6()
    {
        return $this->container['capability_orf6'];
    }

    /**
     * Sets capability_orf6
     *
     * @param string|null $capability_orf6 Accept/Send IPv6 ORF lists to/from this neighbor.    none:None.    receive:Receive ORF lists.    send:Send ORF list.    both:Send and receive ORF lists.
     *
     * @return self
     */
    public function setCapabilityOrf6($capability_orf6)
    {
        $allowedValues = $this->getCapabilityOrf6AllowableValues();
        if (!is_null($capability_orf6) && !in_array($capability_orf6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_orf6', must be one of '%s'",
                    $capability_orf6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_orf6'] = $capability_orf6;

        return $this;
    }

    /**
     * Gets capability_graceful_restart
     *
     * @return string|null
     */
    public function getCapabilityGracefulRestart()
    {
        return $this->container['capability_graceful_restart'];
    }

    /**
     * Sets capability_graceful_restart
     *
     * @param string|null $capability_graceful_restart Enable/disable advertise IPv4 graceful restart capability to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityGracefulRestart($capability_graceful_restart)
    {
        $allowedValues = $this->getCapabilityGracefulRestartAllowableValues();
        if (!is_null($capability_graceful_restart) && !in_array($capability_graceful_restart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_graceful_restart', must be one of '%s'",
                    $capability_graceful_restart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_graceful_restart'] = $capability_graceful_restart;

        return $this;
    }

    /**
     * Gets capability_graceful_restart6
     *
     * @return string|null
     */
    public function getCapabilityGracefulRestart6()
    {
        return $this->container['capability_graceful_restart6'];
    }

    /**
     * Sets capability_graceful_restart6
     *
     * @param string|null $capability_graceful_restart6 Enable/disable advertise IPv6 graceful restart capability to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityGracefulRestart6($capability_graceful_restart6)
    {
        $allowedValues = $this->getCapabilityGracefulRestart6AllowableValues();
        if (!is_null($capability_graceful_restart6) && !in_array($capability_graceful_restart6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_graceful_restart6', must be one of '%s'",
                    $capability_graceful_restart6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_graceful_restart6'] = $capability_graceful_restart6;

        return $this;
    }

    /**
     * Gets capability_route_refresh
     *
     * @return string|null
     */
    public function getCapabilityRouteRefresh()
    {
        return $this->container['capability_route_refresh'];
    }

    /**
     * Sets capability_route_refresh
     *
     * @param string|null $capability_route_refresh Enable/disable advertise route refresh capability to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityRouteRefresh($capability_route_refresh)
    {
        $allowedValues = $this->getCapabilityRouteRefreshAllowableValues();
        if (!is_null($capability_route_refresh) && !in_array($capability_route_refresh, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_route_refresh', must be one of '%s'",
                    $capability_route_refresh,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_route_refresh'] = $capability_route_refresh;

        return $this;
    }

    /**
     * Gets capability_default_originate
     *
     * @return string|null
     */
    public function getCapabilityDefaultOriginate()
    {
        return $this->container['capability_default_originate'];
    }

    /**
     * Sets capability_default_originate
     *
     * @param string|null $capability_default_originate Enable/disable advertise default IPv4 route to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityDefaultOriginate($capability_default_originate)
    {
        $allowedValues = $this->getCapabilityDefaultOriginateAllowableValues();
        if (!is_null($capability_default_originate) && !in_array($capability_default_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_default_originate', must be one of '%s'",
                    $capability_default_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_default_originate'] = $capability_default_originate;

        return $this;
    }

    /**
     * Gets capability_default_originate6
     *
     * @return string|null
     */
    public function getCapabilityDefaultOriginate6()
    {
        return $this->container['capability_default_originate6'];
    }

    /**
     * Sets capability_default_originate6
     *
     * @param string|null $capability_default_originate6 Enable/disable advertise default IPv6 route to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCapabilityDefaultOriginate6($capability_default_originate6)
    {
        $allowedValues = $this->getCapabilityDefaultOriginate6AllowableValues();
        if (!is_null($capability_default_originate6) && !in_array($capability_default_originate6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'capability_default_originate6', must be one of '%s'",
                    $capability_default_originate6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capability_default_originate6'] = $capability_default_originate6;

        return $this;
    }

    /**
     * Gets dont_capability_negotiate
     *
     * @return string|null
     */
    public function getDontCapabilityNegotiate()
    {
        return $this->container['dont_capability_negotiate'];
    }

    /**
     * Sets dont_capability_negotiate
     *
     * @param string|null $dont_capability_negotiate Don't negotiate capabilities with this neighbor    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDontCapabilityNegotiate($dont_capability_negotiate)
    {
        $allowedValues = $this->getDontCapabilityNegotiateAllowableValues();
        if (!is_null($dont_capability_negotiate) && !in_array($dont_capability_negotiate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dont_capability_negotiate', must be one of '%s'",
                    $dont_capability_negotiate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dont_capability_negotiate'] = $dont_capability_negotiate;

        return $this;
    }

    /**
     * Gets ebgp_enforce_multihop
     *
     * @return string|null
     */
    public function getEbgpEnforceMultihop()
    {
        return $this->container['ebgp_enforce_multihop'];
    }

    /**
     * Sets ebgp_enforce_multihop
     *
     * @param string|null $ebgp_enforce_multihop Enable/disable allow multi-hop EBGP neighbors.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setEbgpEnforceMultihop($ebgp_enforce_multihop)
    {
        $allowedValues = $this->getEbgpEnforceMultihopAllowableValues();
        if (!is_null($ebgp_enforce_multihop) && !in_array($ebgp_enforce_multihop, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ebgp_enforce_multihop', must be one of '%s'",
                    $ebgp_enforce_multihop,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ebgp_enforce_multihop'] = $ebgp_enforce_multihop;

        return $this;
    }

    /**
     * Gets link_down_failover
     *
     * @return string|null
     */
    public function getLinkDownFailover()
    {
        return $this->container['link_down_failover'];
    }

    /**
     * Sets link_down_failover
     *
     * @param string|null $link_down_failover Enable/disable failover upon link down.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLinkDownFailover($link_down_failover)
    {
        $allowedValues = $this->getLinkDownFailoverAllowableValues();
        if (!is_null($link_down_failover) && !in_array($link_down_failover, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_down_failover', must be one of '%s'",
                    $link_down_failover,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_down_failover'] = $link_down_failover;

        return $this;
    }

    /**
     * Gets stale_route
     *
     * @return string|null
     */
    public function getStaleRoute()
    {
        return $this->container['stale_route'];
    }

    /**
     * Sets stale_route
     *
     * @param string|null $stale_route Enable/disable stale route after neighbor down.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStaleRoute($stale_route)
    {
        $allowedValues = $this->getStaleRouteAllowableValues();
        if (!is_null($stale_route) && !in_array($stale_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stale_route', must be one of '%s'",
                    $stale_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stale_route'] = $stale_route;

        return $this;
    }

    /**
     * Gets next_hop_self
     *
     * @return string|null
     */
    public function getNextHopSelf()
    {
        return $this->container['next_hop_self'];
    }

    /**
     * Sets next_hop_self
     *
     * @param string|null $next_hop_self Enable/disable IPv4 next-hop calculation for this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setNextHopSelf($next_hop_self)
    {
        $allowedValues = $this->getNextHopSelfAllowableValues();
        if (!is_null($next_hop_self) && !in_array($next_hop_self, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_hop_self', must be one of '%s'",
                    $next_hop_self,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['next_hop_self'] = $next_hop_self;

        return $this;
    }

    /**
     * Gets next_hop_self6
     *
     * @return string|null
     */
    public function getNextHopSelf6()
    {
        return $this->container['next_hop_self6'];
    }

    /**
     * Sets next_hop_self6
     *
     * @param string|null $next_hop_self6 Enable/disable IPv6 next-hop calculation for this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setNextHopSelf6($next_hop_self6)
    {
        $allowedValues = $this->getNextHopSelf6AllowableValues();
        if (!is_null($next_hop_self6) && !in_array($next_hop_self6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_hop_self6', must be one of '%s'",
                    $next_hop_self6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['next_hop_self6'] = $next_hop_self6;

        return $this;
    }

    /**
     * Gets next_hop_self_rr
     *
     * @return string|null
     */
    public function getNextHopSelfRr()
    {
        return $this->container['next_hop_self_rr'];
    }

    /**
     * Sets next_hop_self_rr
     *
     * @param string|null $next_hop_self_rr Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setNextHopSelfRr($next_hop_self_rr)
    {
        $allowedValues = $this->getNextHopSelfRrAllowableValues();
        if (!is_null($next_hop_self_rr) && !in_array($next_hop_self_rr, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_hop_self_rr', must be one of '%s'",
                    $next_hop_self_rr,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['next_hop_self_rr'] = $next_hop_self_rr;

        return $this;
    }

    /**
     * Gets next_hop_self_rr6
     *
     * @return string|null
     */
    public function getNextHopSelfRr6()
    {
        return $this->container['next_hop_self_rr6'];
    }

    /**
     * Sets next_hop_self_rr6
     *
     * @param string|null $next_hop_self_rr6 Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setNextHopSelfRr6($next_hop_self_rr6)
    {
        $allowedValues = $this->getNextHopSelfRr6AllowableValues();
        if (!is_null($next_hop_self_rr6) && !in_array($next_hop_self_rr6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_hop_self_rr6', must be one of '%s'",
                    $next_hop_self_rr6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['next_hop_self_rr6'] = $next_hop_self_rr6;

        return $this;
    }

    /**
     * Gets override_capability
     *
     * @return string|null
     */
    public function getOverrideCapability()
    {
        return $this->container['override_capability'];
    }

    /**
     * Sets override_capability
     *
     * @param string|null $override_capability Enable/disable override result of capability negotiation.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setOverrideCapability($override_capability)
    {
        $allowedValues = $this->getOverrideCapabilityAllowableValues();
        if (!is_null($override_capability) && !in_array($override_capability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_capability', must be one of '%s'",
                    $override_capability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_capability'] = $override_capability;

        return $this;
    }

    /**
     * Gets passive
     *
     * @return string|null
     */
    public function getPassive()
    {
        return $this->container['passive'];
    }

    /**
     * Sets passive
     *
     * @param string|null $passive Enable/disable sending of open messages to this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setPassive($passive)
    {
        $allowedValues = $this->getPassiveAllowableValues();
        if (!is_null($passive) && !in_array($passive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'passive', must be one of '%s'",
                    $passive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['passive'] = $passive;

        return $this;
    }

    /**
     * Gets remove_private_as
     *
     * @return string|null
     */
    public function getRemovePrivateAs()
    {
        return $this->container['remove_private_as'];
    }

    /**
     * Sets remove_private_as
     *
     * @param string|null $remove_private_as Enable/disable remove private AS number from IPv4 outbound updates.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRemovePrivateAs($remove_private_as)
    {
        $allowedValues = $this->getRemovePrivateAsAllowableValues();
        if (!is_null($remove_private_as) && !in_array($remove_private_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'remove_private_as', must be one of '%s'",
                    $remove_private_as,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['remove_private_as'] = $remove_private_as;

        return $this;
    }

    /**
     * Gets remove_private_as6
     *
     * @return string|null
     */
    public function getRemovePrivateAs6()
    {
        return $this->container['remove_private_as6'];
    }

    /**
     * Sets remove_private_as6
     *
     * @param string|null $remove_private_as6 Enable/disable remove private AS number from IPv6 outbound updates.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRemovePrivateAs6($remove_private_as6)
    {
        $allowedValues = $this->getRemovePrivateAs6AllowableValues();
        if (!is_null($remove_private_as6) && !in_array($remove_private_as6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'remove_private_as6', must be one of '%s'",
                    $remove_private_as6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['remove_private_as6'] = $remove_private_as6;

        return $this;
    }

    /**
     * Gets route_reflector_client
     *
     * @return string|null
     */
    public function getRouteReflectorClient()
    {
        return $this->container['route_reflector_client'];
    }

    /**
     * Sets route_reflector_client
     *
     * @param string|null $route_reflector_client Enable/disable IPv4 AS route reflector client.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRouteReflectorClient($route_reflector_client)
    {
        $allowedValues = $this->getRouteReflectorClientAllowableValues();
        if (!is_null($route_reflector_client) && !in_array($route_reflector_client, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'route_reflector_client', must be one of '%s'",
                    $route_reflector_client,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_reflector_client'] = $route_reflector_client;

        return $this;
    }

    /**
     * Gets route_reflector_client6
     *
     * @return string|null
     */
    public function getRouteReflectorClient6()
    {
        return $this->container['route_reflector_client6'];
    }

    /**
     * Sets route_reflector_client6
     *
     * @param string|null $route_reflector_client6 Enable/disable IPv6 AS route reflector client.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRouteReflectorClient6($route_reflector_client6)
    {
        $allowedValues = $this->getRouteReflectorClient6AllowableValues();
        if (!is_null($route_reflector_client6) && !in_array($route_reflector_client6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'route_reflector_client6', must be one of '%s'",
                    $route_reflector_client6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_reflector_client6'] = $route_reflector_client6;

        return $this;
    }

    /**
     * Gets route_server_client
     *
     * @return string|null
     */
    public function getRouteServerClient()
    {
        return $this->container['route_server_client'];
    }

    /**
     * Sets route_server_client
     *
     * @param string|null $route_server_client Enable/disable IPv4 AS route server client.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRouteServerClient($route_server_client)
    {
        $allowedValues = $this->getRouteServerClientAllowableValues();
        if (!is_null($route_server_client) && !in_array($route_server_client, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'route_server_client', must be one of '%s'",
                    $route_server_client,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_server_client'] = $route_server_client;

        return $this;
    }

    /**
     * Gets route_server_client6
     *
     * @return string|null
     */
    public function getRouteServerClient6()
    {
        return $this->container['route_server_client6'];
    }

    /**
     * Sets route_server_client6
     *
     * @param string|null $route_server_client6 Enable/disable IPv6 AS route server client.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRouteServerClient6($route_server_client6)
    {
        $allowedValues = $this->getRouteServerClient6AllowableValues();
        if (!is_null($route_server_client6) && !in_array($route_server_client6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'route_server_client6', must be one of '%s'",
                    $route_server_client6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_server_client6'] = $route_server_client6;

        return $this;
    }

    /**
     * Gets shutdown
     *
     * @return string|null
     */
    public function getShutdown()
    {
        return $this->container['shutdown'];
    }

    /**
     * Sets shutdown
     *
     * @param string|null $shutdown Enable/disable shutdown this neighbor.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setShutdown($shutdown)
    {
        $allowedValues = $this->getShutdownAllowableValues();
        if (!is_null($shutdown) && !in_array($shutdown, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shutdown', must be one of '%s'",
                    $shutdown,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shutdown'] = $shutdown;

        return $this;
    }

    /**
     * Gets soft_reconfiguration
     *
     * @return string|null
     */
    public function getSoftReconfiguration()
    {
        return $this->container['soft_reconfiguration'];
    }

    /**
     * Sets soft_reconfiguration
     *
     * @param string|null $soft_reconfiguration Enable/disable allow IPv4 inbound soft reconfiguration.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSoftReconfiguration($soft_reconfiguration)
    {
        $allowedValues = $this->getSoftReconfigurationAllowableValues();
        if (!is_null($soft_reconfiguration) && !in_array($soft_reconfiguration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'soft_reconfiguration', must be one of '%s'",
                    $soft_reconfiguration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['soft_reconfiguration'] = $soft_reconfiguration;

        return $this;
    }

    /**
     * Gets soft_reconfiguration6
     *
     * @return string|null
     */
    public function getSoftReconfiguration6()
    {
        return $this->container['soft_reconfiguration6'];
    }

    /**
     * Sets soft_reconfiguration6
     *
     * @param string|null $soft_reconfiguration6 Enable/disable allow IPv6 inbound soft reconfiguration.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSoftReconfiguration6($soft_reconfiguration6)
    {
        $allowedValues = $this->getSoftReconfiguration6AllowableValues();
        if (!is_null($soft_reconfiguration6) && !in_array($soft_reconfiguration6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'soft_reconfiguration6', must be one of '%s'",
                    $soft_reconfiguration6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['soft_reconfiguration6'] = $soft_reconfiguration6;

        return $this;
    }

    /**
     * Gets as_override
     *
     * @return string|null
     */
    public function getAsOverride()
    {
        return $this->container['as_override'];
    }

    /**
     * Sets as_override
     *
     * @param string|null $as_override Enable/disable replace peer AS with own AS for IPv4.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAsOverride($as_override)
    {
        $allowedValues = $this->getAsOverrideAllowableValues();
        if (!is_null($as_override) && !in_array($as_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'as_override', must be one of '%s'",
                    $as_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['as_override'] = $as_override;

        return $this;
    }

    /**
     * Gets as_override6
     *
     * @return string|null
     */
    public function getAsOverride6()
    {
        return $this->container['as_override6'];
    }

    /**
     * Sets as_override6
     *
     * @param string|null $as_override6 Enable/disable replace peer AS with own AS for IPv6.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAsOverride6($as_override6)
    {
        $allowedValues = $this->getAsOverride6AllowableValues();
        if (!is_null($as_override6) && !in_array($as_override6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'as_override6', must be one of '%s'",
                    $as_override6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['as_override6'] = $as_override6;

        return $this;
    }

    /**
     * Gets strict_capability_match
     *
     * @return string|null
     */
    public function getStrictCapabilityMatch()
    {
        return $this->container['strict_capability_match'];
    }

    /**
     * Sets strict_capability_match
     *
     * @param string|null $strict_capability_match Enable/disable strict capability matching.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStrictCapabilityMatch($strict_capability_match)
    {
        $allowedValues = $this->getStrictCapabilityMatchAllowableValues();
        if (!is_null($strict_capability_match) && !in_array($strict_capability_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_capability_match', must be one of '%s'",
                    $strict_capability_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_capability_match'] = $strict_capability_match;

        return $this;
    }

    /**
     * Gets default_originate_routemap
     *
     * @return string|null
     */
    public function getDefaultOriginateRoutemap()
    {
        return $this->container['default_originate_routemap'];
    }

    /**
     * Sets default_originate_routemap
     *
     * @param string|null $default_originate_routemap Route map to specify criteria to originate IPv4 default.
     *
     * @return self
     */
    public function setDefaultOriginateRoutemap($default_originate_routemap)
    {
        if (!is_null($default_originate_routemap) && (mb_strlen($default_originate_routemap) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_originate_routemap when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['default_originate_routemap'] = $default_originate_routemap;

        return $this;
    }

    /**
     * Gets default_originate_routemap6
     *
     * @return string|null
     */
    public function getDefaultOriginateRoutemap6()
    {
        return $this->container['default_originate_routemap6'];
    }

    /**
     * Sets default_originate_routemap6
     *
     * @param string|null $default_originate_routemap6 Route map to specify criteria to originate IPv6 default.
     *
     * @return self
     */
    public function setDefaultOriginateRoutemap6($default_originate_routemap6)
    {
        if (!is_null($default_originate_routemap6) && (mb_strlen($default_originate_routemap6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_originate_routemap6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['default_originate_routemap6'] = $default_originate_routemap6;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RouterBgpNeighborGroup., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets distribute_list_in
     *
     * @return string|null
     */
    public function getDistributeListIn()
    {
        return $this->container['distribute_list_in'];
    }

    /**
     * Sets distribute_list_in
     *
     * @param string|null $distribute_list_in Filter for IPv4 updates from this neighbor.
     *
     * @return self
     */
    public function setDistributeListIn($distribute_list_in)
    {
        if (!is_null($distribute_list_in) && (mb_strlen($distribute_list_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_list_in when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['distribute_list_in'] = $distribute_list_in;

        return $this;
    }

    /**
     * Gets distribute_list_in6
     *
     * @return string|null
     */
    public function getDistributeListIn6()
    {
        return $this->container['distribute_list_in6'];
    }

    /**
     * Sets distribute_list_in6
     *
     * @param string|null $distribute_list_in6 Filter for IPv6 updates from this neighbor.
     *
     * @return self
     */
    public function setDistributeListIn6($distribute_list_in6)
    {
        if (!is_null($distribute_list_in6) && (mb_strlen($distribute_list_in6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_list_in6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['distribute_list_in6'] = $distribute_list_in6;

        return $this;
    }

    /**
     * Gets distribute_list_out
     *
     * @return string|null
     */
    public function getDistributeListOut()
    {
        return $this->container['distribute_list_out'];
    }

    /**
     * Sets distribute_list_out
     *
     * @param string|null $distribute_list_out Filter for IPv4 updates to this neighbor.
     *
     * @return self
     */
    public function setDistributeListOut($distribute_list_out)
    {
        if (!is_null($distribute_list_out) && (mb_strlen($distribute_list_out) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_list_out when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['distribute_list_out'] = $distribute_list_out;

        return $this;
    }

    /**
     * Gets distribute_list_out6
     *
     * @return string|null
     */
    public function getDistributeListOut6()
    {
        return $this->container['distribute_list_out6'];
    }

    /**
     * Sets distribute_list_out6
     *
     * @param string|null $distribute_list_out6 Filter for IPv6 updates to this neighbor.
     *
     * @return self
     */
    public function setDistributeListOut6($distribute_list_out6)
    {
        if (!is_null($distribute_list_out6) && (mb_strlen($distribute_list_out6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_list_out6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['distribute_list_out6'] = $distribute_list_out6;

        return $this;
    }

    /**
     * Gets ebgp_multihop_ttl
     *
     * @return int|null
     */
    public function getEbgpMultihopTtl()
    {
        return $this->container['ebgp_multihop_ttl'];
    }

    /**
     * Sets ebgp_multihop_ttl
     *
     * @param int|null $ebgp_multihop_ttl EBGP multihop TTL for this peer.
     *
     * @return self
     */
    public function setEbgpMultihopTtl($ebgp_multihop_ttl)
    {

        if (!is_null($ebgp_multihop_ttl) && ($ebgp_multihop_ttl > 255)) {
            throw new \InvalidArgumentException('invalid value for $ebgp_multihop_ttl when calling RouterBgpNeighborGroup., must be smaller than or equal to 255.');
        }
        if (!is_null($ebgp_multihop_ttl) && ($ebgp_multihop_ttl < 1)) {
            throw new \InvalidArgumentException('invalid value for $ebgp_multihop_ttl when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['ebgp_multihop_ttl'] = $ebgp_multihop_ttl;

        return $this;
    }

    /**
     * Gets filter_list_in
     *
     * @return string|null
     */
    public function getFilterListIn()
    {
        return $this->container['filter_list_in'];
    }

    /**
     * Sets filter_list_in
     *
     * @param string|null $filter_list_in BGP filter for IPv4 inbound routes.
     *
     * @return self
     */
    public function setFilterListIn($filter_list_in)
    {
        if (!is_null($filter_list_in) && (mb_strlen($filter_list_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $filter_list_in when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['filter_list_in'] = $filter_list_in;

        return $this;
    }

    /**
     * Gets filter_list_in6
     *
     * @return string|null
     */
    public function getFilterListIn6()
    {
        return $this->container['filter_list_in6'];
    }

    /**
     * Sets filter_list_in6
     *
     * @param string|null $filter_list_in6 BGP filter for IPv6 inbound routes.
     *
     * @return self
     */
    public function setFilterListIn6($filter_list_in6)
    {
        if (!is_null($filter_list_in6) && (mb_strlen($filter_list_in6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $filter_list_in6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['filter_list_in6'] = $filter_list_in6;

        return $this;
    }

    /**
     * Gets filter_list_out
     *
     * @return string|null
     */
    public function getFilterListOut()
    {
        return $this->container['filter_list_out'];
    }

    /**
     * Sets filter_list_out
     *
     * @param string|null $filter_list_out BGP filter for IPv4 outbound routes.
     *
     * @return self
     */
    public function setFilterListOut($filter_list_out)
    {
        if (!is_null($filter_list_out) && (mb_strlen($filter_list_out) > 35)) {
            throw new \InvalidArgumentException('invalid length for $filter_list_out when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['filter_list_out'] = $filter_list_out;

        return $this;
    }

    /**
     * Gets filter_list_out6
     *
     * @return string|null
     */
    public function getFilterListOut6()
    {
        return $this->container['filter_list_out6'];
    }

    /**
     * Sets filter_list_out6
     *
     * @param string|null $filter_list_out6 BGP filter for IPv6 outbound routes.
     *
     * @return self
     */
    public function setFilterListOut6($filter_list_out6)
    {
        if (!is_null($filter_list_out6) && (mb_strlen($filter_list_out6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $filter_list_out6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['filter_list_out6'] = $filter_list_out6;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface for peer connection. For IPv6 peer, the interface should have link-local address.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling RouterBgpNeighborGroup., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets maximum_prefix
     *
     * @return int|null
     */
    public function getMaximumPrefix()
    {
        return $this->container['maximum_prefix'];
    }

    /**
     * Sets maximum_prefix
     *
     * @param int|null $maximum_prefix Maximum number of IPv4 prefixes to accept from this peer.
     *
     * @return self
     */
    public function setMaximumPrefix($maximum_prefix)
    {

        if (!is_null($maximum_prefix) && ($maximum_prefix > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix when calling RouterBgpNeighborGroup., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($maximum_prefix) && ($maximum_prefix < 1)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['maximum_prefix'] = $maximum_prefix;

        return $this;
    }

    /**
     * Gets maximum_prefix6
     *
     * @return int|null
     */
    public function getMaximumPrefix6()
    {
        return $this->container['maximum_prefix6'];
    }

    /**
     * Sets maximum_prefix6
     *
     * @param int|null $maximum_prefix6 Maximum number of IPv6 prefixes to accept from this peer.
     *
     * @return self
     */
    public function setMaximumPrefix6($maximum_prefix6)
    {

        if (!is_null($maximum_prefix6) && ($maximum_prefix6 > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($maximum_prefix6) && ($maximum_prefix6 < 1)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix6 when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['maximum_prefix6'] = $maximum_prefix6;

        return $this;
    }

    /**
     * Gets maximum_prefix_threshold
     *
     * @return int|null
     */
    public function getMaximumPrefixThreshold()
    {
        return $this->container['maximum_prefix_threshold'];
    }

    /**
     * Sets maximum_prefix_threshold
     *
     * @param int|null $maximum_prefix_threshold Maximum IPv4 prefix threshold value (1 - 100 percent).
     *
     * @return self
     */
    public function setMaximumPrefixThreshold($maximum_prefix_threshold)
    {

        if (!is_null($maximum_prefix_threshold) && ($maximum_prefix_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix_threshold when calling RouterBgpNeighborGroup., must be smaller than or equal to 100.');
        }
        if (!is_null($maximum_prefix_threshold) && ($maximum_prefix_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix_threshold when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['maximum_prefix_threshold'] = $maximum_prefix_threshold;

        return $this;
    }

    /**
     * Gets maximum_prefix_threshold6
     *
     * @return int|null
     */
    public function getMaximumPrefixThreshold6()
    {
        return $this->container['maximum_prefix_threshold6'];
    }

    /**
     * Sets maximum_prefix_threshold6
     *
     * @param int|null $maximum_prefix_threshold6 Maximum IPv6 prefix threshold value (1 - 100 percent).
     *
     * @return self
     */
    public function setMaximumPrefixThreshold6($maximum_prefix_threshold6)
    {

        if (!is_null($maximum_prefix_threshold6) && ($maximum_prefix_threshold6 > 100)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix_threshold6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 100.');
        }
        if (!is_null($maximum_prefix_threshold6) && ($maximum_prefix_threshold6 < 1)) {
            throw new \InvalidArgumentException('invalid value for $maximum_prefix_threshold6 when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['maximum_prefix_threshold6'] = $maximum_prefix_threshold6;

        return $this;
    }

    /**
     * Gets maximum_prefix_warning_only
     *
     * @return string|null
     */
    public function getMaximumPrefixWarningOnly()
    {
        return $this->container['maximum_prefix_warning_only'];
    }

    /**
     * Sets maximum_prefix_warning_only
     *
     * @param string|null $maximum_prefix_warning_only Enable/disable IPv4 Only give warning message when limit is exceeded.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaximumPrefixWarningOnly($maximum_prefix_warning_only)
    {
        $allowedValues = $this->getMaximumPrefixWarningOnlyAllowableValues();
        if (!is_null($maximum_prefix_warning_only) && !in_array($maximum_prefix_warning_only, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'maximum_prefix_warning_only', must be one of '%s'",
                    $maximum_prefix_warning_only,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maximum_prefix_warning_only'] = $maximum_prefix_warning_only;

        return $this;
    }

    /**
     * Gets maximum_prefix_warning_only6
     *
     * @return string|null
     */
    public function getMaximumPrefixWarningOnly6()
    {
        return $this->container['maximum_prefix_warning_only6'];
    }

    /**
     * Sets maximum_prefix_warning_only6
     *
     * @param string|null $maximum_prefix_warning_only6 Enable/disable IPv6 Only give warning message when limit is exceeded.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaximumPrefixWarningOnly6($maximum_prefix_warning_only6)
    {
        $allowedValues = $this->getMaximumPrefixWarningOnly6AllowableValues();
        if (!is_null($maximum_prefix_warning_only6) && !in_array($maximum_prefix_warning_only6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'maximum_prefix_warning_only6', must be one of '%s'",
                    $maximum_prefix_warning_only6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maximum_prefix_warning_only6'] = $maximum_prefix_warning_only6;

        return $this;
    }

    /**
     * Gets prefix_list_in
     *
     * @return string|null
     */
    public function getPrefixListIn()
    {
        return $this->container['prefix_list_in'];
    }

    /**
     * Sets prefix_list_in
     *
     * @param string|null $prefix_list_in IPv4 Inbound filter for updates from this neighbor.
     *
     * @return self
     */
    public function setPrefixListIn($prefix_list_in)
    {
        if (!is_null($prefix_list_in) && (mb_strlen($prefix_list_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $prefix_list_in when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['prefix_list_in'] = $prefix_list_in;

        return $this;
    }

    /**
     * Gets prefix_list_in6
     *
     * @return string|null
     */
    public function getPrefixListIn6()
    {
        return $this->container['prefix_list_in6'];
    }

    /**
     * Sets prefix_list_in6
     *
     * @param string|null $prefix_list_in6 IPv6 Inbound filter for updates from this neighbor.
     *
     * @return self
     */
    public function setPrefixListIn6($prefix_list_in6)
    {
        if (!is_null($prefix_list_in6) && (mb_strlen($prefix_list_in6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $prefix_list_in6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['prefix_list_in6'] = $prefix_list_in6;

        return $this;
    }

    /**
     * Gets prefix_list_out
     *
     * @return string|null
     */
    public function getPrefixListOut()
    {
        return $this->container['prefix_list_out'];
    }

    /**
     * Sets prefix_list_out
     *
     * @param string|null $prefix_list_out IPv4 Outbound filter for updates to this neighbor.
     *
     * @return self
     */
    public function setPrefixListOut($prefix_list_out)
    {
        if (!is_null($prefix_list_out) && (mb_strlen($prefix_list_out) > 35)) {
            throw new \InvalidArgumentException('invalid length for $prefix_list_out when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['prefix_list_out'] = $prefix_list_out;

        return $this;
    }

    /**
     * Gets prefix_list_out6
     *
     * @return string|null
     */
    public function getPrefixListOut6()
    {
        return $this->container['prefix_list_out6'];
    }

    /**
     * Sets prefix_list_out6
     *
     * @param string|null $prefix_list_out6 IPv6 Outbound filter for updates to this neighbor.
     *
     * @return self
     */
    public function setPrefixListOut6($prefix_list_out6)
    {
        if (!is_null($prefix_list_out6) && (mb_strlen($prefix_list_out6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $prefix_list_out6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['prefix_list_out6'] = $prefix_list_out6;

        return $this;
    }

    /**
     * Gets remote_as
     *
     * @return int|null
     */
    public function getRemoteAs()
    {
        return $this->container['remote_as'];
    }

    /**
     * Sets remote_as
     *
     * @param int|null $remote_as AS number of neighbor.
     *
     * @return self
     */
    public function setRemoteAs($remote_as)
    {

        if (!is_null($remote_as) && ($remote_as > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $remote_as when calling RouterBgpNeighborGroup., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($remote_as) && ($remote_as < 1)) {
            throw new \InvalidArgumentException('invalid value for $remote_as when calling RouterBgpNeighborGroup., must be bigger than or equal to 1.');
        }

        $this->container['remote_as'] = $remote_as;

        return $this;
    }

    /**
     * Gets local_as
     *
     * @return int|null
     */
    public function getLocalAs()
    {
        return $this->container['local_as'];
    }

    /**
     * Sets local_as
     *
     * @param int|null $local_as Local AS number of neighbor.
     *
     * @return self
     */
    public function setLocalAs($local_as)
    {

        if (!is_null($local_as) && ($local_as > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $local_as when calling RouterBgpNeighborGroup., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($local_as) && ($local_as < 0)) {
            throw new \InvalidArgumentException('invalid value for $local_as when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['local_as'] = $local_as;

        return $this;
    }

    /**
     * Gets local_as_no_prepend
     *
     * @return string|null
     */
    public function getLocalAsNoPrepend()
    {
        return $this->container['local_as_no_prepend'];
    }

    /**
     * Sets local_as_no_prepend
     *
     * @param string|null $local_as_no_prepend Do not prepend local-as to incoming updates.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLocalAsNoPrepend($local_as_no_prepend)
    {
        $allowedValues = $this->getLocalAsNoPrependAllowableValues();
        if (!is_null($local_as_no_prepend) && !in_array($local_as_no_prepend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_as_no_prepend', must be one of '%s'",
                    $local_as_no_prepend,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_as_no_prepend'] = $local_as_no_prepend;

        return $this;
    }

    /**
     * Gets local_as_replace_as
     *
     * @return string|null
     */
    public function getLocalAsReplaceAs()
    {
        return $this->container['local_as_replace_as'];
    }

    /**
     * Sets local_as_replace_as
     *
     * @param string|null $local_as_replace_as Replace real AS with local-as in outgoing updates.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLocalAsReplaceAs($local_as_replace_as)
    {
        $allowedValues = $this->getLocalAsReplaceAsAllowableValues();
        if (!is_null($local_as_replace_as) && !in_array($local_as_replace_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_as_replace_as', must be one of '%s'",
                    $local_as_replace_as,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_as_replace_as'] = $local_as_replace_as;

        return $this;
    }

    /**
     * Gets retain_stale_time
     *
     * @return int|null
     */
    public function getRetainStaleTime()
    {
        return $this->container['retain_stale_time'];
    }

    /**
     * Sets retain_stale_time
     *
     * @param int|null $retain_stale_time Time to retain stale routes.
     *
     * @return self
     */
    public function setRetainStaleTime($retain_stale_time)
    {

        if (!is_null($retain_stale_time) && ($retain_stale_time > 65535)) {
            throw new \InvalidArgumentException('invalid value for $retain_stale_time when calling RouterBgpNeighborGroup., must be smaller than or equal to 65535.');
        }
        if (!is_null($retain_stale_time) && ($retain_stale_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $retain_stale_time when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['retain_stale_time'] = $retain_stale_time;

        return $this;
    }

    /**
     * Gets route_map_in
     *
     * @return string|null
     */
    public function getRouteMapIn()
    {
        return $this->container['route_map_in'];
    }

    /**
     * Sets route_map_in
     *
     * @param string|null $route_map_in IPv4 Inbound route map filter.
     *
     * @return self
     */
    public function setRouteMapIn($route_map_in)
    {
        if (!is_null($route_map_in) && (mb_strlen($route_map_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_in when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_in'] = $route_map_in;

        return $this;
    }

    /**
     * Gets route_map_in6
     *
     * @return string|null
     */
    public function getRouteMapIn6()
    {
        return $this->container['route_map_in6'];
    }

    /**
     * Sets route_map_in6
     *
     * @param string|null $route_map_in6 IPv6 Inbound route map filter.
     *
     * @return self
     */
    public function setRouteMapIn6($route_map_in6)
    {
        if (!is_null($route_map_in6) && (mb_strlen($route_map_in6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_in6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_in6'] = $route_map_in6;

        return $this;
    }

    /**
     * Gets route_map_out
     *
     * @return string|null
     */
    public function getRouteMapOut()
    {
        return $this->container['route_map_out'];
    }

    /**
     * Sets route_map_out
     *
     * @param string|null $route_map_out IPv4 outbound route map filter.
     *
     * @return self
     */
    public function setRouteMapOut($route_map_out)
    {
        if (!is_null($route_map_out) && (mb_strlen($route_map_out) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_out when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_out'] = $route_map_out;

        return $this;
    }

    /**
     * Gets route_map_out_preferable
     *
     * @return string|null
     */
    public function getRouteMapOutPreferable()
    {
        return $this->container['route_map_out_preferable'];
    }

    /**
     * Sets route_map_out_preferable
     *
     * @param string|null $route_map_out_preferable IPv4 outbound route map filter if the peer is preferred.
     *
     * @return self
     */
    public function setRouteMapOutPreferable($route_map_out_preferable)
    {
        if (!is_null($route_map_out_preferable) && (mb_strlen($route_map_out_preferable) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_out_preferable when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_out_preferable'] = $route_map_out_preferable;

        return $this;
    }

    /**
     * Gets route_map_out6
     *
     * @return string|null
     */
    public function getRouteMapOut6()
    {
        return $this->container['route_map_out6'];
    }

    /**
     * Sets route_map_out6
     *
     * @param string|null $route_map_out6 IPv6 Outbound route map filter.
     *
     * @return self
     */
    public function setRouteMapOut6($route_map_out6)
    {
        if (!is_null($route_map_out6) && (mb_strlen($route_map_out6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_out6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_out6'] = $route_map_out6;

        return $this;
    }

    /**
     * Gets route_map_out6_preferable
     *
     * @return string|null
     */
    public function getRouteMapOut6Preferable()
    {
        return $this->container['route_map_out6_preferable'];
    }

    /**
     * Sets route_map_out6_preferable
     *
     * @param string|null $route_map_out6_preferable IPv6 outbound route map filter if the peer is preferred.
     *
     * @return self
     */
    public function setRouteMapOut6Preferable($route_map_out6_preferable)
    {
        if (!is_null($route_map_out6_preferable) && (mb_strlen($route_map_out6_preferable) > 35)) {
            throw new \InvalidArgumentException('invalid length for $route_map_out6_preferable when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['route_map_out6_preferable'] = $route_map_out6_preferable;

        return $this;
    }

    /**
     * Gets send_community
     *
     * @return string|null
     */
    public function getSendCommunity()
    {
        return $this->container['send_community'];
    }

    /**
     * Sets send_community
     *
     * @param string|null $send_community IPv4 Send community attribute to neighbor.    standard:Standard.    extended:Extended.    both:Both.    disable:Disable
     *
     * @return self
     */
    public function setSendCommunity($send_community)
    {
        $allowedValues = $this->getSendCommunityAllowableValues();
        if (!is_null($send_community) && !in_array($send_community, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_community', must be one of '%s'",
                    $send_community,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_community'] = $send_community;

        return $this;
    }

    /**
     * Gets send_community6
     *
     * @return string|null
     */
    public function getSendCommunity6()
    {
        return $this->container['send_community6'];
    }

    /**
     * Sets send_community6
     *
     * @param string|null $send_community6 IPv6 Send community attribute to neighbor.    standard:Standard.    extended:Extended.    both:Both.    disable:Disable
     *
     * @return self
     */
    public function setSendCommunity6($send_community6)
    {
        $allowedValues = $this->getSendCommunity6AllowableValues();
        if (!is_null($send_community6) && !in_array($send_community6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_community6', must be one of '%s'",
                    $send_community6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_community6'] = $send_community6;

        return $this;
    }

    /**
     * Gets keep_alive_timer
     *
     * @return int|null
     */
    public function getKeepAliveTimer()
    {
        return $this->container['keep_alive_timer'];
    }

    /**
     * Sets keep_alive_timer
     *
     * @param int|null $keep_alive_timer Keep alive timer interval (sec).
     *
     * @return self
     */
    public function setKeepAliveTimer($keep_alive_timer)
    {

        if (!is_null($keep_alive_timer) && ($keep_alive_timer > 65535)) {
            throw new \InvalidArgumentException('invalid value for $keep_alive_timer when calling RouterBgpNeighborGroup., must be smaller than or equal to 65535.');
        }
        if (!is_null($keep_alive_timer) && ($keep_alive_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $keep_alive_timer when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['keep_alive_timer'] = $keep_alive_timer;

        return $this;
    }

    /**
     * Gets holdtime_timer
     *
     * @return int|null
     */
    public function getHoldtimeTimer()
    {
        return $this->container['holdtime_timer'];
    }

    /**
     * Sets holdtime_timer
     *
     * @param int|null $holdtime_timer Interval (sec) before peer considered dead.
     *
     * @return self
     */
    public function setHoldtimeTimer($holdtime_timer)
    {

        if (!is_null($holdtime_timer) && ($holdtime_timer > 65535)) {
            throw new \InvalidArgumentException('invalid value for $holdtime_timer when calling RouterBgpNeighborGroup., must be smaller than or equal to 65535.');
        }
        if (!is_null($holdtime_timer) && ($holdtime_timer < 3)) {
            throw new \InvalidArgumentException('invalid value for $holdtime_timer when calling RouterBgpNeighborGroup., must be bigger than or equal to 3.');
        }

        $this->container['holdtime_timer'] = $holdtime_timer;

        return $this;
    }

    /**
     * Gets connect_timer
     *
     * @return int|null
     */
    public function getConnectTimer()
    {
        return $this->container['connect_timer'];
    }

    /**
     * Sets connect_timer
     *
     * @param int|null $connect_timer Interval (sec) for connect timer.
     *
     * @return self
     */
    public function setConnectTimer($connect_timer)
    {

        if (!is_null($connect_timer) && ($connect_timer > 65535)) {
            throw new \InvalidArgumentException('invalid value for $connect_timer when calling RouterBgpNeighborGroup., must be smaller than or equal to 65535.');
        }
        if (!is_null($connect_timer) && ($connect_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $connect_timer when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['connect_timer'] = $connect_timer;

        return $this;
    }

    /**
     * Gets unsuppress_map
     *
     * @return string|null
     */
    public function getUnsuppressMap()
    {
        return $this->container['unsuppress_map'];
    }

    /**
     * Sets unsuppress_map
     *
     * @param string|null $unsuppress_map IPv4 Route map to selectively unsuppress suppressed routes.
     *
     * @return self
     */
    public function setUnsuppressMap($unsuppress_map)
    {
        if (!is_null($unsuppress_map) && (mb_strlen($unsuppress_map) > 35)) {
            throw new \InvalidArgumentException('invalid length for $unsuppress_map when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['unsuppress_map'] = $unsuppress_map;

        return $this;
    }

    /**
     * Gets unsuppress_map6
     *
     * @return string|null
     */
    public function getUnsuppressMap6()
    {
        return $this->container['unsuppress_map6'];
    }

    /**
     * Sets unsuppress_map6
     *
     * @param string|null $unsuppress_map6 IPv6 Route map to selectively unsuppress suppressed routes.
     *
     * @return self
     */
    public function setUnsuppressMap6($unsuppress_map6)
    {
        if (!is_null($unsuppress_map6) && (mb_strlen($unsuppress_map6) > 35)) {
            throw new \InvalidArgumentException('invalid length for $unsuppress_map6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 35.');
        }

        $this->container['unsuppress_map6'] = $unsuppress_map6;

        return $this;
    }

    /**
     * Gets update_source
     *
     * @return string|null
     */
    public function getUpdateSource()
    {
        return $this->container['update_source'];
    }

    /**
     * Sets update_source
     *
     * @param string|null $update_source Interface to use as source IP/IPv6 address of TCP connections.
     *
     * @return self
     */
    public function setUpdateSource($update_source)
    {
        if (!is_null($update_source) && (mb_strlen($update_source) > 15)) {
            throw new \InvalidArgumentException('invalid length for $update_source when calling RouterBgpNeighborGroup., must be smaller than or equal to 15.');
        }

        $this->container['update_source'] = $update_source;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Neighbor weight.
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (!is_null($weight) && ($weight > 65535)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling RouterBgpNeighborGroup., must be smaller than or equal to 65535.');
        }
        if (!is_null($weight) && ($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets restart_time
     *
     * @return int|null
     */
    public function getRestartTime()
    {
        return $this->container['restart_time'];
    }

    /**
     * Sets restart_time
     *
     * @param int|null $restart_time Graceful restart delay time (sec, 0 = global default).
     *
     * @return self
     */
    public function setRestartTime($restart_time)
    {

        if (!is_null($restart_time) && ($restart_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $restart_time when calling RouterBgpNeighborGroup., must be smaller than or equal to 3600.');
        }
        if (!is_null($restart_time) && ($restart_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $restart_time when calling RouterBgpNeighborGroup., must be bigger than or equal to 0.');
        }

        $this->container['restart_time'] = $restart_time;

        return $this;
    }

    /**
     * Gets additional_path
     *
     * @return string|null
     */
    public function getAdditionalPath()
    {
        return $this->container['additional_path'];
    }

    /**
     * Sets additional_path
     *
     * @param string|null $additional_path Enable/disable IPv4 additional-path capability.    send:Enable sending additional paths.    receive:Enable receiving additional paths.    both:Enable sending and receiving additional paths.    disable:Disable additional paths.
     *
     * @return self
     */
    public function setAdditionalPath($additional_path)
    {
        $allowedValues = $this->getAdditionalPathAllowableValues();
        if (!is_null($additional_path) && !in_array($additional_path, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'additional_path', must be one of '%s'",
                    $additional_path,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_path'] = $additional_path;

        return $this;
    }

    /**
     * Gets additional_path6
     *
     * @return string|null
     */
    public function getAdditionalPath6()
    {
        return $this->container['additional_path6'];
    }

    /**
     * Sets additional_path6
     *
     * @param string|null $additional_path6 Enable/disable IPv6 additional-path capability.    send:Enable sending additional paths.    receive:Enable receiving additional paths.    both:Enable sending and receiving additional paths.    disable:Disable additional paths.
     *
     * @return self
     */
    public function setAdditionalPath6($additional_path6)
    {
        $allowedValues = $this->getAdditionalPath6AllowableValues();
        if (!is_null($additional_path6) && !in_array($additional_path6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'additional_path6', must be one of '%s'",
                    $additional_path6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_path6'] = $additional_path6;

        return $this;
    }

    /**
     * Gets adv_additional_path
     *
     * @return int|null
     */
    public function getAdvAdditionalPath()
    {
        return $this->container['adv_additional_path'];
    }

    /**
     * Sets adv_additional_path
     *
     * @param int|null $adv_additional_path Number of IPv4 additional paths that can be advertised to this neighbor.
     *
     * @return self
     */
    public function setAdvAdditionalPath($adv_additional_path)
    {

        if (!is_null($adv_additional_path) && ($adv_additional_path > 255)) {
            throw new \InvalidArgumentException('invalid value for $adv_additional_path when calling RouterBgpNeighborGroup., must be smaller than or equal to 255.');
        }
        if (!is_null($adv_additional_path) && ($adv_additional_path < 2)) {
            throw new \InvalidArgumentException('invalid value for $adv_additional_path when calling RouterBgpNeighborGroup., must be bigger than or equal to 2.');
        }

        $this->container['adv_additional_path'] = $adv_additional_path;

        return $this;
    }

    /**
     * Gets adv_additional_path6
     *
     * @return int|null
     */
    public function getAdvAdditionalPath6()
    {
        return $this->container['adv_additional_path6'];
    }

    /**
     * Sets adv_additional_path6
     *
     * @param int|null $adv_additional_path6 Number of IPv6 additional paths that can be advertised to this neighbor.
     *
     * @return self
     */
    public function setAdvAdditionalPath6($adv_additional_path6)
    {

        if (!is_null($adv_additional_path6) && ($adv_additional_path6 > 255)) {
            throw new \InvalidArgumentException('invalid value for $adv_additional_path6 when calling RouterBgpNeighborGroup., must be smaller than or equal to 255.');
        }
        if (!is_null($adv_additional_path6) && ($adv_additional_path6 < 2)) {
            throw new \InvalidArgumentException('invalid value for $adv_additional_path6 when calling RouterBgpNeighborGroup., must be bigger than or equal to 2.');
        }

        $this->container['adv_additional_path6'] = $adv_additional_path6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


