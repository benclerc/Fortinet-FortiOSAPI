<?php
/**
 * InlineObject196
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject196 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject196 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_196';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'med_tlvs' => 'string',
        '_802_1_tlvs' => 'string',
        '_802_3_tlvs' => 'string',
        'auto_isl' => 'string',
        'auto_isl_hello_timer' => 'int',
        'auto_isl_receive_timeout' => 'int',
        'auto_isl_port_group' => 'int',
        'auto_mclag_icl' => 'string',
        'med_network_policy' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedNetworkPolicy[]',
        'med_location_service' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedLocationService[]',
        'custom_tlvs' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameCustomTlvs[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'med_tlvs' => null,
        '_802_1_tlvs' => null,
        '_802_3_tlvs' => null,
        'auto_isl' => null,
        'auto_isl_hello_timer' => null,
        'auto_isl_receive_timeout' => null,
        'auto_isl_port_group' => null,
        'auto_mclag_icl' => null,
        'med_network_policy' => null,
        'med_location_service' => null,
        'custom_tlvs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'med_tlvs' => 'med-tlvs',
        '_802_1_tlvs' => '802.1-tlvs',
        '_802_3_tlvs' => '802.3-tlvs',
        'auto_isl' => 'auto-isl',
        'auto_isl_hello_timer' => 'auto-isl-hello-timer',
        'auto_isl_receive_timeout' => 'auto-isl-receive-timeout',
        'auto_isl_port_group' => 'auto-isl-port-group',
        'auto_mclag_icl' => 'auto-mclag-icl',
        'med_network_policy' => 'med-network-policy',
        'med_location_service' => 'med-location-service',
        'custom_tlvs' => 'custom-tlvs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'med_tlvs' => 'setMedTlvs',
        '_802_1_tlvs' => 'set8021Tlvs',
        '_802_3_tlvs' => 'set8023Tlvs',
        'auto_isl' => 'setAutoIsl',
        'auto_isl_hello_timer' => 'setAutoIslHelloTimer',
        'auto_isl_receive_timeout' => 'setAutoIslReceiveTimeout',
        'auto_isl_port_group' => 'setAutoIslPortGroup',
        'auto_mclag_icl' => 'setAutoMclagIcl',
        'med_network_policy' => 'setMedNetworkPolicy',
        'med_location_service' => 'setMedLocationService',
        'custom_tlvs' => 'setCustomTlvs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'med_tlvs' => 'getMedTlvs',
        '_802_1_tlvs' => 'get8021Tlvs',
        '_802_3_tlvs' => 'get8023Tlvs',
        'auto_isl' => 'getAutoIsl',
        'auto_isl_hello_timer' => 'getAutoIslHelloTimer',
        'auto_isl_receive_timeout' => 'getAutoIslReceiveTimeout',
        'auto_isl_port_group' => 'getAutoIslPortGroup',
        'auto_mclag_icl' => 'getAutoMclagIcl',
        'med_network_policy' => 'getMedNetworkPolicy',
        'med_location_service' => 'getMedLocationService',
        'custom_tlvs' => 'getCustomTlvs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MED_TLVS_INVENTORY_MANAGEMENT = 'inventory-management';
    const MED_TLVS_NETWORK_POLICY = 'network-policy';
    const MED_TLVS_POWER_MANAGEMENT = 'power-management';
    const MED_TLVS_LOCATION_IDENTIFICATION = 'location-identification';
    const _802_1_TLVS_PORT_VLAN_ID = 'port-vlan-id';
    const _802_3_TLVS_MAX_FRAME_SIZE = 'max-frame-size';
    const _802_3_TLVS_POWER_NEGOTIATION = 'power-negotiation';
    const AUTO_ISL_DISABLE = 'disable';
    const AUTO_ISL_ENABLE = 'enable';
    const AUTO_MCLAG_ICL_DISABLE = 'disable';
    const AUTO_MCLAG_ICL_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMedTlvsAllowableValues()
    {
        return [
            self::MED_TLVS_INVENTORY_MANAGEMENT,
            self::MED_TLVS_NETWORK_POLICY,
            self::MED_TLVS_POWER_MANAGEMENT,
            self::MED_TLVS_LOCATION_IDENTIFICATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function get8021TlvsAllowableValues()
    {
        return [
            self::_802_1_TLVS_PORT_VLAN_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function get8023TlvsAllowableValues()
    {
        return [
            self::_802_3_TLVS_MAX_FRAME_SIZE,
            self::_802_3_TLVS_POWER_NEGOTIATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoIslAllowableValues()
    {
        return [
            self::AUTO_ISL_DISABLE,
            self::AUTO_ISL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoMclagIclAllowableValues()
    {
        return [
            self::AUTO_MCLAG_ICL_DISABLE,
            self::AUTO_MCLAG_ICL_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['med_tlvs'] = $data['med_tlvs'] ?? null;
        $this->container['_802_1_tlvs'] = $data['_802_1_tlvs'] ?? null;
        $this->container['_802_3_tlvs'] = $data['_802_3_tlvs'] ?? null;
        $this->container['auto_isl'] = $data['auto_isl'] ?? null;
        $this->container['auto_isl_hello_timer'] = $data['auto_isl_hello_timer'] ?? null;
        $this->container['auto_isl_receive_timeout'] = $data['auto_isl_receive_timeout'] ?? null;
        $this->container['auto_isl_port_group'] = $data['auto_isl_port_group'] ?? null;
        $this->container['auto_mclag_icl'] = $data['auto_mclag_icl'] ?? null;
        $this->container['med_network_policy'] = $data['med_network_policy'] ?? null;
        $this->container['med_location_service'] = $data['med_location_service'] ?? null;
        $this->container['custom_tlvs'] = $data['custom_tlvs'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getMedTlvsAllowableValues();
        if (!is_null($this->container['med_tlvs']) && !in_array($this->container['med_tlvs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'med_tlvs', must be one of '%s'",
                $this->container['med_tlvs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->get8021TlvsAllowableValues();
        if (!is_null($this->container['_802_1_tlvs']) && !in_array($this->container['_802_1_tlvs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for '_802_1_tlvs', must be one of '%s'",
                $this->container['_802_1_tlvs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->get8023TlvsAllowableValues();
        if (!is_null($this->container['_802_3_tlvs']) && !in_array($this->container['_802_3_tlvs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for '_802_3_tlvs', must be one of '%s'",
                $this->container['_802_3_tlvs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoIslAllowableValues();
        if (!is_null($this->container['auto_isl']) && !in_array($this->container['auto_isl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_isl', must be one of '%s'",
                $this->container['auto_isl'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auto_isl_hello_timer']) && ($this->container['auto_isl_hello_timer'] > 30)) {
            $invalidProperties[] = "invalid value for 'auto_isl_hello_timer', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['auto_isl_hello_timer']) && ($this->container['auto_isl_hello_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'auto_isl_hello_timer', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auto_isl_receive_timeout']) && ($this->container['auto_isl_receive_timeout'] > 90)) {
            $invalidProperties[] = "invalid value for 'auto_isl_receive_timeout', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['auto_isl_receive_timeout']) && ($this->container['auto_isl_receive_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_isl_receive_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_isl_port_group']) && ($this->container['auto_isl_port_group'] > 9)) {
            $invalidProperties[] = "invalid value for 'auto_isl_port_group', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['auto_isl_port_group']) && ($this->container['auto_isl_port_group'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_isl_port_group', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAutoMclagIclAllowableValues();
        if (!is_null($this->container['auto_mclag_icl']) && !in_array($this->container['auto_mclag_icl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_mclag_icl', must be one of '%s'",
                $this->container['auto_mclag_icl'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['med_network_policy']) && (count($this->container['med_network_policy']) > 0)) {
            $invalidProperties[] = "invalid value for 'med_network_policy', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['med_location_service']) && (count($this->container['med_location_service']) > 0)) {
            $invalidProperties[] = "invalid value for 'med_location_service', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['custom_tlvs']) && (count($this->container['custom_tlvs']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_tlvs', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject196., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets med_tlvs
     *
     * @return string|null
     */
    public function getMedTlvs()
    {
        return $this->container['med_tlvs'];
    }

    /**
     * Sets med_tlvs
     *
     * @param string|null $med_tlvs Transmitted LLDP-MED TLVs (type-length-value descriptions).    inventory-management:Inventory management TLVs.    network-policy:Network policy TLVs.    power-management:Power manangement TLVs.    location-identification:Location identificaion TLVs.
     *
     * @return self
     */
    public function setMedTlvs($med_tlvs)
    {
        $allowedValues = $this->getMedTlvsAllowableValues();
        if (!is_null($med_tlvs) && !in_array($med_tlvs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'med_tlvs', must be one of '%s'",
                    $med_tlvs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['med_tlvs'] = $med_tlvs;

        return $this;
    }

    /**
     * Gets _802_1_tlvs
     *
     * @return string|null
     */
    public function get8021Tlvs()
    {
        return $this->container['_802_1_tlvs'];
    }

    /**
     * Sets _802_1_tlvs
     *
     * @param string|null $_802_1_tlvs Transmitted IEEE 802.1 TLVs.    port-vlan-id:Port native VLAN TLV.
     *
     * @return self
     */
    public function set8021Tlvs($_802_1_tlvs)
    {
        $allowedValues = $this->get8021TlvsAllowableValues();
        if (!is_null($_802_1_tlvs) && !in_array($_802_1_tlvs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for '_802_1_tlvs', must be one of '%s'",
                    $_802_1_tlvs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['_802_1_tlvs'] = $_802_1_tlvs;

        return $this;
    }

    /**
     * Gets _802_3_tlvs
     *
     * @return string|null
     */
    public function get8023Tlvs()
    {
        return $this->container['_802_3_tlvs'];
    }

    /**
     * Sets _802_3_tlvs
     *
     * @param string|null $_802_3_tlvs Transmitted IEEE 802.3 TLVs.    max-frame-size:Maximum frame size TLV.    power-negotiation:PoE+ classification TLV.
     *
     * @return self
     */
    public function set8023Tlvs($_802_3_tlvs)
    {
        $allowedValues = $this->get8023TlvsAllowableValues();
        if (!is_null($_802_3_tlvs) && !in_array($_802_3_tlvs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for '_802_3_tlvs', must be one of '%s'",
                    $_802_3_tlvs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['_802_3_tlvs'] = $_802_3_tlvs;

        return $this;
    }

    /**
     * Gets auto_isl
     *
     * @return string|null
     */
    public function getAutoIsl()
    {
        return $this->container['auto_isl'];
    }

    /**
     * Sets auto_isl
     *
     * @param string|null $auto_isl Enable/disable auto inter-switch LAG.    disable:Disable automatic MCLAG inter chassis link.    enable:Enable automatic MCLAG inter chassis link.
     *
     * @return self
     */
    public function setAutoIsl($auto_isl)
    {
        $allowedValues = $this->getAutoIslAllowableValues();
        if (!is_null($auto_isl) && !in_array($auto_isl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_isl', must be one of '%s'",
                    $auto_isl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_isl'] = $auto_isl;

        return $this;
    }

    /**
     * Gets auto_isl_hello_timer
     *
     * @return int|null
     */
    public function getAutoIslHelloTimer()
    {
        return $this->container['auto_isl_hello_timer'];
    }

    /**
     * Sets auto_isl_hello_timer
     *
     * @param int|null $auto_isl_hello_timer Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
     *
     * @return self
     */
    public function setAutoIslHelloTimer($auto_isl_hello_timer)
    {

        if (!is_null($auto_isl_hello_timer) && ($auto_isl_hello_timer > 30)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_hello_timer when calling InlineObject196., must be smaller than or equal to 30.');
        }
        if (!is_null($auto_isl_hello_timer) && ($auto_isl_hello_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_hello_timer when calling InlineObject196., must be bigger than or equal to 1.');
        }

        $this->container['auto_isl_hello_timer'] = $auto_isl_hello_timer;

        return $this;
    }

    /**
     * Gets auto_isl_receive_timeout
     *
     * @return int|null
     */
    public function getAutoIslReceiveTimeout()
    {
        return $this->container['auto_isl_receive_timeout'];
    }

    /**
     * Sets auto_isl_receive_timeout
     *
     * @param int|null $auto_isl_receive_timeout Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
     *
     * @return self
     */
    public function setAutoIslReceiveTimeout($auto_isl_receive_timeout)
    {

        if (!is_null($auto_isl_receive_timeout) && ($auto_isl_receive_timeout > 90)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_receive_timeout when calling InlineObject196., must be smaller than or equal to 90.');
        }
        if (!is_null($auto_isl_receive_timeout) && ($auto_isl_receive_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_receive_timeout when calling InlineObject196., must be bigger than or equal to 0.');
        }

        $this->container['auto_isl_receive_timeout'] = $auto_isl_receive_timeout;

        return $this;
    }

    /**
     * Gets auto_isl_port_group
     *
     * @return int|null
     */
    public function getAutoIslPortGroup()
    {
        return $this->container['auto_isl_port_group'];
    }

    /**
     * Sets auto_isl_port_group
     *
     * @param int|null $auto_isl_port_group Auto inter-switch LAG port group ID (0 - 9).
     *
     * @return self
     */
    public function setAutoIslPortGroup($auto_isl_port_group)
    {

        if (!is_null($auto_isl_port_group) && ($auto_isl_port_group > 9)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_port_group when calling InlineObject196., must be smaller than or equal to 9.');
        }
        if (!is_null($auto_isl_port_group) && ($auto_isl_port_group < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_isl_port_group when calling InlineObject196., must be bigger than or equal to 0.');
        }

        $this->container['auto_isl_port_group'] = $auto_isl_port_group;

        return $this;
    }

    /**
     * Gets auto_mclag_icl
     *
     * @return string|null
     */
    public function getAutoMclagIcl()
    {
        return $this->container['auto_mclag_icl'];
    }

    /**
     * Sets auto_mclag_icl
     *
     * @param string|null $auto_mclag_icl Enable/disable MCLAG inter chassis link.    disable:Disable auto inter-switch-LAG.    enable:Enable auto inter-switch-LAG.
     *
     * @return self
     */
    public function setAutoMclagIcl($auto_mclag_icl)
    {
        $allowedValues = $this->getAutoMclagIclAllowableValues();
        if (!is_null($auto_mclag_icl) && !in_array($auto_mclag_icl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_mclag_icl', must be one of '%s'",
                    $auto_mclag_icl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_mclag_icl'] = $auto_mclag_icl;

        return $this;
    }

    /**
     * Gets med_network_policy
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedNetworkPolicy[]|null
     */
    public function getMedNetworkPolicy()
    {
        return $this->container['med_network_policy'];
    }

    /**
     * Sets med_network_policy
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedNetworkPolicy[]|null $med_network_policy Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories.
     *
     * @return self
     */
    public function setMedNetworkPolicy($med_network_policy)
    {

        if (!is_null($med_network_policy) && (count($med_network_policy) > 0)) {
            throw new \InvalidArgumentException('invalid value for $med_network_policy when calling InlineObject196., number of items must be less than or equal to 0.');
        }
        $this->container['med_network_policy'] = $med_network_policy;

        return $this;
    }

    /**
     * Gets med_location_service
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedLocationService[]|null
     */
    public function getMedLocationService()
    {
        return $this->container['med_location_service'];
    }

    /**
     * Sets med_location_service
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameMedLocationService[]|null $med_location_service Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories.
     *
     * @return self
     */
    public function setMedLocationService($med_location_service)
    {

        if (!is_null($med_location_service) && (count($med_location_service) > 0)) {
            throw new \InvalidArgumentException('invalid value for $med_location_service when calling InlineObject196., number of items must be less than or equal to 0.');
        }
        $this->container['med_location_service'] = $med_location_service;

        return $this;
    }

    /**
     * Gets custom_tlvs
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameCustomTlvs[]|null
     */
    public function getCustomTlvs()
    {
        return $this->container['custom_tlvs'];
    }

    /**
     * Sets custom_tlvs
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerLldpProfileNameCustomTlvs[]|null $custom_tlvs Configuration method to edit custom TLV entries.
     *
     * @return self
     */
    public function setCustomTlvs($custom_tlvs)
    {

        if (!is_null($custom_tlvs) && (count($custom_tlvs) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_tlvs when calling InlineObject196., number of items must be less than or equal to 0.');
        }
        $this->container['custom_tlvs'] = $custom_tlvs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


