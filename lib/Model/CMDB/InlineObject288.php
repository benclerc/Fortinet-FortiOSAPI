<?php
/**
 * InlineObject288
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject288 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject288 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_288';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'upstream_ip' => 'string',
        'upstream_port' => 'int',
        'group_name' => 'string',
        'group_password' => 'string',
        'accept_auth_by_cert' => 'string',
        'management_ip' => 'string',
        'management_port' => 'int',
        'authorization_request_type' => 'string',
        'certificate' => 'string',
        'fabric_workers' => 'int',
        'configuration_sync' => 'string',
        'fabric_object_unification' => 'string',
        'saml_configuration_sync' => 'string',
        'trusted_list' => '\Fortigate\FortiOS\Model\CMDB\SystemCsfTrustedList[]',
        'fabric_device' => '\Fortigate\FortiOS\Model\CMDB\SystemCsfFabricDevice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'upstream_ip' => 'ipv4',
        'upstream_port' => null,
        'group_name' => null,
        'group_password' => 'password',
        'accept_auth_by_cert' => null,
        'management_ip' => null,
        'management_port' => null,
        'authorization_request_type' => null,
        'certificate' => null,
        'fabric_workers' => null,
        'configuration_sync' => null,
        'fabric_object_unification' => null,
        'saml_configuration_sync' => null,
        'trusted_list' => null,
        'fabric_device' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'upstream_ip' => 'upstream-ip',
        'upstream_port' => 'upstream-port',
        'group_name' => 'group-name',
        'group_password' => 'group-password',
        'accept_auth_by_cert' => 'accept-auth-by-cert',
        'management_ip' => 'management-ip',
        'management_port' => 'management-port',
        'authorization_request_type' => 'authorization-request-type',
        'certificate' => 'certificate',
        'fabric_workers' => 'fabric-workers',
        'configuration_sync' => 'configuration-sync',
        'fabric_object_unification' => 'fabric-object-unification',
        'saml_configuration_sync' => 'saml-configuration-sync',
        'trusted_list' => 'trusted-list',
        'fabric_device' => 'fabric-device'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'upstream_ip' => 'setUpstreamIp',
        'upstream_port' => 'setUpstreamPort',
        'group_name' => 'setGroupName',
        'group_password' => 'setGroupPassword',
        'accept_auth_by_cert' => 'setAcceptAuthByCert',
        'management_ip' => 'setManagementIp',
        'management_port' => 'setManagementPort',
        'authorization_request_type' => 'setAuthorizationRequestType',
        'certificate' => 'setCertificate',
        'fabric_workers' => 'setFabricWorkers',
        'configuration_sync' => 'setConfigurationSync',
        'fabric_object_unification' => 'setFabricObjectUnification',
        'saml_configuration_sync' => 'setSamlConfigurationSync',
        'trusted_list' => 'setTrustedList',
        'fabric_device' => 'setFabricDevice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'upstream_ip' => 'getUpstreamIp',
        'upstream_port' => 'getUpstreamPort',
        'group_name' => 'getGroupName',
        'group_password' => 'getGroupPassword',
        'accept_auth_by_cert' => 'getAcceptAuthByCert',
        'management_ip' => 'getManagementIp',
        'management_port' => 'getManagementPort',
        'authorization_request_type' => 'getAuthorizationRequestType',
        'certificate' => 'getCertificate',
        'fabric_workers' => 'getFabricWorkers',
        'configuration_sync' => 'getConfigurationSync',
        'fabric_object_unification' => 'getFabricObjectUnification',
        'saml_configuration_sync' => 'getSamlConfigurationSync',
        'trusted_list' => 'getTrustedList',
        'fabric_device' => 'getFabricDevice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const ACCEPT_AUTH_BY_CERT_DISABLE = 'disable';
    const ACCEPT_AUTH_BY_CERT_ENABLE = 'enable';
    const AUTHORIZATION_REQUEST_TYPE_SERIAL = 'serial';
    const AUTHORIZATION_REQUEST_TYPE_CERTIFICATE = 'certificate';
    const CONFIGURATION_SYNC__DEFAULT = 'default';
    const CONFIGURATION_SYNC_LOCAL = 'local';
    const FABRIC_OBJECT_UNIFICATION__DEFAULT = 'default';
    const FABRIC_OBJECT_UNIFICATION_LOCAL = 'local';
    const SAML_CONFIGURATION_SYNC__DEFAULT = 'default';
    const SAML_CONFIGURATION_SYNC_LOCAL = 'local';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptAuthByCertAllowableValues()
    {
        return [
            self::ACCEPT_AUTH_BY_CERT_DISABLE,
            self::ACCEPT_AUTH_BY_CERT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationRequestTypeAllowableValues()
    {
        return [
            self::AUTHORIZATION_REQUEST_TYPE_SERIAL,
            self::AUTHORIZATION_REQUEST_TYPE_CERTIFICATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConfigurationSyncAllowableValues()
    {
        return [
            self::CONFIGURATION_SYNC__DEFAULT,
            self::CONFIGURATION_SYNC_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFabricObjectUnificationAllowableValues()
    {
        return [
            self::FABRIC_OBJECT_UNIFICATION__DEFAULT,
            self::FABRIC_OBJECT_UNIFICATION_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSamlConfigurationSyncAllowableValues()
    {
        return [
            self::SAML_CONFIGURATION_SYNC__DEFAULT,
            self::SAML_CONFIGURATION_SYNC_LOCAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['upstream_ip'] = $data['upstream_ip'] ?? null;
        $this->container['upstream_port'] = $data['upstream_port'] ?? null;
        $this->container['group_name'] = $data['group_name'] ?? null;
        $this->container['group_password'] = $data['group_password'] ?? null;
        $this->container['accept_auth_by_cert'] = $data['accept_auth_by_cert'] ?? null;
        $this->container['management_ip'] = $data['management_ip'] ?? null;
        $this->container['management_port'] = $data['management_port'] ?? null;
        $this->container['authorization_request_type'] = $data['authorization_request_type'] ?? null;
        $this->container['certificate'] = $data['certificate'] ?? null;
        $this->container['fabric_workers'] = $data['fabric_workers'] ?? null;
        $this->container['configuration_sync'] = $data['configuration_sync'] ?? null;
        $this->container['fabric_object_unification'] = $data['fabric_object_unification'] ?? null;
        $this->container['saml_configuration_sync'] = $data['saml_configuration_sync'] ?? null;
        $this->container['trusted_list'] = $data['trusted_list'] ?? null;
        $this->container['fabric_device'] = $data['fabric_device'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['upstream_port']) && ($this->container['upstream_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'upstream_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['upstream_port']) && ($this->container['upstream_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'upstream_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['group_name']) && (mb_strlen($this->container['group_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'group_name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAcceptAuthByCertAllowableValues();
        if (!is_null($this->container['accept_auth_by_cert']) && !in_array($this->container['accept_auth_by_cert'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'accept_auth_by_cert', must be one of '%s'",
                $this->container['accept_auth_by_cert'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['management_ip']) && (mb_strlen($this->container['management_ip']) > 255)) {
            $invalidProperties[] = "invalid value for 'management_ip', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['management_port']) && ($this->container['management_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'management_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['management_port']) && ($this->container['management_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'management_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAuthorizationRequestTypeAllowableValues();
        if (!is_null($this->container['authorization_request_type']) && !in_array($this->container['authorization_request_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization_request_type', must be one of '%s'",
                $this->container['authorization_request_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['certificate']) && (mb_strlen($this->container['certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['fabric_workers']) && ($this->container['fabric_workers'] > 4)) {
            $invalidProperties[] = "invalid value for 'fabric_workers', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['fabric_workers']) && ($this->container['fabric_workers'] < 1)) {
            $invalidProperties[] = "invalid value for 'fabric_workers', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getConfigurationSyncAllowableValues();
        if (!is_null($this->container['configuration_sync']) && !in_array($this->container['configuration_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'configuration_sync', must be one of '%s'",
                $this->container['configuration_sync'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFabricObjectUnificationAllowableValues();
        if (!is_null($this->container['fabric_object_unification']) && !in_array($this->container['fabric_object_unification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fabric_object_unification', must be one of '%s'",
                $this->container['fabric_object_unification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSamlConfigurationSyncAllowableValues();
        if (!is_null($this->container['saml_configuration_sync']) && !in_array($this->container['saml_configuration_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'saml_configuration_sync', must be one of '%s'",
                $this->container['saml_configuration_sync'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['trusted_list']) && (count($this->container['trusted_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'trusted_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['fabric_device']) && (count($this->container['fabric_device']) > 0)) {
            $invalidProperties[] = "invalid value for 'fabric_device', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable Security Fabric.    enable:Enable Security Fabric.    disable:Disable Security Fabric.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets upstream_ip
     *
     * @return string|null
     */
    public function getUpstreamIp()
    {
        return $this->container['upstream_ip'];
    }

    /**
     * Sets upstream_ip
     *
     * @param string|null $upstream_ip IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
     *
     * @return self
     */
    public function setUpstreamIp($upstream_ip)
    {
        $this->container['upstream_ip'] = $upstream_ip;

        return $this;
    }

    /**
     * Gets upstream_port
     *
     * @return int|null
     */
    public function getUpstreamPort()
    {
        return $this->container['upstream_port'];
    }

    /**
     * Sets upstream_port
     *
     * @param int|null $upstream_port The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
     *
     * @return self
     */
    public function setUpstreamPort($upstream_port)
    {

        if (!is_null($upstream_port) && ($upstream_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $upstream_port when calling InlineObject288., must be smaller than or equal to 65535.');
        }
        if (!is_null($upstream_port) && ($upstream_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $upstream_port when calling InlineObject288., must be bigger than or equal to 1.');
        }

        $this->container['upstream_port'] = $upstream_port;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (!is_null($group_name) && (mb_strlen($group_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $group_name when calling InlineObject288., must be smaller than or equal to 35.');
        }

        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets group_password
     *
     * @return string|null
     */
    public function getGroupPassword()
    {
        return $this->container['group_password'];
    }

    /**
     * Sets group_password
     *
     * @param string|null $group_password Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
     *
     * @return self
     */
    public function setGroupPassword($group_password)
    {
        $this->container['group_password'] = $group_password;

        return $this;
    }

    /**
     * Gets accept_auth_by_cert
     *
     * @return string|null
     */
    public function getAcceptAuthByCert()
    {
        return $this->container['accept_auth_by_cert'];
    }

    /**
     * Sets accept_auth_by_cert
     *
     * @param string|null $accept_auth_by_cert Accept connections with unknown certificates and ask admin for approval.    disable:Do not accept SSL connections with unknown certificates.    enable:Accept SSL connections without automatic certificate verification.
     *
     * @return self
     */
    public function setAcceptAuthByCert($accept_auth_by_cert)
    {
        $allowedValues = $this->getAcceptAuthByCertAllowableValues();
        if (!is_null($accept_auth_by_cert) && !in_array($accept_auth_by_cert, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'accept_auth_by_cert', must be one of '%s'",
                    $accept_auth_by_cert,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accept_auth_by_cert'] = $accept_auth_by_cert;

        return $this;
    }

    /**
     * Gets management_ip
     *
     * @return string|null
     */
    public function getManagementIp()
    {
        return $this->container['management_ip'];
    }

    /**
     * Sets management_ip
     *
     * @param string|null $management_ip Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
     *
     * @return self
     */
    public function setManagementIp($management_ip)
    {
        if (!is_null($management_ip) && (mb_strlen($management_ip) > 255)) {
            throw new \InvalidArgumentException('invalid length for $management_ip when calling InlineObject288., must be smaller than or equal to 255.');
        }

        $this->container['management_ip'] = $management_ip;

        return $this;
    }

    /**
     * Gets management_port
     *
     * @return int|null
     */
    public function getManagementPort()
    {
        return $this->container['management_port'];
    }

    /**
     * Sets management_port
     *
     * @param int|null $management_port Overriding port for management connection (Overrides admin port).
     *
     * @return self
     */
    public function setManagementPort($management_port)
    {

        if (!is_null($management_port) && ($management_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $management_port when calling InlineObject288., must be smaller than or equal to 65535.');
        }
        if (!is_null($management_port) && ($management_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $management_port when calling InlineObject288., must be bigger than or equal to 0.');
        }

        $this->container['management_port'] = $management_port;

        return $this;
    }

    /**
     * Gets authorization_request_type
     *
     * @return string|null
     */
    public function getAuthorizationRequestType()
    {
        return $this->container['authorization_request_type'];
    }

    /**
     * Sets authorization_request_type
     *
     * @param string|null $authorization_request_type Authorization request type.    serial:Request verification by serial number.    certificate:Request verification by certificate.
     *
     * @return self
     */
    public function setAuthorizationRequestType($authorization_request_type)
    {
        $allowedValues = $this->getAuthorizationRequestTypeAllowableValues();
        if (!is_null($authorization_request_type) && !in_array($authorization_request_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization_request_type', must be one of '%s'",
                    $authorization_request_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization_request_type'] = $authorization_request_type;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate Certificate.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (!is_null($certificate) && (mb_strlen($certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certificate when calling InlineObject288., must be smaller than or equal to 35.');
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets fabric_workers
     *
     * @return int|null
     */
    public function getFabricWorkers()
    {
        return $this->container['fabric_workers'];
    }

    /**
     * Sets fabric_workers
     *
     * @param int|null $fabric_workers Number of worker processes for Security Fabric daemon.
     *
     * @return self
     */
    public function setFabricWorkers($fabric_workers)
    {

        if (!is_null($fabric_workers) && ($fabric_workers > 4)) {
            throw new \InvalidArgumentException('invalid value for $fabric_workers when calling InlineObject288., must be smaller than or equal to 4.');
        }
        if (!is_null($fabric_workers) && ($fabric_workers < 1)) {
            throw new \InvalidArgumentException('invalid value for $fabric_workers when calling InlineObject288., must be bigger than or equal to 1.');
        }

        $this->container['fabric_workers'] = $fabric_workers;

        return $this;
    }

    /**
     * Gets configuration_sync
     *
     * @return string|null
     */
    public function getConfigurationSync()
    {
        return $this->container['configuration_sync'];
    }

    /**
     * Sets configuration_sync
     *
     * @param string|null $configuration_sync Configuration sync mode.    default:Synchronize configuration for FortiAnalyzer, FortiSandbox, and Central Management to root node.    local:Do not synchronize configuration with root node.
     *
     * @return self
     */
    public function setConfigurationSync($configuration_sync)
    {
        $allowedValues = $this->getConfigurationSyncAllowableValues();
        if (!is_null($configuration_sync) && !in_array($configuration_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'configuration_sync', must be one of '%s'",
                    $configuration_sync,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['configuration_sync'] = $configuration_sync;

        return $this;
    }

    /**
     * Gets fabric_object_unification
     *
     * @return string|null
     */
    public function getFabricObjectUnification()
    {
        return $this->container['fabric_object_unification'];
    }

    /**
     * Sets fabric_object_unification
     *
     * @param string|null $fabric_object_unification Fabric CMDB Object Unification.    default:Global CMDB objects will be synchronized in Security Fabric.    local:Global CMDB objects will not be synchronized to and from this device.
     *
     * @return self
     */
    public function setFabricObjectUnification($fabric_object_unification)
    {
        $allowedValues = $this->getFabricObjectUnificationAllowableValues();
        if (!is_null($fabric_object_unification) && !in_array($fabric_object_unification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fabric_object_unification', must be one of '%s'",
                    $fabric_object_unification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fabric_object_unification'] = $fabric_object_unification;

        return $this;
    }

    /**
     * Gets saml_configuration_sync
     *
     * @return string|null
     */
    public function getSamlConfigurationSync()
    {
        return $this->container['saml_configuration_sync'];
    }

    /**
     * Sets saml_configuration_sync
     *
     * @param string|null $saml_configuration_sync SAML setting configuration synchronization.    default:SAML setting for fabric members is created by fabric root.    local:Do not apply SAML configuration generated by root.
     *
     * @return self
     */
    public function setSamlConfigurationSync($saml_configuration_sync)
    {
        $allowedValues = $this->getSamlConfigurationSyncAllowableValues();
        if (!is_null($saml_configuration_sync) && !in_array($saml_configuration_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'saml_configuration_sync', must be one of '%s'",
                    $saml_configuration_sync,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['saml_configuration_sync'] = $saml_configuration_sync;

        return $this;
    }

    /**
     * Gets trusted_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemCsfTrustedList[]|null
     */
    public function getTrustedList()
    {
        return $this->container['trusted_list'];
    }

    /**
     * Sets trusted_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemCsfTrustedList[]|null $trusted_list Pre-authorized and blocked security fabric nodes.
     *
     * @return self
     */
    public function setTrustedList($trusted_list)
    {

        if (!is_null($trusted_list) && (count($trusted_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $trusted_list when calling InlineObject288., number of items must be less than or equal to 0.');
        }
        $this->container['trusted_list'] = $trusted_list;

        return $this;
    }

    /**
     * Gets fabric_device
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemCsfFabricDevice[]|null
     */
    public function getFabricDevice()
    {
        return $this->container['fabric_device'];
    }

    /**
     * Sets fabric_device
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemCsfFabricDevice[]|null $fabric_device Fabric device configuration.
     *
     * @return self
     */
    public function setFabricDevice($fabric_device)
    {

        if (!is_null($fabric_device) && (count($fabric_device) > 0)) {
            throw new \InvalidArgumentException('invalid value for $fabric_device when calling InlineObject288., number of items must be less than or equal to 0.');
        }
        $this->container['fabric_device'] = $fabric_device;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


