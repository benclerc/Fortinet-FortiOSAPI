<?php
/**
 * InlineObject61
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject61 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject61 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_61';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'modem_id' => 'string',
        'type' => 'string',
        'slot' => 'string',
        'iccid' => 'string',
        'carrier' => 'string',
        'apn' => 'string',
        'auth_type' => 'string',
        'username' => 'string',
        'password' => 'string',
        'pdn' => 'string',
        'signal_threshold' => 'int',
        'signal_period' => 'int',
        'capacity' => 'int',
        'monthly_fee' => 'int',
        'billing_date' => 'int',
        'overage' => 'string',
        'preferred_subnet' => 'int',
        'private_network' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'modem_id' => null,
        'type' => null,
        'slot' => null,
        'iccid' => null,
        'carrier' => null,
        'apn' => null,
        'auth_type' => null,
        'username' => null,
        'password' => 'password',
        'pdn' => null,
        'signal_threshold' => null,
        'signal_period' => null,
        'capacity' => null,
        'monthly_fee' => null,
        'billing_date' => null,
        'overage' => null,
        'preferred_subnet' => null,
        'private_network' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'modem_id' => 'modem-id',
        'type' => 'type',
        'slot' => 'slot',
        'iccid' => 'iccid',
        'carrier' => 'carrier',
        'apn' => 'apn',
        'auth_type' => 'auth-type',
        'username' => 'username',
        'password' => 'password',
        'pdn' => 'pdn',
        'signal_threshold' => 'signal-threshold',
        'signal_period' => 'signal-period',
        'capacity' => 'capacity',
        'monthly_fee' => 'monthly-fee',
        'billing_date' => 'billing-date',
        'overage' => 'overage',
        'preferred_subnet' => 'preferred-subnet',
        'private_network' => 'private-network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'modem_id' => 'setModemId',
        'type' => 'setType',
        'slot' => 'setSlot',
        'iccid' => 'setIccid',
        'carrier' => 'setCarrier',
        'apn' => 'setApn',
        'auth_type' => 'setAuthType',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'pdn' => 'setPdn',
        'signal_threshold' => 'setSignalThreshold',
        'signal_period' => 'setSignalPeriod',
        'capacity' => 'setCapacity',
        'monthly_fee' => 'setMonthlyFee',
        'billing_date' => 'setBillingDate',
        'overage' => 'setOverage',
        'preferred_subnet' => 'setPreferredSubnet',
        'private_network' => 'setPrivateNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'modem_id' => 'getModemId',
        'type' => 'getType',
        'slot' => 'getSlot',
        'iccid' => 'getIccid',
        'carrier' => 'getCarrier',
        'apn' => 'getApn',
        'auth_type' => 'getAuthType',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'pdn' => 'getPdn',
        'signal_threshold' => 'getSignalThreshold',
        'signal_period' => 'getSignalPeriod',
        'capacity' => 'getCapacity',
        'monthly_fee' => 'getMonthlyFee',
        'billing_date' => 'getBillingDate',
        'overage' => 'getOverage',
        'preferred_subnet' => 'getPreferredSubnet',
        'private_network' => 'getPrivateNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODEM_ID_MODEM1 = 'modem1';
    const MODEM_ID_MODEM2 = 'modem2';
    const MODEM_ID_ALL = 'all';
    const TYPE_CARRIER = 'carrier';
    const TYPE_SLOT = 'slot';
    const TYPE_ICCID = 'iccid';
    const TYPE_GENERIC = 'generic';
    const SLOT_SIM1 = 'sim1';
    const SLOT_SIM2 = 'sim2';
    const AUTH_TYPE_NONE = 'none';
    const AUTH_TYPE_PAP = 'pap';
    const AUTH_TYPE_CHAP = 'chap';
    const PDN_IPV4_ONLY = 'ipv4-only';
    const PDN_IPV6_ONLY = 'ipv6-only';
    const PDN_IPV4_IPV6 = 'ipv4-ipv6';
    const OVERAGE_DISABLE = 'disable';
    const OVERAGE_ENABLE = 'enable';
    const PRIVATE_NETWORK_DISABLE = 'disable';
    const PRIVATE_NETWORK_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModemIdAllowableValues()
    {
        return [
            self::MODEM_ID_MODEM1,
            self::MODEM_ID_MODEM2,
            self::MODEM_ID_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARRIER,
            self::TYPE_SLOT,
            self::TYPE_ICCID,
            self::TYPE_GENERIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSlotAllowableValues()
    {
        return [
            self::SLOT_SIM1,
            self::SLOT_SIM2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_NONE,
            self::AUTH_TYPE_PAP,
            self::AUTH_TYPE_CHAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdnAllowableValues()
    {
        return [
            self::PDN_IPV4_ONLY,
            self::PDN_IPV6_ONLY,
            self::PDN_IPV4_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverageAllowableValues()
    {
        return [
            self::OVERAGE_DISABLE,
            self::OVERAGE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivateNetworkAllowableValues()
    {
        return [
            self::PRIVATE_NETWORK_DISABLE,
            self::PRIVATE_NETWORK_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['modem_id'] = $data['modem_id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['slot'] = $data['slot'] ?? null;
        $this->container['iccid'] = $data['iccid'] ?? null;
        $this->container['carrier'] = $data['carrier'] ?? null;
        $this->container['apn'] = $data['apn'] ?? null;
        $this->container['auth_type'] = $data['auth_type'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['pdn'] = $data['pdn'] ?? null;
        $this->container['signal_threshold'] = $data['signal_threshold'] ?? null;
        $this->container['signal_period'] = $data['signal_period'] ?? null;
        $this->container['capacity'] = $data['capacity'] ?? null;
        $this->container['monthly_fee'] = $data['monthly_fee'] ?? null;
        $this->container['billing_date'] = $data['billing_date'] ?? null;
        $this->container['overage'] = $data['overage'] ?? null;
        $this->container['preferred_subnet'] = $data['preferred_subnet'] ?? null;
        $this->container['private_network'] = $data['private_network'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 31)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getModemIdAllowableValues();
        if (!is_null($this->container['modem_id']) && !in_array($this->container['modem_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'modem_id', must be one of '%s'",
                $this->container['modem_id'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSlotAllowableValues();
        if (!is_null($this->container['slot']) && !in_array($this->container['slot'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'slot', must be one of '%s'",
                $this->container['slot'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['iccid']) && (mb_strlen($this->container['iccid']) > 31)) {
            $invalidProperties[] = "invalid value for 'iccid', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['carrier']) && (mb_strlen($this->container['carrier']) > 31)) {
            $invalidProperties[] = "invalid value for 'carrier', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['apn']) && (mb_strlen($this->container['apn']) > 63)) {
            $invalidProperties[] = "invalid value for 'apn', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 31)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getPdnAllowableValues();
        if (!is_null($this->container['pdn']) && !in_array($this->container['pdn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdn', must be one of '%s'",
                $this->container['pdn'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['signal_threshold']) && ($this->container['signal_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'signal_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['signal_threshold']) && ($this->container['signal_threshold'] < 50)) {
            $invalidProperties[] = "invalid value for 'signal_threshold', must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['signal_period']) && ($this->container['signal_period'] > 18000)) {
            $invalidProperties[] = "invalid value for 'signal_period', must be smaller than or equal to 18000.";
        }

        if (!is_null($this->container['signal_period']) && ($this->container['signal_period'] < 600)) {
            $invalidProperties[] = "invalid value for 'signal_period', must be bigger than or equal to 600.";
        }

        if (!is_null($this->container['capacity']) && ($this->container['capacity'] > 102400000)) {
            $invalidProperties[] = "invalid value for 'capacity', must be smaller than or equal to 102400000.";
        }

        if (!is_null($this->container['capacity']) && ($this->container['capacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'capacity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['monthly_fee']) && ($this->container['monthly_fee'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'monthly_fee', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['monthly_fee']) && ($this->container['monthly_fee'] < 0)) {
            $invalidProperties[] = "invalid value for 'monthly_fee', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['billing_date']) && ($this->container['billing_date'] > 31)) {
            $invalidProperties[] = "invalid value for 'billing_date', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['billing_date']) && ($this->container['billing_date'] < 1)) {
            $invalidProperties[] = "invalid value for 'billing_date', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getOverageAllowableValues();
        if (!is_null($this->container['overage']) && !in_array($this->container['overage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'overage', must be one of '%s'",
                $this->container['overage'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['preferred_subnet']) && ($this->container['preferred_subnet'] > 32)) {
            $invalidProperties[] = "invalid value for 'preferred_subnet', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['preferred_subnet']) && ($this->container['preferred_subnet'] < 8)) {
            $invalidProperties[] = "invalid value for 'preferred_subnet', must be bigger than or equal to 8.";
        }

        $allowedValues = $this->getPrivateNetworkAllowableValues();
        if (!is_null($this->container['private_network']) && !in_array($this->container['private_network'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'private_network', must be one of '%s'",
                $this->container['private_network'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name FortiExtender dataplan name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 31)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject61., must be smaller than or equal to 31.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets modem_id
     *
     * @return string|null
     */
    public function getModemId()
    {
        return $this->container['modem_id'];
    }

    /**
     * Sets modem_id
     *
     * @param string|null $modem_id Dataplan's modem specifics, if any.    modem1:Modem one.    modem2:Modem two.    all:All modems.
     *
     * @return self
     */
    public function setModemId($modem_id)
    {
        $allowedValues = $this->getModemIdAllowableValues();
        if (!is_null($modem_id) && !in_array($modem_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'modem_id', must be one of '%s'",
                    $modem_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modem_id'] = $modem_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type preferences configuration.    carrier:Assign by SIM carrier.    slot:Assign to SIM slot 1 or 2.    iccid:Assign to a specific SIM by ICCID.    generic:Compatible with any SIM. Assigned if no other dataplan matches the chosen SIM.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets slot
     *
     * @return string|null
     */
    public function getSlot()
    {
        return $this->container['slot'];
    }

    /**
     * Sets slot
     *
     * @param string|null $slot SIM slot configuration.    sim1:Sim slot one.    sim2:Sim slot two.
     *
     * @return self
     */
    public function setSlot($slot)
    {
        $allowedValues = $this->getSlotAllowableValues();
        if (!is_null($slot) && !in_array($slot, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'slot', must be one of '%s'",
                    $slot,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['slot'] = $slot;

        return $this;
    }

    /**
     * Gets iccid
     *
     * @return string|null
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     *
     * @param string|null $iccid ICCID configuration.
     *
     * @return self
     */
    public function setIccid($iccid)
    {
        if (!is_null($iccid) && (mb_strlen($iccid) > 31)) {
            throw new \InvalidArgumentException('invalid length for $iccid when calling InlineObject61., must be smaller than or equal to 31.');
        }

        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Carrier configuration.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (!is_null($carrier) && (mb_strlen($carrier) > 31)) {
            throw new \InvalidArgumentException('invalid length for $carrier when calling InlineObject61., must be smaller than or equal to 31.');
        }

        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets apn
     *
     * @return string|null
     */
    public function getApn()
    {
        return $this->container['apn'];
    }

    /**
     * Sets apn
     *
     * @param string|null $apn APN configuration.
     *
     * @return self
     */
    public function setApn($apn)
    {
        if (!is_null($apn) && (mb_strlen($apn) > 63)) {
            throw new \InvalidArgumentException('invalid length for $apn when calling InlineObject61., must be smaller than or equal to 63.');
        }

        $this->container['apn'] = $apn;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type Authentication type.    none:No authentication.    pap:PAP.    chap:CHAP.
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 31)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject61., must be smaller than or equal to 31.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets pdn
     *
     * @return string|null
     */
    public function getPdn()
    {
        return $this->container['pdn'];
    }

    /**
     * Sets pdn
     *
     * @param string|null $pdn PDN type.    ipv4-only:IPv4 only PDN activation.    ipv6-only:IPv6 only PDN activation.    ipv4-ipv6:Both IPv4 and IPv6 PDN activations.
     *
     * @return self
     */
    public function setPdn($pdn)
    {
        $allowedValues = $this->getPdnAllowableValues();
        if (!is_null($pdn) && !in_array($pdn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdn', must be one of '%s'",
                    $pdn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdn'] = $pdn;

        return $this;
    }

    /**
     * Gets signal_threshold
     *
     * @return int|null
     */
    public function getSignalThreshold()
    {
        return $this->container['signal_threshold'];
    }

    /**
     * Sets signal_threshold
     *
     * @param int|null $signal_threshold Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
     *
     * @return self
     */
    public function setSignalThreshold($signal_threshold)
    {

        if (!is_null($signal_threshold) && ($signal_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $signal_threshold when calling InlineObject61., must be smaller than or equal to 100.');
        }
        if (!is_null($signal_threshold) && ($signal_threshold < 50)) {
            throw new \InvalidArgumentException('invalid value for $signal_threshold when calling InlineObject61., must be bigger than or equal to 50.');
        }

        $this->container['signal_threshold'] = $signal_threshold;

        return $this;
    }

    /**
     * Gets signal_period
     *
     * @return int|null
     */
    public function getSignalPeriod()
    {
        return $this->container['signal_period'];
    }

    /**
     * Sets signal_period
     *
     * @param int|null $signal_period Signal period (600 to 18000 seconds).
     *
     * @return self
     */
    public function setSignalPeriod($signal_period)
    {

        if (!is_null($signal_period) && ($signal_period > 18000)) {
            throw new \InvalidArgumentException('invalid value for $signal_period when calling InlineObject61., must be smaller than or equal to 18000.');
        }
        if (!is_null($signal_period) && ($signal_period < 600)) {
            throw new \InvalidArgumentException('invalid value for $signal_period when calling InlineObject61., must be bigger than or equal to 600.');
        }

        $this->container['signal_period'] = $signal_period;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int|null
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int|null $capacity Capacity in MB (0 - 102400000).
     *
     * @return self
     */
    public function setCapacity($capacity)
    {

        if (!is_null($capacity) && ($capacity > 102400000)) {
            throw new \InvalidArgumentException('invalid value for $capacity when calling InlineObject61., must be smaller than or equal to 102400000.');
        }
        if (!is_null($capacity) && ($capacity < 0)) {
            throw new \InvalidArgumentException('invalid value for $capacity when calling InlineObject61., must be bigger than or equal to 0.');
        }

        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets monthly_fee
     *
     * @return int|null
     */
    public function getMonthlyFee()
    {
        return $this->container['monthly_fee'];
    }

    /**
     * Sets monthly_fee
     *
     * @param int|null $monthly_fee Monthly fee of dataplan (0 - 100000, in local currency).
     *
     * @return self
     */
    public function setMonthlyFee($monthly_fee)
    {

        if (!is_null($monthly_fee) && ($monthly_fee > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $monthly_fee when calling InlineObject61., must be smaller than or equal to 1000000.');
        }
        if (!is_null($monthly_fee) && ($monthly_fee < 0)) {
            throw new \InvalidArgumentException('invalid value for $monthly_fee when calling InlineObject61., must be bigger than or equal to 0.');
        }

        $this->container['monthly_fee'] = $monthly_fee;

        return $this;
    }

    /**
     * Gets billing_date
     *
     * @return int|null
     */
    public function getBillingDate()
    {
        return $this->container['billing_date'];
    }

    /**
     * Sets billing_date
     *
     * @param int|null $billing_date Billing day of the month (1 - 31).
     *
     * @return self
     */
    public function setBillingDate($billing_date)
    {

        if (!is_null($billing_date) && ($billing_date > 31)) {
            throw new \InvalidArgumentException('invalid value for $billing_date when calling InlineObject61., must be smaller than or equal to 31.');
        }
        if (!is_null($billing_date) && ($billing_date < 1)) {
            throw new \InvalidArgumentException('invalid value for $billing_date when calling InlineObject61., must be bigger than or equal to 1.');
        }

        $this->container['billing_date'] = $billing_date;

        return $this;
    }

    /**
     * Gets overage
     *
     * @return string|null
     */
    public function getOverage()
    {
        return $this->container['overage'];
    }

    /**
     * Sets overage
     *
     * @param string|null $overage Enable/disable dataplan overage detection.    disable:Disable dataplan overage detection.    enable:Enable dataplan overage detection.
     *
     * @return self
     */
    public function setOverage($overage)
    {
        $allowedValues = $this->getOverageAllowableValues();
        if (!is_null($overage) && !in_array($overage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'overage', must be one of '%s'",
                    $overage,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overage'] = $overage;

        return $this;
    }

    /**
     * Gets preferred_subnet
     *
     * @return int|null
     */
    public function getPreferredSubnet()
    {
        return $this->container['preferred_subnet'];
    }

    /**
     * Sets preferred_subnet
     *
     * @param int|null $preferred_subnet Preferred subnet mask (8 - 32).
     *
     * @return self
     */
    public function setPreferredSubnet($preferred_subnet)
    {

        if (!is_null($preferred_subnet) && ($preferred_subnet > 32)) {
            throw new \InvalidArgumentException('invalid value for $preferred_subnet when calling InlineObject61., must be smaller than or equal to 32.');
        }
        if (!is_null($preferred_subnet) && ($preferred_subnet < 8)) {
            throw new \InvalidArgumentException('invalid value for $preferred_subnet when calling InlineObject61., must be bigger than or equal to 8.');
        }

        $this->container['preferred_subnet'] = $preferred_subnet;

        return $this;
    }

    /**
     * Gets private_network
     *
     * @return string|null
     */
    public function getPrivateNetwork()
    {
        return $this->container['private_network'];
    }

    /**
     * Sets private_network
     *
     * @param string|null $private_network Enable/disable dataplan private network support.    disable:Disable dataplan private network support.    enable:Enable dataplan private network support.
     *
     * @return self
     */
    public function setPrivateNetwork($private_network)
    {
        $allowedValues = $this->getPrivateNetworkAllowableValues();
        if (!is_null($private_network) && !in_array($private_network, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'private_network', must be one of '%s'",
                    $private_network,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['private_network'] = $private_network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


