<?php
/**
 * InlineObject545
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject545 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject545 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_545';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'feature_set' => 'string',
        'replacemsg_group' => 'string',
        'options' => 'string',
        'https_replacemsg' => 'string',
        'ovrd_perm' => 'string',
        'post_action' => 'string',
        'override' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOverride[]',
        'web' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWeb[]',
        'youtube_channel_status' => 'string',
        'youtube_channel_filter' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameYoutubeChannelFilter[]',
        'ftgd_wf' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFtgdWf[]',
        'antiphish' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameAntiphish[]',
        'wisp' => 'string',
        'wisp_servers' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWispServers[]',
        'wisp_algorithm' => 'string',
        'log_all_url' => 'string',
        'web_content_log' => 'string',
        'web_filter_activex_log' => 'string',
        'web_filter_command_block_log' => 'string',
        'web_filter_cookie_log' => 'string',
        'web_filter_applet_log' => 'string',
        'web_filter_jscript_log' => 'string',
        'web_filter_js_log' => 'string',
        'web_filter_vbs_log' => 'string',
        'web_filter_unknown_log' => 'string',
        'web_filter_referer_log' => 'string',
        'web_filter_cookie_removal_log' => 'string',
        'web_url_log' => 'string',
        'web_invalid_domain_log' => 'string',
        'web_ftgd_err_log' => 'string',
        'web_ftgd_quota_usage' => 'string',
        'extended_log' => 'string',
        'web_extended_all_action_log' => 'string',
        'web_antiphishing_log' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'feature_set' => null,
        'replacemsg_group' => null,
        'options' => null,
        'https_replacemsg' => null,
        'ovrd_perm' => null,
        'post_action' => null,
        'override' => null,
        'web' => null,
        'youtube_channel_status' => null,
        'youtube_channel_filter' => null,
        'ftgd_wf' => null,
        'antiphish' => null,
        'wisp' => null,
        'wisp_servers' => null,
        'wisp_algorithm' => null,
        'log_all_url' => null,
        'web_content_log' => null,
        'web_filter_activex_log' => null,
        'web_filter_command_block_log' => null,
        'web_filter_cookie_log' => null,
        'web_filter_applet_log' => null,
        'web_filter_jscript_log' => null,
        'web_filter_js_log' => null,
        'web_filter_vbs_log' => null,
        'web_filter_unknown_log' => null,
        'web_filter_referer_log' => null,
        'web_filter_cookie_removal_log' => null,
        'web_url_log' => null,
        'web_invalid_domain_log' => null,
        'web_ftgd_err_log' => null,
        'web_ftgd_quota_usage' => null,
        'extended_log' => null,
        'web_extended_all_action_log' => null,
        'web_antiphishing_log' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'feature_set' => 'feature-set',
        'replacemsg_group' => 'replacemsg-group',
        'options' => 'options',
        'https_replacemsg' => 'https-replacemsg',
        'ovrd_perm' => 'ovrd-perm',
        'post_action' => 'post-action',
        'override' => 'override',
        'web' => 'web',
        'youtube_channel_status' => 'youtube-channel-status',
        'youtube_channel_filter' => 'youtube-channel-filter',
        'ftgd_wf' => 'ftgd-wf',
        'antiphish' => 'antiphish',
        'wisp' => 'wisp',
        'wisp_servers' => 'wisp-servers',
        'wisp_algorithm' => 'wisp-algorithm',
        'log_all_url' => 'log-all-url',
        'web_content_log' => 'web-content-log',
        'web_filter_activex_log' => 'web-filter-activex-log',
        'web_filter_command_block_log' => 'web-filter-command-block-log',
        'web_filter_cookie_log' => 'web-filter-cookie-log',
        'web_filter_applet_log' => 'web-filter-applet-log',
        'web_filter_jscript_log' => 'web-filter-jscript-log',
        'web_filter_js_log' => 'web-filter-js-log',
        'web_filter_vbs_log' => 'web-filter-vbs-log',
        'web_filter_unknown_log' => 'web-filter-unknown-log',
        'web_filter_referer_log' => 'web-filter-referer-log',
        'web_filter_cookie_removal_log' => 'web-filter-cookie-removal-log',
        'web_url_log' => 'web-url-log',
        'web_invalid_domain_log' => 'web-invalid-domain-log',
        'web_ftgd_err_log' => 'web-ftgd-err-log',
        'web_ftgd_quota_usage' => 'web-ftgd-quota-usage',
        'extended_log' => 'extended-log',
        'web_extended_all_action_log' => 'web-extended-all-action-log',
        'web_antiphishing_log' => 'web-antiphishing-log'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'feature_set' => 'setFeatureSet',
        'replacemsg_group' => 'setReplacemsgGroup',
        'options' => 'setOptions',
        'https_replacemsg' => 'setHttpsReplacemsg',
        'ovrd_perm' => 'setOvrdPerm',
        'post_action' => 'setPostAction',
        'override' => 'setOverride',
        'web' => 'setWeb',
        'youtube_channel_status' => 'setYoutubeChannelStatus',
        'youtube_channel_filter' => 'setYoutubeChannelFilter',
        'ftgd_wf' => 'setFtgdWf',
        'antiphish' => 'setAntiphish',
        'wisp' => 'setWisp',
        'wisp_servers' => 'setWispServers',
        'wisp_algorithm' => 'setWispAlgorithm',
        'log_all_url' => 'setLogAllUrl',
        'web_content_log' => 'setWebContentLog',
        'web_filter_activex_log' => 'setWebFilterActivexLog',
        'web_filter_command_block_log' => 'setWebFilterCommandBlockLog',
        'web_filter_cookie_log' => 'setWebFilterCookieLog',
        'web_filter_applet_log' => 'setWebFilterAppletLog',
        'web_filter_jscript_log' => 'setWebFilterJscriptLog',
        'web_filter_js_log' => 'setWebFilterJsLog',
        'web_filter_vbs_log' => 'setWebFilterVbsLog',
        'web_filter_unknown_log' => 'setWebFilterUnknownLog',
        'web_filter_referer_log' => 'setWebFilterRefererLog',
        'web_filter_cookie_removal_log' => 'setWebFilterCookieRemovalLog',
        'web_url_log' => 'setWebUrlLog',
        'web_invalid_domain_log' => 'setWebInvalidDomainLog',
        'web_ftgd_err_log' => 'setWebFtgdErrLog',
        'web_ftgd_quota_usage' => 'setWebFtgdQuotaUsage',
        'extended_log' => 'setExtendedLog',
        'web_extended_all_action_log' => 'setWebExtendedAllActionLog',
        'web_antiphishing_log' => 'setWebAntiphishingLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'feature_set' => 'getFeatureSet',
        'replacemsg_group' => 'getReplacemsgGroup',
        'options' => 'getOptions',
        'https_replacemsg' => 'getHttpsReplacemsg',
        'ovrd_perm' => 'getOvrdPerm',
        'post_action' => 'getPostAction',
        'override' => 'getOverride',
        'web' => 'getWeb',
        'youtube_channel_status' => 'getYoutubeChannelStatus',
        'youtube_channel_filter' => 'getYoutubeChannelFilter',
        'ftgd_wf' => 'getFtgdWf',
        'antiphish' => 'getAntiphish',
        'wisp' => 'getWisp',
        'wisp_servers' => 'getWispServers',
        'wisp_algorithm' => 'getWispAlgorithm',
        'log_all_url' => 'getLogAllUrl',
        'web_content_log' => 'getWebContentLog',
        'web_filter_activex_log' => 'getWebFilterActivexLog',
        'web_filter_command_block_log' => 'getWebFilterCommandBlockLog',
        'web_filter_cookie_log' => 'getWebFilterCookieLog',
        'web_filter_applet_log' => 'getWebFilterAppletLog',
        'web_filter_jscript_log' => 'getWebFilterJscriptLog',
        'web_filter_js_log' => 'getWebFilterJsLog',
        'web_filter_vbs_log' => 'getWebFilterVbsLog',
        'web_filter_unknown_log' => 'getWebFilterUnknownLog',
        'web_filter_referer_log' => 'getWebFilterRefererLog',
        'web_filter_cookie_removal_log' => 'getWebFilterCookieRemovalLog',
        'web_url_log' => 'getWebUrlLog',
        'web_invalid_domain_log' => 'getWebInvalidDomainLog',
        'web_ftgd_err_log' => 'getWebFtgdErrLog',
        'web_ftgd_quota_usage' => 'getWebFtgdQuotaUsage',
        'extended_log' => 'getExtendedLog',
        'web_extended_all_action_log' => 'getWebExtendedAllActionLog',
        'web_antiphishing_log' => 'getWebAntiphishingLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FEATURE_SET_FLOW = 'flow';
    const FEATURE_SET_PROXY = 'proxy';
    const OPTIONS_ACTIVEXFILTER = 'activexfilter';
    const OPTIONS_COOKIEFILTER = 'cookiefilter';
    const OPTIONS_JAVAFILTER = 'javafilter';
    const OPTIONS_BLOCK_INVALID_URL = 'block-invalid-url';
    const OPTIONS_JSCRIPT = 'jscript';
    const OPTIONS_JS = 'js';
    const OPTIONS_VBS = 'vbs';
    const OPTIONS_UNKNOWN = 'unknown';
    const OPTIONS_INTRINSIC = 'intrinsic';
    const OPTIONS_WF_REFERER = 'wf-referer';
    const OPTIONS_WF_COOKIE = 'wf-cookie';
    const HTTPS_REPLACEMSG_ENABLE = 'enable';
    const HTTPS_REPLACEMSG_DISABLE = 'disable';
    const OVRD_PERM_BANNEDWORD_OVERRIDE = 'bannedword-override';
    const OVRD_PERM_URLFILTER_OVERRIDE = 'urlfilter-override';
    const OVRD_PERM_FORTIGUARD_WF_OVERRIDE = 'fortiguard-wf-override';
    const OVRD_PERM_CONTENTTYPE_CHECK_OVERRIDE = 'contenttype-check-override';
    const POST_ACTION_NORMAL = 'normal';
    const POST_ACTION_BLOCK = 'block';
    const YOUTUBE_CHANNEL_STATUS_DISABLE = 'disable';
    const YOUTUBE_CHANNEL_STATUS_BLACKLIST = 'blacklist';
    const YOUTUBE_CHANNEL_STATUS_WHITELIST = 'whitelist';
    const WISP_ENABLE = 'enable';
    const WISP_DISABLE = 'disable';
    const WISP_ALGORITHM_PRIMARY_SECONDARY = 'primary-secondary';
    const WISP_ALGORITHM_ROUND_ROBIN = 'round-robin';
    const WISP_ALGORITHM_AUTO_LEARNING = 'auto-learning';
    const LOG_ALL_URL_ENABLE = 'enable';
    const LOG_ALL_URL_DISABLE = 'disable';
    const WEB_CONTENT_LOG_ENABLE = 'enable';
    const WEB_CONTENT_LOG_DISABLE = 'disable';
    const WEB_FILTER_ACTIVEX_LOG_ENABLE = 'enable';
    const WEB_FILTER_ACTIVEX_LOG_DISABLE = 'disable';
    const WEB_FILTER_COMMAND_BLOCK_LOG_ENABLE = 'enable';
    const WEB_FILTER_COMMAND_BLOCK_LOG_DISABLE = 'disable';
    const WEB_FILTER_COOKIE_LOG_ENABLE = 'enable';
    const WEB_FILTER_COOKIE_LOG_DISABLE = 'disable';
    const WEB_FILTER_APPLET_LOG_ENABLE = 'enable';
    const WEB_FILTER_APPLET_LOG_DISABLE = 'disable';
    const WEB_FILTER_JSCRIPT_LOG_ENABLE = 'enable';
    const WEB_FILTER_JSCRIPT_LOG_DISABLE = 'disable';
    const WEB_FILTER_JS_LOG_ENABLE = 'enable';
    const WEB_FILTER_JS_LOG_DISABLE = 'disable';
    const WEB_FILTER_VBS_LOG_ENABLE = 'enable';
    const WEB_FILTER_VBS_LOG_DISABLE = 'disable';
    const WEB_FILTER_UNKNOWN_LOG_ENABLE = 'enable';
    const WEB_FILTER_UNKNOWN_LOG_DISABLE = 'disable';
    const WEB_FILTER_REFERER_LOG_ENABLE = 'enable';
    const WEB_FILTER_REFERER_LOG_DISABLE = 'disable';
    const WEB_FILTER_COOKIE_REMOVAL_LOG_ENABLE = 'enable';
    const WEB_FILTER_COOKIE_REMOVAL_LOG_DISABLE = 'disable';
    const WEB_URL_LOG_ENABLE = 'enable';
    const WEB_URL_LOG_DISABLE = 'disable';
    const WEB_INVALID_DOMAIN_LOG_ENABLE = 'enable';
    const WEB_INVALID_DOMAIN_LOG_DISABLE = 'disable';
    const WEB_FTGD_ERR_LOG_ENABLE = 'enable';
    const WEB_FTGD_ERR_LOG_DISABLE = 'disable';
    const WEB_FTGD_QUOTA_USAGE_ENABLE = 'enable';
    const WEB_FTGD_QUOTA_USAGE_DISABLE = 'disable';
    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    const WEB_EXTENDED_ALL_ACTION_LOG_ENABLE = 'enable';
    const WEB_EXTENDED_ALL_ACTION_LOG_DISABLE = 'disable';
    const WEB_ANTIPHISHING_LOG_ENABLE = 'enable';
    const WEB_ANTIPHISHING_LOG_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureSetAllowableValues()
    {
        return [
            self::FEATURE_SET_FLOW,
            self::FEATURE_SET_PROXY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_ACTIVEXFILTER,
            self::OPTIONS_COOKIEFILTER,
            self::OPTIONS_JAVAFILTER,
            self::OPTIONS_BLOCK_INVALID_URL,
            self::OPTIONS_JSCRIPT,
            self::OPTIONS_JS,
            self::OPTIONS_VBS,
            self::OPTIONS_UNKNOWN,
            self::OPTIONS_INTRINSIC,
            self::OPTIONS_WF_REFERER,
            self::OPTIONS_WF_COOKIE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpsReplacemsgAllowableValues()
    {
        return [
            self::HTTPS_REPLACEMSG_ENABLE,
            self::HTTPS_REPLACEMSG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvrdPermAllowableValues()
    {
        return [
            self::OVRD_PERM_BANNEDWORD_OVERRIDE,
            self::OVRD_PERM_URLFILTER_OVERRIDE,
            self::OVRD_PERM_FORTIGUARD_WF_OVERRIDE,
            self::OVRD_PERM_CONTENTTYPE_CHECK_OVERRIDE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostActionAllowableValues()
    {
        return [
            self::POST_ACTION_NORMAL,
            self::POST_ACTION_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getYoutubeChannelStatusAllowableValues()
    {
        return [
            self::YOUTUBE_CHANNEL_STATUS_DISABLE,
            self::YOUTUBE_CHANNEL_STATUS_BLACKLIST,
            self::YOUTUBE_CHANNEL_STATUS_WHITELIST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWispAllowableValues()
    {
        return [
            self::WISP_ENABLE,
            self::WISP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWispAlgorithmAllowableValues()
    {
        return [
            self::WISP_ALGORITHM_PRIMARY_SECONDARY,
            self::WISP_ALGORITHM_ROUND_ROBIN,
            self::WISP_ALGORITHM_AUTO_LEARNING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllUrlAllowableValues()
    {
        return [
            self::LOG_ALL_URL_ENABLE,
            self::LOG_ALL_URL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebContentLogAllowableValues()
    {
        return [
            self::WEB_CONTENT_LOG_ENABLE,
            self::WEB_CONTENT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterActivexLogAllowableValues()
    {
        return [
            self::WEB_FILTER_ACTIVEX_LOG_ENABLE,
            self::WEB_FILTER_ACTIVEX_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterCommandBlockLogAllowableValues()
    {
        return [
            self::WEB_FILTER_COMMAND_BLOCK_LOG_ENABLE,
            self::WEB_FILTER_COMMAND_BLOCK_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterCookieLogAllowableValues()
    {
        return [
            self::WEB_FILTER_COOKIE_LOG_ENABLE,
            self::WEB_FILTER_COOKIE_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterAppletLogAllowableValues()
    {
        return [
            self::WEB_FILTER_APPLET_LOG_ENABLE,
            self::WEB_FILTER_APPLET_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterJscriptLogAllowableValues()
    {
        return [
            self::WEB_FILTER_JSCRIPT_LOG_ENABLE,
            self::WEB_FILTER_JSCRIPT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterJsLogAllowableValues()
    {
        return [
            self::WEB_FILTER_JS_LOG_ENABLE,
            self::WEB_FILTER_JS_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterVbsLogAllowableValues()
    {
        return [
            self::WEB_FILTER_VBS_LOG_ENABLE,
            self::WEB_FILTER_VBS_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterUnknownLogAllowableValues()
    {
        return [
            self::WEB_FILTER_UNKNOWN_LOG_ENABLE,
            self::WEB_FILTER_UNKNOWN_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterRefererLogAllowableValues()
    {
        return [
            self::WEB_FILTER_REFERER_LOG_ENABLE,
            self::WEB_FILTER_REFERER_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFilterCookieRemovalLogAllowableValues()
    {
        return [
            self::WEB_FILTER_COOKIE_REMOVAL_LOG_ENABLE,
            self::WEB_FILTER_COOKIE_REMOVAL_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebUrlLogAllowableValues()
    {
        return [
            self::WEB_URL_LOG_ENABLE,
            self::WEB_URL_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebInvalidDomainLogAllowableValues()
    {
        return [
            self::WEB_INVALID_DOMAIN_LOG_ENABLE,
            self::WEB_INVALID_DOMAIN_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFtgdErrLogAllowableValues()
    {
        return [
            self::WEB_FTGD_ERR_LOG_ENABLE,
            self::WEB_FTGD_ERR_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebFtgdQuotaUsageAllowableValues()
    {
        return [
            self::WEB_FTGD_QUOTA_USAGE_ENABLE,
            self::WEB_FTGD_QUOTA_USAGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebExtendedAllActionLogAllowableValues()
    {
        return [
            self::WEB_EXTENDED_ALL_ACTION_LOG_ENABLE,
            self::WEB_EXTENDED_ALL_ACTION_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebAntiphishingLogAllowableValues()
    {
        return [
            self::WEB_ANTIPHISHING_LOG_ENABLE,
            self::WEB_ANTIPHISHING_LOG_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['feature_set'] = $data['feature_set'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['https_replacemsg'] = $data['https_replacemsg'] ?? null;
        $this->container['ovrd_perm'] = $data['ovrd_perm'] ?? null;
        $this->container['post_action'] = $data['post_action'] ?? null;
        $this->container['override'] = $data['override'] ?? null;
        $this->container['web'] = $data['web'] ?? null;
        $this->container['youtube_channel_status'] = $data['youtube_channel_status'] ?? null;
        $this->container['youtube_channel_filter'] = $data['youtube_channel_filter'] ?? null;
        $this->container['ftgd_wf'] = $data['ftgd_wf'] ?? null;
        $this->container['antiphish'] = $data['antiphish'] ?? null;
        $this->container['wisp'] = $data['wisp'] ?? null;
        $this->container['wisp_servers'] = $data['wisp_servers'] ?? null;
        $this->container['wisp_algorithm'] = $data['wisp_algorithm'] ?? null;
        $this->container['log_all_url'] = $data['log_all_url'] ?? null;
        $this->container['web_content_log'] = $data['web_content_log'] ?? null;
        $this->container['web_filter_activex_log'] = $data['web_filter_activex_log'] ?? null;
        $this->container['web_filter_command_block_log'] = $data['web_filter_command_block_log'] ?? null;
        $this->container['web_filter_cookie_log'] = $data['web_filter_cookie_log'] ?? null;
        $this->container['web_filter_applet_log'] = $data['web_filter_applet_log'] ?? null;
        $this->container['web_filter_jscript_log'] = $data['web_filter_jscript_log'] ?? null;
        $this->container['web_filter_js_log'] = $data['web_filter_js_log'] ?? null;
        $this->container['web_filter_vbs_log'] = $data['web_filter_vbs_log'] ?? null;
        $this->container['web_filter_unknown_log'] = $data['web_filter_unknown_log'] ?? null;
        $this->container['web_filter_referer_log'] = $data['web_filter_referer_log'] ?? null;
        $this->container['web_filter_cookie_removal_log'] = $data['web_filter_cookie_removal_log'] ?? null;
        $this->container['web_url_log'] = $data['web_url_log'] ?? null;
        $this->container['web_invalid_domain_log'] = $data['web_invalid_domain_log'] ?? null;
        $this->container['web_ftgd_err_log'] = $data['web_ftgd_err_log'] ?? null;
        $this->container['web_ftgd_quota_usage'] = $data['web_ftgd_quota_usage'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['web_extended_all_action_log'] = $data['web_extended_all_action_log'] ?? null;
        $this->container['web_antiphishing_log'] = $data['web_antiphishing_log'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($this->container['feature_set']) && !in_array($this->container['feature_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature_set', must be one of '%s'",
                $this->container['feature_set'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHttpsReplacemsgAllowableValues();
        if (!is_null($this->container['https_replacemsg']) && !in_array($this->container['https_replacemsg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'https_replacemsg', must be one of '%s'",
                $this->container['https_replacemsg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOvrdPermAllowableValues();
        if (!is_null($this->container['ovrd_perm']) && !in_array($this->container['ovrd_perm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ovrd_perm', must be one of '%s'",
                $this->container['ovrd_perm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostActionAllowableValues();
        if (!is_null($this->container['post_action']) && !in_array($this->container['post_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'post_action', must be one of '%s'",
                $this->container['post_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['override']) && (count($this->container['override']) > 0)) {
            $invalidProperties[] = "invalid value for 'override', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['web']) && (count($this->container['web']) > 0)) {
            $invalidProperties[] = "invalid value for 'web', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getYoutubeChannelStatusAllowableValues();
        if (!is_null($this->container['youtube_channel_status']) && !in_array($this->container['youtube_channel_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'youtube_channel_status', must be one of '%s'",
                $this->container['youtube_channel_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['youtube_channel_filter']) && (count($this->container['youtube_channel_filter']) > 0)) {
            $invalidProperties[] = "invalid value for 'youtube_channel_filter', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ftgd_wf']) && (count($this->container['ftgd_wf']) > 0)) {
            $invalidProperties[] = "invalid value for 'ftgd_wf', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['antiphish']) && (count($this->container['antiphish']) > 0)) {
            $invalidProperties[] = "invalid value for 'antiphish', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getWispAllowableValues();
        if (!is_null($this->container['wisp']) && !in_array($this->container['wisp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wisp', must be one of '%s'",
                $this->container['wisp'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wisp_servers']) && (count($this->container['wisp_servers']) > 0)) {
            $invalidProperties[] = "invalid value for 'wisp_servers', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getWispAlgorithmAllowableValues();
        if (!is_null($this->container['wisp_algorithm']) && !in_array($this->container['wisp_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wisp_algorithm', must be one of '%s'",
                $this->container['wisp_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogAllUrlAllowableValues();
        if (!is_null($this->container['log_all_url']) && !in_array($this->container['log_all_url'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_all_url', must be one of '%s'",
                $this->container['log_all_url'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebContentLogAllowableValues();
        if (!is_null($this->container['web_content_log']) && !in_array($this->container['web_content_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_content_log', must be one of '%s'",
                $this->container['web_content_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterActivexLogAllowableValues();
        if (!is_null($this->container['web_filter_activex_log']) && !in_array($this->container['web_filter_activex_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_activex_log', must be one of '%s'",
                $this->container['web_filter_activex_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterCommandBlockLogAllowableValues();
        if (!is_null($this->container['web_filter_command_block_log']) && !in_array($this->container['web_filter_command_block_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_command_block_log', must be one of '%s'",
                $this->container['web_filter_command_block_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterCookieLogAllowableValues();
        if (!is_null($this->container['web_filter_cookie_log']) && !in_array($this->container['web_filter_cookie_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_cookie_log', must be one of '%s'",
                $this->container['web_filter_cookie_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterAppletLogAllowableValues();
        if (!is_null($this->container['web_filter_applet_log']) && !in_array($this->container['web_filter_applet_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_applet_log', must be one of '%s'",
                $this->container['web_filter_applet_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterJscriptLogAllowableValues();
        if (!is_null($this->container['web_filter_jscript_log']) && !in_array($this->container['web_filter_jscript_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_jscript_log', must be one of '%s'",
                $this->container['web_filter_jscript_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterJsLogAllowableValues();
        if (!is_null($this->container['web_filter_js_log']) && !in_array($this->container['web_filter_js_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_js_log', must be one of '%s'",
                $this->container['web_filter_js_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterVbsLogAllowableValues();
        if (!is_null($this->container['web_filter_vbs_log']) && !in_array($this->container['web_filter_vbs_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_vbs_log', must be one of '%s'",
                $this->container['web_filter_vbs_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterUnknownLogAllowableValues();
        if (!is_null($this->container['web_filter_unknown_log']) && !in_array($this->container['web_filter_unknown_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_unknown_log', must be one of '%s'",
                $this->container['web_filter_unknown_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterRefererLogAllowableValues();
        if (!is_null($this->container['web_filter_referer_log']) && !in_array($this->container['web_filter_referer_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_referer_log', must be one of '%s'",
                $this->container['web_filter_referer_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFilterCookieRemovalLogAllowableValues();
        if (!is_null($this->container['web_filter_cookie_removal_log']) && !in_array($this->container['web_filter_cookie_removal_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_filter_cookie_removal_log', must be one of '%s'",
                $this->container['web_filter_cookie_removal_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebUrlLogAllowableValues();
        if (!is_null($this->container['web_url_log']) && !in_array($this->container['web_url_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_url_log', must be one of '%s'",
                $this->container['web_url_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebInvalidDomainLogAllowableValues();
        if (!is_null($this->container['web_invalid_domain_log']) && !in_array($this->container['web_invalid_domain_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_invalid_domain_log', must be one of '%s'",
                $this->container['web_invalid_domain_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFtgdErrLogAllowableValues();
        if (!is_null($this->container['web_ftgd_err_log']) && !in_array($this->container['web_ftgd_err_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_ftgd_err_log', must be one of '%s'",
                $this->container['web_ftgd_err_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebFtgdQuotaUsageAllowableValues();
        if (!is_null($this->container['web_ftgd_quota_usage']) && !in_array($this->container['web_ftgd_quota_usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_ftgd_quota_usage', must be one of '%s'",
                $this->container['web_ftgd_quota_usage'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebExtendedAllActionLogAllowableValues();
        if (!is_null($this->container['web_extended_all_action_log']) && !in_array($this->container['web_extended_all_action_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_extended_all_action_log', must be one of '%s'",
                $this->container['web_extended_all_action_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebAntiphishingLogAllowableValues();
        if (!is_null($this->container['web_antiphishing_log']) && !in_array($this->container['web_antiphishing_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_antiphishing_log', must be one of '%s'",
                $this->container['web_antiphishing_log'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject545., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Optional comments.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject545., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return string|null
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param string|null $feature_set Flow/proxy feature set.    flow:Flow feature set.    proxy:Proxy feature set.
     *
     * @return self
     */
    public function setFeatureSet($feature_set)
    {
        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($feature_set) && !in_array($feature_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature_set', must be one of '%s'",
                    $feature_set,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject545., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Options.    activexfilter:ActiveX filter.    cookiefilter:Cookie filter.    javafilter:Java applet filter.    block-invalid-url:Block sessions contained an invalid domain name.    jscript:Javascript block.    js:JS block.    vbs:VB script block.    unknown:Unknown script block.    intrinsic:Intrinsic script block.    wf-referer:Referring block.    wf-cookie:Cookie block.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets https_replacemsg
     *
     * @return string|null
     */
    public function getHttpsReplacemsg()
    {
        return $this->container['https_replacemsg'];
    }

    /**
     * Sets https_replacemsg
     *
     * @param string|null $https_replacemsg Enable replacement messages for HTTPS.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setHttpsReplacemsg($https_replacemsg)
    {
        $allowedValues = $this->getHttpsReplacemsgAllowableValues();
        if (!is_null($https_replacemsg) && !in_array($https_replacemsg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'https_replacemsg', must be one of '%s'",
                    $https_replacemsg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['https_replacemsg'] = $https_replacemsg;

        return $this;
    }

    /**
     * Gets ovrd_perm
     *
     * @return string|null
     */
    public function getOvrdPerm()
    {
        return $this->container['ovrd_perm'];
    }

    /**
     * Sets ovrd_perm
     *
     * @param string|null $ovrd_perm Permitted override types.    bannedword-override:Banned word override.    urlfilter-override:URL filter override.    fortiguard-wf-override:FortiGuard Web Filter override.    contenttype-check-override:Content-type header override.
     *
     * @return self
     */
    public function setOvrdPerm($ovrd_perm)
    {
        $allowedValues = $this->getOvrdPermAllowableValues();
        if (!is_null($ovrd_perm) && !in_array($ovrd_perm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ovrd_perm', must be one of '%s'",
                    $ovrd_perm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ovrd_perm'] = $ovrd_perm;

        return $this;
    }

    /**
     * Gets post_action
     *
     * @return string|null
     */
    public function getPostAction()
    {
        return $this->container['post_action'];
    }

    /**
     * Sets post_action
     *
     * @param string|null $post_action Action taken for HTTP POST traffic.    normal:Normal, POST requests are allowed.    block:POST requests are blocked.
     *
     * @return self
     */
    public function setPostAction($post_action)
    {
        $allowedValues = $this->getPostActionAllowableValues();
        if (!is_null($post_action) && !in_array($post_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'post_action', must be one of '%s'",
                    $post_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['post_action'] = $post_action;

        return $this;
    }

    /**
     * Gets override
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOverride[]|null
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOverride[]|null $override Web Filter override settings.
     *
     * @return self
     */
    public function setOverride($override)
    {

        if (!is_null($override) && (count($override) > 0)) {
            throw new \InvalidArgumentException('invalid value for $override when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets web
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWeb[]|null
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWeb[]|null $web Web content filtering settings.
     *
     * @return self
     */
    public function setWeb($web)
    {

        if (!is_null($web) && (count($web) > 0)) {
            throw new \InvalidArgumentException('invalid value for $web when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets youtube_channel_status
     *
     * @return string|null
     */
    public function getYoutubeChannelStatus()
    {
        return $this->container['youtube_channel_status'];
    }

    /**
     * Sets youtube_channel_status
     *
     * @param string|null $youtube_channel_status YouTube channel filter status.    disable:Disable YouTube channel filter.    blacklist:Block matches.    whitelist:Allow matches.
     *
     * @return self
     */
    public function setYoutubeChannelStatus($youtube_channel_status)
    {
        $allowedValues = $this->getYoutubeChannelStatusAllowableValues();
        if (!is_null($youtube_channel_status) && !in_array($youtube_channel_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'youtube_channel_status', must be one of '%s'",
                    $youtube_channel_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['youtube_channel_status'] = $youtube_channel_status;

        return $this;
    }

    /**
     * Gets youtube_channel_filter
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameYoutubeChannelFilter[]|null
     */
    public function getYoutubeChannelFilter()
    {
        return $this->container['youtube_channel_filter'];
    }

    /**
     * Sets youtube_channel_filter
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameYoutubeChannelFilter[]|null $youtube_channel_filter YouTube channel filter.
     *
     * @return self
     */
    public function setYoutubeChannelFilter($youtube_channel_filter)
    {

        if (!is_null($youtube_channel_filter) && (count($youtube_channel_filter) > 0)) {
            throw new \InvalidArgumentException('invalid value for $youtube_channel_filter when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['youtube_channel_filter'] = $youtube_channel_filter;

        return $this;
    }

    /**
     * Gets ftgd_wf
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFtgdWf[]|null
     */
    public function getFtgdWf()
    {
        return $this->container['ftgd_wf'];
    }

    /**
     * Sets ftgd_wf
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameFtgdWf[]|null $ftgd_wf FortiGuard Web Filter settings.
     *
     * @return self
     */
    public function setFtgdWf($ftgd_wf)
    {

        if (!is_null($ftgd_wf) && (count($ftgd_wf) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ftgd_wf when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['ftgd_wf'] = $ftgd_wf;

        return $this;
    }

    /**
     * Gets antiphish
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameAntiphish[]|null
     */
    public function getAntiphish()
    {
        return $this->container['antiphish'];
    }

    /**
     * Sets antiphish
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameAntiphish[]|null $antiphish AntiPhishing profile.
     *
     * @return self
     */
    public function setAntiphish($antiphish)
    {

        if (!is_null($antiphish) && (count($antiphish) > 0)) {
            throw new \InvalidArgumentException('invalid value for $antiphish when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['antiphish'] = $antiphish;

        return $this;
    }

    /**
     * Gets wisp
     *
     * @return string|null
     */
    public function getWisp()
    {
        return $this->container['wisp'];
    }

    /**
     * Sets wisp
     *
     * @param string|null $wisp Enable/disable web proxy WISP.    enable:Enable web proxy WISP.    disable:Disable web proxy WISP.
     *
     * @return self
     */
    public function setWisp($wisp)
    {
        $allowedValues = $this->getWispAllowableValues();
        if (!is_null($wisp) && !in_array($wisp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wisp', must be one of '%s'",
                    $wisp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wisp'] = $wisp;

        return $this;
    }

    /**
     * Gets wisp_servers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWispServers[]|null
     */
    public function getWispServers()
    {
        return $this->container['wisp_servers'];
    }

    /**
     * Sets wisp_servers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameWispServers[]|null $wisp_servers WISP servers.
     *
     * @return self
     */
    public function setWispServers($wisp_servers)
    {

        if (!is_null($wisp_servers) && (count($wisp_servers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $wisp_servers when calling InlineObject545., number of items must be less than or equal to 0.');
        }
        $this->container['wisp_servers'] = $wisp_servers;

        return $this;
    }

    /**
     * Gets wisp_algorithm
     *
     * @return string|null
     */
    public function getWispAlgorithm()
    {
        return $this->container['wisp_algorithm'];
    }

    /**
     * Sets wisp_algorithm
     *
     * @param string|null $wisp_algorithm WISP server selection algorithm.    primary-secondary:Select the first healthy server in order.    round-robin:Select the next healthy server.    auto-learning:Select the lightest loading healthy server.
     *
     * @return self
     */
    public function setWispAlgorithm($wisp_algorithm)
    {
        $allowedValues = $this->getWispAlgorithmAllowableValues();
        if (!is_null($wisp_algorithm) && !in_array($wisp_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wisp_algorithm', must be one of '%s'",
                    $wisp_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wisp_algorithm'] = $wisp_algorithm;

        return $this;
    }

    /**
     * Gets log_all_url
     *
     * @return string|null
     */
    public function getLogAllUrl()
    {
        return $this->container['log_all_url'];
    }

    /**
     * Sets log_all_url
     *
     * @param string|null $log_all_url Enable/disable logging all URLs visited.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLogAllUrl($log_all_url)
    {
        $allowedValues = $this->getLogAllUrlAllowableValues();
        if (!is_null($log_all_url) && !in_array($log_all_url, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_all_url', must be one of '%s'",
                    $log_all_url,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_all_url'] = $log_all_url;

        return $this;
    }

    /**
     * Gets web_content_log
     *
     * @return string|null
     */
    public function getWebContentLog()
    {
        return $this->container['web_content_log'];
    }

    /**
     * Sets web_content_log
     *
     * @param string|null $web_content_log Enable/disable logging logging blocked web content.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebContentLog($web_content_log)
    {
        $allowedValues = $this->getWebContentLogAllowableValues();
        if (!is_null($web_content_log) && !in_array($web_content_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_content_log', must be one of '%s'",
                    $web_content_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_content_log'] = $web_content_log;

        return $this;
    }

    /**
     * Gets web_filter_activex_log
     *
     * @return string|null
     */
    public function getWebFilterActivexLog()
    {
        return $this->container['web_filter_activex_log'];
    }

    /**
     * Sets web_filter_activex_log
     *
     * @param string|null $web_filter_activex_log Enable/disable logging ActiveX.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterActivexLog($web_filter_activex_log)
    {
        $allowedValues = $this->getWebFilterActivexLogAllowableValues();
        if (!is_null($web_filter_activex_log) && !in_array($web_filter_activex_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_activex_log', must be one of '%s'",
                    $web_filter_activex_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_activex_log'] = $web_filter_activex_log;

        return $this;
    }

    /**
     * Gets web_filter_command_block_log
     *
     * @return string|null
     */
    public function getWebFilterCommandBlockLog()
    {
        return $this->container['web_filter_command_block_log'];
    }

    /**
     * Sets web_filter_command_block_log
     *
     * @param string|null $web_filter_command_block_log Enable/disable logging blocked commands.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterCommandBlockLog($web_filter_command_block_log)
    {
        $allowedValues = $this->getWebFilterCommandBlockLogAllowableValues();
        if (!is_null($web_filter_command_block_log) && !in_array($web_filter_command_block_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_command_block_log', must be one of '%s'",
                    $web_filter_command_block_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_command_block_log'] = $web_filter_command_block_log;

        return $this;
    }

    /**
     * Gets web_filter_cookie_log
     *
     * @return string|null
     */
    public function getWebFilterCookieLog()
    {
        return $this->container['web_filter_cookie_log'];
    }

    /**
     * Sets web_filter_cookie_log
     *
     * @param string|null $web_filter_cookie_log Enable/disable logging cookie filtering.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterCookieLog($web_filter_cookie_log)
    {
        $allowedValues = $this->getWebFilterCookieLogAllowableValues();
        if (!is_null($web_filter_cookie_log) && !in_array($web_filter_cookie_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_cookie_log', must be one of '%s'",
                    $web_filter_cookie_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_cookie_log'] = $web_filter_cookie_log;

        return $this;
    }

    /**
     * Gets web_filter_applet_log
     *
     * @return string|null
     */
    public function getWebFilterAppletLog()
    {
        return $this->container['web_filter_applet_log'];
    }

    /**
     * Sets web_filter_applet_log
     *
     * @param string|null $web_filter_applet_log Enable/disable logging Java applets.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterAppletLog($web_filter_applet_log)
    {
        $allowedValues = $this->getWebFilterAppletLogAllowableValues();
        if (!is_null($web_filter_applet_log) && !in_array($web_filter_applet_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_applet_log', must be one of '%s'",
                    $web_filter_applet_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_applet_log'] = $web_filter_applet_log;

        return $this;
    }

    /**
     * Gets web_filter_jscript_log
     *
     * @return string|null
     */
    public function getWebFilterJscriptLog()
    {
        return $this->container['web_filter_jscript_log'];
    }

    /**
     * Sets web_filter_jscript_log
     *
     * @param string|null $web_filter_jscript_log Enable/disable logging JScripts.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterJscriptLog($web_filter_jscript_log)
    {
        $allowedValues = $this->getWebFilterJscriptLogAllowableValues();
        if (!is_null($web_filter_jscript_log) && !in_array($web_filter_jscript_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_jscript_log', must be one of '%s'",
                    $web_filter_jscript_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_jscript_log'] = $web_filter_jscript_log;

        return $this;
    }

    /**
     * Gets web_filter_js_log
     *
     * @return string|null
     */
    public function getWebFilterJsLog()
    {
        return $this->container['web_filter_js_log'];
    }

    /**
     * Sets web_filter_js_log
     *
     * @param string|null $web_filter_js_log Enable/disable logging Java scripts.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterJsLog($web_filter_js_log)
    {
        $allowedValues = $this->getWebFilterJsLogAllowableValues();
        if (!is_null($web_filter_js_log) && !in_array($web_filter_js_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_js_log', must be one of '%s'",
                    $web_filter_js_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_js_log'] = $web_filter_js_log;

        return $this;
    }

    /**
     * Gets web_filter_vbs_log
     *
     * @return string|null
     */
    public function getWebFilterVbsLog()
    {
        return $this->container['web_filter_vbs_log'];
    }

    /**
     * Sets web_filter_vbs_log
     *
     * @param string|null $web_filter_vbs_log Enable/disable logging VBS scripts.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterVbsLog($web_filter_vbs_log)
    {
        $allowedValues = $this->getWebFilterVbsLogAllowableValues();
        if (!is_null($web_filter_vbs_log) && !in_array($web_filter_vbs_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_vbs_log', must be one of '%s'",
                    $web_filter_vbs_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_vbs_log'] = $web_filter_vbs_log;

        return $this;
    }

    /**
     * Gets web_filter_unknown_log
     *
     * @return string|null
     */
    public function getWebFilterUnknownLog()
    {
        return $this->container['web_filter_unknown_log'];
    }

    /**
     * Sets web_filter_unknown_log
     *
     * @param string|null $web_filter_unknown_log Enable/disable logging unknown scripts.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterUnknownLog($web_filter_unknown_log)
    {
        $allowedValues = $this->getWebFilterUnknownLogAllowableValues();
        if (!is_null($web_filter_unknown_log) && !in_array($web_filter_unknown_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_unknown_log', must be one of '%s'",
                    $web_filter_unknown_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_unknown_log'] = $web_filter_unknown_log;

        return $this;
    }

    /**
     * Gets web_filter_referer_log
     *
     * @return string|null
     */
    public function getWebFilterRefererLog()
    {
        return $this->container['web_filter_referer_log'];
    }

    /**
     * Sets web_filter_referer_log
     *
     * @param string|null $web_filter_referer_log Enable/disable logging referrers.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterRefererLog($web_filter_referer_log)
    {
        $allowedValues = $this->getWebFilterRefererLogAllowableValues();
        if (!is_null($web_filter_referer_log) && !in_array($web_filter_referer_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_referer_log', must be one of '%s'",
                    $web_filter_referer_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_referer_log'] = $web_filter_referer_log;

        return $this;
    }

    /**
     * Gets web_filter_cookie_removal_log
     *
     * @return string|null
     */
    public function getWebFilterCookieRemovalLog()
    {
        return $this->container['web_filter_cookie_removal_log'];
    }

    /**
     * Sets web_filter_cookie_removal_log
     *
     * @param string|null $web_filter_cookie_removal_log Enable/disable logging blocked cookies.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFilterCookieRemovalLog($web_filter_cookie_removal_log)
    {
        $allowedValues = $this->getWebFilterCookieRemovalLogAllowableValues();
        if (!is_null($web_filter_cookie_removal_log) && !in_array($web_filter_cookie_removal_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_filter_cookie_removal_log', must be one of '%s'",
                    $web_filter_cookie_removal_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_filter_cookie_removal_log'] = $web_filter_cookie_removal_log;

        return $this;
    }

    /**
     * Gets web_url_log
     *
     * @return string|null
     */
    public function getWebUrlLog()
    {
        return $this->container['web_url_log'];
    }

    /**
     * Sets web_url_log
     *
     * @param string|null $web_url_log Enable/disable logging URL filtering.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebUrlLog($web_url_log)
    {
        $allowedValues = $this->getWebUrlLogAllowableValues();
        if (!is_null($web_url_log) && !in_array($web_url_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_url_log', must be one of '%s'",
                    $web_url_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_url_log'] = $web_url_log;

        return $this;
    }

    /**
     * Gets web_invalid_domain_log
     *
     * @return string|null
     */
    public function getWebInvalidDomainLog()
    {
        return $this->container['web_invalid_domain_log'];
    }

    /**
     * Sets web_invalid_domain_log
     *
     * @param string|null $web_invalid_domain_log Enable/disable logging invalid domain names.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebInvalidDomainLog($web_invalid_domain_log)
    {
        $allowedValues = $this->getWebInvalidDomainLogAllowableValues();
        if (!is_null($web_invalid_domain_log) && !in_array($web_invalid_domain_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_invalid_domain_log', must be one of '%s'",
                    $web_invalid_domain_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_invalid_domain_log'] = $web_invalid_domain_log;

        return $this;
    }

    /**
     * Gets web_ftgd_err_log
     *
     * @return string|null
     */
    public function getWebFtgdErrLog()
    {
        return $this->container['web_ftgd_err_log'];
    }

    /**
     * Sets web_ftgd_err_log
     *
     * @param string|null $web_ftgd_err_log Enable/disable logging rating errors.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFtgdErrLog($web_ftgd_err_log)
    {
        $allowedValues = $this->getWebFtgdErrLogAllowableValues();
        if (!is_null($web_ftgd_err_log) && !in_array($web_ftgd_err_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_ftgd_err_log', must be one of '%s'",
                    $web_ftgd_err_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_ftgd_err_log'] = $web_ftgd_err_log;

        return $this;
    }

    /**
     * Gets web_ftgd_quota_usage
     *
     * @return string|null
     */
    public function getWebFtgdQuotaUsage()
    {
        return $this->container['web_ftgd_quota_usage'];
    }

    /**
     * Sets web_ftgd_quota_usage
     *
     * @param string|null $web_ftgd_quota_usage Enable/disable logging daily quota usage.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebFtgdQuotaUsage($web_ftgd_quota_usage)
    {
        $allowedValues = $this->getWebFtgdQuotaUsageAllowableValues();
        if (!is_null($web_ftgd_quota_usage) && !in_array($web_ftgd_quota_usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_ftgd_quota_usage', must be one of '%s'",
                    $web_ftgd_quota_usage,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_ftgd_quota_usage'] = $web_ftgd_quota_usage;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging for web filtering.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets web_extended_all_action_log
     *
     * @return string|null
     */
    public function getWebExtendedAllActionLog()
    {
        return $this->container['web_extended_all_action_log'];
    }

    /**
     * Sets web_extended_all_action_log
     *
     * @param string|null $web_extended_all_action_log Enable/disable extended any filter action logging for web filtering.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebExtendedAllActionLog($web_extended_all_action_log)
    {
        $allowedValues = $this->getWebExtendedAllActionLogAllowableValues();
        if (!is_null($web_extended_all_action_log) && !in_array($web_extended_all_action_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_extended_all_action_log', must be one of '%s'",
                    $web_extended_all_action_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_extended_all_action_log'] = $web_extended_all_action_log;

        return $this;
    }

    /**
     * Gets web_antiphishing_log
     *
     * @return string|null
     */
    public function getWebAntiphishingLog()
    {
        return $this->container['web_antiphishing_log'];
    }

    /**
     * Sets web_antiphishing_log
     *
     * @param string|null $web_antiphishing_log Enable/disable logging of AntiPhishing checks.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWebAntiphishingLog($web_antiphishing_log)
    {
        $allowedValues = $this->getWebAntiphishingLogAllowableValues();
        if (!is_null($web_antiphishing_log) && !in_array($web_antiphishing_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_antiphishing_log', must be one of '%s'",
                    $web_antiphishing_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_antiphishing_log'] = $web_antiphishing_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


