<?php
/**
 * WebProxyExplicitPacPolicy
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebProxyExplicitPacPolicy Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebProxyExplicitPacPolicy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_web_proxy_explicit_pac_policy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policyid' => 'int',
        'status' => 'string',
        'srcaddr' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'srcaddr6' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'dstaddr' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'pac_file_name' => 'string',
        'pac_file_data' => 'string',
        'comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'policyid' => null,
        'status' => null,
        'srcaddr' => null,
        'srcaddr6' => null,
        'dstaddr' => null,
        'pac_file_name' => null,
        'pac_file_data' => null,
        'comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policyid' => 'policyid',
        'status' => 'status',
        'srcaddr' => 'srcaddr',
        'srcaddr6' => 'srcaddr6',
        'dstaddr' => 'dstaddr',
        'pac_file_name' => 'pac-file-name',
        'pac_file_data' => 'pac-file-data',
        'comments' => 'comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policyid' => 'setPolicyid',
        'status' => 'setStatus',
        'srcaddr' => 'setSrcaddr',
        'srcaddr6' => 'setSrcaddr6',
        'dstaddr' => 'setDstaddr',
        'pac_file_name' => 'setPacFileName',
        'pac_file_data' => 'setPacFileData',
        'comments' => 'setComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policyid' => 'getPolicyid',
        'status' => 'getStatus',
        'srcaddr' => 'getSrcaddr',
        'srcaddr6' => 'getSrcaddr6',
        'dstaddr' => 'getDstaddr',
        'pac_file_name' => 'getPacFileName',
        'pac_file_data' => 'getPacFileData',
        'comments' => 'getComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policyid'] = $data['policyid'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['srcaddr'] = $data['srcaddr'] ?? null;
        $this->container['srcaddr6'] = $data['srcaddr6'] ?? null;
        $this->container['dstaddr'] = $data['dstaddr'] ?? null;
        $this->container['pac_file_name'] = $data['pac_file_name'] ?? null;
        $this->container['pac_file_data'] = $data['pac_file_data'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['policyid']) && ($this->container['policyid'] > 100)) {
            $invalidProperties[] = "invalid value for 'policyid', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['policyid']) && ($this->container['policyid'] < 1)) {
            $invalidProperties[] = "invalid value for 'policyid', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['srcaddr']) && (count($this->container['srcaddr']) > 0)) {
            $invalidProperties[] = "invalid value for 'srcaddr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['srcaddr6']) && (count($this->container['srcaddr6']) > 0)) {
            $invalidProperties[] = "invalid value for 'srcaddr6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dstaddr']) && (count($this->container['dstaddr']) > 0)) {
            $invalidProperties[] = "invalid value for 'dstaddr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['pac_file_name']) && (mb_strlen($this->container['pac_file_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'pac_file_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 1023)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 1023.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policyid
     *
     * @return int|null
     */
    public function getPolicyid()
    {
        return $this->container['policyid'];
    }

    /**
     * Sets policyid
     *
     * @param int|null $policyid Policy ID.
     *
     * @return self
     */
    public function setPolicyid($policyid)
    {

        if (!is_null($policyid) && ($policyid > 100)) {
            throw new \InvalidArgumentException('invalid value for $policyid when calling WebProxyExplicitPacPolicy., must be smaller than or equal to 100.');
        }
        if (!is_null($policyid) && ($policyid < 1)) {
            throw new \InvalidArgumentException('invalid value for $policyid when calling WebProxyExplicitPacPolicy., must be bigger than or equal to 1.');
        }

        $this->container['policyid'] = $policyid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable policy.    enable:Enable policy.    disable:Disable policy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets srcaddr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getSrcaddr()
    {
        return $this->container['srcaddr'];
    }

    /**
     * Sets srcaddr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $srcaddr Source address objects.
     *
     * @return self
     */
    public function setSrcaddr($srcaddr)
    {

        if (!is_null($srcaddr) && (count($srcaddr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $srcaddr when calling WebProxyExplicitPacPolicy., number of items must be less than or equal to 0.');
        }
        $this->container['srcaddr'] = $srcaddr;

        return $this;
    }

    /**
     * Gets srcaddr6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getSrcaddr6()
    {
        return $this->container['srcaddr6'];
    }

    /**
     * Sets srcaddr6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $srcaddr6 Source address6 objects.
     *
     * @return self
     */
    public function setSrcaddr6($srcaddr6)
    {

        if (!is_null($srcaddr6) && (count($srcaddr6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $srcaddr6 when calling WebProxyExplicitPacPolicy., number of items must be less than or equal to 0.');
        }
        $this->container['srcaddr6'] = $srcaddr6;

        return $this;
    }

    /**
     * Gets dstaddr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getDstaddr()
    {
        return $this->container['dstaddr'];
    }

    /**
     * Sets dstaddr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $dstaddr Destination address objects.
     *
     * @return self
     */
    public function setDstaddr($dstaddr)
    {

        if (!is_null($dstaddr) && (count($dstaddr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dstaddr when calling WebProxyExplicitPacPolicy., number of items must be less than or equal to 0.');
        }
        $this->container['dstaddr'] = $dstaddr;

        return $this;
    }

    /**
     * Gets pac_file_name
     *
     * @return string|null
     */
    public function getPacFileName()
    {
        return $this->container['pac_file_name'];
    }

    /**
     * Sets pac_file_name
     *
     * @param string|null $pac_file_name Pac file name.
     *
     * @return self
     */
    public function setPacFileName($pac_file_name)
    {
        if (!is_null($pac_file_name) && (mb_strlen($pac_file_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $pac_file_name when calling WebProxyExplicitPacPolicy., must be smaller than or equal to 63.');
        }

        $this->container['pac_file_name'] = $pac_file_name;

        return $this;
    }

    /**
     * Gets pac_file_data
     *
     * @return string|null
     */
    public function getPacFileData()
    {
        return $this->container['pac_file_data'];
    }

    /**
     * Sets pac_file_data
     *
     * @param string|null $pac_file_data PAC file contents enclosed in quotes (maximum of 256K bytes).
     *
     * @return self
     */
    public function setPacFileData($pac_file_data)
    {
        $this->container['pac_file_data'] = $pac_file_data;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Optional comments.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling WebProxyExplicitPacPolicy., must be smaller than or equal to 1023.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


