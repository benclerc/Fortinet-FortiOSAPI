<?php
/**
 * InlineObject292
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject292 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject292 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_292';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ddnsid' => 'int',
        'ddns_server' => 'string',
        'server_type' => 'string',
        'ddns_server_addr' => '\Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidDdnsServerAddr[]',
        'ddns_zone' => 'string',
        'ddns_ttl' => 'int',
        'ddns_auth' => 'string',
        'ddns_keyname' => 'string',
        'ddns_key' => 'string',
        'ddns_domain' => 'string',
        'ddns_username' => 'string',
        'ddns_sn' => 'string',
        'ddns_password' => 'string',
        'use_public_ip' => 'string',
        'addr_type' => 'string',
        'update_interval' => 'int',
        'clear_text' => 'string',
        'ssl_certificate' => 'string',
        'bound_ip' => 'string',
        'monitor_interface' => '\Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ddnsid' => null,
        'ddns_server' => null,
        'server_type' => null,
        'ddns_server_addr' => null,
        'ddns_zone' => null,
        'ddns_ttl' => null,
        'ddns_auth' => null,
        'ddns_keyname' => null,
        'ddns_key' => null,
        'ddns_domain' => null,
        'ddns_username' => null,
        'ddns_sn' => null,
        'ddns_password' => 'password',
        'use_public_ip' => null,
        'addr_type' => null,
        'update_interval' => null,
        'clear_text' => null,
        'ssl_certificate' => null,
        'bound_ip' => 'ipv4',
        'monitor_interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ddnsid' => 'ddnsid',
        'ddns_server' => 'ddns-server',
        'server_type' => 'server-type',
        'ddns_server_addr' => 'ddns-server-addr',
        'ddns_zone' => 'ddns-zone',
        'ddns_ttl' => 'ddns-ttl',
        'ddns_auth' => 'ddns-auth',
        'ddns_keyname' => 'ddns-keyname',
        'ddns_key' => 'ddns-key',
        'ddns_domain' => 'ddns-domain',
        'ddns_username' => 'ddns-username',
        'ddns_sn' => 'ddns-sn',
        'ddns_password' => 'ddns-password',
        'use_public_ip' => 'use-public-ip',
        'addr_type' => 'addr-type',
        'update_interval' => 'update-interval',
        'clear_text' => 'clear-text',
        'ssl_certificate' => 'ssl-certificate',
        'bound_ip' => 'bound-ip',
        'monitor_interface' => 'monitor-interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ddnsid' => 'setDdnsid',
        'ddns_server' => 'setDdnsServer',
        'server_type' => 'setServerType',
        'ddns_server_addr' => 'setDdnsServerAddr',
        'ddns_zone' => 'setDdnsZone',
        'ddns_ttl' => 'setDdnsTtl',
        'ddns_auth' => 'setDdnsAuth',
        'ddns_keyname' => 'setDdnsKeyname',
        'ddns_key' => 'setDdnsKey',
        'ddns_domain' => 'setDdnsDomain',
        'ddns_username' => 'setDdnsUsername',
        'ddns_sn' => 'setDdnsSn',
        'ddns_password' => 'setDdnsPassword',
        'use_public_ip' => 'setUsePublicIp',
        'addr_type' => 'setAddrType',
        'update_interval' => 'setUpdateInterval',
        'clear_text' => 'setClearText',
        'ssl_certificate' => 'setSslCertificate',
        'bound_ip' => 'setBoundIp',
        'monitor_interface' => 'setMonitorInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ddnsid' => 'getDdnsid',
        'ddns_server' => 'getDdnsServer',
        'server_type' => 'getServerType',
        'ddns_server_addr' => 'getDdnsServerAddr',
        'ddns_zone' => 'getDdnsZone',
        'ddns_ttl' => 'getDdnsTtl',
        'ddns_auth' => 'getDdnsAuth',
        'ddns_keyname' => 'getDdnsKeyname',
        'ddns_key' => 'getDdnsKey',
        'ddns_domain' => 'getDdnsDomain',
        'ddns_username' => 'getDdnsUsername',
        'ddns_sn' => 'getDdnsSn',
        'ddns_password' => 'getDdnsPassword',
        'use_public_ip' => 'getUsePublicIp',
        'addr_type' => 'getAddrType',
        'update_interval' => 'getUpdateInterval',
        'clear_text' => 'getClearText',
        'ssl_certificate' => 'getSslCertificate',
        'bound_ip' => 'getBoundIp',
        'monitor_interface' => 'getMonitorInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DDNS_SERVER_DYNDNS_ORG = 'dyndns.org';
    const DDNS_SERVER_DYNS_NET = 'dyns.net';
    const DDNS_SERVER_TZO_COM = 'tzo.com';
    const DDNS_SERVER_VAVIC_COM = 'vavic.com';
    const DDNS_SERVER_DIPDNS_NET = 'dipdns.net';
    const DDNS_SERVER_NOW_NET_CN = 'now.net.cn';
    const DDNS_SERVER_DHS_ORG = 'dhs.org';
    const DDNS_SERVER_EASYDNS_COM = 'easydns.com';
    const DDNS_SERVER_GENERIC_DDNS = 'genericDDNS';
    const DDNS_SERVER_FORTI_GUARD_DDNS = 'FortiGuardDDNS';
    const DDNS_SERVER_NOIP_COM = 'noip.com';
    const SERVER_TYPE_IPV4 = 'ipv4';
    const SERVER_TYPE_IPV6 = 'ipv6';
    const DDNS_AUTH_DISABLE = 'disable';
    const DDNS_AUTH_TSIG = 'tsig';
    const USE_PUBLIC_IP_DISABLE = 'disable';
    const USE_PUBLIC_IP_ENABLE = 'enable';
    const ADDR_TYPE_IPV4 = 'ipv4';
    const ADDR_TYPE_IPV6 = 'ipv6';
    const CLEAR_TEXT_DISABLE = 'disable';
    const CLEAR_TEXT_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdnsServerAllowableValues()
    {
        return [
            self::DDNS_SERVER_DYNDNS_ORG,
            self::DDNS_SERVER_DYNS_NET,
            self::DDNS_SERVER_TZO_COM,
            self::DDNS_SERVER_VAVIC_COM,
            self::DDNS_SERVER_DIPDNS_NET,
            self::DDNS_SERVER_NOW_NET_CN,
            self::DDNS_SERVER_DHS_ORG,
            self::DDNS_SERVER_EASYDNS_COM,
            self::DDNS_SERVER_GENERIC_DDNS,
            self::DDNS_SERVER_FORTI_GUARD_DDNS,
            self::DDNS_SERVER_NOIP_COM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerTypeAllowableValues()
    {
        return [
            self::SERVER_TYPE_IPV4,
            self::SERVER_TYPE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdnsAuthAllowableValues()
    {
        return [
            self::DDNS_AUTH_DISABLE,
            self::DDNS_AUTH_TSIG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsePublicIpAllowableValues()
    {
        return [
            self::USE_PUBLIC_IP_DISABLE,
            self::USE_PUBLIC_IP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrTypeAllowableValues()
    {
        return [
            self::ADDR_TYPE_IPV4,
            self::ADDR_TYPE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClearTextAllowableValues()
    {
        return [
            self::CLEAR_TEXT_DISABLE,
            self::CLEAR_TEXT_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ddnsid'] = $data['ddnsid'] ?? null;
        $this->container['ddns_server'] = $data['ddns_server'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['ddns_server_addr'] = $data['ddns_server_addr'] ?? null;
        $this->container['ddns_zone'] = $data['ddns_zone'] ?? null;
        $this->container['ddns_ttl'] = $data['ddns_ttl'] ?? null;
        $this->container['ddns_auth'] = $data['ddns_auth'] ?? null;
        $this->container['ddns_keyname'] = $data['ddns_keyname'] ?? null;
        $this->container['ddns_key'] = $data['ddns_key'] ?? null;
        $this->container['ddns_domain'] = $data['ddns_domain'] ?? null;
        $this->container['ddns_username'] = $data['ddns_username'] ?? null;
        $this->container['ddns_sn'] = $data['ddns_sn'] ?? null;
        $this->container['ddns_password'] = $data['ddns_password'] ?? null;
        $this->container['use_public_ip'] = $data['use_public_ip'] ?? null;
        $this->container['addr_type'] = $data['addr_type'] ?? null;
        $this->container['update_interval'] = $data['update_interval'] ?? null;
        $this->container['clear_text'] = $data['clear_text'] ?? null;
        $this->container['ssl_certificate'] = $data['ssl_certificate'] ?? null;
        $this->container['bound_ip'] = $data['bound_ip'] ?? null;
        $this->container['monitor_interface'] = $data['monitor_interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ddnsid']) && ($this->container['ddnsid'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'ddnsid', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['ddnsid']) && ($this->container['ddnsid'] < 0)) {
            $invalidProperties[] = "invalid value for 'ddnsid', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDdnsServerAllowableValues();
        if (!is_null($this->container['ddns_server']) && !in_array($this->container['ddns_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddns_server', must be one of '%s'",
                $this->container['ddns_server'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($this->container['server_type']) && !in_array($this->container['server_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_type', must be one of '%s'",
                $this->container['server_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ddns_server_addr']) && (count($this->container['ddns_server_addr']) > 0)) {
            $invalidProperties[] = "invalid value for 'ddns_server_addr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ddns_zone']) && (mb_strlen($this->container['ddns_zone']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_zone', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_ttl']) && ($this->container['ddns_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'ddns_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['ddns_ttl']) && ($this->container['ddns_ttl'] < 60)) {
            $invalidProperties[] = "invalid value for 'ddns_ttl', must be bigger than or equal to 60.";
        }

        $allowedValues = $this->getDdnsAuthAllowableValues();
        if (!is_null($this->container['ddns_auth']) && !in_array($this->container['ddns_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddns_auth', must be one of '%s'",
                $this->container['ddns_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ddns_keyname']) && (mb_strlen($this->container['ddns_keyname']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_keyname', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_domain']) && (mb_strlen($this->container['ddns_domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_domain', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_username']) && (mb_strlen($this->container['ddns_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_username', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_sn']) && (mb_strlen($this->container['ddns_sn']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_sn', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getUsePublicIpAllowableValues();
        if (!is_null($this->container['use_public_ip']) && !in_array($this->container['use_public_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_public_ip', must be one of '%s'",
                $this->container['use_public_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($this->container['addr_type']) && !in_array($this->container['addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_type', must be one of '%s'",
                $this->container['addr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['update_interval']) && ($this->container['update_interval'] > 2592000)) {
            $invalidProperties[] = "invalid value for 'update_interval', must be smaller than or equal to 2592000.";
        }

        if (!is_null($this->container['update_interval']) && ($this->container['update_interval'] < 60)) {
            $invalidProperties[] = "invalid value for 'update_interval', must be bigger than or equal to 60.";
        }

        $allowedValues = $this->getClearTextAllowableValues();
        if (!is_null($this->container['clear_text']) && !in_array($this->container['clear_text'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'clear_text', must be one of '%s'",
                $this->container['clear_text'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssl_certificate']) && (mb_strlen($this->container['ssl_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['monitor_interface']) && (count($this->container['monitor_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'monitor_interface', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ddnsid
     *
     * @return int|null
     */
    public function getDdnsid()
    {
        return $this->container['ddnsid'];
    }

    /**
     * Sets ddnsid
     *
     * @param int|null $ddnsid DDNS ID.
     *
     * @return self
     */
    public function setDdnsid($ddnsid)
    {

        if (!is_null($ddnsid) && ($ddnsid > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $ddnsid when calling InlineObject292., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($ddnsid) && ($ddnsid < 0)) {
            throw new \InvalidArgumentException('invalid value for $ddnsid when calling InlineObject292., must be bigger than or equal to 0.');
        }

        $this->container['ddnsid'] = $ddnsid;

        return $this;
    }

    /**
     * Gets ddns_server
     *
     * @return string|null
     */
    public function getDdnsServer()
    {
        return $this->container['ddns_server'];
    }

    /**
     * Sets ddns_server
     *
     * @param string|null $ddns_server Select a DDNS service provider.    dyndns.org:members.dyndns.org and dnsalias.com    dyns.net:www.dyns.net    tzo.com:rh.tzo.com    vavic.com:Peanut Hull    dipdns.net:dipdnsserver.dipdns.com    now.net.cn:ip.todayisp.com    dhs.org:members.dhs.org    easydns.com:members.easydns.com    genericDDNS:Generic DDNS based on RFC2136.    FortiGuardDDNS:FortiGuard DDNS service.    noip.com:dynupdate.no-ip.com
     *
     * @return self
     */
    public function setDdnsServer($ddns_server)
    {
        $allowedValues = $this->getDdnsServerAllowableValues();
        if (!is_null($ddns_server) && !in_array($ddns_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddns_server', must be one of '%s'",
                    $ddns_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddns_server'] = $ddns_server;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string|null $server_type Address type of the DDNS server.    ipv4:Use IPv4 addressing.    ipv6:Use IPv6 addressing.
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($server_type) && !in_array($server_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_type', must be one of '%s'",
                    $server_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets ddns_server_addr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidDdnsServerAddr[]|null
     */
    public function getDdnsServerAddr()
    {
        return $this->container['ddns_server_addr'];
    }

    /**
     * Sets ddns_server_addr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidDdnsServerAddr[]|null $ddns_server_addr Generic DDNS server IP/FQDN list.
     *
     * @return self
     */
    public function setDdnsServerAddr($ddns_server_addr)
    {

        if (!is_null($ddns_server_addr) && (count($ddns_server_addr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ddns_server_addr when calling InlineObject292., number of items must be less than or equal to 0.');
        }
        $this->container['ddns_server_addr'] = $ddns_server_addr;

        return $this;
    }

    /**
     * Gets ddns_zone
     *
     * @return string|null
     */
    public function getDdnsZone()
    {
        return $this->container['ddns_zone'];
    }

    /**
     * Sets ddns_zone
     *
     * @param string|null $ddns_zone Zone of your domain name (for example, DDNS.com).
     *
     * @return self
     */
    public function setDdnsZone($ddns_zone)
    {
        if (!is_null($ddns_zone) && (mb_strlen($ddns_zone) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_zone when calling InlineObject292., must be smaller than or equal to 64.');
        }

        $this->container['ddns_zone'] = $ddns_zone;

        return $this;
    }

    /**
     * Gets ddns_ttl
     *
     * @return int|null
     */
    public function getDdnsTtl()
    {
        return $this->container['ddns_ttl'];
    }

    /**
     * Sets ddns_ttl
     *
     * @param int|null $ddns_ttl Time-to-live for DDNS packets.
     *
     * @return self
     */
    public function setDdnsTtl($ddns_ttl)
    {

        if (!is_null($ddns_ttl) && ($ddns_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $ddns_ttl when calling InlineObject292., must be smaller than or equal to 86400.');
        }
        if (!is_null($ddns_ttl) && ($ddns_ttl < 60)) {
            throw new \InvalidArgumentException('invalid value for $ddns_ttl when calling InlineObject292., must be bigger than or equal to 60.');
        }

        $this->container['ddns_ttl'] = $ddns_ttl;

        return $this;
    }

    /**
     * Gets ddns_auth
     *
     * @return string|null
     */
    public function getDdnsAuth()
    {
        return $this->container['ddns_auth'];
    }

    /**
     * Sets ddns_auth
     *
     * @param string|null $ddns_auth Enable/disable TSIG authentication for your DDNS server.    disable:Disable DDNS authentication.    tsig:Enable TSIG authentication based on RFC2845.
     *
     * @return self
     */
    public function setDdnsAuth($ddns_auth)
    {
        $allowedValues = $this->getDdnsAuthAllowableValues();
        if (!is_null($ddns_auth) && !in_array($ddns_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddns_auth', must be one of '%s'",
                    $ddns_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddns_auth'] = $ddns_auth;

        return $this;
    }

    /**
     * Gets ddns_keyname
     *
     * @return string|null
     */
    public function getDdnsKeyname()
    {
        return $this->container['ddns_keyname'];
    }

    /**
     * Sets ddns_keyname
     *
     * @param string|null $ddns_keyname DDNS update key name.
     *
     * @return self
     */
    public function setDdnsKeyname($ddns_keyname)
    {
        if (!is_null($ddns_keyname) && (mb_strlen($ddns_keyname) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_keyname when calling InlineObject292., must be smaller than or equal to 64.');
        }

        $this->container['ddns_keyname'] = $ddns_keyname;

        return $this;
    }

    /**
     * Gets ddns_key
     *
     * @return string|null
     */
    public function getDdnsKey()
    {
        return $this->container['ddns_key'];
    }

    /**
     * Sets ddns_key
     *
     * @param string|null $ddns_key DDNS update key (base 64 encoding).
     *
     * @return self
     */
    public function setDdnsKey($ddns_key)
    {
        $this->container['ddns_key'] = $ddns_key;

        return $this;
    }

    /**
     * Gets ddns_domain
     *
     * @return string|null
     */
    public function getDdnsDomain()
    {
        return $this->container['ddns_domain'];
    }

    /**
     * Sets ddns_domain
     *
     * @param string|null $ddns_domain Your fully qualified domain name (for example, yourname.DDNS.com).
     *
     * @return self
     */
    public function setDdnsDomain($ddns_domain)
    {
        if (!is_null($ddns_domain) && (mb_strlen($ddns_domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_domain when calling InlineObject292., must be smaller than or equal to 64.');
        }

        $this->container['ddns_domain'] = $ddns_domain;

        return $this;
    }

    /**
     * Gets ddns_username
     *
     * @return string|null
     */
    public function getDdnsUsername()
    {
        return $this->container['ddns_username'];
    }

    /**
     * Sets ddns_username
     *
     * @param string|null $ddns_username DDNS user name.
     *
     * @return self
     */
    public function setDdnsUsername($ddns_username)
    {
        if (!is_null($ddns_username) && (mb_strlen($ddns_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_username when calling InlineObject292., must be smaller than or equal to 64.');
        }

        $this->container['ddns_username'] = $ddns_username;

        return $this;
    }

    /**
     * Gets ddns_sn
     *
     * @return string|null
     */
    public function getDdnsSn()
    {
        return $this->container['ddns_sn'];
    }

    /**
     * Sets ddns_sn
     *
     * @param string|null $ddns_sn DDNS Serial Number.
     *
     * @return self
     */
    public function setDdnsSn($ddns_sn)
    {
        if (!is_null($ddns_sn) && (mb_strlen($ddns_sn) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_sn when calling InlineObject292., must be smaller than or equal to 64.');
        }

        $this->container['ddns_sn'] = $ddns_sn;

        return $this;
    }

    /**
     * Gets ddns_password
     *
     * @return string|null
     */
    public function getDdnsPassword()
    {
        return $this->container['ddns_password'];
    }

    /**
     * Sets ddns_password
     *
     * @param string|null $ddns_password DDNS password.
     *
     * @return self
     */
    public function setDdnsPassword($ddns_password)
    {
        $this->container['ddns_password'] = $ddns_password;

        return $this;
    }

    /**
     * Gets use_public_ip
     *
     * @return string|null
     */
    public function getUsePublicIp()
    {
        return $this->container['use_public_ip'];
    }

    /**
     * Sets use_public_ip
     *
     * @param string|null $use_public_ip Enable/disable use of public IP address.    disable:Disable use of public IP address.    enable:Enable use of public IP address.
     *
     * @return self
     */
    public function setUsePublicIp($use_public_ip)
    {
        $allowedValues = $this->getUsePublicIpAllowableValues();
        if (!is_null($use_public_ip) && !in_array($use_public_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_public_ip', must be one of '%s'",
                    $use_public_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_public_ip'] = $use_public_ip;

        return $this;
    }

    /**
     * Gets addr_type
     *
     * @return string|null
     */
    public function getAddrType()
    {
        return $this->container['addr_type'];
    }

    /**
     * Sets addr_type
     *
     * @param string|null $addr_type Address type of interface address in DDNS update.    ipv4:Use IPv4 address of the interface.    ipv6:Use IPv6 address of the interface.
     *
     * @return self
     */
    public function setAddrType($addr_type)
    {
        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($addr_type) && !in_array($addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_type', must be one of '%s'",
                    $addr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_type'] = $addr_type;

        return $this;
    }

    /**
     * Gets update_interval
     *
     * @return int|null
     */
    public function getUpdateInterval()
    {
        return $this->container['update_interval'];
    }

    /**
     * Sets update_interval
     *
     * @param int|null $update_interval DDNS update interval (60 - 2592000 sec, default = 300).
     *
     * @return self
     */
    public function setUpdateInterval($update_interval)
    {

        if (!is_null($update_interval) && ($update_interval > 2592000)) {
            throw new \InvalidArgumentException('invalid value for $update_interval when calling InlineObject292., must be smaller than or equal to 2592000.');
        }
        if (!is_null($update_interval) && ($update_interval < 60)) {
            throw new \InvalidArgumentException('invalid value for $update_interval when calling InlineObject292., must be bigger than or equal to 60.');
        }

        $this->container['update_interval'] = $update_interval;

        return $this;
    }

    /**
     * Gets clear_text
     *
     * @return string|null
     */
    public function getClearText()
    {
        return $this->container['clear_text'];
    }

    /**
     * Sets clear_text
     *
     * @param string|null $clear_text Enable/disable use of clear text connections.    disable:Disable use of clear text connections.    enable:Enable use of clear text connections.
     *
     * @return self
     */
    public function setClearText($clear_text)
    {
        $allowedValues = $this->getClearTextAllowableValues();
        if (!is_null($clear_text) && !in_array($clear_text, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'clear_text', must be one of '%s'",
                    $clear_text,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['clear_text'] = $clear_text;

        return $this;
    }

    /**
     * Gets ssl_certificate
     *
     * @return string|null
     */
    public function getSslCertificate()
    {
        return $this->container['ssl_certificate'];
    }

    /**
     * Sets ssl_certificate
     *
     * @param string|null $ssl_certificate Name of local certificate for SSL connections.
     *
     * @return self
     */
    public function setSslCertificate($ssl_certificate)
    {
        if (!is_null($ssl_certificate) && (mb_strlen($ssl_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_certificate when calling InlineObject292., must be smaller than or equal to 35.');
        }

        $this->container['ssl_certificate'] = $ssl_certificate;

        return $this;
    }

    /**
     * Gets bound_ip
     *
     * @return string|null
     */
    public function getBoundIp()
    {
        return $this->container['bound_ip'];
    }

    /**
     * Sets bound_ip
     *
     * @param string|null $bound_ip Bound IP address.
     *
     * @return self
     */
    public function setBoundIp($bound_ip)
    {
        $this->container['bound_ip'] = $bound_ip;

        return $this;
    }

    /**
     * Gets monitor_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]|null
     */
    public function getMonitorInterface()
    {
        return $this->container['monitor_interface'];
    }

    /**
     * Sets monitor_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]|null $monitor_interface Monitored interface.
     *
     * @return self
     */
    public function setMonitorInterface($monitor_interface)
    {

        if (!is_null($monitor_interface) && (count($monitor_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $monitor_interface when calling InlineObject292., number of items must be less than or equal to 0.');
        }
        $this->container['monitor_interface'] = $monitor_interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


