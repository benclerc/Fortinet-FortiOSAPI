<?php
/**
 * InlineObject320
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject320 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject320 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_320';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'monitor_vlan' => 'string',
        'vlan_hb_interval' => 'int',
        'vlan_hb_lost_threshold' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'monitor_vlan' => null,
        'vlan_hb_interval' => null,
        'vlan_hb_lost_threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'monitor_vlan' => 'monitor-vlan',
        'vlan_hb_interval' => 'vlan-hb-interval',
        'vlan_hb_lost_threshold' => 'vlan-hb-lost-threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'monitor_vlan' => 'setMonitorVlan',
        'vlan_hb_interval' => 'setVlanHbInterval',
        'vlan_hb_lost_threshold' => 'setVlanHbLostThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'monitor_vlan' => 'getMonitorVlan',
        'vlan_hb_interval' => 'getVlanHbInterval',
        'vlan_hb_lost_threshold' => 'getVlanHbLostThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MONITOR_VLAN_ENABLE = 'enable';
    const MONITOR_VLAN_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMonitorVlanAllowableValues()
    {
        return [
            self::MONITOR_VLAN_ENABLE,
            self::MONITOR_VLAN_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['monitor_vlan'] = $data['monitor_vlan'] ?? null;
        $this->container['vlan_hb_interval'] = $data['vlan_hb_interval'] ?? null;
        $this->container['vlan_hb_lost_threshold'] = $data['vlan_hb_lost_threshold'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMonitorVlanAllowableValues();
        if (!is_null($this->container['monitor_vlan']) && !in_array($this->container['monitor_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'monitor_vlan', must be one of '%s'",
                $this->container['monitor_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vlan_hb_interval']) && ($this->container['vlan_hb_interval'] > 30)) {
            $invalidProperties[] = "invalid value for 'vlan_hb_interval', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['vlan_hb_interval']) && ($this->container['vlan_hb_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'vlan_hb_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vlan_hb_lost_threshold']) && ($this->container['vlan_hb_lost_threshold'] > 60)) {
            $invalidProperties[] = "invalid value for 'vlan_hb_lost_threshold', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['vlan_hb_lost_threshold']) && ($this->container['vlan_hb_lost_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'vlan_hb_lost_threshold', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets monitor_vlan
     *
     * @return string|null
     */
    public function getMonitorVlan()
    {
        return $this->container['monitor_vlan'];
    }

    /**
     * Sets monitor_vlan
     *
     * @param string|null $monitor_vlan Enable/disable monitor VLAN interfaces.    enable:Enable monitor VLAN interfaces.    disable:Disable monitor VLAN interfaces.
     *
     * @return self
     */
    public function setMonitorVlan($monitor_vlan)
    {
        $allowedValues = $this->getMonitorVlanAllowableValues();
        if (!is_null($monitor_vlan) && !in_array($monitor_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'monitor_vlan', must be one of '%s'",
                    $monitor_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['monitor_vlan'] = $monitor_vlan;

        return $this;
    }

    /**
     * Gets vlan_hb_interval
     *
     * @return int|null
     */
    public function getVlanHbInterval()
    {
        return $this->container['vlan_hb_interval'];
    }

    /**
     * Sets vlan_hb_interval
     *
     * @param int|null $vlan_hb_interval Configure heartbeat interval (seconds).
     *
     * @return self
     */
    public function setVlanHbInterval($vlan_hb_interval)
    {

        if (!is_null($vlan_hb_interval) && ($vlan_hb_interval > 30)) {
            throw new \InvalidArgumentException('invalid value for $vlan_hb_interval when calling InlineObject320., must be smaller than or equal to 30.');
        }
        if (!is_null($vlan_hb_interval) && ($vlan_hb_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $vlan_hb_interval when calling InlineObject320., must be bigger than or equal to 1.');
        }

        $this->container['vlan_hb_interval'] = $vlan_hb_interval;

        return $this;
    }

    /**
     * Gets vlan_hb_lost_threshold
     *
     * @return int|null
     */
    public function getVlanHbLostThreshold()
    {
        return $this->container['vlan_hb_lost_threshold'];
    }

    /**
     * Sets vlan_hb_lost_threshold
     *
     * @param int|null $vlan_hb_lost_threshold VLAN lost heartbeat threshold (1 - 60).
     *
     * @return self
     */
    public function setVlanHbLostThreshold($vlan_hb_lost_threshold)
    {

        if (!is_null($vlan_hb_lost_threshold) && ($vlan_hb_lost_threshold > 60)) {
            throw new \InvalidArgumentException('invalid value for $vlan_hb_lost_threshold when calling InlineObject320., must be smaller than or equal to 60.');
        }
        if (!is_null($vlan_hb_lost_threshold) && ($vlan_hb_lost_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $vlan_hb_lost_threshold when calling InlineObject320., must be bigger than or equal to 1.');
        }

        $this->container['vlan_hb_lost_threshold'] = $vlan_hb_lost_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


