<?php
/**
 * SystemSdwanService
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanService Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'addr_mode' => 'string',
        'input_device' => '\Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]',
        'input_device_negate' => 'string',
        'mode' => 'string',
        'minimum_sla_meet_members' => 'int',
        'hash_mode' => 'string',
        'role' => 'string',
        'standalone_action' => 'string',
        'quality_link' => 'int',
        'tos' => 'string',
        'tos_mask' => 'string',
        'protocol' => 'int',
        'start_port' => 'int',
        'end_port' => 'int',
        'route_tag' => 'int',
        'dst' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]',
        'dst_negate' => 'string',
        'src' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]',
        'dst6' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]',
        'src6' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]',
        'src_negate' => 'string',
        'users' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanUsers[]',
        'groups' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]',
        'internet_service' => 'string',
        'internet_service_custom' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustom[]',
        'internet_service_custom_group' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustomGroup[]',
        'internet_service_name' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceName[]',
        'internet_service_group' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceGroup[]',
        'internet_service_app_ctrl' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrl[]',
        'internet_service_app_ctrl_group' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrlGroup[]',
        'health_check' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck1[]',
        'link_cost_factor' => 'string',
        'packet_loss_weight' => 'int',
        'latency_weight' => 'int',
        'jitter_weight' => 'int',
        'bandwidth_weight' => 'int',
        'link_cost_threshold' => 'int',
        'hold_down_time' => 'int',
        'dscp_forward' => 'string',
        'dscp_reverse' => 'string',
        'dscp_forward_tag' => 'string',
        'dscp_reverse_tag' => 'string',
        'sla' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanSla1[]',
        'priority_members' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]',
        'status' => 'string',
        'gateway' => 'string',
        'default' => 'string',
        'sla_compare_method' => 'string',
        'tie_break' => 'string',
        'use_shortcut_sla' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'addr_mode' => null,
        'input_device' => null,
        'input_device_negate' => null,
        'mode' => null,
        'minimum_sla_meet_members' => null,
        'hash_mode' => null,
        'role' => null,
        'standalone_action' => null,
        'quality_link' => null,
        'tos' => null,
        'tos_mask' => null,
        'protocol' => null,
        'start_port' => null,
        'end_port' => null,
        'route_tag' => null,
        'dst' => null,
        'dst_negate' => null,
        'src' => null,
        'dst6' => null,
        'src6' => null,
        'src_negate' => null,
        'users' => null,
        'groups' => null,
        'internet_service' => null,
        'internet_service_custom' => null,
        'internet_service_custom_group' => null,
        'internet_service_name' => null,
        'internet_service_group' => null,
        'internet_service_app_ctrl' => null,
        'internet_service_app_ctrl_group' => null,
        'health_check' => null,
        'link_cost_factor' => null,
        'packet_loss_weight' => null,
        'latency_weight' => null,
        'jitter_weight' => null,
        'bandwidth_weight' => null,
        'link_cost_threshold' => null,
        'hold_down_time' => null,
        'dscp_forward' => null,
        'dscp_reverse' => null,
        'dscp_forward_tag' => null,
        'dscp_reverse_tag' => null,
        'sla' => null,
        'priority_members' => null,
        'status' => null,
        'gateway' => null,
        'default' => null,
        'sla_compare_method' => null,
        'tie_break' => null,
        'use_shortcut_sla' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'addr_mode' => 'addr-mode',
        'input_device' => 'input-device',
        'input_device_negate' => 'input-device-negate',
        'mode' => 'mode',
        'minimum_sla_meet_members' => 'minimum-sla-meet-members',
        'hash_mode' => 'hash-mode',
        'role' => 'role',
        'standalone_action' => 'standalone-action',
        'quality_link' => 'quality-link',
        'tos' => 'tos',
        'tos_mask' => 'tos-mask',
        'protocol' => 'protocol',
        'start_port' => 'start-port',
        'end_port' => 'end-port',
        'route_tag' => 'route-tag',
        'dst' => 'dst',
        'dst_negate' => 'dst-negate',
        'src' => 'src',
        'dst6' => 'dst6',
        'src6' => 'src6',
        'src_negate' => 'src-negate',
        'users' => 'users',
        'groups' => 'groups',
        'internet_service' => 'internet-service',
        'internet_service_custom' => 'internet-service-custom',
        'internet_service_custom_group' => 'internet-service-custom-group',
        'internet_service_name' => 'internet-service-name',
        'internet_service_group' => 'internet-service-group',
        'internet_service_app_ctrl' => 'internet-service-app-ctrl',
        'internet_service_app_ctrl_group' => 'internet-service-app-ctrl-group',
        'health_check' => 'health-check',
        'link_cost_factor' => 'link-cost-factor',
        'packet_loss_weight' => 'packet-loss-weight',
        'latency_weight' => 'latency-weight',
        'jitter_weight' => 'jitter-weight',
        'bandwidth_weight' => 'bandwidth-weight',
        'link_cost_threshold' => 'link-cost-threshold',
        'hold_down_time' => 'hold-down-time',
        'dscp_forward' => 'dscp-forward',
        'dscp_reverse' => 'dscp-reverse',
        'dscp_forward_tag' => 'dscp-forward-tag',
        'dscp_reverse_tag' => 'dscp-reverse-tag',
        'sla' => 'sla',
        'priority_members' => 'priority-members',
        'status' => 'status',
        'gateway' => 'gateway',
        'default' => 'default',
        'sla_compare_method' => 'sla-compare-method',
        'tie_break' => 'tie-break',
        'use_shortcut_sla' => 'use-shortcut-sla'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'addr_mode' => 'setAddrMode',
        'input_device' => 'setInputDevice',
        'input_device_negate' => 'setInputDeviceNegate',
        'mode' => 'setMode',
        'minimum_sla_meet_members' => 'setMinimumSlaMeetMembers',
        'hash_mode' => 'setHashMode',
        'role' => 'setRole',
        'standalone_action' => 'setStandaloneAction',
        'quality_link' => 'setQualityLink',
        'tos' => 'setTos',
        'tos_mask' => 'setTosMask',
        'protocol' => 'setProtocol',
        'start_port' => 'setStartPort',
        'end_port' => 'setEndPort',
        'route_tag' => 'setRouteTag',
        'dst' => 'setDst',
        'dst_negate' => 'setDstNegate',
        'src' => 'setSrc',
        'dst6' => 'setDst6',
        'src6' => 'setSrc6',
        'src_negate' => 'setSrcNegate',
        'users' => 'setUsers',
        'groups' => 'setGroups',
        'internet_service' => 'setInternetService',
        'internet_service_custom' => 'setInternetServiceCustom',
        'internet_service_custom_group' => 'setInternetServiceCustomGroup',
        'internet_service_name' => 'setInternetServiceName',
        'internet_service_group' => 'setInternetServiceGroup',
        'internet_service_app_ctrl' => 'setInternetServiceAppCtrl',
        'internet_service_app_ctrl_group' => 'setInternetServiceAppCtrlGroup',
        'health_check' => 'setHealthCheck',
        'link_cost_factor' => 'setLinkCostFactor',
        'packet_loss_weight' => 'setPacketLossWeight',
        'latency_weight' => 'setLatencyWeight',
        'jitter_weight' => 'setJitterWeight',
        'bandwidth_weight' => 'setBandwidthWeight',
        'link_cost_threshold' => 'setLinkCostThreshold',
        'hold_down_time' => 'setHoldDownTime',
        'dscp_forward' => 'setDscpForward',
        'dscp_reverse' => 'setDscpReverse',
        'dscp_forward_tag' => 'setDscpForwardTag',
        'dscp_reverse_tag' => 'setDscpReverseTag',
        'sla' => 'setSla',
        'priority_members' => 'setPriorityMembers',
        'status' => 'setStatus',
        'gateway' => 'setGateway',
        'default' => 'setDefault',
        'sla_compare_method' => 'setSlaCompareMethod',
        'tie_break' => 'setTieBreak',
        'use_shortcut_sla' => 'setUseShortcutSla'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'addr_mode' => 'getAddrMode',
        'input_device' => 'getInputDevice',
        'input_device_negate' => 'getInputDeviceNegate',
        'mode' => 'getMode',
        'minimum_sla_meet_members' => 'getMinimumSlaMeetMembers',
        'hash_mode' => 'getHashMode',
        'role' => 'getRole',
        'standalone_action' => 'getStandaloneAction',
        'quality_link' => 'getQualityLink',
        'tos' => 'getTos',
        'tos_mask' => 'getTosMask',
        'protocol' => 'getProtocol',
        'start_port' => 'getStartPort',
        'end_port' => 'getEndPort',
        'route_tag' => 'getRouteTag',
        'dst' => 'getDst',
        'dst_negate' => 'getDstNegate',
        'src' => 'getSrc',
        'dst6' => 'getDst6',
        'src6' => 'getSrc6',
        'src_negate' => 'getSrcNegate',
        'users' => 'getUsers',
        'groups' => 'getGroups',
        'internet_service' => 'getInternetService',
        'internet_service_custom' => 'getInternetServiceCustom',
        'internet_service_custom_group' => 'getInternetServiceCustomGroup',
        'internet_service_name' => 'getInternetServiceName',
        'internet_service_group' => 'getInternetServiceGroup',
        'internet_service_app_ctrl' => 'getInternetServiceAppCtrl',
        'internet_service_app_ctrl_group' => 'getInternetServiceAppCtrlGroup',
        'health_check' => 'getHealthCheck',
        'link_cost_factor' => 'getLinkCostFactor',
        'packet_loss_weight' => 'getPacketLossWeight',
        'latency_weight' => 'getLatencyWeight',
        'jitter_weight' => 'getJitterWeight',
        'bandwidth_weight' => 'getBandwidthWeight',
        'link_cost_threshold' => 'getLinkCostThreshold',
        'hold_down_time' => 'getHoldDownTime',
        'dscp_forward' => 'getDscpForward',
        'dscp_reverse' => 'getDscpReverse',
        'dscp_forward_tag' => 'getDscpForwardTag',
        'dscp_reverse_tag' => 'getDscpReverseTag',
        'sla' => 'getSla',
        'priority_members' => 'getPriorityMembers',
        'status' => 'getStatus',
        'gateway' => 'getGateway',
        'default' => 'getDefault',
        'sla_compare_method' => 'getSlaCompareMethod',
        'tie_break' => 'getTieBreak',
        'use_shortcut_sla' => 'getUseShortcutSla'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDR_MODE_IPV4 = 'ipv4';
    const ADDR_MODE_IPV6 = 'ipv6';
    const INPUT_DEVICE_NEGATE_ENABLE = 'enable';
    const INPUT_DEVICE_NEGATE_DISABLE = 'disable';
    const MODE_AUTO = 'auto';
    const MODE_MANUAL = 'manual';
    const MODE_PRIORITY = 'priority';
    const MODE_SLA = 'sla';
    const MODE_LOAD_BALANCE = 'load-balance';
    const HASH_MODE_ROUND_ROBIN = 'round-robin';
    const HASH_MODE_SOURCE_IP_BASED = 'source-ip-based';
    const HASH_MODE_SOURCE_DEST_IP_BASED = 'source-dest-ip-based';
    const HASH_MODE_INBANDWIDTH = 'inbandwidth';
    const HASH_MODE_OUTBANDWIDTH = 'outbandwidth';
    const HASH_MODE_BIBANDWIDTH = 'bibandwidth';
    const ROLE_STANDALONE = 'standalone';
    const ROLE_PRIMARY = 'primary';
    const ROLE_SECONDARY = 'secondary';
    const STANDALONE_ACTION_ENABLE = 'enable';
    const STANDALONE_ACTION_DISABLE = 'disable';
    const DST_NEGATE_ENABLE = 'enable';
    const DST_NEGATE_DISABLE = 'disable';
    const SRC_NEGATE_ENABLE = 'enable';
    const SRC_NEGATE_DISABLE = 'disable';
    const INTERNET_SERVICE_ENABLE = 'enable';
    const INTERNET_SERVICE_DISABLE = 'disable';
    const LINK_COST_FACTOR_LATENCY = 'latency';
    const LINK_COST_FACTOR_JITTER = 'jitter';
    const LINK_COST_FACTOR_PACKET_LOSS = 'packet-loss';
    const LINK_COST_FACTOR_INBANDWIDTH = 'inbandwidth';
    const LINK_COST_FACTOR_OUTBANDWIDTH = 'outbandwidth';
    const LINK_COST_FACTOR_BIBANDWIDTH = 'bibandwidth';
    const LINK_COST_FACTOR_CUSTOM_PROFILE_1 = 'custom-profile-1';
    const DSCP_FORWARD_ENABLE = 'enable';
    const DSCP_FORWARD_DISABLE = 'disable';
    const DSCP_REVERSE_ENABLE = 'enable';
    const DSCP_REVERSE_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const GATEWAY_ENABLE = 'enable';
    const GATEWAY_DISABLE = 'disable';
    const MODEL_DEFAULT_ENABLE = 'enable';
    const MODEL_DEFAULT_DISABLE = 'disable';
    const SLA_COMPARE_METHOD_ORDER = 'order';
    const SLA_COMPARE_METHOD_NUMBER = 'number';
    const TIE_BREAK_ZONE = 'zone';
    const TIE_BREAK_CFG_ORDER = 'cfg-order';
    const TIE_BREAK_FIB_BEST_MATCH = 'fib-best-match';
    const USE_SHORTCUT_SLA_ENABLE = 'enable';
    const USE_SHORTCUT_SLA_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrModeAllowableValues()
    {
        return [
            self::ADDR_MODE_IPV4,
            self::ADDR_MODE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInputDeviceNegateAllowableValues()
    {
        return [
            self::INPUT_DEVICE_NEGATE_ENABLE,
            self::INPUT_DEVICE_NEGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_AUTO,
            self::MODE_MANUAL,
            self::MODE_PRIORITY,
            self::MODE_SLA,
            self::MODE_LOAD_BALANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHashModeAllowableValues()
    {
        return [
            self::HASH_MODE_ROUND_ROBIN,
            self::HASH_MODE_SOURCE_IP_BASED,
            self::HASH_MODE_SOURCE_DEST_IP_BASED,
            self::HASH_MODE_INBANDWIDTH,
            self::HASH_MODE_OUTBANDWIDTH,
            self::HASH_MODE_BIBANDWIDTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_STANDALONE,
            self::ROLE_PRIMARY,
            self::ROLE_SECONDARY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandaloneActionAllowableValues()
    {
        return [
            self::STANDALONE_ACTION_ENABLE,
            self::STANDALONE_ACTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDstNegateAllowableValues()
    {
        return [
            self::DST_NEGATE_ENABLE,
            self::DST_NEGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSrcNegateAllowableValues()
    {
        return [
            self::SRC_NEGATE_ENABLE,
            self::SRC_NEGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInternetServiceAllowableValues()
    {
        return [
            self::INTERNET_SERVICE_ENABLE,
            self::INTERNET_SERVICE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkCostFactorAllowableValues()
    {
        return [
            self::LINK_COST_FACTOR_LATENCY,
            self::LINK_COST_FACTOR_JITTER,
            self::LINK_COST_FACTOR_PACKET_LOSS,
            self::LINK_COST_FACTOR_INBANDWIDTH,
            self::LINK_COST_FACTOR_OUTBANDWIDTH,
            self::LINK_COST_FACTOR_BIBANDWIDTH,
            self::LINK_COST_FACTOR_CUSTOM_PROFILE_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDscpForwardAllowableValues()
    {
        return [
            self::DSCP_FORWARD_ENABLE,
            self::DSCP_FORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDscpReverseAllowableValues()
    {
        return [
            self::DSCP_REVERSE_ENABLE,
            self::DSCP_REVERSE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGatewayAllowableValues()
    {
        return [
            self::GATEWAY_ENABLE,
            self::GATEWAY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultAllowableValues()
    {
        return [
            self::MODEL_DEFAULT_ENABLE,
            self::MODEL_DEFAULT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSlaCompareMethodAllowableValues()
    {
        return [
            self::SLA_COMPARE_METHOD_ORDER,
            self::SLA_COMPARE_METHOD_NUMBER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTieBreakAllowableValues()
    {
        return [
            self::TIE_BREAK_ZONE,
            self::TIE_BREAK_CFG_ORDER,
            self::TIE_BREAK_FIB_BEST_MATCH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseShortcutSlaAllowableValues()
    {
        return [
            self::USE_SHORTCUT_SLA_ENABLE,
            self::USE_SHORTCUT_SLA_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['addr_mode'] = $data['addr_mode'] ?? null;
        $this->container['input_device'] = $data['input_device'] ?? null;
        $this->container['input_device_negate'] = $data['input_device_negate'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['minimum_sla_meet_members'] = $data['minimum_sla_meet_members'] ?? null;
        $this->container['hash_mode'] = $data['hash_mode'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['standalone_action'] = $data['standalone_action'] ?? null;
        $this->container['quality_link'] = $data['quality_link'] ?? null;
        $this->container['tos'] = $data['tos'] ?? null;
        $this->container['tos_mask'] = $data['tos_mask'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['start_port'] = $data['start_port'] ?? null;
        $this->container['end_port'] = $data['end_port'] ?? null;
        $this->container['route_tag'] = $data['route_tag'] ?? null;
        $this->container['dst'] = $data['dst'] ?? null;
        $this->container['dst_negate'] = $data['dst_negate'] ?? null;
        $this->container['src'] = $data['src'] ?? null;
        $this->container['dst6'] = $data['dst6'] ?? null;
        $this->container['src6'] = $data['src6'] ?? null;
        $this->container['src_negate'] = $data['src_negate'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['internet_service'] = $data['internet_service'] ?? null;
        $this->container['internet_service_custom'] = $data['internet_service_custom'] ?? null;
        $this->container['internet_service_custom_group'] = $data['internet_service_custom_group'] ?? null;
        $this->container['internet_service_name'] = $data['internet_service_name'] ?? null;
        $this->container['internet_service_group'] = $data['internet_service_group'] ?? null;
        $this->container['internet_service_app_ctrl'] = $data['internet_service_app_ctrl'] ?? null;
        $this->container['internet_service_app_ctrl_group'] = $data['internet_service_app_ctrl_group'] ?? null;
        $this->container['health_check'] = $data['health_check'] ?? null;
        $this->container['link_cost_factor'] = $data['link_cost_factor'] ?? null;
        $this->container['packet_loss_weight'] = $data['packet_loss_weight'] ?? null;
        $this->container['latency_weight'] = $data['latency_weight'] ?? null;
        $this->container['jitter_weight'] = $data['jitter_weight'] ?? null;
        $this->container['bandwidth_weight'] = $data['bandwidth_weight'] ?? null;
        $this->container['link_cost_threshold'] = $data['link_cost_threshold'] ?? null;
        $this->container['hold_down_time'] = $data['hold_down_time'] ?? null;
        $this->container['dscp_forward'] = $data['dscp_forward'] ?? null;
        $this->container['dscp_reverse'] = $data['dscp_reverse'] ?? null;
        $this->container['dscp_forward_tag'] = $data['dscp_forward_tag'] ?? null;
        $this->container['dscp_reverse_tag'] = $data['dscp_reverse_tag'] ?? null;
        $this->container['sla'] = $data['sla'] ?? null;
        $this->container['priority_members'] = $data['priority_members'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['default'] = $data['default'] ?? null;
        $this->container['sla_compare_method'] = $data['sla_compare_method'] ?? null;
        $this->container['tie_break'] = $data['tie_break'] ?? null;
        $this->container['use_shortcut_sla'] = $data['use_shortcut_sla'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4000)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($this->container['addr_mode']) && !in_array($this->container['addr_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_mode', must be one of '%s'",
                $this->container['addr_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['input_device']) && (count($this->container['input_device']) > 0)) {
            $invalidProperties[] = "invalid value for 'input_device', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getInputDeviceNegateAllowableValues();
        if (!is_null($this->container['input_device_negate']) && !in_array($this->container['input_device_negate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'input_device_negate', must be one of '%s'",
                $this->container['input_device_negate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['minimum_sla_meet_members']) && ($this->container['minimum_sla_meet_members'] > 255)) {
            $invalidProperties[] = "invalid value for 'minimum_sla_meet_members', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['minimum_sla_meet_members']) && ($this->container['minimum_sla_meet_members'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimum_sla_meet_members', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getHashModeAllowableValues();
        if (!is_null($this->container['hash_mode']) && !in_array($this->container['hash_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hash_mode', must be one of '%s'",
                $this->container['hash_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStandaloneActionAllowableValues();
        if (!is_null($this->container['standalone_action']) && !in_array($this->container['standalone_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'standalone_action', must be one of '%s'",
                $this->container['standalone_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['quality_link']) && ($this->container['quality_link'] > 255)) {
            $invalidProperties[] = "invalid value for 'quality_link', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['quality_link']) && ($this->container['quality_link'] < 0)) {
            $invalidProperties[] = "invalid value for 'quality_link', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] > 255)) {
            $invalidProperties[] = "invalid value for 'protocol', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] < 0)) {
            $invalidProperties[] = "invalid value for 'protocol', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['start_port']) && ($this->container['start_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'start_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['start_port']) && ($this->container['start_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'start_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['end_port']) && ($this->container['end_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'end_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['end_port']) && ($this->container['end_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'end_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['route_tag']) && ($this->container['route_tag'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'route_tag', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['route_tag']) && ($this->container['route_tag'] < 0)) {
            $invalidProperties[] = "invalid value for 'route_tag', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dst']) && (count($this->container['dst']) > 0)) {
            $invalidProperties[] = "invalid value for 'dst', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getDstNegateAllowableValues();
        if (!is_null($this->container['dst_negate']) && !in_array($this->container['dst_negate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dst_negate', must be one of '%s'",
                $this->container['dst_negate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['src']) && (count($this->container['src']) > 0)) {
            $invalidProperties[] = "invalid value for 'src', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dst6']) && (count($this->container['dst6']) > 0)) {
            $invalidProperties[] = "invalid value for 'dst6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['src6']) && (count($this->container['src6']) > 0)) {
            $invalidProperties[] = "invalid value for 'src6', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSrcNegateAllowableValues();
        if (!is_null($this->container['src_negate']) && !in_array($this->container['src_negate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'src_negate', must be one of '%s'",
                $this->container['src_negate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['users']) && (count($this->container['users']) > 0)) {
            $invalidProperties[] = "invalid value for 'users', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['groups']) && (count($this->container['groups']) > 0)) {
            $invalidProperties[] = "invalid value for 'groups', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getInternetServiceAllowableValues();
        if (!is_null($this->container['internet_service']) && !in_array($this->container['internet_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'internet_service', must be one of '%s'",
                $this->container['internet_service'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['internet_service_custom']) && (count($this->container['internet_service_custom']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_custom', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['internet_service_custom_group']) && (count($this->container['internet_service_custom_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_custom_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['internet_service_name']) && (count($this->container['internet_service_name']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_name', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['internet_service_group']) && (count($this->container['internet_service_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['internet_service_app_ctrl']) && (count($this->container['internet_service_app_ctrl']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_app_ctrl', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['internet_service_app_ctrl_group']) && (count($this->container['internet_service_app_ctrl_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'internet_service_app_ctrl_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['health_check']) && (count($this->container['health_check']) > 0)) {
            $invalidProperties[] = "invalid value for 'health_check', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getLinkCostFactorAllowableValues();
        if (!is_null($this->container['link_cost_factor']) && !in_array($this->container['link_cost_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_cost_factor', must be one of '%s'",
                $this->container['link_cost_factor'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['packet_loss_weight']) && ($this->container['packet_loss_weight'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'packet_loss_weight', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['packet_loss_weight']) && ($this->container['packet_loss_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'packet_loss_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['latency_weight']) && ($this->container['latency_weight'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'latency_weight', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['latency_weight']) && ($this->container['latency_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'latency_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['jitter_weight']) && ($this->container['jitter_weight'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'jitter_weight', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['jitter_weight']) && ($this->container['jitter_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'jitter_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bandwidth_weight']) && ($this->container['bandwidth_weight'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'bandwidth_weight', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['bandwidth_weight']) && ($this->container['bandwidth_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'bandwidth_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['link_cost_threshold']) && ($this->container['link_cost_threshold'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'link_cost_threshold', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['link_cost_threshold']) && ($this->container['link_cost_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'link_cost_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['hold_down_time']) && ($this->container['hold_down_time'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'hold_down_time', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['hold_down_time']) && ($this->container['hold_down_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'hold_down_time', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDscpForwardAllowableValues();
        if (!is_null($this->container['dscp_forward']) && !in_array($this->container['dscp_forward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dscp_forward', must be one of '%s'",
                $this->container['dscp_forward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDscpReverseAllowableValues();
        if (!is_null($this->container['dscp_reverse']) && !in_array($this->container['dscp_reverse'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dscp_reverse', must be one of '%s'",
                $this->container['dscp_reverse'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sla']) && (count($this->container['sla']) > 0)) {
            $invalidProperties[] = "invalid value for 'sla', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['priority_members']) && (count($this->container['priority_members']) > 0)) {
            $invalidProperties[] = "invalid value for 'priority_members', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGatewayAllowableValues();
        if (!is_null($this->container['gateway']) && !in_array($this->container['gateway'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gateway', must be one of '%s'",
                $this->container['gateway'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultAllowableValues();
        if (!is_null($this->container['default']) && !in_array($this->container['default'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default', must be one of '%s'",
                $this->container['default'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSlaCompareMethodAllowableValues();
        if (!is_null($this->container['sla_compare_method']) && !in_array($this->container['sla_compare_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sla_compare_method', must be one of '%s'",
                $this->container['sla_compare_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTieBreakAllowableValues();
        if (!is_null($this->container['tie_break']) && !in_array($this->container['tie_break'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tie_break', must be one of '%s'",
                $this->container['tie_break'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseShortcutSlaAllowableValues();
        if (!is_null($this->container['use_shortcut_sla']) && !in_array($this->container['use_shortcut_sla'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_shortcut_sla', must be one of '%s'",
                $this->container['use_shortcut_sla'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id SD-WAN rule ID (1 - 4000).
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4000)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanService., must be smaller than or equal to 4000.');
        }
        if (!is_null($id) && ($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanService., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name SD-WAN rule name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SystemSdwanService., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr_mode
     *
     * @return string|null
     */
    public function getAddrMode()
    {
        return $this->container['addr_mode'];
    }

    /**
     * Sets addr_mode
     *
     * @param string|null $addr_mode Address mode (IPv4 or IPv6).    ipv4:IPv4 mode.    ipv6:IPv6 mode.
     *
     * @return self
     */
    public function setAddrMode($addr_mode)
    {
        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($addr_mode) && !in_array($addr_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_mode', must be one of '%s'",
                    $addr_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_mode'] = $addr_mode;

        return $this;
    }

    /**
     * Gets input_device
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null
     */
    public function getInputDevice()
    {
        return $this->container['input_device'];
    }

    /**
     * Sets input_device
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null $input_device Source interface name.
     *
     * @return self
     */
    public function setInputDevice($input_device)
    {

        if (!is_null($input_device) && (count($input_device) > 0)) {
            throw new \InvalidArgumentException('invalid value for $input_device when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['input_device'] = $input_device;

        return $this;
    }

    /**
     * Gets input_device_negate
     *
     * @return string|null
     */
    public function getInputDeviceNegate()
    {
        return $this->container['input_device_negate'];
    }

    /**
     * Sets input_device_negate
     *
     * @param string|null $input_device_negate Enable/disable negation of input device match.    enable:Enable negation of input device match.    disable:Disable negation of input device match.
     *
     * @return self
     */
    public function setInputDeviceNegate($input_device_negate)
    {
        $allowedValues = $this->getInputDeviceNegateAllowableValues();
        if (!is_null($input_device_negate) && !in_array($input_device_negate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'input_device_negate', must be one of '%s'",
                    $input_device_negate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['input_device_negate'] = $input_device_negate;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN.    auto:Assign interfaces a priority based on quality.    manual:Assign interfaces a priority manually.    priority:Assign interfaces a priority based on the link-cost-factor quality of the interface.    sla:Assign interfaces a priority based on selected SLA settings.    load-balance:Distribute traffic among all available links based on round robin. ADVPN feature is not supported in the mode.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets minimum_sla_meet_members
     *
     * @return int|null
     */
    public function getMinimumSlaMeetMembers()
    {
        return $this->container['minimum_sla_meet_members'];
    }

    /**
     * Sets minimum_sla_meet_members
     *
     * @param int|null $minimum_sla_meet_members Minimum number of members which meet SLA.
     *
     * @return self
     */
    public function setMinimumSlaMeetMembers($minimum_sla_meet_members)
    {

        if (!is_null($minimum_sla_meet_members) && ($minimum_sla_meet_members > 255)) {
            throw new \InvalidArgumentException('invalid value for $minimum_sla_meet_members when calling SystemSdwanService., must be smaller than or equal to 255.');
        }
        if (!is_null($minimum_sla_meet_members) && ($minimum_sla_meet_members < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_sla_meet_members when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['minimum_sla_meet_members'] = $minimum_sla_meet_members;

        return $this;
    }

    /**
     * Gets hash_mode
     *
     * @return string|null
     */
    public function getHashMode()
    {
        return $this->container['hash_mode'];
    }

    /**
     * Sets hash_mode
     *
     * @param string|null $hash_mode Hash algorithm for selected priority members for load balance mode.    round-robin:All traffic are distributed to selected interfaces in equal portions and circular order.    source-ip-based:All traffic from a source IP is sent to the same interface.    source-dest-ip-based:All traffic from a source IP to a destination IP is sent to the same interface.    inbandwidth:All traffic are distributed to a selected interface with most available bandwidth for incoming traffic.    outbandwidth:All traffic are distributed to a selected interface with most available bandwidth for outgoing traffic.    bibandwidth:All traffic are distributed to a selected interface with most available bandwidth for both incoming and outgoing traffic.
     *
     * @return self
     */
    public function setHashMode($hash_mode)
    {
        $allowedValues = $this->getHashModeAllowableValues();
        if (!is_null($hash_mode) && !in_array($hash_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hash_mode', must be one of '%s'",
                    $hash_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hash_mode'] = $hash_mode;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Service role to work with neighbor.    standalone:Standalone service.    primary:Primary service for primary neighbor.    secondary:Secondary service for secondary neighbor.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets standalone_action
     *
     * @return string|null
     */
    public function getStandaloneAction()
    {
        return $this->container['standalone_action'];
    }

    /**
     * Sets standalone_action
     *
     * @param string|null $standalone_action Enable/disable service when selected neighbor role is standalone while service role is not standalone.    enable:Enable service when selected neighbor role is standalone.    disable:Disable service when selected neighbor role is standalone.
     *
     * @return self
     */
    public function setStandaloneAction($standalone_action)
    {
        $allowedValues = $this->getStandaloneActionAllowableValues();
        if (!is_null($standalone_action) && !in_array($standalone_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'standalone_action', must be one of '%s'",
                    $standalone_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['standalone_action'] = $standalone_action;

        return $this;
    }

    /**
     * Gets quality_link
     *
     * @return int|null
     */
    public function getQualityLink()
    {
        return $this->container['quality_link'];
    }

    /**
     * Sets quality_link
     *
     * @param int|null $quality_link Quality grade.
     *
     * @return self
     */
    public function setQualityLink($quality_link)
    {

        if (!is_null($quality_link) && ($quality_link > 255)) {
            throw new \InvalidArgumentException('invalid value for $quality_link when calling SystemSdwanService., must be smaller than or equal to 255.');
        }
        if (!is_null($quality_link) && ($quality_link < 0)) {
            throw new \InvalidArgumentException('invalid value for $quality_link when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['quality_link'] = $quality_link;

        return $this;
    }

    /**
     * Gets tos
     *
     * @return string|null
     */
    public function getTos()
    {
        return $this->container['tos'];
    }

    /**
     * Sets tos
     *
     * @param string|null $tos Type of service bit pattern.
     *
     * @return self
     */
    public function setTos($tos)
    {
        $this->container['tos'] = $tos;

        return $this;
    }

    /**
     * Gets tos_mask
     *
     * @return string|null
     */
    public function getTosMask()
    {
        return $this->container['tos_mask'];
    }

    /**
     * Sets tos_mask
     *
     * @param string|null $tos_mask Type of service evaluated bits.
     *
     * @return self
     */
    public function setTosMask($tos_mask)
    {
        $this->container['tos_mask'] = $tos_mask;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return int|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param int|null $protocol Protocol number.
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if (!is_null($protocol) && ($protocol > 255)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling SystemSdwanService., must be smaller than or equal to 255.');
        }
        if (!is_null($protocol) && ($protocol < 0)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets start_port
     *
     * @return int|null
     */
    public function getStartPort()
    {
        return $this->container['start_port'];
    }

    /**
     * Sets start_port
     *
     * @param int|null $start_port Start destination port number.
     *
     * @return self
     */
    public function setStartPort($start_port)
    {

        if (!is_null($start_port) && ($start_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $start_port when calling SystemSdwanService., must be smaller than or equal to 65535.');
        }
        if (!is_null($start_port) && ($start_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $start_port when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['start_port'] = $start_port;

        return $this;
    }

    /**
     * Gets end_port
     *
     * @return int|null
     */
    public function getEndPort()
    {
        return $this->container['end_port'];
    }

    /**
     * Sets end_port
     *
     * @param int|null $end_port End destination port number.
     *
     * @return self
     */
    public function setEndPort($end_port)
    {

        if (!is_null($end_port) && ($end_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $end_port when calling SystemSdwanService., must be smaller than or equal to 65535.');
        }
        if (!is_null($end_port) && ($end_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $end_port when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['end_port'] = $end_port;

        return $this;
    }

    /**
     * Gets route_tag
     *
     * @return int|null
     */
    public function getRouteTag()
    {
        return $this->container['route_tag'];
    }

    /**
     * Sets route_tag
     *
     * @param int|null $route_tag IPv4 route map route-tag.
     *
     * @return self
     */
    public function setRouteTag($route_tag)
    {

        if (!is_null($route_tag) && ($route_tag > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $route_tag when calling SystemSdwanService., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($route_tag) && ($route_tag < 0)) {
            throw new \InvalidArgumentException('invalid value for $route_tag when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['route_tag'] = $route_tag;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null $dst Destination address name.
     *
     * @return self
     */
    public function setDst($dst)
    {

        if (!is_null($dst) && (count($dst) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dst when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets dst_negate
     *
     * @return string|null
     */
    public function getDstNegate()
    {
        return $this->container['dst_negate'];
    }

    /**
     * Sets dst_negate
     *
     * @param string|null $dst_negate Enable/disable negation of destination address match.    enable:Enable destination address negation.    disable:Disable destination address negation.
     *
     * @return self
     */
    public function setDstNegate($dst_negate)
    {
        $allowedValues = $this->getDstNegateAllowableValues();
        if (!is_null($dst_negate) && !in_array($dst_negate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dst_negate', must be one of '%s'",
                    $dst_negate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dst_negate'] = $dst_negate;

        return $this;
    }

    /**
     * Gets src
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null $src Source address name.
     *
     * @return self
     */
    public function setSrc($src)
    {

        if (!is_null($src) && (count($src) > 0)) {
            throw new \InvalidArgumentException('invalid value for $src when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets dst6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null
     */
    public function getDst6()
    {
        return $this->container['dst6'];
    }

    /**
     * Sets dst6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null $dst6 Destination address6 name.
     *
     * @return self
     */
    public function setDst6($dst6)
    {

        if (!is_null($dst6) && (count($dst6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dst6 when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['dst6'] = $dst6;

        return $this;
    }

    /**
     * Gets src6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null
     */
    public function getSrc6()
    {
        return $this->container['src6'];
    }

    /**
     * Sets src6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null $src6 Source address6 name.
     *
     * @return self
     */
    public function setSrc6($src6)
    {

        if (!is_null($src6) && (count($src6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $src6 when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['src6'] = $src6;

        return $this;
    }

    /**
     * Gets src_negate
     *
     * @return string|null
     */
    public function getSrcNegate()
    {
        return $this->container['src_negate'];
    }

    /**
     * Sets src_negate
     *
     * @param string|null $src_negate Enable/disable negation of source address match.    enable:Enable source address negation.    disable:Disable source address negation.
     *
     * @return self
     */
    public function setSrcNegate($src_negate)
    {
        $allowedValues = $this->getSrcNegateAllowableValues();
        if (!is_null($src_negate) && !in_array($src_negate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'src_negate', must be one of '%s'",
                    $src_negate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['src_negate'] = $src_negate;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanUsers[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanUsers[]|null $users User name.
     *
     * @return self
     */
    public function setUsers($users)
    {

        if (!is_null($users) && (count($users) > 0)) {
            throw new \InvalidArgumentException('invalid value for $users when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]|null $groups User groups.
     *
     * @return self
     */
    public function setGroups($groups)
    {

        if (!is_null($groups) && (count($groups) > 0)) {
            throw new \InvalidArgumentException('invalid value for $groups when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets internet_service
     *
     * @return string|null
     */
    public function getInternetService()
    {
        return $this->container['internet_service'];
    }

    /**
     * Sets internet_service
     *
     * @param string|null $internet_service Enable/disable use of Internet service for application-based load balancing.    enable:Enable cloud service to support application-based load balancing.    disable:Disable cloud service to support application-based load balancing.
     *
     * @return self
     */
    public function setInternetService($internet_service)
    {
        $allowedValues = $this->getInternetServiceAllowableValues();
        if (!is_null($internet_service) && !in_array($internet_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'internet_service', must be one of '%s'",
                    $internet_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['internet_service'] = $internet_service;

        return $this;
    }

    /**
     * Gets internet_service_custom
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustom[]|null
     */
    public function getInternetServiceCustom()
    {
        return $this->container['internet_service_custom'];
    }

    /**
     * Sets internet_service_custom
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustom[]|null $internet_service_custom Custom Internet service name list.
     *
     * @return self
     */
    public function setInternetServiceCustom($internet_service_custom)
    {

        if (!is_null($internet_service_custom) && (count($internet_service_custom) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_custom when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_custom'] = $internet_service_custom;

        return $this;
    }

    /**
     * Gets internet_service_custom_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustomGroup[]|null
     */
    public function getInternetServiceCustomGroup()
    {
        return $this->container['internet_service_custom_group'];
    }

    /**
     * Sets internet_service_custom_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceCustomGroup[]|null $internet_service_custom_group Custom Internet Service group list.
     *
     * @return self
     */
    public function setInternetServiceCustomGroup($internet_service_custom_group)
    {

        if (!is_null($internet_service_custom_group) && (count($internet_service_custom_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_custom_group when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_custom_group'] = $internet_service_custom_group;

        return $this;
    }

    /**
     * Gets internet_service_name
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceName[]|null
     */
    public function getInternetServiceName()
    {
        return $this->container['internet_service_name'];
    }

    /**
     * Sets internet_service_name
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceName[]|null $internet_service_name Internet service name list.
     *
     * @return self
     */
    public function setInternetServiceName($internet_service_name)
    {

        if (!is_null($internet_service_name) && (count($internet_service_name) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_name when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_name'] = $internet_service_name;

        return $this;
    }

    /**
     * Gets internet_service_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceGroup[]|null
     */
    public function getInternetServiceGroup()
    {
        return $this->container['internet_service_group'];
    }

    /**
     * Sets internet_service_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceGroup[]|null $internet_service_group Internet Service group list.
     *
     * @return self
     */
    public function setInternetServiceGroup($internet_service_group)
    {

        if (!is_null($internet_service_group) && (count($internet_service_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_group when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_group'] = $internet_service_group;

        return $this;
    }

    /**
     * Gets internet_service_app_ctrl
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrl[]|null
     */
    public function getInternetServiceAppCtrl()
    {
        return $this->container['internet_service_app_ctrl'];
    }

    /**
     * Sets internet_service_app_ctrl
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrl[]|null $internet_service_app_ctrl Application control based Internet Service ID list.
     *
     * @return self
     */
    public function setInternetServiceAppCtrl($internet_service_app_ctrl)
    {

        if (!is_null($internet_service_app_ctrl) && (count($internet_service_app_ctrl) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_app_ctrl when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_app_ctrl'] = $internet_service_app_ctrl;

        return $this;
    }

    /**
     * Gets internet_service_app_ctrl_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrlGroup[]|null
     */
    public function getInternetServiceAppCtrlGroup()
    {
        return $this->container['internet_service_app_ctrl_group'];
    }

    /**
     * Sets internet_service_app_ctrl_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanInternetServiceAppCtrlGroup[]|null $internet_service_app_ctrl_group Application control based Internet Service group list.
     *
     * @return self
     */
    public function setInternetServiceAppCtrlGroup($internet_service_app_ctrl_group)
    {

        if (!is_null($internet_service_app_ctrl_group) && (count($internet_service_app_ctrl_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $internet_service_app_ctrl_group when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['internet_service_app_ctrl_group'] = $internet_service_app_ctrl_group;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck1[]|null
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck1[]|null $health_check Health check list.
     *
     * @return self
     */
    public function setHealthCheck($health_check)
    {

        if (!is_null($health_check) && (count($health_check) > 0)) {
            throw new \InvalidArgumentException('invalid value for $health_check when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets link_cost_factor
     *
     * @return string|null
     */
    public function getLinkCostFactor()
    {
        return $this->container['link_cost_factor'];
    }

    /**
     * Sets link_cost_factor
     *
     * @param string|null $link_cost_factor Link cost factor.    latency:Select link based on latency.    jitter:Select link based on jitter.    packet-loss:Select link based on packet loss.    inbandwidth:Select link based on available bandwidth of incoming traffic.    outbandwidth:Select link based on available bandwidth of outgoing traffic.    bibandwidth:Select link based on available bandwidth of bidirectional traffic.    custom-profile-1:Select link based on customized profile.
     *
     * @return self
     */
    public function setLinkCostFactor($link_cost_factor)
    {
        $allowedValues = $this->getLinkCostFactorAllowableValues();
        if (!is_null($link_cost_factor) && !in_array($link_cost_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_cost_factor', must be one of '%s'",
                    $link_cost_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_cost_factor'] = $link_cost_factor;

        return $this;
    }

    /**
     * Gets packet_loss_weight
     *
     * @return int|null
     */
    public function getPacketLossWeight()
    {
        return $this->container['packet_loss_weight'];
    }

    /**
     * Sets packet_loss_weight
     *
     * @param int|null $packet_loss_weight Coefficient of packet-loss in the formula of custom-profile-1.
     *
     * @return self
     */
    public function setPacketLossWeight($packet_loss_weight)
    {

        if (!is_null($packet_loss_weight) && ($packet_loss_weight > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $packet_loss_weight when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($packet_loss_weight) && ($packet_loss_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $packet_loss_weight when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['packet_loss_weight'] = $packet_loss_weight;

        return $this;
    }

    /**
     * Gets latency_weight
     *
     * @return int|null
     */
    public function getLatencyWeight()
    {
        return $this->container['latency_weight'];
    }

    /**
     * Sets latency_weight
     *
     * @param int|null $latency_weight Coefficient of latency in the formula of custom-profile-1.
     *
     * @return self
     */
    public function setLatencyWeight($latency_weight)
    {

        if (!is_null($latency_weight) && ($latency_weight > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $latency_weight when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($latency_weight) && ($latency_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $latency_weight when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['latency_weight'] = $latency_weight;

        return $this;
    }

    /**
     * Gets jitter_weight
     *
     * @return int|null
     */
    public function getJitterWeight()
    {
        return $this->container['jitter_weight'];
    }

    /**
     * Sets jitter_weight
     *
     * @param int|null $jitter_weight Coefficient of jitter in the formula of custom-profile-1.
     *
     * @return self
     */
    public function setJitterWeight($jitter_weight)
    {

        if (!is_null($jitter_weight) && ($jitter_weight > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $jitter_weight when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($jitter_weight) && ($jitter_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $jitter_weight when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['jitter_weight'] = $jitter_weight;

        return $this;
    }

    /**
     * Gets bandwidth_weight
     *
     * @return int|null
     */
    public function getBandwidthWeight()
    {
        return $this->container['bandwidth_weight'];
    }

    /**
     * Sets bandwidth_weight
     *
     * @param int|null $bandwidth_weight Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
     *
     * @return self
     */
    public function setBandwidthWeight($bandwidth_weight)
    {

        if (!is_null($bandwidth_weight) && ($bandwidth_weight > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_weight when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($bandwidth_weight) && ($bandwidth_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_weight when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['bandwidth_weight'] = $bandwidth_weight;

        return $this;
    }

    /**
     * Gets link_cost_threshold
     *
     * @return int|null
     */
    public function getLinkCostThreshold()
    {
        return $this->container['link_cost_threshold'];
    }

    /**
     * Sets link_cost_threshold
     *
     * @param int|null $link_cost_threshold Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
     *
     * @return self
     */
    public function setLinkCostThreshold($link_cost_threshold)
    {

        if (!is_null($link_cost_threshold) && ($link_cost_threshold > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $link_cost_threshold when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($link_cost_threshold) && ($link_cost_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $link_cost_threshold when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['link_cost_threshold'] = $link_cost_threshold;

        return $this;
    }

    /**
     * Gets hold_down_time
     *
     * @return int|null
     */
    public function getHoldDownTime()
    {
        return $this->container['hold_down_time'];
    }

    /**
     * Sets hold_down_time
     *
     * @param int|null $hold_down_time Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
     *
     * @return self
     */
    public function setHoldDownTime($hold_down_time)
    {

        if (!is_null($hold_down_time) && ($hold_down_time > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $hold_down_time when calling SystemSdwanService., must be smaller than or equal to 10000000.');
        }
        if (!is_null($hold_down_time) && ($hold_down_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $hold_down_time when calling SystemSdwanService., must be bigger than or equal to 0.');
        }

        $this->container['hold_down_time'] = $hold_down_time;

        return $this;
    }

    /**
     * Gets dscp_forward
     *
     * @return string|null
     */
    public function getDscpForward()
    {
        return $this->container['dscp_forward'];
    }

    /**
     * Sets dscp_forward
     *
     * @param string|null $dscp_forward Enable/disable forward traffic DSCP tag.    enable:Enable use of forward DSCP tag.    disable:Disable use of forward DSCP tag.
     *
     * @return self
     */
    public function setDscpForward($dscp_forward)
    {
        $allowedValues = $this->getDscpForwardAllowableValues();
        if (!is_null($dscp_forward) && !in_array($dscp_forward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dscp_forward', must be one of '%s'",
                    $dscp_forward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dscp_forward'] = $dscp_forward;

        return $this;
    }

    /**
     * Gets dscp_reverse
     *
     * @return string|null
     */
    public function getDscpReverse()
    {
        return $this->container['dscp_reverse'];
    }

    /**
     * Sets dscp_reverse
     *
     * @param string|null $dscp_reverse Enable/disable reverse traffic DSCP tag.    enable:Enable use of reverse DSCP tag.    disable:Disable use of reverse DSCP tag.
     *
     * @return self
     */
    public function setDscpReverse($dscp_reverse)
    {
        $allowedValues = $this->getDscpReverseAllowableValues();
        if (!is_null($dscp_reverse) && !in_array($dscp_reverse, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dscp_reverse', must be one of '%s'",
                    $dscp_reverse,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dscp_reverse'] = $dscp_reverse;

        return $this;
    }

    /**
     * Gets dscp_forward_tag
     *
     * @return string|null
     */
    public function getDscpForwardTag()
    {
        return $this->container['dscp_forward_tag'];
    }

    /**
     * Sets dscp_forward_tag
     *
     * @param string|null $dscp_forward_tag Forward traffic DSCP tag.
     *
     * @return self
     */
    public function setDscpForwardTag($dscp_forward_tag)
    {
        $this->container['dscp_forward_tag'] = $dscp_forward_tag;

        return $this;
    }

    /**
     * Gets dscp_reverse_tag
     *
     * @return string|null
     */
    public function getDscpReverseTag()
    {
        return $this->container['dscp_reverse_tag'];
    }

    /**
     * Sets dscp_reverse_tag
     *
     * @param string|null $dscp_reverse_tag Reverse traffic DSCP tag.
     *
     * @return self
     */
    public function setDscpReverseTag($dscp_reverse_tag)
    {
        $this->container['dscp_reverse_tag'] = $dscp_reverse_tag;

        return $this;
    }

    /**
     * Gets sla
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanSla1[]|null
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanSla1[]|null $sla Service level agreement (SLA).
     *
     * @return self
     */
    public function setSla($sla)
    {

        if (!is_null($sla) && (count($sla) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sla when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets priority_members
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]|null
     */
    public function getPriorityMembers()
    {
        return $this->container['priority_members'];
    }

    /**
     * Sets priority_members
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers1[]|null $priority_members Member sequence number list.
     *
     * @return self
     */
    public function setPriorityMembers($priority_members)
    {

        if (!is_null($priority_members) && (count($priority_members) > 0)) {
            throw new \InvalidArgumentException('invalid value for $priority_members when calling SystemSdwanService., number of items must be less than or equal to 0.');
        }
        $this->container['priority_members'] = $priority_members;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable SD-WAN service.    enable:Enable SD-WAN service.    disable:Disable SD-WAN service.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Enable/disable SD-WAN service gateway.    enable:Enable SD-WAN service gateway.    disable:Disable SD-WAN service gateway.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $allowedValues = $this->getGatewayAllowableValues();
        if (!is_null($gateway) && !in_array($gateway, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gateway', must be one of '%s'",
                    $gateway,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets default
     *
     * @return string|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string|null $default Enable/disable use of SD-WAN as default service.    enable:Enable use of SD-WAN as default service.    disable:Disable use of SD-WAN as default service.
     *
     * @return self
     */
    public function setDefault($default)
    {
        $allowedValues = $this->getDefaultAllowableValues();
        if (!is_null($default) && !in_array($default, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default', must be one of '%s'",
                    $default,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets sla_compare_method
     *
     * @return string|null
     */
    public function getSlaCompareMethod()
    {
        return $this->container['sla_compare_method'];
    }

    /**
     * Sets sla_compare_method
     *
     * @param string|null $sla_compare_method Method to compare SLA value for SLA mode.    order:Compare SLA value based on the order of health-check.    number:Compare SLA value based on the number of satisfied health-check.  Limits health-checks to only configured member interfaces.
     *
     * @return self
     */
    public function setSlaCompareMethod($sla_compare_method)
    {
        $allowedValues = $this->getSlaCompareMethodAllowableValues();
        if (!is_null($sla_compare_method) && !in_array($sla_compare_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sla_compare_method', must be one of '%s'",
                    $sla_compare_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sla_compare_method'] = $sla_compare_method;

        return $this;
    }

    /**
     * Gets tie_break
     *
     * @return string|null
     */
    public function getTieBreak()
    {
        return $this->container['tie_break'];
    }

    /**
     * Sets tie_break
     *
     * @param string|null $tie_break Method of selecting member if more than one meets the SLA.    zone:Use the setting that is configured for the members' zone.    cfg-order:Members that meet the SLA are selected in the order they are configured.    fib-best-match:Members that meet the SLA are selected that match the longest prefix in the routing table.
     *
     * @return self
     */
    public function setTieBreak($tie_break)
    {
        $allowedValues = $this->getTieBreakAllowableValues();
        if (!is_null($tie_break) && !in_array($tie_break, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tie_break', must be one of '%s'",
                    $tie_break,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tie_break'] = $tie_break;

        return $this;
    }

    /**
     * Gets use_shortcut_sla
     *
     * @return string|null
     */
    public function getUseShortcutSla()
    {
        return $this->container['use_shortcut_sla'];
    }

    /**
     * Sets use_shortcut_sla
     *
     * @param string|null $use_shortcut_sla Enable/disable use of ADVPN shortcut for quality comparison.    enable:Enable use of ADVPN shortcut for quality comparison.    disable:Disable use of ADVPN shortcut for quality comparison.
     *
     * @return self
     */
    public function setUseShortcutSla($use_shortcut_sla)
    {
        $allowedValues = $this->getUseShortcutSlaAllowableValues();
        if (!is_null($use_shortcut_sla) && !in_array($use_shortcut_sla, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_shortcut_sla', must be one of '%s'",
                    $use_shortcut_sla,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_shortcut_sla'] = $use_shortcut_sla;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


