<?php
/**
 * InlineObject77
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject77 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject77 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_77';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'log' => 'string',
        'log_packet' => 'string',
        'action' => 'string',
        'group' => 'string',
        'severity' => 'string',
        'location' => 'string',
        'os' => 'string',
        'application' => 'string',
        'service' => 'string',
        'rule_id' => 'int',
        'rev' => 'int',
        'date' => 'int',
        'metadata' => '\Fortigate\FortiOS\Model\CMDB\ApplicationNameNameMetadata[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'log' => null,
        'log_packet' => null,
        'action' => null,
        'group' => null,
        'severity' => null,
        'location' => null,
        'os' => null,
        'application' => null,
        'service' => null,
        'rule_id' => null,
        'rev' => null,
        'date' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'log' => 'log',
        'log_packet' => 'log-packet',
        'action' => 'action',
        'group' => 'group',
        'severity' => 'severity',
        'location' => 'location',
        'os' => 'os',
        'application' => 'application',
        'service' => 'service',
        'rule_id' => 'rule-id',
        'rev' => 'rev',
        'date' => 'date',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'log' => 'setLog',
        'log_packet' => 'setLogPacket',
        'action' => 'setAction',
        'group' => 'setGroup',
        'severity' => 'setSeverity',
        'location' => 'setLocation',
        'os' => 'setOs',
        'application' => 'setApplication',
        'service' => 'setService',
        'rule_id' => 'setRuleId',
        'rev' => 'setRev',
        'date' => 'setDate',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'log' => 'getLog',
        'log_packet' => 'getLogPacket',
        'action' => 'getAction',
        'group' => 'getGroup',
        'severity' => 'getSeverity',
        'location' => 'getLocation',
        'os' => 'getOs',
        'application' => 'getApplication',
        'service' => 'getService',
        'rule_id' => 'getRuleId',
        'rev' => 'getRev',
        'date' => 'getDate',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const LOG_DISABLE = 'disable';
    const LOG_ENABLE = 'enable';
    const LOG_PACKET_DISABLE = 'disable';
    const LOG_PACKET_ENABLE = 'enable';
    const ACTION_PASS = 'pass';
    const ACTION_BLOCK = 'block';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllowableValues()
    {
        return [
            self::LOG_DISABLE,
            self::LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogPacketAllowableValues()
    {
        return [
            self::LOG_PACKET_DISABLE,
            self::LOG_PACKET_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_PASS,
            self::ACTION_BLOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['log_packet'] = $data['log_packet'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['os'] = $data['os'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['rule_id'] = $data['rule_id'] ?? null;
        $this->container['rev'] = $data['rev'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($this->container['log']) && !in_array($this->container['log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log', must be one of '%s'",
                $this->container['log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogPacketAllowableValues();
        if (!is_null($this->container['log_packet']) && !in_array($this->container['log_packet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_packet', must be one of '%s'",
                $this->container['log_packet'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['group']) && (mb_strlen($this->container['group']) > 63)) {
            $invalidProperties[] = "invalid value for 'group', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['rule_id']) && ($this->container['rule_id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'rule_id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['rule_id']) && ($this->container['rule_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'rule_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rev']) && ($this->container['rev'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'rev', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['rev']) && ($this->container['rev'] < 0)) {
            $invalidProperties[] = "invalid value for 'rev', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['date']) && ($this->container['date'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'date', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['date']) && ($this->container['date'] < 0)) {
            $invalidProperties[] = "invalid value for 'date', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['metadata']) && (count($this->container['metadata']) > 0)) {
            $invalidProperties[] = "invalid value for 'metadata', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Rule name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject77., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable status.    disable:Disable status.    enable:Enable status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string|null $log Enable/disable logging.    disable:Disable logging.    enable:Enable logging.
     *
     * @return self
     */
    public function setLog($log)
    {
        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($log) && !in_array($log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log', must be one of '%s'",
                    $log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets log_packet
     *
     * @return string|null
     */
    public function getLogPacket()
    {
        return $this->container['log_packet'];
    }

    /**
     * Sets log_packet
     *
     * @param string|null $log_packet Enable/disable packet logging.    disable:Disable packet logging.    enable:Enable packet logging.
     *
     * @return self
     */
    public function setLogPacket($log_packet)
    {
        $allowedValues = $this->getLogPacketAllowableValues();
        if (!is_null($log_packet) && !in_array($log_packet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_packet', must be one of '%s'",
                    $log_packet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_packet'] = $log_packet;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action.    pass:Pass or allow matching traffic.    block:Block or drop matching traffic.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group Group.
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (!is_null($group) && (mb_strlen($group) > 63)) {
            throw new \InvalidArgumentException('invalid length for $group when calling InlineObject77., must be smaller than or equal to 63.');
        }

        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Severity.
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Vulnerable location.
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os Vulnerable operation systems.
     *
     * @return self
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string|null $application Vulnerable applications.
     *
     * @return self
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string|null $service Vulnerable service.
     *
     * @return self
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return int|null
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param int|null $rule_id Rule ID.
     *
     * @return self
     */
    public function setRuleId($rule_id)
    {

        if (!is_null($rule_id) && ($rule_id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $rule_id when calling InlineObject77., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($rule_id) && ($rule_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $rule_id when calling InlineObject77., must be bigger than or equal to 0.');
        }

        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rev
     *
     * @return int|null
     */
    public function getRev()
    {
        return $this->container['rev'];
    }

    /**
     * Sets rev
     *
     * @param int|null $rev Revision.
     *
     * @return self
     */
    public function setRev($rev)
    {

        if (!is_null($rev) && ($rev > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $rev when calling InlineObject77., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($rev) && ($rev < 0)) {
            throw new \InvalidArgumentException('invalid value for $rev when calling InlineObject77., must be bigger than or equal to 0.');
        }

        $this->container['rev'] = $rev;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int|null $date Date.
     *
     * @return self
     */
    public function setDate($date)
    {

        if (!is_null($date) && ($date > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $date when calling InlineObject77., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($date) && ($date < 0)) {
            throw new \InvalidArgumentException('invalid value for $date when calling InlineObject77., must be bigger than or equal to 0.');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationNameNameMetadata[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationNameNameMetadata[]|null $metadata Meta data.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {

        if (!is_null($metadata) && (count($metadata) > 0)) {
            throw new \InvalidArgumentException('invalid value for $metadata when calling InlineObject77., number of items must be less than or equal to 0.');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


