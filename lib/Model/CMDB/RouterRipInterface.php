<?php
/**
 * RouterRipInterface
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterRipInterface Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterRipInterface implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_rip_interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'auth_keychain' => 'string',
        'auth_mode' => 'string',
        'auth_string' => 'string',
        'receive_version' => 'string',
        'send_version' => 'string',
        'send_version2_broadcast' => 'string',
        'split_horizon_status' => 'string',
        'split_horizon' => 'string',
        'flags' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'auth_keychain' => null,
        'auth_mode' => null,
        'auth_string' => 'password',
        'receive_version' => null,
        'send_version' => null,
        'send_version2_broadcast' => null,
        'split_horizon_status' => null,
        'split_horizon' => null,
        'flags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'auth_keychain' => 'auth-keychain',
        'auth_mode' => 'auth-mode',
        'auth_string' => 'auth-string',
        'receive_version' => 'receive-version',
        'send_version' => 'send-version',
        'send_version2_broadcast' => 'send-version2-broadcast',
        'split_horizon_status' => 'split-horizon-status',
        'split_horizon' => 'split-horizon',
        'flags' => 'flags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'auth_keychain' => 'setAuthKeychain',
        'auth_mode' => 'setAuthMode',
        'auth_string' => 'setAuthString',
        'receive_version' => 'setReceiveVersion',
        'send_version' => 'setSendVersion',
        'send_version2_broadcast' => 'setSendVersion2Broadcast',
        'split_horizon_status' => 'setSplitHorizonStatus',
        'split_horizon' => 'setSplitHorizon',
        'flags' => 'setFlags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'auth_keychain' => 'getAuthKeychain',
        'auth_mode' => 'getAuthMode',
        'auth_string' => 'getAuthString',
        'receive_version' => 'getReceiveVersion',
        'send_version' => 'getSendVersion',
        'send_version2_broadcast' => 'getSendVersion2Broadcast',
        'split_horizon_status' => 'getSplitHorizonStatus',
        'split_horizon' => 'getSplitHorizon',
        'flags' => 'getFlags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTH_MODE_NONE = 'none';
    const AUTH_MODE_TEXT = 'text';
    const AUTH_MODE_MD5 = 'md5';
    const RECEIVE_VERSION__1 = '1';
    const RECEIVE_VERSION__2 = '2';
    const SEND_VERSION__1 = '1';
    const SEND_VERSION__2 = '2';
    const SEND_VERSION2_BROADCAST_DISABLE = 'disable';
    const SEND_VERSION2_BROADCAST_ENABLE = 'enable';
    const SPLIT_HORIZON_STATUS_ENABLE = 'enable';
    const SPLIT_HORIZON_STATUS_DISABLE = 'disable';
    const SPLIT_HORIZON_POISONED = 'poisoned';
    const SPLIT_HORIZON_REGULAR = 'regular';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeAllowableValues()
    {
        return [
            self::AUTH_MODE_NONE,
            self::AUTH_MODE_TEXT,
            self::AUTH_MODE_MD5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiveVersionAllowableValues()
    {
        return [
            self::RECEIVE_VERSION__1,
            self::RECEIVE_VERSION__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendVersionAllowableValues()
    {
        return [
            self::SEND_VERSION__1,
            self::SEND_VERSION__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendVersion2BroadcastAllowableValues()
    {
        return [
            self::SEND_VERSION2_BROADCAST_DISABLE,
            self::SEND_VERSION2_BROADCAST_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitHorizonStatusAllowableValues()
    {
        return [
            self::SPLIT_HORIZON_STATUS_ENABLE,
            self::SPLIT_HORIZON_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitHorizonAllowableValues()
    {
        return [
            self::SPLIT_HORIZON_POISONED,
            self::SPLIT_HORIZON_REGULAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['auth_keychain'] = $data['auth_keychain'] ?? null;
        $this->container['auth_mode'] = $data['auth_mode'] ?? null;
        $this->container['auth_string'] = $data['auth_string'] ?? null;
        $this->container['receive_version'] = $data['receive_version'] ?? null;
        $this->container['send_version'] = $data['send_version'] ?? null;
        $this->container['send_version2_broadcast'] = $data['send_version2_broadcast'] ?? null;
        $this->container['split_horizon_status'] = $data['split_horizon_status'] ?? null;
        $this->container['split_horizon'] = $data['split_horizon'] ?? null;
        $this->container['flags'] = $data['flags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['auth_keychain']) && (mb_strlen($this->container['auth_keychain']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_keychain', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthModeAllowableValues();
        if (!is_null($this->container['auth_mode']) && !in_array($this->container['auth_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode', must be one of '%s'",
                $this->container['auth_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReceiveVersionAllowableValues();
        if (!is_null($this->container['receive_version']) && !in_array($this->container['receive_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'receive_version', must be one of '%s'",
                $this->container['receive_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendVersionAllowableValues();
        if (!is_null($this->container['send_version']) && !in_array($this->container['send_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_version', must be one of '%s'",
                $this->container['send_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendVersion2BroadcastAllowableValues();
        if (!is_null($this->container['send_version2_broadcast']) && !in_array($this->container['send_version2_broadcast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_version2_broadcast', must be one of '%s'",
                $this->container['send_version2_broadcast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitHorizonStatusAllowableValues();
        if (!is_null($this->container['split_horizon_status']) && !in_array($this->container['split_horizon_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_horizon_status', must be one of '%s'",
                $this->container['split_horizon_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitHorizonAllowableValues();
        if (!is_null($this->container['split_horizon']) && !in_array($this->container['split_horizon'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_horizon', must be one of '%s'",
                $this->container['split_horizon'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['flags']) && ($this->container['flags'] > 255)) {
            $invalidProperties[] = "invalid value for 'flags', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['flags']) && ($this->container['flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'flags', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Interface name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterRipInterface., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets auth_keychain
     *
     * @return string|null
     */
    public function getAuthKeychain()
    {
        return $this->container['auth_keychain'];
    }

    /**
     * Sets auth_keychain
     *
     * @param string|null $auth_keychain Authentication key-chain name.
     *
     * @return self
     */
    public function setAuthKeychain($auth_keychain)
    {
        if (!is_null($auth_keychain) && (mb_strlen($auth_keychain) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_keychain when calling RouterRipInterface., must be smaller than or equal to 35.');
        }

        $this->container['auth_keychain'] = $auth_keychain;

        return $this;
    }

    /**
     * Gets auth_mode
     *
     * @return string|null
     */
    public function getAuthMode()
    {
        return $this->container['auth_mode'];
    }

    /**
     * Sets auth_mode
     *
     * @param string|null $auth_mode Authentication mode.    none:None.    text:Text.    md5:MD5.
     *
     * @return self
     */
    public function setAuthMode($auth_mode)
    {
        $allowedValues = $this->getAuthModeAllowableValues();
        if (!is_null($auth_mode) && !in_array($auth_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode', must be one of '%s'",
                    $auth_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode'] = $auth_mode;

        return $this;
    }

    /**
     * Gets auth_string
     *
     * @return string|null
     */
    public function getAuthString()
    {
        return $this->container['auth_string'];
    }

    /**
     * Sets auth_string
     *
     * @param string|null $auth_string Authentication string/password.
     *
     * @return self
     */
    public function setAuthString($auth_string)
    {
        $this->container['auth_string'] = $auth_string;

        return $this;
    }

    /**
     * Gets receive_version
     *
     * @return string|null
     */
    public function getReceiveVersion()
    {
        return $this->container['receive_version'];
    }

    /**
     * Sets receive_version
     *
     * @param string|null $receive_version Receive version.    1:Version 1.    2:Version 2.
     *
     * @return self
     */
    public function setReceiveVersion($receive_version)
    {
        $allowedValues = $this->getReceiveVersionAllowableValues();
        if (!is_null($receive_version) && !in_array($receive_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'receive_version', must be one of '%s'",
                    $receive_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receive_version'] = $receive_version;

        return $this;
    }

    /**
     * Gets send_version
     *
     * @return string|null
     */
    public function getSendVersion()
    {
        return $this->container['send_version'];
    }

    /**
     * Sets send_version
     *
     * @param string|null $send_version Send version.    1:Version 1.    2:Version 2.
     *
     * @return self
     */
    public function setSendVersion($send_version)
    {
        $allowedValues = $this->getSendVersionAllowableValues();
        if (!is_null($send_version) && !in_array($send_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_version', must be one of '%s'",
                    $send_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_version'] = $send_version;

        return $this;
    }

    /**
     * Gets send_version2_broadcast
     *
     * @return string|null
     */
    public function getSendVersion2Broadcast()
    {
        return $this->container['send_version2_broadcast'];
    }

    /**
     * Sets send_version2_broadcast
     *
     * @param string|null $send_version2_broadcast Enable/disable broadcast version 1 compatible packets.    disable:Disable broadcasting.    enable:Enable broadcasting.
     *
     * @return self
     */
    public function setSendVersion2Broadcast($send_version2_broadcast)
    {
        $allowedValues = $this->getSendVersion2BroadcastAllowableValues();
        if (!is_null($send_version2_broadcast) && !in_array($send_version2_broadcast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_version2_broadcast', must be one of '%s'",
                    $send_version2_broadcast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_version2_broadcast'] = $send_version2_broadcast;

        return $this;
    }

    /**
     * Gets split_horizon_status
     *
     * @return string|null
     */
    public function getSplitHorizonStatus()
    {
        return $this->container['split_horizon_status'];
    }

    /**
     * Sets split_horizon_status
     *
     * @param string|null $split_horizon_status Enable/disable split horizon.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSplitHorizonStatus($split_horizon_status)
    {
        $allowedValues = $this->getSplitHorizonStatusAllowableValues();
        if (!is_null($split_horizon_status) && !in_array($split_horizon_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_horizon_status', must be one of '%s'",
                    $split_horizon_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_horizon_status'] = $split_horizon_status;

        return $this;
    }

    /**
     * Gets split_horizon
     *
     * @return string|null
     */
    public function getSplitHorizon()
    {
        return $this->container['split_horizon'];
    }

    /**
     * Sets split_horizon
     *
     * @param string|null $split_horizon Enable/disable split horizon.    poisoned:Poisoned.    regular:Regular.
     *
     * @return self
     */
    public function setSplitHorizon($split_horizon)
    {
        $allowedValues = $this->getSplitHorizonAllowableValues();
        if (!is_null($split_horizon) && !in_array($split_horizon, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_horizon', must be one of '%s'",
                    $split_horizon,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_horizon'] = $split_horizon;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int|null $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {

        if (!is_null($flags) && ($flags > 255)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling RouterRipInterface., must be smaller than or equal to 255.');
        }
        if (!is_null($flags) && ($flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling RouterRipInterface., must be bigger than or equal to 0.');
        }

        $this->container['flags'] = $flags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


