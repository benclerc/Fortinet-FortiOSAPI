<?php
/**
 * WafProfileNameConstraint
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WafProfileNameConstraint Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WafProfileNameConstraint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_waf_profile__name__constraint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'header_length' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameHeaderLength[]',
        'content_length' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameContentLength[]',
        'param_length' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameParamLength[]',
        'line_length' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameLineLength[]',
        'url_param_length' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlParamLength[]',
        'version' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]',
        'method' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]',
        'hostname' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]',
        'malformed' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]',
        'max_cookie' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxCookie[]',
        'max_header_line' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxHeaderLine[]',
        'max_url_param' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxUrlParam[]',
        'max_range_segment' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxRangeSegment[]',
        'exception' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameException[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'header_length' => null,
        'content_length' => null,
        'param_length' => null,
        'line_length' => null,
        'url_param_length' => null,
        'version' => null,
        'method' => null,
        'hostname' => null,
        'malformed' => null,
        'max_cookie' => null,
        'max_header_line' => null,
        'max_url_param' => null,
        'max_range_segment' => null,
        'exception' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'header_length' => 'header-length',
        'content_length' => 'content-length',
        'param_length' => 'param-length',
        'line_length' => 'line-length',
        'url_param_length' => 'url-param-length',
        'version' => 'version',
        'method' => 'method',
        'hostname' => 'hostname',
        'malformed' => 'malformed',
        'max_cookie' => 'max-cookie',
        'max_header_line' => 'max-header-line',
        'max_url_param' => 'max-url-param',
        'max_range_segment' => 'max-range-segment',
        'exception' => 'exception'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'header_length' => 'setHeaderLength',
        'content_length' => 'setContentLength',
        'param_length' => 'setParamLength',
        'line_length' => 'setLineLength',
        'url_param_length' => 'setUrlParamLength',
        'version' => 'setVersion',
        'method' => 'setMethod',
        'hostname' => 'setHostname',
        'malformed' => 'setMalformed',
        'max_cookie' => 'setMaxCookie',
        'max_header_line' => 'setMaxHeaderLine',
        'max_url_param' => 'setMaxUrlParam',
        'max_range_segment' => 'setMaxRangeSegment',
        'exception' => 'setException'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'header_length' => 'getHeaderLength',
        'content_length' => 'getContentLength',
        'param_length' => 'getParamLength',
        'line_length' => 'getLineLength',
        'url_param_length' => 'getUrlParamLength',
        'version' => 'getVersion',
        'method' => 'getMethod',
        'hostname' => 'getHostname',
        'malformed' => 'getMalformed',
        'max_cookie' => 'getMaxCookie',
        'max_header_line' => 'getMaxHeaderLine',
        'max_url_param' => 'getMaxUrlParam',
        'max_range_segment' => 'getMaxRangeSegment',
        'exception' => 'getException'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['header_length'] = $data['header_length'] ?? null;
        $this->container['content_length'] = $data['content_length'] ?? null;
        $this->container['param_length'] = $data['param_length'] ?? null;
        $this->container['line_length'] = $data['line_length'] ?? null;
        $this->container['url_param_length'] = $data['url_param_length'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['malformed'] = $data['malformed'] ?? null;
        $this->container['max_cookie'] = $data['max_cookie'] ?? null;
        $this->container['max_header_line'] = $data['max_header_line'] ?? null;
        $this->container['max_url_param'] = $data['max_url_param'] ?? null;
        $this->container['max_range_segment'] = $data['max_range_segment'] ?? null;
        $this->container['exception'] = $data['exception'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['header_length']) && (count($this->container['header_length']) > 0)) {
            $invalidProperties[] = "invalid value for 'header_length', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['content_length']) && (count($this->container['content_length']) > 0)) {
            $invalidProperties[] = "invalid value for 'content_length', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['param_length']) && (count($this->container['param_length']) > 0)) {
            $invalidProperties[] = "invalid value for 'param_length', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['line_length']) && (count($this->container['line_length']) > 0)) {
            $invalidProperties[] = "invalid value for 'line_length', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['url_param_length']) && (count($this->container['url_param_length']) > 0)) {
            $invalidProperties[] = "invalid value for 'url_param_length', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['version']) && (count($this->container['version']) > 0)) {
            $invalidProperties[] = "invalid value for 'version', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['method']) && (count($this->container['method']) > 0)) {
            $invalidProperties[] = "invalid value for 'method', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['hostname']) && (count($this->container['hostname']) > 0)) {
            $invalidProperties[] = "invalid value for 'hostname', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['malformed']) && (count($this->container['malformed']) > 0)) {
            $invalidProperties[] = "invalid value for 'malformed', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['max_cookie']) && (count($this->container['max_cookie']) > 0)) {
            $invalidProperties[] = "invalid value for 'max_cookie', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['max_header_line']) && (count($this->container['max_header_line']) > 0)) {
            $invalidProperties[] = "invalid value for 'max_header_line', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['max_url_param']) && (count($this->container['max_url_param']) > 0)) {
            $invalidProperties[] = "invalid value for 'max_url_param', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['max_range_segment']) && (count($this->container['max_range_segment']) > 0)) {
            $invalidProperties[] = "invalid value for 'max_range_segment', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['exception']) && (count($this->container['exception']) > 0)) {
            $invalidProperties[] = "invalid value for 'exception', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets header_length
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameHeaderLength[]|null
     */
    public function getHeaderLength()
    {
        return $this->container['header_length'];
    }

    /**
     * Sets header_length
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameHeaderLength[]|null $header_length HTTP header length in request.
     *
     * @return self
     */
    public function setHeaderLength($header_length)
    {

        if (!is_null($header_length) && (count($header_length) > 0)) {
            throw new \InvalidArgumentException('invalid value for $header_length when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['header_length'] = $header_length;

        return $this;
    }

    /**
     * Gets content_length
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameContentLength[]|null
     */
    public function getContentLength()
    {
        return $this->container['content_length'];
    }

    /**
     * Sets content_length
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameContentLength[]|null $content_length HTTP content length in request.
     *
     * @return self
     */
    public function setContentLength($content_length)
    {

        if (!is_null($content_length) && (count($content_length) > 0)) {
            throw new \InvalidArgumentException('invalid value for $content_length when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['content_length'] = $content_length;

        return $this;
    }

    /**
     * Gets param_length
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameParamLength[]|null
     */
    public function getParamLength()
    {
        return $this->container['param_length'];
    }

    /**
     * Sets param_length
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameParamLength[]|null $param_length Maximum length of parameter in URL, HTTP POST request or HTTP body.
     *
     * @return self
     */
    public function setParamLength($param_length)
    {

        if (!is_null($param_length) && (count($param_length) > 0)) {
            throw new \InvalidArgumentException('invalid value for $param_length when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['param_length'] = $param_length;

        return $this;
    }

    /**
     * Gets line_length
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameLineLength[]|null
     */
    public function getLineLength()
    {
        return $this->container['line_length'];
    }

    /**
     * Sets line_length
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameLineLength[]|null $line_length HTTP line length in request.
     *
     * @return self
     */
    public function setLineLength($line_length)
    {

        if (!is_null($line_length) && (count($line_length) > 0)) {
            throw new \InvalidArgumentException('invalid value for $line_length when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['line_length'] = $line_length;

        return $this;
    }

    /**
     * Gets url_param_length
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlParamLength[]|null
     */
    public function getUrlParamLength()
    {
        return $this->container['url_param_length'];
    }

    /**
     * Sets url_param_length
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlParamLength[]|null $url_param_length Maximum length of parameter in URL.
     *
     * @return self
     */
    public function setUrlParamLength($url_param_length)
    {

        if (!is_null($url_param_length) && (count($url_param_length) > 0)) {
            throw new \InvalidArgumentException('invalid value for $url_param_length when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['url_param_length'] = $url_param_length;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null $version Enable/disable HTTP version check.
     *
     * @return self
     */
    public function setVersion($version)
    {

        if (!is_null($version) && (count($version) > 0)) {
            throw new \InvalidArgumentException('invalid value for $version when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null $method Enable/disable HTTP method check.
     *
     * @return self
     */
    public function setMethod($method)
    {

        if (!is_null($method) && (count($method) > 0)) {
            throw new \InvalidArgumentException('invalid value for $method when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null $hostname Enable/disable hostname check.
     *
     * @return self
     */
    public function setHostname($hostname)
    {

        if (!is_null($hostname) && (count($hostname) > 0)) {
            throw new \InvalidArgumentException('invalid value for $hostname when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets malformed
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null
     */
    public function getMalformed()
    {
        return $this->container['malformed'];
    }

    /**
     * Sets malformed
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameVersion[]|null $malformed Enable/disable malformed HTTP request check.
     *
     * @return self
     */
    public function setMalformed($malformed)
    {

        if (!is_null($malformed) && (count($malformed) > 0)) {
            throw new \InvalidArgumentException('invalid value for $malformed when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['malformed'] = $malformed;

        return $this;
    }

    /**
     * Gets max_cookie
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxCookie[]|null
     */
    public function getMaxCookie()
    {
        return $this->container['max_cookie'];
    }

    /**
     * Sets max_cookie
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxCookie[]|null $max_cookie Maximum number of cookies in HTTP request.
     *
     * @return self
     */
    public function setMaxCookie($max_cookie)
    {

        if (!is_null($max_cookie) && (count($max_cookie) > 0)) {
            throw new \InvalidArgumentException('invalid value for $max_cookie when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['max_cookie'] = $max_cookie;

        return $this;
    }

    /**
     * Gets max_header_line
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxHeaderLine[]|null
     */
    public function getMaxHeaderLine()
    {
        return $this->container['max_header_line'];
    }

    /**
     * Sets max_header_line
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxHeaderLine[]|null $max_header_line Maximum number of HTTP header line.
     *
     * @return self
     */
    public function setMaxHeaderLine($max_header_line)
    {

        if (!is_null($max_header_line) && (count($max_header_line) > 0)) {
            throw new \InvalidArgumentException('invalid value for $max_header_line when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['max_header_line'] = $max_header_line;

        return $this;
    }

    /**
     * Gets max_url_param
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxUrlParam[]|null
     */
    public function getMaxUrlParam()
    {
        return $this->container['max_url_param'];
    }

    /**
     * Sets max_url_param
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxUrlParam[]|null $max_url_param Maximum number of parameters in URL.
     *
     * @return self
     */
    public function setMaxUrlParam($max_url_param)
    {

        if (!is_null($max_url_param) && (count($max_url_param) > 0)) {
            throw new \InvalidArgumentException('invalid value for $max_url_param when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['max_url_param'] = $max_url_param;

        return $this;
    }

    /**
     * Gets max_range_segment
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxRangeSegment[]|null
     */
    public function getMaxRangeSegment()
    {
        return $this->container['max_range_segment'];
    }

    /**
     * Sets max_range_segment
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMaxRangeSegment[]|null $max_range_segment Maximum number of range segments in HTTP range line.
     *
     * @return self
     */
    public function setMaxRangeSegment($max_range_segment)
    {

        if (!is_null($max_range_segment) && (count($max_range_segment) > 0)) {
            throw new \InvalidArgumentException('invalid value for $max_range_segment when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['max_range_segment'] = $max_range_segment;

        return $this;
    }

    /**
     * Gets exception
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameException[]|null
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameException[]|null $exception HTTP constraint exception.
     *
     * @return self
     */
    public function setException($exception)
    {

        if (!is_null($exception) && (count($exception) > 0)) {
            throw new \InvalidArgumentException('invalid value for $exception when calling WafProfileNameConstraint., number of items must be less than or equal to 0.');
        }
        $this->container['exception'] = $exception;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


