<?php
/**
 * InlineObject394
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject394 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject394 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_394';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vdom_dns' => 'string',
        'primary' => 'string',
        'secondary' => 'string',
        'dns_over_tls' => 'string',
        'ssl_certificate' => 'string',
        'server_hostname' => '\Fortigate\FortiOS\Model\CMDB\SystemDnsServerHostname[]',
        'ip6_primary' => 'string',
        'ip6_secondary' => 'string',
        'source_ip' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vdom_dns' => null,
        'primary' => 'ipv4',
        'secondary' => 'ipv4',
        'dns_over_tls' => null,
        'ssl_certificate' => null,
        'server_hostname' => null,
        'ip6_primary' => 'ipv6',
        'ip6_secondary' => 'ipv6',
        'source_ip' => 'ipv4',
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vdom_dns' => 'vdom-dns',
        'primary' => 'primary',
        'secondary' => 'secondary',
        'dns_over_tls' => 'dns-over-tls',
        'ssl_certificate' => 'ssl-certificate',
        'server_hostname' => 'server-hostname',
        'ip6_primary' => 'ip6-primary',
        'ip6_secondary' => 'ip6-secondary',
        'source_ip' => 'source-ip',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vdom_dns' => 'setVdomDns',
        'primary' => 'setPrimary',
        'secondary' => 'setSecondary',
        'dns_over_tls' => 'setDnsOverTls',
        'ssl_certificate' => 'setSslCertificate',
        'server_hostname' => 'setServerHostname',
        'ip6_primary' => 'setIp6Primary',
        'ip6_secondary' => 'setIp6Secondary',
        'source_ip' => 'setSourceIp',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vdom_dns' => 'getVdomDns',
        'primary' => 'getPrimary',
        'secondary' => 'getSecondary',
        'dns_over_tls' => 'getDnsOverTls',
        'ssl_certificate' => 'getSslCertificate',
        'server_hostname' => 'getServerHostname',
        'ip6_primary' => 'getIp6Primary',
        'ip6_secondary' => 'getIp6Secondary',
        'source_ip' => 'getSourceIp',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VDOM_DNS_ENABLE = 'enable';
    const VDOM_DNS_DISABLE = 'disable';
    const DNS_OVER_TLS_DISABLE = 'disable';
    const DNS_OVER_TLS_ENABLE = 'enable';
    const DNS_OVER_TLS_ENFORCE = 'enforce';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVdomDnsAllowableValues()
    {
        return [
            self::VDOM_DNS_ENABLE,
            self::VDOM_DNS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsOverTlsAllowableValues()
    {
        return [
            self::DNS_OVER_TLS_DISABLE,
            self::DNS_OVER_TLS_ENABLE,
            self::DNS_OVER_TLS_ENFORCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vdom_dns'] = $data['vdom_dns'] ?? null;
        $this->container['primary'] = $data['primary'] ?? null;
        $this->container['secondary'] = $data['secondary'] ?? null;
        $this->container['dns_over_tls'] = $data['dns_over_tls'] ?? null;
        $this->container['ssl_certificate'] = $data['ssl_certificate'] ?? null;
        $this->container['server_hostname'] = $data['server_hostname'] ?? null;
        $this->container['ip6_primary'] = $data['ip6_primary'] ?? null;
        $this->container['ip6_secondary'] = $data['ip6_secondary'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVdomDnsAllowableValues();
        if (!is_null($this->container['vdom_dns']) && !in_array($this->container['vdom_dns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vdom_dns', must be one of '%s'",
                $this->container['vdom_dns'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsOverTlsAllowableValues();
        if (!is_null($this->container['dns_over_tls']) && !in_array($this->container['dns_over_tls'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_over_tls', must be one of '%s'",
                $this->container['dns_over_tls'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssl_certificate']) && (mb_strlen($this->container['ssl_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server_hostname']) && (count($this->container['server_hostname']) > 4)) {
            $invalidProperties[] = "invalid value for 'server_hostname', number of items must be less than or equal to 4.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vdom_dns
     *
     * @return string|null
     */
    public function getVdomDns()
    {
        return $this->container['vdom_dns'];
    }

    /**
     * Sets vdom_dns
     *
     * @param string|null $vdom_dns Enable/disable configuring DNS servers for the current VDOM.    enable:Enable configuring DNS servers for the current VDOM.    disable:Disable configuring DNS servers for the current VDOM.
     *
     * @return self
     */
    public function setVdomDns($vdom_dns)
    {
        $allowedValues = $this->getVdomDnsAllowableValues();
        if (!is_null($vdom_dns) && !in_array($vdom_dns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vdom_dns', must be one of '%s'",
                    $vdom_dns,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vdom_dns'] = $vdom_dns;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return string|null
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param string|null $primary Primary DNS server IP address for the VDOM.
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets secondary
     *
     * @return string|null
     */
    public function getSecondary()
    {
        return $this->container['secondary'];
    }

    /**
     * Sets secondary
     *
     * @param string|null $secondary Secondary DNS server IP address for the VDOM.
     *
     * @return self
     */
    public function setSecondary($secondary)
    {
        $this->container['secondary'] = $secondary;

        return $this;
    }

    /**
     * Gets dns_over_tls
     *
     * @return string|null
     */
    public function getDnsOverTls()
    {
        return $this->container['dns_over_tls'];
    }

    /**
     * Sets dns_over_tls
     *
     * @param string|null $dns_over_tls Enable/disable/enforce DNS over TLS.    disable:Disable DNS over TLS.    enable:Use TLS for DNS queries if TLS is available.    enforce:Use only TLS for DNS queries. Does not fall back to unencrypted DNS queries if TLS is unavailable.
     *
     * @return self
     */
    public function setDnsOverTls($dns_over_tls)
    {
        $allowedValues = $this->getDnsOverTlsAllowableValues();
        if (!is_null($dns_over_tls) && !in_array($dns_over_tls, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_over_tls', must be one of '%s'",
                    $dns_over_tls,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_over_tls'] = $dns_over_tls;

        return $this;
    }

    /**
     * Gets ssl_certificate
     *
     * @return string|null
     */
    public function getSslCertificate()
    {
        return $this->container['ssl_certificate'];
    }

    /**
     * Sets ssl_certificate
     *
     * @param string|null $ssl_certificate Name of local certificate for SSL connections.
     *
     * @return self
     */
    public function setSslCertificate($ssl_certificate)
    {
        if (!is_null($ssl_certificate) && (mb_strlen($ssl_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_certificate when calling InlineObject394., must be smaller than or equal to 35.');
        }

        $this->container['ssl_certificate'] = $ssl_certificate;

        return $this;
    }

    /**
     * Gets server_hostname
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDnsServerHostname[]|null
     */
    public function getServerHostname()
    {
        return $this->container['server_hostname'];
    }

    /**
     * Sets server_hostname
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDnsServerHostname[]|null $server_hostname DNS server host name list.
     *
     * @return self
     */
    public function setServerHostname($server_hostname)
    {

        if (!is_null($server_hostname) && (count($server_hostname) > 4)) {
            throw new \InvalidArgumentException('invalid value for $server_hostname when calling InlineObject394., number of items must be less than or equal to 4.');
        }
        $this->container['server_hostname'] = $server_hostname;

        return $this;
    }

    /**
     * Gets ip6_primary
     *
     * @return string|null
     */
    public function getIp6Primary()
    {
        return $this->container['ip6_primary'];
    }

    /**
     * Sets ip6_primary
     *
     * @param string|null $ip6_primary Primary IPv6 DNS server IP address for the VDOM.
     *
     * @return self
     */
    public function setIp6Primary($ip6_primary)
    {
        $this->container['ip6_primary'] = $ip6_primary;

        return $this;
    }

    /**
     * Gets ip6_secondary
     *
     * @return string|null
     */
    public function getIp6Secondary()
    {
        return $this->container['ip6_secondary'];
    }

    /**
     * Sets ip6_secondary
     *
     * @param string|null $ip6_secondary Secondary IPv6 DNS server IP address for the VDOM.
     *
     * @return self
     */
    public function setIp6Secondary($ip6_secondary)
    {
        $this->container['ip6_secondary'] = $ip6_secondary;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP for communications with the DNS server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject394., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


