<?php
/**
 * InlineObject358
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject358 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject358 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_358';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'port' => 'int',
        'http_probe_value' => 'string',
        'ttl_mode' => 'string',
        'mode' => 'string',
        'security_mode' => 'string',
        'password' => 'string',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'port' => null,
        'http_probe_value' => null,
        'ttl_mode' => null,
        'mode' => null,
        'security_mode' => null,
        'password' => 'password',
        'timeout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port' => 'port',
        'http_probe_value' => 'http-probe-value',
        'ttl_mode' => 'ttl-mode',
        'mode' => 'mode',
        'security_mode' => 'security-mode',
        'password' => 'password',
        'timeout' => 'timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port' => 'setPort',
        'http_probe_value' => 'setHttpProbeValue',
        'ttl_mode' => 'setTtlMode',
        'mode' => 'setMode',
        'security_mode' => 'setSecurityMode',
        'password' => 'setPassword',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port' => 'getPort',
        'http_probe_value' => 'getHttpProbeValue',
        'ttl_mode' => 'getTtlMode',
        'mode' => 'getMode',
        'security_mode' => 'getSecurityMode',
        'password' => 'getPassword',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TTL_MODE_REINIT = 'reinit';
    const TTL_MODE_DECREASE = 'decrease';
    const TTL_MODE_RETAIN = 'retain';
    const MODE_NONE = 'none';
    const MODE_HTTP_PROBE = 'http-probe';
    const MODE_TWAMP = 'twamp';
    const SECURITY_MODE_NONE = 'none';
    const SECURITY_MODE_AUTHENTICATION = 'authentication';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTtlModeAllowableValues()
    {
        return [
            self::TTL_MODE_REINIT,
            self::TTL_MODE_DECREASE,
            self::TTL_MODE_RETAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_NONE,
            self::MODE_HTTP_PROBE,
            self::MODE_TWAMP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityModeAllowableValues()
    {
        return [
            self::SECURITY_MODE_NONE,
            self::SECURITY_MODE_AUTHENTICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['port'] = $data['port'] ?? null;
        $this->container['http_probe_value'] = $data['http_probe_value'] ?? null;
        $this->container['ttl_mode'] = $data['ttl_mode'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['timeout'] = $data['timeout'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['http_probe_value']) && (mb_strlen($this->container['http_probe_value']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_probe_value', the character length must be smaller than or equal to 1024.";
        }

        $allowedValues = $this->getTtlModeAllowableValues();
        if (!is_null($this->container['ttl_mode']) && !in_array($this->container['ttl_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ttl_mode', must be one of '%s'",
                $this->container['ttl_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($this->container['security_mode']) && !in_array($this->container['security_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mode', must be one of '%s'",
                $this->container['security_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] > 3600)) {
            $invalidProperties[] = "invalid value for 'timeout', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] < 10)) {
            $invalidProperties[] = "invalid value for 'timeout', must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number to response.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject358., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject358., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets http_probe_value
     *
     * @return string|null
     */
    public function getHttpProbeValue()
    {
        return $this->container['http_probe_value'];
    }

    /**
     * Sets http_probe_value
     *
     * @param string|null $http_probe_value Value to respond to the monitoring server.
     *
     * @return self
     */
    public function setHttpProbeValue($http_probe_value)
    {
        if (!is_null($http_probe_value) && (mb_strlen($http_probe_value) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_probe_value when calling InlineObject358., must be smaller than or equal to 1024.');
        }

        $this->container['http_probe_value'] = $http_probe_value;

        return $this;
    }

    /**
     * Gets ttl_mode
     *
     * @return string|null
     */
    public function getTtlMode()
    {
        return $this->container['ttl_mode'];
    }

    /**
     * Sets ttl_mode
     *
     * @param string|null $ttl_mode Mode for TWAMP packet TTL modification.    reinit:Reinitialize TTL.    decrease:Decrease TTL.    retain:Retain TTL.
     *
     * @return self
     */
    public function setTtlMode($ttl_mode)
    {
        $allowedValues = $this->getTtlModeAllowableValues();
        if (!is_null($ttl_mode) && !in_array($ttl_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ttl_mode', must be one of '%s'",
                    $ttl_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ttl_mode'] = $ttl_mode;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode SLA response mode.    none:Disable probe.    http-probe:HTTP probe.    twamp:Two way active measurement protocol.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode Twamp respondor security mode.    none:Unauthenticated mode.    authentication:Authenticated mode.
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($security_mode) && !in_array($security_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mode', must be one of '%s'",
                    $security_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Twamp respondor password in authentication mode
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int|null $timeout An inactivity timer for a twamp test session.
     *
     * @return self
     */
    public function setTimeout($timeout)
    {

        if (!is_null($timeout) && ($timeout > 3600)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject358., must be smaller than or equal to 3600.');
        }
        if (!is_null($timeout) && ($timeout < 10)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject358., must be bigger than or equal to 10.');
        }

        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


