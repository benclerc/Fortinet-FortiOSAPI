<?php
/**
 * InlineObject167
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject167 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject167 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_167';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abr_type' => 'string',
        'auto_cost_ref_bandwidth' => 'int',
        'distance_external' => 'int',
        'distance_inter_area' => 'int',
        'distance_intra_area' => 'int',
        'database_overflow' => 'string',
        'database_overflow_max_lsas' => 'int',
        'database_overflow_time_to_recover' => 'int',
        'default_information_originate' => 'string',
        'default_information_metric' => 'int',
        'default_information_metric_type' => 'string',
        'default_information_route_map' => 'string',
        'default_metric' => 'int',
        'distance' => 'int',
        'rfc1583_compatible' => 'string',
        'router_id' => 'string',
        'spf_timers' => 'string',
        'bfd' => 'string',
        'log_neighbour_changes' => 'string',
        'distribute_list_in' => 'string',
        'distribute_route_map_in' => 'string',
        'restart_mode' => 'string',
        'restart_period' => 'int',
        'area' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfArea[]',
        'ospf_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfOspfInterface[]',
        'network' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfNetwork[]',
        'neighbor' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfNeighbor[]',
        'passive_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]',
        'summary_address' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfSummaryAddress[]',
        'distribute_list' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfDistributeList[]',
        'redistribute' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfRedistribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abr_type' => null,
        'auto_cost_ref_bandwidth' => null,
        'distance_external' => null,
        'distance_inter_area' => null,
        'distance_intra_area' => null,
        'database_overflow' => null,
        'database_overflow_max_lsas' => null,
        'database_overflow_time_to_recover' => null,
        'default_information_originate' => null,
        'default_information_metric' => null,
        'default_information_metric_type' => null,
        'default_information_route_map' => null,
        'default_metric' => null,
        'distance' => null,
        'rfc1583_compatible' => null,
        'router_id' => 'ipv4',
        'spf_timers' => null,
        'bfd' => null,
        'log_neighbour_changes' => null,
        'distribute_list_in' => null,
        'distribute_route_map_in' => null,
        'restart_mode' => null,
        'restart_period' => null,
        'area' => null,
        'ospf_interface' => null,
        'network' => null,
        'neighbor' => null,
        'passive_interface' => null,
        'summary_address' => null,
        'distribute_list' => null,
        'redistribute' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abr_type' => 'abr-type',
        'auto_cost_ref_bandwidth' => 'auto-cost-ref-bandwidth',
        'distance_external' => 'distance-external',
        'distance_inter_area' => 'distance-inter-area',
        'distance_intra_area' => 'distance-intra-area',
        'database_overflow' => 'database-overflow',
        'database_overflow_max_lsas' => 'database-overflow-max-lsas',
        'database_overflow_time_to_recover' => 'database-overflow-time-to-recover',
        'default_information_originate' => 'default-information-originate',
        'default_information_metric' => 'default-information-metric',
        'default_information_metric_type' => 'default-information-metric-type',
        'default_information_route_map' => 'default-information-route-map',
        'default_metric' => 'default-metric',
        'distance' => 'distance',
        'rfc1583_compatible' => 'rfc1583-compatible',
        'router_id' => 'router-id',
        'spf_timers' => 'spf-timers',
        'bfd' => 'bfd',
        'log_neighbour_changes' => 'log-neighbour-changes',
        'distribute_list_in' => 'distribute-list-in',
        'distribute_route_map_in' => 'distribute-route-map-in',
        'restart_mode' => 'restart-mode',
        'restart_period' => 'restart-period',
        'area' => 'area',
        'ospf_interface' => 'ospf-interface',
        'network' => 'network',
        'neighbor' => 'neighbor',
        'passive_interface' => 'passive-interface',
        'summary_address' => 'summary-address',
        'distribute_list' => 'distribute-list',
        'redistribute' => 'redistribute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abr_type' => 'setAbrType',
        'auto_cost_ref_bandwidth' => 'setAutoCostRefBandwidth',
        'distance_external' => 'setDistanceExternal',
        'distance_inter_area' => 'setDistanceInterArea',
        'distance_intra_area' => 'setDistanceIntraArea',
        'database_overflow' => 'setDatabaseOverflow',
        'database_overflow_max_lsas' => 'setDatabaseOverflowMaxLsas',
        'database_overflow_time_to_recover' => 'setDatabaseOverflowTimeToRecover',
        'default_information_originate' => 'setDefaultInformationOriginate',
        'default_information_metric' => 'setDefaultInformationMetric',
        'default_information_metric_type' => 'setDefaultInformationMetricType',
        'default_information_route_map' => 'setDefaultInformationRouteMap',
        'default_metric' => 'setDefaultMetric',
        'distance' => 'setDistance',
        'rfc1583_compatible' => 'setRfc1583Compatible',
        'router_id' => 'setRouterId',
        'spf_timers' => 'setSpfTimers',
        'bfd' => 'setBfd',
        'log_neighbour_changes' => 'setLogNeighbourChanges',
        'distribute_list_in' => 'setDistributeListIn',
        'distribute_route_map_in' => 'setDistributeRouteMapIn',
        'restart_mode' => 'setRestartMode',
        'restart_period' => 'setRestartPeriod',
        'area' => 'setArea',
        'ospf_interface' => 'setOspfInterface',
        'network' => 'setNetwork',
        'neighbor' => 'setNeighbor',
        'passive_interface' => 'setPassiveInterface',
        'summary_address' => 'setSummaryAddress',
        'distribute_list' => 'setDistributeList',
        'redistribute' => 'setRedistribute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abr_type' => 'getAbrType',
        'auto_cost_ref_bandwidth' => 'getAutoCostRefBandwidth',
        'distance_external' => 'getDistanceExternal',
        'distance_inter_area' => 'getDistanceInterArea',
        'distance_intra_area' => 'getDistanceIntraArea',
        'database_overflow' => 'getDatabaseOverflow',
        'database_overflow_max_lsas' => 'getDatabaseOverflowMaxLsas',
        'database_overflow_time_to_recover' => 'getDatabaseOverflowTimeToRecover',
        'default_information_originate' => 'getDefaultInformationOriginate',
        'default_information_metric' => 'getDefaultInformationMetric',
        'default_information_metric_type' => 'getDefaultInformationMetricType',
        'default_information_route_map' => 'getDefaultInformationRouteMap',
        'default_metric' => 'getDefaultMetric',
        'distance' => 'getDistance',
        'rfc1583_compatible' => 'getRfc1583Compatible',
        'router_id' => 'getRouterId',
        'spf_timers' => 'getSpfTimers',
        'bfd' => 'getBfd',
        'log_neighbour_changes' => 'getLogNeighbourChanges',
        'distribute_list_in' => 'getDistributeListIn',
        'distribute_route_map_in' => 'getDistributeRouteMapIn',
        'restart_mode' => 'getRestartMode',
        'restart_period' => 'getRestartPeriod',
        'area' => 'getArea',
        'ospf_interface' => 'getOspfInterface',
        'network' => 'getNetwork',
        'neighbor' => 'getNeighbor',
        'passive_interface' => 'getPassiveInterface',
        'summary_address' => 'getSummaryAddress',
        'distribute_list' => 'getDistributeList',
        'redistribute' => 'getRedistribute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ABR_TYPE_CISCO = 'cisco';
    const ABR_TYPE_IBM = 'ibm';
    const ABR_TYPE_SHORTCUT = 'shortcut';
    const ABR_TYPE_STANDARD = 'standard';
    const DATABASE_OVERFLOW_ENABLE = 'enable';
    const DATABASE_OVERFLOW_DISABLE = 'disable';
    const DEFAULT_INFORMATION_ORIGINATE_ENABLE = 'enable';
    const DEFAULT_INFORMATION_ORIGINATE_ALWAYS = 'always';
    const DEFAULT_INFORMATION_ORIGINATE_DISABLE = 'disable';
    const DEFAULT_INFORMATION_METRIC_TYPE__1 = '1';
    const DEFAULT_INFORMATION_METRIC_TYPE__2 = '2';
    const RFC1583_COMPATIBLE_ENABLE = 'enable';
    const RFC1583_COMPATIBLE_DISABLE = 'disable';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const LOG_NEIGHBOUR_CHANGES_ENABLE = 'enable';
    const LOG_NEIGHBOUR_CHANGES_DISABLE = 'disable';
    const RESTART_MODE_NONE = 'none';
    const RESTART_MODE_LLS = 'lls';
    const RESTART_MODE_GRACEFUL_RESTART = 'graceful-restart';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbrTypeAllowableValues()
    {
        return [
            self::ABR_TYPE_CISCO,
            self::ABR_TYPE_IBM,
            self::ABR_TYPE_SHORTCUT,
            self::ABR_TYPE_STANDARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDatabaseOverflowAllowableValues()
    {
        return [
            self::DATABASE_OVERFLOW_ENABLE,
            self::DATABASE_OVERFLOW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultInformationOriginateAllowableValues()
    {
        return [
            self::DEFAULT_INFORMATION_ORIGINATE_ENABLE,
            self::DEFAULT_INFORMATION_ORIGINATE_ALWAYS,
            self::DEFAULT_INFORMATION_ORIGINATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultInformationMetricTypeAllowableValues()
    {
        return [
            self::DEFAULT_INFORMATION_METRIC_TYPE__1,
            self::DEFAULT_INFORMATION_METRIC_TYPE__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRfc1583CompatibleAllowableValues()
    {
        return [
            self::RFC1583_COMPATIBLE_ENABLE,
            self::RFC1583_COMPATIBLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogNeighbourChangesAllowableValues()
    {
        return [
            self::LOG_NEIGHBOUR_CHANGES_ENABLE,
            self::LOG_NEIGHBOUR_CHANGES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRestartModeAllowableValues()
    {
        return [
            self::RESTART_MODE_NONE,
            self::RESTART_MODE_LLS,
            self::RESTART_MODE_GRACEFUL_RESTART,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abr_type'] = $data['abr_type'] ?? null;
        $this->container['auto_cost_ref_bandwidth'] = $data['auto_cost_ref_bandwidth'] ?? null;
        $this->container['distance_external'] = $data['distance_external'] ?? null;
        $this->container['distance_inter_area'] = $data['distance_inter_area'] ?? null;
        $this->container['distance_intra_area'] = $data['distance_intra_area'] ?? null;
        $this->container['database_overflow'] = $data['database_overflow'] ?? null;
        $this->container['database_overflow_max_lsas'] = $data['database_overflow_max_lsas'] ?? null;
        $this->container['database_overflow_time_to_recover'] = $data['database_overflow_time_to_recover'] ?? null;
        $this->container['default_information_originate'] = $data['default_information_originate'] ?? null;
        $this->container['default_information_metric'] = $data['default_information_metric'] ?? null;
        $this->container['default_information_metric_type'] = $data['default_information_metric_type'] ?? null;
        $this->container['default_information_route_map'] = $data['default_information_route_map'] ?? null;
        $this->container['default_metric'] = $data['default_metric'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['rfc1583_compatible'] = $data['rfc1583_compatible'] ?? null;
        $this->container['router_id'] = $data['router_id'] ?? null;
        $this->container['spf_timers'] = $data['spf_timers'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['log_neighbour_changes'] = $data['log_neighbour_changes'] ?? null;
        $this->container['distribute_list_in'] = $data['distribute_list_in'] ?? null;
        $this->container['distribute_route_map_in'] = $data['distribute_route_map_in'] ?? null;
        $this->container['restart_mode'] = $data['restart_mode'] ?? null;
        $this->container['restart_period'] = $data['restart_period'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['ospf_interface'] = $data['ospf_interface'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['neighbor'] = $data['neighbor'] ?? null;
        $this->container['passive_interface'] = $data['passive_interface'] ?? null;
        $this->container['summary_address'] = $data['summary_address'] ?? null;
        $this->container['distribute_list'] = $data['distribute_list'] ?? null;
        $this->container['redistribute'] = $data['redistribute'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAbrTypeAllowableValues();
        if (!is_null($this->container['abr_type']) && !in_array($this->container['abr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'abr_type', must be one of '%s'",
                $this->container['abr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auto_cost_ref_bandwidth']) && ($this->container['auto_cost_ref_bandwidth'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'auto_cost_ref_bandwidth', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['auto_cost_ref_bandwidth']) && ($this->container['auto_cost_ref_bandwidth'] < 1)) {
            $invalidProperties[] = "invalid value for 'auto_cost_ref_bandwidth', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance_external']) && ($this->container['distance_external'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_external', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_external']) && ($this->container['distance_external'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_external', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance_inter_area']) && ($this->container['distance_inter_area'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_inter_area', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_inter_area']) && ($this->container['distance_inter_area'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_inter_area', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance_intra_area']) && ($this->container['distance_intra_area'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_intra_area', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_intra_area']) && ($this->container['distance_intra_area'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_intra_area', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDatabaseOverflowAllowableValues();
        if (!is_null($this->container['database_overflow']) && !in_array($this->container['database_overflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'database_overflow', must be one of '%s'",
                $this->container['database_overflow'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['database_overflow_max_lsas']) && ($this->container['database_overflow_max_lsas'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'database_overflow_max_lsas', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['database_overflow_max_lsas']) && ($this->container['database_overflow_max_lsas'] < 0)) {
            $invalidProperties[] = "invalid value for 'database_overflow_max_lsas', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['database_overflow_time_to_recover']) && ($this->container['database_overflow_time_to_recover'] > 65535)) {
            $invalidProperties[] = "invalid value for 'database_overflow_time_to_recover', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['database_overflow_time_to_recover']) && ($this->container['database_overflow_time_to_recover'] < 0)) {
            $invalidProperties[] = "invalid value for 'database_overflow_time_to_recover', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($this->container['default_information_originate']) && !in_array($this->container['default_information_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_information_originate', must be one of '%s'",
                $this->container['default_information_originate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_information_metric']) && ($this->container['default_information_metric'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'default_information_metric', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['default_information_metric']) && ($this->container['default_information_metric'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_information_metric', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDefaultInformationMetricTypeAllowableValues();
        if (!is_null($this->container['default_information_metric_type']) && !in_array($this->container['default_information_metric_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_information_metric_type', must be one of '%s'",
                $this->container['default_information_metric_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_information_route_map']) && (mb_strlen($this->container['default_information_route_map']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_information_route_map', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRfc1583CompatibleAllowableValues();
        if (!is_null($this->container['rfc1583_compatible']) && !in_array($this->container['rfc1583_compatible'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rfc1583_compatible', must be one of '%s'",
                $this->container['rfc1583_compatible'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($this->container['log_neighbour_changes']) && !in_array($this->container['log_neighbour_changes'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                $this->container['log_neighbour_changes'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['distribute_list_in']) && (mb_strlen($this->container['distribute_list_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_list_in', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['distribute_route_map_in']) && (mb_strlen($this->container['distribute_route_map_in']) > 35)) {
            $invalidProperties[] = "invalid value for 'distribute_route_map_in', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRestartModeAllowableValues();
        if (!is_null($this->container['restart_mode']) && !in_array($this->container['restart_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'restart_mode', must be one of '%s'",
                $this->container['restart_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['restart_period']) && ($this->container['restart_period'] > 3600)) {
            $invalidProperties[] = "invalid value for 'restart_period', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['restart_period']) && ($this->container['restart_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'restart_period', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['area']) && (count($this->container['area']) > 0)) {
            $invalidProperties[] = "invalid value for 'area', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ospf_interface']) && (count($this->container['ospf_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'ospf_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['network']) && (count($this->container['network']) > 0)) {
            $invalidProperties[] = "invalid value for 'network', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor']) && (count($this->container['neighbor']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['passive_interface']) && (count($this->container['passive_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'passive_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['summary_address']) && (count($this->container['summary_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'summary_address', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['distribute_list']) && (count($this->container['distribute_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'distribute_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute']) && (count($this->container['redistribute']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abr_type
     *
     * @return string|null
     */
    public function getAbrType()
    {
        return $this->container['abr_type'];
    }

    /**
     * Sets abr_type
     *
     * @param string|null $abr_type Area border router type.    cisco:Cisco.    ibm:IBM.    shortcut:Shortcut.    standard:Standard.
     *
     * @return self
     */
    public function setAbrType($abr_type)
    {
        $allowedValues = $this->getAbrTypeAllowableValues();
        if (!is_null($abr_type) && !in_array($abr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'abr_type', must be one of '%s'",
                    $abr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['abr_type'] = $abr_type;

        return $this;
    }

    /**
     * Gets auto_cost_ref_bandwidth
     *
     * @return int|null
     */
    public function getAutoCostRefBandwidth()
    {
        return $this->container['auto_cost_ref_bandwidth'];
    }

    /**
     * Sets auto_cost_ref_bandwidth
     *
     * @param int|null $auto_cost_ref_bandwidth Reference bandwidth in terms of megabits per second.
     *
     * @return self
     */
    public function setAutoCostRefBandwidth($auto_cost_ref_bandwidth)
    {

        if (!is_null($auto_cost_ref_bandwidth) && ($auto_cost_ref_bandwidth > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $auto_cost_ref_bandwidth when calling InlineObject167., must be smaller than or equal to 1000000.');
        }
        if (!is_null($auto_cost_ref_bandwidth) && ($auto_cost_ref_bandwidth < 1)) {
            throw new \InvalidArgumentException('invalid value for $auto_cost_ref_bandwidth when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['auto_cost_ref_bandwidth'] = $auto_cost_ref_bandwidth;

        return $this;
    }

    /**
     * Gets distance_external
     *
     * @return int|null
     */
    public function getDistanceExternal()
    {
        return $this->container['distance_external'];
    }

    /**
     * Sets distance_external
     *
     * @param int|null $distance_external Administrative external distance.
     *
     * @return self
     */
    public function setDistanceExternal($distance_external)
    {

        if (!is_null($distance_external) && ($distance_external > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_external when calling InlineObject167., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_external) && ($distance_external < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_external when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['distance_external'] = $distance_external;

        return $this;
    }

    /**
     * Gets distance_inter_area
     *
     * @return int|null
     */
    public function getDistanceInterArea()
    {
        return $this->container['distance_inter_area'];
    }

    /**
     * Sets distance_inter_area
     *
     * @param int|null $distance_inter_area Administrative inter-area distance.
     *
     * @return self
     */
    public function setDistanceInterArea($distance_inter_area)
    {

        if (!is_null($distance_inter_area) && ($distance_inter_area > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_inter_area when calling InlineObject167., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_inter_area) && ($distance_inter_area < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_inter_area when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['distance_inter_area'] = $distance_inter_area;

        return $this;
    }

    /**
     * Gets distance_intra_area
     *
     * @return int|null
     */
    public function getDistanceIntraArea()
    {
        return $this->container['distance_intra_area'];
    }

    /**
     * Sets distance_intra_area
     *
     * @param int|null $distance_intra_area Administrative intra-area distance.
     *
     * @return self
     */
    public function setDistanceIntraArea($distance_intra_area)
    {

        if (!is_null($distance_intra_area) && ($distance_intra_area > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_intra_area when calling InlineObject167., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_intra_area) && ($distance_intra_area < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_intra_area when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['distance_intra_area'] = $distance_intra_area;

        return $this;
    }

    /**
     * Gets database_overflow
     *
     * @return string|null
     */
    public function getDatabaseOverflow()
    {
        return $this->container['database_overflow'];
    }

    /**
     * Sets database_overflow
     *
     * @param string|null $database_overflow Enable/disable database overflow.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDatabaseOverflow($database_overflow)
    {
        $allowedValues = $this->getDatabaseOverflowAllowableValues();
        if (!is_null($database_overflow) && !in_array($database_overflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'database_overflow', must be one of '%s'",
                    $database_overflow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['database_overflow'] = $database_overflow;

        return $this;
    }

    /**
     * Gets database_overflow_max_lsas
     *
     * @return int|null
     */
    public function getDatabaseOverflowMaxLsas()
    {
        return $this->container['database_overflow_max_lsas'];
    }

    /**
     * Sets database_overflow_max_lsas
     *
     * @param int|null $database_overflow_max_lsas Database overflow maximum LSAs.
     *
     * @return self
     */
    public function setDatabaseOverflowMaxLsas($database_overflow_max_lsas)
    {

        if (!is_null($database_overflow_max_lsas) && ($database_overflow_max_lsas > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $database_overflow_max_lsas when calling InlineObject167., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($database_overflow_max_lsas) && ($database_overflow_max_lsas < 0)) {
            throw new \InvalidArgumentException('invalid value for $database_overflow_max_lsas when calling InlineObject167., must be bigger than or equal to 0.');
        }

        $this->container['database_overflow_max_lsas'] = $database_overflow_max_lsas;

        return $this;
    }

    /**
     * Gets database_overflow_time_to_recover
     *
     * @return int|null
     */
    public function getDatabaseOverflowTimeToRecover()
    {
        return $this->container['database_overflow_time_to_recover'];
    }

    /**
     * Sets database_overflow_time_to_recover
     *
     * @param int|null $database_overflow_time_to_recover Database overflow time to recover (sec).
     *
     * @return self
     */
    public function setDatabaseOverflowTimeToRecover($database_overflow_time_to_recover)
    {

        if (!is_null($database_overflow_time_to_recover) && ($database_overflow_time_to_recover > 65535)) {
            throw new \InvalidArgumentException('invalid value for $database_overflow_time_to_recover when calling InlineObject167., must be smaller than or equal to 65535.');
        }
        if (!is_null($database_overflow_time_to_recover) && ($database_overflow_time_to_recover < 0)) {
            throw new \InvalidArgumentException('invalid value for $database_overflow_time_to_recover when calling InlineObject167., must be bigger than or equal to 0.');
        }

        $this->container['database_overflow_time_to_recover'] = $database_overflow_time_to_recover;

        return $this;
    }

    /**
     * Gets default_information_originate
     *
     * @return string|null
     */
    public function getDefaultInformationOriginate()
    {
        return $this->container['default_information_originate'];
    }

    /**
     * Sets default_information_originate
     *
     * @param string|null $default_information_originate Enable/disable generation of default route.    enable:Enable setting.    always:Always advertise the default router.    disable:Disable setting.
     *
     * @return self
     */
    public function setDefaultInformationOriginate($default_information_originate)
    {
        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($default_information_originate) && !in_array($default_information_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_information_originate', must be one of '%s'",
                    $default_information_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_information_originate'] = $default_information_originate;

        return $this;
    }

    /**
     * Gets default_information_metric
     *
     * @return int|null
     */
    public function getDefaultInformationMetric()
    {
        return $this->container['default_information_metric'];
    }

    /**
     * Sets default_information_metric
     *
     * @param int|null $default_information_metric Default information metric.
     *
     * @return self
     */
    public function setDefaultInformationMetric($default_information_metric)
    {

        if (!is_null($default_information_metric) && ($default_information_metric > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $default_information_metric when calling InlineObject167., must be smaller than or equal to 16777214.');
        }
        if (!is_null($default_information_metric) && ($default_information_metric < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_information_metric when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['default_information_metric'] = $default_information_metric;

        return $this;
    }

    /**
     * Gets default_information_metric_type
     *
     * @return string|null
     */
    public function getDefaultInformationMetricType()
    {
        return $this->container['default_information_metric_type'];
    }

    /**
     * Sets default_information_metric_type
     *
     * @param string|null $default_information_metric_type Default information metric type.    1:Type 1.    2:Type 2.
     *
     * @return self
     */
    public function setDefaultInformationMetricType($default_information_metric_type)
    {
        $allowedValues = $this->getDefaultInformationMetricTypeAllowableValues();
        if (!is_null($default_information_metric_type) && !in_array($default_information_metric_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_information_metric_type', must be one of '%s'",
                    $default_information_metric_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_information_metric_type'] = $default_information_metric_type;

        return $this;
    }

    /**
     * Gets default_information_route_map
     *
     * @return string|null
     */
    public function getDefaultInformationRouteMap()
    {
        return $this->container['default_information_route_map'];
    }

    /**
     * Sets default_information_route_map
     *
     * @param string|null $default_information_route_map Default information route map.
     *
     * @return self
     */
    public function setDefaultInformationRouteMap($default_information_route_map)
    {
        if (!is_null($default_information_route_map) && (mb_strlen($default_information_route_map) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_information_route_map when calling InlineObject167., must be smaller than or equal to 35.');
        }

        $this->container['default_information_route_map'] = $default_information_route_map;

        return $this;
    }

    /**
     * Gets default_metric
     *
     * @return int|null
     */
    public function getDefaultMetric()
    {
        return $this->container['default_metric'];
    }

    /**
     * Sets default_metric
     *
     * @param int|null $default_metric Default metric of redistribute routes.
     *
     * @return self
     */
    public function setDefaultMetric($default_metric)
    {

        if (!is_null($default_metric) && ($default_metric > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject167., must be smaller than or equal to 16777214.');
        }
        if (!is_null($default_metric) && ($default_metric < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['default_metric'] = $default_metric;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Distance of the route.
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject167., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets rfc1583_compatible
     *
     * @return string|null
     */
    public function getRfc1583Compatible()
    {
        return $this->container['rfc1583_compatible'];
    }

    /**
     * Sets rfc1583_compatible
     *
     * @param string|null $rfc1583_compatible Enable/disable RFC1583 compatibility.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRfc1583Compatible($rfc1583_compatible)
    {
        $allowedValues = $this->getRfc1583CompatibleAllowableValues();
        if (!is_null($rfc1583_compatible) && !in_array($rfc1583_compatible, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rfc1583_compatible', must be one of '%s'",
                    $rfc1583_compatible,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rfc1583_compatible'] = $rfc1583_compatible;

        return $this;
    }

    /**
     * Gets router_id
     *
     * @return string|null
     */
    public function getRouterId()
    {
        return $this->container['router_id'];
    }

    /**
     * Sets router_id
     *
     * @param string|null $router_id Router ID.
     *
     * @return self
     */
    public function setRouterId($router_id)
    {
        $this->container['router_id'] = $router_id;

        return $this;
    }

    /**
     * Gets spf_timers
     *
     * @return string|null
     */
    public function getSpfTimers()
    {
        return $this->container['spf_timers'];
    }

    /**
     * Sets spf_timers
     *
     * @param string|null $spf_timers SPF calculation frequency.
     *
     * @return self
     */
    public function setSpfTimers($spf_timers)
    {
        $this->container['spf_timers'] = $spf_timers;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Bidirectional Forwarding Detection (BFD).    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets log_neighbour_changes
     *
     * @return string|null
     */
    public function getLogNeighbourChanges()
    {
        return $this->container['log_neighbour_changes'];
    }

    /**
     * Sets log_neighbour_changes
     *
     * @param string|null $log_neighbour_changes Enable logging of OSPF neighbour's changes    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLogNeighbourChanges($log_neighbour_changes)
    {
        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($log_neighbour_changes) && !in_array($log_neighbour_changes, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                    $log_neighbour_changes,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_neighbour_changes'] = $log_neighbour_changes;

        return $this;
    }

    /**
     * Gets distribute_list_in
     *
     * @return string|null
     */
    public function getDistributeListIn()
    {
        return $this->container['distribute_list_in'];
    }

    /**
     * Sets distribute_list_in
     *
     * @param string|null $distribute_list_in Filter incoming routes.
     *
     * @return self
     */
    public function setDistributeListIn($distribute_list_in)
    {
        if (!is_null($distribute_list_in) && (mb_strlen($distribute_list_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_list_in when calling InlineObject167., must be smaller than or equal to 35.');
        }

        $this->container['distribute_list_in'] = $distribute_list_in;

        return $this;
    }

    /**
     * Gets distribute_route_map_in
     *
     * @return string|null
     */
    public function getDistributeRouteMapIn()
    {
        return $this->container['distribute_route_map_in'];
    }

    /**
     * Sets distribute_route_map_in
     *
     * @param string|null $distribute_route_map_in Filter incoming external routes by route-map.
     *
     * @return self
     */
    public function setDistributeRouteMapIn($distribute_route_map_in)
    {
        if (!is_null($distribute_route_map_in) && (mb_strlen($distribute_route_map_in) > 35)) {
            throw new \InvalidArgumentException('invalid length for $distribute_route_map_in when calling InlineObject167., must be smaller than or equal to 35.');
        }

        $this->container['distribute_route_map_in'] = $distribute_route_map_in;

        return $this;
    }

    /**
     * Gets restart_mode
     *
     * @return string|null
     */
    public function getRestartMode()
    {
        return $this->container['restart_mode'];
    }

    /**
     * Sets restart_mode
     *
     * @param string|null $restart_mode OSPF restart mode (graceful or LLS).    none:Hitless restart disabled.    lls:LLS mode.    graceful-restart:Graceful Restart Mode.
     *
     * @return self
     */
    public function setRestartMode($restart_mode)
    {
        $allowedValues = $this->getRestartModeAllowableValues();
        if (!is_null($restart_mode) && !in_array($restart_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'restart_mode', must be one of '%s'",
                    $restart_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['restart_mode'] = $restart_mode;

        return $this;
    }

    /**
     * Gets restart_period
     *
     * @return int|null
     */
    public function getRestartPeriod()
    {
        return $this->container['restart_period'];
    }

    /**
     * Sets restart_period
     *
     * @param int|null $restart_period Graceful restart period.
     *
     * @return self
     */
    public function setRestartPeriod($restart_period)
    {

        if (!is_null($restart_period) && ($restart_period > 3600)) {
            throw new \InvalidArgumentException('invalid value for $restart_period when calling InlineObject167., must be smaller than or equal to 3600.');
        }
        if (!is_null($restart_period) && ($restart_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $restart_period when calling InlineObject167., must be bigger than or equal to 1.');
        }

        $this->container['restart_period'] = $restart_period;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfArea[]|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfArea[]|null $area OSPF area configuration.
     *
     * @return self
     */
    public function setArea($area)
    {

        if (!is_null($area) && (count($area) > 0)) {
            throw new \InvalidArgumentException('invalid value for $area when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets ospf_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfOspfInterface[]|null
     */
    public function getOspfInterface()
    {
        return $this->container['ospf_interface'];
    }

    /**
     * Sets ospf_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfOspfInterface[]|null $ospf_interface OSPF interface configuration.
     *
     * @return self
     */
    public function setOspfInterface($ospf_interface)
    {

        if (!is_null($ospf_interface) && (count($ospf_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ospf_interface when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['ospf_interface'] = $ospf_interface;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfNetwork[]|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfNetwork[]|null $network OSPF network configuration.
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if (!is_null($network) && (count($network) > 0)) {
            throw new \InvalidArgumentException('invalid value for $network when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets neighbor
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfNeighbor[]|null
     */
    public function getNeighbor()
    {
        return $this->container['neighbor'];
    }

    /**
     * Sets neighbor
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfNeighbor[]|null $neighbor OSPF neighbor configuration are used when OSPF runs on non-broadcast media
     *
     * @return self
     */
    public function setNeighbor($neighbor)
    {

        if (!is_null($neighbor) && (count($neighbor) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor'] = $neighbor;

        return $this;
    }

    /**
     * Gets passive_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null
     */
    public function getPassiveInterface()
    {
        return $this->container['passive_interface'];
    }

    /**
     * Sets passive_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null $passive_interface Passive interface configuration.
     *
     * @return self
     */
    public function setPassiveInterface($passive_interface)
    {

        if (!is_null($passive_interface) && (count($passive_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $passive_interface when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['passive_interface'] = $passive_interface;

        return $this;
    }

    /**
     * Gets summary_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfSummaryAddress[]|null
     */
    public function getSummaryAddress()
    {
        return $this->container['summary_address'];
    }

    /**
     * Sets summary_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfSummaryAddress[]|null $summary_address IP address summary configuration.
     *
     * @return self
     */
    public function setSummaryAddress($summary_address)
    {

        if (!is_null($summary_address) && (count($summary_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $summary_address when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['summary_address'] = $summary_address;

        return $this;
    }

    /**
     * Gets distribute_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfDistributeList[]|null
     */
    public function getDistributeList()
    {
        return $this->container['distribute_list'];
    }

    /**
     * Sets distribute_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfDistributeList[]|null $distribute_list Distribute list configuration.
     *
     * @return self
     */
    public function setDistributeList($distribute_list)
    {

        if (!is_null($distribute_list) && (count($distribute_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $distribute_list when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['distribute_list'] = $distribute_list;

        return $this;
    }

    /**
     * Gets redistribute
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfRedistribute[]|null
     */
    public function getRedistribute()
    {
        return $this->container['redistribute'];
    }

    /**
     * Sets redistribute
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfRedistribute[]|null $redistribute Redistribute configuration.
     *
     * @return self
     */
    public function setRedistribute($redistribute)
    {

        if (!is_null($redistribute) && (count($redistribute) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute when calling InlineObject167., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute'] = $redistribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


