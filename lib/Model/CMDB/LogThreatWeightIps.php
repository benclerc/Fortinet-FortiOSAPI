<?php
/**
 * LogThreatWeightIps
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * LogThreatWeightIps Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LogThreatWeightIps implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_log_threat_weight_ips';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'info_severity' => 'string',
        'low_severity' => 'string',
        'medium_severity' => 'string',
        'high_severity' => 'string',
        'critical_severity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'info_severity' => null,
        'low_severity' => null,
        'medium_severity' => null,
        'high_severity' => null,
        'critical_severity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'info_severity' => 'info-severity',
        'low_severity' => 'low-severity',
        'medium_severity' => 'medium-severity',
        'high_severity' => 'high-severity',
        'critical_severity' => 'critical-severity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'info_severity' => 'setInfoSeverity',
        'low_severity' => 'setLowSeverity',
        'medium_severity' => 'setMediumSeverity',
        'high_severity' => 'setHighSeverity',
        'critical_severity' => 'setCriticalSeverity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'info_severity' => 'getInfoSeverity',
        'low_severity' => 'getLowSeverity',
        'medium_severity' => 'getMediumSeverity',
        'high_severity' => 'getHighSeverity',
        'critical_severity' => 'getCriticalSeverity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INFO_SEVERITY_DISABLE = 'disable';
    const INFO_SEVERITY_LOW = 'low';
    const INFO_SEVERITY_MEDIUM = 'medium';
    const INFO_SEVERITY_HIGH = 'high';
    const INFO_SEVERITY_CRITICAL = 'critical';
    const LOW_SEVERITY_DISABLE = 'disable';
    const LOW_SEVERITY_LOW = 'low';
    const LOW_SEVERITY_MEDIUM = 'medium';
    const LOW_SEVERITY_HIGH = 'high';
    const LOW_SEVERITY_CRITICAL = 'critical';
    const MEDIUM_SEVERITY_DISABLE = 'disable';
    const MEDIUM_SEVERITY_LOW = 'low';
    const MEDIUM_SEVERITY_MEDIUM = 'medium';
    const MEDIUM_SEVERITY_HIGH = 'high';
    const MEDIUM_SEVERITY_CRITICAL = 'critical';
    const HIGH_SEVERITY_DISABLE = 'disable';
    const HIGH_SEVERITY_LOW = 'low';
    const HIGH_SEVERITY_MEDIUM = 'medium';
    const HIGH_SEVERITY_HIGH = 'high';
    const HIGH_SEVERITY_CRITICAL = 'critical';
    const CRITICAL_SEVERITY_DISABLE = 'disable';
    const CRITICAL_SEVERITY_LOW = 'low';
    const CRITICAL_SEVERITY_MEDIUM = 'medium';
    const CRITICAL_SEVERITY_HIGH = 'high';
    const CRITICAL_SEVERITY_CRITICAL = 'critical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInfoSeverityAllowableValues()
    {
        return [
            self::INFO_SEVERITY_DISABLE,
            self::INFO_SEVERITY_LOW,
            self::INFO_SEVERITY_MEDIUM,
            self::INFO_SEVERITY_HIGH,
            self::INFO_SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLowSeverityAllowableValues()
    {
        return [
            self::LOW_SEVERITY_DISABLE,
            self::LOW_SEVERITY_LOW,
            self::LOW_SEVERITY_MEDIUM,
            self::LOW_SEVERITY_HIGH,
            self::LOW_SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediumSeverityAllowableValues()
    {
        return [
            self::MEDIUM_SEVERITY_DISABLE,
            self::MEDIUM_SEVERITY_LOW,
            self::MEDIUM_SEVERITY_MEDIUM,
            self::MEDIUM_SEVERITY_HIGH,
            self::MEDIUM_SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHighSeverityAllowableValues()
    {
        return [
            self::HIGH_SEVERITY_DISABLE,
            self::HIGH_SEVERITY_LOW,
            self::HIGH_SEVERITY_MEDIUM,
            self::HIGH_SEVERITY_HIGH,
            self::HIGH_SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCriticalSeverityAllowableValues()
    {
        return [
            self::CRITICAL_SEVERITY_DISABLE,
            self::CRITICAL_SEVERITY_LOW,
            self::CRITICAL_SEVERITY_MEDIUM,
            self::CRITICAL_SEVERITY_HIGH,
            self::CRITICAL_SEVERITY_CRITICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['info_severity'] = $data['info_severity'] ?? null;
        $this->container['low_severity'] = $data['low_severity'] ?? null;
        $this->container['medium_severity'] = $data['medium_severity'] ?? null;
        $this->container['high_severity'] = $data['high_severity'] ?? null;
        $this->container['critical_severity'] = $data['critical_severity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInfoSeverityAllowableValues();
        if (!is_null($this->container['info_severity']) && !in_array($this->container['info_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'info_severity', must be one of '%s'",
                $this->container['info_severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLowSeverityAllowableValues();
        if (!is_null($this->container['low_severity']) && !in_array($this->container['low_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'low_severity', must be one of '%s'",
                $this->container['low_severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediumSeverityAllowableValues();
        if (!is_null($this->container['medium_severity']) && !in_array($this->container['medium_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'medium_severity', must be one of '%s'",
                $this->container['medium_severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHighSeverityAllowableValues();
        if (!is_null($this->container['high_severity']) && !in_array($this->container['high_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'high_severity', must be one of '%s'",
                $this->container['high_severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCriticalSeverityAllowableValues();
        if (!is_null($this->container['critical_severity']) && !in_array($this->container['critical_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'critical_severity', must be one of '%s'",
                $this->container['critical_severity'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets info_severity
     *
     * @return string|null
     */
    public function getInfoSeverity()
    {
        return $this->container['info_severity'];
    }

    /**
     * Sets info_severity
     *
     * @param string|null $info_severity Threat weight score for IPS info severity events.    disable:Disable threat weight scoring for IPS info severity events.    low:Use the low level score for IPS info severity events.    medium:Use the medium level score for IPS info severity events.    high:Use the high level score for IPS info severity events.    critical:Use the critical level score for IPS info severity events.
     *
     * @return self
     */
    public function setInfoSeverity($info_severity)
    {
        $allowedValues = $this->getInfoSeverityAllowableValues();
        if (!is_null($info_severity) && !in_array($info_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'info_severity', must be one of '%s'",
                    $info_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['info_severity'] = $info_severity;

        return $this;
    }

    /**
     * Gets low_severity
     *
     * @return string|null
     */
    public function getLowSeverity()
    {
        return $this->container['low_severity'];
    }

    /**
     * Sets low_severity
     *
     * @param string|null $low_severity Threat weight score for IPS low severity events.    disable:Disable threat weight scoring for IPS low severity events.    low:Use the low level score for IPS low severity events.    medium:Use the medium level score for IPS low severity events.    high:Use the high level score for IPS low severity events.    critical:Use the critical level score for IPS low severity events.
     *
     * @return self
     */
    public function setLowSeverity($low_severity)
    {
        $allowedValues = $this->getLowSeverityAllowableValues();
        if (!is_null($low_severity) && !in_array($low_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'low_severity', must be one of '%s'",
                    $low_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['low_severity'] = $low_severity;

        return $this;
    }

    /**
     * Gets medium_severity
     *
     * @return string|null
     */
    public function getMediumSeverity()
    {
        return $this->container['medium_severity'];
    }

    /**
     * Sets medium_severity
     *
     * @param string|null $medium_severity Threat weight score for IPS medium severity events.    disable:Disable threat weight scoring for IPS medium severity events.    low:Use the low level score for IPS medium severity events.    medium:Use the medium level score for IPS medium severity events.    high:Use the high level score for IPS medium severity events.    critical:Use the critical level score for IPS medium severity events.
     *
     * @return self
     */
    public function setMediumSeverity($medium_severity)
    {
        $allowedValues = $this->getMediumSeverityAllowableValues();
        if (!is_null($medium_severity) && !in_array($medium_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'medium_severity', must be one of '%s'",
                    $medium_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['medium_severity'] = $medium_severity;

        return $this;
    }

    /**
     * Gets high_severity
     *
     * @return string|null
     */
    public function getHighSeverity()
    {
        return $this->container['high_severity'];
    }

    /**
     * Sets high_severity
     *
     * @param string|null $high_severity Threat weight score for IPS high severity events.    disable:Disable threat weight scoring for IPS high severity events.    low:Use the low level score for IPS high severity events.    medium:Use the medium level score for IPS high severity events.    high:Use the high level score for IPS high severity events.    critical:Use the critical level score for IPS high severity events.
     *
     * @return self
     */
    public function setHighSeverity($high_severity)
    {
        $allowedValues = $this->getHighSeverityAllowableValues();
        if (!is_null($high_severity) && !in_array($high_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'high_severity', must be one of '%s'",
                    $high_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['high_severity'] = $high_severity;

        return $this;
    }

    /**
     * Gets critical_severity
     *
     * @return string|null
     */
    public function getCriticalSeverity()
    {
        return $this->container['critical_severity'];
    }

    /**
     * Sets critical_severity
     *
     * @param string|null $critical_severity Threat weight score for IPS critical severity events.    disable:Disable threat weight scoring for IPS critical severity events.    low:Use the low level score for IPS critical severity events.    medium:Use the medium level score for IPS critical severity events.    high:Use the high level score for IPS critical severity events.    critical:Use the critical level score for IPS critical severity events.
     *
     * @return self
     */
    public function setCriticalSeverity($critical_severity)
    {
        $allowedValues = $this->getCriticalSeverityAllowableValues();
        if (!is_null($critical_severity) && !in_array($critical_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'critical_severity', must be one of '%s'",
                    $critical_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['critical_severity'] = $critical_severity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


