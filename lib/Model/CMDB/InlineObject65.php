<?php
/**
 * InlineObject65
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject65 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject65 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_65';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'feature_set' => 'string',
        'replacemsg_group' => 'string',
        'log' => 'string',
        'extended_log' => 'string',
        'scan_archive_contents' => 'string',
        'rules' => '\Fortigate\FortiOS\Model\CMDB\FileFilterProfileNameRules[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'feature_set' => null,
        'replacemsg_group' => null,
        'log' => null,
        'extended_log' => null,
        'scan_archive_contents' => null,
        'rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'feature_set' => 'feature-set',
        'replacemsg_group' => 'replacemsg-group',
        'log' => 'log',
        'extended_log' => 'extended-log',
        'scan_archive_contents' => 'scan-archive-contents',
        'rules' => 'rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'feature_set' => 'setFeatureSet',
        'replacemsg_group' => 'setReplacemsgGroup',
        'log' => 'setLog',
        'extended_log' => 'setExtendedLog',
        'scan_archive_contents' => 'setScanArchiveContents',
        'rules' => 'setRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'feature_set' => 'getFeatureSet',
        'replacemsg_group' => 'getReplacemsgGroup',
        'log' => 'getLog',
        'extended_log' => 'getExtendedLog',
        'scan_archive_contents' => 'getScanArchiveContents',
        'rules' => 'getRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FEATURE_SET_FLOW = 'flow';
    const FEATURE_SET_PROXY = 'proxy';
    const LOG_DISABLE = 'disable';
    const LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    const EXTENDED_LOG_ENABLE = 'enable';
    const SCAN_ARCHIVE_CONTENTS_DISABLE = 'disable';
    const SCAN_ARCHIVE_CONTENTS_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureSetAllowableValues()
    {
        return [
            self::FEATURE_SET_FLOW,
            self::FEATURE_SET_PROXY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllowableValues()
    {
        return [
            self::LOG_DISABLE,
            self::LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_DISABLE,
            self::EXTENDED_LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanArchiveContentsAllowableValues()
    {
        return [
            self::SCAN_ARCHIVE_CONTENTS_DISABLE,
            self::SCAN_ARCHIVE_CONTENTS_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['feature_set'] = $data['feature_set'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['scan_archive_contents'] = $data['scan_archive_contents'] ?? null;
        $this->container['rules'] = $data['rules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($this->container['feature_set']) && !in_array($this->container['feature_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature_set', must be one of '%s'",
                $this->container['feature_set'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($this->container['log']) && !in_array($this->container['log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log', must be one of '%s'",
                $this->container['log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScanArchiveContentsAllowableValues();
        if (!is_null($this->container['scan_archive_contents']) && !in_array($this->container['scan_archive_contents'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scan_archive_contents', must be one of '%s'",
                $this->container['scan_archive_contents'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rules']) && (count($this->container['rules']) > 2000)) {
            $invalidProperties[] = "invalid value for 'rules', number of items must be less than or equal to 2000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject65., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject65., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return string|null
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param string|null $feature_set Flow/proxy feature set.    flow:Flow feature set.    proxy:Proxy feature set.
     *
     * @return self
     */
    public function setFeatureSet($feature_set)
    {
        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($feature_set) && !in_array($feature_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature_set', must be one of '%s'",
                    $feature_set,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject65., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string|null $log Enable/disable file-filter logging.    disable:Disable logging.    enable:Enable logging.
     *
     * @return self
     */
    public function setLog($log)
    {
        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($log) && !in_array($log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log', must be one of '%s'",
                    $log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable file-filter extended logging.    disable:Disable extended logging.    enable:Enable extended logging.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets scan_archive_contents
     *
     * @return string|null
     */
    public function getScanArchiveContents()
    {
        return $this->container['scan_archive_contents'];
    }

    /**
     * Sets scan_archive_contents
     *
     * @param string|null $scan_archive_contents Enable/disable archive contents scan. (Not for CIFS)    disable:Disable scanning archive contents.    enable:Enable scanning archive contents.
     *
     * @return self
     */
    public function setScanArchiveContents($scan_archive_contents)
    {
        $allowedValues = $this->getScanArchiveContentsAllowableValues();
        if (!is_null($scan_archive_contents) && !in_array($scan_archive_contents, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scan_archive_contents', must be one of '%s'",
                    $scan_archive_contents,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_archive_contents'] = $scan_archive_contents;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\FileFilterProfileNameRules[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\FileFilterProfileNameRules[]|null $rules File filter rules.
     *
     * @return self
     */
    public function setRules($rules)
    {

        if (!is_null($rules) && (count($rules) > 2000)) {
            throw new \InvalidArgumentException('invalid value for $rules when calling InlineObject65., number of items must be less than or equal to 2000.');
        }
        $this->container['rules'] = $rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


