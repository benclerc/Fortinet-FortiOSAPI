<?php
/**
 * InlineObject39
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject39 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject39 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_39';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'storage_device' => 'string',
        'size' => 'int',
        'db_mode' => 'string',
        'cache_mem_percent' => 'int',
        'chunk_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'storage_device' => null,
        'size' => null,
        'db_mode' => null,
        'cache_mem_percent' => null,
        'chunk_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storage_device' => 'storage-device',
        'size' => 'size',
        'db_mode' => 'db-mode',
        'cache_mem_percent' => 'cache-mem-percent',
        'chunk_size' => 'chunk-size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storage_device' => 'setStorageDevice',
        'size' => 'setSize',
        'db_mode' => 'setDbMode',
        'cache_mem_percent' => 'setCacheMemPercent',
        'chunk_size' => 'setChunkSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storage_device' => 'getStorageDevice',
        'size' => 'getSize',
        'db_mode' => 'getDbMode',
        'cache_mem_percent' => 'getCacheMemPercent',
        'chunk_size' => 'getChunkSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DB_MODE_STOP_ADDING = 'stop-adding';
    const DB_MODE_REMOVE_MODIFIED_THEN_OLDEST = 'remove-modified-then-oldest';
    const DB_MODE_REMOVE_OLDEST = 'remove-oldest';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDbModeAllowableValues()
    {
        return [
            self::DB_MODE_STOP_ADDING,
            self::DB_MODE_REMOVE_MODIFIED_THEN_OLDEST,
            self::DB_MODE_REMOVE_OLDEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storage_device'] = $data['storage_device'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['db_mode'] = $data['db_mode'] ?? null;
        $this->container['cache_mem_percent'] = $data['cache_mem_percent'] ?? null;
        $this->container['chunk_size'] = $data['chunk_size'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['storage_device']) && (mb_strlen($this->container['storage_device']) > 35)) {
            $invalidProperties[] = "invalid value for 'storage_device', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] < 16)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 16.";
        }

        $allowedValues = $this->getDbModeAllowableValues();
        if (!is_null($this->container['db_mode']) && !in_array($this->container['db_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'db_mode', must be one of '%s'",
                $this->container['db_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cache_mem_percent']) && ($this->container['cache_mem_percent'] > 15)) {
            $invalidProperties[] = "invalid value for 'cache_mem_percent', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['cache_mem_percent']) && ($this->container['cache_mem_percent'] < 1)) {
            $invalidProperties[] = "invalid value for 'cache_mem_percent', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['chunk_size']) && ($this->container['chunk_size'] > 100000)) {
            $invalidProperties[] = "invalid value for 'chunk_size', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['chunk_size']) && ($this->container['chunk_size'] < 100)) {
            $invalidProperties[] = "invalid value for 'chunk_size', must be bigger than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storage_device
     *
     * @return string|null
     */
    public function getStorageDevice()
    {
        return $this->container['storage_device'];
    }

    /**
     * Sets storage_device
     *
     * @param string|null $storage_device Storage device name.
     *
     * @return self
     */
    public function setStorageDevice($storage_device)
    {
        if (!is_null($storage_device) && (mb_strlen($storage_device) > 35)) {
            throw new \InvalidArgumentException('invalid length for $storage_device when calling InlineObject39., must be smaller than or equal to 35.');
        }

        $this->container['storage_device'] = $storage_device;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Maximum total size of files within the storage (MB).
     *
     * @return self
     */
    public function setSize($size)
    {

        if (!is_null($size) && ($size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $size when calling InlineObject39., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($size) && ($size < 16)) {
            throw new \InvalidArgumentException('invalid value for $size when calling InlineObject39., must be bigger than or equal to 16.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets db_mode
     *
     * @return string|null
     */
    public function getDbMode()
    {
        return $this->container['db_mode'];
    }

    /**
     * Sets db_mode
     *
     * @param string|null $db_mode Behaviour when the maximum size is reached.    stop-adding:Stop adding entries.    remove-modified-then-oldest:Remove modified chunks first, then oldest file entries.    remove-oldest:Remove the oldest files first.
     *
     * @return self
     */
    public function setDbMode($db_mode)
    {
        $allowedValues = $this->getDbModeAllowableValues();
        if (!is_null($db_mode) && !in_array($db_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'db_mode', must be one of '%s'",
                    $db_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['db_mode'] = $db_mode;

        return $this;
    }

    /**
     * Gets cache_mem_percent
     *
     * @return int|null
     */
    public function getCacheMemPercent()
    {
        return $this->container['cache_mem_percent'];
    }

    /**
     * Sets cache_mem_percent
     *
     * @param int|null $cache_mem_percent Maximum percentage of available memory allocated to caching (1 - 15%).
     *
     * @return self
     */
    public function setCacheMemPercent($cache_mem_percent)
    {

        if (!is_null($cache_mem_percent) && ($cache_mem_percent > 15)) {
            throw new \InvalidArgumentException('invalid value for $cache_mem_percent when calling InlineObject39., must be smaller than or equal to 15.');
        }
        if (!is_null($cache_mem_percent) && ($cache_mem_percent < 1)) {
            throw new \InvalidArgumentException('invalid value for $cache_mem_percent when calling InlineObject39., must be bigger than or equal to 1.');
        }

        $this->container['cache_mem_percent'] = $cache_mem_percent;

        return $this;
    }

    /**
     * Gets chunk_size
     *
     * @return int|null
     */
    public function getChunkSize()
    {
        return $this->container['chunk_size'];
    }

    /**
     * Sets chunk_size
     *
     * @param int|null $chunk_size Maximum fingerprint chunk size.  **Changing will flush the entire database**.
     *
     * @return self
     */
    public function setChunkSize($chunk_size)
    {

        if (!is_null($chunk_size) && ($chunk_size > 100000)) {
            throw new \InvalidArgumentException('invalid value for $chunk_size when calling InlineObject39., must be smaller than or equal to 100000.');
        }
        if (!is_null($chunk_size) && ($chunk_size < 100)) {
            throw new \InvalidArgumentException('invalid value for $chunk_size when calling InlineObject39., must be bigger than or equal to 100.');
        }

        $this->container['chunk_size'] = $chunk_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


