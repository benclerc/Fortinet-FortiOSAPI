<?php
/**
 * WebfilterUrlfilterIdEntries
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebfilterUrlfilterIdEntries Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebfilterUrlfilterIdEntries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_webfilter_urlfilter__id__entries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'type' => 'string',
        'action' => 'string',
        'antiphish_action' => 'string',
        'status' => 'string',
        'exempt' => 'string',
        'web_proxy_profile' => 'string',
        'referrer_host' => 'string',
        'dns_address_family' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => null,
        'type' => null,
        'action' => null,
        'antiphish_action' => null,
        'status' => null,
        'exempt' => null,
        'web_proxy_profile' => null,
        'referrer_host' => null,
        'dns_address_family' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'type' => 'type',
        'action' => 'action',
        'antiphish_action' => 'antiphish-action',
        'status' => 'status',
        'exempt' => 'exempt',
        'web_proxy_profile' => 'web-proxy-profile',
        'referrer_host' => 'referrer-host',
        'dns_address_family' => 'dns-address-family'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'type' => 'setType',
        'action' => 'setAction',
        'antiphish_action' => 'setAntiphishAction',
        'status' => 'setStatus',
        'exempt' => 'setExempt',
        'web_proxy_profile' => 'setWebProxyProfile',
        'referrer_host' => 'setReferrerHost',
        'dns_address_family' => 'setDnsAddressFamily'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'type' => 'getType',
        'action' => 'getAction',
        'antiphish_action' => 'getAntiphishAction',
        'status' => 'getStatus',
        'exempt' => 'getExempt',
        'web_proxy_profile' => 'getWebProxyProfile',
        'referrer_host' => 'getReferrerHost',
        'dns_address_family' => 'getDnsAddressFamily'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SIMPLE = 'simple';
    const TYPE_REGEX = 'regex';
    const TYPE_WILDCARD = 'wildcard';
    const ACTION_EXEMPT = 'exempt';
    const ACTION_BLOCK = 'block';
    const ACTION_ALLOW = 'allow';
    const ACTION_MONITOR = 'monitor';
    const ANTIPHISH_ACTION_BLOCK = 'block';
    const ANTIPHISH_ACTION_LOG = 'log';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const EXEMPT_AV = 'av';
    const EXEMPT_WEB_CONTENT = 'web-content';
    const EXEMPT_ACTIVEX_JAVA_COOKIE = 'activex-java-cookie';
    const EXEMPT_DLP = 'dlp';
    const EXEMPT_FORTIGUARD = 'fortiguard';
    const EXEMPT_RANGE_BLOCK = 'range-block';
    const EXEMPT_PASS = 'pass';
    const EXEMPT_ANTIPHISH = 'antiphish';
    const EXEMPT_ALL = 'all';
    const DNS_ADDRESS_FAMILY_IPV4 = 'ipv4';
    const DNS_ADDRESS_FAMILY_IPV6 = 'ipv6';
    const DNS_ADDRESS_FAMILY_BOTH = 'both';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SIMPLE,
            self::TYPE_REGEX,
            self::TYPE_WILDCARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_EXEMPT,
            self::ACTION_BLOCK,
            self::ACTION_ALLOW,
            self::ACTION_MONITOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAntiphishActionAllowableValues()
    {
        return [
            self::ANTIPHISH_ACTION_BLOCK,
            self::ANTIPHISH_ACTION_LOG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptAllowableValues()
    {
        return [
            self::EXEMPT_AV,
            self::EXEMPT_WEB_CONTENT,
            self::EXEMPT_ACTIVEX_JAVA_COOKIE,
            self::EXEMPT_DLP,
            self::EXEMPT_FORTIGUARD,
            self::EXEMPT_RANGE_BLOCK,
            self::EXEMPT_PASS,
            self::EXEMPT_ANTIPHISH,
            self::EXEMPT_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsAddressFamilyAllowableValues()
    {
        return [
            self::DNS_ADDRESS_FAMILY_IPV4,
            self::DNS_ADDRESS_FAMILY_IPV6,
            self::DNS_ADDRESS_FAMILY_BOTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['antiphish_action'] = $data['antiphish_action'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['exempt'] = $data['exempt'] ?? null;
        $this->container['web_proxy_profile'] = $data['web_proxy_profile'] ?? null;
        $this->container['referrer_host'] = $data['referrer_host'] ?? null;
        $this->container['dns_address_family'] = $data['dns_address_family'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 511)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 511.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAntiphishActionAllowableValues();
        if (!is_null($this->container['antiphish_action']) && !in_array($this->container['antiphish_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'antiphish_action', must be one of '%s'",
                $this->container['antiphish_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExemptAllowableValues();
        if (!is_null($this->container['exempt']) && !in_array($this->container['exempt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exempt', must be one of '%s'",
                $this->container['exempt'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['web_proxy_profile']) && (mb_strlen($this->container['web_proxy_profile']) > 63)) {
            $invalidProperties[] = "invalid value for 'web_proxy_profile', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['referrer_host']) && (mb_strlen($this->container['referrer_host']) > 255)) {
            $invalidProperties[] = "invalid value for 'referrer_host', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getDnsAddressFamilyAllowableValues();
        if (!is_null($this->container['dns_address_family']) && !in_array($this->container['dns_address_family'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_address_family', must be one of '%s'",
                $this->container['dns_address_family'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Id.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling WebfilterUrlfilterIdEntries., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling WebfilterUrlfilterIdEntries., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL to be filtered.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 511)) {
            throw new \InvalidArgumentException('invalid length for $url when calling WebfilterUrlfilterIdEntries., must be smaller than or equal to 511.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Filter type (simple, regex, or wildcard).    simple:Simple URL string.    regex:Regular expression URL string.    wildcard:Wildcard URL string.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action to take for URL filter matches.    exempt:Exempt matches.    block:Block matches.    allow:Allow matches (no log).    monitor:Allow matches (with log).
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets antiphish_action
     *
     * @return string|null
     */
    public function getAntiphishAction()
    {
        return $this->container['antiphish_action'];
    }

    /**
     * Sets antiphish_action
     *
     * @param string|null $antiphish_action Action to take for AntiPhishing matches.    block:Block matches.    log:Allow matches with log.
     *
     * @return self
     */
    public function setAntiphishAction($antiphish_action)
    {
        $allowedValues = $this->getAntiphishActionAllowableValues();
        if (!is_null($antiphish_action) && !in_array($antiphish_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'antiphish_action', must be one of '%s'",
                    $antiphish_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['antiphish_action'] = $antiphish_action;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this URL filter.    enable:Enable this URL filter.    disable:Disable this URL filter.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets exempt
     *
     * @return string|null
     */
    public function getExempt()
    {
        return $this->container['exempt'];
    }

    /**
     * Sets exempt
     *
     * @param string|null $exempt If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.    av:AntiVirus scanning.    web-content:Web filter content matching.    activex-java-cookie:ActiveX, Java, and cookie filtering.    dlp:DLP scanning.    fortiguard:FortiGuard web filtering.    range-block:Range block feature.    pass:Pass single connection from all.    antiphish:AntiPhish credential checking.    all:Exempt from all security profiles.
     *
     * @return self
     */
    public function setExempt($exempt)
    {
        $allowedValues = $this->getExemptAllowableValues();
        if (!is_null($exempt) && !in_array($exempt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exempt', must be one of '%s'",
                    $exempt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exempt'] = $exempt;

        return $this;
    }

    /**
     * Gets web_proxy_profile
     *
     * @return string|null
     */
    public function getWebProxyProfile()
    {
        return $this->container['web_proxy_profile'];
    }

    /**
     * Sets web_proxy_profile
     *
     * @param string|null $web_proxy_profile Web proxy profile.
     *
     * @return self
     */
    public function setWebProxyProfile($web_proxy_profile)
    {
        if (!is_null($web_proxy_profile) && (mb_strlen($web_proxy_profile) > 63)) {
            throw new \InvalidArgumentException('invalid length for $web_proxy_profile when calling WebfilterUrlfilterIdEntries., must be smaller than or equal to 63.');
        }

        $this->container['web_proxy_profile'] = $web_proxy_profile;

        return $this;
    }

    /**
     * Gets referrer_host
     *
     * @return string|null
     */
    public function getReferrerHost()
    {
        return $this->container['referrer_host'];
    }

    /**
     * Sets referrer_host
     *
     * @param string|null $referrer_host Referrer host name.
     *
     * @return self
     */
    public function setReferrerHost($referrer_host)
    {
        if (!is_null($referrer_host) && (mb_strlen($referrer_host) > 255)) {
            throw new \InvalidArgumentException('invalid length for $referrer_host when calling WebfilterUrlfilterIdEntries., must be smaller than or equal to 255.');
        }

        $this->container['referrer_host'] = $referrer_host;

        return $this;
    }

    /**
     * Gets dns_address_family
     *
     * @return string|null
     */
    public function getDnsAddressFamily()
    {
        return $this->container['dns_address_family'];
    }

    /**
     * Sets dns_address_family
     *
     * @param string|null $dns_address_family Resolve IPv4 address, IPv6 address, or both from DNS server.    ipv4:Resolve IPv4 address from DNS server.    ipv6:Resolve IPv6 address from DNS server.    both:Resolve both IPv4 and IPv6 addresses from DNS server.
     *
     * @return self
     */
    public function setDnsAddressFamily($dns_address_family)
    {
        $allowedValues = $this->getDnsAddressFamilyAllowableValues();
        if (!is_null($dns_address_family) && !in_array($dns_address_family, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_address_family', must be one of '%s'",
                    $dns_address_family,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_address_family'] = $dns_address_family;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


