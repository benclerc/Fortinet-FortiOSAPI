<?php
/**
 * InlineObject522
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject522 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject522 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_522';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'affinity' => 'string',
        'ldb_method' => 'string',
        'group_down_option' => 'string',
        'server_list' => '\Fortigate\FortiOS\Model\CMDB\WebProxyForwardServerGroupNameServerList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'affinity' => null,
        'ldb_method' => null,
        'group_down_option' => null,
        'server_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'affinity' => 'affinity',
        'ldb_method' => 'ldb-method',
        'group_down_option' => 'group-down-option',
        'server_list' => 'server-list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'affinity' => 'setAffinity',
        'ldb_method' => 'setLdbMethod',
        'group_down_option' => 'setGroupDownOption',
        'server_list' => 'setServerList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'affinity' => 'getAffinity',
        'ldb_method' => 'getLdbMethod',
        'group_down_option' => 'getGroupDownOption',
        'server_list' => 'getServerList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AFFINITY_ENABLE = 'enable';
    const AFFINITY_DISABLE = 'disable';
    const LDB_METHOD_WEIGHTED = 'weighted';
    const LDB_METHOD_LEAST_SESSION = 'least-session';
    const LDB_METHOD_ACTIVE_PASSIVE = 'active-passive';
    const GROUP_DOWN_OPTION_BLOCK = 'block';
    const GROUP_DOWN_OPTION_PASS = 'pass';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAffinityAllowableValues()
    {
        return [
            self::AFFINITY_ENABLE,
            self::AFFINITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLdbMethodAllowableValues()
    {
        return [
            self::LDB_METHOD_WEIGHTED,
            self::LDB_METHOD_LEAST_SESSION,
            self::LDB_METHOD_ACTIVE_PASSIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupDownOptionAllowableValues()
    {
        return [
            self::GROUP_DOWN_OPTION_BLOCK,
            self::GROUP_DOWN_OPTION_PASS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['affinity'] = $data['affinity'] ?? null;
        $this->container['ldb_method'] = $data['ldb_method'] ?? null;
        $this->container['group_down_option'] = $data['group_down_option'] ?? null;
        $this->container['server_list'] = $data['server_list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAffinityAllowableValues();
        if (!is_null($this->container['affinity']) && !in_array($this->container['affinity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'affinity', must be one of '%s'",
                $this->container['affinity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLdbMethodAllowableValues();
        if (!is_null($this->container['ldb_method']) && !in_array($this->container['ldb_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ldb_method', must be one of '%s'",
                $this->container['ldb_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGroupDownOptionAllowableValues();
        if (!is_null($this->container['group_down_option']) && !in_array($this->container['group_down_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_down_option', must be one of '%s'",
                $this->container['group_down_option'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server_list']) && (count($this->container['server_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'server_list', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Configure a forward server group consisting one or multiple forward servers. Supports failover and load balancing.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject522., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets affinity
     *
     * @return string|null
     */
    public function getAffinity()
    {
        return $this->container['affinity'];
    }

    /**
     * Sets affinity
     *
     * @param string|null $affinity Enable/disable affinity, attaching a source-ip's traffic to the assigned forwarding server until the forward-server-affinity-timeout is reached (under web-proxy global).    enable:Enable affinity.    disable:Disable affinity.
     *
     * @return self
     */
    public function setAffinity($affinity)
    {
        $allowedValues = $this->getAffinityAllowableValues();
        if (!is_null($affinity) && !in_array($affinity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'affinity', must be one of '%s'",
                    $affinity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['affinity'] = $affinity;

        return $this;
    }

    /**
     * Gets ldb_method
     *
     * @return string|null
     */
    public function getLdbMethod()
    {
        return $this->container['ldb_method'];
    }

    /**
     * Sets ldb_method
     *
     * @param string|null $ldb_method Load balance method: weighted or least-session.    weighted:Load balance traffic to forward servers based on assigned weights. Weights are ratios of total number of sessions.    least-session:Send new sessions to the server with lowest session count.    active-passive:Send new sessions to the next active server in the list. Servers are selected with highest weight first and then in order as they are configured. Traffic switches back to the first server upon failure recovery.
     *
     * @return self
     */
    public function setLdbMethod($ldb_method)
    {
        $allowedValues = $this->getLdbMethodAllowableValues();
        if (!is_null($ldb_method) && !in_array($ldb_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ldb_method', must be one of '%s'",
                    $ldb_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ldb_method'] = $ldb_method;

        return $this;
    }

    /**
     * Gets group_down_option
     *
     * @return string|null
     */
    public function getGroupDownOption()
    {
        return $this->container['group_down_option'];
    }

    /**
     * Sets group_down_option
     *
     * @param string|null $group_down_option Action to take when all of the servers in the forward server group are down: block sessions until at least one server is back up or pass sessions to their destination.    block:Block sessions until at least one server in the group is back up.    pass:Pass sessions to their destination bypassing servers in the forward server group.
     *
     * @return self
     */
    public function setGroupDownOption($group_down_option)
    {
        $allowedValues = $this->getGroupDownOptionAllowableValues();
        if (!is_null($group_down_option) && !in_array($group_down_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_down_option', must be one of '%s'",
                    $group_down_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_down_option'] = $group_down_option;

        return $this;
    }

    /**
     * Gets server_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebProxyForwardServerGroupNameServerList[]|null
     */
    public function getServerList()
    {
        return $this->container['server_list'];
    }

    /**
     * Sets server_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebProxyForwardServerGroupNameServerList[]|null $server_list Add web forward servers to a list to form a server group. Optionally assign weights to each server.
     *
     * @return self
     */
    public function setServerList($server_list)
    {

        if (!is_null($server_list) && (count($server_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $server_list when calling InlineObject522., number of items must be less than or equal to 0.');
        }
        $this->container['server_list'] = $server_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


