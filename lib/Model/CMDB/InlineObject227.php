<?php
/**
 * InlineObject227
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject227 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject227 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_227';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'status' => 'string',
        'rapid_commit' => 'string',
        'lease_time' => 'int',
        'dns_service' => 'string',
        'dns_search_list' => 'string',
        'dns_server1' => 'string',
        'dns_server2' => 'string',
        'dns_server3' => 'string',
        'dns_server4' => 'string',
        'domain' => 'string',
        'subnet' => 'string',
        'interface' => 'string',
        'option1' => 'string',
        'option2' => 'string',
        'option3' => 'string',
        'upstream_interface' => 'string',
        'ip_mode' => 'string',
        'prefix_range' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdPrefixRange[]',
        'ip_range' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdIpRange[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'rapid_commit' => null,
        'lease_time' => null,
        'dns_service' => null,
        'dns_search_list' => null,
        'dns_server1' => 'ipv6',
        'dns_server2' => 'ipv6',
        'dns_server3' => 'ipv6',
        'dns_server4' => 'ipv6',
        'domain' => null,
        'subnet' => 'ipv6',
        'interface' => null,
        'option1' => null,
        'option2' => null,
        'option3' => null,
        'upstream_interface' => null,
        'ip_mode' => null,
        'prefix_range' => null,
        'ip_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'rapid_commit' => 'rapid-commit',
        'lease_time' => 'lease-time',
        'dns_service' => 'dns-service',
        'dns_search_list' => 'dns-search-list',
        'dns_server1' => 'dns-server1',
        'dns_server2' => 'dns-server2',
        'dns_server3' => 'dns-server3',
        'dns_server4' => 'dns-server4',
        'domain' => 'domain',
        'subnet' => 'subnet',
        'interface' => 'interface',
        'option1' => 'option1',
        'option2' => 'option2',
        'option3' => 'option3',
        'upstream_interface' => 'upstream-interface',
        'ip_mode' => 'ip-mode',
        'prefix_range' => 'prefix-range',
        'ip_range' => 'ip-range'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'rapid_commit' => 'setRapidCommit',
        'lease_time' => 'setLeaseTime',
        'dns_service' => 'setDnsService',
        'dns_search_list' => 'setDnsSearchList',
        'dns_server1' => 'setDnsServer1',
        'dns_server2' => 'setDnsServer2',
        'dns_server3' => 'setDnsServer3',
        'dns_server4' => 'setDnsServer4',
        'domain' => 'setDomain',
        'subnet' => 'setSubnet',
        'interface' => 'setInterface',
        'option1' => 'setOption1',
        'option2' => 'setOption2',
        'option3' => 'setOption3',
        'upstream_interface' => 'setUpstreamInterface',
        'ip_mode' => 'setIpMode',
        'prefix_range' => 'setPrefixRange',
        'ip_range' => 'setIpRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'rapid_commit' => 'getRapidCommit',
        'lease_time' => 'getLeaseTime',
        'dns_service' => 'getDnsService',
        'dns_search_list' => 'getDnsSearchList',
        'dns_server1' => 'getDnsServer1',
        'dns_server2' => 'getDnsServer2',
        'dns_server3' => 'getDnsServer3',
        'dns_server4' => 'getDnsServer4',
        'domain' => 'getDomain',
        'subnet' => 'getSubnet',
        'interface' => 'getInterface',
        'option1' => 'getOption1',
        'option2' => 'getOption2',
        'option3' => 'getOption3',
        'upstream_interface' => 'getUpstreamInterface',
        'ip_mode' => 'getIpMode',
        'prefix_range' => 'getPrefixRange',
        'ip_range' => 'getIpRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const RAPID_COMMIT_DISABLE = 'disable';
    const RAPID_COMMIT_ENABLE = 'enable';
    const DNS_SERVICE_DELEGATED = 'delegated';
    const DNS_SERVICE__DEFAULT = 'default';
    const DNS_SERVICE_SPECIFY = 'specify';
    const DNS_SEARCH_LIST_DELEGATED = 'delegated';
    const DNS_SEARCH_LIST_SPECIFY = 'specify';
    const IP_MODE_RANGE = 'range';
    const IP_MODE_DELEGATED = 'delegated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRapidCommitAllowableValues()
    {
        return [
            self::RAPID_COMMIT_DISABLE,
            self::RAPID_COMMIT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsServiceAllowableValues()
    {
        return [
            self::DNS_SERVICE_DELEGATED,
            self::DNS_SERVICE__DEFAULT,
            self::DNS_SERVICE_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsSearchListAllowableValues()
    {
        return [
            self::DNS_SEARCH_LIST_DELEGATED,
            self::DNS_SEARCH_LIST_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpModeAllowableValues()
    {
        return [
            self::IP_MODE_RANGE,
            self::IP_MODE_DELEGATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['rapid_commit'] = $data['rapid_commit'] ?? null;
        $this->container['lease_time'] = $data['lease_time'] ?? null;
        $this->container['dns_service'] = $data['dns_service'] ?? null;
        $this->container['dns_search_list'] = $data['dns_search_list'] ?? null;
        $this->container['dns_server1'] = $data['dns_server1'] ?? null;
        $this->container['dns_server2'] = $data['dns_server2'] ?? null;
        $this->container['dns_server3'] = $data['dns_server3'] ?? null;
        $this->container['dns_server4'] = $data['dns_server4'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['subnet'] = $data['subnet'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['option1'] = $data['option1'] ?? null;
        $this->container['option2'] = $data['option2'] ?? null;
        $this->container['option3'] = $data['option3'] ?? null;
        $this->container['upstream_interface'] = $data['upstream_interface'] ?? null;
        $this->container['ip_mode'] = $data['ip_mode'] ?? null;
        $this->container['prefix_range'] = $data['prefix_range'] ?? null;
        $this->container['ip_range'] = $data['ip_range'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRapidCommitAllowableValues();
        if (!is_null($this->container['rapid_commit']) && !in_array($this->container['rapid_commit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rapid_commit', must be one of '%s'",
                $this->container['rapid_commit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lease_time']) && ($this->container['lease_time'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'lease_time', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['lease_time']) && ($this->container['lease_time'] < 300)) {
            $invalidProperties[] = "invalid value for 'lease_time', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getDnsServiceAllowableValues();
        if (!is_null($this->container['dns_service']) && !in_array($this->container['dns_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_service', must be one of '%s'",
                $this->container['dns_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsSearchListAllowableValues();
        if (!is_null($this->container['dns_search_list']) && !in_array($this->container['dns_search_list'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_search_list', must be one of '%s'",
                $this->container['dns_search_list'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 35)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['upstream_interface']) && (mb_strlen($this->container['upstream_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'upstream_interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($this->container['ip_mode']) && !in_array($this->container['ip_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_mode', must be one of '%s'",
                $this->container['ip_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['prefix_range']) && (count($this->container['prefix_range']) > 0)) {
            $invalidProperties[] = "invalid value for 'prefix_range', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ip_range']) && (count($this->container['ip_range']) > 0)) {
            $invalidProperties[] = "invalid value for 'ip_range', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject227., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject227., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this DHCPv6 configuration.    disable:Enable this DHCPv6 server configuration.    enable:Disable this DHCPv6 server configuration.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rapid_commit
     *
     * @return string|null
     */
    public function getRapidCommit()
    {
        return $this->container['rapid_commit'];
    }

    /**
     * Sets rapid_commit
     *
     * @param string|null $rapid_commit Enable/disable allow/disallow rapid commit.    disable:Do not allow rapid commit.    enable:Allow rapid commit.
     *
     * @return self
     */
    public function setRapidCommit($rapid_commit)
    {
        $allowedValues = $this->getRapidCommitAllowableValues();
        if (!is_null($rapid_commit) && !in_array($rapid_commit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rapid_commit', must be one of '%s'",
                    $rapid_commit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rapid_commit'] = $rapid_commit;

        return $this;
    }

    /**
     * Gets lease_time
     *
     * @return int|null
     */
    public function getLeaseTime()
    {
        return $this->container['lease_time'];
    }

    /**
     * Sets lease_time
     *
     * @param int|null $lease_time Lease time in seconds, 0 means unlimited.
     *
     * @return self
     */
    public function setLeaseTime($lease_time)
    {

        if (!is_null($lease_time) && ($lease_time > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $lease_time when calling InlineObject227., must be smaller than or equal to 8640000.');
        }
        if (!is_null($lease_time) && ($lease_time < 300)) {
            throw new \InvalidArgumentException('invalid value for $lease_time when calling InlineObject227., must be bigger than or equal to 300.');
        }

        $this->container['lease_time'] = $lease_time;

        return $this;
    }

    /**
     * Gets dns_service
     *
     * @return string|null
     */
    public function getDnsService()
    {
        return $this->container['dns_service'];
    }

    /**
     * Sets dns_service
     *
     * @param string|null $dns_service Options for assigning DNS servers to DHCPv6 clients.    delegated:Delegated DNS settings.    default:Clients are assigned the FortiGate's configured DNS servers.    specify:Specify up to 3 DNS servers in the DHCPv6 server configuration.
     *
     * @return self
     */
    public function setDnsService($dns_service)
    {
        $allowedValues = $this->getDnsServiceAllowableValues();
        if (!is_null($dns_service) && !in_array($dns_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_service', must be one of '%s'",
                    $dns_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_service'] = $dns_service;

        return $this;
    }

    /**
     * Gets dns_search_list
     *
     * @return string|null
     */
    public function getDnsSearchList()
    {
        return $this->container['dns_search_list'];
    }

    /**
     * Sets dns_search_list
     *
     * @param string|null $dns_search_list DNS search list options.    delegated:Delegated the DNS search list.    specify:Specify the DNS search list.
     *
     * @return self
     */
    public function setDnsSearchList($dns_search_list)
    {
        $allowedValues = $this->getDnsSearchListAllowableValues();
        if (!is_null($dns_search_list) && !in_array($dns_search_list, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_search_list', must be one of '%s'",
                    $dns_search_list,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_search_list'] = $dns_search_list;

        return $this;
    }

    /**
     * Gets dns_server1
     *
     * @return string|null
     */
    public function getDnsServer1()
    {
        return $this->container['dns_server1'];
    }

    /**
     * Sets dns_server1
     *
     * @param string|null $dns_server1 DNS server 1.
     *
     * @return self
     */
    public function setDnsServer1($dns_server1)
    {
        $this->container['dns_server1'] = $dns_server1;

        return $this;
    }

    /**
     * Gets dns_server2
     *
     * @return string|null
     */
    public function getDnsServer2()
    {
        return $this->container['dns_server2'];
    }

    /**
     * Sets dns_server2
     *
     * @param string|null $dns_server2 DNS server 2.
     *
     * @return self
     */
    public function setDnsServer2($dns_server2)
    {
        $this->container['dns_server2'] = $dns_server2;

        return $this;
    }

    /**
     * Gets dns_server3
     *
     * @return string|null
     */
    public function getDnsServer3()
    {
        return $this->container['dns_server3'];
    }

    /**
     * Sets dns_server3
     *
     * @param string|null $dns_server3 DNS server 3.
     *
     * @return self
     */
    public function setDnsServer3($dns_server3)
    {
        $this->container['dns_server3'] = $dns_server3;

        return $this;
    }

    /**
     * Gets dns_server4
     *
     * @return string|null
     */
    public function getDnsServer4()
    {
        return $this->container['dns_server4'];
    }

    /**
     * Sets dns_server4
     *
     * @param string|null $dns_server4 DNS server 4.
     *
     * @return self
     */
    public function setDnsServer4($dns_server4)
    {
        $this->container['dns_server4'] = $dns_server4;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain name suffix for the IP addresses that the DHCP server assigns to clients.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 35)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling InlineObject227., must be smaller than or equal to 35.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet Subnet or subnet-id if the IP mode is delegated.
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface DHCP server can assign IP configurations to clients connected to this interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject227., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets option1
     *
     * @return string|null
     */
    public function getOption1()
    {
        return $this->container['option1'];
    }

    /**
     * Sets option1
     *
     * @param string|null $option1 Option 1.
     *
     * @return self
     */
    public function setOption1($option1)
    {
        $this->container['option1'] = $option1;

        return $this;
    }

    /**
     * Gets option2
     *
     * @return string|null
     */
    public function getOption2()
    {
        return $this->container['option2'];
    }

    /**
     * Sets option2
     *
     * @param string|null $option2 Option 2.
     *
     * @return self
     */
    public function setOption2($option2)
    {
        $this->container['option2'] = $option2;

        return $this;
    }

    /**
     * Gets option3
     *
     * @return string|null
     */
    public function getOption3()
    {
        return $this->container['option3'];
    }

    /**
     * Sets option3
     *
     * @param string|null $option3 Option 3.
     *
     * @return self
     */
    public function setOption3($option3)
    {
        $this->container['option3'] = $option3;

        return $this;
    }

    /**
     * Gets upstream_interface
     *
     * @return string|null
     */
    public function getUpstreamInterface()
    {
        return $this->container['upstream_interface'];
    }

    /**
     * Sets upstream_interface
     *
     * @param string|null $upstream_interface Interface name from where delegated information is provided.
     *
     * @return self
     */
    public function setUpstreamInterface($upstream_interface)
    {
        if (!is_null($upstream_interface) && (mb_strlen($upstream_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $upstream_interface when calling InlineObject227., must be smaller than or equal to 15.');
        }

        $this->container['upstream_interface'] = $upstream_interface;

        return $this;
    }

    /**
     * Gets ip_mode
     *
     * @return string|null
     */
    public function getIpMode()
    {
        return $this->container['ip_mode'];
    }

    /**
     * Sets ip_mode
     *
     * @param string|null $ip_mode Method used to assign client IP.    range:Use range defined by start IP/end IP to assign client IP.    delegated:Use delegated prefix method to assign client IP.
     *
     * @return self
     */
    public function setIpMode($ip_mode)
    {
        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($ip_mode) && !in_array($ip_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_mode', must be one of '%s'",
                    $ip_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_mode'] = $ip_mode;

        return $this;
    }

    /**
     * Gets prefix_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdPrefixRange[]|null
     */
    public function getPrefixRange()
    {
        return $this->container['prefix_range'];
    }

    /**
     * Sets prefix_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdPrefixRange[]|null $prefix_range DHCP prefix configuration.
     *
     * @return self
     */
    public function setPrefixRange($prefix_range)
    {

        if (!is_null($prefix_range) && (count($prefix_range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $prefix_range when calling InlineObject227., number of items must be less than or equal to 0.');
        }
        $this->container['prefix_range'] = $prefix_range;

        return $this;
    }

    /**
     * Gets ip_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdIpRange[]|null
     */
    public function getIpRange()
    {
        return $this->container['ip_range'];
    }

    /**
     * Sets ip_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcp6ServerIdIpRange[]|null $ip_range DHCP IP range configuration.
     *
     * @return self
     */
    public function setIpRange($ip_range)
    {

        if (!is_null($ip_range) && (count($ip_range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ip_range when calling InlineObject227., number of items must be less than or equal to 0.');
        }
        $this->container['ip_range'] = $ip_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


