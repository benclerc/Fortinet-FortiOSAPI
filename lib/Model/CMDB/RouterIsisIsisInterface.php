<?php
/**
 * RouterIsisIsisInterface
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterIsisIsisInterface Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterIsisIsisInterface implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_isis_isis_interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'status6' => 'string',
        'network_type' => 'string',
        'circuit_type' => 'string',
        'csnp_interval_l1' => 'int',
        'csnp_interval_l2' => 'int',
        'hello_interval_l1' => 'int',
        'hello_interval_l2' => 'int',
        'hello_multiplier_l1' => 'int',
        'hello_multiplier_l2' => 'int',
        'hello_padding' => 'string',
        'lsp_interval' => 'int',
        'lsp_retransmit_interval' => 'int',
        'metric_l1' => 'int',
        'metric_l2' => 'int',
        'wide_metric_l1' => 'int',
        'wide_metric_l2' => 'int',
        'auth_password_l1' => 'string',
        'auth_password_l2' => 'string',
        'auth_keychain_l1' => 'string',
        'auth_keychain_l2' => 'string',
        'auth_send_only_l1' => 'string',
        'auth_send_only_l2' => 'string',
        'auth_mode_l1' => 'string',
        'auth_mode_l2' => 'string',
        'priority_l1' => 'int',
        'priority_l2' => 'int',
        'mesh_group' => 'string',
        'mesh_group_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'status6' => null,
        'network_type' => null,
        'circuit_type' => null,
        'csnp_interval_l1' => null,
        'csnp_interval_l2' => null,
        'hello_interval_l1' => null,
        'hello_interval_l2' => null,
        'hello_multiplier_l1' => null,
        'hello_multiplier_l2' => null,
        'hello_padding' => null,
        'lsp_interval' => null,
        'lsp_retransmit_interval' => null,
        'metric_l1' => null,
        'metric_l2' => null,
        'wide_metric_l1' => null,
        'wide_metric_l2' => null,
        'auth_password_l1' => 'password',
        'auth_password_l2' => 'password',
        'auth_keychain_l1' => null,
        'auth_keychain_l2' => null,
        'auth_send_only_l1' => null,
        'auth_send_only_l2' => null,
        'auth_mode_l1' => null,
        'auth_mode_l2' => null,
        'priority_l1' => null,
        'priority_l2' => null,
        'mesh_group' => null,
        'mesh_group_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'status6' => 'status6',
        'network_type' => 'network-type',
        'circuit_type' => 'circuit-type',
        'csnp_interval_l1' => 'csnp-interval-l1',
        'csnp_interval_l2' => 'csnp-interval-l2',
        'hello_interval_l1' => 'hello-interval-l1',
        'hello_interval_l2' => 'hello-interval-l2',
        'hello_multiplier_l1' => 'hello-multiplier-l1',
        'hello_multiplier_l2' => 'hello-multiplier-l2',
        'hello_padding' => 'hello-padding',
        'lsp_interval' => 'lsp-interval',
        'lsp_retransmit_interval' => 'lsp-retransmit-interval',
        'metric_l1' => 'metric-l1',
        'metric_l2' => 'metric-l2',
        'wide_metric_l1' => 'wide-metric-l1',
        'wide_metric_l2' => 'wide-metric-l2',
        'auth_password_l1' => 'auth-password-l1',
        'auth_password_l2' => 'auth-password-l2',
        'auth_keychain_l1' => 'auth-keychain-l1',
        'auth_keychain_l2' => 'auth-keychain-l2',
        'auth_send_only_l1' => 'auth-send-only-l1',
        'auth_send_only_l2' => 'auth-send-only-l2',
        'auth_mode_l1' => 'auth-mode-l1',
        'auth_mode_l2' => 'auth-mode-l2',
        'priority_l1' => 'priority-l1',
        'priority_l2' => 'priority-l2',
        'mesh_group' => 'mesh-group',
        'mesh_group_id' => 'mesh-group-id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'status6' => 'setStatus6',
        'network_type' => 'setNetworkType',
        'circuit_type' => 'setCircuitType',
        'csnp_interval_l1' => 'setCsnpIntervalL1',
        'csnp_interval_l2' => 'setCsnpIntervalL2',
        'hello_interval_l1' => 'setHelloIntervalL1',
        'hello_interval_l2' => 'setHelloIntervalL2',
        'hello_multiplier_l1' => 'setHelloMultiplierL1',
        'hello_multiplier_l2' => 'setHelloMultiplierL2',
        'hello_padding' => 'setHelloPadding',
        'lsp_interval' => 'setLspInterval',
        'lsp_retransmit_interval' => 'setLspRetransmitInterval',
        'metric_l1' => 'setMetricL1',
        'metric_l2' => 'setMetricL2',
        'wide_metric_l1' => 'setWideMetricL1',
        'wide_metric_l2' => 'setWideMetricL2',
        'auth_password_l1' => 'setAuthPasswordL1',
        'auth_password_l2' => 'setAuthPasswordL2',
        'auth_keychain_l1' => 'setAuthKeychainL1',
        'auth_keychain_l2' => 'setAuthKeychainL2',
        'auth_send_only_l1' => 'setAuthSendOnlyL1',
        'auth_send_only_l2' => 'setAuthSendOnlyL2',
        'auth_mode_l1' => 'setAuthModeL1',
        'auth_mode_l2' => 'setAuthModeL2',
        'priority_l1' => 'setPriorityL1',
        'priority_l2' => 'setPriorityL2',
        'mesh_group' => 'setMeshGroup',
        'mesh_group_id' => 'setMeshGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'status6' => 'getStatus6',
        'network_type' => 'getNetworkType',
        'circuit_type' => 'getCircuitType',
        'csnp_interval_l1' => 'getCsnpIntervalL1',
        'csnp_interval_l2' => 'getCsnpIntervalL2',
        'hello_interval_l1' => 'getHelloIntervalL1',
        'hello_interval_l2' => 'getHelloIntervalL2',
        'hello_multiplier_l1' => 'getHelloMultiplierL1',
        'hello_multiplier_l2' => 'getHelloMultiplierL2',
        'hello_padding' => 'getHelloPadding',
        'lsp_interval' => 'getLspInterval',
        'lsp_retransmit_interval' => 'getLspRetransmitInterval',
        'metric_l1' => 'getMetricL1',
        'metric_l2' => 'getMetricL2',
        'wide_metric_l1' => 'getWideMetricL1',
        'wide_metric_l2' => 'getWideMetricL2',
        'auth_password_l1' => 'getAuthPasswordL1',
        'auth_password_l2' => 'getAuthPasswordL2',
        'auth_keychain_l1' => 'getAuthKeychainL1',
        'auth_keychain_l2' => 'getAuthKeychainL2',
        'auth_send_only_l1' => 'getAuthSendOnlyL1',
        'auth_send_only_l2' => 'getAuthSendOnlyL2',
        'auth_mode_l1' => 'getAuthModeL1',
        'auth_mode_l2' => 'getAuthModeL2',
        'priority_l1' => 'getPriorityL1',
        'priority_l2' => 'getPriorityL2',
        'mesh_group' => 'getMeshGroup',
        'mesh_group_id' => 'getMeshGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const STATUS6_ENABLE = 'enable';
    const STATUS6_DISABLE = 'disable';
    const NETWORK_TYPE_BROADCAST = 'broadcast';
    const NETWORK_TYPE_POINT_TO_POINT = 'point-to-point';
    const NETWORK_TYPE_LOOPBACK = 'loopback';
    const CIRCUIT_TYPE__1_2 = 'level-1-2';
    const CIRCUIT_TYPE__1 = 'level-1';
    const CIRCUIT_TYPE__2 = 'level-2';
    const HELLO_PADDING_ENABLE = 'enable';
    const HELLO_PADDING_DISABLE = 'disable';
    const AUTH_SEND_ONLY_L1_ENABLE = 'enable';
    const AUTH_SEND_ONLY_L1_DISABLE = 'disable';
    const AUTH_SEND_ONLY_L2_ENABLE = 'enable';
    const AUTH_SEND_ONLY_L2_DISABLE = 'disable';
    const AUTH_MODE_L1_MD5 = 'md5';
    const AUTH_MODE_L1_PASSWORD = 'password';
    const AUTH_MODE_L2_MD5 = 'md5';
    const AUTH_MODE_L2_PASSWORD = 'password';
    const MESH_GROUP_ENABLE = 'enable';
    const MESH_GROUP_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatus6AllowableValues()
    {
        return [
            self::STATUS6_ENABLE,
            self::STATUS6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_BROADCAST,
            self::NETWORK_TYPE_POINT_TO_POINT,
            self::NETWORK_TYPE_LOOPBACK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCircuitTypeAllowableValues()
    {
        return [
            self::CIRCUIT_TYPE__1_2,
            self::CIRCUIT_TYPE__1,
            self::CIRCUIT_TYPE__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHelloPaddingAllowableValues()
    {
        return [
            self::HELLO_PADDING_ENABLE,
            self::HELLO_PADDING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthSendOnlyL1AllowableValues()
    {
        return [
            self::AUTH_SEND_ONLY_L1_ENABLE,
            self::AUTH_SEND_ONLY_L1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthSendOnlyL2AllowableValues()
    {
        return [
            self::AUTH_SEND_ONLY_L2_ENABLE,
            self::AUTH_SEND_ONLY_L2_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeL1AllowableValues()
    {
        return [
            self::AUTH_MODE_L1_MD5,
            self::AUTH_MODE_L1_PASSWORD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeL2AllowableValues()
    {
        return [
            self::AUTH_MODE_L2_MD5,
            self::AUTH_MODE_L2_PASSWORD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeshGroupAllowableValues()
    {
        return [
            self::MESH_GROUP_ENABLE,
            self::MESH_GROUP_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status6'] = $data['status6'] ?? null;
        $this->container['network_type'] = $data['network_type'] ?? null;
        $this->container['circuit_type'] = $data['circuit_type'] ?? null;
        $this->container['csnp_interval_l1'] = $data['csnp_interval_l1'] ?? null;
        $this->container['csnp_interval_l2'] = $data['csnp_interval_l2'] ?? null;
        $this->container['hello_interval_l1'] = $data['hello_interval_l1'] ?? null;
        $this->container['hello_interval_l2'] = $data['hello_interval_l2'] ?? null;
        $this->container['hello_multiplier_l1'] = $data['hello_multiplier_l1'] ?? null;
        $this->container['hello_multiplier_l2'] = $data['hello_multiplier_l2'] ?? null;
        $this->container['hello_padding'] = $data['hello_padding'] ?? null;
        $this->container['lsp_interval'] = $data['lsp_interval'] ?? null;
        $this->container['lsp_retransmit_interval'] = $data['lsp_retransmit_interval'] ?? null;
        $this->container['metric_l1'] = $data['metric_l1'] ?? null;
        $this->container['metric_l2'] = $data['metric_l2'] ?? null;
        $this->container['wide_metric_l1'] = $data['wide_metric_l1'] ?? null;
        $this->container['wide_metric_l2'] = $data['wide_metric_l2'] ?? null;
        $this->container['auth_password_l1'] = $data['auth_password_l1'] ?? null;
        $this->container['auth_password_l2'] = $data['auth_password_l2'] ?? null;
        $this->container['auth_keychain_l1'] = $data['auth_keychain_l1'] ?? null;
        $this->container['auth_keychain_l2'] = $data['auth_keychain_l2'] ?? null;
        $this->container['auth_send_only_l1'] = $data['auth_send_only_l1'] ?? null;
        $this->container['auth_send_only_l2'] = $data['auth_send_only_l2'] ?? null;
        $this->container['auth_mode_l1'] = $data['auth_mode_l1'] ?? null;
        $this->container['auth_mode_l2'] = $data['auth_mode_l2'] ?? null;
        $this->container['priority_l1'] = $data['priority_l1'] ?? null;
        $this->container['priority_l2'] = $data['priority_l2'] ?? null;
        $this->container['mesh_group'] = $data['mesh_group'] ?? null;
        $this->container['mesh_group_id'] = $data['mesh_group_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatus6AllowableValues();
        if (!is_null($this->container['status6']) && !in_array($this->container['status6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status6', must be one of '%s'",
                $this->container['status6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($this->container['network_type']) && !in_array($this->container['network_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_type', must be one of '%s'",
                $this->container['network_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCircuitTypeAllowableValues();
        if (!is_null($this->container['circuit_type']) && !in_array($this->container['circuit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'circuit_type', must be one of '%s'",
                $this->container['circuit_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['csnp_interval_l1']) && ($this->container['csnp_interval_l1'] > 65535)) {
            $invalidProperties[] = "invalid value for 'csnp_interval_l1', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['csnp_interval_l1']) && ($this->container['csnp_interval_l1'] < 1)) {
            $invalidProperties[] = "invalid value for 'csnp_interval_l1', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['csnp_interval_l2']) && ($this->container['csnp_interval_l2'] > 65535)) {
            $invalidProperties[] = "invalid value for 'csnp_interval_l2', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['csnp_interval_l2']) && ($this->container['csnp_interval_l2'] < 1)) {
            $invalidProperties[] = "invalid value for 'csnp_interval_l2', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hello_interval_l1']) && ($this->container['hello_interval_l1'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_interval_l1', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_interval_l1']) && ($this->container['hello_interval_l1'] < 0)) {
            $invalidProperties[] = "invalid value for 'hello_interval_l1', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['hello_interval_l2']) && ($this->container['hello_interval_l2'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_interval_l2', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_interval_l2']) && ($this->container['hello_interval_l2'] < 0)) {
            $invalidProperties[] = "invalid value for 'hello_interval_l2', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['hello_multiplier_l1']) && ($this->container['hello_multiplier_l1'] > 100)) {
            $invalidProperties[] = "invalid value for 'hello_multiplier_l1', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['hello_multiplier_l1']) && ($this->container['hello_multiplier_l1'] < 2)) {
            $invalidProperties[] = "invalid value for 'hello_multiplier_l1', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['hello_multiplier_l2']) && ($this->container['hello_multiplier_l2'] > 100)) {
            $invalidProperties[] = "invalid value for 'hello_multiplier_l2', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['hello_multiplier_l2']) && ($this->container['hello_multiplier_l2'] < 2)) {
            $invalidProperties[] = "invalid value for 'hello_multiplier_l2', must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getHelloPaddingAllowableValues();
        if (!is_null($this->container['hello_padding']) && !in_array($this->container['hello_padding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hello_padding', must be one of '%s'",
                $this->container['hello_padding'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lsp_interval']) && ($this->container['lsp_interval'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'lsp_interval', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['lsp_interval']) && ($this->container['lsp_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'lsp_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['lsp_retransmit_interval']) && ($this->container['lsp_retransmit_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'lsp_retransmit_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['lsp_retransmit_interval']) && ($this->container['lsp_retransmit_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'lsp_retransmit_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['metric_l1']) && ($this->container['metric_l1'] > 63)) {
            $invalidProperties[] = "invalid value for 'metric_l1', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['metric_l1']) && ($this->container['metric_l1'] < 1)) {
            $invalidProperties[] = "invalid value for 'metric_l1', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['metric_l2']) && ($this->container['metric_l2'] > 63)) {
            $invalidProperties[] = "invalid value for 'metric_l2', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['metric_l2']) && ($this->container['metric_l2'] < 1)) {
            $invalidProperties[] = "invalid value for 'metric_l2', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['wide_metric_l1']) && ($this->container['wide_metric_l1'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'wide_metric_l1', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['wide_metric_l1']) && ($this->container['wide_metric_l1'] < 1)) {
            $invalidProperties[] = "invalid value for 'wide_metric_l1', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['wide_metric_l2']) && ($this->container['wide_metric_l2'] > 16777214)) {
            $invalidProperties[] = "invalid value for 'wide_metric_l2', must be smaller than or equal to 16777214.";
        }

        if (!is_null($this->container['wide_metric_l2']) && ($this->container['wide_metric_l2'] < 1)) {
            $invalidProperties[] = "invalid value for 'wide_metric_l2', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auth_keychain_l1']) && (mb_strlen($this->container['auth_keychain_l1']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_keychain_l1', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['auth_keychain_l2']) && (mb_strlen($this->container['auth_keychain_l2']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_keychain_l2', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthSendOnlyL1AllowableValues();
        if (!is_null($this->container['auth_send_only_l1']) && !in_array($this->container['auth_send_only_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_send_only_l1', must be one of '%s'",
                $this->container['auth_send_only_l1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthSendOnlyL2AllowableValues();
        if (!is_null($this->container['auth_send_only_l2']) && !in_array($this->container['auth_send_only_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_send_only_l2', must be one of '%s'",
                $this->container['auth_send_only_l2'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthModeL1AllowableValues();
        if (!is_null($this->container['auth_mode_l1']) && !in_array($this->container['auth_mode_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode_l1', must be one of '%s'",
                $this->container['auth_mode_l1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthModeL2AllowableValues();
        if (!is_null($this->container['auth_mode_l2']) && !in_array($this->container['auth_mode_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode_l2', must be one of '%s'",
                $this->container['auth_mode_l2'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['priority_l1']) && ($this->container['priority_l1'] > 127)) {
            $invalidProperties[] = "invalid value for 'priority_l1', must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['priority_l1']) && ($this->container['priority_l1'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority_l1', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priority_l2']) && ($this->container['priority_l2'] > 127)) {
            $invalidProperties[] = "invalid value for 'priority_l2', must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['priority_l2']) && ($this->container['priority_l2'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority_l2', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMeshGroupAllowableValues();
        if (!is_null($this->container['mesh_group']) && !in_array($this->container['mesh_group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mesh_group', must be one of '%s'",
                $this->container['mesh_group'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mesh_group_id']) && ($this->container['mesh_group_id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'mesh_group_id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['mesh_group_id']) && ($this->container['mesh_group_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'mesh_group_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IS-IS interface name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterIsisIsisInterface., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable interface for IS-IS.    enable:Enable interface for IS-IS.    disable:Disable interface for IS-IS.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status6
     *
     * @return string|null
     */
    public function getStatus6()
    {
        return $this->container['status6'];
    }

    /**
     * Sets status6
     *
     * @param string|null $status6 Enable/disable IPv6 interface for IS-IS.    enable:Enable IPv6 interface for IS-IS.    disable:Disable IPv6 interface for IS-IS.
     *
     * @return self
     */
    public function setStatus6($status6)
    {
        $allowedValues = $this->getStatus6AllowableValues();
        if (!is_null($status6) && !in_array($status6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status6', must be one of '%s'",
                    $status6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status6'] = $status6;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string|null
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string|null $network_type IS-IS interface's network type    broadcast:Broadcast.    point-to-point:Point-to-point.    loopback:Loopback.
     *
     * @return self
     */
    public function setNetworkType($network_type)
    {
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($network_type) && !in_array($network_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_type', must be one of '%s'",
                    $network_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets circuit_type
     *
     * @return string|null
     */
    public function getCircuitType()
    {
        return $this->container['circuit_type'];
    }

    /**
     * Sets circuit_type
     *
     * @param string|null $circuit_type IS-IS interface's circuit type    level-1-2:Level 1 and 2.    level-1:Level 1.    level-2:Level 2.
     *
     * @return self
     */
    public function setCircuitType($circuit_type)
    {
        $allowedValues = $this->getCircuitTypeAllowableValues();
        if (!is_null($circuit_type) && !in_array($circuit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'circuit_type', must be one of '%s'",
                    $circuit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['circuit_type'] = $circuit_type;

        return $this;
    }

    /**
     * Gets csnp_interval_l1
     *
     * @return int|null
     */
    public function getCsnpIntervalL1()
    {
        return $this->container['csnp_interval_l1'];
    }

    /**
     * Sets csnp_interval_l1
     *
     * @param int|null $csnp_interval_l1 Level 1 CSNP interval.
     *
     * @return self
     */
    public function setCsnpIntervalL1($csnp_interval_l1)
    {

        if (!is_null($csnp_interval_l1) && ($csnp_interval_l1 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $csnp_interval_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($csnp_interval_l1) && ($csnp_interval_l1 < 1)) {
            throw new \InvalidArgumentException('invalid value for $csnp_interval_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['csnp_interval_l1'] = $csnp_interval_l1;

        return $this;
    }

    /**
     * Gets csnp_interval_l2
     *
     * @return int|null
     */
    public function getCsnpIntervalL2()
    {
        return $this->container['csnp_interval_l2'];
    }

    /**
     * Sets csnp_interval_l2
     *
     * @param int|null $csnp_interval_l2 Level 2 CSNP interval.
     *
     * @return self
     */
    public function setCsnpIntervalL2($csnp_interval_l2)
    {

        if (!is_null($csnp_interval_l2) && ($csnp_interval_l2 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $csnp_interval_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($csnp_interval_l2) && ($csnp_interval_l2 < 1)) {
            throw new \InvalidArgumentException('invalid value for $csnp_interval_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['csnp_interval_l2'] = $csnp_interval_l2;

        return $this;
    }

    /**
     * Gets hello_interval_l1
     *
     * @return int|null
     */
    public function getHelloIntervalL1()
    {
        return $this->container['hello_interval_l1'];
    }

    /**
     * Sets hello_interval_l1
     *
     * @param int|null $hello_interval_l1 Level 1 hello interval.
     *
     * @return self
     */
    public function setHelloIntervalL1($hello_interval_l1)
    {

        if (!is_null($hello_interval_l1) && ($hello_interval_l1 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_interval_l1) && ($hello_interval_l1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 0.');
        }

        $this->container['hello_interval_l1'] = $hello_interval_l1;

        return $this;
    }

    /**
     * Gets hello_interval_l2
     *
     * @return int|null
     */
    public function getHelloIntervalL2()
    {
        return $this->container['hello_interval_l2'];
    }

    /**
     * Sets hello_interval_l2
     *
     * @param int|null $hello_interval_l2 Level 2 hello interval.
     *
     * @return self
     */
    public function setHelloIntervalL2($hello_interval_l2)
    {

        if (!is_null($hello_interval_l2) && ($hello_interval_l2 > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_interval_l2) && ($hello_interval_l2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 0.');
        }

        $this->container['hello_interval_l2'] = $hello_interval_l2;

        return $this;
    }

    /**
     * Gets hello_multiplier_l1
     *
     * @return int|null
     */
    public function getHelloMultiplierL1()
    {
        return $this->container['hello_multiplier_l1'];
    }

    /**
     * Sets hello_multiplier_l1
     *
     * @param int|null $hello_multiplier_l1 Level 1 multiplier for Hello holding time.
     *
     * @return self
     */
    public function setHelloMultiplierL1($hello_multiplier_l1)
    {

        if (!is_null($hello_multiplier_l1) && ($hello_multiplier_l1 > 100)) {
            throw new \InvalidArgumentException('invalid value for $hello_multiplier_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 100.');
        }
        if (!is_null($hello_multiplier_l1) && ($hello_multiplier_l1 < 2)) {
            throw new \InvalidArgumentException('invalid value for $hello_multiplier_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 2.');
        }

        $this->container['hello_multiplier_l1'] = $hello_multiplier_l1;

        return $this;
    }

    /**
     * Gets hello_multiplier_l2
     *
     * @return int|null
     */
    public function getHelloMultiplierL2()
    {
        return $this->container['hello_multiplier_l2'];
    }

    /**
     * Sets hello_multiplier_l2
     *
     * @param int|null $hello_multiplier_l2 Level 2 multiplier for Hello holding time.
     *
     * @return self
     */
    public function setHelloMultiplierL2($hello_multiplier_l2)
    {

        if (!is_null($hello_multiplier_l2) && ($hello_multiplier_l2 > 100)) {
            throw new \InvalidArgumentException('invalid value for $hello_multiplier_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 100.');
        }
        if (!is_null($hello_multiplier_l2) && ($hello_multiplier_l2 < 2)) {
            throw new \InvalidArgumentException('invalid value for $hello_multiplier_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 2.');
        }

        $this->container['hello_multiplier_l2'] = $hello_multiplier_l2;

        return $this;
    }

    /**
     * Gets hello_padding
     *
     * @return string|null
     */
    public function getHelloPadding()
    {
        return $this->container['hello_padding'];
    }

    /**
     * Sets hello_padding
     *
     * @param string|null $hello_padding Enable/disable padding to IS-IS hello packets.    enable:Enable padding to IS-IS hello packets.    disable:Disable padding to IS-IS hello packets.
     *
     * @return self
     */
    public function setHelloPadding($hello_padding)
    {
        $allowedValues = $this->getHelloPaddingAllowableValues();
        if (!is_null($hello_padding) && !in_array($hello_padding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hello_padding', must be one of '%s'",
                    $hello_padding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hello_padding'] = $hello_padding;

        return $this;
    }

    /**
     * Gets lsp_interval
     *
     * @return int|null
     */
    public function getLspInterval()
    {
        return $this->container['lsp_interval'];
    }

    /**
     * Sets lsp_interval
     *
     * @param int|null $lsp_interval LSP transmission interval (milliseconds).
     *
     * @return self
     */
    public function setLspInterval($lsp_interval)
    {

        if (!is_null($lsp_interval) && ($lsp_interval > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $lsp_interval when calling RouterIsisIsisInterface., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($lsp_interval) && ($lsp_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $lsp_interval when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['lsp_interval'] = $lsp_interval;

        return $this;
    }

    /**
     * Gets lsp_retransmit_interval
     *
     * @return int|null
     */
    public function getLspRetransmitInterval()
    {
        return $this->container['lsp_retransmit_interval'];
    }

    /**
     * Sets lsp_retransmit_interval
     *
     * @param int|null $lsp_retransmit_interval LSP retransmission interval (sec).
     *
     * @return self
     */
    public function setLspRetransmitInterval($lsp_retransmit_interval)
    {

        if (!is_null($lsp_retransmit_interval) && ($lsp_retransmit_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $lsp_retransmit_interval when calling RouterIsisIsisInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($lsp_retransmit_interval) && ($lsp_retransmit_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $lsp_retransmit_interval when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['lsp_retransmit_interval'] = $lsp_retransmit_interval;

        return $this;
    }

    /**
     * Gets metric_l1
     *
     * @return int|null
     */
    public function getMetricL1()
    {
        return $this->container['metric_l1'];
    }

    /**
     * Sets metric_l1
     *
     * @param int|null $metric_l1 Level 1 metric for interface.
     *
     * @return self
     */
    public function setMetricL1($metric_l1)
    {

        if (!is_null($metric_l1) && ($metric_l1 > 63)) {
            throw new \InvalidArgumentException('invalid value for $metric_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 63.');
        }
        if (!is_null($metric_l1) && ($metric_l1 < 1)) {
            throw new \InvalidArgumentException('invalid value for $metric_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['metric_l1'] = $metric_l1;

        return $this;
    }

    /**
     * Gets metric_l2
     *
     * @return int|null
     */
    public function getMetricL2()
    {
        return $this->container['metric_l2'];
    }

    /**
     * Sets metric_l2
     *
     * @param int|null $metric_l2 Level 2 metric for interface.
     *
     * @return self
     */
    public function setMetricL2($metric_l2)
    {

        if (!is_null($metric_l2) && ($metric_l2 > 63)) {
            throw new \InvalidArgumentException('invalid value for $metric_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 63.');
        }
        if (!is_null($metric_l2) && ($metric_l2 < 1)) {
            throw new \InvalidArgumentException('invalid value for $metric_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['metric_l2'] = $metric_l2;

        return $this;
    }

    /**
     * Gets wide_metric_l1
     *
     * @return int|null
     */
    public function getWideMetricL1()
    {
        return $this->container['wide_metric_l1'];
    }

    /**
     * Sets wide_metric_l1
     *
     * @param int|null $wide_metric_l1 Level 1 wide metric for interface.
     *
     * @return self
     */
    public function setWideMetricL1($wide_metric_l1)
    {

        if (!is_null($wide_metric_l1) && ($wide_metric_l1 > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $wide_metric_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 16777214.');
        }
        if (!is_null($wide_metric_l1) && ($wide_metric_l1 < 1)) {
            throw new \InvalidArgumentException('invalid value for $wide_metric_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['wide_metric_l1'] = $wide_metric_l1;

        return $this;
    }

    /**
     * Gets wide_metric_l2
     *
     * @return int|null
     */
    public function getWideMetricL2()
    {
        return $this->container['wide_metric_l2'];
    }

    /**
     * Sets wide_metric_l2
     *
     * @param int|null $wide_metric_l2 Level 2 wide metric for interface.
     *
     * @return self
     */
    public function setWideMetricL2($wide_metric_l2)
    {

        if (!is_null($wide_metric_l2) && ($wide_metric_l2 > 16777214)) {
            throw new \InvalidArgumentException('invalid value for $wide_metric_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 16777214.');
        }
        if (!is_null($wide_metric_l2) && ($wide_metric_l2 < 1)) {
            throw new \InvalidArgumentException('invalid value for $wide_metric_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 1.');
        }

        $this->container['wide_metric_l2'] = $wide_metric_l2;

        return $this;
    }

    /**
     * Gets auth_password_l1
     *
     * @return string|null
     */
    public function getAuthPasswordL1()
    {
        return $this->container['auth_password_l1'];
    }

    /**
     * Sets auth_password_l1
     *
     * @param string|null $auth_password_l1 Authentication password for level 1 PDUs.
     *
     * @return self
     */
    public function setAuthPasswordL1($auth_password_l1)
    {
        $this->container['auth_password_l1'] = $auth_password_l1;

        return $this;
    }

    /**
     * Gets auth_password_l2
     *
     * @return string|null
     */
    public function getAuthPasswordL2()
    {
        return $this->container['auth_password_l2'];
    }

    /**
     * Sets auth_password_l2
     *
     * @param string|null $auth_password_l2 Authentication password for level 2 PDUs.
     *
     * @return self
     */
    public function setAuthPasswordL2($auth_password_l2)
    {
        $this->container['auth_password_l2'] = $auth_password_l2;

        return $this;
    }

    /**
     * Gets auth_keychain_l1
     *
     * @return string|null
     */
    public function getAuthKeychainL1()
    {
        return $this->container['auth_keychain_l1'];
    }

    /**
     * Sets auth_keychain_l1
     *
     * @param string|null $auth_keychain_l1 Authentication key-chain for level 1 PDUs.
     *
     * @return self
     */
    public function setAuthKeychainL1($auth_keychain_l1)
    {
        if (!is_null($auth_keychain_l1) && (mb_strlen($auth_keychain_l1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_keychain_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 35.');
        }

        $this->container['auth_keychain_l1'] = $auth_keychain_l1;

        return $this;
    }

    /**
     * Gets auth_keychain_l2
     *
     * @return string|null
     */
    public function getAuthKeychainL2()
    {
        return $this->container['auth_keychain_l2'];
    }

    /**
     * Sets auth_keychain_l2
     *
     * @param string|null $auth_keychain_l2 Authentication key-chain for level 2 PDUs.
     *
     * @return self
     */
    public function setAuthKeychainL2($auth_keychain_l2)
    {
        if (!is_null($auth_keychain_l2) && (mb_strlen($auth_keychain_l2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_keychain_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 35.');
        }

        $this->container['auth_keychain_l2'] = $auth_keychain_l2;

        return $this;
    }

    /**
     * Gets auth_send_only_l1
     *
     * @return string|null
     */
    public function getAuthSendOnlyL1()
    {
        return $this->container['auth_send_only_l1'];
    }

    /**
     * Sets auth_send_only_l1
     *
     * @param string|null $auth_send_only_l1 Enable/disable authentication send-only for level 1 PDUs.    enable:Enable authentication send-only for level 1 PDUs.    disable:Disable authentication send-only for level 1 PDUs.
     *
     * @return self
     */
    public function setAuthSendOnlyL1($auth_send_only_l1)
    {
        $allowedValues = $this->getAuthSendOnlyL1AllowableValues();
        if (!is_null($auth_send_only_l1) && !in_array($auth_send_only_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_send_only_l1', must be one of '%s'",
                    $auth_send_only_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_send_only_l1'] = $auth_send_only_l1;

        return $this;
    }

    /**
     * Gets auth_send_only_l2
     *
     * @return string|null
     */
    public function getAuthSendOnlyL2()
    {
        return $this->container['auth_send_only_l2'];
    }

    /**
     * Sets auth_send_only_l2
     *
     * @param string|null $auth_send_only_l2 Enable/disable authentication send-only for level 2 PDUs.    enable:Enable authentication send-only for level 2 PDUs.    disable:Disable authentication send-only for level 2 PDUs.
     *
     * @return self
     */
    public function setAuthSendOnlyL2($auth_send_only_l2)
    {
        $allowedValues = $this->getAuthSendOnlyL2AllowableValues();
        if (!is_null($auth_send_only_l2) && !in_array($auth_send_only_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_send_only_l2', must be one of '%s'",
                    $auth_send_only_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_send_only_l2'] = $auth_send_only_l2;

        return $this;
    }

    /**
     * Gets auth_mode_l1
     *
     * @return string|null
     */
    public function getAuthModeL1()
    {
        return $this->container['auth_mode_l1'];
    }

    /**
     * Sets auth_mode_l1
     *
     * @param string|null $auth_mode_l1 Level 1 authentication mode.    md5:MD5.    password:Password.
     *
     * @return self
     */
    public function setAuthModeL1($auth_mode_l1)
    {
        $allowedValues = $this->getAuthModeL1AllowableValues();
        if (!is_null($auth_mode_l1) && !in_array($auth_mode_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode_l1', must be one of '%s'",
                    $auth_mode_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode_l1'] = $auth_mode_l1;

        return $this;
    }

    /**
     * Gets auth_mode_l2
     *
     * @return string|null
     */
    public function getAuthModeL2()
    {
        return $this->container['auth_mode_l2'];
    }

    /**
     * Sets auth_mode_l2
     *
     * @param string|null $auth_mode_l2 Level 2 authentication mode.    md5:MD5.    password:Password.
     *
     * @return self
     */
    public function setAuthModeL2($auth_mode_l2)
    {
        $allowedValues = $this->getAuthModeL2AllowableValues();
        if (!is_null($auth_mode_l2) && !in_array($auth_mode_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode_l2', must be one of '%s'",
                    $auth_mode_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode_l2'] = $auth_mode_l2;

        return $this;
    }

    /**
     * Gets priority_l1
     *
     * @return int|null
     */
    public function getPriorityL1()
    {
        return $this->container['priority_l1'];
    }

    /**
     * Sets priority_l1
     *
     * @param int|null $priority_l1 Level 1 priority.
     *
     * @return self
     */
    public function setPriorityL1($priority_l1)
    {

        if (!is_null($priority_l1) && ($priority_l1 > 127)) {
            throw new \InvalidArgumentException('invalid value for $priority_l1 when calling RouterIsisIsisInterface., must be smaller than or equal to 127.');
        }
        if (!is_null($priority_l1) && ($priority_l1 < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority_l1 when calling RouterIsisIsisInterface., must be bigger than or equal to 0.');
        }

        $this->container['priority_l1'] = $priority_l1;

        return $this;
    }

    /**
     * Gets priority_l2
     *
     * @return int|null
     */
    public function getPriorityL2()
    {
        return $this->container['priority_l2'];
    }

    /**
     * Sets priority_l2
     *
     * @param int|null $priority_l2 Level 2 priority.
     *
     * @return self
     */
    public function setPriorityL2($priority_l2)
    {

        if (!is_null($priority_l2) && ($priority_l2 > 127)) {
            throw new \InvalidArgumentException('invalid value for $priority_l2 when calling RouterIsisIsisInterface., must be smaller than or equal to 127.');
        }
        if (!is_null($priority_l2) && ($priority_l2 < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority_l2 when calling RouterIsisIsisInterface., must be bigger than or equal to 0.');
        }

        $this->container['priority_l2'] = $priority_l2;

        return $this;
    }

    /**
     * Gets mesh_group
     *
     * @return string|null
     */
    public function getMeshGroup()
    {
        return $this->container['mesh_group'];
    }

    /**
     * Sets mesh_group
     *
     * @param string|null $mesh_group Enable/disable IS-IS mesh group.    enable:Enable IS-IS mesh group.    disable:Disable IS-IS mesh group.
     *
     * @return self
     */
    public function setMeshGroup($mesh_group)
    {
        $allowedValues = $this->getMeshGroupAllowableValues();
        if (!is_null($mesh_group) && !in_array($mesh_group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mesh_group', must be one of '%s'",
                    $mesh_group,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mesh_group'] = $mesh_group;

        return $this;
    }

    /**
     * Gets mesh_group_id
     *
     * @return int|null
     */
    public function getMeshGroupId()
    {
        return $this->container['mesh_group_id'];
    }

    /**
     * Sets mesh_group_id
     *
     * @param int|null $mesh_group_id Mesh group ID <0-4294967295>, 0: mesh-group blocked.
     *
     * @return self
     */
    public function setMeshGroupId($mesh_group_id)
    {

        if (!is_null($mesh_group_id) && ($mesh_group_id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $mesh_group_id when calling RouterIsisIsisInterface., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($mesh_group_id) && ($mesh_group_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $mesh_group_id when calling RouterIsisIsisInterface., must be bigger than or equal to 0.');
        }

        $this->container['mesh_group_id'] = $mesh_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


