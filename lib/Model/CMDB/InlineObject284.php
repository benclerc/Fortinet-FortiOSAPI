<?php
/**
 * InlineObject284
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject284 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject284 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_284';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mode' => 'string',
        'type' => 'string',
        'schedule_config_restore' => 'string',
        'schedule_script_restore' => 'string',
        'allow_push_configuration' => 'string',
        'allow_push_firmware' => 'string',
        'allow_remote_firmware_upgrade' => 'string',
        'allow_monitor' => 'string',
        'serial_number' => 'string',
        'fmg' => 'string',
        'fmg_source_ip' => 'string',
        'fmg_source_ip6' => 'string',
        'local_cert' => 'string',
        'ca_cert' => 'string',
        'vdom' => 'string',
        'server_list' => '\Fortigate\FortiOS\Model\CMDB\SystemCentralManagementServerList[]',
        'fmg_update_port' => 'string',
        'include_default_servers' => 'string',
        'enc_algorithm' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mode' => null,
        'type' => null,
        'schedule_config_restore' => null,
        'schedule_script_restore' => null,
        'allow_push_configuration' => null,
        'allow_push_firmware' => null,
        'allow_remote_firmware_upgrade' => null,
        'allow_monitor' => null,
        'serial_number' => null,
        'fmg' => null,
        'fmg_source_ip' => 'ipv4',
        'fmg_source_ip6' => 'ipv6',
        'local_cert' => null,
        'ca_cert' => null,
        'vdom' => null,
        'server_list' => null,
        'fmg_update_port' => null,
        'include_default_servers' => null,
        'enc_algorithm' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'type' => 'type',
        'schedule_config_restore' => 'schedule-config-restore',
        'schedule_script_restore' => 'schedule-script-restore',
        'allow_push_configuration' => 'allow-push-configuration',
        'allow_push_firmware' => 'allow-push-firmware',
        'allow_remote_firmware_upgrade' => 'allow-remote-firmware-upgrade',
        'allow_monitor' => 'allow-monitor',
        'serial_number' => 'serial-number',
        'fmg' => 'fmg',
        'fmg_source_ip' => 'fmg-source-ip',
        'fmg_source_ip6' => 'fmg-source-ip6',
        'local_cert' => 'local-cert',
        'ca_cert' => 'ca-cert',
        'vdom' => 'vdom',
        'server_list' => 'server-list',
        'fmg_update_port' => 'fmg-update-port',
        'include_default_servers' => 'include-default-servers',
        'enc_algorithm' => 'enc-algorithm',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'type' => 'setType',
        'schedule_config_restore' => 'setScheduleConfigRestore',
        'schedule_script_restore' => 'setScheduleScriptRestore',
        'allow_push_configuration' => 'setAllowPushConfiguration',
        'allow_push_firmware' => 'setAllowPushFirmware',
        'allow_remote_firmware_upgrade' => 'setAllowRemoteFirmwareUpgrade',
        'allow_monitor' => 'setAllowMonitor',
        'serial_number' => 'setSerialNumber',
        'fmg' => 'setFmg',
        'fmg_source_ip' => 'setFmgSourceIp',
        'fmg_source_ip6' => 'setFmgSourceIp6',
        'local_cert' => 'setLocalCert',
        'ca_cert' => 'setCaCert',
        'vdom' => 'setVdom',
        'server_list' => 'setServerList',
        'fmg_update_port' => 'setFmgUpdatePort',
        'include_default_servers' => 'setIncludeDefaultServers',
        'enc_algorithm' => 'setEncAlgorithm',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'type' => 'getType',
        'schedule_config_restore' => 'getScheduleConfigRestore',
        'schedule_script_restore' => 'getScheduleScriptRestore',
        'allow_push_configuration' => 'getAllowPushConfiguration',
        'allow_push_firmware' => 'getAllowPushFirmware',
        'allow_remote_firmware_upgrade' => 'getAllowRemoteFirmwareUpgrade',
        'allow_monitor' => 'getAllowMonitor',
        'serial_number' => 'getSerialNumber',
        'fmg' => 'getFmg',
        'fmg_source_ip' => 'getFmgSourceIp',
        'fmg_source_ip6' => 'getFmgSourceIp6',
        'local_cert' => 'getLocalCert',
        'ca_cert' => 'getCaCert',
        'vdom' => 'getVdom',
        'server_list' => 'getServerList',
        'fmg_update_port' => 'getFmgUpdatePort',
        'include_default_servers' => 'getIncludeDefaultServers',
        'enc_algorithm' => 'getEncAlgorithm',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODE_NORMAL = 'normal';
    const MODE_BACKUP = 'backup';
    const TYPE_FORTIMANAGER = 'fortimanager';
    const TYPE_FORTIGUARD = 'fortiguard';
    const TYPE_NONE = 'none';
    const SCHEDULE_CONFIG_RESTORE_ENABLE = 'enable';
    const SCHEDULE_CONFIG_RESTORE_DISABLE = 'disable';
    const SCHEDULE_SCRIPT_RESTORE_ENABLE = 'enable';
    const SCHEDULE_SCRIPT_RESTORE_DISABLE = 'disable';
    const ALLOW_PUSH_CONFIGURATION_ENABLE = 'enable';
    const ALLOW_PUSH_CONFIGURATION_DISABLE = 'disable';
    const ALLOW_PUSH_FIRMWARE_ENABLE = 'enable';
    const ALLOW_PUSH_FIRMWARE_DISABLE = 'disable';
    const ALLOW_REMOTE_FIRMWARE_UPGRADE_ENABLE = 'enable';
    const ALLOW_REMOTE_FIRMWARE_UPGRADE_DISABLE = 'disable';
    const ALLOW_MONITOR_ENABLE = 'enable';
    const ALLOW_MONITOR_DISABLE = 'disable';
    const FMG_UPDATE_PORT__8890 = '8890';
    const FMG_UPDATE_PORT__443 = '443';
    const INCLUDE_DEFAULT_SERVERS_ENABLE = 'enable';
    const INCLUDE_DEFAULT_SERVERS_DISABLE = 'disable';
    const ENC_ALGORITHM__DEFAULT = 'default';
    const ENC_ALGORITHM_HIGH = 'high';
    const ENC_ALGORITHM_LOW = 'low';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_NORMAL,
            self::MODE_BACKUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FORTIMANAGER,
            self::TYPE_FORTIGUARD,
            self::TYPE_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleConfigRestoreAllowableValues()
    {
        return [
            self::SCHEDULE_CONFIG_RESTORE_ENABLE,
            self::SCHEDULE_CONFIG_RESTORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleScriptRestoreAllowableValues()
    {
        return [
            self::SCHEDULE_SCRIPT_RESTORE_ENABLE,
            self::SCHEDULE_SCRIPT_RESTORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowPushConfigurationAllowableValues()
    {
        return [
            self::ALLOW_PUSH_CONFIGURATION_ENABLE,
            self::ALLOW_PUSH_CONFIGURATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowPushFirmwareAllowableValues()
    {
        return [
            self::ALLOW_PUSH_FIRMWARE_ENABLE,
            self::ALLOW_PUSH_FIRMWARE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowRemoteFirmwareUpgradeAllowableValues()
    {
        return [
            self::ALLOW_REMOTE_FIRMWARE_UPGRADE_ENABLE,
            self::ALLOW_REMOTE_FIRMWARE_UPGRADE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowMonitorAllowableValues()
    {
        return [
            self::ALLOW_MONITOR_ENABLE,
            self::ALLOW_MONITOR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFmgUpdatePortAllowableValues()
    {
        return [
            self::FMG_UPDATE_PORT__8890,
            self::FMG_UPDATE_PORT__443,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeDefaultServersAllowableValues()
    {
        return [
            self::INCLUDE_DEFAULT_SERVERS_ENABLE,
            self::INCLUDE_DEFAULT_SERVERS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncAlgorithmAllowableValues()
    {
        return [
            self::ENC_ALGORITHM__DEFAULT,
            self::ENC_ALGORITHM_HIGH,
            self::ENC_ALGORITHM_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['schedule_config_restore'] = $data['schedule_config_restore'] ?? null;
        $this->container['schedule_script_restore'] = $data['schedule_script_restore'] ?? null;
        $this->container['allow_push_configuration'] = $data['allow_push_configuration'] ?? null;
        $this->container['allow_push_firmware'] = $data['allow_push_firmware'] ?? null;
        $this->container['allow_remote_firmware_upgrade'] = $data['allow_remote_firmware_upgrade'] ?? null;
        $this->container['allow_monitor'] = $data['allow_monitor'] ?? null;
        $this->container['serial_number'] = $data['serial_number'] ?? null;
        $this->container['fmg'] = $data['fmg'] ?? null;
        $this->container['fmg_source_ip'] = $data['fmg_source_ip'] ?? null;
        $this->container['fmg_source_ip6'] = $data['fmg_source_ip6'] ?? null;
        $this->container['local_cert'] = $data['local_cert'] ?? null;
        $this->container['ca_cert'] = $data['ca_cert'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['server_list'] = $data['server_list'] ?? null;
        $this->container['fmg_update_port'] = $data['fmg_update_port'] ?? null;
        $this->container['include_default_servers'] = $data['include_default_servers'] ?? null;
        $this->container['enc_algorithm'] = $data['enc_algorithm'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleConfigRestoreAllowableValues();
        if (!is_null($this->container['schedule_config_restore']) && !in_array($this->container['schedule_config_restore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule_config_restore', must be one of '%s'",
                $this->container['schedule_config_restore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleScriptRestoreAllowableValues();
        if (!is_null($this->container['schedule_script_restore']) && !in_array($this->container['schedule_script_restore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule_script_restore', must be one of '%s'",
                $this->container['schedule_script_restore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowPushConfigurationAllowableValues();
        if (!is_null($this->container['allow_push_configuration']) && !in_array($this->container['allow_push_configuration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_push_configuration', must be one of '%s'",
                $this->container['allow_push_configuration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowPushFirmwareAllowableValues();
        if (!is_null($this->container['allow_push_firmware']) && !in_array($this->container['allow_push_firmware'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_push_firmware', must be one of '%s'",
                $this->container['allow_push_firmware'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowRemoteFirmwareUpgradeAllowableValues();
        if (!is_null($this->container['allow_remote_firmware_upgrade']) && !in_array($this->container['allow_remote_firmware_upgrade'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_remote_firmware_upgrade', must be one of '%s'",
                $this->container['allow_remote_firmware_upgrade'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowMonitorAllowableValues();
        if (!is_null($this->container['allow_monitor']) && !in_array($this->container['allow_monitor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_monitor', must be one of '%s'",
                $this->container['allow_monitor'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['local_cert']) && (mb_strlen($this->container['local_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'local_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['vdom']) && (mb_strlen($this->container['vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'vdom', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['server_list']) && (count($this->container['server_list']) > 100)) {
            $invalidProperties[] = "invalid value for 'server_list', number of items must be less than or equal to 100.";
        }

        $allowedValues = $this->getFmgUpdatePortAllowableValues();
        if (!is_null($this->container['fmg_update_port']) && !in_array($this->container['fmg_update_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fmg_update_port', must be one of '%s'",
                $this->container['fmg_update_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncludeDefaultServersAllowableValues();
        if (!is_null($this->container['include_default_servers']) && !in_array($this->container['include_default_servers'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include_default_servers', must be one of '%s'",
                $this->container['include_default_servers'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncAlgorithmAllowableValues();
        if (!is_null($this->container['enc_algorithm']) && !in_array($this->container['enc_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enc_algorithm', must be one of '%s'",
                $this->container['enc_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Central management mode.    normal:Manage and configure this FortiGate from FortiManager.    backup:Manage and configure this FortiGate locally and back up its configuration to FortiManager.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Central management type.    fortimanager:FortiManager.    fortiguard:Central management of this FortiGate using FortiCloud.    none:No central management.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets schedule_config_restore
     *
     * @return string|null
     */
    public function getScheduleConfigRestore()
    {
        return $this->container['schedule_config_restore'];
    }

    /**
     * Sets schedule_config_restore
     *
     * @param string|null $schedule_config_restore Enable/disable allowing the central management server to restore the configuration of this FortiGate.    enable:Enable scheduled configuration restore.    disable:Disable scheduled configuration restore.
     *
     * @return self
     */
    public function setScheduleConfigRestore($schedule_config_restore)
    {
        $allowedValues = $this->getScheduleConfigRestoreAllowableValues();
        if (!is_null($schedule_config_restore) && !in_array($schedule_config_restore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule_config_restore', must be one of '%s'",
                    $schedule_config_restore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_config_restore'] = $schedule_config_restore;

        return $this;
    }

    /**
     * Gets schedule_script_restore
     *
     * @return string|null
     */
    public function getScheduleScriptRestore()
    {
        return $this->container['schedule_script_restore'];
    }

    /**
     * Sets schedule_script_restore
     *
     * @param string|null $schedule_script_restore Enable/disable allowing the central management server to restore the scripts stored on this FortiGate.    enable:Enable scheduled script restore.    disable:Disable scheduled script restore.
     *
     * @return self
     */
    public function setScheduleScriptRestore($schedule_script_restore)
    {
        $allowedValues = $this->getScheduleScriptRestoreAllowableValues();
        if (!is_null($schedule_script_restore) && !in_array($schedule_script_restore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule_script_restore', must be one of '%s'",
                    $schedule_script_restore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_script_restore'] = $schedule_script_restore;

        return $this;
    }

    /**
     * Gets allow_push_configuration
     *
     * @return string|null
     */
    public function getAllowPushConfiguration()
    {
        return $this->container['allow_push_configuration'];
    }

    /**
     * Sets allow_push_configuration
     *
     * @param string|null $allow_push_configuration Enable/disable allowing the central management server to push configuration changes to this FortiGate.    enable:Enable push configuration.    disable:Disable push configuration.
     *
     * @return self
     */
    public function setAllowPushConfiguration($allow_push_configuration)
    {
        $allowedValues = $this->getAllowPushConfigurationAllowableValues();
        if (!is_null($allow_push_configuration) && !in_array($allow_push_configuration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_push_configuration', must be one of '%s'",
                    $allow_push_configuration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_push_configuration'] = $allow_push_configuration;

        return $this;
    }

    /**
     * Gets allow_push_firmware
     *
     * @return string|null
     */
    public function getAllowPushFirmware()
    {
        return $this->container['allow_push_firmware'];
    }

    /**
     * Sets allow_push_firmware
     *
     * @param string|null $allow_push_firmware Enable/disable allowing the central management server to push firmware updates to this FortiGate.    enable:Enable push firmware.    disable:Disable push firmware.
     *
     * @return self
     */
    public function setAllowPushFirmware($allow_push_firmware)
    {
        $allowedValues = $this->getAllowPushFirmwareAllowableValues();
        if (!is_null($allow_push_firmware) && !in_array($allow_push_firmware, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_push_firmware', must be one of '%s'",
                    $allow_push_firmware,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_push_firmware'] = $allow_push_firmware;

        return $this;
    }

    /**
     * Gets allow_remote_firmware_upgrade
     *
     * @return string|null
     */
    public function getAllowRemoteFirmwareUpgrade()
    {
        return $this->container['allow_remote_firmware_upgrade'];
    }

    /**
     * Sets allow_remote_firmware_upgrade
     *
     * @param string|null $allow_remote_firmware_upgrade Enable/disable remotely upgrading the firmware on this FortiGate from the central management server.    enable:Enable remote firmware upgrade.    disable:Disable remote firmware upgrade.
     *
     * @return self
     */
    public function setAllowRemoteFirmwareUpgrade($allow_remote_firmware_upgrade)
    {
        $allowedValues = $this->getAllowRemoteFirmwareUpgradeAllowableValues();
        if (!is_null($allow_remote_firmware_upgrade) && !in_array($allow_remote_firmware_upgrade, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_remote_firmware_upgrade', must be one of '%s'",
                    $allow_remote_firmware_upgrade,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_remote_firmware_upgrade'] = $allow_remote_firmware_upgrade;

        return $this;
    }

    /**
     * Gets allow_monitor
     *
     * @return string|null
     */
    public function getAllowMonitor()
    {
        return $this->container['allow_monitor'];
    }

    /**
     * Sets allow_monitor
     *
     * @param string|null $allow_monitor Enable/disable allowing the central management server to remotely monitor this FortiGate    enable:Enable remote monitoring of device.    disable:Disable remote monitoring of device.
     *
     * @return self
     */
    public function setAllowMonitor($allow_monitor)
    {
        $allowedValues = $this->getAllowMonitorAllowableValues();
        if (!is_null($allow_monitor) && !in_array($allow_monitor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_monitor', must be one of '%s'",
                    $allow_monitor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_monitor'] = $allow_monitor;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Serial number.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets fmg
     *
     * @return string|null
     */
    public function getFmg()
    {
        return $this->container['fmg'];
    }

    /**
     * Sets fmg
     *
     * @param string|null $fmg IP address or FQDN of the FortiManager.
     *
     * @return self
     */
    public function setFmg($fmg)
    {
        $this->container['fmg'] = $fmg;

        return $this;
    }

    /**
     * Gets fmg_source_ip
     *
     * @return string|null
     */
    public function getFmgSourceIp()
    {
        return $this->container['fmg_source_ip'];
    }

    /**
     * Sets fmg_source_ip
     *
     * @param string|null $fmg_source_ip IPv4 source address that this FortiGate uses when communicating with FortiManager.
     *
     * @return self
     */
    public function setFmgSourceIp($fmg_source_ip)
    {
        $this->container['fmg_source_ip'] = $fmg_source_ip;

        return $this;
    }

    /**
     * Gets fmg_source_ip6
     *
     * @return string|null
     */
    public function getFmgSourceIp6()
    {
        return $this->container['fmg_source_ip6'];
    }

    /**
     * Sets fmg_source_ip6
     *
     * @param string|null $fmg_source_ip6 IPv6 source address that this FortiGate uses when communicating with FortiManager.
     *
     * @return self
     */
    public function setFmgSourceIp6($fmg_source_ip6)
    {
        $this->container['fmg_source_ip6'] = $fmg_source_ip6;

        return $this;
    }

    /**
     * Gets local_cert
     *
     * @return string|null
     */
    public function getLocalCert()
    {
        return $this->container['local_cert'];
    }

    /**
     * Sets local_cert
     *
     * @param string|null $local_cert Certificate to be used by FGFM protocol.
     *
     * @return self
     */
    public function setLocalCert($local_cert)
    {
        if (!is_null($local_cert) && (mb_strlen($local_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $local_cert when calling InlineObject284., must be smaller than or equal to 35.');
        }

        $this->container['local_cert'] = $local_cert;

        return $this;
    }

    /**
     * Gets ca_cert
     *
     * @return string|null
     */
    public function getCaCert()
    {
        return $this->container['ca_cert'];
    }

    /**
     * Sets ca_cert
     *
     * @param string|null $ca_cert CA certificate to be used by FGFM protocol.
     *
     * @return self
     */
    public function setCaCert($ca_cert)
    {
        $this->container['ca_cert'] = $ca_cert;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom Virtual domain (VDOM) name to use when communicating with FortiManager.
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        if (!is_null($vdom) && (mb_strlen($vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $vdom when calling InlineObject284., must be smaller than or equal to 31.');
        }

        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets server_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemCentralManagementServerList[]|null
     */
    public function getServerList()
    {
        return $this->container['server_list'];
    }

    /**
     * Sets server_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemCentralManagementServerList[]|null $server_list Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers.
     *
     * @return self
     */
    public function setServerList($server_list)
    {

        if (!is_null($server_list) && (count($server_list) > 100)) {
            throw new \InvalidArgumentException('invalid value for $server_list when calling InlineObject284., number of items must be less than or equal to 100.');
        }
        $this->container['server_list'] = $server_list;

        return $this;
    }

    /**
     * Gets fmg_update_port
     *
     * @return string|null
     */
    public function getFmgUpdatePort()
    {
        return $this->container['fmg_update_port'];
    }

    /**
     * Sets fmg_update_port
     *
     * @param string|null $fmg_update_port Port used to communicate with FortiManager that is acting as a FortiGuard update server.    8890:Use port 8890 to communicate with FortiManager that is acting as a FortiGuard update server.    443:Use port 443 to communicate with FortiManager that is acting as a FortiGuard update server.
     *
     * @return self
     */
    public function setFmgUpdatePort($fmg_update_port)
    {
        $allowedValues = $this->getFmgUpdatePortAllowableValues();
        if (!is_null($fmg_update_port) && !in_array($fmg_update_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fmg_update_port', must be one of '%s'",
                    $fmg_update_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fmg_update_port'] = $fmg_update_port;

        return $this;
    }

    /**
     * Gets include_default_servers
     *
     * @return string|null
     */
    public function getIncludeDefaultServers()
    {
        return $this->container['include_default_servers'];
    }

    /**
     * Sets include_default_servers
     *
     * @param string|null $include_default_servers Enable/disable inclusion of public FortiGuard servers in the override server list.    enable:Enable inclusion of public FortiGuard servers in the override server list.    disable:Disable inclusion of public FortiGuard servers in the override server list.
     *
     * @return self
     */
    public function setIncludeDefaultServers($include_default_servers)
    {
        $allowedValues = $this->getIncludeDefaultServersAllowableValues();
        if (!is_null($include_default_servers) && !in_array($include_default_servers, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include_default_servers', must be one of '%s'",
                    $include_default_servers,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['include_default_servers'] = $include_default_servers;

        return $this;
    }

    /**
     * Gets enc_algorithm
     *
     * @return string|null
     */
    public function getEncAlgorithm()
    {
        return $this->container['enc_algorithm'];
    }

    /**
     * Sets enc_algorithm
     *
     * @param string|null $enc_algorithm Encryption strength for communications between the FortiGate and central management.    default:High strength algorithms and these medium-strength 128-bit key length algorithms: RC4-SHA, RC4-MD5, RC4-MD.    high:128-bit and larger key length algorithms: DHE-RSA-AES256-SHA, AES256-SHA, EDH-RSA-DES-CBC3-SHA, DES-CBC3-SHA, DES-CBC3-MD5, DHE-RSA-AES128-SHA, AES128-SHA.    low:64-bit or 56-bit key length algorithms without export restrictions: EDH-RSA-DES-CDBC-SHA, DES-CBC-SHA, DES-CBC-MD5.
     *
     * @return self
     */
    public function setEncAlgorithm($enc_algorithm)
    {
        $allowedValues = $this->getEncAlgorithmAllowableValues();
        if (!is_null($enc_algorithm) && !in_array($enc_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enc_algorithm', must be one of '%s'",
                    $enc_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enc_algorithm'] = $enc_algorithm;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject284., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


