<?php
/**
 * SystemSdwanSla
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanSla Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanSla implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_sla';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'link_cost_factor' => 'string',
        'latency_threshold' => 'int',
        'jitter_threshold' => 'int',
        'packetloss_threshold' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'link_cost_factor' => null,
        'latency_threshold' => null,
        'jitter_threshold' => null,
        'packetloss_threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'link_cost_factor' => 'link-cost-factor',
        'latency_threshold' => 'latency-threshold',
        'jitter_threshold' => 'jitter-threshold',
        'packetloss_threshold' => 'packetloss-threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'link_cost_factor' => 'setLinkCostFactor',
        'latency_threshold' => 'setLatencyThreshold',
        'jitter_threshold' => 'setJitterThreshold',
        'packetloss_threshold' => 'setPacketlossThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'link_cost_factor' => 'getLinkCostFactor',
        'latency_threshold' => 'getLatencyThreshold',
        'jitter_threshold' => 'getJitterThreshold',
        'packetloss_threshold' => 'getPacketlossThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LINK_COST_FACTOR_LATENCY = 'latency';
    const LINK_COST_FACTOR_JITTER = 'jitter';
    const LINK_COST_FACTOR_PACKET_LOSS = 'packet-loss';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkCostFactorAllowableValues()
    {
        return [
            self::LINK_COST_FACTOR_LATENCY,
            self::LINK_COST_FACTOR_JITTER,
            self::LINK_COST_FACTOR_PACKET_LOSS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['link_cost_factor'] = $data['link_cost_factor'] ?? null;
        $this->container['latency_threshold'] = $data['latency_threshold'] ?? null;
        $this->container['jitter_threshold'] = $data['jitter_threshold'] ?? null;
        $this->container['packetloss_threshold'] = $data['packetloss_threshold'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 32)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getLinkCostFactorAllowableValues();
        if (!is_null($this->container['link_cost_factor']) && !in_array($this->container['link_cost_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_cost_factor', must be one of '%s'",
                $this->container['link_cost_factor'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['latency_threshold']) && ($this->container['latency_threshold'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'latency_threshold', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['latency_threshold']) && ($this->container['latency_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'latency_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['jitter_threshold']) && ($this->container['jitter_threshold'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'jitter_threshold', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['jitter_threshold']) && ($this->container['jitter_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'jitter_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['packetloss_threshold']) && ($this->container['packetloss_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'packetloss_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['packetloss_threshold']) && ($this->container['packetloss_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'packetloss_threshold', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id SLA ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 32)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanSla., must be smaller than or equal to 32.');
        }
        if (!is_null($id) && ($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanSla., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link_cost_factor
     *
     * @return string|null
     */
    public function getLinkCostFactor()
    {
        return $this->container['link_cost_factor'];
    }

    /**
     * Sets link_cost_factor
     *
     * @param string|null $link_cost_factor Criteria on which to base link selection.    latency:Select link based on latency.    jitter:Select link based on jitter.    packet-loss:Select link based on packet loss.
     *
     * @return self
     */
    public function setLinkCostFactor($link_cost_factor)
    {
        $allowedValues = $this->getLinkCostFactorAllowableValues();
        if (!is_null($link_cost_factor) && !in_array($link_cost_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_cost_factor', must be one of '%s'",
                    $link_cost_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_cost_factor'] = $link_cost_factor;

        return $this;
    }

    /**
     * Gets latency_threshold
     *
     * @return int|null
     */
    public function getLatencyThreshold()
    {
        return $this->container['latency_threshold'];
    }

    /**
     * Sets latency_threshold
     *
     * @param int|null $latency_threshold Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     *
     * @return self
     */
    public function setLatencyThreshold($latency_threshold)
    {

        if (!is_null($latency_threshold) && ($latency_threshold > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $latency_threshold when calling SystemSdwanSla., must be smaller than or equal to 10000000.');
        }
        if (!is_null($latency_threshold) && ($latency_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $latency_threshold when calling SystemSdwanSla., must be bigger than or equal to 0.');
        }

        $this->container['latency_threshold'] = $latency_threshold;

        return $this;
    }

    /**
     * Gets jitter_threshold
     *
     * @return int|null
     */
    public function getJitterThreshold()
    {
        return $this->container['jitter_threshold'];
    }

    /**
     * Sets jitter_threshold
     *
     * @param int|null $jitter_threshold Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
     *
     * @return self
     */
    public function setJitterThreshold($jitter_threshold)
    {

        if (!is_null($jitter_threshold) && ($jitter_threshold > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $jitter_threshold when calling SystemSdwanSla., must be smaller than or equal to 10000000.');
        }
        if (!is_null($jitter_threshold) && ($jitter_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $jitter_threshold when calling SystemSdwanSla., must be bigger than or equal to 0.');
        }

        $this->container['jitter_threshold'] = $jitter_threshold;

        return $this;
    }

    /**
     * Gets packetloss_threshold
     *
     * @return int|null
     */
    public function getPacketlossThreshold()
    {
        return $this->container['packetloss_threshold'];
    }

    /**
     * Sets packetloss_threshold
     *
     * @param int|null $packetloss_threshold Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
     *
     * @return self
     */
    public function setPacketlossThreshold($packetloss_threshold)
    {

        if (!is_null($packetloss_threshold) && ($packetloss_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $packetloss_threshold when calling SystemSdwanSla., must be smaller than or equal to 100.');
        }
        if (!is_null($packetloss_threshold) && ($packetloss_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $packetloss_threshold when calling SystemSdwanSla., must be bigger than or equal to 0.');
        }

        $this->container['packetloss_threshold'] = $packetloss_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


