<?php
/**
 * RouterMulticastInterface
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterMulticastInterface Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterMulticastInterface implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_multicast_interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'ttl_threshold' => 'int',
        'pim_mode' => 'string',
        'passive' => 'string',
        'bfd' => 'string',
        'neighbour_filter' => 'string',
        'hello_interval' => 'int',
        'hello_holdtime' => 'int',
        'cisco_exclude_genid' => 'string',
        'dr_priority' => 'int',
        'propagation_delay' => 'int',
        'state_refresh_interval' => 'int',
        'rp_candidate' => 'string',
        'rp_candidate_group' => 'string',
        'rp_candidate_priority' => 'int',
        'rp_candidate_interval' => 'int',
        'multicast_flow' => 'string',
        'static_group' => 'string',
        'rpf_nbr_fail_back' => 'string',
        'rpf_nbr_fail_back_filter' => 'string',
        'join_group' => '\Fortigate\FortiOS\Model\CMDB\RouterMulticastJoinGroup[]',
        'igmp' => '\Fortigate\FortiOS\Model\CMDB\RouterMulticastIgmp[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'ttl_threshold' => null,
        'pim_mode' => null,
        'passive' => null,
        'bfd' => null,
        'neighbour_filter' => null,
        'hello_interval' => null,
        'hello_holdtime' => null,
        'cisco_exclude_genid' => null,
        'dr_priority' => null,
        'propagation_delay' => null,
        'state_refresh_interval' => null,
        'rp_candidate' => null,
        'rp_candidate_group' => null,
        'rp_candidate_priority' => null,
        'rp_candidate_interval' => null,
        'multicast_flow' => null,
        'static_group' => null,
        'rpf_nbr_fail_back' => null,
        'rpf_nbr_fail_back_filter' => null,
        'join_group' => null,
        'igmp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ttl_threshold' => 'ttl-threshold',
        'pim_mode' => 'pim-mode',
        'passive' => 'passive',
        'bfd' => 'bfd',
        'neighbour_filter' => 'neighbour-filter',
        'hello_interval' => 'hello-interval',
        'hello_holdtime' => 'hello-holdtime',
        'cisco_exclude_genid' => 'cisco-exclude-genid',
        'dr_priority' => 'dr-priority',
        'propagation_delay' => 'propagation-delay',
        'state_refresh_interval' => 'state-refresh-interval',
        'rp_candidate' => 'rp-candidate',
        'rp_candidate_group' => 'rp-candidate-group',
        'rp_candidate_priority' => 'rp-candidate-priority',
        'rp_candidate_interval' => 'rp-candidate-interval',
        'multicast_flow' => 'multicast-flow',
        'static_group' => 'static-group',
        'rpf_nbr_fail_back' => 'rpf-nbr-fail-back',
        'rpf_nbr_fail_back_filter' => 'rpf-nbr-fail-back-filter',
        'join_group' => 'join-group',
        'igmp' => 'igmp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ttl_threshold' => 'setTtlThreshold',
        'pim_mode' => 'setPimMode',
        'passive' => 'setPassive',
        'bfd' => 'setBfd',
        'neighbour_filter' => 'setNeighbourFilter',
        'hello_interval' => 'setHelloInterval',
        'hello_holdtime' => 'setHelloHoldtime',
        'cisco_exclude_genid' => 'setCiscoExcludeGenid',
        'dr_priority' => 'setDrPriority',
        'propagation_delay' => 'setPropagationDelay',
        'state_refresh_interval' => 'setStateRefreshInterval',
        'rp_candidate' => 'setRpCandidate',
        'rp_candidate_group' => 'setRpCandidateGroup',
        'rp_candidate_priority' => 'setRpCandidatePriority',
        'rp_candidate_interval' => 'setRpCandidateInterval',
        'multicast_flow' => 'setMulticastFlow',
        'static_group' => 'setStaticGroup',
        'rpf_nbr_fail_back' => 'setRpfNbrFailBack',
        'rpf_nbr_fail_back_filter' => 'setRpfNbrFailBackFilter',
        'join_group' => 'setJoinGroup',
        'igmp' => 'setIgmp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ttl_threshold' => 'getTtlThreshold',
        'pim_mode' => 'getPimMode',
        'passive' => 'getPassive',
        'bfd' => 'getBfd',
        'neighbour_filter' => 'getNeighbourFilter',
        'hello_interval' => 'getHelloInterval',
        'hello_holdtime' => 'getHelloHoldtime',
        'cisco_exclude_genid' => 'getCiscoExcludeGenid',
        'dr_priority' => 'getDrPriority',
        'propagation_delay' => 'getPropagationDelay',
        'state_refresh_interval' => 'getStateRefreshInterval',
        'rp_candidate' => 'getRpCandidate',
        'rp_candidate_group' => 'getRpCandidateGroup',
        'rp_candidate_priority' => 'getRpCandidatePriority',
        'rp_candidate_interval' => 'getRpCandidateInterval',
        'multicast_flow' => 'getMulticastFlow',
        'static_group' => 'getStaticGroup',
        'rpf_nbr_fail_back' => 'getRpfNbrFailBack',
        'rpf_nbr_fail_back_filter' => 'getRpfNbrFailBackFilter',
        'join_group' => 'getJoinGroup',
        'igmp' => 'getIgmp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PIM_MODE_SPARSE_MODE = 'sparse-mode';
    const PIM_MODE_DENSE_MODE = 'dense-mode';
    const PASSIVE_ENABLE = 'enable';
    const PASSIVE_DISABLE = 'disable';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const CISCO_EXCLUDE_GENID_ENABLE = 'enable';
    const CISCO_EXCLUDE_GENID_DISABLE = 'disable';
    const RP_CANDIDATE_ENABLE = 'enable';
    const RP_CANDIDATE_DISABLE = 'disable';
    const RPF_NBR_FAIL_BACK_ENABLE = 'enable';
    const RPF_NBR_FAIL_BACK_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPimModeAllowableValues()
    {
        return [
            self::PIM_MODE_SPARSE_MODE,
            self::PIM_MODE_DENSE_MODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPassiveAllowableValues()
    {
        return [
            self::PASSIVE_ENABLE,
            self::PASSIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCiscoExcludeGenidAllowableValues()
    {
        return [
            self::CISCO_EXCLUDE_GENID_ENABLE,
            self::CISCO_EXCLUDE_GENID_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRpCandidateAllowableValues()
    {
        return [
            self::RP_CANDIDATE_ENABLE,
            self::RP_CANDIDATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRpfNbrFailBackAllowableValues()
    {
        return [
            self::RPF_NBR_FAIL_BACK_ENABLE,
            self::RPF_NBR_FAIL_BACK_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ttl_threshold'] = $data['ttl_threshold'] ?? null;
        $this->container['pim_mode'] = $data['pim_mode'] ?? null;
        $this->container['passive'] = $data['passive'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['neighbour_filter'] = $data['neighbour_filter'] ?? null;
        $this->container['hello_interval'] = $data['hello_interval'] ?? null;
        $this->container['hello_holdtime'] = $data['hello_holdtime'] ?? null;
        $this->container['cisco_exclude_genid'] = $data['cisco_exclude_genid'] ?? null;
        $this->container['dr_priority'] = $data['dr_priority'] ?? null;
        $this->container['propagation_delay'] = $data['propagation_delay'] ?? null;
        $this->container['state_refresh_interval'] = $data['state_refresh_interval'] ?? null;
        $this->container['rp_candidate'] = $data['rp_candidate'] ?? null;
        $this->container['rp_candidate_group'] = $data['rp_candidate_group'] ?? null;
        $this->container['rp_candidate_priority'] = $data['rp_candidate_priority'] ?? null;
        $this->container['rp_candidate_interval'] = $data['rp_candidate_interval'] ?? null;
        $this->container['multicast_flow'] = $data['multicast_flow'] ?? null;
        $this->container['static_group'] = $data['static_group'] ?? null;
        $this->container['rpf_nbr_fail_back'] = $data['rpf_nbr_fail_back'] ?? null;
        $this->container['rpf_nbr_fail_back_filter'] = $data['rpf_nbr_fail_back_filter'] ?? null;
        $this->container['join_group'] = $data['join_group'] ?? null;
        $this->container['igmp'] = $data['igmp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['ttl_threshold']) && ($this->container['ttl_threshold'] > 255)) {
            $invalidProperties[] = "invalid value for 'ttl_threshold', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ttl_threshold']) && ($this->container['ttl_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'ttl_threshold', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPimModeAllowableValues();
        if (!is_null($this->container['pim_mode']) && !in_array($this->container['pim_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pim_mode', must be one of '%s'",
                $this->container['pim_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPassiveAllowableValues();
        if (!is_null($this->container['passive']) && !in_array($this->container['passive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'passive', must be one of '%s'",
                $this->container['passive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['neighbour_filter']) && (mb_strlen($this->container['neighbour_filter']) > 35)) {
            $invalidProperties[] = "invalid value for 'neighbour_filter', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_interval']) && ($this->container['hello_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'hello_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hello_holdtime']) && ($this->container['hello_holdtime'] > 65535)) {
            $invalidProperties[] = "invalid value for 'hello_holdtime', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['hello_holdtime']) && ($this->container['hello_holdtime'] < 1)) {
            $invalidProperties[] = "invalid value for 'hello_holdtime', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getCiscoExcludeGenidAllowableValues();
        if (!is_null($this->container['cisco_exclude_genid']) && !in_array($this->container['cisco_exclude_genid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cisco_exclude_genid', must be one of '%s'",
                $this->container['cisco_exclude_genid'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dr_priority']) && ($this->container['dr_priority'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'dr_priority', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['dr_priority']) && ($this->container['dr_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'dr_priority', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['propagation_delay']) && ($this->container['propagation_delay'] > 5000)) {
            $invalidProperties[] = "invalid value for 'propagation_delay', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['propagation_delay']) && ($this->container['propagation_delay'] < 100)) {
            $invalidProperties[] = "invalid value for 'propagation_delay', must be bigger than or equal to 100.";
        }

        if (!is_null($this->container['state_refresh_interval']) && ($this->container['state_refresh_interval'] > 100)) {
            $invalidProperties[] = "invalid value for 'state_refresh_interval', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['state_refresh_interval']) && ($this->container['state_refresh_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'state_refresh_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRpCandidateAllowableValues();
        if (!is_null($this->container['rp_candidate']) && !in_array($this->container['rp_candidate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rp_candidate', must be one of '%s'",
                $this->container['rp_candidate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rp_candidate_group']) && (mb_strlen($this->container['rp_candidate_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'rp_candidate_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['rp_candidate_priority']) && ($this->container['rp_candidate_priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'rp_candidate_priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['rp_candidate_priority']) && ($this->container['rp_candidate_priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'rp_candidate_priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rp_candidate_interval']) && ($this->container['rp_candidate_interval'] > 16383)) {
            $invalidProperties[] = "invalid value for 'rp_candidate_interval', must be smaller than or equal to 16383.";
        }

        if (!is_null($this->container['rp_candidate_interval']) && ($this->container['rp_candidate_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'rp_candidate_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['multicast_flow']) && (mb_strlen($this->container['multicast_flow']) > 35)) {
            $invalidProperties[] = "invalid value for 'multicast_flow', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['static_group']) && (mb_strlen($this->container['static_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'static_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRpfNbrFailBackAllowableValues();
        if (!is_null($this->container['rpf_nbr_fail_back']) && !in_array($this->container['rpf_nbr_fail_back'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rpf_nbr_fail_back', must be one of '%s'",
                $this->container['rpf_nbr_fail_back'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rpf_nbr_fail_back_filter']) && (mb_strlen($this->container['rpf_nbr_fail_back_filter']) > 35)) {
            $invalidProperties[] = "invalid value for 'rpf_nbr_fail_back_filter', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['join_group']) && (count($this->container['join_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'join_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['igmp']) && (count($this->container['igmp']) > 0)) {
            $invalidProperties[] = "invalid value for 'igmp', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Interface name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RouterMulticastInterface., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ttl_threshold
     *
     * @return int|null
     */
    public function getTtlThreshold()
    {
        return $this->container['ttl_threshold'];
    }

    /**
     * Sets ttl_threshold
     *
     * @param int|null $ttl_threshold Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
     *
     * @return self
     */
    public function setTtlThreshold($ttl_threshold)
    {

        if (!is_null($ttl_threshold) && ($ttl_threshold > 255)) {
            throw new \InvalidArgumentException('invalid value for $ttl_threshold when calling RouterMulticastInterface., must be smaller than or equal to 255.');
        }
        if (!is_null($ttl_threshold) && ($ttl_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $ttl_threshold when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['ttl_threshold'] = $ttl_threshold;

        return $this;
    }

    /**
     * Gets pim_mode
     *
     * @return string|null
     */
    public function getPimMode()
    {
        return $this->container['pim_mode'];
    }

    /**
     * Sets pim_mode
     *
     * @param string|null $pim_mode PIM operation mode.    sparse-mode:sparse-mode    dense-mode:dense-mode
     *
     * @return self
     */
    public function setPimMode($pim_mode)
    {
        $allowedValues = $this->getPimModeAllowableValues();
        if (!is_null($pim_mode) && !in_array($pim_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pim_mode', must be one of '%s'",
                    $pim_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pim_mode'] = $pim_mode;

        return $this;
    }

    /**
     * Gets passive
     *
     * @return string|null
     */
    public function getPassive()
    {
        return $this->container['passive'];
    }

    /**
     * Sets passive
     *
     * @param string|null $passive Enable/disable listening to IGMP but not participating in PIM.    enable:Listen only.    disable:Participate in PIM.
     *
     * @return self
     */
    public function setPassive($passive)
    {
        $allowedValues = $this->getPassiveAllowableValues();
        if (!is_null($passive) && !in_array($passive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'passive', must be one of '%s'",
                    $passive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['passive'] = $passive;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).    enable:Enable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).    disable:Disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets neighbour_filter
     *
     * @return string|null
     */
    public function getNeighbourFilter()
    {
        return $this->container['neighbour_filter'];
    }

    /**
     * Sets neighbour_filter
     *
     * @param string|null $neighbour_filter Routers acknowledged as neighbor routers.
     *
     * @return self
     */
    public function setNeighbourFilter($neighbour_filter)
    {
        if (!is_null($neighbour_filter) && (mb_strlen($neighbour_filter) > 35)) {
            throw new \InvalidArgumentException('invalid length for $neighbour_filter when calling RouterMulticastInterface., must be smaller than or equal to 35.');
        }

        $this->container['neighbour_filter'] = $neighbour_filter;

        return $this;
    }

    /**
     * Gets hello_interval
     *
     * @return int|null
     */
    public function getHelloInterval()
    {
        return $this->container['hello_interval'];
    }

    /**
     * Sets hello_interval
     *
     * @param int|null $hello_interval Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
     *
     * @return self
     */
    public function setHelloInterval($hello_interval)
    {

        if (!is_null($hello_interval) && ($hello_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterMulticastInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_interval) && ($hello_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $hello_interval when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['hello_interval'] = $hello_interval;

        return $this;
    }

    /**
     * Gets hello_holdtime
     *
     * @return int|null
     */
    public function getHelloHoldtime()
    {
        return $this->container['hello_holdtime'];
    }

    /**
     * Sets hello_holdtime
     *
     * @param int|null $hello_holdtime Time before old neighbor information expires (0 - 65535 sec, default = 105).
     *
     * @return self
     */
    public function setHelloHoldtime($hello_holdtime)
    {

        if (!is_null($hello_holdtime) && ($hello_holdtime > 65535)) {
            throw new \InvalidArgumentException('invalid value for $hello_holdtime when calling RouterMulticastInterface., must be smaller than or equal to 65535.');
        }
        if (!is_null($hello_holdtime) && ($hello_holdtime < 1)) {
            throw new \InvalidArgumentException('invalid value for $hello_holdtime when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['hello_holdtime'] = $hello_holdtime;

        return $this;
    }

    /**
     * Gets cisco_exclude_genid
     *
     * @return string|null
     */
    public function getCiscoExcludeGenid()
    {
        return $this->container['cisco_exclude_genid'];
    }

    /**
     * Sets cisco_exclude_genid
     *
     * @param string|null $cisco_exclude_genid Exclude GenID from hello packets (compatibility with old Cisco IOS).    enable:Do not send GenID.    disable:Send GenID according to standard.
     *
     * @return self
     */
    public function setCiscoExcludeGenid($cisco_exclude_genid)
    {
        $allowedValues = $this->getCiscoExcludeGenidAllowableValues();
        if (!is_null($cisco_exclude_genid) && !in_array($cisco_exclude_genid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cisco_exclude_genid', must be one of '%s'",
                    $cisco_exclude_genid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cisco_exclude_genid'] = $cisco_exclude_genid;

        return $this;
    }

    /**
     * Gets dr_priority
     *
     * @return int|null
     */
    public function getDrPriority()
    {
        return $this->container['dr_priority'];
    }

    /**
     * Sets dr_priority
     *
     * @param int|null $dr_priority DR election priority.
     *
     * @return self
     */
    public function setDrPriority($dr_priority)
    {

        if (!is_null($dr_priority) && ($dr_priority > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $dr_priority when calling RouterMulticastInterface., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($dr_priority) && ($dr_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $dr_priority when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['dr_priority'] = $dr_priority;

        return $this;
    }

    /**
     * Gets propagation_delay
     *
     * @return int|null
     */
    public function getPropagationDelay()
    {
        return $this->container['propagation_delay'];
    }

    /**
     * Sets propagation_delay
     *
     * @param int|null $propagation_delay Delay flooding packets on this interface (100 - 5000 msec, default = 500).
     *
     * @return self
     */
    public function setPropagationDelay($propagation_delay)
    {

        if (!is_null($propagation_delay) && ($propagation_delay > 5000)) {
            throw new \InvalidArgumentException('invalid value for $propagation_delay when calling RouterMulticastInterface., must be smaller than or equal to 5000.');
        }
        if (!is_null($propagation_delay) && ($propagation_delay < 100)) {
            throw new \InvalidArgumentException('invalid value for $propagation_delay when calling RouterMulticastInterface., must be bigger than or equal to 100.');
        }

        $this->container['propagation_delay'] = $propagation_delay;

        return $this;
    }

    /**
     * Gets state_refresh_interval
     *
     * @return int|null
     */
    public function getStateRefreshInterval()
    {
        return $this->container['state_refresh_interval'];
    }

    /**
     * Sets state_refresh_interval
     *
     * @param int|null $state_refresh_interval Interval between sending state-refresh packets (1 - 100 sec, default = 60).
     *
     * @return self
     */
    public function setStateRefreshInterval($state_refresh_interval)
    {

        if (!is_null($state_refresh_interval) && ($state_refresh_interval > 100)) {
            throw new \InvalidArgumentException('invalid value for $state_refresh_interval when calling RouterMulticastInterface., must be smaller than or equal to 100.');
        }
        if (!is_null($state_refresh_interval) && ($state_refresh_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $state_refresh_interval when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['state_refresh_interval'] = $state_refresh_interval;

        return $this;
    }

    /**
     * Gets rp_candidate
     *
     * @return string|null
     */
    public function getRpCandidate()
    {
        return $this->container['rp_candidate'];
    }

    /**
     * Sets rp_candidate
     *
     * @param string|null $rp_candidate Enable/disable compete to become RP in elections.    enable:Compete for RP elections.    disable:Do not compete for RP elections.
     *
     * @return self
     */
    public function setRpCandidate($rp_candidate)
    {
        $allowedValues = $this->getRpCandidateAllowableValues();
        if (!is_null($rp_candidate) && !in_array($rp_candidate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rp_candidate', must be one of '%s'",
                    $rp_candidate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rp_candidate'] = $rp_candidate;

        return $this;
    }

    /**
     * Gets rp_candidate_group
     *
     * @return string|null
     */
    public function getRpCandidateGroup()
    {
        return $this->container['rp_candidate_group'];
    }

    /**
     * Sets rp_candidate_group
     *
     * @param string|null $rp_candidate_group Multicast groups managed by this RP.
     *
     * @return self
     */
    public function setRpCandidateGroup($rp_candidate_group)
    {
        if (!is_null($rp_candidate_group) && (mb_strlen($rp_candidate_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $rp_candidate_group when calling RouterMulticastInterface., must be smaller than or equal to 35.');
        }

        $this->container['rp_candidate_group'] = $rp_candidate_group;

        return $this;
    }

    /**
     * Gets rp_candidate_priority
     *
     * @return int|null
     */
    public function getRpCandidatePriority()
    {
        return $this->container['rp_candidate_priority'];
    }

    /**
     * Sets rp_candidate_priority
     *
     * @param int|null $rp_candidate_priority Router's priority as RP.
     *
     * @return self
     */
    public function setRpCandidatePriority($rp_candidate_priority)
    {

        if (!is_null($rp_candidate_priority) && ($rp_candidate_priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $rp_candidate_priority when calling RouterMulticastInterface., must be smaller than or equal to 255.');
        }
        if (!is_null($rp_candidate_priority) && ($rp_candidate_priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $rp_candidate_priority when calling RouterMulticastInterface., must be bigger than or equal to 0.');
        }

        $this->container['rp_candidate_priority'] = $rp_candidate_priority;

        return $this;
    }

    /**
     * Gets rp_candidate_interval
     *
     * @return int|null
     */
    public function getRpCandidateInterval()
    {
        return $this->container['rp_candidate_interval'];
    }

    /**
     * Sets rp_candidate_interval
     *
     * @param int|null $rp_candidate_interval RP candidate advertisement interval (1 - 16383 sec, default = 60).
     *
     * @return self
     */
    public function setRpCandidateInterval($rp_candidate_interval)
    {

        if (!is_null($rp_candidate_interval) && ($rp_candidate_interval > 16383)) {
            throw new \InvalidArgumentException('invalid value for $rp_candidate_interval when calling RouterMulticastInterface., must be smaller than or equal to 16383.');
        }
        if (!is_null($rp_candidate_interval) && ($rp_candidate_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $rp_candidate_interval when calling RouterMulticastInterface., must be bigger than or equal to 1.');
        }

        $this->container['rp_candidate_interval'] = $rp_candidate_interval;

        return $this;
    }

    /**
     * Gets multicast_flow
     *
     * @return string|null
     */
    public function getMulticastFlow()
    {
        return $this->container['multicast_flow'];
    }

    /**
     * Sets multicast_flow
     *
     * @param string|null $multicast_flow Acceptable source for multicast group.
     *
     * @return self
     */
    public function setMulticastFlow($multicast_flow)
    {
        if (!is_null($multicast_flow) && (mb_strlen($multicast_flow) > 35)) {
            throw new \InvalidArgumentException('invalid length for $multicast_flow when calling RouterMulticastInterface., must be smaller than or equal to 35.');
        }

        $this->container['multicast_flow'] = $multicast_flow;

        return $this;
    }

    /**
     * Gets static_group
     *
     * @return string|null
     */
    public function getStaticGroup()
    {
        return $this->container['static_group'];
    }

    /**
     * Sets static_group
     *
     * @param string|null $static_group Statically set multicast groups to forward out.
     *
     * @return self
     */
    public function setStaticGroup($static_group)
    {
        if (!is_null($static_group) && (mb_strlen($static_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $static_group when calling RouterMulticastInterface., must be smaller than or equal to 35.');
        }

        $this->container['static_group'] = $static_group;

        return $this;
    }

    /**
     * Gets rpf_nbr_fail_back
     *
     * @return string|null
     */
    public function getRpfNbrFailBack()
    {
        return $this->container['rpf_nbr_fail_back'];
    }

    /**
     * Sets rpf_nbr_fail_back
     *
     * @param string|null $rpf_nbr_fail_back Enable/disable fail back for RPF neighbor query.    enable:Enable fail back for RPF neighbor query.    disable:Disable fail back for RPF neighbor query.
     *
     * @return self
     */
    public function setRpfNbrFailBack($rpf_nbr_fail_back)
    {
        $allowedValues = $this->getRpfNbrFailBackAllowableValues();
        if (!is_null($rpf_nbr_fail_back) && !in_array($rpf_nbr_fail_back, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rpf_nbr_fail_back', must be one of '%s'",
                    $rpf_nbr_fail_back,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rpf_nbr_fail_back'] = $rpf_nbr_fail_back;

        return $this;
    }

    /**
     * Gets rpf_nbr_fail_back_filter
     *
     * @return string|null
     */
    public function getRpfNbrFailBackFilter()
    {
        return $this->container['rpf_nbr_fail_back_filter'];
    }

    /**
     * Sets rpf_nbr_fail_back_filter
     *
     * @param string|null $rpf_nbr_fail_back_filter Filter for fail back RPF neighbors.
     *
     * @return self
     */
    public function setRpfNbrFailBackFilter($rpf_nbr_fail_back_filter)
    {
        if (!is_null($rpf_nbr_fail_back_filter) && (mb_strlen($rpf_nbr_fail_back_filter) > 35)) {
            throw new \InvalidArgumentException('invalid length for $rpf_nbr_fail_back_filter when calling RouterMulticastInterface., must be smaller than or equal to 35.');
        }

        $this->container['rpf_nbr_fail_back_filter'] = $rpf_nbr_fail_back_filter;

        return $this;
    }

    /**
     * Gets join_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterMulticastJoinGroup[]|null
     */
    public function getJoinGroup()
    {
        return $this->container['join_group'];
    }

    /**
     * Sets join_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterMulticastJoinGroup[]|null $join_group Join multicast groups.
     *
     * @return self
     */
    public function setJoinGroup($join_group)
    {

        if (!is_null($join_group) && (count($join_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $join_group when calling RouterMulticastInterface., number of items must be less than or equal to 0.');
        }
        $this->container['join_group'] = $join_group;

        return $this;
    }

    /**
     * Gets igmp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterMulticastIgmp[]|null
     */
    public function getIgmp()
    {
        return $this->container['igmp'];
    }

    /**
     * Sets igmp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterMulticastIgmp[]|null $igmp IGMP configuration options.
     *
     * @return self
     */
    public function setIgmp($igmp)
    {

        if (!is_null($igmp) && (count($igmp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $igmp when calling RouterMulticastInterface., number of items must be less than or equal to 0.');
        }
        $this->container['igmp'] = $igmp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


