<?php
/**
 * WanoptContentDeliveryNetworkRuleNameContentId
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WanoptContentDeliveryNetworkRuleNameContentId Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WanoptContentDeliveryNetworkRuleNameContentId implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wanopt_content_delivery_network_rule__name__content_id';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'target' => 'string',
        'start_str' => 'string',
        'start_skip' => 'int',
        'start_direction' => 'string',
        'end_str' => 'string',
        'end_skip' => 'int',
        'end_direction' => 'string',
        'range_str' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'target' => null,
        'start_str' => null,
        'start_skip' => null,
        'start_direction' => null,
        'end_str' => null,
        'end_skip' => null,
        'end_direction' => null,
        'range_str' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'target' => 'target',
        'start_str' => 'start-str',
        'start_skip' => 'start-skip',
        'start_direction' => 'start-direction',
        'end_str' => 'end-str',
        'end_skip' => 'end-skip',
        'end_direction' => 'end-direction',
        'range_str' => 'range-str'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'target' => 'setTarget',
        'start_str' => 'setStartStr',
        'start_skip' => 'setStartSkip',
        'start_direction' => 'setStartDirection',
        'end_str' => 'setEndStr',
        'end_skip' => 'setEndSkip',
        'end_direction' => 'setEndDirection',
        'range_str' => 'setRangeStr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'target' => 'getTarget',
        'start_str' => 'getStartStr',
        'start_skip' => 'getStartSkip',
        'start_direction' => 'getStartDirection',
        'end_str' => 'getEndStr',
        'end_skip' => 'getEndSkip',
        'end_direction' => 'getEndDirection',
        'range_str' => 'getRangeStr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TARGET_PATH = 'path';
    const TARGET_PARAMETER = 'parameter';
    const TARGET_REFERRER = 'referrer';
    const TARGET_YOUTUBE_MAP = 'youtube-map';
    const TARGET_YOUTUBE_ID = 'youtube-id';
    const TARGET_YOUKU_ID = 'youku-id';
    const TARGET_HLS_MANIFEST = 'hls-manifest';
    const TARGET_DASH_MANIFEST = 'dash-manifest';
    const TARGET_HLS_FRAGMENT = 'hls-fragment';
    const TARGET_DASH_FRAGMENT = 'dash-fragment';
    const START_DIRECTION_FORWARD = 'forward';
    const START_DIRECTION_BACKWARD = 'backward';
    const END_DIRECTION_FORWARD = 'forward';
    const END_DIRECTION_BACKWARD = 'backward';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetAllowableValues()
    {
        return [
            self::TARGET_PATH,
            self::TARGET_PARAMETER,
            self::TARGET_REFERRER,
            self::TARGET_YOUTUBE_MAP,
            self::TARGET_YOUTUBE_ID,
            self::TARGET_YOUKU_ID,
            self::TARGET_HLS_MANIFEST,
            self::TARGET_DASH_MANIFEST,
            self::TARGET_HLS_FRAGMENT,
            self::TARGET_DASH_FRAGMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartDirectionAllowableValues()
    {
        return [
            self::START_DIRECTION_FORWARD,
            self::START_DIRECTION_BACKWARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndDirectionAllowableValues()
    {
        return [
            self::END_DIRECTION_FORWARD,
            self::END_DIRECTION_BACKWARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target'] = $data['target'] ?? null;
        $this->container['start_str'] = $data['start_str'] ?? null;
        $this->container['start_skip'] = $data['start_skip'] ?? null;
        $this->container['start_direction'] = $data['start_direction'] ?? null;
        $this->container['end_str'] = $data['end_str'] ?? null;
        $this->container['end_skip'] = $data['end_skip'] ?? null;
        $this->container['end_direction'] = $data['end_direction'] ?? null;
        $this->container['range_str'] = $data['range_str'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTargetAllowableValues();
        if (!is_null($this->container['target']) && !in_array($this->container['target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target', must be one of '%s'",
                $this->container['target'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['start_str']) && (mb_strlen($this->container['start_str']) > 35)) {
            $invalidProperties[] = "invalid value for 'start_str', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['start_skip']) && ($this->container['start_skip'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'start_skip', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['start_skip']) && ($this->container['start_skip'] < 0)) {
            $invalidProperties[] = "invalid value for 'start_skip', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStartDirectionAllowableValues();
        if (!is_null($this->container['start_direction']) && !in_array($this->container['start_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'start_direction', must be one of '%s'",
                $this->container['start_direction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['end_str']) && (mb_strlen($this->container['end_str']) > 35)) {
            $invalidProperties[] = "invalid value for 'end_str', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['end_skip']) && ($this->container['end_skip'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'end_skip', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['end_skip']) && ($this->container['end_skip'] < 0)) {
            $invalidProperties[] = "invalid value for 'end_skip', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getEndDirectionAllowableValues();
        if (!is_null($this->container['end_direction']) && !in_array($this->container['end_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'end_direction', must be one of '%s'",
                $this->container['end_direction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['range_str']) && (mb_strlen($this->container['range_str']) > 35)) {
            $invalidProperties[] = "invalid value for 'range_str', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets target
     *
     * @return string|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string|null $target Option in HTTP header or URL parameter to match.    path:Match with the URL path.    parameter:Match with the URL parameters.    referrer:Match with the Referrer option in HTTP header.    youtube-map:Match Youtube content-id collection.    youtube-id:Match Youtube content-id.    youku-id:Match Youku content-id.    hls-manifest:Match with HLS manifest.    dash-manifest:Match with DASH manifest.    hls-fragment:Match HLS stream fragment.    dash-fragment:Match DASH stream fragment.
     *
     * @return self
     */
    public function setTarget($target)
    {
        $allowedValues = $this->getTargetAllowableValues();
        if (!is_null($target) && !in_array($target, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target', must be one of '%s'",
                    $target,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets start_str
     *
     * @return string|null
     */
    public function getStartStr()
    {
        return $this->container['start_str'];
    }

    /**
     * Sets start_str
     *
     * @param string|null $start_str String from which to start search.
     *
     * @return self
     */
    public function setStartStr($start_str)
    {
        if (!is_null($start_str) && (mb_strlen($start_str) > 35)) {
            throw new \InvalidArgumentException('invalid length for $start_str when calling WanoptContentDeliveryNetworkRuleNameContentId., must be smaller than or equal to 35.');
        }

        $this->container['start_str'] = $start_str;

        return $this;
    }

    /**
     * Gets start_skip
     *
     * @return int|null
     */
    public function getStartSkip()
    {
        return $this->container['start_skip'];
    }

    /**
     * Sets start_skip
     *
     * @param int|null $start_skip Number of characters in URL to skip after start-str has been matched.
     *
     * @return self
     */
    public function setStartSkip($start_skip)
    {

        if (!is_null($start_skip) && ($start_skip > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $start_skip when calling WanoptContentDeliveryNetworkRuleNameContentId., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($start_skip) && ($start_skip < 0)) {
            throw new \InvalidArgumentException('invalid value for $start_skip when calling WanoptContentDeliveryNetworkRuleNameContentId., must be bigger than or equal to 0.');
        }

        $this->container['start_skip'] = $start_skip;

        return $this;
    }

    /**
     * Gets start_direction
     *
     * @return string|null
     */
    public function getStartDirection()
    {
        return $this->container['start_direction'];
    }

    /**
     * Sets start_direction
     *
     * @param string|null $start_direction Search direction from start-str match.    forward:Forward direction.    backward:Backward direction.
     *
     * @return self
     */
    public function setStartDirection($start_direction)
    {
        $allowedValues = $this->getStartDirectionAllowableValues();
        if (!is_null($start_direction) && !in_array($start_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'start_direction', must be one of '%s'",
                    $start_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start_direction'] = $start_direction;

        return $this;
    }

    /**
     * Gets end_str
     *
     * @return string|null
     */
    public function getEndStr()
    {
        return $this->container['end_str'];
    }

    /**
     * Sets end_str
     *
     * @param string|null $end_str String from which to end search.
     *
     * @return self
     */
    public function setEndStr($end_str)
    {
        if (!is_null($end_str) && (mb_strlen($end_str) > 35)) {
            throw new \InvalidArgumentException('invalid length for $end_str when calling WanoptContentDeliveryNetworkRuleNameContentId., must be smaller than or equal to 35.');
        }

        $this->container['end_str'] = $end_str;

        return $this;
    }

    /**
     * Gets end_skip
     *
     * @return int|null
     */
    public function getEndSkip()
    {
        return $this->container['end_skip'];
    }

    /**
     * Sets end_skip
     *
     * @param int|null $end_skip Number of characters in URL to skip after end-str has been matched.
     *
     * @return self
     */
    public function setEndSkip($end_skip)
    {

        if (!is_null($end_skip) && ($end_skip > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $end_skip when calling WanoptContentDeliveryNetworkRuleNameContentId., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($end_skip) && ($end_skip < 0)) {
            throw new \InvalidArgumentException('invalid value for $end_skip when calling WanoptContentDeliveryNetworkRuleNameContentId., must be bigger than or equal to 0.');
        }

        $this->container['end_skip'] = $end_skip;

        return $this;
    }

    /**
     * Gets end_direction
     *
     * @return string|null
     */
    public function getEndDirection()
    {
        return $this->container['end_direction'];
    }

    /**
     * Sets end_direction
     *
     * @param string|null $end_direction Search direction from end-str match.    forward:Forward direction.    backward:Backward direction.
     *
     * @return self
     */
    public function setEndDirection($end_direction)
    {
        $allowedValues = $this->getEndDirectionAllowableValues();
        if (!is_null($end_direction) && !in_array($end_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'end_direction', must be one of '%s'",
                    $end_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['end_direction'] = $end_direction;

        return $this;
    }

    /**
     * Gets range_str
     *
     * @return string|null
     */
    public function getRangeStr()
    {
        return $this->container['range_str'];
    }

    /**
     * Sets range_str
     *
     * @param string|null $range_str Name of content ID within the start string and end string.
     *
     * @return self
     */
    public function setRangeStr($range_str)
    {
        if (!is_null($range_str) && (mb_strlen($range_str) > 35)) {
            throw new \InvalidArgumentException('invalid length for $range_str when calling WanoptContentDeliveryNetworkRuleNameContentId., must be smaller than or equal to 35.');
        }

        $this->container['range_str'] = $range_str;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


