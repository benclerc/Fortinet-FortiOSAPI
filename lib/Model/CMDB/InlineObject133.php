<?php
/**
 * InlineObject133
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject133 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject133 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_133';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resolve_hosts' => 'string',
        'resolve_apps' => 'string',
        'fortiview_unscanned_apps' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'resolve_hosts' => null,
        'resolve_apps' => null,
        'fortiview_unscanned_apps' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resolve_hosts' => 'resolve-hosts',
        'resolve_apps' => 'resolve-apps',
        'fortiview_unscanned_apps' => 'fortiview-unscanned-apps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resolve_hosts' => 'setResolveHosts',
        'resolve_apps' => 'setResolveApps',
        'fortiview_unscanned_apps' => 'setFortiviewUnscannedApps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resolve_hosts' => 'getResolveHosts',
        'resolve_apps' => 'getResolveApps',
        'fortiview_unscanned_apps' => 'getFortiviewUnscannedApps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RESOLVE_HOSTS_ENABLE = 'enable';
    const RESOLVE_HOSTS_DISABLE = 'disable';
    const RESOLVE_APPS_ENABLE = 'enable';
    const RESOLVE_APPS_DISABLE = 'disable';
    const FORTIVIEW_UNSCANNED_APPS_ENABLE = 'enable';
    const FORTIVIEW_UNSCANNED_APPS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolveHostsAllowableValues()
    {
        return [
            self::RESOLVE_HOSTS_ENABLE,
            self::RESOLVE_HOSTS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolveAppsAllowableValues()
    {
        return [
            self::RESOLVE_APPS_ENABLE,
            self::RESOLVE_APPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiviewUnscannedAppsAllowableValues()
    {
        return [
            self::FORTIVIEW_UNSCANNED_APPS_ENABLE,
            self::FORTIVIEW_UNSCANNED_APPS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resolve_hosts'] = $data['resolve_hosts'] ?? null;
        $this->container['resolve_apps'] = $data['resolve_apps'] ?? null;
        $this->container['fortiview_unscanned_apps'] = $data['fortiview_unscanned_apps'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResolveHostsAllowableValues();
        if (!is_null($this->container['resolve_hosts']) && !in_array($this->container['resolve_hosts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolve_hosts', must be one of '%s'",
                $this->container['resolve_hosts'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResolveAppsAllowableValues();
        if (!is_null($this->container['resolve_apps']) && !in_array($this->container['resolve_apps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolve_apps', must be one of '%s'",
                $this->container['resolve_apps'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiviewUnscannedAppsAllowableValues();
        if (!is_null($this->container['fortiview_unscanned_apps']) && !in_array($this->container['fortiview_unscanned_apps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiview_unscanned_apps', must be one of '%s'",
                $this->container['fortiview_unscanned_apps'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resolve_hosts
     *
     * @return string|null
     */
    public function getResolveHosts()
    {
        return $this->container['resolve_hosts'];
    }

    /**
     * Sets resolve_hosts
     *
     * @param string|null $resolve_hosts Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup    enable:Enable resolving IP addresses to hostnames.    disable:Disable resolving IP addresses to hostnames.
     *
     * @return self
     */
    public function setResolveHosts($resolve_hosts)
    {
        $allowedValues = $this->getResolveHostsAllowableValues();
        if (!is_null($resolve_hosts) && !in_array($resolve_hosts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolve_hosts', must be one of '%s'",
                    $resolve_hosts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolve_hosts'] = $resolve_hosts;

        return $this;
    }

    /**
     * Gets resolve_apps
     *
     * @return string|null
     */
    public function getResolveApps()
    {
        return $this->container['resolve_apps'];
    }

    /**
     * Sets resolve_apps
     *
     * @param string|null $resolve_apps Resolve unknown applications on the GUI using Fortinet's remote application database.    enable:Enable unknown applications on the GUI.    disable:Disable unknown applications on the GUI.
     *
     * @return self
     */
    public function setResolveApps($resolve_apps)
    {
        $allowedValues = $this->getResolveAppsAllowableValues();
        if (!is_null($resolve_apps) && !in_array($resolve_apps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolve_apps', must be one of '%s'",
                    $resolve_apps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolve_apps'] = $resolve_apps;

        return $this;
    }

    /**
     * Gets fortiview_unscanned_apps
     *
     * @return string|null
     */
    public function getFortiviewUnscannedApps()
    {
        return $this->container['fortiview_unscanned_apps'];
    }

    /**
     * Sets fortiview_unscanned_apps
     *
     * @param string|null $fortiview_unscanned_apps Enable/disable showing unscanned traffic in FortiView application charts.    enable:Enable showing unscanned traffic.    disable:Disable showing unscanned traffic.
     *
     * @return self
     */
    public function setFortiviewUnscannedApps($fortiview_unscanned_apps)
    {
        $allowedValues = $this->getFortiviewUnscannedAppsAllowableValues();
        if (!is_null($fortiview_unscanned_apps) && !in_array($fortiview_unscanned_apps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiview_unscanned_apps', must be one of '%s'",
                    $fortiview_unscanned_apps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiview_unscanned_apps'] = $fortiview_unscanned_apps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


