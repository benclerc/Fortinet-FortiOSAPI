<?php
/**
 * InlineObject275
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject275 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject275 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_275';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'interval' => 'int',
        'repeat' => 'int',
        'start' => 'string',
        'script' => 'string',
        'output_size' => 'int',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'interval' => null,
        'repeat' => null,
        'start' => null,
        'script' => null,
        'output_size' => null,
        'timeout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'interval' => 'interval',
        'repeat' => 'repeat',
        'start' => 'start',
        'script' => 'script',
        'output_size' => 'output-size',
        'timeout' => 'timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'interval' => 'setInterval',
        'repeat' => 'setRepeat',
        'start' => 'setStart',
        'script' => 'setScript',
        'output_size' => 'setOutputSize',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'interval' => 'getInterval',
        'repeat' => 'getRepeat',
        'start' => 'getStart',
        'script' => 'getScript',
        'output_size' => 'getOutputSize',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const START_MANUAL = 'manual';
    const START_AUTO = 'auto';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartAllowableValues()
    {
        return [
            self::START_MANUAL,
            self::START_AUTO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['repeat'] = $data['repeat'] ?? null;
        $this->container['start'] = $data['start'] ?? null;
        $this->container['script'] = $data['script'] ?? null;
        $this->container['output_size'] = $data['output_size'] ?? null;
        $this->container['timeout'] = $data['timeout'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] > 31557600)) {
            $invalidProperties[] = "invalid value for 'interval', must be smaller than or equal to 31557600.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['repeat']) && ($this->container['repeat'] > 65535)) {
            $invalidProperties[] = "invalid value for 'repeat', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['repeat']) && ($this->container['repeat'] < 0)) {
            $invalidProperties[] = "invalid value for 'repeat', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStartAllowableValues();
        if (!is_null($this->container['start']) && !in_array($this->container['start'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'start', must be one of '%s'",
                $this->container['start'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['script']) && (mb_strlen($this->container['script']) > 1023)) {
            $invalidProperties[] = "invalid value for 'script', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['output_size']) && ($this->container['output_size'] > 1024)) {
            $invalidProperties[] = "invalid value for 'output_size', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['output_size']) && ($this->container['output_size'] < 10)) {
            $invalidProperties[] = "invalid value for 'output_size', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'timeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeout', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Auto script name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject275., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval Repeat interval in seconds.
     *
     * @return self
     */
    public function setInterval($interval)
    {

        if (!is_null($interval) && ($interval > 31557600)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject275., must be smaller than or equal to 31557600.');
        }
        if (!is_null($interval) && ($interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject275., must be bigger than or equal to 0.');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets repeat
     *
     * @return int|null
     */
    public function getRepeat()
    {
        return $this->container['repeat'];
    }

    /**
     * Sets repeat
     *
     * @param int|null $repeat Number of times to repeat this script (0 = infinite).
     *
     * @return self
     */
    public function setRepeat($repeat)
    {

        if (!is_null($repeat) && ($repeat > 65535)) {
            throw new \InvalidArgumentException('invalid value for $repeat when calling InlineObject275., must be smaller than or equal to 65535.');
        }
        if (!is_null($repeat) && ($repeat < 0)) {
            throw new \InvalidArgumentException('invalid value for $repeat when calling InlineObject275., must be bigger than or equal to 0.');
        }

        $this->container['repeat'] = $repeat;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string|null $start Script starting mode.    manual:Starting manually.    auto:Starting automatically.
     *
     * @return self
     */
    public function setStart($start)
    {
        $allowedValues = $this->getStartAllowableValues();
        if (!is_null($start) && !in_array($start, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'start', must be one of '%s'",
                    $start,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string|null
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string|null $script List of FortiOS CLI commands to repeat.
     *
     * @return self
     */
    public function setScript($script)
    {
        if (!is_null($script) && (mb_strlen($script) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $script when calling InlineObject275., must be smaller than or equal to 1023.');
        }

        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets output_size
     *
     * @return int|null
     */
    public function getOutputSize()
    {
        return $this->container['output_size'];
    }

    /**
     * Sets output_size
     *
     * @param int|null $output_size Number of megabytes to limit script output to (10 - 1024, default = 10).
     *
     * @return self
     */
    public function setOutputSize($output_size)
    {

        if (!is_null($output_size) && ($output_size > 1024)) {
            throw new \InvalidArgumentException('invalid value for $output_size when calling InlineObject275., must be smaller than or equal to 1024.');
        }
        if (!is_null($output_size) && ($output_size < 10)) {
            throw new \InvalidArgumentException('invalid value for $output_size when calling InlineObject275., must be bigger than or equal to 10.');
        }

        $this->container['output_size'] = $output_size;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int|null $timeout Maximum running time for this script in seconds (0 = no timeout).
     *
     * @return self
     */
    public function setTimeout($timeout)
    {

        if (!is_null($timeout) && ($timeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject275., must be smaller than or equal to 300.');
        }
        if (!is_null($timeout) && ($timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject275., must be bigger than or equal to 0.');
        }

        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


