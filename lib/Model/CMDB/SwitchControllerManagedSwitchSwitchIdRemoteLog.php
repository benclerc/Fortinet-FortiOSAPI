<?php
/**
 * SwitchControllerManagedSwitchSwitchIdRemoteLog
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchIdRemoteLog Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchIdRemoteLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__remote_log';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'server' => 'string',
        'port' => 'int',
        'severity' => 'string',
        'csv' => 'string',
        'facility' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'server' => null,
        'port' => null,
        'severity' => null,
        'csv' => null,
        'facility' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'server' => 'server',
        'port' => 'port',
        'severity' => 'severity',
        'csv' => 'csv',
        'facility' => 'facility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'server' => 'setServer',
        'port' => 'setPort',
        'severity' => 'setSeverity',
        'csv' => 'setCsv',
        'facility' => 'setFacility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'server' => 'getServer',
        'port' => 'getPort',
        'severity' => 'getSeverity',
        'csv' => 'getCsv',
        'facility' => 'getFacility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SEVERITY_EMERGENCY = 'emergency';
    const SEVERITY_ALERT = 'alert';
    const SEVERITY_CRITICAL = 'critical';
    const SEVERITY_ERROR = 'error';
    const SEVERITY_WARNING = 'warning';
    const SEVERITY_NOTIFICATION = 'notification';
    const SEVERITY_INFORMATION = 'information';
    const SEVERITY_DEBUG = 'debug';
    const CSV_ENABLE = 'enable';
    const CSV_DISABLE = 'disable';
    const FACILITY_KERNEL = 'kernel';
    const FACILITY_USER = 'user';
    const FACILITY_MAIL = 'mail';
    const FACILITY_DAEMON = 'daemon';
    const FACILITY_AUTH = 'auth';
    const FACILITY_SYSLOG = 'syslog';
    const FACILITY_LPR = 'lpr';
    const FACILITY_NEWS = 'news';
    const FACILITY_UUCP = 'uucp';
    const FACILITY_CRON = 'cron';
    const FACILITY_AUTHPRIV = 'authpriv';
    const FACILITY_FTP = 'ftp';
    const FACILITY_NTP = 'ntp';
    const FACILITY_AUDIT = 'audit';
    const FACILITY_ALERT = 'alert';
    const FACILITY_CLOCK = 'clock';
    const FACILITY_LOCAL0 = 'local0';
    const FACILITY_LOCAL1 = 'local1';
    const FACILITY_LOCAL2 = 'local2';
    const FACILITY_LOCAL3 = 'local3';
    const FACILITY_LOCAL4 = 'local4';
    const FACILITY_LOCAL5 = 'local5';
    const FACILITY_LOCAL6 = 'local6';
    const FACILITY_LOCAL7 = 'local7';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_EMERGENCY,
            self::SEVERITY_ALERT,
            self::SEVERITY_CRITICAL,
            self::SEVERITY_ERROR,
            self::SEVERITY_WARNING,
            self::SEVERITY_NOTIFICATION,
            self::SEVERITY_INFORMATION,
            self::SEVERITY_DEBUG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCsvAllowableValues()
    {
        return [
            self::CSV_ENABLE,
            self::CSV_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFacilityAllowableValues()
    {
        return [
            self::FACILITY_KERNEL,
            self::FACILITY_USER,
            self::FACILITY_MAIL,
            self::FACILITY_DAEMON,
            self::FACILITY_AUTH,
            self::FACILITY_SYSLOG,
            self::FACILITY_LPR,
            self::FACILITY_NEWS,
            self::FACILITY_UUCP,
            self::FACILITY_CRON,
            self::FACILITY_AUTHPRIV,
            self::FACILITY_FTP,
            self::FACILITY_NTP,
            self::FACILITY_AUDIT,
            self::FACILITY_ALERT,
            self::FACILITY_CLOCK,
            self::FACILITY_LOCAL0,
            self::FACILITY_LOCAL1,
            self::FACILITY_LOCAL2,
            self::FACILITY_LOCAL3,
            self::FACILITY_LOCAL4,
            self::FACILITY_LOCAL5,
            self::FACILITY_LOCAL6,
            self::FACILITY_LOCAL7,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['csv'] = $data['csv'] ?? null;
        $this->container['facility'] = $data['facility'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'severity', must be one of '%s'",
                $this->container['severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCsvAllowableValues();
        if (!is_null($this->container['csv']) && !in_array($this->container['csv'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'csv', must be one of '%s'",
                $this->container['csv'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFacilityAllowableValues();
        if (!is_null($this->container['facility']) && !in_array($this->container['facility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'facility', must be one of '%s'",
                $this->container['facility'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Remote log name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SwitchControllerManagedSwitchSwitchIdRemoteLog., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable logging by FortiSwitch device to a remote syslog server.    enable:Enable logging by FortiSwitch device to a remote syslog server.    disable:Disable logging by FortiSwitch device to a remote syslog server.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server IPv4 address of the remote syslog server.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling SwitchControllerManagedSwitchSwitchIdRemoteLog., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Remote syslog server listening port.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling SwitchControllerManagedSwitchSwitchIdRemoteLog., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling SwitchControllerManagedSwitchSwitchIdRemoteLog., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Severity of logs to be transferred to remote log server.    emergency:Emergency level.    alert:Alert level.    critical:Critical level.    error:Error level.    warning:Warning level.    notification:Notification level.    information:Information level.    debug:Debug level.
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'severity', must be one of '%s'",
                    $severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets csv
     *
     * @return string|null
     */
    public function getCsv()
    {
        return $this->container['csv'];
    }

    /**
     * Sets csv
     *
     * @param string|null $csv Enable/disable comma-separated value (CSV) strings.    enable:Enable comma-separated value (CSV) strings.    disable:Disable comma-separated value (CSV) strings.
     *
     * @return self
     */
    public function setCsv($csv)
    {
        $allowedValues = $this->getCsvAllowableValues();
        if (!is_null($csv) && !in_array($csv, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'csv', must be one of '%s'",
                    $csv,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['csv'] = $csv;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return string|null
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param string|null $facility Facility to log to remote syslog server.    kernel:Kernel messages.    user:Random user-level messages.    mail:Mail system.    daemon:System daemons.    auth:Security/authorization messages.    syslog:Messages generated internally by syslogd.    lpr:Line printer subsystem.    news:Network news subsystem.    uucp:UUCP server messages.    cron:Clock daemon.    authpriv:Security/authorization messages (private).    ftp:FTP daemon.    ntp:NTP daemon.    audit:Log audit.    alert:Log alert.    clock:Clock daemon.    local0:Reserved for local use.    local1:Reserved for local use.    local2:Reserved for local use.    local3:Reserved for local use.    local4:Reserved for local use.    local5:Reserved for local use.    local6:Reserved for local use.    local7:Reserved for local use.
     *
     * @return self
     */
    public function setFacility($facility)
    {
        $allowedValues = $this->getFacilityAllowableValues();
        if (!is_null($facility) && !in_array($facility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'facility', must be one of '%s'",
                    $facility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['facility'] = $facility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


