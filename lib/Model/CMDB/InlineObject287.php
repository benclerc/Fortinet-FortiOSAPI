<?php
/**
 * InlineObject287
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject287 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject287 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_287';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mode' => 'string',
        'baudrate' => 'string',
        'output' => 'string',
        'login' => 'string',
        'fortiexplorer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mode' => null,
        'baudrate' => null,
        'output' => null,
        'login' => null,
        'fortiexplorer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'baudrate' => 'baudrate',
        'output' => 'output',
        'login' => 'login',
        'fortiexplorer' => 'fortiexplorer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'baudrate' => 'setBaudrate',
        'output' => 'setOutput',
        'login' => 'setLogin',
        'fortiexplorer' => 'setFortiexplorer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'baudrate' => 'getBaudrate',
        'output' => 'getOutput',
        'login' => 'getLogin',
        'fortiexplorer' => 'getFortiexplorer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODE_BATCH = 'batch';
    const MODE_LINE = 'line';
    const BAUDRATE__9600 = '9600';
    const BAUDRATE__19200 = '19200';
    const BAUDRATE__38400 = '38400';
    const BAUDRATE__57600 = '57600';
    const BAUDRATE__115200 = '115200';
    const OUTPUT_STANDARD = 'standard';
    const OUTPUT_MORE = 'more';
    const LOGIN_ENABLE = 'enable';
    const LOGIN_DISABLE = 'disable';
    const FORTIEXPLORER_ENABLE = 'enable';
    const FORTIEXPLORER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_BATCH,
            self::MODE_LINE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBaudrateAllowableValues()
    {
        return [
            self::BAUDRATE__9600,
            self::BAUDRATE__19200,
            self::BAUDRATE__38400,
            self::BAUDRATE__57600,
            self::BAUDRATE__115200,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutputAllowableValues()
    {
        return [
            self::OUTPUT_STANDARD,
            self::OUTPUT_MORE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoginAllowableValues()
    {
        return [
            self::LOGIN_ENABLE,
            self::LOGIN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiexplorerAllowableValues()
    {
        return [
            self::FORTIEXPLORER_ENABLE,
            self::FORTIEXPLORER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['baudrate'] = $data['baudrate'] ?? null;
        $this->container['output'] = $data['output'] ?? null;
        $this->container['login'] = $data['login'] ?? null;
        $this->container['fortiexplorer'] = $data['fortiexplorer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBaudrateAllowableValues();
        if (!is_null($this->container['baudrate']) && !in_array($this->container['baudrate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'baudrate', must be one of '%s'",
                $this->container['baudrate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutputAllowableValues();
        if (!is_null($this->container['output']) && !in_array($this->container['output'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'output', must be one of '%s'",
                $this->container['output'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoginAllowableValues();
        if (!is_null($this->container['login']) && !in_array($this->container['login'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'login', must be one of '%s'",
                $this->container['login'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiexplorerAllowableValues();
        if (!is_null($this->container['fortiexplorer']) && !in_array($this->container['fortiexplorer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiexplorer', must be one of '%s'",
                $this->container['fortiexplorer'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Console mode.    batch:Batch mode.    line:Line mode.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets baudrate
     *
     * @return string|null
     */
    public function getBaudrate()
    {
        return $this->container['baudrate'];
    }

    /**
     * Sets baudrate
     *
     * @param string|null $baudrate Console baud rate.    9600:9600    19200:19200    38400:38400    57600:57600    115200:115200
     *
     * @return self
     */
    public function setBaudrate($baudrate)
    {
        $allowedValues = $this->getBaudrateAllowableValues();
        if (!is_null($baudrate) && !in_array($baudrate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'baudrate', must be one of '%s'",
                    $baudrate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['baudrate'] = $baudrate;

        return $this;
    }

    /**
     * Gets output
     *
     * @return string|null
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param string|null $output Console output mode.    standard:Standard output.    more:More page output.
     *
     * @return self
     */
    public function setOutput($output)
    {
        $allowedValues = $this->getOutputAllowableValues();
        if (!is_null($output) && !in_array($output, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'output', must be one of '%s'",
                    $output,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login Enable/disable serial console and FortiExplorer.    enable:Console login enable.    disable:Console login disable.
     *
     * @return self
     */
    public function setLogin($login)
    {
        $allowedValues = $this->getLoginAllowableValues();
        if (!is_null($login) && !in_array($login, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'login', must be one of '%s'",
                    $login,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets fortiexplorer
     *
     * @return string|null
     */
    public function getFortiexplorer()
    {
        return $this->container['fortiexplorer'];
    }

    /**
     * Sets fortiexplorer
     *
     * @param string|null $fortiexplorer Enable/disable access for FortiExplorer.    enable:Enable FortiExplorer access.    disable:Disable FortiExplorer access.
     *
     * @return self
     */
    public function setFortiexplorer($fortiexplorer)
    {
        $allowedValues = $this->getFortiexplorerAllowableValues();
        if (!is_null($fortiexplorer) && !in_array($fortiexplorer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiexplorer', must be one of '%s'",
                    $fortiexplorer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiexplorer'] = $fortiexplorer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


