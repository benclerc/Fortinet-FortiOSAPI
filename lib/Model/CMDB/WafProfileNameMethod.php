<?php
/**
 * WafProfileNameMethod
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WafProfileNameMethod Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WafProfileNameMethod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_waf_profile__name__method';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'log' => 'string',
        'severity' => 'string',
        'default_allowed_methods' => 'string',
        'method_policy' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMethodPolicy[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'log' => null,
        'severity' => null,
        'default_allowed_methods' => null,
        'method_policy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'log' => 'log',
        'severity' => 'severity',
        'default_allowed_methods' => 'default-allowed-methods',
        'method_policy' => 'method-policy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'log' => 'setLog',
        'severity' => 'setSeverity',
        'default_allowed_methods' => 'setDefaultAllowedMethods',
        'method_policy' => 'setMethodPolicy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'log' => 'getLog',
        'severity' => 'getSeverity',
        'default_allowed_methods' => 'getDefaultAllowedMethods',
        'method_policy' => 'getMethodPolicy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const LOG_ENABLE = 'enable';
    const LOG_DISABLE = 'disable';
    const SEVERITY_HIGH = 'high';
    const SEVERITY_MEDIUM = 'medium';
    const SEVERITY_LOW = 'low';
    const DEFAULT_ALLOWED_METHODS_GET = 'get';
    const DEFAULT_ALLOWED_METHODS_POST = 'post';
    const DEFAULT_ALLOWED_METHODS_PUT = 'put';
    const DEFAULT_ALLOWED_METHODS_HEAD = 'head';
    const DEFAULT_ALLOWED_METHODS_CONNECT = 'connect';
    const DEFAULT_ALLOWED_METHODS_TRACE = 'trace';
    const DEFAULT_ALLOWED_METHODS_OPTIONS = 'options';
    const DEFAULT_ALLOWED_METHODS_DELETE = 'delete';
    const DEFAULT_ALLOWED_METHODS_OTHERS = 'others';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllowableValues()
    {
        return [
            self::LOG_ENABLE,
            self::LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_HIGH,
            self::SEVERITY_MEDIUM,
            self::SEVERITY_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultAllowedMethodsAllowableValues()
    {
        return [
            self::DEFAULT_ALLOWED_METHODS_GET,
            self::DEFAULT_ALLOWED_METHODS_POST,
            self::DEFAULT_ALLOWED_METHODS_PUT,
            self::DEFAULT_ALLOWED_METHODS_HEAD,
            self::DEFAULT_ALLOWED_METHODS_CONNECT,
            self::DEFAULT_ALLOWED_METHODS_TRACE,
            self::DEFAULT_ALLOWED_METHODS_OPTIONS,
            self::DEFAULT_ALLOWED_METHODS_DELETE,
            self::DEFAULT_ALLOWED_METHODS_OTHERS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['default_allowed_methods'] = $data['default_allowed_methods'] ?? null;
        $this->container['method_policy'] = $data['method_policy'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($this->container['log']) && !in_array($this->container['log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log', must be one of '%s'",
                $this->container['log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'severity', must be one of '%s'",
                $this->container['severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultAllowedMethodsAllowableValues();
        if (!is_null($this->container['default_allowed_methods']) && !in_array($this->container['default_allowed_methods'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_allowed_methods', must be one of '%s'",
                $this->container['default_allowed_methods'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['method_policy']) && (count($this->container['method_policy']) > 0)) {
            $invalidProperties[] = "invalid value for 'method_policy', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string|null $log Enable/disable logging.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLog($log)
    {
        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($log) && !in_array($log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log', must be one of '%s'",
                    $log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Severity.    high:High severity    medium:medium severity    low:low severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'severity', must be one of '%s'",
                    $severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets default_allowed_methods
     *
     * @return string|null
     */
    public function getDefaultAllowedMethods()
    {
        return $this->container['default_allowed_methods'];
    }

    /**
     * Sets default_allowed_methods
     *
     * @param string|null $default_allowed_methods Methods.    get:HTTP GET method.    post:HTTP POST method.    put:HTTP PUT method.    head:HTTP HEAD method.    connect:HTTP CONNECT method.    trace:HTTP TRACE method.    options:HTTP OPTIONS method.    delete:HTTP DELETE method.    others:Other HTTP methods.
     *
     * @return self
     */
    public function setDefaultAllowedMethods($default_allowed_methods)
    {
        $allowedValues = $this->getDefaultAllowedMethodsAllowableValues();
        if (!is_null($default_allowed_methods) && !in_array($default_allowed_methods, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_allowed_methods', must be one of '%s'",
                    $default_allowed_methods,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_allowed_methods'] = $default_allowed_methods;

        return $this;
    }

    /**
     * Gets method_policy
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMethodPolicy[]|null
     */
    public function getMethodPolicy()
    {
        return $this->container['method_policy'];
    }

    /**
     * Sets method_policy
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMethodPolicy[]|null $method_policy HTTP method policy.
     *
     * @return self
     */
    public function setMethodPolicy($method_policy)
    {

        if (!is_null($method_policy) && (count($method_policy) > 0)) {
            throw new \InvalidArgumentException('invalid value for $method_policy when calling WafProfileNameMethod., number of items must be less than or equal to 0.');
        }
        $this->container['method_policy'] = $method_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


