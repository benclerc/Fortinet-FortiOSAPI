<?php
/**
 * InlineObject305
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject305 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject305 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_305';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fortiguard_anycast' => 'string',
        'fortiguard_anycast_source' => 'string',
        'protocol' => 'string',
        'port' => 'string',
        'load_balance_servers' => 'int',
        'auto_join_forticloud' => 'string',
        'update_server_location' => 'string',
        'sandbox_region' => 'string',
        'antispam_force_off' => 'string',
        'antispam_cache' => 'string',
        'antispam_cache_ttl' => 'int',
        'antispam_cache_mpercent' => 'int',
        'antispam_license' => 'int',
        'antispam_expiration' => 'int',
        'antispam_timeout' => 'int',
        'outbreak_prevention_force_off' => 'string',
        'outbreak_prevention_cache' => 'string',
        'outbreak_prevention_cache_ttl' => 'int',
        'outbreak_prevention_cache_mpercent' => 'int',
        'outbreak_prevention_license' => 'int',
        'outbreak_prevention_expiration' => 'int',
        'outbreak_prevention_timeout' => 'int',
        'webfilter_force_off' => 'string',
        'webfilter_cache' => 'string',
        'webfilter_cache_ttl' => 'int',
        'webfilter_license' => 'int',
        'webfilter_expiration' => 'int',
        'webfilter_timeout' => 'int',
        'sdns_server_ip' => 'string',
        'sdns_server_port' => 'int',
        'anycast_sdns_server_ip' => 'string',
        'anycast_sdns_server_port' => 'int',
        'sdns_options' => 'string',
        'source_ip' => 'string',
        'source_ip6' => 'string',
        'proxy_server_ip' => 'string',
        'proxy_server_port' => 'int',
        'proxy_username' => 'string',
        'proxy_password' => 'string',
        'ddns_server_ip' => 'string',
        'ddns_server_port' => 'int',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fortiguard_anycast' => null,
        'fortiguard_anycast_source' => null,
        'protocol' => null,
        'port' => null,
        'load_balance_servers' => null,
        'auto_join_forticloud' => null,
        'update_server_location' => null,
        'sandbox_region' => null,
        'antispam_force_off' => null,
        'antispam_cache' => null,
        'antispam_cache_ttl' => null,
        'antispam_cache_mpercent' => null,
        'antispam_license' => null,
        'antispam_expiration' => null,
        'antispam_timeout' => null,
        'outbreak_prevention_force_off' => null,
        'outbreak_prevention_cache' => null,
        'outbreak_prevention_cache_ttl' => null,
        'outbreak_prevention_cache_mpercent' => null,
        'outbreak_prevention_license' => null,
        'outbreak_prevention_expiration' => null,
        'outbreak_prevention_timeout' => null,
        'webfilter_force_off' => null,
        'webfilter_cache' => null,
        'webfilter_cache_ttl' => null,
        'webfilter_license' => null,
        'webfilter_expiration' => null,
        'webfilter_timeout' => null,
        'sdns_server_ip' => null,
        'sdns_server_port' => null,
        'anycast_sdns_server_ip' => 'ipv4',
        'anycast_sdns_server_port' => null,
        'sdns_options' => null,
        'source_ip' => 'ipv4',
        'source_ip6' => 'ipv6',
        'proxy_server_ip' => 'ipv4',
        'proxy_server_port' => null,
        'proxy_username' => null,
        'proxy_password' => 'password',
        'ddns_server_ip' => 'ipv4',
        'ddns_server_port' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fortiguard_anycast' => 'fortiguard-anycast',
        'fortiguard_anycast_source' => 'fortiguard-anycast-source',
        'protocol' => 'protocol',
        'port' => 'port',
        'load_balance_servers' => 'load-balance-servers',
        'auto_join_forticloud' => 'auto-join-forticloud',
        'update_server_location' => 'update-server-location',
        'sandbox_region' => 'sandbox-region',
        'antispam_force_off' => 'antispam-force-off',
        'antispam_cache' => 'antispam-cache',
        'antispam_cache_ttl' => 'antispam-cache-ttl',
        'antispam_cache_mpercent' => 'antispam-cache-mpercent',
        'antispam_license' => 'antispam-license',
        'antispam_expiration' => 'antispam-expiration',
        'antispam_timeout' => 'antispam-timeout',
        'outbreak_prevention_force_off' => 'outbreak-prevention-force-off',
        'outbreak_prevention_cache' => 'outbreak-prevention-cache',
        'outbreak_prevention_cache_ttl' => 'outbreak-prevention-cache-ttl',
        'outbreak_prevention_cache_mpercent' => 'outbreak-prevention-cache-mpercent',
        'outbreak_prevention_license' => 'outbreak-prevention-license',
        'outbreak_prevention_expiration' => 'outbreak-prevention-expiration',
        'outbreak_prevention_timeout' => 'outbreak-prevention-timeout',
        'webfilter_force_off' => 'webfilter-force-off',
        'webfilter_cache' => 'webfilter-cache',
        'webfilter_cache_ttl' => 'webfilter-cache-ttl',
        'webfilter_license' => 'webfilter-license',
        'webfilter_expiration' => 'webfilter-expiration',
        'webfilter_timeout' => 'webfilter-timeout',
        'sdns_server_ip' => 'sdns-server-ip',
        'sdns_server_port' => 'sdns-server-port',
        'anycast_sdns_server_ip' => 'anycast-sdns-server-ip',
        'anycast_sdns_server_port' => 'anycast-sdns-server-port',
        'sdns_options' => 'sdns-options',
        'source_ip' => 'source-ip',
        'source_ip6' => 'source-ip6',
        'proxy_server_ip' => 'proxy-server-ip',
        'proxy_server_port' => 'proxy-server-port',
        'proxy_username' => 'proxy-username',
        'proxy_password' => 'proxy-password',
        'ddns_server_ip' => 'ddns-server-ip',
        'ddns_server_port' => 'ddns-server-port',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fortiguard_anycast' => 'setFortiguardAnycast',
        'fortiguard_anycast_source' => 'setFortiguardAnycastSource',
        'protocol' => 'setProtocol',
        'port' => 'setPort',
        'load_balance_servers' => 'setLoadBalanceServers',
        'auto_join_forticloud' => 'setAutoJoinForticloud',
        'update_server_location' => 'setUpdateServerLocation',
        'sandbox_region' => 'setSandboxRegion',
        'antispam_force_off' => 'setAntispamForceOff',
        'antispam_cache' => 'setAntispamCache',
        'antispam_cache_ttl' => 'setAntispamCacheTtl',
        'antispam_cache_mpercent' => 'setAntispamCacheMpercent',
        'antispam_license' => 'setAntispamLicense',
        'antispam_expiration' => 'setAntispamExpiration',
        'antispam_timeout' => 'setAntispamTimeout',
        'outbreak_prevention_force_off' => 'setOutbreakPreventionForceOff',
        'outbreak_prevention_cache' => 'setOutbreakPreventionCache',
        'outbreak_prevention_cache_ttl' => 'setOutbreakPreventionCacheTtl',
        'outbreak_prevention_cache_mpercent' => 'setOutbreakPreventionCacheMpercent',
        'outbreak_prevention_license' => 'setOutbreakPreventionLicense',
        'outbreak_prevention_expiration' => 'setOutbreakPreventionExpiration',
        'outbreak_prevention_timeout' => 'setOutbreakPreventionTimeout',
        'webfilter_force_off' => 'setWebfilterForceOff',
        'webfilter_cache' => 'setWebfilterCache',
        'webfilter_cache_ttl' => 'setWebfilterCacheTtl',
        'webfilter_license' => 'setWebfilterLicense',
        'webfilter_expiration' => 'setWebfilterExpiration',
        'webfilter_timeout' => 'setWebfilterTimeout',
        'sdns_server_ip' => 'setSdnsServerIp',
        'sdns_server_port' => 'setSdnsServerPort',
        'anycast_sdns_server_ip' => 'setAnycastSdnsServerIp',
        'anycast_sdns_server_port' => 'setAnycastSdnsServerPort',
        'sdns_options' => 'setSdnsOptions',
        'source_ip' => 'setSourceIp',
        'source_ip6' => 'setSourceIp6',
        'proxy_server_ip' => 'setProxyServerIp',
        'proxy_server_port' => 'setProxyServerPort',
        'proxy_username' => 'setProxyUsername',
        'proxy_password' => 'setProxyPassword',
        'ddns_server_ip' => 'setDdnsServerIp',
        'ddns_server_port' => 'setDdnsServerPort',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fortiguard_anycast' => 'getFortiguardAnycast',
        'fortiguard_anycast_source' => 'getFortiguardAnycastSource',
        'protocol' => 'getProtocol',
        'port' => 'getPort',
        'load_balance_servers' => 'getLoadBalanceServers',
        'auto_join_forticloud' => 'getAutoJoinForticloud',
        'update_server_location' => 'getUpdateServerLocation',
        'sandbox_region' => 'getSandboxRegion',
        'antispam_force_off' => 'getAntispamForceOff',
        'antispam_cache' => 'getAntispamCache',
        'antispam_cache_ttl' => 'getAntispamCacheTtl',
        'antispam_cache_mpercent' => 'getAntispamCacheMpercent',
        'antispam_license' => 'getAntispamLicense',
        'antispam_expiration' => 'getAntispamExpiration',
        'antispam_timeout' => 'getAntispamTimeout',
        'outbreak_prevention_force_off' => 'getOutbreakPreventionForceOff',
        'outbreak_prevention_cache' => 'getOutbreakPreventionCache',
        'outbreak_prevention_cache_ttl' => 'getOutbreakPreventionCacheTtl',
        'outbreak_prevention_cache_mpercent' => 'getOutbreakPreventionCacheMpercent',
        'outbreak_prevention_license' => 'getOutbreakPreventionLicense',
        'outbreak_prevention_expiration' => 'getOutbreakPreventionExpiration',
        'outbreak_prevention_timeout' => 'getOutbreakPreventionTimeout',
        'webfilter_force_off' => 'getWebfilterForceOff',
        'webfilter_cache' => 'getWebfilterCache',
        'webfilter_cache_ttl' => 'getWebfilterCacheTtl',
        'webfilter_license' => 'getWebfilterLicense',
        'webfilter_expiration' => 'getWebfilterExpiration',
        'webfilter_timeout' => 'getWebfilterTimeout',
        'sdns_server_ip' => 'getSdnsServerIp',
        'sdns_server_port' => 'getSdnsServerPort',
        'anycast_sdns_server_ip' => 'getAnycastSdnsServerIp',
        'anycast_sdns_server_port' => 'getAnycastSdnsServerPort',
        'sdns_options' => 'getSdnsOptions',
        'source_ip' => 'getSourceIp',
        'source_ip6' => 'getSourceIp6',
        'proxy_server_ip' => 'getProxyServerIp',
        'proxy_server_port' => 'getProxyServerPort',
        'proxy_username' => 'getProxyUsername',
        'proxy_password' => 'getProxyPassword',
        'ddns_server_ip' => 'getDdnsServerIp',
        'ddns_server_port' => 'getDdnsServerPort',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FORTIGUARD_ANYCAST_ENABLE = 'enable';
    const FORTIGUARD_ANYCAST_DISABLE = 'disable';
    const FORTIGUARD_ANYCAST_SOURCE_FORTINET = 'fortinet';
    const FORTIGUARD_ANYCAST_SOURCE_AWS = 'aws';
    const FORTIGUARD_ANYCAST_SOURCE_DEBUG = 'debug';
    const PROTOCOL_UDP = 'udp';
    const PROTOCOL_HTTP = 'http';
    const PROTOCOL_HTTPS = 'https';
    const PORT__8888 = '8888';
    const PORT__53 = '53';
    const PORT__80 = '80';
    const PORT__443 = '443';
    const AUTO_JOIN_FORTICLOUD_ENABLE = 'enable';
    const AUTO_JOIN_FORTICLOUD_DISABLE = 'disable';
    const UPDATE_SERVER_LOCATION_USA = 'usa';
    const UPDATE_SERVER_LOCATION_ANY = 'any';
    const ANTISPAM_FORCE_OFF_ENABLE = 'enable';
    const ANTISPAM_FORCE_OFF_DISABLE = 'disable';
    const ANTISPAM_CACHE_ENABLE = 'enable';
    const ANTISPAM_CACHE_DISABLE = 'disable';
    const OUTBREAK_PREVENTION_FORCE_OFF_ENABLE = 'enable';
    const OUTBREAK_PREVENTION_FORCE_OFF_DISABLE = 'disable';
    const OUTBREAK_PREVENTION_CACHE_ENABLE = 'enable';
    const OUTBREAK_PREVENTION_CACHE_DISABLE = 'disable';
    const WEBFILTER_FORCE_OFF_ENABLE = 'enable';
    const WEBFILTER_FORCE_OFF_DISABLE = 'disable';
    const WEBFILTER_CACHE_ENABLE = 'enable';
    const WEBFILTER_CACHE_DISABLE = 'disable';
    const SDNS_OPTIONS_INCLUDE_QUESTION_SECTION = 'include-question-section';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiguardAnycastAllowableValues()
    {
        return [
            self::FORTIGUARD_ANYCAST_ENABLE,
            self::FORTIGUARD_ANYCAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiguardAnycastSourceAllowableValues()
    {
        return [
            self::FORTIGUARD_ANYCAST_SOURCE_FORTINET,
            self::FORTIGUARD_ANYCAST_SOURCE_AWS,
            self::FORTIGUARD_ANYCAST_SOURCE_DEBUG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_UDP,
            self::PROTOCOL_HTTP,
            self::PROTOCOL_HTTPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortAllowableValues()
    {
        return [
            self::PORT__8888,
            self::PORT__53,
            self::PORT__80,
            self::PORT__443,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoJoinForticloudAllowableValues()
    {
        return [
            self::AUTO_JOIN_FORTICLOUD_ENABLE,
            self::AUTO_JOIN_FORTICLOUD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateServerLocationAllowableValues()
    {
        return [
            self::UPDATE_SERVER_LOCATION_USA,
            self::UPDATE_SERVER_LOCATION_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAntispamForceOffAllowableValues()
    {
        return [
            self::ANTISPAM_FORCE_OFF_ENABLE,
            self::ANTISPAM_FORCE_OFF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAntispamCacheAllowableValues()
    {
        return [
            self::ANTISPAM_CACHE_ENABLE,
            self::ANTISPAM_CACHE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutbreakPreventionForceOffAllowableValues()
    {
        return [
            self::OUTBREAK_PREVENTION_FORCE_OFF_ENABLE,
            self::OUTBREAK_PREVENTION_FORCE_OFF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutbreakPreventionCacheAllowableValues()
    {
        return [
            self::OUTBREAK_PREVENTION_CACHE_ENABLE,
            self::OUTBREAK_PREVENTION_CACHE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebfilterForceOffAllowableValues()
    {
        return [
            self::WEBFILTER_FORCE_OFF_ENABLE,
            self::WEBFILTER_FORCE_OFF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebfilterCacheAllowableValues()
    {
        return [
            self::WEBFILTER_CACHE_ENABLE,
            self::WEBFILTER_CACHE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdnsOptionsAllowableValues()
    {
        return [
            self::SDNS_OPTIONS_INCLUDE_QUESTION_SECTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fortiguard_anycast'] = $data['fortiguard_anycast'] ?? null;
        $this->container['fortiguard_anycast_source'] = $data['fortiguard_anycast_source'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['load_balance_servers'] = $data['load_balance_servers'] ?? null;
        $this->container['auto_join_forticloud'] = $data['auto_join_forticloud'] ?? null;
        $this->container['update_server_location'] = $data['update_server_location'] ?? null;
        $this->container['sandbox_region'] = $data['sandbox_region'] ?? null;
        $this->container['antispam_force_off'] = $data['antispam_force_off'] ?? null;
        $this->container['antispam_cache'] = $data['antispam_cache'] ?? null;
        $this->container['antispam_cache_ttl'] = $data['antispam_cache_ttl'] ?? null;
        $this->container['antispam_cache_mpercent'] = $data['antispam_cache_mpercent'] ?? null;
        $this->container['antispam_license'] = $data['antispam_license'] ?? null;
        $this->container['antispam_expiration'] = $data['antispam_expiration'] ?? null;
        $this->container['antispam_timeout'] = $data['antispam_timeout'] ?? null;
        $this->container['outbreak_prevention_force_off'] = $data['outbreak_prevention_force_off'] ?? null;
        $this->container['outbreak_prevention_cache'] = $data['outbreak_prevention_cache'] ?? null;
        $this->container['outbreak_prevention_cache_ttl'] = $data['outbreak_prevention_cache_ttl'] ?? null;
        $this->container['outbreak_prevention_cache_mpercent'] = $data['outbreak_prevention_cache_mpercent'] ?? null;
        $this->container['outbreak_prevention_license'] = $data['outbreak_prevention_license'] ?? null;
        $this->container['outbreak_prevention_expiration'] = $data['outbreak_prevention_expiration'] ?? null;
        $this->container['outbreak_prevention_timeout'] = $data['outbreak_prevention_timeout'] ?? null;
        $this->container['webfilter_force_off'] = $data['webfilter_force_off'] ?? null;
        $this->container['webfilter_cache'] = $data['webfilter_cache'] ?? null;
        $this->container['webfilter_cache_ttl'] = $data['webfilter_cache_ttl'] ?? null;
        $this->container['webfilter_license'] = $data['webfilter_license'] ?? null;
        $this->container['webfilter_expiration'] = $data['webfilter_expiration'] ?? null;
        $this->container['webfilter_timeout'] = $data['webfilter_timeout'] ?? null;
        $this->container['sdns_server_ip'] = $data['sdns_server_ip'] ?? null;
        $this->container['sdns_server_port'] = $data['sdns_server_port'] ?? null;
        $this->container['anycast_sdns_server_ip'] = $data['anycast_sdns_server_ip'] ?? null;
        $this->container['anycast_sdns_server_port'] = $data['anycast_sdns_server_port'] ?? null;
        $this->container['sdns_options'] = $data['sdns_options'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['source_ip6'] = $data['source_ip6'] ?? null;
        $this->container['proxy_server_ip'] = $data['proxy_server_ip'] ?? null;
        $this->container['proxy_server_port'] = $data['proxy_server_port'] ?? null;
        $this->container['proxy_username'] = $data['proxy_username'] ?? null;
        $this->container['proxy_password'] = $data['proxy_password'] ?? null;
        $this->container['ddns_server_ip'] = $data['ddns_server_ip'] ?? null;
        $this->container['ddns_server_port'] = $data['ddns_server_port'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFortiguardAnycastAllowableValues();
        if (!is_null($this->container['fortiguard_anycast']) && !in_array($this->container['fortiguard_anycast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiguard_anycast', must be one of '%s'",
                $this->container['fortiguard_anycast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiguardAnycastSourceAllowableValues();
        if (!is_null($this->container['fortiguard_anycast_source']) && !in_array($this->container['fortiguard_anycast_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiguard_anycast_source', must be one of '%s'",
                $this->container['fortiguard_anycast_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPortAllowableValues();
        if (!is_null($this->container['port']) && !in_array($this->container['port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port', must be one of '%s'",
                $this->container['port'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['load_balance_servers']) && ($this->container['load_balance_servers'] > 266)) {
            $invalidProperties[] = "invalid value for 'load_balance_servers', must be smaller than or equal to 266.";
        }

        if (!is_null($this->container['load_balance_servers']) && ($this->container['load_balance_servers'] < 1)) {
            $invalidProperties[] = "invalid value for 'load_balance_servers', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAutoJoinForticloudAllowableValues();
        if (!is_null($this->container['auto_join_forticloud']) && !in_array($this->container['auto_join_forticloud'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_join_forticloud', must be one of '%s'",
                $this->container['auto_join_forticloud'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateServerLocationAllowableValues();
        if (!is_null($this->container['update_server_location']) && !in_array($this->container['update_server_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_server_location', must be one of '%s'",
                $this->container['update_server_location'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sandbox_region']) && (mb_strlen($this->container['sandbox_region']) > 63)) {
            $invalidProperties[] = "invalid value for 'sandbox_region', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAntispamForceOffAllowableValues();
        if (!is_null($this->container['antispam_force_off']) && !in_array($this->container['antispam_force_off'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'antispam_force_off', must be one of '%s'",
                $this->container['antispam_force_off'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAntispamCacheAllowableValues();
        if (!is_null($this->container['antispam_cache']) && !in_array($this->container['antispam_cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'antispam_cache', must be one of '%s'",
                $this->container['antispam_cache'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['antispam_cache_ttl']) && ($this->container['antispam_cache_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'antispam_cache_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['antispam_cache_ttl']) && ($this->container['antispam_cache_ttl'] < 300)) {
            $invalidProperties[] = "invalid value for 'antispam_cache_ttl', must be bigger than or equal to 300.";
        }

        if (!is_null($this->container['antispam_cache_mpercent']) && ($this->container['antispam_cache_mpercent'] > 15)) {
            $invalidProperties[] = "invalid value for 'antispam_cache_mpercent', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['antispam_cache_mpercent']) && ($this->container['antispam_cache_mpercent'] < 1)) {
            $invalidProperties[] = "invalid value for 'antispam_cache_mpercent', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['antispam_license']) && ($this->container['antispam_license'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'antispam_license', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['antispam_license']) && ($this->container['antispam_license'] < 0)) {
            $invalidProperties[] = "invalid value for 'antispam_license', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['antispam_expiration']) && ($this->container['antispam_expiration'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'antispam_expiration', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['antispam_expiration']) && ($this->container['antispam_expiration'] < 0)) {
            $invalidProperties[] = "invalid value for 'antispam_expiration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['antispam_timeout']) && ($this->container['antispam_timeout'] > 30)) {
            $invalidProperties[] = "invalid value for 'antispam_timeout', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['antispam_timeout']) && ($this->container['antispam_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'antispam_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getOutbreakPreventionForceOffAllowableValues();
        if (!is_null($this->container['outbreak_prevention_force_off']) && !in_array($this->container['outbreak_prevention_force_off'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outbreak_prevention_force_off', must be one of '%s'",
                $this->container['outbreak_prevention_force_off'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutbreakPreventionCacheAllowableValues();
        if (!is_null($this->container['outbreak_prevention_cache']) && !in_array($this->container['outbreak_prevention_cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outbreak_prevention_cache', must be one of '%s'",
                $this->container['outbreak_prevention_cache'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['outbreak_prevention_cache_ttl']) && ($this->container['outbreak_prevention_cache_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_cache_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['outbreak_prevention_cache_ttl']) && ($this->container['outbreak_prevention_cache_ttl'] < 300)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_cache_ttl', must be bigger than or equal to 300.";
        }

        if (!is_null($this->container['outbreak_prevention_cache_mpercent']) && ($this->container['outbreak_prevention_cache_mpercent'] > 15)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_cache_mpercent', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['outbreak_prevention_cache_mpercent']) && ($this->container['outbreak_prevention_cache_mpercent'] < 1)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_cache_mpercent', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['outbreak_prevention_license']) && ($this->container['outbreak_prevention_license'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_license', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['outbreak_prevention_license']) && ($this->container['outbreak_prevention_license'] < 0)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_license', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outbreak_prevention_expiration']) && ($this->container['outbreak_prevention_expiration'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_expiration', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['outbreak_prevention_expiration']) && ($this->container['outbreak_prevention_expiration'] < 0)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_expiration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outbreak_prevention_timeout']) && ($this->container['outbreak_prevention_timeout'] > 30)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_timeout', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['outbreak_prevention_timeout']) && ($this->container['outbreak_prevention_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getWebfilterForceOffAllowableValues();
        if (!is_null($this->container['webfilter_force_off']) && !in_array($this->container['webfilter_force_off'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'webfilter_force_off', must be one of '%s'",
                $this->container['webfilter_force_off'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebfilterCacheAllowableValues();
        if (!is_null($this->container['webfilter_cache']) && !in_array($this->container['webfilter_cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'webfilter_cache', must be one of '%s'",
                $this->container['webfilter_cache'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['webfilter_cache_ttl']) && ($this->container['webfilter_cache_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'webfilter_cache_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['webfilter_cache_ttl']) && ($this->container['webfilter_cache_ttl'] < 300)) {
            $invalidProperties[] = "invalid value for 'webfilter_cache_ttl', must be bigger than or equal to 300.";
        }

        if (!is_null($this->container['webfilter_license']) && ($this->container['webfilter_license'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'webfilter_license', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['webfilter_license']) && ($this->container['webfilter_license'] < 0)) {
            $invalidProperties[] = "invalid value for 'webfilter_license', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['webfilter_expiration']) && ($this->container['webfilter_expiration'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'webfilter_expiration', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['webfilter_expiration']) && ($this->container['webfilter_expiration'] < 0)) {
            $invalidProperties[] = "invalid value for 'webfilter_expiration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['webfilter_timeout']) && ($this->container['webfilter_timeout'] > 30)) {
            $invalidProperties[] = "invalid value for 'webfilter_timeout', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['webfilter_timeout']) && ($this->container['webfilter_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'webfilter_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sdns_server_port']) && ($this->container['sdns_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'sdns_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['sdns_server_port']) && ($this->container['sdns_server_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'sdns_server_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['anycast_sdns_server_port']) && ($this->container['anycast_sdns_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'anycast_sdns_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['anycast_sdns_server_port']) && ($this->container['anycast_sdns_server_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'anycast_sdns_server_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSdnsOptionsAllowableValues();
        if (!is_null($this->container['sdns_options']) && !in_array($this->container['sdns_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdns_options', must be one of '%s'",
                $this->container['sdns_options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['proxy_server_port']) && ($this->container['proxy_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'proxy_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['proxy_server_port']) && ($this->container['proxy_server_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'proxy_server_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['proxy_username']) && (mb_strlen($this->container['proxy_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'proxy_username', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_server_port']) && ($this->container['ddns_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ddns_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ddns_server_port']) && ($this->container['ddns_server_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'ddns_server_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fortiguard_anycast
     *
     * @return string|null
     */
    public function getFortiguardAnycast()
    {
        return $this->container['fortiguard_anycast'];
    }

    /**
     * Sets fortiguard_anycast
     *
     * @param string|null $fortiguard_anycast Enable/disable use of FortiGuard's anycast network.    enable:Enable use of FortiGuard's anycast network.    disable:Disable use of FortiGuard's anycast network.
     *
     * @return self
     */
    public function setFortiguardAnycast($fortiguard_anycast)
    {
        $allowedValues = $this->getFortiguardAnycastAllowableValues();
        if (!is_null($fortiguard_anycast) && !in_array($fortiguard_anycast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiguard_anycast', must be one of '%s'",
                    $fortiguard_anycast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiguard_anycast'] = $fortiguard_anycast;

        return $this;
    }

    /**
     * Gets fortiguard_anycast_source
     *
     * @return string|null
     */
    public function getFortiguardAnycastSource()
    {
        return $this->container['fortiguard_anycast_source'];
    }

    /**
     * Sets fortiguard_anycast_source
     *
     * @param string|null $fortiguard_anycast_source Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet.    fortinet:Use Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network.    aws:Use Fortinet's AWS servers to provide FortiGuard services in FortiGuard's anycast network.    debug:Use Fortinet's internal test servers to provide FortiGuard services in FortiGuard's anycast network.
     *
     * @return self
     */
    public function setFortiguardAnycastSource($fortiguard_anycast_source)
    {
        $allowedValues = $this->getFortiguardAnycastSourceAllowableValues();
        if (!is_null($fortiguard_anycast_source) && !in_array($fortiguard_anycast_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiguard_anycast_source', must be one of '%s'",
                    $fortiguard_anycast_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiguard_anycast_source'] = $fortiguard_anycast_source;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Protocol used to communicate with the FortiGuard servers.    udp:UDP for server communication (for use by FortiGuard or FortiManager).    http:HTTP for server communication (for use only by FortiManager).    https:HTTPS for server communication (for use by FortiGuard or FortiManager).
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port Port used to communicate with the FortiGuard servers.    8888:port 8888 for server communication.    53:port 53 for server communication.    80:port 80 for server communication.    443:port 443 for server communication.
     *
     * @return self
     */
    public function setPort($port)
    {
        $allowedValues = $this->getPortAllowableValues();
        if (!is_null($port) && !in_array($port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port', must be one of '%s'",
                    $port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets load_balance_servers
     *
     * @return int|null
     */
    public function getLoadBalanceServers()
    {
        return $this->container['load_balance_servers'];
    }

    /**
     * Sets load_balance_servers
     *
     * @param int|null $load_balance_servers Number of servers to alternate between as first FortiGuard option.
     *
     * @return self
     */
    public function setLoadBalanceServers($load_balance_servers)
    {

        if (!is_null($load_balance_servers) && ($load_balance_servers > 266)) {
            throw new \InvalidArgumentException('invalid value for $load_balance_servers when calling InlineObject305., must be smaller than or equal to 266.');
        }
        if (!is_null($load_balance_servers) && ($load_balance_servers < 1)) {
            throw new \InvalidArgumentException('invalid value for $load_balance_servers when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['load_balance_servers'] = $load_balance_servers;

        return $this;
    }

    /**
     * Gets auto_join_forticloud
     *
     * @return string|null
     */
    public function getAutoJoinForticloud()
    {
        return $this->container['auto_join_forticloud'];
    }

    /**
     * Sets auto_join_forticloud
     *
     * @param string|null $auto_join_forticloud Automatically connect to and login to FortiCloud.    enable:Enable automatic connection and login to FortiCloud.    disable:Disable automatic connection and login to FortiCloud.
     *
     * @return self
     */
    public function setAutoJoinForticloud($auto_join_forticloud)
    {
        $allowedValues = $this->getAutoJoinForticloudAllowableValues();
        if (!is_null($auto_join_forticloud) && !in_array($auto_join_forticloud, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_join_forticloud', must be one of '%s'",
                    $auto_join_forticloud,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_join_forticloud'] = $auto_join_forticloud;

        return $this;
    }

    /**
     * Gets update_server_location
     *
     * @return string|null
     */
    public function getUpdateServerLocation()
    {
        return $this->container['update_server_location'];
    }

    /**
     * Sets update_server_location
     *
     * @param string|null $update_server_location Signature update server location.    usa:FGD servers in United States.    any:FGD servers in any location.
     *
     * @return self
     */
    public function setUpdateServerLocation($update_server_location)
    {
        $allowedValues = $this->getUpdateServerLocationAllowableValues();
        if (!is_null($update_server_location) && !in_array($update_server_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_server_location', must be one of '%s'",
                    $update_server_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_server_location'] = $update_server_location;

        return $this;
    }

    /**
     * Gets sandbox_region
     *
     * @return string|null
     */
    public function getSandboxRegion()
    {
        return $this->container['sandbox_region'];
    }

    /**
     * Sets sandbox_region
     *
     * @param string|null $sandbox_region Cloud sandbox region.
     *
     * @return self
     */
    public function setSandboxRegion($sandbox_region)
    {
        if (!is_null($sandbox_region) && (mb_strlen($sandbox_region) > 63)) {
            throw new \InvalidArgumentException('invalid length for $sandbox_region when calling InlineObject305., must be smaller than or equal to 63.');
        }

        $this->container['sandbox_region'] = $sandbox_region;

        return $this;
    }

    /**
     * Gets antispam_force_off
     *
     * @return string|null
     */
    public function getAntispamForceOff()
    {
        return $this->container['antispam_force_off'];
    }

    /**
     * Sets antispam_force_off
     *
     * @param string|null $antispam_force_off Enable/disable turning off the FortiGuard antispam service.    enable:Turn off the FortiGuard antispam service.    disable:Allow the FortiGuard antispam service.
     *
     * @return self
     */
    public function setAntispamForceOff($antispam_force_off)
    {
        $allowedValues = $this->getAntispamForceOffAllowableValues();
        if (!is_null($antispam_force_off) && !in_array($antispam_force_off, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'antispam_force_off', must be one of '%s'",
                    $antispam_force_off,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['antispam_force_off'] = $antispam_force_off;

        return $this;
    }

    /**
     * Gets antispam_cache
     *
     * @return string|null
     */
    public function getAntispamCache()
    {
        return $this->container['antispam_cache'];
    }

    /**
     * Sets antispam_cache
     *
     * @param string|null $antispam_cache Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance.    enable:Enable FortiGuard antispam request caching.    disable:Disable FortiGuard antispam request caching.
     *
     * @return self
     */
    public function setAntispamCache($antispam_cache)
    {
        $allowedValues = $this->getAntispamCacheAllowableValues();
        if (!is_null($antispam_cache) && !in_array($antispam_cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'antispam_cache', must be one of '%s'",
                    $antispam_cache,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['antispam_cache'] = $antispam_cache;

        return $this;
    }

    /**
     * Gets antispam_cache_ttl
     *
     * @return int|null
     */
    public function getAntispamCacheTtl()
    {
        return $this->container['antispam_cache_ttl'];
    }

    /**
     * Sets antispam_cache_ttl
     *
     * @param int|null $antispam_cache_ttl Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
     *
     * @return self
     */
    public function setAntispamCacheTtl($antispam_cache_ttl)
    {

        if (!is_null($antispam_cache_ttl) && ($antispam_cache_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $antispam_cache_ttl when calling InlineObject305., must be smaller than or equal to 86400.');
        }
        if (!is_null($antispam_cache_ttl) && ($antispam_cache_ttl < 300)) {
            throw new \InvalidArgumentException('invalid value for $antispam_cache_ttl when calling InlineObject305., must be bigger than or equal to 300.');
        }

        $this->container['antispam_cache_ttl'] = $antispam_cache_ttl;

        return $this;
    }

    /**
     * Gets antispam_cache_mpercent
     *
     * @return int|null
     */
    public function getAntispamCacheMpercent()
    {
        return $this->container['antispam_cache_mpercent'];
    }

    /**
     * Sets antispam_cache_mpercent
     *
     * @param int|null $antispam_cache_mpercent Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%).
     *
     * @return self
     */
    public function setAntispamCacheMpercent($antispam_cache_mpercent)
    {

        if (!is_null($antispam_cache_mpercent) && ($antispam_cache_mpercent > 15)) {
            throw new \InvalidArgumentException('invalid value for $antispam_cache_mpercent when calling InlineObject305., must be smaller than or equal to 15.');
        }
        if (!is_null($antispam_cache_mpercent) && ($antispam_cache_mpercent < 1)) {
            throw new \InvalidArgumentException('invalid value for $antispam_cache_mpercent when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['antispam_cache_mpercent'] = $antispam_cache_mpercent;

        return $this;
    }

    /**
     * Gets antispam_license
     *
     * @return int|null
     */
    public function getAntispamLicense()
    {
        return $this->container['antispam_license'];
    }

    /**
     * Sets antispam_license
     *
     * @param int|null $antispam_license Interval of time between license checks for the FortiGuard antispam contract.
     *
     * @return self
     */
    public function setAntispamLicense($antispam_license)
    {

        if (!is_null($antispam_license) && ($antispam_license > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $antispam_license when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($antispam_license) && ($antispam_license < 0)) {
            throw new \InvalidArgumentException('invalid value for $antispam_license when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['antispam_license'] = $antispam_license;

        return $this;
    }

    /**
     * Gets antispam_expiration
     *
     * @return int|null
     */
    public function getAntispamExpiration()
    {
        return $this->container['antispam_expiration'];
    }

    /**
     * Sets antispam_expiration
     *
     * @param int|null $antispam_expiration Expiration date of the FortiGuard antispam contract.
     *
     * @return self
     */
    public function setAntispamExpiration($antispam_expiration)
    {

        if (!is_null($antispam_expiration) && ($antispam_expiration > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $antispam_expiration when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($antispam_expiration) && ($antispam_expiration < 0)) {
            throw new \InvalidArgumentException('invalid value for $antispam_expiration when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['antispam_expiration'] = $antispam_expiration;

        return $this;
    }

    /**
     * Gets antispam_timeout
     *
     * @return int|null
     */
    public function getAntispamTimeout()
    {
        return $this->container['antispam_timeout'];
    }

    /**
     * Sets antispam_timeout
     *
     * @param int|null $antispam_timeout Antispam query time out (1 - 30 sec, default = 7).
     *
     * @return self
     */
    public function setAntispamTimeout($antispam_timeout)
    {

        if (!is_null($antispam_timeout) && ($antispam_timeout > 30)) {
            throw new \InvalidArgumentException('invalid value for $antispam_timeout when calling InlineObject305., must be smaller than or equal to 30.');
        }
        if (!is_null($antispam_timeout) && ($antispam_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $antispam_timeout when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['antispam_timeout'] = $antispam_timeout;

        return $this;
    }

    /**
     * Gets outbreak_prevention_force_off
     *
     * @return string|null
     */
    public function getOutbreakPreventionForceOff()
    {
        return $this->container['outbreak_prevention_force_off'];
    }

    /**
     * Sets outbreak_prevention_force_off
     *
     * @param string|null $outbreak_prevention_force_off Turn off FortiGuard Virus Outbreak Prevention service.    enable:Turn off FortiGuard antivirus service.    disable:Allow the FortiGuard antivirus service.
     *
     * @return self
     */
    public function setOutbreakPreventionForceOff($outbreak_prevention_force_off)
    {
        $allowedValues = $this->getOutbreakPreventionForceOffAllowableValues();
        if (!is_null($outbreak_prevention_force_off) && !in_array($outbreak_prevention_force_off, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outbreak_prevention_force_off', must be one of '%s'",
                    $outbreak_prevention_force_off,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outbreak_prevention_force_off'] = $outbreak_prevention_force_off;

        return $this;
    }

    /**
     * Gets outbreak_prevention_cache
     *
     * @return string|null
     */
    public function getOutbreakPreventionCache()
    {
        return $this->container['outbreak_prevention_cache'];
    }

    /**
     * Sets outbreak_prevention_cache
     *
     * @param string|null $outbreak_prevention_cache Enable/disable FortiGuard Virus Outbreak Prevention cache.    enable:Enable FortiGuard antivirus caching.    disable:Disable FortiGuard antivirus caching.
     *
     * @return self
     */
    public function setOutbreakPreventionCache($outbreak_prevention_cache)
    {
        $allowedValues = $this->getOutbreakPreventionCacheAllowableValues();
        if (!is_null($outbreak_prevention_cache) && !in_array($outbreak_prevention_cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outbreak_prevention_cache', must be one of '%s'",
                    $outbreak_prevention_cache,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outbreak_prevention_cache'] = $outbreak_prevention_cache;

        return $this;
    }

    /**
     * Gets outbreak_prevention_cache_ttl
     *
     * @return int|null
     */
    public function getOutbreakPreventionCacheTtl()
    {
        return $this->container['outbreak_prevention_cache_ttl'];
    }

    /**
     * Sets outbreak_prevention_cache_ttl
     *
     * @param int|null $outbreak_prevention_cache_ttl Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
     *
     * @return self
     */
    public function setOutbreakPreventionCacheTtl($outbreak_prevention_cache_ttl)
    {

        if (!is_null($outbreak_prevention_cache_ttl) && ($outbreak_prevention_cache_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_cache_ttl when calling InlineObject305., must be smaller than or equal to 86400.');
        }
        if (!is_null($outbreak_prevention_cache_ttl) && ($outbreak_prevention_cache_ttl < 300)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_cache_ttl when calling InlineObject305., must be bigger than or equal to 300.');
        }

        $this->container['outbreak_prevention_cache_ttl'] = $outbreak_prevention_cache_ttl;

        return $this;
    }

    /**
     * Gets outbreak_prevention_cache_mpercent
     *
     * @return int|null
     */
    public function getOutbreakPreventionCacheMpercent()
    {
        return $this->container['outbreak_prevention_cache_mpercent'];
    }

    /**
     * Sets outbreak_prevention_cache_mpercent
     *
     * @param int|null $outbreak_prevention_cache_mpercent Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%, default = 2).
     *
     * @return self
     */
    public function setOutbreakPreventionCacheMpercent($outbreak_prevention_cache_mpercent)
    {

        if (!is_null($outbreak_prevention_cache_mpercent) && ($outbreak_prevention_cache_mpercent > 15)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_cache_mpercent when calling InlineObject305., must be smaller than or equal to 15.');
        }
        if (!is_null($outbreak_prevention_cache_mpercent) && ($outbreak_prevention_cache_mpercent < 1)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_cache_mpercent when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['outbreak_prevention_cache_mpercent'] = $outbreak_prevention_cache_mpercent;

        return $this;
    }

    /**
     * Gets outbreak_prevention_license
     *
     * @return int|null
     */
    public function getOutbreakPreventionLicense()
    {
        return $this->container['outbreak_prevention_license'];
    }

    /**
     * Sets outbreak_prevention_license
     *
     * @param int|null $outbreak_prevention_license Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
     *
     * @return self
     */
    public function setOutbreakPreventionLicense($outbreak_prevention_license)
    {

        if (!is_null($outbreak_prevention_license) && ($outbreak_prevention_license > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_license when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($outbreak_prevention_license) && ($outbreak_prevention_license < 0)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_license when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['outbreak_prevention_license'] = $outbreak_prevention_license;

        return $this;
    }

    /**
     * Gets outbreak_prevention_expiration
     *
     * @return int|null
     */
    public function getOutbreakPreventionExpiration()
    {
        return $this->container['outbreak_prevention_expiration'];
    }

    /**
     * Sets outbreak_prevention_expiration
     *
     * @param int|null $outbreak_prevention_expiration Expiration date of FortiGuard Virus Outbreak Prevention contract.
     *
     * @return self
     */
    public function setOutbreakPreventionExpiration($outbreak_prevention_expiration)
    {

        if (!is_null($outbreak_prevention_expiration) && ($outbreak_prevention_expiration > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_expiration when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($outbreak_prevention_expiration) && ($outbreak_prevention_expiration < 0)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_expiration when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['outbreak_prevention_expiration'] = $outbreak_prevention_expiration;

        return $this;
    }

    /**
     * Gets outbreak_prevention_timeout
     *
     * @return int|null
     */
    public function getOutbreakPreventionTimeout()
    {
        return $this->container['outbreak_prevention_timeout'];
    }

    /**
     * Sets outbreak_prevention_timeout
     *
     * @param int|null $outbreak_prevention_timeout FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
     *
     * @return self
     */
    public function setOutbreakPreventionTimeout($outbreak_prevention_timeout)
    {

        if (!is_null($outbreak_prevention_timeout) && ($outbreak_prevention_timeout > 30)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_timeout when calling InlineObject305., must be smaller than or equal to 30.');
        }
        if (!is_null($outbreak_prevention_timeout) && ($outbreak_prevention_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention_timeout when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['outbreak_prevention_timeout'] = $outbreak_prevention_timeout;

        return $this;
    }

    /**
     * Gets webfilter_force_off
     *
     * @return string|null
     */
    public function getWebfilterForceOff()
    {
        return $this->container['webfilter_force_off'];
    }

    /**
     * Sets webfilter_force_off
     *
     * @param string|null $webfilter_force_off Enable/disable turning off the FortiGuard web filtering service.    enable:Turn off the FortiGuard web filtering service.    disable:Allow the FortiGuard web filtering service to operate.
     *
     * @return self
     */
    public function setWebfilterForceOff($webfilter_force_off)
    {
        $allowedValues = $this->getWebfilterForceOffAllowableValues();
        if (!is_null($webfilter_force_off) && !in_array($webfilter_force_off, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'webfilter_force_off', must be one of '%s'",
                    $webfilter_force_off,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['webfilter_force_off'] = $webfilter_force_off;

        return $this;
    }

    /**
     * Gets webfilter_cache
     *
     * @return string|null
     */
    public function getWebfilterCache()
    {
        return $this->container['webfilter_cache'];
    }

    /**
     * Sets webfilter_cache
     *
     * @param string|null $webfilter_cache Enable/disable FortiGuard web filter caching.    enable:Enable FortiGuard web filter caching.    disable:Disable FortiGuard web filter caching.
     *
     * @return self
     */
    public function setWebfilterCache($webfilter_cache)
    {
        $allowedValues = $this->getWebfilterCacheAllowableValues();
        if (!is_null($webfilter_cache) && !in_array($webfilter_cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'webfilter_cache', must be one of '%s'",
                    $webfilter_cache,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['webfilter_cache'] = $webfilter_cache;

        return $this;
    }

    /**
     * Gets webfilter_cache_ttl
     *
     * @return int|null
     */
    public function getWebfilterCacheTtl()
    {
        return $this->container['webfilter_cache_ttl'];
    }

    /**
     * Sets webfilter_cache_ttl
     *
     * @param int|null $webfilter_cache_ttl Time-to-live for web filter cache entries in seconds (300 - 86400).
     *
     * @return self
     */
    public function setWebfilterCacheTtl($webfilter_cache_ttl)
    {

        if (!is_null($webfilter_cache_ttl) && ($webfilter_cache_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_cache_ttl when calling InlineObject305., must be smaller than or equal to 86400.');
        }
        if (!is_null($webfilter_cache_ttl) && ($webfilter_cache_ttl < 300)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_cache_ttl when calling InlineObject305., must be bigger than or equal to 300.');
        }

        $this->container['webfilter_cache_ttl'] = $webfilter_cache_ttl;

        return $this;
    }

    /**
     * Gets webfilter_license
     *
     * @return int|null
     */
    public function getWebfilterLicense()
    {
        return $this->container['webfilter_license'];
    }

    /**
     * Sets webfilter_license
     *
     * @param int|null $webfilter_license Interval of time between license checks for the FortiGuard web filter contract.
     *
     * @return self
     */
    public function setWebfilterLicense($webfilter_license)
    {

        if (!is_null($webfilter_license) && ($webfilter_license > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_license when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($webfilter_license) && ($webfilter_license < 0)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_license when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['webfilter_license'] = $webfilter_license;

        return $this;
    }

    /**
     * Gets webfilter_expiration
     *
     * @return int|null
     */
    public function getWebfilterExpiration()
    {
        return $this->container['webfilter_expiration'];
    }

    /**
     * Sets webfilter_expiration
     *
     * @param int|null $webfilter_expiration Expiration date of the FortiGuard web filter contract.
     *
     * @return self
     */
    public function setWebfilterExpiration($webfilter_expiration)
    {

        if (!is_null($webfilter_expiration) && ($webfilter_expiration > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_expiration when calling InlineObject305., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($webfilter_expiration) && ($webfilter_expiration < 0)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_expiration when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['webfilter_expiration'] = $webfilter_expiration;

        return $this;
    }

    /**
     * Gets webfilter_timeout
     *
     * @return int|null
     */
    public function getWebfilterTimeout()
    {
        return $this->container['webfilter_timeout'];
    }

    /**
     * Sets webfilter_timeout
     *
     * @param int|null $webfilter_timeout Web filter query time out (1 - 30 sec, default = 7).
     *
     * @return self
     */
    public function setWebfilterTimeout($webfilter_timeout)
    {

        if (!is_null($webfilter_timeout) && ($webfilter_timeout > 30)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_timeout when calling InlineObject305., must be smaller than or equal to 30.');
        }
        if (!is_null($webfilter_timeout) && ($webfilter_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $webfilter_timeout when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['webfilter_timeout'] = $webfilter_timeout;

        return $this;
    }

    /**
     * Gets sdns_server_ip
     *
     * @return string|null
     */
    public function getSdnsServerIp()
    {
        return $this->container['sdns_server_ip'];
    }

    /**
     * Sets sdns_server_ip
     *
     * @param string|null $sdns_server_ip IP address of the FortiGuard DNS rating server.
     *
     * @return self
     */
    public function setSdnsServerIp($sdns_server_ip)
    {
        $this->container['sdns_server_ip'] = $sdns_server_ip;

        return $this;
    }

    /**
     * Gets sdns_server_port
     *
     * @return int|null
     */
    public function getSdnsServerPort()
    {
        return $this->container['sdns_server_port'];
    }

    /**
     * Sets sdns_server_port
     *
     * @param int|null $sdns_server_port Port to connect to on the FortiGuard DNS rating server.
     *
     * @return self
     */
    public function setSdnsServerPort($sdns_server_port)
    {

        if (!is_null($sdns_server_port) && ($sdns_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $sdns_server_port when calling InlineObject305., must be smaller than or equal to 65535.');
        }
        if (!is_null($sdns_server_port) && ($sdns_server_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $sdns_server_port when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['sdns_server_port'] = $sdns_server_port;

        return $this;
    }

    /**
     * Gets anycast_sdns_server_ip
     *
     * @return string|null
     */
    public function getAnycastSdnsServerIp()
    {
        return $this->container['anycast_sdns_server_ip'];
    }

    /**
     * Sets anycast_sdns_server_ip
     *
     * @param string|null $anycast_sdns_server_ip IP address of the FortiGuard anycast DNS rating server.
     *
     * @return self
     */
    public function setAnycastSdnsServerIp($anycast_sdns_server_ip)
    {
        $this->container['anycast_sdns_server_ip'] = $anycast_sdns_server_ip;

        return $this;
    }

    /**
     * Gets anycast_sdns_server_port
     *
     * @return int|null
     */
    public function getAnycastSdnsServerPort()
    {
        return $this->container['anycast_sdns_server_port'];
    }

    /**
     * Sets anycast_sdns_server_port
     *
     * @param int|null $anycast_sdns_server_port Port to connect to on the FortiGuard anycast DNS rating server.
     *
     * @return self
     */
    public function setAnycastSdnsServerPort($anycast_sdns_server_port)
    {

        if (!is_null($anycast_sdns_server_port) && ($anycast_sdns_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $anycast_sdns_server_port when calling InlineObject305., must be smaller than or equal to 65535.');
        }
        if (!is_null($anycast_sdns_server_port) && ($anycast_sdns_server_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $anycast_sdns_server_port when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['anycast_sdns_server_port'] = $anycast_sdns_server_port;

        return $this;
    }

    /**
     * Gets sdns_options
     *
     * @return string|null
     */
    public function getSdnsOptions()
    {
        return $this->container['sdns_options'];
    }

    /**
     * Sets sdns_options
     *
     * @param string|null $sdns_options Customization options for the FortiGuard DNS service.    include-question-section:Include DNS question section in the FortiGuard DNS setup message.
     *
     * @return self
     */
    public function setSdnsOptions($sdns_options)
    {
        $allowedValues = $this->getSdnsOptionsAllowableValues();
        if (!is_null($sdns_options) && !in_array($sdns_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdns_options', must be one of '%s'",
                    $sdns_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdns_options'] = $sdns_options;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IPv4 address used to communicate with FortiGuard.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip6
     *
     * @return string|null
     */
    public function getSourceIp6()
    {
        return $this->container['source_ip6'];
    }

    /**
     * Sets source_ip6
     *
     * @param string|null $source_ip6 Source IPv6 address used to communicate with FortiGuard.
     *
     * @return self
     */
    public function setSourceIp6($source_ip6)
    {
        $this->container['source_ip6'] = $source_ip6;

        return $this;
    }

    /**
     * Gets proxy_server_ip
     *
     * @return string|null
     */
    public function getProxyServerIp()
    {
        return $this->container['proxy_server_ip'];
    }

    /**
     * Sets proxy_server_ip
     *
     * @param string|null $proxy_server_ip IP address of the proxy server.
     *
     * @return self
     */
    public function setProxyServerIp($proxy_server_ip)
    {
        $this->container['proxy_server_ip'] = $proxy_server_ip;

        return $this;
    }

    /**
     * Gets proxy_server_port
     *
     * @return int|null
     */
    public function getProxyServerPort()
    {
        return $this->container['proxy_server_port'];
    }

    /**
     * Sets proxy_server_port
     *
     * @param int|null $proxy_server_port Port used to communicate with the proxy server.
     *
     * @return self
     */
    public function setProxyServerPort($proxy_server_port)
    {

        if (!is_null($proxy_server_port) && ($proxy_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $proxy_server_port when calling InlineObject305., must be smaller than or equal to 65535.');
        }
        if (!is_null($proxy_server_port) && ($proxy_server_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $proxy_server_port when calling InlineObject305., must be bigger than or equal to 0.');
        }

        $this->container['proxy_server_port'] = $proxy_server_port;

        return $this;
    }

    /**
     * Gets proxy_username
     *
     * @return string|null
     */
    public function getProxyUsername()
    {
        return $this->container['proxy_username'];
    }

    /**
     * Sets proxy_username
     *
     * @param string|null $proxy_username Proxy user name.
     *
     * @return self
     */
    public function setProxyUsername($proxy_username)
    {
        if (!is_null($proxy_username) && (mb_strlen($proxy_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $proxy_username when calling InlineObject305., must be smaller than or equal to 64.');
        }

        $this->container['proxy_username'] = $proxy_username;

        return $this;
    }

    /**
     * Gets proxy_password
     *
     * @return string|null
     */
    public function getProxyPassword()
    {
        return $this->container['proxy_password'];
    }

    /**
     * Sets proxy_password
     *
     * @param string|null $proxy_password Proxy user password.
     *
     * @return self
     */
    public function setProxyPassword($proxy_password)
    {
        $this->container['proxy_password'] = $proxy_password;

        return $this;
    }

    /**
     * Gets ddns_server_ip
     *
     * @return string|null
     */
    public function getDdnsServerIp()
    {
        return $this->container['ddns_server_ip'];
    }

    /**
     * Sets ddns_server_ip
     *
     * @param string|null $ddns_server_ip IP address of the FortiDDNS server.
     *
     * @return self
     */
    public function setDdnsServerIp($ddns_server_ip)
    {
        $this->container['ddns_server_ip'] = $ddns_server_ip;

        return $this;
    }

    /**
     * Gets ddns_server_port
     *
     * @return int|null
     */
    public function getDdnsServerPort()
    {
        return $this->container['ddns_server_port'];
    }

    /**
     * Sets ddns_server_port
     *
     * @param int|null $ddns_server_port Port used to communicate with FortiDDNS servers.
     *
     * @return self
     */
    public function setDdnsServerPort($ddns_server_port)
    {

        if (!is_null($ddns_server_port) && ($ddns_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ddns_server_port when calling InlineObject305., must be smaller than or equal to 65535.');
        }
        if (!is_null($ddns_server_port) && ($ddns_server_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $ddns_server_port when calling InlineObject305., must be bigger than or equal to 1.');
        }

        $this->container['ddns_server_port'] = $ddns_server_port;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject305., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


