<?php
/**
 * InlineObject3
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject3 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'replacemsg_group' => 'string',
        'feature_set' => 'string',
        'ftgd_analytics' => 'string',
        'analytics_max_upload' => 'int',
        'analytics_wl_filetype' => 'int',
        'analytics_bl_filetype' => 'int',
        'analytics_db' => 'string',
        'mobile_malware_db' => 'string',
        'http' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameHttp[]',
        'ftp' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameFtp[]',
        'imap' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameImap[]',
        'pop3' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNamePop3[]',
        'smtp' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSmtp[]',
        'mapi' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameMapi[]',
        'nntp' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNntp[]',
        'cifs' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameCifs[]',
        'ssh' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSsh[]',
        'nac_quar' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNacQuar[]',
        'outbreak_prevention' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameOutbreakPrevention[]',
        'content_disarm' => '\Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameContentDisarm[]',
        'av_virus_log' => 'string',
        'av_block_log' => 'string',
        'extended_log' => 'string',
        'scan_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'replacemsg_group' => null,
        'feature_set' => null,
        'ftgd_analytics' => null,
        'analytics_max_upload' => null,
        'analytics_wl_filetype' => null,
        'analytics_bl_filetype' => null,
        'analytics_db' => null,
        'mobile_malware_db' => null,
        'http' => null,
        'ftp' => null,
        'imap' => null,
        'pop3' => null,
        'smtp' => null,
        'mapi' => null,
        'nntp' => null,
        'cifs' => null,
        'ssh' => null,
        'nac_quar' => null,
        'outbreak_prevention' => null,
        'content_disarm' => null,
        'av_virus_log' => null,
        'av_block_log' => null,
        'extended_log' => null,
        'scan_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'replacemsg_group' => 'replacemsg-group',
        'feature_set' => 'feature-set',
        'ftgd_analytics' => 'ftgd-analytics',
        'analytics_max_upload' => 'analytics-max-upload',
        'analytics_wl_filetype' => 'analytics-wl-filetype',
        'analytics_bl_filetype' => 'analytics-bl-filetype',
        'analytics_db' => 'analytics-db',
        'mobile_malware_db' => 'mobile-malware-db',
        'http' => 'http',
        'ftp' => 'ftp',
        'imap' => 'imap',
        'pop3' => 'pop3',
        'smtp' => 'smtp',
        'mapi' => 'mapi',
        'nntp' => 'nntp',
        'cifs' => 'cifs',
        'ssh' => 'ssh',
        'nac_quar' => 'nac-quar',
        'outbreak_prevention' => 'outbreak-prevention',
        'content_disarm' => 'content-disarm',
        'av_virus_log' => 'av-virus-log',
        'av_block_log' => 'av-block-log',
        'extended_log' => 'extended-log',
        'scan_mode' => 'scan-mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'replacemsg_group' => 'setReplacemsgGroup',
        'feature_set' => 'setFeatureSet',
        'ftgd_analytics' => 'setFtgdAnalytics',
        'analytics_max_upload' => 'setAnalyticsMaxUpload',
        'analytics_wl_filetype' => 'setAnalyticsWlFiletype',
        'analytics_bl_filetype' => 'setAnalyticsBlFiletype',
        'analytics_db' => 'setAnalyticsDb',
        'mobile_malware_db' => 'setMobileMalwareDb',
        'http' => 'setHttp',
        'ftp' => 'setFtp',
        'imap' => 'setImap',
        'pop3' => 'setPop3',
        'smtp' => 'setSmtp',
        'mapi' => 'setMapi',
        'nntp' => 'setNntp',
        'cifs' => 'setCifs',
        'ssh' => 'setSsh',
        'nac_quar' => 'setNacQuar',
        'outbreak_prevention' => 'setOutbreakPrevention',
        'content_disarm' => 'setContentDisarm',
        'av_virus_log' => 'setAvVirusLog',
        'av_block_log' => 'setAvBlockLog',
        'extended_log' => 'setExtendedLog',
        'scan_mode' => 'setScanMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'replacemsg_group' => 'getReplacemsgGroup',
        'feature_set' => 'getFeatureSet',
        'ftgd_analytics' => 'getFtgdAnalytics',
        'analytics_max_upload' => 'getAnalyticsMaxUpload',
        'analytics_wl_filetype' => 'getAnalyticsWlFiletype',
        'analytics_bl_filetype' => 'getAnalyticsBlFiletype',
        'analytics_db' => 'getAnalyticsDb',
        'mobile_malware_db' => 'getMobileMalwareDb',
        'http' => 'getHttp',
        'ftp' => 'getFtp',
        'imap' => 'getImap',
        'pop3' => 'getPop3',
        'smtp' => 'getSmtp',
        'mapi' => 'getMapi',
        'nntp' => 'getNntp',
        'cifs' => 'getCifs',
        'ssh' => 'getSsh',
        'nac_quar' => 'getNacQuar',
        'outbreak_prevention' => 'getOutbreakPrevention',
        'content_disarm' => 'getContentDisarm',
        'av_virus_log' => 'getAvVirusLog',
        'av_block_log' => 'getAvBlockLog',
        'extended_log' => 'getExtendedLog',
        'scan_mode' => 'getScanMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FEATURE_SET_FLOW = 'flow';
    const FEATURE_SET_PROXY = 'proxy';
    const FTGD_ANALYTICS_DISABLE = 'disable';
    const FTGD_ANALYTICS_SUSPICIOUS = 'suspicious';
    const FTGD_ANALYTICS_EVERYTHING = 'everything';
    const ANALYTICS_DB_DISABLE = 'disable';
    const ANALYTICS_DB_ENABLE = 'enable';
    const MOBILE_MALWARE_DB_DISABLE = 'disable';
    const MOBILE_MALWARE_DB_ENABLE = 'enable';
    const AV_VIRUS_LOG_ENABLE = 'enable';
    const AV_VIRUS_LOG_DISABLE = 'disable';
    const AV_BLOCK_LOG_ENABLE = 'enable';
    const AV_BLOCK_LOG_DISABLE = 'disable';
    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    const SCAN_MODE__DEFAULT = 'default';
    const SCAN_MODE_LEGACY = 'legacy';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureSetAllowableValues()
    {
        return [
            self::FEATURE_SET_FLOW,
            self::FEATURE_SET_PROXY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtgdAnalyticsAllowableValues()
    {
        return [
            self::FTGD_ANALYTICS_DISABLE,
            self::FTGD_ANALYTICS_SUSPICIOUS,
            self::FTGD_ANALYTICS_EVERYTHING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAnalyticsDbAllowableValues()
    {
        return [
            self::ANALYTICS_DB_DISABLE,
            self::ANALYTICS_DB_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMobileMalwareDbAllowableValues()
    {
        return [
            self::MOBILE_MALWARE_DB_DISABLE,
            self::MOBILE_MALWARE_DB_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvVirusLogAllowableValues()
    {
        return [
            self::AV_VIRUS_LOG_ENABLE,
            self::AV_VIRUS_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvBlockLogAllowableValues()
    {
        return [
            self::AV_BLOCK_LOG_ENABLE,
            self::AV_BLOCK_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScanModeAllowableValues()
    {
        return [
            self::SCAN_MODE__DEFAULT,
            self::SCAN_MODE_LEGACY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['feature_set'] = $data['feature_set'] ?? null;
        $this->container['ftgd_analytics'] = $data['ftgd_analytics'] ?? null;
        $this->container['analytics_max_upload'] = $data['analytics_max_upload'] ?? null;
        $this->container['analytics_wl_filetype'] = $data['analytics_wl_filetype'] ?? null;
        $this->container['analytics_bl_filetype'] = $data['analytics_bl_filetype'] ?? null;
        $this->container['analytics_db'] = $data['analytics_db'] ?? null;
        $this->container['mobile_malware_db'] = $data['mobile_malware_db'] ?? null;
        $this->container['http'] = $data['http'] ?? null;
        $this->container['ftp'] = $data['ftp'] ?? null;
        $this->container['imap'] = $data['imap'] ?? null;
        $this->container['pop3'] = $data['pop3'] ?? null;
        $this->container['smtp'] = $data['smtp'] ?? null;
        $this->container['mapi'] = $data['mapi'] ?? null;
        $this->container['nntp'] = $data['nntp'] ?? null;
        $this->container['cifs'] = $data['cifs'] ?? null;
        $this->container['ssh'] = $data['ssh'] ?? null;
        $this->container['nac_quar'] = $data['nac_quar'] ?? null;
        $this->container['outbreak_prevention'] = $data['outbreak_prevention'] ?? null;
        $this->container['content_disarm'] = $data['content_disarm'] ?? null;
        $this->container['av_virus_log'] = $data['av_virus_log'] ?? null;
        $this->container['av_block_log'] = $data['av_block_log'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['scan_mode'] = $data['scan_mode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($this->container['feature_set']) && !in_array($this->container['feature_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature_set', must be one of '%s'",
                $this->container['feature_set'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFtgdAnalyticsAllowableValues();
        if (!is_null($this->container['ftgd_analytics']) && !in_array($this->container['ftgd_analytics'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ftgd_analytics', must be one of '%s'",
                $this->container['ftgd_analytics'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['analytics_max_upload']) && ($this->container['analytics_max_upload'] > 383)) {
            $invalidProperties[] = "invalid value for 'analytics_max_upload', must be smaller than or equal to 383.";
        }

        if (!is_null($this->container['analytics_max_upload']) && ($this->container['analytics_max_upload'] < 1)) {
            $invalidProperties[] = "invalid value for 'analytics_max_upload', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['analytics_wl_filetype']) && ($this->container['analytics_wl_filetype'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'analytics_wl_filetype', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['analytics_wl_filetype']) && ($this->container['analytics_wl_filetype'] < 0)) {
            $invalidProperties[] = "invalid value for 'analytics_wl_filetype', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['analytics_bl_filetype']) && ($this->container['analytics_bl_filetype'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'analytics_bl_filetype', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['analytics_bl_filetype']) && ($this->container['analytics_bl_filetype'] < 0)) {
            $invalidProperties[] = "invalid value for 'analytics_bl_filetype', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAnalyticsDbAllowableValues();
        if (!is_null($this->container['analytics_db']) && !in_array($this->container['analytics_db'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'analytics_db', must be one of '%s'",
                $this->container['analytics_db'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMobileMalwareDbAllowableValues();
        if (!is_null($this->container['mobile_malware_db']) && !in_array($this->container['mobile_malware_db'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mobile_malware_db', must be one of '%s'",
                $this->container['mobile_malware_db'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['http']) && (count($this->container['http']) > 0)) {
            $invalidProperties[] = "invalid value for 'http', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ftp']) && (count($this->container['ftp']) > 0)) {
            $invalidProperties[] = "invalid value for 'ftp', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['imap']) && (count($this->container['imap']) > 0)) {
            $invalidProperties[] = "invalid value for 'imap', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['pop3']) && (count($this->container['pop3']) > 0)) {
            $invalidProperties[] = "invalid value for 'pop3', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['smtp']) && (count($this->container['smtp']) > 0)) {
            $invalidProperties[] = "invalid value for 'smtp', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['mapi']) && (count($this->container['mapi']) > 0)) {
            $invalidProperties[] = "invalid value for 'mapi', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['nntp']) && (count($this->container['nntp']) > 0)) {
            $invalidProperties[] = "invalid value for 'nntp', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['cifs']) && (count($this->container['cifs']) > 0)) {
            $invalidProperties[] = "invalid value for 'cifs', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ssh']) && (count($this->container['ssh']) > 0)) {
            $invalidProperties[] = "invalid value for 'ssh', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['nac_quar']) && (count($this->container['nac_quar']) > 0)) {
            $invalidProperties[] = "invalid value for 'nac_quar', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['outbreak_prevention']) && (count($this->container['outbreak_prevention']) > 0)) {
            $invalidProperties[] = "invalid value for 'outbreak_prevention', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['content_disarm']) && (count($this->container['content_disarm']) > 0)) {
            $invalidProperties[] = "invalid value for 'content_disarm', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAvVirusLogAllowableValues();
        if (!is_null($this->container['av_virus_log']) && !in_array($this->container['av_virus_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'av_virus_log', must be one of '%s'",
                $this->container['av_virus_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvBlockLogAllowableValues();
        if (!is_null($this->container['av_block_log']) && !in_array($this->container['av_block_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'av_block_log', must be one of '%s'",
                $this->container['av_block_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScanModeAllowableValues();
        if (!is_null($this->container['scan_mode']) && !in_array($this->container['scan_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scan_mode', must be one of '%s'",
                $this->container['scan_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject3., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject3., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group customized for this profile.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject3., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return string|null
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param string|null $feature_set Flow/proxy feature set.    flow:Flow feature set.    proxy:Proxy feature set.
     *
     * @return self
     */
    public function setFeatureSet($feature_set)
    {
        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($feature_set) && !in_array($feature_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature_set', must be one of '%s'",
                    $feature_set,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets ftgd_analytics
     *
     * @return string|null
     */
    public function getFtgdAnalytics()
    {
        return $this->container['ftgd_analytics'];
    }

    /**
     * Sets ftgd_analytics
     *
     * @param string|null $ftgd_analytics Settings to control which files are uploaded to FortiSandbox.    disable:Do not upload files to FortiSandbox.    suspicious:Submit files supported by FortiSandbox if heuristics or other methods determine they are suspicious.    everything:Submit all files scanned by AntiVirus to FortiSandbox. AntiVirus may not scan all files.
     *
     * @return self
     */
    public function setFtgdAnalytics($ftgd_analytics)
    {
        $allowedValues = $this->getFtgdAnalyticsAllowableValues();
        if (!is_null($ftgd_analytics) && !in_array($ftgd_analytics, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ftgd_analytics', must be one of '%s'",
                    $ftgd_analytics,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ftgd_analytics'] = $ftgd_analytics;

        return $this;
    }

    /**
     * Gets analytics_max_upload
     *
     * @return int|null
     */
    public function getAnalyticsMaxUpload()
    {
        return $this->container['analytics_max_upload'];
    }

    /**
     * Sets analytics_max_upload
     *
     * @param int|null $analytics_max_upload Maximum size of files that can be uploaded to FortiSandbox (1 - 395 MBytes, default = 10).
     *
     * @return self
     */
    public function setAnalyticsMaxUpload($analytics_max_upload)
    {

        if (!is_null($analytics_max_upload) && ($analytics_max_upload > 383)) {
            throw new \InvalidArgumentException('invalid value for $analytics_max_upload when calling InlineObject3., must be smaller than or equal to 383.');
        }
        if (!is_null($analytics_max_upload) && ($analytics_max_upload < 1)) {
            throw new \InvalidArgumentException('invalid value for $analytics_max_upload when calling InlineObject3., must be bigger than or equal to 1.');
        }

        $this->container['analytics_max_upload'] = $analytics_max_upload;

        return $this;
    }

    /**
     * Gets analytics_wl_filetype
     *
     * @return int|null
     */
    public function getAnalyticsWlFiletype()
    {
        return $this->container['analytics_wl_filetype'];
    }

    /**
     * Sets analytics_wl_filetype
     *
     * @param int|null $analytics_wl_filetype Do not submit files matching this DLP file-pattern to FortiSandbox.
     *
     * @return self
     */
    public function setAnalyticsWlFiletype($analytics_wl_filetype)
    {

        if (!is_null($analytics_wl_filetype) && ($analytics_wl_filetype > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $analytics_wl_filetype when calling InlineObject3., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($analytics_wl_filetype) && ($analytics_wl_filetype < 0)) {
            throw new \InvalidArgumentException('invalid value for $analytics_wl_filetype when calling InlineObject3., must be bigger than or equal to 0.');
        }

        $this->container['analytics_wl_filetype'] = $analytics_wl_filetype;

        return $this;
    }

    /**
     * Gets analytics_bl_filetype
     *
     * @return int|null
     */
    public function getAnalyticsBlFiletype()
    {
        return $this->container['analytics_bl_filetype'];
    }

    /**
     * Sets analytics_bl_filetype
     *
     * @param int|null $analytics_bl_filetype Only submit files matching this DLP file-pattern to FortiSandbox.
     *
     * @return self
     */
    public function setAnalyticsBlFiletype($analytics_bl_filetype)
    {

        if (!is_null($analytics_bl_filetype) && ($analytics_bl_filetype > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $analytics_bl_filetype when calling InlineObject3., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($analytics_bl_filetype) && ($analytics_bl_filetype < 0)) {
            throw new \InvalidArgumentException('invalid value for $analytics_bl_filetype when calling InlineObject3., must be bigger than or equal to 0.');
        }

        $this->container['analytics_bl_filetype'] = $analytics_bl_filetype;

        return $this;
    }

    /**
     * Gets analytics_db
     *
     * @return string|null
     */
    public function getAnalyticsDb()
    {
        return $this->container['analytics_db'];
    }

    /**
     * Sets analytics_db
     *
     * @param string|null $analytics_db Enable/disable using the FortiSandbox signature database to supplement the AV signature databases.    disable:Use only the standard AV signature databases.    enable:Also use the FortiSandbox signature database.
     *
     * @return self
     */
    public function setAnalyticsDb($analytics_db)
    {
        $allowedValues = $this->getAnalyticsDbAllowableValues();
        if (!is_null($analytics_db) && !in_array($analytics_db, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'analytics_db', must be one of '%s'",
                    $analytics_db,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['analytics_db'] = $analytics_db;

        return $this;
    }

    /**
     * Gets mobile_malware_db
     *
     * @return string|null
     */
    public function getMobileMalwareDb()
    {
        return $this->container['mobile_malware_db'];
    }

    /**
     * Sets mobile_malware_db
     *
     * @param string|null $mobile_malware_db Enable/disable using the mobile malware signature database.    disable:Do not use the mobile malware signature database.    enable:Also use the mobile malware signature database.
     *
     * @return self
     */
    public function setMobileMalwareDb($mobile_malware_db)
    {
        $allowedValues = $this->getMobileMalwareDbAllowableValues();
        if (!is_null($mobile_malware_db) && !in_array($mobile_malware_db, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mobile_malware_db', must be one of '%s'",
                    $mobile_malware_db,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mobile_malware_db'] = $mobile_malware_db;

        return $this;
    }

    /**
     * Gets http
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameHttp[]|null
     */
    public function getHttp()
    {
        return $this->container['http'];
    }

    /**
     * Sets http
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameHttp[]|null $http Configure HTTP AntiVirus options.
     *
     * @return self
     */
    public function setHttp($http)
    {

        if (!is_null($http) && (count($http) > 0)) {
            throw new \InvalidArgumentException('invalid value for $http when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['http'] = $http;

        return $this;
    }

    /**
     * Gets ftp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameFtp[]|null
     */
    public function getFtp()
    {
        return $this->container['ftp'];
    }

    /**
     * Sets ftp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameFtp[]|null $ftp Configure FTP AntiVirus options.
     *
     * @return self
     */
    public function setFtp($ftp)
    {

        if (!is_null($ftp) && (count($ftp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ftp when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['ftp'] = $ftp;

        return $this;
    }

    /**
     * Gets imap
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameImap[]|null
     */
    public function getImap()
    {
        return $this->container['imap'];
    }

    /**
     * Sets imap
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameImap[]|null $imap Configure IMAP AntiVirus options.
     *
     * @return self
     */
    public function setImap($imap)
    {

        if (!is_null($imap) && (count($imap) > 0)) {
            throw new \InvalidArgumentException('invalid value for $imap when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['imap'] = $imap;

        return $this;
    }

    /**
     * Gets pop3
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNamePop3[]|null
     */
    public function getPop3()
    {
        return $this->container['pop3'];
    }

    /**
     * Sets pop3
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNamePop3[]|null $pop3 Configure POP3 AntiVirus options.
     *
     * @return self
     */
    public function setPop3($pop3)
    {

        if (!is_null($pop3) && (count($pop3) > 0)) {
            throw new \InvalidArgumentException('invalid value for $pop3 when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['pop3'] = $pop3;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSmtp[]|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSmtp[]|null $smtp Configure SMTP AntiVirus options.
     *
     * @return self
     */
    public function setSmtp($smtp)
    {

        if (!is_null($smtp) && (count($smtp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $smtp when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets mapi
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameMapi[]|null
     */
    public function getMapi()
    {
        return $this->container['mapi'];
    }

    /**
     * Sets mapi
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameMapi[]|null $mapi Configure MAPI AntiVirus options.
     *
     * @return self
     */
    public function setMapi($mapi)
    {

        if (!is_null($mapi) && (count($mapi) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mapi when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['mapi'] = $mapi;

        return $this;
    }

    /**
     * Gets nntp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNntp[]|null
     */
    public function getNntp()
    {
        return $this->container['nntp'];
    }

    /**
     * Sets nntp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNntp[]|null $nntp Configure NNTP AntiVirus options.
     *
     * @return self
     */
    public function setNntp($nntp)
    {

        if (!is_null($nntp) && (count($nntp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $nntp when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['nntp'] = $nntp;

        return $this;
    }

    /**
     * Gets cifs
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameCifs[]|null
     */
    public function getCifs()
    {
        return $this->container['cifs'];
    }

    /**
     * Sets cifs
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameCifs[]|null $cifs Configure CIFS AntiVirus options.
     *
     * @return self
     */
    public function setCifs($cifs)
    {

        if (!is_null($cifs) && (count($cifs) > 0)) {
            throw new \InvalidArgumentException('invalid value for $cifs when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['cifs'] = $cifs;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSsh[]|null
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameSsh[]|null $ssh Configure SFTP and SCP AntiVirus options.
     *
     * @return self
     */
    public function setSsh($ssh)
    {

        if (!is_null($ssh) && (count($ssh) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ssh when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['ssh'] = $ssh;

        return $this;
    }

    /**
     * Gets nac_quar
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNacQuar[]|null
     */
    public function getNacQuar()
    {
        return $this->container['nac_quar'];
    }

    /**
     * Sets nac_quar
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameNacQuar[]|null $nac_quar Configure AntiVirus quarantine settings.
     *
     * @return self
     */
    public function setNacQuar($nac_quar)
    {

        if (!is_null($nac_quar) && (count($nac_quar) > 0)) {
            throw new \InvalidArgumentException('invalid value for $nac_quar when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['nac_quar'] = $nac_quar;

        return $this;
    }

    /**
     * Gets outbreak_prevention
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameOutbreakPrevention[]|null
     */
    public function getOutbreakPrevention()
    {
        return $this->container['outbreak_prevention'];
    }

    /**
     * Sets outbreak_prevention
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameOutbreakPrevention[]|null $outbreak_prevention Configure Virus Outbreak Prevention settings.
     *
     * @return self
     */
    public function setOutbreakPrevention($outbreak_prevention)
    {

        if (!is_null($outbreak_prevention) && (count($outbreak_prevention) > 0)) {
            throw new \InvalidArgumentException('invalid value for $outbreak_prevention when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['outbreak_prevention'] = $outbreak_prevention;

        return $this;
    }

    /**
     * Gets content_disarm
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameContentDisarm[]|null
     */
    public function getContentDisarm()
    {
        return $this->container['content_disarm'];
    }

    /**
     * Sets content_disarm
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AntivirusProfileNameContentDisarm[]|null $content_disarm AV Content Disarm and Reconstruction settings.
     *
     * @return self
     */
    public function setContentDisarm($content_disarm)
    {

        if (!is_null($content_disarm) && (count($content_disarm) > 0)) {
            throw new \InvalidArgumentException('invalid value for $content_disarm when calling InlineObject3., number of items must be less than or equal to 0.');
        }
        $this->container['content_disarm'] = $content_disarm;

        return $this;
    }

    /**
     * Gets av_virus_log
     *
     * @return string|null
     */
    public function getAvVirusLog()
    {
        return $this->container['av_virus_log'];
    }

    /**
     * Sets av_virus_log
     *
     * @param string|null $av_virus_log Enable/disable AntiVirus logging.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAvVirusLog($av_virus_log)
    {
        $allowedValues = $this->getAvVirusLogAllowableValues();
        if (!is_null($av_virus_log) && !in_array($av_virus_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'av_virus_log', must be one of '%s'",
                    $av_virus_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['av_virus_log'] = $av_virus_log;

        return $this;
    }

    /**
     * Gets av_block_log
     *
     * @return string|null
     */
    public function getAvBlockLog()
    {
        return $this->container['av_block_log'];
    }

    /**
     * Sets av_block_log
     *
     * @param string|null $av_block_log Enable/disable logging for AntiVirus file blocking.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAvBlockLog($av_block_log)
    {
        $allowedValues = $this->getAvBlockLogAllowableValues();
        if (!is_null($av_block_log) && !in_array($av_block_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'av_block_log', must be one of '%s'",
                    $av_block_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['av_block_log'] = $av_block_log;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging for antivirus.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets scan_mode
     *
     * @return string|null
     */
    public function getScanMode()
    {
        return $this->container['scan_mode'];
    }

    /**
     * Sets scan_mode
     *
     * @param string|null $scan_mode Choose between default scan mode and legacy scan mode.     default:On the fly decompression and scanning of certain archive files.    legacy:Scan archive files only after the entire file is received.
     *
     * @return self
     */
    public function setScanMode($scan_mode)
    {
        $allowedValues = $this->getScanModeAllowableValues();
        if (!is_null($scan_mode) && !in_array($scan_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scan_mode', must be one of '%s'",
                    $scan_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scan_mode'] = $scan_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


