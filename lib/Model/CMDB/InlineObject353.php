<?php
/**
 * InlineObject353
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject353 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject353 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_353';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'apply_to' => 'string',
        'minimum_length' => 'int',
        'min_lower_case_letter' => 'int',
        'min_upper_case_letter' => 'int',
        'min_non_alphanumeric' => 'int',
        'min_number' => 'int',
        'change_4_characters' => 'string',
        'expire_status' => 'string',
        'expire_day' => 'int',
        'reuse_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'apply_to' => null,
        'minimum_length' => null,
        'min_lower_case_letter' => null,
        'min_upper_case_letter' => null,
        'min_non_alphanumeric' => null,
        'min_number' => null,
        'change_4_characters' => null,
        'expire_status' => null,
        'expire_day' => null,
        'reuse_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'apply_to' => 'apply-to',
        'minimum_length' => 'minimum-length',
        'min_lower_case_letter' => 'min-lower-case-letter',
        'min_upper_case_letter' => 'min-upper-case-letter',
        'min_non_alphanumeric' => 'min-non-alphanumeric',
        'min_number' => 'min-number',
        'change_4_characters' => 'change-4-characters',
        'expire_status' => 'expire-status',
        'expire_day' => 'expire-day',
        'reuse_password' => 'reuse-password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'apply_to' => 'setApplyTo',
        'minimum_length' => 'setMinimumLength',
        'min_lower_case_letter' => 'setMinLowerCaseLetter',
        'min_upper_case_letter' => 'setMinUpperCaseLetter',
        'min_non_alphanumeric' => 'setMinNonAlphanumeric',
        'min_number' => 'setMinNumber',
        'change_4_characters' => 'setChange4Characters',
        'expire_status' => 'setExpireStatus',
        'expire_day' => 'setExpireDay',
        'reuse_password' => 'setReusePassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'apply_to' => 'getApplyTo',
        'minimum_length' => 'getMinimumLength',
        'min_lower_case_letter' => 'getMinLowerCaseLetter',
        'min_upper_case_letter' => 'getMinUpperCaseLetter',
        'min_non_alphanumeric' => 'getMinNonAlphanumeric',
        'min_number' => 'getMinNumber',
        'change_4_characters' => 'getChange4Characters',
        'expire_status' => 'getExpireStatus',
        'expire_day' => 'getExpireDay',
        'reuse_password' => 'getReusePassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const APPLY_TO_GUEST_ADMIN_PASSWORD = 'guest-admin-password';
    const CHANGE_4_CHARACTERS_ENABLE = 'enable';
    const CHANGE_4_CHARACTERS_DISABLE = 'disable';
    const EXPIRE_STATUS_ENABLE = 'enable';
    const EXPIRE_STATUS_DISABLE = 'disable';
    const REUSE_PASSWORD_ENABLE = 'enable';
    const REUSE_PASSWORD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplyToAllowableValues()
    {
        return [
            self::APPLY_TO_GUEST_ADMIN_PASSWORD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChange4CharactersAllowableValues()
    {
        return [
            self::CHANGE_4_CHARACTERS_ENABLE,
            self::CHANGE_4_CHARACTERS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpireStatusAllowableValues()
    {
        return [
            self::EXPIRE_STATUS_ENABLE,
            self::EXPIRE_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReusePasswordAllowableValues()
    {
        return [
            self::REUSE_PASSWORD_ENABLE,
            self::REUSE_PASSWORD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['apply_to'] = $data['apply_to'] ?? null;
        $this->container['minimum_length'] = $data['minimum_length'] ?? null;
        $this->container['min_lower_case_letter'] = $data['min_lower_case_letter'] ?? null;
        $this->container['min_upper_case_letter'] = $data['min_upper_case_letter'] ?? null;
        $this->container['min_non_alphanumeric'] = $data['min_non_alphanumeric'] ?? null;
        $this->container['min_number'] = $data['min_number'] ?? null;
        $this->container['change_4_characters'] = $data['change_4_characters'] ?? null;
        $this->container['expire_status'] = $data['expire_status'] ?? null;
        $this->container['expire_day'] = $data['expire_day'] ?? null;
        $this->container['reuse_password'] = $data['reuse_password'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApplyToAllowableValues();
        if (!is_null($this->container['apply_to']) && !in_array($this->container['apply_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'apply_to', must be one of '%s'",
                $this->container['apply_to'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['minimum_length']) && ($this->container['minimum_length'] > 128)) {
            $invalidProperties[] = "invalid value for 'minimum_length', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['minimum_length']) && ($this->container['minimum_length'] < 8)) {
            $invalidProperties[] = "invalid value for 'minimum_length', must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['min_lower_case_letter']) && ($this->container['min_lower_case_letter'] > 128)) {
            $invalidProperties[] = "invalid value for 'min_lower_case_letter', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['min_lower_case_letter']) && ($this->container['min_lower_case_letter'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_lower_case_letter', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_upper_case_letter']) && ($this->container['min_upper_case_letter'] > 128)) {
            $invalidProperties[] = "invalid value for 'min_upper_case_letter', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['min_upper_case_letter']) && ($this->container['min_upper_case_letter'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_upper_case_letter', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_non_alphanumeric']) && ($this->container['min_non_alphanumeric'] > 128)) {
            $invalidProperties[] = "invalid value for 'min_non_alphanumeric', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['min_non_alphanumeric']) && ($this->container['min_non_alphanumeric'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_non_alphanumeric', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_number']) && ($this->container['min_number'] > 128)) {
            $invalidProperties[] = "invalid value for 'min_number', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['min_number']) && ($this->container['min_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_number', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getChange4CharactersAllowableValues();
        if (!is_null($this->container['change_4_characters']) && !in_array($this->container['change_4_characters'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'change_4_characters', must be one of '%s'",
                $this->container['change_4_characters'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpireStatusAllowableValues();
        if (!is_null($this->container['expire_status']) && !in_array($this->container['expire_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expire_status', must be one of '%s'",
                $this->container['expire_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['expire_day']) && ($this->container['expire_day'] > 999)) {
            $invalidProperties[] = "invalid value for 'expire_day', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['expire_day']) && ($this->container['expire_day'] < 1)) {
            $invalidProperties[] = "invalid value for 'expire_day', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getReusePasswordAllowableValues();
        if (!is_null($this->container['reuse_password']) && !in_array($this->container['reuse_password'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reuse_password', must be one of '%s'",
                $this->container['reuse_password'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys.    enable:Enable password policy.    disable:Disable password policy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets apply_to
     *
     * @return string|null
     */
    public function getApplyTo()
    {
        return $this->container['apply_to'];
    }

    /**
     * Sets apply_to
     *
     * @param string|null $apply_to Guest administrator to which this password policy applies.    guest-admin-password:Apply to guest administrator password.
     *
     * @return self
     */
    public function setApplyTo($apply_to)
    {
        $allowedValues = $this->getApplyToAllowableValues();
        if (!is_null($apply_to) && !in_array($apply_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'apply_to', must be one of '%s'",
                    $apply_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['apply_to'] = $apply_to;

        return $this;
    }

    /**
     * Gets minimum_length
     *
     * @return int|null
     */
    public function getMinimumLength()
    {
        return $this->container['minimum_length'];
    }

    /**
     * Sets minimum_length
     *
     * @param int|null $minimum_length Minimum password length (8 - 128, default = 8).
     *
     * @return self
     */
    public function setMinimumLength($minimum_length)
    {

        if (!is_null($minimum_length) && ($minimum_length > 128)) {
            throw new \InvalidArgumentException('invalid value for $minimum_length when calling InlineObject353., must be smaller than or equal to 128.');
        }
        if (!is_null($minimum_length) && ($minimum_length < 8)) {
            throw new \InvalidArgumentException('invalid value for $minimum_length when calling InlineObject353., must be bigger than or equal to 8.');
        }

        $this->container['minimum_length'] = $minimum_length;

        return $this;
    }

    /**
     * Gets min_lower_case_letter
     *
     * @return int|null
     */
    public function getMinLowerCaseLetter()
    {
        return $this->container['min_lower_case_letter'];
    }

    /**
     * Sets min_lower_case_letter
     *
     * @param int|null $min_lower_case_letter Minimum number of lowercase characters in password (0 - 128, default = 0).
     *
     * @return self
     */
    public function setMinLowerCaseLetter($min_lower_case_letter)
    {

        if (!is_null($min_lower_case_letter) && ($min_lower_case_letter > 128)) {
            throw new \InvalidArgumentException('invalid value for $min_lower_case_letter when calling InlineObject353., must be smaller than or equal to 128.');
        }
        if (!is_null($min_lower_case_letter) && ($min_lower_case_letter < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_lower_case_letter when calling InlineObject353., must be bigger than or equal to 0.');
        }

        $this->container['min_lower_case_letter'] = $min_lower_case_letter;

        return $this;
    }

    /**
     * Gets min_upper_case_letter
     *
     * @return int|null
     */
    public function getMinUpperCaseLetter()
    {
        return $this->container['min_upper_case_letter'];
    }

    /**
     * Sets min_upper_case_letter
     *
     * @param int|null $min_upper_case_letter Minimum number of uppercase characters in password (0 - 128, default = 0).
     *
     * @return self
     */
    public function setMinUpperCaseLetter($min_upper_case_letter)
    {

        if (!is_null($min_upper_case_letter) && ($min_upper_case_letter > 128)) {
            throw new \InvalidArgumentException('invalid value for $min_upper_case_letter when calling InlineObject353., must be smaller than or equal to 128.');
        }
        if (!is_null($min_upper_case_letter) && ($min_upper_case_letter < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_upper_case_letter when calling InlineObject353., must be bigger than or equal to 0.');
        }

        $this->container['min_upper_case_letter'] = $min_upper_case_letter;

        return $this;
    }

    /**
     * Gets min_non_alphanumeric
     *
     * @return int|null
     */
    public function getMinNonAlphanumeric()
    {
        return $this->container['min_non_alphanumeric'];
    }

    /**
     * Sets min_non_alphanumeric
     *
     * @param int|null $min_non_alphanumeric Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
     *
     * @return self
     */
    public function setMinNonAlphanumeric($min_non_alphanumeric)
    {

        if (!is_null($min_non_alphanumeric) && ($min_non_alphanumeric > 128)) {
            throw new \InvalidArgumentException('invalid value for $min_non_alphanumeric when calling InlineObject353., must be smaller than or equal to 128.');
        }
        if (!is_null($min_non_alphanumeric) && ($min_non_alphanumeric < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_non_alphanumeric when calling InlineObject353., must be bigger than or equal to 0.');
        }

        $this->container['min_non_alphanumeric'] = $min_non_alphanumeric;

        return $this;
    }

    /**
     * Gets min_number
     *
     * @return int|null
     */
    public function getMinNumber()
    {
        return $this->container['min_number'];
    }

    /**
     * Sets min_number
     *
     * @param int|null $min_number Minimum number of numeric characters in password (0 - 128, default = 0).
     *
     * @return self
     */
    public function setMinNumber($min_number)
    {

        if (!is_null($min_number) && ($min_number > 128)) {
            throw new \InvalidArgumentException('invalid value for $min_number when calling InlineObject353., must be smaller than or equal to 128.');
        }
        if (!is_null($min_number) && ($min_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_number when calling InlineObject353., must be bigger than or equal to 0.');
        }

        $this->container['min_number'] = $min_number;

        return $this;
    }

    /**
     * Gets change_4_characters
     *
     * @return string|null
     */
    public function getChange4Characters()
    {
        return $this->container['change_4_characters'];
    }

    /**
     * Sets change_4_characters
     *
     * @param string|null $change_4_characters Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled).    enable:Enable requiring that at least 4 characters must be changed in a new password.    disable:No requirements for the number of characters to change in a new password. A new password can be the same as the old password.
     *
     * @return self
     */
    public function setChange4Characters($change_4_characters)
    {
        $allowedValues = $this->getChange4CharactersAllowableValues();
        if (!is_null($change_4_characters) && !in_array($change_4_characters, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'change_4_characters', must be one of '%s'",
                    $change_4_characters,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['change_4_characters'] = $change_4_characters;

        return $this;
    }

    /**
     * Gets expire_status
     *
     * @return string|null
     */
    public function getExpireStatus()
    {
        return $this->container['expire_status'];
    }

    /**
     * Sets expire_status
     *
     * @param string|null $expire_status Enable/disable password expiration.    enable:Passwords expire after expire-day days.    disable:Passwords do not expire.
     *
     * @return self
     */
    public function setExpireStatus($expire_status)
    {
        $allowedValues = $this->getExpireStatusAllowableValues();
        if (!is_null($expire_status) && !in_array($expire_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expire_status', must be one of '%s'",
                    $expire_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expire_status'] = $expire_status;

        return $this;
    }

    /**
     * Gets expire_day
     *
     * @return int|null
     */
    public function getExpireDay()
    {
        return $this->container['expire_day'];
    }

    /**
     * Sets expire_day
     *
     * @param int|null $expire_day Number of days after which passwords expire (1 - 999 days, default = 90).
     *
     * @return self
     */
    public function setExpireDay($expire_day)
    {

        if (!is_null($expire_day) && ($expire_day > 999)) {
            throw new \InvalidArgumentException('invalid value for $expire_day when calling InlineObject353., must be smaller than or equal to 999.');
        }
        if (!is_null($expire_day) && ($expire_day < 1)) {
            throw new \InvalidArgumentException('invalid value for $expire_day when calling InlineObject353., must be bigger than or equal to 1.');
        }

        $this->container['expire_day'] = $expire_day;

        return $this;
    }

    /**
     * Gets reuse_password
     *
     * @return string|null
     */
    public function getReusePassword()
    {
        return $this->container['reuse_password'];
    }

    /**
     * Sets reuse_password
     *
     * @param string|null $reuse_password Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides).    enable:Administrators are allowed to reuse the same password.    disable:Administrators must create a new password.
     *
     * @return self
     */
    public function setReusePassword($reuse_password)
    {
        $allowedValues = $this->getReusePasswordAllowableValues();
        if (!is_null($reuse_password) && !in_array($reuse_password, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reuse_password', must be one of '%s'",
                    $reuse_password,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reuse_password'] = $reuse_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


