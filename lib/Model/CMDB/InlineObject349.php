<?php
/**
 * InlineObject349
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject349 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject349 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_349';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ntpsync' => 'string',
        'type' => 'string',
        'syncinterval' => 'int',
        'ntpserver' => '\Fortigate\FortiOS\Model\CMDB\SystemNtpNtpserver[]',
        'source_ip' => 'string',
        'source_ip6' => 'string',
        'server_mode' => 'string',
        'authentication' => 'string',
        'key_type' => 'string',
        'key' => 'string',
        'key_id' => 'int',
        'interface' => '\Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ntpsync' => null,
        'type' => null,
        'syncinterval' => null,
        'ntpserver' => null,
        'source_ip' => 'ipv4',
        'source_ip6' => 'ipv6',
        'server_mode' => null,
        'authentication' => null,
        'key_type' => null,
        'key' => 'password',
        'key_id' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ntpsync' => 'ntpsync',
        'type' => 'type',
        'syncinterval' => 'syncinterval',
        'ntpserver' => 'ntpserver',
        'source_ip' => 'source-ip',
        'source_ip6' => 'source-ip6',
        'server_mode' => 'server-mode',
        'authentication' => 'authentication',
        'key_type' => 'key-type',
        'key' => 'key',
        'key_id' => 'key-id',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ntpsync' => 'setNtpsync',
        'type' => 'setType',
        'syncinterval' => 'setSyncinterval',
        'ntpserver' => 'setNtpserver',
        'source_ip' => 'setSourceIp',
        'source_ip6' => 'setSourceIp6',
        'server_mode' => 'setServerMode',
        'authentication' => 'setAuthentication',
        'key_type' => 'setKeyType',
        'key' => 'setKey',
        'key_id' => 'setKeyId',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ntpsync' => 'getNtpsync',
        'type' => 'getType',
        'syncinterval' => 'getSyncinterval',
        'ntpserver' => 'getNtpserver',
        'source_ip' => 'getSourceIp',
        'source_ip6' => 'getSourceIp6',
        'server_mode' => 'getServerMode',
        'authentication' => 'getAuthentication',
        'key_type' => 'getKeyType',
        'key' => 'getKey',
        'key_id' => 'getKeyId',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NTPSYNC_ENABLE = 'enable';
    const NTPSYNC_DISABLE = 'disable';
    const TYPE_FORTIGUARD = 'fortiguard';
    const TYPE_CUSTOM = 'custom';
    const SERVER_MODE_ENABLE = 'enable';
    const SERVER_MODE_DISABLE = 'disable';
    const AUTHENTICATION_ENABLE = 'enable';
    const AUTHENTICATION_DISABLE = 'disable';
    const KEY_TYPE_MD5 = 'MD5';
    const KEY_TYPE_SHA1 = 'SHA1';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNtpsyncAllowableValues()
    {
        return [
            self::NTPSYNC_ENABLE,
            self::NTPSYNC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FORTIGUARD,
            self::TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerModeAllowableValues()
    {
        return [
            self::SERVER_MODE_ENABLE,
            self::SERVER_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_ENABLE,
            self::AUTHENTICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyTypeAllowableValues()
    {
        return [
            self::KEY_TYPE_MD5,
            self::KEY_TYPE_SHA1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ntpsync'] = $data['ntpsync'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['syncinterval'] = $data['syncinterval'] ?? null;
        $this->container['ntpserver'] = $data['ntpserver'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['source_ip6'] = $data['source_ip6'] ?? null;
        $this->container['server_mode'] = $data['server_mode'] ?? null;
        $this->container['authentication'] = $data['authentication'] ?? null;
        $this->container['key_type'] = $data['key_type'] ?? null;
        $this->container['key'] = $data['key'] ?? null;
        $this->container['key_id'] = $data['key_id'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNtpsyncAllowableValues();
        if (!is_null($this->container['ntpsync']) && !in_array($this->container['ntpsync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ntpsync', must be one of '%s'",
                $this->container['ntpsync'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['syncinterval']) && ($this->container['syncinterval'] > 1440)) {
            $invalidProperties[] = "invalid value for 'syncinterval', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['syncinterval']) && ($this->container['syncinterval'] < 1)) {
            $invalidProperties[] = "invalid value for 'syncinterval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ntpserver']) && (count($this->container['ntpserver']) > 0)) {
            $invalidProperties[] = "invalid value for 'ntpserver', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getServerModeAllowableValues();
        if (!is_null($this->container['server_mode']) && !in_array($this->container['server_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_mode', must be one of '%s'",
                $this->container['server_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($this->container['authentication']) && !in_array($this->container['authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication', must be one of '%s'",
                $this->container['authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!is_null($this->container['key_type']) && !in_array($this->container['key_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'key_type', must be one of '%s'",
                $this->container['key_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['key_id']) && ($this->container['key_id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'key_id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['key_id']) && ($this->container['key_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'key_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['interface']) && (count($this->container['interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'interface', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ntpsync
     *
     * @return string|null
     */
    public function getNtpsync()
    {
        return $this->container['ntpsync'];
    }

    /**
     * Sets ntpsync
     *
     * @param string|null $ntpsync Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.    enable:Enable synchronization with NTP Server.    disable:Disable synchronization with NTP Server.
     *
     * @return self
     */
    public function setNtpsync($ntpsync)
    {
        $allowedValues = $this->getNtpsyncAllowableValues();
        if (!is_null($ntpsync) && !in_array($ntpsync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ntpsync', must be one of '%s'",
                    $ntpsync,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ntpsync'] = $ntpsync;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Use the FortiGuard NTP server or any other available NTP Server.    fortiguard:Use the FortiGuard NTP server.    custom:Use any other available NTP server.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets syncinterval
     *
     * @return int|null
     */
    public function getSyncinterval()
    {
        return $this->container['syncinterval'];
    }

    /**
     * Sets syncinterval
     *
     * @param int|null $syncinterval NTP synchronization interval (1 - 1440 min).
     *
     * @return self
     */
    public function setSyncinterval($syncinterval)
    {

        if (!is_null($syncinterval) && ($syncinterval > 1440)) {
            throw new \InvalidArgumentException('invalid value for $syncinterval when calling InlineObject349., must be smaller than or equal to 1440.');
        }
        if (!is_null($syncinterval) && ($syncinterval < 1)) {
            throw new \InvalidArgumentException('invalid value for $syncinterval when calling InlineObject349., must be bigger than or equal to 1.');
        }

        $this->container['syncinterval'] = $syncinterval;

        return $this;
    }

    /**
     * Gets ntpserver
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemNtpNtpserver[]|null
     */
    public function getNtpserver()
    {
        return $this->container['ntpserver'];
    }

    /**
     * Sets ntpserver
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemNtpNtpserver[]|null $ntpserver Configure the FortiGate to connect to any available third-party NTP server.
     *
     * @return self
     */
    public function setNtpserver($ntpserver)
    {

        if (!is_null($ntpserver) && (count($ntpserver) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ntpserver when calling InlineObject349., number of items must be less than or equal to 0.');
        }
        $this->container['ntpserver'] = $ntpserver;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address for communication to the NTP server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip6
     *
     * @return string|null
     */
    public function getSourceIp6()
    {
        return $this->container['source_ip6'];
    }

    /**
     * Sets source_ip6
     *
     * @param string|null $source_ip6 Source IPv6 address for communication to the NTP server.
     *
     * @return self
     */
    public function setSourceIp6($source_ip6)
    {
        $this->container['source_ip6'] = $source_ip6;

        return $this;
    }

    /**
     * Gets server_mode
     *
     * @return string|null
     */
    public function getServerMode()
    {
        return $this->container['server_mode'];
    }

    /**
     * Sets server_mode
     *
     * @param string|null $server_mode Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server.    enable:Enable FortiGate NTP Server Mode.    disable:Disable FortiGate NTP Server Mode.
     *
     * @return self
     */
    public function setServerMode($server_mode)
    {
        $allowedValues = $this->getServerModeAllowableValues();
        if (!is_null($server_mode) && !in_array($server_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_mode', must be one of '%s'",
                    $server_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_mode'] = $server_mode;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication Enable/disable authentication.    enable:Enable authentication.    disable:Disable authentication.
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication', must be one of '%s'",
                    $authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets key_type
     *
     * @return string|null
     */
    public function getKeyType()
    {
        return $this->container['key_type'];
    }

    /**
     * Sets key_type
     *
     * @param string|null $key_type Key type for authentication (MD5, SHA1).    MD5:Use MD5 to authenticate the message.    SHA1:Use SHA1 to authenticate the message.
     *
     * @return self
     */
    public function setKeyType($key_type)
    {
        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!is_null($key_type) && !in_array($key_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'key_type', must be one of '%s'",
                    $key_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['key_type'] = $key_type;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key Key for authentication.
     *
     * @return self
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return int|null
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param int|null $key_id Key ID for authentication.
     *
     * @return self
     */
    public function setKeyId($key_id)
    {

        if (!is_null($key_id) && ($key_id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $key_id when calling InlineObject349., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($key_id) && ($key_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $key_id when calling InlineObject349., must be bigger than or equal to 0.');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDdnsDdnsidMonitorInterface[]|null $interface FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services.
     *
     * @return self
     */
    public function setInterface($interface)
    {

        if (!is_null($interface) && (count($interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $interface when calling InlineObject349., number of items must be less than or equal to 0.');
        }
        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


