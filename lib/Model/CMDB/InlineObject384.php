<?php
/**
 * InlineObject384
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject384 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject384 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_384';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'standalone_group_id' => 'int',
        'group_member_id' => 'int',
        'layer2_connection' => 'string',
        'session_sync_dev' => 'string',
        'encryption' => 'string',
        'psksecret' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'standalone_group_id' => null,
        'group_member_id' => null,
        'layer2_connection' => null,
        'session_sync_dev' => null,
        'encryption' => null,
        'psksecret' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'standalone_group_id' => 'standalone-group-id',
        'group_member_id' => 'group-member-id',
        'layer2_connection' => 'layer2-connection',
        'session_sync_dev' => 'session-sync-dev',
        'encryption' => 'encryption',
        'psksecret' => 'psksecret'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'standalone_group_id' => 'setStandaloneGroupId',
        'group_member_id' => 'setGroupMemberId',
        'layer2_connection' => 'setLayer2Connection',
        'session_sync_dev' => 'setSessionSyncDev',
        'encryption' => 'setEncryption',
        'psksecret' => 'setPsksecret'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'standalone_group_id' => 'getStandaloneGroupId',
        'group_member_id' => 'getGroupMemberId',
        'layer2_connection' => 'getLayer2Connection',
        'session_sync_dev' => 'getSessionSyncDev',
        'encryption' => 'getEncryption',
        'psksecret' => 'getPsksecret'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LAYER2_CONNECTION_AVAILABLE = 'available';
    const LAYER2_CONNECTION_UNAVAILABLE = 'unavailable';
    const ENCRYPTION_ENABLE = 'enable';
    const ENCRYPTION_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayer2ConnectionAllowableValues()
    {
        return [
            self::LAYER2_CONNECTION_AVAILABLE,
            self::LAYER2_CONNECTION_UNAVAILABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionAllowableValues()
    {
        return [
            self::ENCRYPTION_ENABLE,
            self::ENCRYPTION_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['standalone_group_id'] = $data['standalone_group_id'] ?? null;
        $this->container['group_member_id'] = $data['group_member_id'] ?? null;
        $this->container['layer2_connection'] = $data['layer2_connection'] ?? null;
        $this->container['session_sync_dev'] = $data['session_sync_dev'] ?? null;
        $this->container['encryption'] = $data['encryption'] ?? null;
        $this->container['psksecret'] = $data['psksecret'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['standalone_group_id']) && ($this->container['standalone_group_id'] > 255)) {
            $invalidProperties[] = "invalid value for 'standalone_group_id', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['standalone_group_id']) && ($this->container['standalone_group_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'standalone_group_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['group_member_id']) && ($this->container['group_member_id'] > 15)) {
            $invalidProperties[] = "invalid value for 'group_member_id', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['group_member_id']) && ($this->container['group_member_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'group_member_id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getLayer2ConnectionAllowableValues();
        if (!is_null($this->container['layer2_connection']) && !in_array($this->container['layer2_connection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'layer2_connection', must be one of '%s'",
                $this->container['layer2_connection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptionAllowableValues();
        if (!is_null($this->container['encryption']) && !in_array($this->container['encryption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encryption', must be one of '%s'",
                $this->container['encryption'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets standalone_group_id
     *
     * @return int|null
     */
    public function getStandaloneGroupId()
    {
        return $this->container['standalone_group_id'];
    }

    /**
     * Sets standalone_group_id
     *
     * @param int|null $standalone_group_id Cluster group ID (0 - 255). Must be the same for all members.
     *
     * @return self
     */
    public function setStandaloneGroupId($standalone_group_id)
    {

        if (!is_null($standalone_group_id) && ($standalone_group_id > 255)) {
            throw new \InvalidArgumentException('invalid value for $standalone_group_id when calling InlineObject384., must be smaller than or equal to 255.');
        }
        if (!is_null($standalone_group_id) && ($standalone_group_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $standalone_group_id when calling InlineObject384., must be bigger than or equal to 0.');
        }

        $this->container['standalone_group_id'] = $standalone_group_id;

        return $this;
    }

    /**
     * Gets group_member_id
     *
     * @return int|null
     */
    public function getGroupMemberId()
    {
        return $this->container['group_member_id'];
    }

    /**
     * Sets group_member_id
     *
     * @param int|null $group_member_id Cluster member ID (0 - 15).
     *
     * @return self
     */
    public function setGroupMemberId($group_member_id)
    {

        if (!is_null($group_member_id) && ($group_member_id > 15)) {
            throw new \InvalidArgumentException('invalid value for $group_member_id when calling InlineObject384., must be smaller than or equal to 15.');
        }
        if (!is_null($group_member_id) && ($group_member_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $group_member_id when calling InlineObject384., must be bigger than or equal to 0.');
        }

        $this->container['group_member_id'] = $group_member_id;

        return $this;
    }

    /**
     * Gets layer2_connection
     *
     * @return string|null
     */
    public function getLayer2Connection()
    {
        return $this->container['layer2_connection'];
    }

    /**
     * Sets layer2_connection
     *
     * @param string|null $layer2_connection Indicate whether layer 2 connections are present among FGSP members.    available:There exist layer 2 connections among FGSP members.    unavailable:There does not exist layer 2 connection among FGSP members.
     *
     * @return self
     */
    public function setLayer2Connection($layer2_connection)
    {
        $allowedValues = $this->getLayer2ConnectionAllowableValues();
        if (!is_null($layer2_connection) && !in_array($layer2_connection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'layer2_connection', must be one of '%s'",
                    $layer2_connection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layer2_connection'] = $layer2_connection;

        return $this;
    }

    /**
     * Gets session_sync_dev
     *
     * @return string|null
     */
    public function getSessionSyncDev()
    {
        return $this->container['session_sync_dev'];
    }

    /**
     * Sets session_sync_dev
     *
     * @param string|null $session_sync_dev Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
     *
     * @return self
     */
    public function setSessionSyncDev($session_sync_dev)
    {
        $this->container['session_sync_dev'] = $session_sync_dev;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return string|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param string|null $encryption Enable/disable encryption when synchronizing sessions.    enable:Enable encryption when synchronizing sessions.    disable:Disable encryption when synchronizing sessions.
     *
     * @return self
     */
    public function setEncryption($encryption)
    {
        $allowedValues = $this->getEncryptionAllowableValues();
        if (!is_null($encryption) && !in_array($encryption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encryption', must be one of '%s'",
                    $encryption,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets psksecret
     *
     * @return string|null
     */
    public function getPsksecret()
    {
        return $this->container['psksecret'];
    }

    /**
     * Sets psksecret
     *
     * @param string|null $psksecret Pre-shared secret for session synchronization (ASCII string or hexadecimal encoded with a leading 0x).
     *
     * @return self
     */
    public function setPsksecret($psksecret)
    {
        $this->container['psksecret'] = $psksecret;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


