<?php
/**
 * InlineObject524
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject524 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject524 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_524';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssl_cert' => 'string',
        'ssl_ca_cert' => 'string',
        'fast_policy_match' => 'string',
        'proxy_fqdn' => 'string',
        'max_request_length' => 'int',
        'max_message_length' => 'int',
        'strict_web_check' => 'string',
        'forward_proxy_auth' => 'string',
        'forward_server_affinity_timeout' => 'int',
        'max_waf_body_cache_length' => 'int',
        'webproxy_profile' => 'string',
        'learn_client_ip' => 'string',
        'learn_client_ip_from_header' => 'string',
        'learn_client_ip_srcaddr' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]',
        'learn_client_ip_srcaddr6' => '\Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssl_cert' => null,
        'ssl_ca_cert' => null,
        'fast_policy_match' => null,
        'proxy_fqdn' => null,
        'max_request_length' => null,
        'max_message_length' => null,
        'strict_web_check' => null,
        'forward_proxy_auth' => null,
        'forward_server_affinity_timeout' => null,
        'max_waf_body_cache_length' => null,
        'webproxy_profile' => null,
        'learn_client_ip' => null,
        'learn_client_ip_from_header' => null,
        'learn_client_ip_srcaddr' => null,
        'learn_client_ip_srcaddr6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssl_cert' => 'ssl-cert',
        'ssl_ca_cert' => 'ssl-ca-cert',
        'fast_policy_match' => 'fast-policy-match',
        'proxy_fqdn' => 'proxy-fqdn',
        'max_request_length' => 'max-request-length',
        'max_message_length' => 'max-message-length',
        'strict_web_check' => 'strict-web-check',
        'forward_proxy_auth' => 'forward-proxy-auth',
        'forward_server_affinity_timeout' => 'forward-server-affinity-timeout',
        'max_waf_body_cache_length' => 'max-waf-body-cache-length',
        'webproxy_profile' => 'webproxy-profile',
        'learn_client_ip' => 'learn-client-ip',
        'learn_client_ip_from_header' => 'learn-client-ip-from-header',
        'learn_client_ip_srcaddr' => 'learn-client-ip-srcaddr',
        'learn_client_ip_srcaddr6' => 'learn-client-ip-srcaddr6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssl_cert' => 'setSslCert',
        'ssl_ca_cert' => 'setSslCaCert',
        'fast_policy_match' => 'setFastPolicyMatch',
        'proxy_fqdn' => 'setProxyFqdn',
        'max_request_length' => 'setMaxRequestLength',
        'max_message_length' => 'setMaxMessageLength',
        'strict_web_check' => 'setStrictWebCheck',
        'forward_proxy_auth' => 'setForwardProxyAuth',
        'forward_server_affinity_timeout' => 'setForwardServerAffinityTimeout',
        'max_waf_body_cache_length' => 'setMaxWafBodyCacheLength',
        'webproxy_profile' => 'setWebproxyProfile',
        'learn_client_ip' => 'setLearnClientIp',
        'learn_client_ip_from_header' => 'setLearnClientIpFromHeader',
        'learn_client_ip_srcaddr' => 'setLearnClientIpSrcaddr',
        'learn_client_ip_srcaddr6' => 'setLearnClientIpSrcaddr6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssl_cert' => 'getSslCert',
        'ssl_ca_cert' => 'getSslCaCert',
        'fast_policy_match' => 'getFastPolicyMatch',
        'proxy_fqdn' => 'getProxyFqdn',
        'max_request_length' => 'getMaxRequestLength',
        'max_message_length' => 'getMaxMessageLength',
        'strict_web_check' => 'getStrictWebCheck',
        'forward_proxy_auth' => 'getForwardProxyAuth',
        'forward_server_affinity_timeout' => 'getForwardServerAffinityTimeout',
        'max_waf_body_cache_length' => 'getMaxWafBodyCacheLength',
        'webproxy_profile' => 'getWebproxyProfile',
        'learn_client_ip' => 'getLearnClientIp',
        'learn_client_ip_from_header' => 'getLearnClientIpFromHeader',
        'learn_client_ip_srcaddr' => 'getLearnClientIpSrcaddr',
        'learn_client_ip_srcaddr6' => 'getLearnClientIpSrcaddr6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FAST_POLICY_MATCH_ENABLE = 'enable';
    const FAST_POLICY_MATCH_DISABLE = 'disable';
    const STRICT_WEB_CHECK_ENABLE = 'enable';
    const STRICT_WEB_CHECK_DISABLE = 'disable';
    const FORWARD_PROXY_AUTH_ENABLE = 'enable';
    const FORWARD_PROXY_AUTH_DISABLE = 'disable';
    const LEARN_CLIENT_IP_ENABLE = 'enable';
    const LEARN_CLIENT_IP_DISABLE = 'disable';
    const LEARN_CLIENT_IP_FROM_HEADER_TRUE_CLIENT_IP = 'true-client-ip';
    const LEARN_CLIENT_IP_FROM_HEADER_X_REAL_IP = 'x-real-ip';
    const LEARN_CLIENT_IP_FROM_HEADER_X_FORWARDED_FOR = 'x-forwarded-for';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFastPolicyMatchAllowableValues()
    {
        return [
            self::FAST_POLICY_MATCH_ENABLE,
            self::FAST_POLICY_MATCH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictWebCheckAllowableValues()
    {
        return [
            self::STRICT_WEB_CHECK_ENABLE,
            self::STRICT_WEB_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForwardProxyAuthAllowableValues()
    {
        return [
            self::FORWARD_PROXY_AUTH_ENABLE,
            self::FORWARD_PROXY_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLearnClientIpAllowableValues()
    {
        return [
            self::LEARN_CLIENT_IP_ENABLE,
            self::LEARN_CLIENT_IP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLearnClientIpFromHeaderAllowableValues()
    {
        return [
            self::LEARN_CLIENT_IP_FROM_HEADER_TRUE_CLIENT_IP,
            self::LEARN_CLIENT_IP_FROM_HEADER_X_REAL_IP,
            self::LEARN_CLIENT_IP_FROM_HEADER_X_FORWARDED_FOR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ssl_cert'] = $data['ssl_cert'] ?? null;
        $this->container['ssl_ca_cert'] = $data['ssl_ca_cert'] ?? null;
        $this->container['fast_policy_match'] = $data['fast_policy_match'] ?? null;
        $this->container['proxy_fqdn'] = $data['proxy_fqdn'] ?? null;
        $this->container['max_request_length'] = $data['max_request_length'] ?? null;
        $this->container['max_message_length'] = $data['max_message_length'] ?? null;
        $this->container['strict_web_check'] = $data['strict_web_check'] ?? null;
        $this->container['forward_proxy_auth'] = $data['forward_proxy_auth'] ?? null;
        $this->container['forward_server_affinity_timeout'] = $data['forward_server_affinity_timeout'] ?? null;
        $this->container['max_waf_body_cache_length'] = $data['max_waf_body_cache_length'] ?? null;
        $this->container['webproxy_profile'] = $data['webproxy_profile'] ?? null;
        $this->container['learn_client_ip'] = $data['learn_client_ip'] ?? null;
        $this->container['learn_client_ip_from_header'] = $data['learn_client_ip_from_header'] ?? null;
        $this->container['learn_client_ip_srcaddr'] = $data['learn_client_ip_srcaddr'] ?? null;
        $this->container['learn_client_ip_srcaddr6'] = $data['learn_client_ip_srcaddr6'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ssl_cert']) && (mb_strlen($this->container['ssl_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ssl_ca_cert']) && (mb_strlen($this->container['ssl_ca_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_ca_cert', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getFastPolicyMatchAllowableValues();
        if (!is_null($this->container['fast_policy_match']) && !in_array($this->container['fast_policy_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fast_policy_match', must be one of '%s'",
                $this->container['fast_policy_match'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['proxy_fqdn']) && (mb_strlen($this->container['proxy_fqdn']) > 255)) {
            $invalidProperties[] = "invalid value for 'proxy_fqdn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['max_request_length']) && ($this->container['max_request_length'] > 64)) {
            $invalidProperties[] = "invalid value for 'max_request_length', must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['max_request_length']) && ($this->container['max_request_length'] < 2)) {
            $invalidProperties[] = "invalid value for 'max_request_length', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['max_message_length']) && ($this->container['max_message_length'] > 256)) {
            $invalidProperties[] = "invalid value for 'max_message_length', must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['max_message_length']) && ($this->container['max_message_length'] < 16)) {
            $invalidProperties[] = "invalid value for 'max_message_length', must be bigger than or equal to 16.";
        }

        $allowedValues = $this->getStrictWebCheckAllowableValues();
        if (!is_null($this->container['strict_web_check']) && !in_array($this->container['strict_web_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_web_check', must be one of '%s'",
                $this->container['strict_web_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForwardProxyAuthAllowableValues();
        if (!is_null($this->container['forward_proxy_auth']) && !in_array($this->container['forward_proxy_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forward_proxy_auth', must be one of '%s'",
                $this->container['forward_proxy_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['forward_server_affinity_timeout']) && ($this->container['forward_server_affinity_timeout'] > 60)) {
            $invalidProperties[] = "invalid value for 'forward_server_affinity_timeout', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['forward_server_affinity_timeout']) && ($this->container['forward_server_affinity_timeout'] < 6)) {
            $invalidProperties[] = "invalid value for 'forward_server_affinity_timeout', must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['max_waf_body_cache_length']) && ($this->container['max_waf_body_cache_length'] > 1024)) {
            $invalidProperties[] = "invalid value for 'max_waf_body_cache_length', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['max_waf_body_cache_length']) && ($this->container['max_waf_body_cache_length'] < 10)) {
            $invalidProperties[] = "invalid value for 'max_waf_body_cache_length', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['webproxy_profile']) && (mb_strlen($this->container['webproxy_profile']) > 63)) {
            $invalidProperties[] = "invalid value for 'webproxy_profile', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getLearnClientIpAllowableValues();
        if (!is_null($this->container['learn_client_ip']) && !in_array($this->container['learn_client_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'learn_client_ip', must be one of '%s'",
                $this->container['learn_client_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLearnClientIpFromHeaderAllowableValues();
        if (!is_null($this->container['learn_client_ip_from_header']) && !in_array($this->container['learn_client_ip_from_header'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'learn_client_ip_from_header', must be one of '%s'",
                $this->container['learn_client_ip_from_header'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['learn_client_ip_srcaddr']) && (count($this->container['learn_client_ip_srcaddr']) > 0)) {
            $invalidProperties[] = "invalid value for 'learn_client_ip_srcaddr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['learn_client_ip_srcaddr6']) && (count($this->container['learn_client_ip_srcaddr6']) > 0)) {
            $invalidProperties[] = "invalid value for 'learn_client_ip_srcaddr6', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssl_cert
     *
     * @return string|null
     */
    public function getSslCert()
    {
        return $this->container['ssl_cert'];
    }

    /**
     * Sets ssl_cert
     *
     * @param string|null $ssl_cert SSL certificate for SSL interception.
     *
     * @return self
     */
    public function setSslCert($ssl_cert)
    {
        if (!is_null($ssl_cert) && (mb_strlen($ssl_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_cert when calling InlineObject524., must be smaller than or equal to 35.');
        }

        $this->container['ssl_cert'] = $ssl_cert;

        return $this;
    }

    /**
     * Gets ssl_ca_cert
     *
     * @return string|null
     */
    public function getSslCaCert()
    {
        return $this->container['ssl_ca_cert'];
    }

    /**
     * Sets ssl_ca_cert
     *
     * @param string|null $ssl_ca_cert SSL CA certificate for SSL interception.
     *
     * @return self
     */
    public function setSslCaCert($ssl_ca_cert)
    {
        if (!is_null($ssl_ca_cert) && (mb_strlen($ssl_ca_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_ca_cert when calling InlineObject524., must be smaller than or equal to 35.');
        }

        $this->container['ssl_ca_cert'] = $ssl_ca_cert;

        return $this;
    }

    /**
     * Gets fast_policy_match
     *
     * @return string|null
     */
    public function getFastPolicyMatch()
    {
        return $this->container['fast_policy_match'];
    }

    /**
     * Sets fast_policy_match
     *
     * @param string|null $fast_policy_match Enable/disable fast matching algorithm for explicit and transparent proxy policy.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setFastPolicyMatch($fast_policy_match)
    {
        $allowedValues = $this->getFastPolicyMatchAllowableValues();
        if (!is_null($fast_policy_match) && !in_array($fast_policy_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fast_policy_match', must be one of '%s'",
                    $fast_policy_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fast_policy_match'] = $fast_policy_match;

        return $this;
    }

    /**
     * Gets proxy_fqdn
     *
     * @return string|null
     */
    public function getProxyFqdn()
    {
        return $this->container['proxy_fqdn'];
    }

    /**
     * Sets proxy_fqdn
     *
     * @param string|null $proxy_fqdn Fully Qualified Domain Name (FQDN) that clients connect to (default = default.fqdn) to connect to the explicit web proxy.
     *
     * @return self
     */
    public function setProxyFqdn($proxy_fqdn)
    {
        if (!is_null($proxy_fqdn) && (mb_strlen($proxy_fqdn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $proxy_fqdn when calling InlineObject524., must be smaller than or equal to 255.');
        }

        $this->container['proxy_fqdn'] = $proxy_fqdn;

        return $this;
    }

    /**
     * Gets max_request_length
     *
     * @return int|null
     */
    public function getMaxRequestLength()
    {
        return $this->container['max_request_length'];
    }

    /**
     * Sets max_request_length
     *
     * @param int|null $max_request_length Maximum length of HTTP request line (2 - 64 Kbytes, default = 8).
     *
     * @return self
     */
    public function setMaxRequestLength($max_request_length)
    {

        if (!is_null($max_request_length) && ($max_request_length > 64)) {
            throw new \InvalidArgumentException('invalid value for $max_request_length when calling InlineObject524., must be smaller than or equal to 64.');
        }
        if (!is_null($max_request_length) && ($max_request_length < 2)) {
            throw new \InvalidArgumentException('invalid value for $max_request_length when calling InlineObject524., must be bigger than or equal to 2.');
        }

        $this->container['max_request_length'] = $max_request_length;

        return $this;
    }

    /**
     * Gets max_message_length
     *
     * @return int|null
     */
    public function getMaxMessageLength()
    {
        return $this->container['max_message_length'];
    }

    /**
     * Sets max_message_length
     *
     * @param int|null $max_message_length Maximum length of HTTP message, not including body (16 - 256 Kbytes, default = 32).
     *
     * @return self
     */
    public function setMaxMessageLength($max_message_length)
    {

        if (!is_null($max_message_length) && ($max_message_length > 256)) {
            throw new \InvalidArgumentException('invalid value for $max_message_length when calling InlineObject524., must be smaller than or equal to 256.');
        }
        if (!is_null($max_message_length) && ($max_message_length < 16)) {
            throw new \InvalidArgumentException('invalid value for $max_message_length when calling InlineObject524., must be bigger than or equal to 16.');
        }

        $this->container['max_message_length'] = $max_message_length;

        return $this;
    }

    /**
     * Gets strict_web_check
     *
     * @return string|null
     */
    public function getStrictWebCheck()
    {
        return $this->container['strict_web_check'];
    }

    /**
     * Sets strict_web_check
     *
     * @param string|null $strict_web_check Enable/disable strict web checking to block web sites that send incorrect headers that don't conform to HTTP 1.1.    enable:Enable strict web checking.    disable:Disable strict web checking.
     *
     * @return self
     */
    public function setStrictWebCheck($strict_web_check)
    {
        $allowedValues = $this->getStrictWebCheckAllowableValues();
        if (!is_null($strict_web_check) && !in_array($strict_web_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_web_check', must be one of '%s'",
                    $strict_web_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_web_check'] = $strict_web_check;

        return $this;
    }

    /**
     * Gets forward_proxy_auth
     *
     * @return string|null
     */
    public function getForwardProxyAuth()
    {
        return $this->container['forward_proxy_auth'];
    }

    /**
     * Sets forward_proxy_auth
     *
     * @param string|null $forward_proxy_auth Enable/disable forwarding proxy authentication headers.    enable:Enable forwarding proxy authentication headers.    disable:Disable forwarding proxy authentication headers.
     *
     * @return self
     */
    public function setForwardProxyAuth($forward_proxy_auth)
    {
        $allowedValues = $this->getForwardProxyAuthAllowableValues();
        if (!is_null($forward_proxy_auth) && !in_array($forward_proxy_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forward_proxy_auth', must be one of '%s'",
                    $forward_proxy_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forward_proxy_auth'] = $forward_proxy_auth;

        return $this;
    }

    /**
     * Gets forward_server_affinity_timeout
     *
     * @return int|null
     */
    public function getForwardServerAffinityTimeout()
    {
        return $this->container['forward_server_affinity_timeout'];
    }

    /**
     * Sets forward_server_affinity_timeout
     *
     * @param int|null $forward_server_affinity_timeout Period of time before the source IP's traffic is no longer assigned to the forwarding server (6 - 60 min, default = 30).
     *
     * @return self
     */
    public function setForwardServerAffinityTimeout($forward_server_affinity_timeout)
    {

        if (!is_null($forward_server_affinity_timeout) && ($forward_server_affinity_timeout > 60)) {
            throw new \InvalidArgumentException('invalid value for $forward_server_affinity_timeout when calling InlineObject524., must be smaller than or equal to 60.');
        }
        if (!is_null($forward_server_affinity_timeout) && ($forward_server_affinity_timeout < 6)) {
            throw new \InvalidArgumentException('invalid value for $forward_server_affinity_timeout when calling InlineObject524., must be bigger than or equal to 6.');
        }

        $this->container['forward_server_affinity_timeout'] = $forward_server_affinity_timeout;

        return $this;
    }

    /**
     * Gets max_waf_body_cache_length
     *
     * @return int|null
     */
    public function getMaxWafBodyCacheLength()
    {
        return $this->container['max_waf_body_cache_length'];
    }

    /**
     * Sets max_waf_body_cache_length
     *
     * @param int|null $max_waf_body_cache_length Maximum length of HTTP messages processed by Web Application Firewall (WAF) (10 - 1024 Kbytes, default = 32).
     *
     * @return self
     */
    public function setMaxWafBodyCacheLength($max_waf_body_cache_length)
    {

        if (!is_null($max_waf_body_cache_length) && ($max_waf_body_cache_length > 1024)) {
            throw new \InvalidArgumentException('invalid value for $max_waf_body_cache_length when calling InlineObject524., must be smaller than or equal to 1024.');
        }
        if (!is_null($max_waf_body_cache_length) && ($max_waf_body_cache_length < 10)) {
            throw new \InvalidArgumentException('invalid value for $max_waf_body_cache_length when calling InlineObject524., must be bigger than or equal to 10.');
        }

        $this->container['max_waf_body_cache_length'] = $max_waf_body_cache_length;

        return $this;
    }

    /**
     * Gets webproxy_profile
     *
     * @return string|null
     */
    public function getWebproxyProfile()
    {
        return $this->container['webproxy_profile'];
    }

    /**
     * Sets webproxy_profile
     *
     * @param string|null $webproxy_profile Name of the web proxy profile to apply when explicit proxy traffic is allowed by default and traffic is accepted that does not match an explicit proxy policy.
     *
     * @return self
     */
    public function setWebproxyProfile($webproxy_profile)
    {
        if (!is_null($webproxy_profile) && (mb_strlen($webproxy_profile) > 63)) {
            throw new \InvalidArgumentException('invalid length for $webproxy_profile when calling InlineObject524., must be smaller than or equal to 63.');
        }

        $this->container['webproxy_profile'] = $webproxy_profile;

        return $this;
    }

    /**
     * Gets learn_client_ip
     *
     * @return string|null
     */
    public function getLearnClientIp()
    {
        return $this->container['learn_client_ip'];
    }

    /**
     * Sets learn_client_ip
     *
     * @param string|null $learn_client_ip Enable/disable learning the client's IP address from headers.    enable:Enable learning the client's IP address from headers.    disable:Disable learning the client's IP address from headers.
     *
     * @return self
     */
    public function setLearnClientIp($learn_client_ip)
    {
        $allowedValues = $this->getLearnClientIpAllowableValues();
        if (!is_null($learn_client_ip) && !in_array($learn_client_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'learn_client_ip', must be one of '%s'",
                    $learn_client_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['learn_client_ip'] = $learn_client_ip;

        return $this;
    }

    /**
     * Gets learn_client_ip_from_header
     *
     * @return string|null
     */
    public function getLearnClientIpFromHeader()
    {
        return $this->container['learn_client_ip_from_header'];
    }

    /**
     * Sets learn_client_ip_from_header
     *
     * @param string|null $learn_client_ip_from_header Learn client IP address from the specified headers.    true-client-ip:Learn the client IP address from the True-Client-IP header.    x-real-ip:Learn the client IP address from the X-Real-IP header.    x-forwarded-for:Learn the client IP address from the X-Forwarded-For header.
     *
     * @return self
     */
    public function setLearnClientIpFromHeader($learn_client_ip_from_header)
    {
        $allowedValues = $this->getLearnClientIpFromHeaderAllowableValues();
        if (!is_null($learn_client_ip_from_header) && !in_array($learn_client_ip_from_header, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'learn_client_ip_from_header', must be one of '%s'",
                    $learn_client_ip_from_header,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['learn_client_ip_from_header'] = $learn_client_ip_from_header;

        return $this;
    }

    /**
     * Gets learn_client_ip_srcaddr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getLearnClientIpSrcaddr()
    {
        return $this->container['learn_client_ip_srcaddr'];
    }

    /**
     * Sets learn_client_ip_srcaddr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $learn_client_ip_srcaddr Source address name (srcaddr or srcaddr6 must be set).
     *
     * @return self
     */
    public function setLearnClientIpSrcaddr($learn_client_ip_srcaddr)
    {

        if (!is_null($learn_client_ip_srcaddr) && (count($learn_client_ip_srcaddr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $learn_client_ip_srcaddr when calling InlineObject524., number of items must be less than or equal to 0.');
        }
        $this->container['learn_client_ip_srcaddr'] = $learn_client_ip_srcaddr;

        return $this;
    }

    /**
     * Gets learn_client_ip_srcaddr6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null
     */
    public function getLearnClientIpSrcaddr6()
    {
        return $this->container['learn_client_ip_srcaddr6'];
    }

    /**
     * Sets learn_client_ip_srcaddr6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\AuthenticationRuleNameSrcaddr[]|null $learn_client_ip_srcaddr6 IPv6 Source address name (srcaddr or srcaddr6 must be set).
     *
     * @return self
     */
    public function setLearnClientIpSrcaddr6($learn_client_ip_srcaddr6)
    {

        if (!is_null($learn_client_ip_srcaddr6) && (count($learn_client_ip_srcaddr6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $learn_client_ip_srcaddr6 when calling InlineObject524., number of items must be less than or equal to 0.');
        }
        $this->container['learn_client_ip_srcaddr6'] = $learn_client_ip_srcaddr6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


