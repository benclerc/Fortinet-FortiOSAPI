<?php
/**
 * InlineObject613
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject613 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject613 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_613';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'sensor_mode' => 'string',
        'ap_scan' => 'string',
        'ap_bgscan_period' => 'int',
        'ap_bgscan_intv' => 'int',
        'ap_bgscan_duration' => 'int',
        'ap_bgscan_idle' => 'int',
        'ap_bgscan_report_intv' => 'int',
        'ap_bgscan_disable_schedules' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]',
        'ap_fgscan_report_intv' => 'int',
        'ap_scan_passive' => 'string',
        'ap_scan_threshold' => 'string',
        'ap_auto_suppress' => 'string',
        'wireless_bridge' => 'string',
        'deauth_broadcast' => 'string',
        'null_ssid_probe_resp' => 'string',
        'long_duration_attack' => 'string',
        'long_duration_thresh' => 'int',
        'invalid_mac_oui' => 'string',
        'weak_wep_iv' => 'string',
        'auth_frame_flood' => 'string',
        'auth_flood_time' => 'int',
        'auth_flood_thresh' => 'int',
        'assoc_frame_flood' => 'string',
        'assoc_flood_time' => 'int',
        'assoc_flood_thresh' => 'int',
        'spoofed_deauth' => 'string',
        'asleap_attack' => 'string',
        'eapol_start_flood' => 'string',
        'eapol_start_thresh' => 'int',
        'eapol_start_intv' => 'int',
        'eapol_logoff_flood' => 'string',
        'eapol_logoff_thresh' => 'int',
        'eapol_logoff_intv' => 'int',
        'eapol_succ_flood' => 'string',
        'eapol_succ_thresh' => 'int',
        'eapol_succ_intv' => 'int',
        'eapol_fail_flood' => 'string',
        'eapol_fail_thresh' => 'int',
        'eapol_fail_intv' => 'int',
        'eapol_pre_succ_flood' => 'string',
        'eapol_pre_succ_thresh' => 'int',
        'eapol_pre_succ_intv' => 'int',
        'eapol_pre_fail_flood' => 'string',
        'eapol_pre_fail_thresh' => 'int',
        'eapol_pre_fail_intv' => 'int',
        'deauth_unknown_src_thresh' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'sensor_mode' => null,
        'ap_scan' => null,
        'ap_bgscan_period' => null,
        'ap_bgscan_intv' => null,
        'ap_bgscan_duration' => null,
        'ap_bgscan_idle' => null,
        'ap_bgscan_report_intv' => null,
        'ap_bgscan_disable_schedules' => null,
        'ap_fgscan_report_intv' => null,
        'ap_scan_passive' => null,
        'ap_scan_threshold' => null,
        'ap_auto_suppress' => null,
        'wireless_bridge' => null,
        'deauth_broadcast' => null,
        'null_ssid_probe_resp' => null,
        'long_duration_attack' => null,
        'long_duration_thresh' => null,
        'invalid_mac_oui' => null,
        'weak_wep_iv' => null,
        'auth_frame_flood' => null,
        'auth_flood_time' => null,
        'auth_flood_thresh' => null,
        'assoc_frame_flood' => null,
        'assoc_flood_time' => null,
        'assoc_flood_thresh' => null,
        'spoofed_deauth' => null,
        'asleap_attack' => null,
        'eapol_start_flood' => null,
        'eapol_start_thresh' => null,
        'eapol_start_intv' => null,
        'eapol_logoff_flood' => null,
        'eapol_logoff_thresh' => null,
        'eapol_logoff_intv' => null,
        'eapol_succ_flood' => null,
        'eapol_succ_thresh' => null,
        'eapol_succ_intv' => null,
        'eapol_fail_flood' => null,
        'eapol_fail_thresh' => null,
        'eapol_fail_intv' => null,
        'eapol_pre_succ_flood' => null,
        'eapol_pre_succ_thresh' => null,
        'eapol_pre_succ_intv' => null,
        'eapol_pre_fail_flood' => null,
        'eapol_pre_fail_thresh' => null,
        'eapol_pre_fail_intv' => null,
        'deauth_unknown_src_thresh' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'sensor_mode' => 'sensor-mode',
        'ap_scan' => 'ap-scan',
        'ap_bgscan_period' => 'ap-bgscan-period',
        'ap_bgscan_intv' => 'ap-bgscan-intv',
        'ap_bgscan_duration' => 'ap-bgscan-duration',
        'ap_bgscan_idle' => 'ap-bgscan-idle',
        'ap_bgscan_report_intv' => 'ap-bgscan-report-intv',
        'ap_bgscan_disable_schedules' => 'ap-bgscan-disable-schedules',
        'ap_fgscan_report_intv' => 'ap-fgscan-report-intv',
        'ap_scan_passive' => 'ap-scan-passive',
        'ap_scan_threshold' => 'ap-scan-threshold',
        'ap_auto_suppress' => 'ap-auto-suppress',
        'wireless_bridge' => 'wireless-bridge',
        'deauth_broadcast' => 'deauth-broadcast',
        'null_ssid_probe_resp' => 'null-ssid-probe-resp',
        'long_duration_attack' => 'long-duration-attack',
        'long_duration_thresh' => 'long-duration-thresh',
        'invalid_mac_oui' => 'invalid-mac-oui',
        'weak_wep_iv' => 'weak-wep-iv',
        'auth_frame_flood' => 'auth-frame-flood',
        'auth_flood_time' => 'auth-flood-time',
        'auth_flood_thresh' => 'auth-flood-thresh',
        'assoc_frame_flood' => 'assoc-frame-flood',
        'assoc_flood_time' => 'assoc-flood-time',
        'assoc_flood_thresh' => 'assoc-flood-thresh',
        'spoofed_deauth' => 'spoofed-deauth',
        'asleap_attack' => 'asleap-attack',
        'eapol_start_flood' => 'eapol-start-flood',
        'eapol_start_thresh' => 'eapol-start-thresh',
        'eapol_start_intv' => 'eapol-start-intv',
        'eapol_logoff_flood' => 'eapol-logoff-flood',
        'eapol_logoff_thresh' => 'eapol-logoff-thresh',
        'eapol_logoff_intv' => 'eapol-logoff-intv',
        'eapol_succ_flood' => 'eapol-succ-flood',
        'eapol_succ_thresh' => 'eapol-succ-thresh',
        'eapol_succ_intv' => 'eapol-succ-intv',
        'eapol_fail_flood' => 'eapol-fail-flood',
        'eapol_fail_thresh' => 'eapol-fail-thresh',
        'eapol_fail_intv' => 'eapol-fail-intv',
        'eapol_pre_succ_flood' => 'eapol-pre-succ-flood',
        'eapol_pre_succ_thresh' => 'eapol-pre-succ-thresh',
        'eapol_pre_succ_intv' => 'eapol-pre-succ-intv',
        'eapol_pre_fail_flood' => 'eapol-pre-fail-flood',
        'eapol_pre_fail_thresh' => 'eapol-pre-fail-thresh',
        'eapol_pre_fail_intv' => 'eapol-pre-fail-intv',
        'deauth_unknown_src_thresh' => 'deauth-unknown-src-thresh'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'sensor_mode' => 'setSensorMode',
        'ap_scan' => 'setApScan',
        'ap_bgscan_period' => 'setApBgscanPeriod',
        'ap_bgscan_intv' => 'setApBgscanIntv',
        'ap_bgscan_duration' => 'setApBgscanDuration',
        'ap_bgscan_idle' => 'setApBgscanIdle',
        'ap_bgscan_report_intv' => 'setApBgscanReportIntv',
        'ap_bgscan_disable_schedules' => 'setApBgscanDisableSchedules',
        'ap_fgscan_report_intv' => 'setApFgscanReportIntv',
        'ap_scan_passive' => 'setApScanPassive',
        'ap_scan_threshold' => 'setApScanThreshold',
        'ap_auto_suppress' => 'setApAutoSuppress',
        'wireless_bridge' => 'setWirelessBridge',
        'deauth_broadcast' => 'setDeauthBroadcast',
        'null_ssid_probe_resp' => 'setNullSsidProbeResp',
        'long_duration_attack' => 'setLongDurationAttack',
        'long_duration_thresh' => 'setLongDurationThresh',
        'invalid_mac_oui' => 'setInvalidMacOui',
        'weak_wep_iv' => 'setWeakWepIv',
        'auth_frame_flood' => 'setAuthFrameFlood',
        'auth_flood_time' => 'setAuthFloodTime',
        'auth_flood_thresh' => 'setAuthFloodThresh',
        'assoc_frame_flood' => 'setAssocFrameFlood',
        'assoc_flood_time' => 'setAssocFloodTime',
        'assoc_flood_thresh' => 'setAssocFloodThresh',
        'spoofed_deauth' => 'setSpoofedDeauth',
        'asleap_attack' => 'setAsleapAttack',
        'eapol_start_flood' => 'setEapolStartFlood',
        'eapol_start_thresh' => 'setEapolStartThresh',
        'eapol_start_intv' => 'setEapolStartIntv',
        'eapol_logoff_flood' => 'setEapolLogoffFlood',
        'eapol_logoff_thresh' => 'setEapolLogoffThresh',
        'eapol_logoff_intv' => 'setEapolLogoffIntv',
        'eapol_succ_flood' => 'setEapolSuccFlood',
        'eapol_succ_thresh' => 'setEapolSuccThresh',
        'eapol_succ_intv' => 'setEapolSuccIntv',
        'eapol_fail_flood' => 'setEapolFailFlood',
        'eapol_fail_thresh' => 'setEapolFailThresh',
        'eapol_fail_intv' => 'setEapolFailIntv',
        'eapol_pre_succ_flood' => 'setEapolPreSuccFlood',
        'eapol_pre_succ_thresh' => 'setEapolPreSuccThresh',
        'eapol_pre_succ_intv' => 'setEapolPreSuccIntv',
        'eapol_pre_fail_flood' => 'setEapolPreFailFlood',
        'eapol_pre_fail_thresh' => 'setEapolPreFailThresh',
        'eapol_pre_fail_intv' => 'setEapolPreFailIntv',
        'deauth_unknown_src_thresh' => 'setDeauthUnknownSrcThresh'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'sensor_mode' => 'getSensorMode',
        'ap_scan' => 'getApScan',
        'ap_bgscan_period' => 'getApBgscanPeriod',
        'ap_bgscan_intv' => 'getApBgscanIntv',
        'ap_bgscan_duration' => 'getApBgscanDuration',
        'ap_bgscan_idle' => 'getApBgscanIdle',
        'ap_bgscan_report_intv' => 'getApBgscanReportIntv',
        'ap_bgscan_disable_schedules' => 'getApBgscanDisableSchedules',
        'ap_fgscan_report_intv' => 'getApFgscanReportIntv',
        'ap_scan_passive' => 'getApScanPassive',
        'ap_scan_threshold' => 'getApScanThreshold',
        'ap_auto_suppress' => 'getApAutoSuppress',
        'wireless_bridge' => 'getWirelessBridge',
        'deauth_broadcast' => 'getDeauthBroadcast',
        'null_ssid_probe_resp' => 'getNullSsidProbeResp',
        'long_duration_attack' => 'getLongDurationAttack',
        'long_duration_thresh' => 'getLongDurationThresh',
        'invalid_mac_oui' => 'getInvalidMacOui',
        'weak_wep_iv' => 'getWeakWepIv',
        'auth_frame_flood' => 'getAuthFrameFlood',
        'auth_flood_time' => 'getAuthFloodTime',
        'auth_flood_thresh' => 'getAuthFloodThresh',
        'assoc_frame_flood' => 'getAssocFrameFlood',
        'assoc_flood_time' => 'getAssocFloodTime',
        'assoc_flood_thresh' => 'getAssocFloodThresh',
        'spoofed_deauth' => 'getSpoofedDeauth',
        'asleap_attack' => 'getAsleapAttack',
        'eapol_start_flood' => 'getEapolStartFlood',
        'eapol_start_thresh' => 'getEapolStartThresh',
        'eapol_start_intv' => 'getEapolStartIntv',
        'eapol_logoff_flood' => 'getEapolLogoffFlood',
        'eapol_logoff_thresh' => 'getEapolLogoffThresh',
        'eapol_logoff_intv' => 'getEapolLogoffIntv',
        'eapol_succ_flood' => 'getEapolSuccFlood',
        'eapol_succ_thresh' => 'getEapolSuccThresh',
        'eapol_succ_intv' => 'getEapolSuccIntv',
        'eapol_fail_flood' => 'getEapolFailFlood',
        'eapol_fail_thresh' => 'getEapolFailThresh',
        'eapol_fail_intv' => 'getEapolFailIntv',
        'eapol_pre_succ_flood' => 'getEapolPreSuccFlood',
        'eapol_pre_succ_thresh' => 'getEapolPreSuccThresh',
        'eapol_pre_succ_intv' => 'getEapolPreSuccIntv',
        'eapol_pre_fail_flood' => 'getEapolPreFailFlood',
        'eapol_pre_fail_thresh' => 'getEapolPreFailThresh',
        'eapol_pre_fail_intv' => 'getEapolPreFailIntv',
        'deauth_unknown_src_thresh' => 'getDeauthUnknownSrcThresh'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SENSOR_MODE_DISABLE = 'disable';
    const SENSOR_MODE_FOREIGN = 'foreign';
    const SENSOR_MODE_BOTH = 'both';
    const AP_SCAN_DISABLE = 'disable';
    const AP_SCAN_ENABLE = 'enable';
    const AP_SCAN_PASSIVE_ENABLE = 'enable';
    const AP_SCAN_PASSIVE_DISABLE = 'disable';
    const AP_AUTO_SUPPRESS_ENABLE = 'enable';
    const AP_AUTO_SUPPRESS_DISABLE = 'disable';
    const WIRELESS_BRIDGE_ENABLE = 'enable';
    const WIRELESS_BRIDGE_DISABLE = 'disable';
    const DEAUTH_BROADCAST_ENABLE = 'enable';
    const DEAUTH_BROADCAST_DISABLE = 'disable';
    const NULL_SSID_PROBE_RESP_ENABLE = 'enable';
    const NULL_SSID_PROBE_RESP_DISABLE = 'disable';
    const LONG_DURATION_ATTACK_ENABLE = 'enable';
    const LONG_DURATION_ATTACK_DISABLE = 'disable';
    const INVALID_MAC_OUI_ENABLE = 'enable';
    const INVALID_MAC_OUI_DISABLE = 'disable';
    const WEAK_WEP_IV_ENABLE = 'enable';
    const WEAK_WEP_IV_DISABLE = 'disable';
    const AUTH_FRAME_FLOOD_ENABLE = 'enable';
    const AUTH_FRAME_FLOOD_DISABLE = 'disable';
    const ASSOC_FRAME_FLOOD_ENABLE = 'enable';
    const ASSOC_FRAME_FLOOD_DISABLE = 'disable';
    const SPOOFED_DEAUTH_ENABLE = 'enable';
    const SPOOFED_DEAUTH_DISABLE = 'disable';
    const ASLEAP_ATTACK_ENABLE = 'enable';
    const ASLEAP_ATTACK_DISABLE = 'disable';
    const EAPOL_START_FLOOD_ENABLE = 'enable';
    const EAPOL_START_FLOOD_DISABLE = 'disable';
    const EAPOL_LOGOFF_FLOOD_ENABLE = 'enable';
    const EAPOL_LOGOFF_FLOOD_DISABLE = 'disable';
    const EAPOL_SUCC_FLOOD_ENABLE = 'enable';
    const EAPOL_SUCC_FLOOD_DISABLE = 'disable';
    const EAPOL_FAIL_FLOOD_ENABLE = 'enable';
    const EAPOL_FAIL_FLOOD_DISABLE = 'disable';
    const EAPOL_PRE_SUCC_FLOOD_ENABLE = 'enable';
    const EAPOL_PRE_SUCC_FLOOD_DISABLE = 'disable';
    const EAPOL_PRE_FAIL_FLOOD_ENABLE = 'enable';
    const EAPOL_PRE_FAIL_FLOOD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSensorModeAllowableValues()
    {
        return [
            self::SENSOR_MODE_DISABLE,
            self::SENSOR_MODE_FOREIGN,
            self::SENSOR_MODE_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApScanAllowableValues()
    {
        return [
            self::AP_SCAN_DISABLE,
            self::AP_SCAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApScanPassiveAllowableValues()
    {
        return [
            self::AP_SCAN_PASSIVE_ENABLE,
            self::AP_SCAN_PASSIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApAutoSuppressAllowableValues()
    {
        return [
            self::AP_AUTO_SUPPRESS_ENABLE,
            self::AP_AUTO_SUPPRESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWirelessBridgeAllowableValues()
    {
        return [
            self::WIRELESS_BRIDGE_ENABLE,
            self::WIRELESS_BRIDGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeauthBroadcastAllowableValues()
    {
        return [
            self::DEAUTH_BROADCAST_ENABLE,
            self::DEAUTH_BROADCAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNullSsidProbeRespAllowableValues()
    {
        return [
            self::NULL_SSID_PROBE_RESP_ENABLE,
            self::NULL_SSID_PROBE_RESP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLongDurationAttackAllowableValues()
    {
        return [
            self::LONG_DURATION_ATTACK_ENABLE,
            self::LONG_DURATION_ATTACK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvalidMacOuiAllowableValues()
    {
        return [
            self::INVALID_MAC_OUI_ENABLE,
            self::INVALID_MAC_OUI_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeakWepIvAllowableValues()
    {
        return [
            self::WEAK_WEP_IV_ENABLE,
            self::WEAK_WEP_IV_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthFrameFloodAllowableValues()
    {
        return [
            self::AUTH_FRAME_FLOOD_ENABLE,
            self::AUTH_FRAME_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssocFrameFloodAllowableValues()
    {
        return [
            self::ASSOC_FRAME_FLOOD_ENABLE,
            self::ASSOC_FRAME_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpoofedDeauthAllowableValues()
    {
        return [
            self::SPOOFED_DEAUTH_ENABLE,
            self::SPOOFED_DEAUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAsleapAttackAllowableValues()
    {
        return [
            self::ASLEAP_ATTACK_ENABLE,
            self::ASLEAP_ATTACK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolStartFloodAllowableValues()
    {
        return [
            self::EAPOL_START_FLOOD_ENABLE,
            self::EAPOL_START_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolLogoffFloodAllowableValues()
    {
        return [
            self::EAPOL_LOGOFF_FLOOD_ENABLE,
            self::EAPOL_LOGOFF_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolSuccFloodAllowableValues()
    {
        return [
            self::EAPOL_SUCC_FLOOD_ENABLE,
            self::EAPOL_SUCC_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolFailFloodAllowableValues()
    {
        return [
            self::EAPOL_FAIL_FLOOD_ENABLE,
            self::EAPOL_FAIL_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolPreSuccFloodAllowableValues()
    {
        return [
            self::EAPOL_PRE_SUCC_FLOOD_ENABLE,
            self::EAPOL_PRE_SUCC_FLOOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolPreFailFloodAllowableValues()
    {
        return [
            self::EAPOL_PRE_FAIL_FLOOD_ENABLE,
            self::EAPOL_PRE_FAIL_FLOOD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['sensor_mode'] = $data['sensor_mode'] ?? null;
        $this->container['ap_scan'] = $data['ap_scan'] ?? null;
        $this->container['ap_bgscan_period'] = $data['ap_bgscan_period'] ?? null;
        $this->container['ap_bgscan_intv'] = $data['ap_bgscan_intv'] ?? null;
        $this->container['ap_bgscan_duration'] = $data['ap_bgscan_duration'] ?? null;
        $this->container['ap_bgscan_idle'] = $data['ap_bgscan_idle'] ?? null;
        $this->container['ap_bgscan_report_intv'] = $data['ap_bgscan_report_intv'] ?? null;
        $this->container['ap_bgscan_disable_schedules'] = $data['ap_bgscan_disable_schedules'] ?? null;
        $this->container['ap_fgscan_report_intv'] = $data['ap_fgscan_report_intv'] ?? null;
        $this->container['ap_scan_passive'] = $data['ap_scan_passive'] ?? null;
        $this->container['ap_scan_threshold'] = $data['ap_scan_threshold'] ?? null;
        $this->container['ap_auto_suppress'] = $data['ap_auto_suppress'] ?? null;
        $this->container['wireless_bridge'] = $data['wireless_bridge'] ?? null;
        $this->container['deauth_broadcast'] = $data['deauth_broadcast'] ?? null;
        $this->container['null_ssid_probe_resp'] = $data['null_ssid_probe_resp'] ?? null;
        $this->container['long_duration_attack'] = $data['long_duration_attack'] ?? null;
        $this->container['long_duration_thresh'] = $data['long_duration_thresh'] ?? null;
        $this->container['invalid_mac_oui'] = $data['invalid_mac_oui'] ?? null;
        $this->container['weak_wep_iv'] = $data['weak_wep_iv'] ?? null;
        $this->container['auth_frame_flood'] = $data['auth_frame_flood'] ?? null;
        $this->container['auth_flood_time'] = $data['auth_flood_time'] ?? null;
        $this->container['auth_flood_thresh'] = $data['auth_flood_thresh'] ?? null;
        $this->container['assoc_frame_flood'] = $data['assoc_frame_flood'] ?? null;
        $this->container['assoc_flood_time'] = $data['assoc_flood_time'] ?? null;
        $this->container['assoc_flood_thresh'] = $data['assoc_flood_thresh'] ?? null;
        $this->container['spoofed_deauth'] = $data['spoofed_deauth'] ?? null;
        $this->container['asleap_attack'] = $data['asleap_attack'] ?? null;
        $this->container['eapol_start_flood'] = $data['eapol_start_flood'] ?? null;
        $this->container['eapol_start_thresh'] = $data['eapol_start_thresh'] ?? null;
        $this->container['eapol_start_intv'] = $data['eapol_start_intv'] ?? null;
        $this->container['eapol_logoff_flood'] = $data['eapol_logoff_flood'] ?? null;
        $this->container['eapol_logoff_thresh'] = $data['eapol_logoff_thresh'] ?? null;
        $this->container['eapol_logoff_intv'] = $data['eapol_logoff_intv'] ?? null;
        $this->container['eapol_succ_flood'] = $data['eapol_succ_flood'] ?? null;
        $this->container['eapol_succ_thresh'] = $data['eapol_succ_thresh'] ?? null;
        $this->container['eapol_succ_intv'] = $data['eapol_succ_intv'] ?? null;
        $this->container['eapol_fail_flood'] = $data['eapol_fail_flood'] ?? null;
        $this->container['eapol_fail_thresh'] = $data['eapol_fail_thresh'] ?? null;
        $this->container['eapol_fail_intv'] = $data['eapol_fail_intv'] ?? null;
        $this->container['eapol_pre_succ_flood'] = $data['eapol_pre_succ_flood'] ?? null;
        $this->container['eapol_pre_succ_thresh'] = $data['eapol_pre_succ_thresh'] ?? null;
        $this->container['eapol_pre_succ_intv'] = $data['eapol_pre_succ_intv'] ?? null;
        $this->container['eapol_pre_fail_flood'] = $data['eapol_pre_fail_flood'] ?? null;
        $this->container['eapol_pre_fail_thresh'] = $data['eapol_pre_fail_thresh'] ?? null;
        $this->container['eapol_pre_fail_intv'] = $data['eapol_pre_fail_intv'] ?? null;
        $this->container['deauth_unknown_src_thresh'] = $data['deauth_unknown_src_thresh'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 63)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSensorModeAllowableValues();
        if (!is_null($this->container['sensor_mode']) && !in_array($this->container['sensor_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sensor_mode', must be one of '%s'",
                $this->container['sensor_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApScanAllowableValues();
        if (!is_null($this->container['ap_scan']) && !in_array($this->container['ap_scan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_scan', must be one of '%s'",
                $this->container['ap_scan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ap_bgscan_period']) && ($this->container['ap_bgscan_period'] > 3600)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_period', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['ap_bgscan_period']) && ($this->container['ap_bgscan_period'] < 10)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_period', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['ap_bgscan_intv']) && ($this->container['ap_bgscan_intv'] > 600)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_intv', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['ap_bgscan_intv']) && ($this->container['ap_bgscan_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_intv', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ap_bgscan_duration']) && ($this->container['ap_bgscan_duration'] > 1000)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_duration', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['ap_bgscan_duration']) && ($this->container['ap_bgscan_duration'] < 10)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_duration', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['ap_bgscan_idle']) && ($this->container['ap_bgscan_idle'] > 1000)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_idle', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['ap_bgscan_idle']) && ($this->container['ap_bgscan_idle'] < 0)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_idle', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ap_bgscan_report_intv']) && ($this->container['ap_bgscan_report_intv'] > 600)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_report_intv', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['ap_bgscan_report_intv']) && ($this->container['ap_bgscan_report_intv'] < 15)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_report_intv', must be bigger than or equal to 15.";
        }

        if (!is_null($this->container['ap_bgscan_disable_schedules']) && (count($this->container['ap_bgscan_disable_schedules']) > 16)) {
            $invalidProperties[] = "invalid value for 'ap_bgscan_disable_schedules', number of items must be less than or equal to 16.";
        }

        if (!is_null($this->container['ap_fgscan_report_intv']) && ($this->container['ap_fgscan_report_intv'] > 600)) {
            $invalidProperties[] = "invalid value for 'ap_fgscan_report_intv', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['ap_fgscan_report_intv']) && ($this->container['ap_fgscan_report_intv'] < 15)) {
            $invalidProperties[] = "invalid value for 'ap_fgscan_report_intv', must be bigger than or equal to 15.";
        }

        $allowedValues = $this->getApScanPassiveAllowableValues();
        if (!is_null($this->container['ap_scan_passive']) && !in_array($this->container['ap_scan_passive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_scan_passive', must be one of '%s'",
                $this->container['ap_scan_passive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ap_scan_threshold']) && (mb_strlen($this->container['ap_scan_threshold']) > 7)) {
            $invalidProperties[] = "invalid value for 'ap_scan_threshold', the character length must be smaller than or equal to 7.";
        }

        $allowedValues = $this->getApAutoSuppressAllowableValues();
        if (!is_null($this->container['ap_auto_suppress']) && !in_array($this->container['ap_auto_suppress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_auto_suppress', must be one of '%s'",
                $this->container['ap_auto_suppress'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWirelessBridgeAllowableValues();
        if (!is_null($this->container['wireless_bridge']) && !in_array($this->container['wireless_bridge'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wireless_bridge', must be one of '%s'",
                $this->container['wireless_bridge'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeauthBroadcastAllowableValues();
        if (!is_null($this->container['deauth_broadcast']) && !in_array($this->container['deauth_broadcast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deauth_broadcast', must be one of '%s'",
                $this->container['deauth_broadcast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNullSsidProbeRespAllowableValues();
        if (!is_null($this->container['null_ssid_probe_resp']) && !in_array($this->container['null_ssid_probe_resp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'null_ssid_probe_resp', must be one of '%s'",
                $this->container['null_ssid_probe_resp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLongDurationAttackAllowableValues();
        if (!is_null($this->container['long_duration_attack']) && !in_array($this->container['long_duration_attack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'long_duration_attack', must be one of '%s'",
                $this->container['long_duration_attack'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['long_duration_thresh']) && ($this->container['long_duration_thresh'] > 32767)) {
            $invalidProperties[] = "invalid value for 'long_duration_thresh', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['long_duration_thresh']) && ($this->container['long_duration_thresh'] < 1000)) {
            $invalidProperties[] = "invalid value for 'long_duration_thresh', must be bigger than or equal to 1000.";
        }

        $allowedValues = $this->getInvalidMacOuiAllowableValues();
        if (!is_null($this->container['invalid_mac_oui']) && !in_array($this->container['invalid_mac_oui'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invalid_mac_oui', must be one of '%s'",
                $this->container['invalid_mac_oui'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeakWepIvAllowableValues();
        if (!is_null($this->container['weak_wep_iv']) && !in_array($this->container['weak_wep_iv'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weak_wep_iv', must be one of '%s'",
                $this->container['weak_wep_iv'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthFrameFloodAllowableValues();
        if (!is_null($this->container['auth_frame_flood']) && !in_array($this->container['auth_frame_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_frame_flood', must be one of '%s'",
                $this->container['auth_frame_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_flood_time']) && ($this->container['auth_flood_time'] > 120)) {
            $invalidProperties[] = "invalid value for 'auth_flood_time', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['auth_flood_time']) && ($this->container['auth_flood_time'] < 5)) {
            $invalidProperties[] = "invalid value for 'auth_flood_time', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['auth_flood_thresh']) && ($this->container['auth_flood_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'auth_flood_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['auth_flood_thresh']) && ($this->container['auth_flood_thresh'] < 1)) {
            $invalidProperties[] = "invalid value for 'auth_flood_thresh', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAssocFrameFloodAllowableValues();
        if (!is_null($this->container['assoc_frame_flood']) && !in_array($this->container['assoc_frame_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assoc_frame_flood', must be one of '%s'",
                $this->container['assoc_frame_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['assoc_flood_time']) && ($this->container['assoc_flood_time'] > 120)) {
            $invalidProperties[] = "invalid value for 'assoc_flood_time', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['assoc_flood_time']) && ($this->container['assoc_flood_time'] < 5)) {
            $invalidProperties[] = "invalid value for 'assoc_flood_time', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['assoc_flood_thresh']) && ($this->container['assoc_flood_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'assoc_flood_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['assoc_flood_thresh']) && ($this->container['assoc_flood_thresh'] < 1)) {
            $invalidProperties[] = "invalid value for 'assoc_flood_thresh', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSpoofedDeauthAllowableValues();
        if (!is_null($this->container['spoofed_deauth']) && !in_array($this->container['spoofed_deauth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spoofed_deauth', must be one of '%s'",
                $this->container['spoofed_deauth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAsleapAttackAllowableValues();
        if (!is_null($this->container['asleap_attack']) && !in_array($this->container['asleap_attack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asleap_attack', must be one of '%s'",
                $this->container['asleap_attack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEapolStartFloodAllowableValues();
        if (!is_null($this->container['eapol_start_flood']) && !in_array($this->container['eapol_start_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_start_flood', must be one of '%s'",
                $this->container['eapol_start_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_start_thresh']) && ($this->container['eapol_start_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_start_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_start_thresh']) && ($this->container['eapol_start_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_start_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_start_intv']) && ($this->container['eapol_start_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_start_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_start_intv']) && ($this->container['eapol_start_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_start_intv', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEapolLogoffFloodAllowableValues();
        if (!is_null($this->container['eapol_logoff_flood']) && !in_array($this->container['eapol_logoff_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_logoff_flood', must be one of '%s'",
                $this->container['eapol_logoff_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_logoff_thresh']) && ($this->container['eapol_logoff_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_logoff_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_logoff_thresh']) && ($this->container['eapol_logoff_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_logoff_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_logoff_intv']) && ($this->container['eapol_logoff_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_logoff_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_logoff_intv']) && ($this->container['eapol_logoff_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_logoff_intv', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEapolSuccFloodAllowableValues();
        if (!is_null($this->container['eapol_succ_flood']) && !in_array($this->container['eapol_succ_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_succ_flood', must be one of '%s'",
                $this->container['eapol_succ_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_succ_thresh']) && ($this->container['eapol_succ_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_succ_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_succ_thresh']) && ($this->container['eapol_succ_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_succ_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_succ_intv']) && ($this->container['eapol_succ_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_succ_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_succ_intv']) && ($this->container['eapol_succ_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_succ_intv', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEapolFailFloodAllowableValues();
        if (!is_null($this->container['eapol_fail_flood']) && !in_array($this->container['eapol_fail_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_fail_flood', must be one of '%s'",
                $this->container['eapol_fail_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_fail_thresh']) && ($this->container['eapol_fail_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_fail_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_fail_thresh']) && ($this->container['eapol_fail_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_fail_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_fail_intv']) && ($this->container['eapol_fail_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_fail_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_fail_intv']) && ($this->container['eapol_fail_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_fail_intv', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEapolPreSuccFloodAllowableValues();
        if (!is_null($this->container['eapol_pre_succ_flood']) && !in_array($this->container['eapol_pre_succ_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_pre_succ_flood', must be one of '%s'",
                $this->container['eapol_pre_succ_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_pre_succ_thresh']) && ($this->container['eapol_pre_succ_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_succ_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_pre_succ_thresh']) && ($this->container['eapol_pre_succ_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_succ_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_pre_succ_intv']) && ($this->container['eapol_pre_succ_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_succ_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_pre_succ_intv']) && ($this->container['eapol_pre_succ_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_succ_intv', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEapolPreFailFloodAllowableValues();
        if (!is_null($this->container['eapol_pre_fail_flood']) && !in_array($this->container['eapol_pre_fail_flood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_pre_fail_flood', must be one of '%s'",
                $this->container['eapol_pre_fail_flood'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eapol_pre_fail_thresh']) && ($this->container['eapol_pre_fail_thresh'] > 100)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_fail_thresh', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['eapol_pre_fail_thresh']) && ($this->container['eapol_pre_fail_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_fail_thresh', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['eapol_pre_fail_intv']) && ($this->container['eapol_pre_fail_intv'] > 3600)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_fail_intv', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['eapol_pre_fail_intv']) && ($this->container['eapol_pre_fail_intv'] < 1)) {
            $invalidProperties[] = "invalid value for 'eapol_pre_fail_intv', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deauth_unknown_src_thresh']) && ($this->container['deauth_unknown_src_thresh'] > 65535)) {
            $invalidProperties[] = "invalid value for 'deauth_unknown_src_thresh', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['deauth_unknown_src_thresh']) && ($this->container['deauth_unknown_src_thresh'] < 0)) {
            $invalidProperties[] = "invalid value for 'deauth_unknown_src_thresh', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WIDS profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject613., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 63)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject613., must be smaller than or equal to 63.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets sensor_mode
     *
     * @return string|null
     */
    public function getSensorMode()
    {
        return $this->container['sensor_mode'];
    }

    /**
     * Sets sensor_mode
     *
     * @param string|null $sensor_mode Scan nearby WiFi stations (default = disable).    disable:Disable the scan.    foreign:Enable the scan and monitor foreign channels. Foreign channels are all other available channels than the current operating channel.    both:Enable the scan and monitor both foreign and home channels. Select this option to monitor all WiFi channels.
     *
     * @return self
     */
    public function setSensorMode($sensor_mode)
    {
        $allowedValues = $this->getSensorModeAllowableValues();
        if (!is_null($sensor_mode) && !in_array($sensor_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sensor_mode', must be one of '%s'",
                    $sensor_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sensor_mode'] = $sensor_mode;

        return $this;
    }

    /**
     * Gets ap_scan
     *
     * @return string|null
     */
    public function getApScan()
    {
        return $this->container['ap_scan'];
    }

    /**
     * Sets ap_scan
     *
     * @param string|null $ap_scan Enable/disable rogue AP detection.    disable:Disable rogue AP detection.    enable:Enable rogue AP detection.
     *
     * @return self
     */
    public function setApScan($ap_scan)
    {
        $allowedValues = $this->getApScanAllowableValues();
        if (!is_null($ap_scan) && !in_array($ap_scan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_scan', must be one of '%s'",
                    $ap_scan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_scan'] = $ap_scan;

        return $this;
    }

    /**
     * Gets ap_bgscan_period
     *
     * @return int|null
     */
    public function getApBgscanPeriod()
    {
        return $this->container['ap_bgscan_period'];
    }

    /**
     * Sets ap_bgscan_period
     *
     * @param int|null $ap_bgscan_period Period of time between background scans (10 - 3600 sec, default = 600).
     *
     * @return self
     */
    public function setApBgscanPeriod($ap_bgscan_period)
    {

        if (!is_null($ap_bgscan_period) && ($ap_bgscan_period > 3600)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_period when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($ap_bgscan_period) && ($ap_bgscan_period < 10)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_period when calling InlineObject613., must be bigger than or equal to 10.');
        }

        $this->container['ap_bgscan_period'] = $ap_bgscan_period;

        return $this;
    }

    /**
     * Gets ap_bgscan_intv
     *
     * @return int|null
     */
    public function getApBgscanIntv()
    {
        return $this->container['ap_bgscan_intv'];
    }

    /**
     * Sets ap_bgscan_intv
     *
     * @param int|null $ap_bgscan_intv Period of time between scanning two channels (1 - 600 sec, default = 1).
     *
     * @return self
     */
    public function setApBgscanIntv($ap_bgscan_intv)
    {

        if (!is_null($ap_bgscan_intv) && ($ap_bgscan_intv > 600)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_intv when calling InlineObject613., must be smaller than or equal to 600.');
        }
        if (!is_null($ap_bgscan_intv) && ($ap_bgscan_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['ap_bgscan_intv'] = $ap_bgscan_intv;

        return $this;
    }

    /**
     * Gets ap_bgscan_duration
     *
     * @return int|null
     */
    public function getApBgscanDuration()
    {
        return $this->container['ap_bgscan_duration'];
    }

    /**
     * Sets ap_bgscan_duration
     *
     * @param int|null $ap_bgscan_duration Listening time on a scanning channel (10 - 1000 msec, default = 20).
     *
     * @return self
     */
    public function setApBgscanDuration($ap_bgscan_duration)
    {

        if (!is_null($ap_bgscan_duration) && ($ap_bgscan_duration > 1000)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_duration when calling InlineObject613., must be smaller than or equal to 1000.');
        }
        if (!is_null($ap_bgscan_duration) && ($ap_bgscan_duration < 10)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_duration when calling InlineObject613., must be bigger than or equal to 10.');
        }

        $this->container['ap_bgscan_duration'] = $ap_bgscan_duration;

        return $this;
    }

    /**
     * Gets ap_bgscan_idle
     *
     * @return int|null
     */
    public function getApBgscanIdle()
    {
        return $this->container['ap_bgscan_idle'];
    }

    /**
     * Sets ap_bgscan_idle
     *
     * @param int|null $ap_bgscan_idle Waiting time for channel inactivity before scanning this channel (0 - 1000 msec, default = 0).
     *
     * @return self
     */
    public function setApBgscanIdle($ap_bgscan_idle)
    {

        if (!is_null($ap_bgscan_idle) && ($ap_bgscan_idle > 1000)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_idle when calling InlineObject613., must be smaller than or equal to 1000.');
        }
        if (!is_null($ap_bgscan_idle) && ($ap_bgscan_idle < 0)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_idle when calling InlineObject613., must be bigger than or equal to 0.');
        }

        $this->container['ap_bgscan_idle'] = $ap_bgscan_idle;

        return $this;
    }

    /**
     * Gets ap_bgscan_report_intv
     *
     * @return int|null
     */
    public function getApBgscanReportIntv()
    {
        return $this->container['ap_bgscan_report_intv'];
    }

    /**
     * Sets ap_bgscan_report_intv
     *
     * @param int|null $ap_bgscan_report_intv Period of time between background scan reports (15 - 600 sec, default = 30).
     *
     * @return self
     */
    public function setApBgscanReportIntv($ap_bgscan_report_intv)
    {

        if (!is_null($ap_bgscan_report_intv) && ($ap_bgscan_report_intv > 600)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_report_intv when calling InlineObject613., must be smaller than or equal to 600.');
        }
        if (!is_null($ap_bgscan_report_intv) && ($ap_bgscan_report_intv < 15)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_report_intv when calling InlineObject613., must be bigger than or equal to 15.');
        }

        $this->container['ap_bgscan_report_intv'] = $ap_bgscan_report_intv;

        return $this;
    }

    /**
     * Gets ap_bgscan_disable_schedules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null
     */
    public function getApBgscanDisableSchedules()
    {
        return $this->container['ap_bgscan_disable_schedules'];
    }

    /**
     * Sets ap_bgscan_disable_schedules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null $ap_bgscan_disable_schedules Firewall schedules for turning off FortiAP radio background scan. Background scan will be disabled when at least one of the schedules is valid. Separate multiple schedule names with a space.
     *
     * @return self
     */
    public function setApBgscanDisableSchedules($ap_bgscan_disable_schedules)
    {

        if (!is_null($ap_bgscan_disable_schedules) && (count($ap_bgscan_disable_schedules) > 16)) {
            throw new \InvalidArgumentException('invalid value for $ap_bgscan_disable_schedules when calling InlineObject613., number of items must be less than or equal to 16.');
        }
        $this->container['ap_bgscan_disable_schedules'] = $ap_bgscan_disable_schedules;

        return $this;
    }

    /**
     * Gets ap_fgscan_report_intv
     *
     * @return int|null
     */
    public function getApFgscanReportIntv()
    {
        return $this->container['ap_fgscan_report_intv'];
    }

    /**
     * Sets ap_fgscan_report_intv
     *
     * @param int|null $ap_fgscan_report_intv Period of time between foreground scan reports (15 - 600 sec, default = 15).
     *
     * @return self
     */
    public function setApFgscanReportIntv($ap_fgscan_report_intv)
    {

        if (!is_null($ap_fgscan_report_intv) && ($ap_fgscan_report_intv > 600)) {
            throw new \InvalidArgumentException('invalid value for $ap_fgscan_report_intv when calling InlineObject613., must be smaller than or equal to 600.');
        }
        if (!is_null($ap_fgscan_report_intv) && ($ap_fgscan_report_intv < 15)) {
            throw new \InvalidArgumentException('invalid value for $ap_fgscan_report_intv when calling InlineObject613., must be bigger than or equal to 15.');
        }

        $this->container['ap_fgscan_report_intv'] = $ap_fgscan_report_intv;

        return $this;
    }

    /**
     * Gets ap_scan_passive
     *
     * @return string|null
     */
    public function getApScanPassive()
    {
        return $this->container['ap_scan_passive'];
    }

    /**
     * Sets ap_scan_passive
     *
     * @param string|null $ap_scan_passive Enable/disable passive scanning. Enable means do not send probe request on any channels (default = disable).    enable:Passive scanning on all channels.    disable:Passive scanning only on DFS channels.
     *
     * @return self
     */
    public function setApScanPassive($ap_scan_passive)
    {
        $allowedValues = $this->getApScanPassiveAllowableValues();
        if (!is_null($ap_scan_passive) && !in_array($ap_scan_passive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_scan_passive', must be one of '%s'",
                    $ap_scan_passive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_scan_passive'] = $ap_scan_passive;

        return $this;
    }

    /**
     * Gets ap_scan_threshold
     *
     * @return string|null
     */
    public function getApScanThreshold()
    {
        return $this->container['ap_scan_threshold'];
    }

    /**
     * Sets ap_scan_threshold
     *
     * @param string|null $ap_scan_threshold Minimum signal level/threshold in dBm required for the AP to report detected rogue AP (-95 to -20, default = -90).
     *
     * @return self
     */
    public function setApScanThreshold($ap_scan_threshold)
    {
        if (!is_null($ap_scan_threshold) && (mb_strlen($ap_scan_threshold) > 7)) {
            throw new \InvalidArgumentException('invalid length for $ap_scan_threshold when calling InlineObject613., must be smaller than or equal to 7.');
        }

        $this->container['ap_scan_threshold'] = $ap_scan_threshold;

        return $this;
    }

    /**
     * Gets ap_auto_suppress
     *
     * @return string|null
     */
    public function getApAutoSuppress()
    {
        return $this->container['ap_auto_suppress'];
    }

    /**
     * Sets ap_auto_suppress
     *
     * @param string|null $ap_auto_suppress Enable/disable on-wire rogue AP auto-suppression (default = disable).    enable:Enable on-wire rogue AP auto-suppression.    disable:Disable on-wire rogue AP auto-suppression.
     *
     * @return self
     */
    public function setApAutoSuppress($ap_auto_suppress)
    {
        $allowedValues = $this->getApAutoSuppressAllowableValues();
        if (!is_null($ap_auto_suppress) && !in_array($ap_auto_suppress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_auto_suppress', must be one of '%s'",
                    $ap_auto_suppress,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_auto_suppress'] = $ap_auto_suppress;

        return $this;
    }

    /**
     * Gets wireless_bridge
     *
     * @return string|null
     */
    public function getWirelessBridge()
    {
        return $this->container['wireless_bridge'];
    }

    /**
     * Sets wireless_bridge
     *
     * @param string|null $wireless_bridge Enable/disable wireless bridge detection (default = disable).    enable:Enable wireless bridge detection.    disable:Disable wireless bridge detection.
     *
     * @return self
     */
    public function setWirelessBridge($wireless_bridge)
    {
        $allowedValues = $this->getWirelessBridgeAllowableValues();
        if (!is_null($wireless_bridge) && !in_array($wireless_bridge, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wireless_bridge', must be one of '%s'",
                    $wireless_bridge,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wireless_bridge'] = $wireless_bridge;

        return $this;
    }

    /**
     * Gets deauth_broadcast
     *
     * @return string|null
     */
    public function getDeauthBroadcast()
    {
        return $this->container['deauth_broadcast'];
    }

    /**
     * Sets deauth_broadcast
     *
     * @param string|null $deauth_broadcast Enable/disable broadcasting de-authentication detection (default = disable).    enable:Enable broadcast de-authentication detection.    disable:Disable broadcast de-authentication detection.
     *
     * @return self
     */
    public function setDeauthBroadcast($deauth_broadcast)
    {
        $allowedValues = $this->getDeauthBroadcastAllowableValues();
        if (!is_null($deauth_broadcast) && !in_array($deauth_broadcast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deauth_broadcast', must be one of '%s'",
                    $deauth_broadcast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deauth_broadcast'] = $deauth_broadcast;

        return $this;
    }

    /**
     * Gets null_ssid_probe_resp
     *
     * @return string|null
     */
    public function getNullSsidProbeResp()
    {
        return $this->container['null_ssid_probe_resp'];
    }

    /**
     * Sets null_ssid_probe_resp
     *
     * @param string|null $null_ssid_probe_resp Enable/disable null SSID probe response detection (default = disable).    enable:Enable null SSID probe resp detection.    disable:Disable null SSID probe resp detection.
     *
     * @return self
     */
    public function setNullSsidProbeResp($null_ssid_probe_resp)
    {
        $allowedValues = $this->getNullSsidProbeRespAllowableValues();
        if (!is_null($null_ssid_probe_resp) && !in_array($null_ssid_probe_resp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'null_ssid_probe_resp', must be one of '%s'",
                    $null_ssid_probe_resp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['null_ssid_probe_resp'] = $null_ssid_probe_resp;

        return $this;
    }

    /**
     * Gets long_duration_attack
     *
     * @return string|null
     */
    public function getLongDurationAttack()
    {
        return $this->container['long_duration_attack'];
    }

    /**
     * Sets long_duration_attack
     *
     * @param string|null $long_duration_attack Enable/disable long duration attack detection based on user configured threshold (default = disable).    enable:Enable long duration attack detection.    disable:Disable long duration attack detection.
     *
     * @return self
     */
    public function setLongDurationAttack($long_duration_attack)
    {
        $allowedValues = $this->getLongDurationAttackAllowableValues();
        if (!is_null($long_duration_attack) && !in_array($long_duration_attack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'long_duration_attack', must be one of '%s'",
                    $long_duration_attack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['long_duration_attack'] = $long_duration_attack;

        return $this;
    }

    /**
     * Gets long_duration_thresh
     *
     * @return int|null
     */
    public function getLongDurationThresh()
    {
        return $this->container['long_duration_thresh'];
    }

    /**
     * Sets long_duration_thresh
     *
     * @param int|null $long_duration_thresh Threshold value for long duration attack detection (1000 - 32767 usec, default = 8200).
     *
     * @return self
     */
    public function setLongDurationThresh($long_duration_thresh)
    {

        if (!is_null($long_duration_thresh) && ($long_duration_thresh > 32767)) {
            throw new \InvalidArgumentException('invalid value for $long_duration_thresh when calling InlineObject613., must be smaller than or equal to 32767.');
        }
        if (!is_null($long_duration_thresh) && ($long_duration_thresh < 1000)) {
            throw new \InvalidArgumentException('invalid value for $long_duration_thresh when calling InlineObject613., must be bigger than or equal to 1000.');
        }

        $this->container['long_duration_thresh'] = $long_duration_thresh;

        return $this;
    }

    /**
     * Gets invalid_mac_oui
     *
     * @return string|null
     */
    public function getInvalidMacOui()
    {
        return $this->container['invalid_mac_oui'];
    }

    /**
     * Sets invalid_mac_oui
     *
     * @param string|null $invalid_mac_oui Enable/disable invalid MAC OUI detection.    enable:Enable invalid MAC OUI detection.    disable:Disable invalid MAC OUI detection.
     *
     * @return self
     */
    public function setInvalidMacOui($invalid_mac_oui)
    {
        $allowedValues = $this->getInvalidMacOuiAllowableValues();
        if (!is_null($invalid_mac_oui) && !in_array($invalid_mac_oui, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invalid_mac_oui', must be one of '%s'",
                    $invalid_mac_oui,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invalid_mac_oui'] = $invalid_mac_oui;

        return $this;
    }

    /**
     * Gets weak_wep_iv
     *
     * @return string|null
     */
    public function getWeakWepIv()
    {
        return $this->container['weak_wep_iv'];
    }

    /**
     * Sets weak_wep_iv
     *
     * @param string|null $weak_wep_iv Enable/disable weak WEP IV (Initialization Vector) detection (default = disable).    enable:Enable weak WEP IV detection.    disable:Disable weak WEP IV detection.
     *
     * @return self
     */
    public function setWeakWepIv($weak_wep_iv)
    {
        $allowedValues = $this->getWeakWepIvAllowableValues();
        if (!is_null($weak_wep_iv) && !in_array($weak_wep_iv, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weak_wep_iv', must be one of '%s'",
                    $weak_wep_iv,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weak_wep_iv'] = $weak_wep_iv;

        return $this;
    }

    /**
     * Gets auth_frame_flood
     *
     * @return string|null
     */
    public function getAuthFrameFlood()
    {
        return $this->container['auth_frame_flood'];
    }

    /**
     * Sets auth_frame_flood
     *
     * @param string|null $auth_frame_flood Enable/disable authentication frame flooding detection (default = disable).    enable:Enable authentication frame flooding detection.    disable:Disable authentication frame flooding detection.
     *
     * @return self
     */
    public function setAuthFrameFlood($auth_frame_flood)
    {
        $allowedValues = $this->getAuthFrameFloodAllowableValues();
        if (!is_null($auth_frame_flood) && !in_array($auth_frame_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_frame_flood', must be one of '%s'",
                    $auth_frame_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_frame_flood'] = $auth_frame_flood;

        return $this;
    }

    /**
     * Gets auth_flood_time
     *
     * @return int|null
     */
    public function getAuthFloodTime()
    {
        return $this->container['auth_flood_time'];
    }

    /**
     * Sets auth_flood_time
     *
     * @param int|null $auth_flood_time Number of seconds after which a station is considered not connected.
     *
     * @return self
     */
    public function setAuthFloodTime($auth_flood_time)
    {

        if (!is_null($auth_flood_time) && ($auth_flood_time > 120)) {
            throw new \InvalidArgumentException('invalid value for $auth_flood_time when calling InlineObject613., must be smaller than or equal to 120.');
        }
        if (!is_null($auth_flood_time) && ($auth_flood_time < 5)) {
            throw new \InvalidArgumentException('invalid value for $auth_flood_time when calling InlineObject613., must be bigger than or equal to 5.');
        }

        $this->container['auth_flood_time'] = $auth_flood_time;

        return $this;
    }

    /**
     * Gets auth_flood_thresh
     *
     * @return int|null
     */
    public function getAuthFloodThresh()
    {
        return $this->container['auth_flood_thresh'];
    }

    /**
     * Sets auth_flood_thresh
     *
     * @param int|null $auth_flood_thresh The threshold value for authentication frame flooding.
     *
     * @return self
     */
    public function setAuthFloodThresh($auth_flood_thresh)
    {

        if (!is_null($auth_flood_thresh) && ($auth_flood_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $auth_flood_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($auth_flood_thresh) && ($auth_flood_thresh < 1)) {
            throw new \InvalidArgumentException('invalid value for $auth_flood_thresh when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['auth_flood_thresh'] = $auth_flood_thresh;

        return $this;
    }

    /**
     * Gets assoc_frame_flood
     *
     * @return string|null
     */
    public function getAssocFrameFlood()
    {
        return $this->container['assoc_frame_flood'];
    }

    /**
     * Sets assoc_frame_flood
     *
     * @param string|null $assoc_frame_flood Enable/disable association frame flooding detection (default = disable).    enable:Enable association frame flooding detection.    disable:Disable association frame flooding detection.
     *
     * @return self
     */
    public function setAssocFrameFlood($assoc_frame_flood)
    {
        $allowedValues = $this->getAssocFrameFloodAllowableValues();
        if (!is_null($assoc_frame_flood) && !in_array($assoc_frame_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assoc_frame_flood', must be one of '%s'",
                    $assoc_frame_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assoc_frame_flood'] = $assoc_frame_flood;

        return $this;
    }

    /**
     * Gets assoc_flood_time
     *
     * @return int|null
     */
    public function getAssocFloodTime()
    {
        return $this->container['assoc_flood_time'];
    }

    /**
     * Sets assoc_flood_time
     *
     * @param int|null $assoc_flood_time Number of seconds after which a station is considered not connected.
     *
     * @return self
     */
    public function setAssocFloodTime($assoc_flood_time)
    {

        if (!is_null($assoc_flood_time) && ($assoc_flood_time > 120)) {
            throw new \InvalidArgumentException('invalid value for $assoc_flood_time when calling InlineObject613., must be smaller than or equal to 120.');
        }
        if (!is_null($assoc_flood_time) && ($assoc_flood_time < 5)) {
            throw new \InvalidArgumentException('invalid value for $assoc_flood_time when calling InlineObject613., must be bigger than or equal to 5.');
        }

        $this->container['assoc_flood_time'] = $assoc_flood_time;

        return $this;
    }

    /**
     * Gets assoc_flood_thresh
     *
     * @return int|null
     */
    public function getAssocFloodThresh()
    {
        return $this->container['assoc_flood_thresh'];
    }

    /**
     * Sets assoc_flood_thresh
     *
     * @param int|null $assoc_flood_thresh The threshold value for association frame flooding.
     *
     * @return self
     */
    public function setAssocFloodThresh($assoc_flood_thresh)
    {

        if (!is_null($assoc_flood_thresh) && ($assoc_flood_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $assoc_flood_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($assoc_flood_thresh) && ($assoc_flood_thresh < 1)) {
            throw new \InvalidArgumentException('invalid value for $assoc_flood_thresh when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['assoc_flood_thresh'] = $assoc_flood_thresh;

        return $this;
    }

    /**
     * Gets spoofed_deauth
     *
     * @return string|null
     */
    public function getSpoofedDeauth()
    {
        return $this->container['spoofed_deauth'];
    }

    /**
     * Sets spoofed_deauth
     *
     * @param string|null $spoofed_deauth Enable/disable spoofed de-authentication attack detection (default = disable).    enable:Enable spoofed de-authentication attack detection.    disable:Disable spoofed de-authentication attack detection.
     *
     * @return self
     */
    public function setSpoofedDeauth($spoofed_deauth)
    {
        $allowedValues = $this->getSpoofedDeauthAllowableValues();
        if (!is_null($spoofed_deauth) && !in_array($spoofed_deauth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spoofed_deauth', must be one of '%s'",
                    $spoofed_deauth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spoofed_deauth'] = $spoofed_deauth;

        return $this;
    }

    /**
     * Gets asleap_attack
     *
     * @return string|null
     */
    public function getAsleapAttack()
    {
        return $this->container['asleap_attack'];
    }

    /**
     * Sets asleap_attack
     *
     * @param string|null $asleap_attack Enable/disable asleap attack detection (default = disable).    enable:Enable asleap attack detection.    disable:Disable asleap attack detection.
     *
     * @return self
     */
    public function setAsleapAttack($asleap_attack)
    {
        $allowedValues = $this->getAsleapAttackAllowableValues();
        if (!is_null($asleap_attack) && !in_array($asleap_attack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asleap_attack', must be one of '%s'",
                    $asleap_attack,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asleap_attack'] = $asleap_attack;

        return $this;
    }

    /**
     * Gets eapol_start_flood
     *
     * @return string|null
     */
    public function getEapolStartFlood()
    {
        return $this->container['eapol_start_flood'];
    }

    /**
     * Sets eapol_start_flood
     *
     * @param string|null $eapol_start_flood Enable/disable EAPOL-Start flooding (to AP) detection (default = disable).    enable:Enable EAPOL-Start flooding detection.    disable:Disable EAPOL-Start flooding detection.
     *
     * @return self
     */
    public function setEapolStartFlood($eapol_start_flood)
    {
        $allowedValues = $this->getEapolStartFloodAllowableValues();
        if (!is_null($eapol_start_flood) && !in_array($eapol_start_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_start_flood', must be one of '%s'",
                    $eapol_start_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_start_flood'] = $eapol_start_flood;

        return $this;
    }

    /**
     * Gets eapol_start_thresh
     *
     * @return int|null
     */
    public function getEapolStartThresh()
    {
        return $this->container['eapol_start_thresh'];
    }

    /**
     * Sets eapol_start_thresh
     *
     * @param int|null $eapol_start_thresh The threshold value for EAPOL-Start flooding in specified interval.
     *
     * @return self
     */
    public function setEapolStartThresh($eapol_start_thresh)
    {

        if (!is_null($eapol_start_thresh) && ($eapol_start_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_start_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_start_thresh) && ($eapol_start_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_start_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_start_thresh'] = $eapol_start_thresh;

        return $this;
    }

    /**
     * Gets eapol_start_intv
     *
     * @return int|null
     */
    public function getEapolStartIntv()
    {
        return $this->container['eapol_start_intv'];
    }

    /**
     * Sets eapol_start_intv
     *
     * @param int|null $eapol_start_intv The detection interval for EAPOL-Start flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolStartIntv($eapol_start_intv)
    {

        if (!is_null($eapol_start_intv) && ($eapol_start_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_start_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_start_intv) && ($eapol_start_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_start_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_start_intv'] = $eapol_start_intv;

        return $this;
    }

    /**
     * Gets eapol_logoff_flood
     *
     * @return string|null
     */
    public function getEapolLogoffFlood()
    {
        return $this->container['eapol_logoff_flood'];
    }

    /**
     * Sets eapol_logoff_flood
     *
     * @param string|null $eapol_logoff_flood Enable/disable EAPOL-Logoff flooding (to AP) detection (default = disable).    enable:Enable EAPOL-Logoff flooding detection.    disable:Disable EAPOL-Logoff flooding detection.
     *
     * @return self
     */
    public function setEapolLogoffFlood($eapol_logoff_flood)
    {
        $allowedValues = $this->getEapolLogoffFloodAllowableValues();
        if (!is_null($eapol_logoff_flood) && !in_array($eapol_logoff_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_logoff_flood', must be one of '%s'",
                    $eapol_logoff_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_logoff_flood'] = $eapol_logoff_flood;

        return $this;
    }

    /**
     * Gets eapol_logoff_thresh
     *
     * @return int|null
     */
    public function getEapolLogoffThresh()
    {
        return $this->container['eapol_logoff_thresh'];
    }

    /**
     * Sets eapol_logoff_thresh
     *
     * @param int|null $eapol_logoff_thresh The threshold value for EAPOL-Logoff flooding in specified interval.
     *
     * @return self
     */
    public function setEapolLogoffThresh($eapol_logoff_thresh)
    {

        if (!is_null($eapol_logoff_thresh) && ($eapol_logoff_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_logoff_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_logoff_thresh) && ($eapol_logoff_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_logoff_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_logoff_thresh'] = $eapol_logoff_thresh;

        return $this;
    }

    /**
     * Gets eapol_logoff_intv
     *
     * @return int|null
     */
    public function getEapolLogoffIntv()
    {
        return $this->container['eapol_logoff_intv'];
    }

    /**
     * Sets eapol_logoff_intv
     *
     * @param int|null $eapol_logoff_intv The detection interval for EAPOL-Logoff flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolLogoffIntv($eapol_logoff_intv)
    {

        if (!is_null($eapol_logoff_intv) && ($eapol_logoff_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_logoff_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_logoff_intv) && ($eapol_logoff_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_logoff_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_logoff_intv'] = $eapol_logoff_intv;

        return $this;
    }

    /**
     * Gets eapol_succ_flood
     *
     * @return string|null
     */
    public function getEapolSuccFlood()
    {
        return $this->container['eapol_succ_flood'];
    }

    /**
     * Sets eapol_succ_flood
     *
     * @param string|null $eapol_succ_flood Enable/disable EAPOL-Success flooding (to AP) detection (default = disable).    enable:Enable EAPOL-Success flooding detection.    disable:Disable EAPOL-Success flooding detection.
     *
     * @return self
     */
    public function setEapolSuccFlood($eapol_succ_flood)
    {
        $allowedValues = $this->getEapolSuccFloodAllowableValues();
        if (!is_null($eapol_succ_flood) && !in_array($eapol_succ_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_succ_flood', must be one of '%s'",
                    $eapol_succ_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_succ_flood'] = $eapol_succ_flood;

        return $this;
    }

    /**
     * Gets eapol_succ_thresh
     *
     * @return int|null
     */
    public function getEapolSuccThresh()
    {
        return $this->container['eapol_succ_thresh'];
    }

    /**
     * Sets eapol_succ_thresh
     *
     * @param int|null $eapol_succ_thresh The threshold value for EAPOL-Success flooding in specified interval.
     *
     * @return self
     */
    public function setEapolSuccThresh($eapol_succ_thresh)
    {

        if (!is_null($eapol_succ_thresh) && ($eapol_succ_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_succ_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_succ_thresh) && ($eapol_succ_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_succ_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_succ_thresh'] = $eapol_succ_thresh;

        return $this;
    }

    /**
     * Gets eapol_succ_intv
     *
     * @return int|null
     */
    public function getEapolSuccIntv()
    {
        return $this->container['eapol_succ_intv'];
    }

    /**
     * Sets eapol_succ_intv
     *
     * @param int|null $eapol_succ_intv The detection interval for EAPOL-Success flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolSuccIntv($eapol_succ_intv)
    {

        if (!is_null($eapol_succ_intv) && ($eapol_succ_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_succ_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_succ_intv) && ($eapol_succ_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_succ_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_succ_intv'] = $eapol_succ_intv;

        return $this;
    }

    /**
     * Gets eapol_fail_flood
     *
     * @return string|null
     */
    public function getEapolFailFlood()
    {
        return $this->container['eapol_fail_flood'];
    }

    /**
     * Sets eapol_fail_flood
     *
     * @param string|null $eapol_fail_flood Enable/disable EAPOL-Failure flooding (to AP) detection (default = disable).    enable:Enable EAPOL-Failure flooding detection.    disable:Disable EAPOL-Failure flooding detection.
     *
     * @return self
     */
    public function setEapolFailFlood($eapol_fail_flood)
    {
        $allowedValues = $this->getEapolFailFloodAllowableValues();
        if (!is_null($eapol_fail_flood) && !in_array($eapol_fail_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_fail_flood', must be one of '%s'",
                    $eapol_fail_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_fail_flood'] = $eapol_fail_flood;

        return $this;
    }

    /**
     * Gets eapol_fail_thresh
     *
     * @return int|null
     */
    public function getEapolFailThresh()
    {
        return $this->container['eapol_fail_thresh'];
    }

    /**
     * Sets eapol_fail_thresh
     *
     * @param int|null $eapol_fail_thresh The threshold value for EAPOL-Failure flooding in specified interval.
     *
     * @return self
     */
    public function setEapolFailThresh($eapol_fail_thresh)
    {

        if (!is_null($eapol_fail_thresh) && ($eapol_fail_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_fail_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_fail_thresh) && ($eapol_fail_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_fail_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_fail_thresh'] = $eapol_fail_thresh;

        return $this;
    }

    /**
     * Gets eapol_fail_intv
     *
     * @return int|null
     */
    public function getEapolFailIntv()
    {
        return $this->container['eapol_fail_intv'];
    }

    /**
     * Sets eapol_fail_intv
     *
     * @param int|null $eapol_fail_intv The detection interval for EAPOL-Failure flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolFailIntv($eapol_fail_intv)
    {

        if (!is_null($eapol_fail_intv) && ($eapol_fail_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_fail_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_fail_intv) && ($eapol_fail_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_fail_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_fail_intv'] = $eapol_fail_intv;

        return $this;
    }

    /**
     * Gets eapol_pre_succ_flood
     *
     * @return string|null
     */
    public function getEapolPreSuccFlood()
    {
        return $this->container['eapol_pre_succ_flood'];
    }

    /**
     * Sets eapol_pre_succ_flood
     *
     * @param string|null $eapol_pre_succ_flood Enable/disable premature EAPOL-Success flooding (to STA) detection (default = disable).    enable:Enable premature EAPOL-Success flooding detection.    disable:Disable premature EAPOL-Success flooding detection.
     *
     * @return self
     */
    public function setEapolPreSuccFlood($eapol_pre_succ_flood)
    {
        $allowedValues = $this->getEapolPreSuccFloodAllowableValues();
        if (!is_null($eapol_pre_succ_flood) && !in_array($eapol_pre_succ_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_pre_succ_flood', must be one of '%s'",
                    $eapol_pre_succ_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_pre_succ_flood'] = $eapol_pre_succ_flood;

        return $this;
    }

    /**
     * Gets eapol_pre_succ_thresh
     *
     * @return int|null
     */
    public function getEapolPreSuccThresh()
    {
        return $this->container['eapol_pre_succ_thresh'];
    }

    /**
     * Sets eapol_pre_succ_thresh
     *
     * @param int|null $eapol_pre_succ_thresh The threshold value for premature EAPOL-Success flooding in specified interval.
     *
     * @return self
     */
    public function setEapolPreSuccThresh($eapol_pre_succ_thresh)
    {

        if (!is_null($eapol_pre_succ_thresh) && ($eapol_pre_succ_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_succ_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_pre_succ_thresh) && ($eapol_pre_succ_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_succ_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_pre_succ_thresh'] = $eapol_pre_succ_thresh;

        return $this;
    }

    /**
     * Gets eapol_pre_succ_intv
     *
     * @return int|null
     */
    public function getEapolPreSuccIntv()
    {
        return $this->container['eapol_pre_succ_intv'];
    }

    /**
     * Sets eapol_pre_succ_intv
     *
     * @param int|null $eapol_pre_succ_intv The detection interval for premature EAPOL-Success flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolPreSuccIntv($eapol_pre_succ_intv)
    {

        if (!is_null($eapol_pre_succ_intv) && ($eapol_pre_succ_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_succ_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_pre_succ_intv) && ($eapol_pre_succ_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_succ_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_pre_succ_intv'] = $eapol_pre_succ_intv;

        return $this;
    }

    /**
     * Gets eapol_pre_fail_flood
     *
     * @return string|null
     */
    public function getEapolPreFailFlood()
    {
        return $this->container['eapol_pre_fail_flood'];
    }

    /**
     * Sets eapol_pre_fail_flood
     *
     * @param string|null $eapol_pre_fail_flood Enable/disable premature EAPOL-Failure flooding (to STA) detection (default = disable).    enable:Enable premature EAPOL-Failure flooding detection.    disable:Disable premature EAPOL-Failure flooding detection.
     *
     * @return self
     */
    public function setEapolPreFailFlood($eapol_pre_fail_flood)
    {
        $allowedValues = $this->getEapolPreFailFloodAllowableValues();
        if (!is_null($eapol_pre_fail_flood) && !in_array($eapol_pre_fail_flood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_pre_fail_flood', must be one of '%s'",
                    $eapol_pre_fail_flood,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_pre_fail_flood'] = $eapol_pre_fail_flood;

        return $this;
    }

    /**
     * Gets eapol_pre_fail_thresh
     *
     * @return int|null
     */
    public function getEapolPreFailThresh()
    {
        return $this->container['eapol_pre_fail_thresh'];
    }

    /**
     * Sets eapol_pre_fail_thresh
     *
     * @param int|null $eapol_pre_fail_thresh The threshold value for premature EAPOL-Failure flooding in specified interval.
     *
     * @return self
     */
    public function setEapolPreFailThresh($eapol_pre_fail_thresh)
    {

        if (!is_null($eapol_pre_fail_thresh) && ($eapol_pre_fail_thresh > 100)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_fail_thresh when calling InlineObject613., must be smaller than or equal to 100.');
        }
        if (!is_null($eapol_pre_fail_thresh) && ($eapol_pre_fail_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_fail_thresh when calling InlineObject613., must be bigger than or equal to 2.');
        }

        $this->container['eapol_pre_fail_thresh'] = $eapol_pre_fail_thresh;

        return $this;
    }

    /**
     * Gets eapol_pre_fail_intv
     *
     * @return int|null
     */
    public function getEapolPreFailIntv()
    {
        return $this->container['eapol_pre_fail_intv'];
    }

    /**
     * Sets eapol_pre_fail_intv
     *
     * @param int|null $eapol_pre_fail_intv The detection interval for premature EAPOL-Failure flooding (1 - 3600 sec).
     *
     * @return self
     */
    public function setEapolPreFailIntv($eapol_pre_fail_intv)
    {

        if (!is_null($eapol_pre_fail_intv) && ($eapol_pre_fail_intv > 3600)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_fail_intv when calling InlineObject613., must be smaller than or equal to 3600.');
        }
        if (!is_null($eapol_pre_fail_intv) && ($eapol_pre_fail_intv < 1)) {
            throw new \InvalidArgumentException('invalid value for $eapol_pre_fail_intv when calling InlineObject613., must be bigger than or equal to 1.');
        }

        $this->container['eapol_pre_fail_intv'] = $eapol_pre_fail_intv;

        return $this;
    }

    /**
     * Gets deauth_unknown_src_thresh
     *
     * @return int|null
     */
    public function getDeauthUnknownSrcThresh()
    {
        return $this->container['deauth_unknown_src_thresh'];
    }

    /**
     * Sets deauth_unknown_src_thresh
     *
     * @param int|null $deauth_unknown_src_thresh Threshold value per second to deauth unknown src for DoS attack (0: no limit).
     *
     * @return self
     */
    public function setDeauthUnknownSrcThresh($deauth_unknown_src_thresh)
    {

        if (!is_null($deauth_unknown_src_thresh) && ($deauth_unknown_src_thresh > 65535)) {
            throw new \InvalidArgumentException('invalid value for $deauth_unknown_src_thresh when calling InlineObject613., must be smaller than or equal to 65535.');
        }
        if (!is_null($deauth_unknown_src_thresh) && ($deauth_unknown_src_thresh < 0)) {
            throw new \InvalidArgumentException('invalid value for $deauth_unknown_src_thresh when calling InlineObject613., must be bigger than or equal to 0.');
        }

        $this->container['deauth_unknown_src_thresh'] = $deauth_unknown_src_thresh;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


