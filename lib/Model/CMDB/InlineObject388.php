<?php
/**
 * InlineObject388
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject388 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject388 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_388';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'vdom' => 'string',
        'span_dest_port' => 'string',
        'span_source_port' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]',
        'member' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]',
        'type' => 'string',
        'intra_switch_policy' => 'string',
        'mac_ttl' => 'int',
        'span' => 'string',
        'span_direction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'vdom' => null,
        'span_dest_port' => null,
        'span_source_port' => null,
        'member' => null,
        'type' => null,
        'intra_switch_policy' => null,
        'mac_ttl' => null,
        'span' => null,
        'span_direction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vdom' => 'vdom',
        'span_dest_port' => 'span-dest-port',
        'span_source_port' => 'span-source-port',
        'member' => 'member',
        'type' => 'type',
        'intra_switch_policy' => 'intra-switch-policy',
        'mac_ttl' => 'mac-ttl',
        'span' => 'span',
        'span_direction' => 'span-direction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vdom' => 'setVdom',
        'span_dest_port' => 'setSpanDestPort',
        'span_source_port' => 'setSpanSourcePort',
        'member' => 'setMember',
        'type' => 'setType',
        'intra_switch_policy' => 'setIntraSwitchPolicy',
        'mac_ttl' => 'setMacTtl',
        'span' => 'setSpan',
        'span_direction' => 'setSpanDirection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vdom' => 'getVdom',
        'span_dest_port' => 'getSpanDestPort',
        'span_source_port' => 'getSpanSourcePort',
        'member' => 'getMember',
        'type' => 'getType',
        'intra_switch_policy' => 'getIntraSwitchPolicy',
        'mac_ttl' => 'getMacTtl',
        'span' => 'getSpan',
        'span_direction' => 'getSpanDirection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE__SWITCH = 'switch';
    const TYPE_HUB = 'hub';
    const INTRA_SWITCH_POLICY_IMPLICIT = 'implicit';
    const INTRA_SWITCH_POLICY_EXPLICIT = 'explicit';
    const SPAN_DISABLE = 'disable';
    const SPAN_ENABLE = 'enable';
    const SPAN_DIRECTION_RX = 'rx';
    const SPAN_DIRECTION_TX = 'tx';
    const SPAN_DIRECTION_BOTH = 'both';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__SWITCH,
            self::TYPE_HUB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntraSwitchPolicyAllowableValues()
    {
        return [
            self::INTRA_SWITCH_POLICY_IMPLICIT,
            self::INTRA_SWITCH_POLICY_EXPLICIT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpanAllowableValues()
    {
        return [
            self::SPAN_DISABLE,
            self::SPAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpanDirectionAllowableValues()
    {
        return [
            self::SPAN_DIRECTION_RX,
            self::SPAN_DIRECTION_TX,
            self::SPAN_DIRECTION_BOTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['span_dest_port'] = $data['span_dest_port'] ?? null;
        $this->container['span_source_port'] = $data['span_source_port'] ?? null;
        $this->container['member'] = $data['member'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['intra_switch_policy'] = $data['intra_switch_policy'] ?? null;
        $this->container['mac_ttl'] = $data['mac_ttl'] ?? null;
        $this->container['span'] = $data['span'] ?? null;
        $this->container['span_direction'] = $data['span_direction'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['vdom']) && (mb_strlen($this->container['vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'vdom', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['span_dest_port']) && (mb_strlen($this->container['span_dest_port']) > 15)) {
            $invalidProperties[] = "invalid value for 'span_dest_port', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['span_source_port']) && (count($this->container['span_source_port']) > 0)) {
            $invalidProperties[] = "invalid value for 'span_source_port', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['member']) && (count($this->container['member']) > 0)) {
            $invalidProperties[] = "invalid value for 'member', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIntraSwitchPolicyAllowableValues();
        if (!is_null($this->container['intra_switch_policy']) && !in_array($this->container['intra_switch_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'intra_switch_policy', must be one of '%s'",
                $this->container['intra_switch_policy'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac_ttl']) && ($this->container['mac_ttl'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'mac_ttl', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['mac_ttl']) && ($this->container['mac_ttl'] < 300)) {
            $invalidProperties[] = "invalid value for 'mac_ttl', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getSpanAllowableValues();
        if (!is_null($this->container['span']) && !in_array($this->container['span'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'span', must be one of '%s'",
                $this->container['span'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpanDirectionAllowableValues();
        if (!is_null($this->container['span_direction']) && !in_array($this->container['span_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'span_direction', must be one of '%s'",
                $this->container['span_direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Interface name (name cannot be in use by any other interfaces, VLANs, or inter-VDOM links).
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject388., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom VDOM that the software switch belongs to.
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        if (!is_null($vdom) && (mb_strlen($vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $vdom when calling InlineObject388., must be smaller than or equal to 31.');
        }

        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets span_dest_port
     *
     * @return string|null
     */
    public function getSpanDestPort()
    {
        return $this->container['span_dest_port'];
    }

    /**
     * Sets span_dest_port
     *
     * @param string|null $span_dest_port SPAN destination port name. All traffic on the SPAN source ports is echoed to the SPAN destination port.
     *
     * @return self
     */
    public function setSpanDestPort($span_dest_port)
    {
        if (!is_null($span_dest_port) && (mb_strlen($span_dest_port) > 15)) {
            throw new \InvalidArgumentException('invalid length for $span_dest_port when calling InlineObject388., must be smaller than or equal to 15.');
        }

        $this->container['span_dest_port'] = $span_dest_port;

        return $this;
    }

    /**
     * Gets span_source_port
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null
     */
    public function getSpanSourcePort()
    {
        return $this->container['span_source_port'];
    }

    /**
     * Sets span_source_port
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null $span_source_port Physical interface name. Port spanning echoes all traffic on the SPAN source ports to the SPAN destination port.
     *
     * @return self
     */
    public function setSpanSourcePort($span_source_port)
    {

        if (!is_null($span_source_port) && (count($span_source_port) > 0)) {
            throw new \InvalidArgumentException('invalid value for $span_source_port when calling InlineObject388., number of items must be less than or equal to 0.');
        }
        $this->container['span_source_port'] = $span_source_port;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null $member Names of the interfaces that belong to the virtual switch.
     *
     * @return self
     */
    public function setMember($member)
    {

        if (!is_null($member) && (count($member) > 0)) {
            throw new \InvalidArgumentException('invalid value for $member when calling InlineObject388., number of items must be less than or equal to 0.');
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of switch based on functionality: switch for normal functionality, or hub to duplicate packets to all port members.    switch:Switch for normal switch functionality (available in NAT mode only).    hub:Hub to duplicate packets to all member ports.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets intra_switch_policy
     *
     * @return string|null
     */
    public function getIntraSwitchPolicy()
    {
        return $this->container['intra_switch_policy'];
    }

    /**
     * Sets intra_switch_policy
     *
     * @param string|null $intra_switch_policy Allow any traffic between switch interfaces or require firewall policies to allow traffic between switch interfaces.    implicit:Traffic between switch members is implicitly allowed.    explicit:Traffic between switch members must match firewall policies.
     *
     * @return self
     */
    public function setIntraSwitchPolicy($intra_switch_policy)
    {
        $allowedValues = $this->getIntraSwitchPolicyAllowableValues();
        if (!is_null($intra_switch_policy) && !in_array($intra_switch_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'intra_switch_policy', must be one of '%s'",
                    $intra_switch_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['intra_switch_policy'] = $intra_switch_policy;

        return $this;
    }

    /**
     * Gets mac_ttl
     *
     * @return int|null
     */
    public function getMacTtl()
    {
        return $this->container['mac_ttl'];
    }

    /**
     * Sets mac_ttl
     *
     * @param int|null $mac_ttl Duration for which MAC addresses are held in the ARP table (300 - 8640000 sec, default = 300).
     *
     * @return self
     */
    public function setMacTtl($mac_ttl)
    {

        if (!is_null($mac_ttl) && ($mac_ttl > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $mac_ttl when calling InlineObject388., must be smaller than or equal to 8640000.');
        }
        if (!is_null($mac_ttl) && ($mac_ttl < 300)) {
            throw new \InvalidArgumentException('invalid value for $mac_ttl when calling InlineObject388., must be bigger than or equal to 300.');
        }

        $this->container['mac_ttl'] = $mac_ttl;

        return $this;
    }

    /**
     * Gets span
     *
     * @return string|null
     */
    public function getSpan()
    {
        return $this->container['span'];
    }

    /**
     * Sets span
     *
     * @param string|null $span Enable/disable port spanning. Port spanning echoes traffic received by the software switch to the span destination port.    disable:Disable port spanning.    enable:Enable port spanning.
     *
     * @return self
     */
    public function setSpan($span)
    {
        $allowedValues = $this->getSpanAllowableValues();
        if (!is_null($span) && !in_array($span, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'span', must be one of '%s'",
                    $span,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['span'] = $span;

        return $this;
    }

    /**
     * Gets span_direction
     *
     * @return string|null
     */
    public function getSpanDirection()
    {
        return $this->container['span_direction'];
    }

    /**
     * Sets span_direction
     *
     * @param string|null $span_direction The direction in which the SPAN port operates, either: rx, tx, or both.    rx:Copies only received packets from source SPAN ports to the destination SPAN port.    tx:Copies only transmitted packets from source SPAN ports to the destination SPAN port.    both:Copies both received and transmitted packets from source SPAN ports to the destination SPAN port.
     *
     * @return self
     */
    public function setSpanDirection($span_direction)
    {
        $allowedValues = $this->getSpanDirectionAllowableValues();
        if (!is_null($span_direction) && !in_array($span_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'span_direction', must be one of '%s'",
                    $span_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['span_direction'] = $span_direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


