<?php
/**
 * InlineObject202
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject202 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject202 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_202';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'switch_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'switch_profile' => 'string',
        'access_profile' => 'string',
        'fsw_wan1_peer' => 'string',
        'fsw_wan1_admin' => 'string',
        'poe_pre_standard_detection' => 'string',
        'poe_detection_type' => 'int',
        'directly_connected' => 'int',
        'version' => 'int',
        'max_allowed_trunk_members' => 'int',
        'pre_provisioned' => 'int',
        'l3_discovered' => 'int',
        'tdr_supported' => 'string',
        'dynamic_capability' => 'string',
        'switch_device_tag' => 'string',
        'switch_dhcp_opt43_key' => 'string',
        'mclag_igmp_snooping_aware' => 'string',
        'dynamically_discovered' => 'int',
        'type' => 'string',
        'owner_vdom' => 'string',
        'flow_identity' => 'string',
        'staged_image_version' => 'string',
        'delayed_restart_trigger' => 'int',
        'ports' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdPorts[]',
        'ip_source_guard' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIpSourceGuard[]',
        'stp_settings' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpSettings[]',
        'stp_instance' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpInstance[]',
        'override_snmp_sysinfo' => 'string',
        'snmp_sysinfo' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpSysinfo[]',
        'override_snmp_trap_threshold' => 'string',
        'snmp_trap_threshold' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpTrapThreshold[]',
        'override_snmp_community' => 'string',
        'snmp_community' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpCommunity[]',
        'override_snmp_user' => 'string',
        'snmp_user' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpUser[]',
        'qos_drop_policy' => 'string',
        'qos_red_probability' => 'int',
        'switch_log' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSwitchLog[]',
        'remote_log' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdRemoteLog[]',
        'storm_control' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStormControl[]',
        'mirror' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMirror[]',
        'static_mac' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStaticMac[]',
        'custom_command' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdCustomCommand[]',
        'igmp_snooping' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIgmpSnooping[]',
        '_802_1_x_settings' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchId8021XSettings[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'switch_id' => null,
        'name' => null,
        'description' => null,
        'switch_profile' => null,
        'access_profile' => null,
        'fsw_wan1_peer' => null,
        'fsw_wan1_admin' => null,
        'poe_pre_standard_detection' => null,
        'poe_detection_type' => null,
        'directly_connected' => null,
        'version' => null,
        'max_allowed_trunk_members' => null,
        'pre_provisioned' => null,
        'l3_discovered' => null,
        'tdr_supported' => null,
        'dynamic_capability' => null,
        'switch_device_tag' => null,
        'switch_dhcp_opt43_key' => null,
        'mclag_igmp_snooping_aware' => null,
        'dynamically_discovered' => null,
        'type' => null,
        'owner_vdom' => null,
        'flow_identity' => null,
        'staged_image_version' => null,
        'delayed_restart_trigger' => null,
        'ports' => null,
        'ip_source_guard' => null,
        'stp_settings' => null,
        'stp_instance' => null,
        'override_snmp_sysinfo' => null,
        'snmp_sysinfo' => null,
        'override_snmp_trap_threshold' => null,
        'snmp_trap_threshold' => null,
        'override_snmp_community' => null,
        'snmp_community' => null,
        'override_snmp_user' => null,
        'snmp_user' => null,
        'qos_drop_policy' => null,
        'qos_red_probability' => null,
        'switch_log' => null,
        'remote_log' => null,
        'storm_control' => null,
        'mirror' => null,
        'static_mac' => null,
        'custom_command' => null,
        'igmp_snooping' => null,
        '_802_1_x_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'switch_id' => 'switch-id',
        'name' => 'name',
        'description' => 'description',
        'switch_profile' => 'switch-profile',
        'access_profile' => 'access-profile',
        'fsw_wan1_peer' => 'fsw-wan1-peer',
        'fsw_wan1_admin' => 'fsw-wan1-admin',
        'poe_pre_standard_detection' => 'poe-pre-standard-detection',
        'poe_detection_type' => 'poe-detection-type',
        'directly_connected' => 'directly-connected',
        'version' => 'version',
        'max_allowed_trunk_members' => 'max-allowed-trunk-members',
        'pre_provisioned' => 'pre-provisioned',
        'l3_discovered' => 'l3-discovered',
        'tdr_supported' => 'tdr-supported',
        'dynamic_capability' => 'dynamic-capability',
        'switch_device_tag' => 'switch-device-tag',
        'switch_dhcp_opt43_key' => 'switch-dhcp_opt43_key',
        'mclag_igmp_snooping_aware' => 'mclag-igmp-snooping-aware',
        'dynamically_discovered' => 'dynamically-discovered',
        'type' => 'type',
        'owner_vdom' => 'owner-vdom',
        'flow_identity' => 'flow-identity',
        'staged_image_version' => 'staged-image-version',
        'delayed_restart_trigger' => 'delayed-restart-trigger',
        'ports' => 'ports',
        'ip_source_guard' => 'ip-source-guard',
        'stp_settings' => 'stp-settings',
        'stp_instance' => 'stp-instance',
        'override_snmp_sysinfo' => 'override-snmp-sysinfo',
        'snmp_sysinfo' => 'snmp-sysinfo',
        'override_snmp_trap_threshold' => 'override-snmp-trap-threshold',
        'snmp_trap_threshold' => 'snmp-trap-threshold',
        'override_snmp_community' => 'override-snmp-community',
        'snmp_community' => 'snmp-community',
        'override_snmp_user' => 'override-snmp-user',
        'snmp_user' => 'snmp-user',
        'qos_drop_policy' => 'qos-drop-policy',
        'qos_red_probability' => 'qos-red-probability',
        'switch_log' => 'switch-log',
        'remote_log' => 'remote-log',
        'storm_control' => 'storm-control',
        'mirror' => 'mirror',
        'static_mac' => 'static-mac',
        'custom_command' => 'custom-command',
        'igmp_snooping' => 'igmp-snooping',
        '_802_1_x_settings' => '802-1X-settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'switch_id' => 'setSwitchId',
        'name' => 'setName',
        'description' => 'setDescription',
        'switch_profile' => 'setSwitchProfile',
        'access_profile' => 'setAccessProfile',
        'fsw_wan1_peer' => 'setFswWan1Peer',
        'fsw_wan1_admin' => 'setFswWan1Admin',
        'poe_pre_standard_detection' => 'setPoePreStandardDetection',
        'poe_detection_type' => 'setPoeDetectionType',
        'directly_connected' => 'setDirectlyConnected',
        'version' => 'setVersion',
        'max_allowed_trunk_members' => 'setMaxAllowedTrunkMembers',
        'pre_provisioned' => 'setPreProvisioned',
        'l3_discovered' => 'setL3Discovered',
        'tdr_supported' => 'setTdrSupported',
        'dynamic_capability' => 'setDynamicCapability',
        'switch_device_tag' => 'setSwitchDeviceTag',
        'switch_dhcp_opt43_key' => 'setSwitchDhcpOpt43Key',
        'mclag_igmp_snooping_aware' => 'setMclagIgmpSnoopingAware',
        'dynamically_discovered' => 'setDynamicallyDiscovered',
        'type' => 'setType',
        'owner_vdom' => 'setOwnerVdom',
        'flow_identity' => 'setFlowIdentity',
        'staged_image_version' => 'setStagedImageVersion',
        'delayed_restart_trigger' => 'setDelayedRestartTrigger',
        'ports' => 'setPorts',
        'ip_source_guard' => 'setIpSourceGuard',
        'stp_settings' => 'setStpSettings',
        'stp_instance' => 'setStpInstance',
        'override_snmp_sysinfo' => 'setOverrideSnmpSysinfo',
        'snmp_sysinfo' => 'setSnmpSysinfo',
        'override_snmp_trap_threshold' => 'setOverrideSnmpTrapThreshold',
        'snmp_trap_threshold' => 'setSnmpTrapThreshold',
        'override_snmp_community' => 'setOverrideSnmpCommunity',
        'snmp_community' => 'setSnmpCommunity',
        'override_snmp_user' => 'setOverrideSnmpUser',
        'snmp_user' => 'setSnmpUser',
        'qos_drop_policy' => 'setQosDropPolicy',
        'qos_red_probability' => 'setQosRedProbability',
        'switch_log' => 'setSwitchLog',
        'remote_log' => 'setRemoteLog',
        'storm_control' => 'setStormControl',
        'mirror' => 'setMirror',
        'static_mac' => 'setStaticMac',
        'custom_command' => 'setCustomCommand',
        'igmp_snooping' => 'setIgmpSnooping',
        '_802_1_x_settings' => 'set8021XSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'switch_id' => 'getSwitchId',
        'name' => 'getName',
        'description' => 'getDescription',
        'switch_profile' => 'getSwitchProfile',
        'access_profile' => 'getAccessProfile',
        'fsw_wan1_peer' => 'getFswWan1Peer',
        'fsw_wan1_admin' => 'getFswWan1Admin',
        'poe_pre_standard_detection' => 'getPoePreStandardDetection',
        'poe_detection_type' => 'getPoeDetectionType',
        'directly_connected' => 'getDirectlyConnected',
        'version' => 'getVersion',
        'max_allowed_trunk_members' => 'getMaxAllowedTrunkMembers',
        'pre_provisioned' => 'getPreProvisioned',
        'l3_discovered' => 'getL3Discovered',
        'tdr_supported' => 'getTdrSupported',
        'dynamic_capability' => 'getDynamicCapability',
        'switch_device_tag' => 'getSwitchDeviceTag',
        'switch_dhcp_opt43_key' => 'getSwitchDhcpOpt43Key',
        'mclag_igmp_snooping_aware' => 'getMclagIgmpSnoopingAware',
        'dynamically_discovered' => 'getDynamicallyDiscovered',
        'type' => 'getType',
        'owner_vdom' => 'getOwnerVdom',
        'flow_identity' => 'getFlowIdentity',
        'staged_image_version' => 'getStagedImageVersion',
        'delayed_restart_trigger' => 'getDelayedRestartTrigger',
        'ports' => 'getPorts',
        'ip_source_guard' => 'getIpSourceGuard',
        'stp_settings' => 'getStpSettings',
        'stp_instance' => 'getStpInstance',
        'override_snmp_sysinfo' => 'getOverrideSnmpSysinfo',
        'snmp_sysinfo' => 'getSnmpSysinfo',
        'override_snmp_trap_threshold' => 'getOverrideSnmpTrapThreshold',
        'snmp_trap_threshold' => 'getSnmpTrapThreshold',
        'override_snmp_community' => 'getOverrideSnmpCommunity',
        'snmp_community' => 'getSnmpCommunity',
        'override_snmp_user' => 'getOverrideSnmpUser',
        'snmp_user' => 'getSnmpUser',
        'qos_drop_policy' => 'getQosDropPolicy',
        'qos_red_probability' => 'getQosRedProbability',
        'switch_log' => 'getSwitchLog',
        'remote_log' => 'getRemoteLog',
        'storm_control' => 'getStormControl',
        'mirror' => 'getMirror',
        'static_mac' => 'getStaticMac',
        'custom_command' => 'getCustomCommand',
        'igmp_snooping' => 'getIgmpSnooping',
        '_802_1_x_settings' => 'get8021XSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FSW_WAN1_ADMIN_DISCOVERED = 'discovered';
    const FSW_WAN1_ADMIN_DISABLE = 'disable';
    const FSW_WAN1_ADMIN_ENABLE = 'enable';
    const POE_PRE_STANDARD_DETECTION_ENABLE = 'enable';
    const POE_PRE_STANDARD_DETECTION_DISABLE = 'disable';
    const MCLAG_IGMP_SNOOPING_AWARE_ENABLE = 'enable';
    const MCLAG_IGMP_SNOOPING_AWARE_DISABLE = 'disable';
    const TYPE_VIRTUAL = 'virtual';
    const TYPE_PHYSICAL = 'physical';
    const OVERRIDE_SNMP_SYSINFO_DISABLE = 'disable';
    const OVERRIDE_SNMP_SYSINFO_ENABLE = 'enable';
    const OVERRIDE_SNMP_TRAP_THRESHOLD_ENABLE = 'enable';
    const OVERRIDE_SNMP_TRAP_THRESHOLD_DISABLE = 'disable';
    const OVERRIDE_SNMP_COMMUNITY_ENABLE = 'enable';
    const OVERRIDE_SNMP_COMMUNITY_DISABLE = 'disable';
    const OVERRIDE_SNMP_USER_ENABLE = 'enable';
    const OVERRIDE_SNMP_USER_DISABLE = 'disable';
    const QOS_DROP_POLICY_TAILDROP = 'taildrop';
    const QOS_DROP_POLICY_RANDOM_EARLY_DETECTION = 'random-early-detection';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFswWan1AdminAllowableValues()
    {
        return [
            self::FSW_WAN1_ADMIN_DISCOVERED,
            self::FSW_WAN1_ADMIN_DISABLE,
            self::FSW_WAN1_ADMIN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoePreStandardDetectionAllowableValues()
    {
        return [
            self::POE_PRE_STANDARD_DETECTION_ENABLE,
            self::POE_PRE_STANDARD_DETECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMclagIgmpSnoopingAwareAllowableValues()
    {
        return [
            self::MCLAG_IGMP_SNOOPING_AWARE_ENABLE,
            self::MCLAG_IGMP_SNOOPING_AWARE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VIRTUAL,
            self::TYPE_PHYSICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideSnmpSysinfoAllowableValues()
    {
        return [
            self::OVERRIDE_SNMP_SYSINFO_DISABLE,
            self::OVERRIDE_SNMP_SYSINFO_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideSnmpTrapThresholdAllowableValues()
    {
        return [
            self::OVERRIDE_SNMP_TRAP_THRESHOLD_ENABLE,
            self::OVERRIDE_SNMP_TRAP_THRESHOLD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideSnmpCommunityAllowableValues()
    {
        return [
            self::OVERRIDE_SNMP_COMMUNITY_ENABLE,
            self::OVERRIDE_SNMP_COMMUNITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideSnmpUserAllowableValues()
    {
        return [
            self::OVERRIDE_SNMP_USER_ENABLE,
            self::OVERRIDE_SNMP_USER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQosDropPolicyAllowableValues()
    {
        return [
            self::QOS_DROP_POLICY_TAILDROP,
            self::QOS_DROP_POLICY_RANDOM_EARLY_DETECTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['switch_id'] = $data['switch_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['switch_profile'] = $data['switch_profile'] ?? null;
        $this->container['access_profile'] = $data['access_profile'] ?? null;
        $this->container['fsw_wan1_peer'] = $data['fsw_wan1_peer'] ?? null;
        $this->container['fsw_wan1_admin'] = $data['fsw_wan1_admin'] ?? null;
        $this->container['poe_pre_standard_detection'] = $data['poe_pre_standard_detection'] ?? null;
        $this->container['poe_detection_type'] = $data['poe_detection_type'] ?? null;
        $this->container['directly_connected'] = $data['directly_connected'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['max_allowed_trunk_members'] = $data['max_allowed_trunk_members'] ?? null;
        $this->container['pre_provisioned'] = $data['pre_provisioned'] ?? null;
        $this->container['l3_discovered'] = $data['l3_discovered'] ?? null;
        $this->container['tdr_supported'] = $data['tdr_supported'] ?? null;
        $this->container['dynamic_capability'] = $data['dynamic_capability'] ?? null;
        $this->container['switch_device_tag'] = $data['switch_device_tag'] ?? null;
        $this->container['switch_dhcp_opt43_key'] = $data['switch_dhcp_opt43_key'] ?? null;
        $this->container['mclag_igmp_snooping_aware'] = $data['mclag_igmp_snooping_aware'] ?? null;
        $this->container['dynamically_discovered'] = $data['dynamically_discovered'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['owner_vdom'] = $data['owner_vdom'] ?? null;
        $this->container['flow_identity'] = $data['flow_identity'] ?? null;
        $this->container['staged_image_version'] = $data['staged_image_version'] ?? null;
        $this->container['delayed_restart_trigger'] = $data['delayed_restart_trigger'] ?? null;
        $this->container['ports'] = $data['ports'] ?? null;
        $this->container['ip_source_guard'] = $data['ip_source_guard'] ?? null;
        $this->container['stp_settings'] = $data['stp_settings'] ?? null;
        $this->container['stp_instance'] = $data['stp_instance'] ?? null;
        $this->container['override_snmp_sysinfo'] = $data['override_snmp_sysinfo'] ?? null;
        $this->container['snmp_sysinfo'] = $data['snmp_sysinfo'] ?? null;
        $this->container['override_snmp_trap_threshold'] = $data['override_snmp_trap_threshold'] ?? null;
        $this->container['snmp_trap_threshold'] = $data['snmp_trap_threshold'] ?? null;
        $this->container['override_snmp_community'] = $data['override_snmp_community'] ?? null;
        $this->container['snmp_community'] = $data['snmp_community'] ?? null;
        $this->container['override_snmp_user'] = $data['override_snmp_user'] ?? null;
        $this->container['snmp_user'] = $data['snmp_user'] ?? null;
        $this->container['qos_drop_policy'] = $data['qos_drop_policy'] ?? null;
        $this->container['qos_red_probability'] = $data['qos_red_probability'] ?? null;
        $this->container['switch_log'] = $data['switch_log'] ?? null;
        $this->container['remote_log'] = $data['remote_log'] ?? null;
        $this->container['storm_control'] = $data['storm_control'] ?? null;
        $this->container['mirror'] = $data['mirror'] ?? null;
        $this->container['static_mac'] = $data['static_mac'] ?? null;
        $this->container['custom_command'] = $data['custom_command'] ?? null;
        $this->container['igmp_snooping'] = $data['igmp_snooping'] ?? null;
        $this->container['_802_1_x_settings'] = $data['_802_1_x_settings'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['switch_id']) && (mb_strlen($this->container['switch_id']) > 16)) {
            $invalidProperties[] = "invalid value for 'switch_id', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['switch_profile']) && (mb_strlen($this->container['switch_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'switch_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['access_profile']) && (mb_strlen($this->container['access_profile']) > 31)) {
            $invalidProperties[] = "invalid value for 'access_profile', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['fsw_wan1_peer']) && (mb_strlen($this->container['fsw_wan1_peer']) > 35)) {
            $invalidProperties[] = "invalid value for 'fsw_wan1_peer', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getFswWan1AdminAllowableValues();
        if (!is_null($this->container['fsw_wan1_admin']) && !in_array($this->container['fsw_wan1_admin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fsw_wan1_admin', must be one of '%s'",
                $this->container['fsw_wan1_admin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoePreStandardDetectionAllowableValues();
        if (!is_null($this->container['poe_pre_standard_detection']) && !in_array($this->container['poe_pre_standard_detection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_pre_standard_detection', must be one of '%s'",
                $this->container['poe_pre_standard_detection'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['poe_detection_type']) && ($this->container['poe_detection_type'] > 255)) {
            $invalidProperties[] = "invalid value for 'poe_detection_type', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['poe_detection_type']) && ($this->container['poe_detection_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'poe_detection_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['directly_connected']) && ($this->container['directly_connected'] > 1)) {
            $invalidProperties[] = "invalid value for 'directly_connected', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['directly_connected']) && ($this->container['directly_connected'] < 0)) {
            $invalidProperties[] = "invalid value for 'directly_connected', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['version']) && ($this->container['version'] > 255)) {
            $invalidProperties[] = "invalid value for 'version', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['version']) && ($this->container['version'] < 0)) {
            $invalidProperties[] = "invalid value for 'version', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_allowed_trunk_members']) && ($this->container['max_allowed_trunk_members'] > 255)) {
            $invalidProperties[] = "invalid value for 'max_allowed_trunk_members', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['max_allowed_trunk_members']) && ($this->container['max_allowed_trunk_members'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_allowed_trunk_members', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pre_provisioned']) && ($this->container['pre_provisioned'] > 255)) {
            $invalidProperties[] = "invalid value for 'pre_provisioned', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['pre_provisioned']) && ($this->container['pre_provisioned'] < 0)) {
            $invalidProperties[] = "invalid value for 'pre_provisioned', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['l3_discovered']) && ($this->container['l3_discovered'] > 1)) {
            $invalidProperties[] = "invalid value for 'l3_discovered', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['l3_discovered']) && ($this->container['l3_discovered'] < 0)) {
            $invalidProperties[] = "invalid value for 'l3_discovered', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tdr_supported']) && (mb_strlen($this->container['tdr_supported']) > 31)) {
            $invalidProperties[] = "invalid value for 'tdr_supported', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['switch_device_tag']) && (mb_strlen($this->container['switch_device_tag']) > 32)) {
            $invalidProperties[] = "invalid value for 'switch_device_tag', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['switch_dhcp_opt43_key']) && (mb_strlen($this->container['switch_dhcp_opt43_key']) > 63)) {
            $invalidProperties[] = "invalid value for 'switch_dhcp_opt43_key', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getMclagIgmpSnoopingAwareAllowableValues();
        if (!is_null($this->container['mclag_igmp_snooping_aware']) && !in_array($this->container['mclag_igmp_snooping_aware'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mclag_igmp_snooping_aware', must be one of '%s'",
                $this->container['mclag_igmp_snooping_aware'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dynamically_discovered']) && ($this->container['dynamically_discovered'] > 1)) {
            $invalidProperties[] = "invalid value for 'dynamically_discovered', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['dynamically_discovered']) && ($this->container['dynamically_discovered'] < 0)) {
            $invalidProperties[] = "invalid value for 'dynamically_discovered', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['owner_vdom']) && (mb_strlen($this->container['owner_vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'owner_vdom', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['staged_image_version']) && (mb_strlen($this->container['staged_image_version']) > 127)) {
            $invalidProperties[] = "invalid value for 'staged_image_version', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['delayed_restart_trigger']) && ($this->container['delayed_restart_trigger'] > 255)) {
            $invalidProperties[] = "invalid value for 'delayed_restart_trigger', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['delayed_restart_trigger']) && ($this->container['delayed_restart_trigger'] < 0)) {
            $invalidProperties[] = "invalid value for 'delayed_restart_trigger', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ports']) && (count($this->container['ports']) > 0)) {
            $invalidProperties[] = "invalid value for 'ports', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ip_source_guard']) && (count($this->container['ip_source_guard']) > 0)) {
            $invalidProperties[] = "invalid value for 'ip_source_guard', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['stp_settings']) && (count($this->container['stp_settings']) > 0)) {
            $invalidProperties[] = "invalid value for 'stp_settings', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['stp_instance']) && (count($this->container['stp_instance']) > 0)) {
            $invalidProperties[] = "invalid value for 'stp_instance', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideSnmpSysinfoAllowableValues();
        if (!is_null($this->container['override_snmp_sysinfo']) && !in_array($this->container['override_snmp_sysinfo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_snmp_sysinfo', must be one of '%s'",
                $this->container['override_snmp_sysinfo'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['snmp_sysinfo']) && (count($this->container['snmp_sysinfo']) > 0)) {
            $invalidProperties[] = "invalid value for 'snmp_sysinfo', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideSnmpTrapThresholdAllowableValues();
        if (!is_null($this->container['override_snmp_trap_threshold']) && !in_array($this->container['override_snmp_trap_threshold'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_snmp_trap_threshold', must be one of '%s'",
                $this->container['override_snmp_trap_threshold'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['snmp_trap_threshold']) && (count($this->container['snmp_trap_threshold']) > 0)) {
            $invalidProperties[] = "invalid value for 'snmp_trap_threshold', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideSnmpCommunityAllowableValues();
        if (!is_null($this->container['override_snmp_community']) && !in_array($this->container['override_snmp_community'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_snmp_community', must be one of '%s'",
                $this->container['override_snmp_community'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['snmp_community']) && (count($this->container['snmp_community']) > 0)) {
            $invalidProperties[] = "invalid value for 'snmp_community', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getOverrideSnmpUserAllowableValues();
        if (!is_null($this->container['override_snmp_user']) && !in_array($this->container['override_snmp_user'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override_snmp_user', must be one of '%s'",
                $this->container['override_snmp_user'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['snmp_user']) && (count($this->container['snmp_user']) > 0)) {
            $invalidProperties[] = "invalid value for 'snmp_user', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getQosDropPolicyAllowableValues();
        if (!is_null($this->container['qos_drop_policy']) && !in_array($this->container['qos_drop_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'qos_drop_policy', must be one of '%s'",
                $this->container['qos_drop_policy'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['qos_red_probability']) && ($this->container['qos_red_probability'] > 100)) {
            $invalidProperties[] = "invalid value for 'qos_red_probability', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['qos_red_probability']) && ($this->container['qos_red_probability'] < 0)) {
            $invalidProperties[] = "invalid value for 'qos_red_probability', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['switch_log']) && (count($this->container['switch_log']) > 0)) {
            $invalidProperties[] = "invalid value for 'switch_log', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['remote_log']) && (count($this->container['remote_log']) > 0)) {
            $invalidProperties[] = "invalid value for 'remote_log', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['storm_control']) && (count($this->container['storm_control']) > 0)) {
            $invalidProperties[] = "invalid value for 'storm_control', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['mirror']) && (count($this->container['mirror']) > 0)) {
            $invalidProperties[] = "invalid value for 'mirror', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['static_mac']) && (count($this->container['static_mac']) > 0)) {
            $invalidProperties[] = "invalid value for 'static_mac', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['custom_command']) && (count($this->container['custom_command']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_command', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['igmp_snooping']) && (count($this->container['igmp_snooping']) > 0)) {
            $invalidProperties[] = "invalid value for 'igmp_snooping', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['_802_1_x_settings']) && (count($this->container['_802_1_x_settings']) > 0)) {
            $invalidProperties[] = "invalid value for '_802_1_x_settings', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets switch_id
     *
     * @return string|null
     */
    public function getSwitchId()
    {
        return $this->container['switch_id'];
    }

    /**
     * Sets switch_id
     *
     * @param string|null $switch_id Managed-switch id.
     *
     * @return self
     */
    public function setSwitchId($switch_id)
    {
        if (!is_null($switch_id) && (mb_strlen($switch_id) > 16)) {
            throw new \InvalidArgumentException('invalid length for $switch_id when calling InlineObject202., must be smaller than or equal to 16.');
        }

        $this->container['switch_id'] = $switch_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Managed-switch name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject202., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject202., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets switch_profile
     *
     * @return string|null
     */
    public function getSwitchProfile()
    {
        return $this->container['switch_profile'];
    }

    /**
     * Sets switch_profile
     *
     * @param string|null $switch_profile FortiSwitch profile.
     *
     * @return self
     */
    public function setSwitchProfile($switch_profile)
    {
        if (!is_null($switch_profile) && (mb_strlen($switch_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $switch_profile when calling InlineObject202., must be smaller than or equal to 35.');
        }

        $this->container['switch_profile'] = $switch_profile;

        return $this;
    }

    /**
     * Gets access_profile
     *
     * @return string|null
     */
    public function getAccessProfile()
    {
        return $this->container['access_profile'];
    }

    /**
     * Sets access_profile
     *
     * @param string|null $access_profile FortiSwitch access profile.
     *
     * @return self
     */
    public function setAccessProfile($access_profile)
    {
        if (!is_null($access_profile) && (mb_strlen($access_profile) > 31)) {
            throw new \InvalidArgumentException('invalid length for $access_profile when calling InlineObject202., must be smaller than or equal to 31.');
        }

        $this->container['access_profile'] = $access_profile;

        return $this;
    }

    /**
     * Gets fsw_wan1_peer
     *
     * @return string|null
     */
    public function getFswWan1Peer()
    {
        return $this->container['fsw_wan1_peer'];
    }

    /**
     * Sets fsw_wan1_peer
     *
     * @param string|null $fsw_wan1_peer Fortiswitch WAN1 peer port.
     *
     * @return self
     */
    public function setFswWan1Peer($fsw_wan1_peer)
    {
        if (!is_null($fsw_wan1_peer) && (mb_strlen($fsw_wan1_peer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $fsw_wan1_peer when calling InlineObject202., must be smaller than or equal to 35.');
        }

        $this->container['fsw_wan1_peer'] = $fsw_wan1_peer;

        return $this;
    }

    /**
     * Gets fsw_wan1_admin
     *
     * @return string|null
     */
    public function getFswWan1Admin()
    {
        return $this->container['fsw_wan1_admin'];
    }

    /**
     * Sets fsw_wan1_admin
     *
     * @param string|null $fsw_wan1_admin FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch.    discovered:Link waiting to be authorized.    disable:Link unauthorized.    enable:Link authorized.
     *
     * @return self
     */
    public function setFswWan1Admin($fsw_wan1_admin)
    {
        $allowedValues = $this->getFswWan1AdminAllowableValues();
        if (!is_null($fsw_wan1_admin) && !in_array($fsw_wan1_admin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fsw_wan1_admin', must be one of '%s'",
                    $fsw_wan1_admin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fsw_wan1_admin'] = $fsw_wan1_admin;

        return $this;
    }

    /**
     * Gets poe_pre_standard_detection
     *
     * @return string|null
     */
    public function getPoePreStandardDetection()
    {
        return $this->container['poe_pre_standard_detection'];
    }

    /**
     * Sets poe_pre_standard_detection
     *
     * @param string|null $poe_pre_standard_detection Enable/disable PoE pre-standard detection.    enable:Enable PoE pre-standard detection.    disable:Disable PoE pre-standard detection.
     *
     * @return self
     */
    public function setPoePreStandardDetection($poe_pre_standard_detection)
    {
        $allowedValues = $this->getPoePreStandardDetectionAllowableValues();
        if (!is_null($poe_pre_standard_detection) && !in_array($poe_pre_standard_detection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_pre_standard_detection', must be one of '%s'",
                    $poe_pre_standard_detection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_pre_standard_detection'] = $poe_pre_standard_detection;

        return $this;
    }

    /**
     * Gets poe_detection_type
     *
     * @return int|null
     */
    public function getPoeDetectionType()
    {
        return $this->container['poe_detection_type'];
    }

    /**
     * Sets poe_detection_type
     *
     * @param int|null $poe_detection_type PoE detection type for FortiSwitch.
     *
     * @return self
     */
    public function setPoeDetectionType($poe_detection_type)
    {

        if (!is_null($poe_detection_type) && ($poe_detection_type > 255)) {
            throw new \InvalidArgumentException('invalid value for $poe_detection_type when calling InlineObject202., must be smaller than or equal to 255.');
        }
        if (!is_null($poe_detection_type) && ($poe_detection_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $poe_detection_type when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['poe_detection_type'] = $poe_detection_type;

        return $this;
    }

    /**
     * Gets directly_connected
     *
     * @return int|null
     */
    public function getDirectlyConnected()
    {
        return $this->container['directly_connected'];
    }

    /**
     * Sets directly_connected
     *
     * @param int|null $directly_connected Directly connected FortiSwitch.
     *
     * @return self
     */
    public function setDirectlyConnected($directly_connected)
    {

        if (!is_null($directly_connected) && ($directly_connected > 1)) {
            throw new \InvalidArgumentException('invalid value for $directly_connected when calling InlineObject202., must be smaller than or equal to 1.');
        }
        if (!is_null($directly_connected) && ($directly_connected < 0)) {
            throw new \InvalidArgumentException('invalid value for $directly_connected when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['directly_connected'] = $directly_connected;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version FortiSwitch version.
     *
     * @return self
     */
    public function setVersion($version)
    {

        if (!is_null($version) && ($version > 255)) {
            throw new \InvalidArgumentException('invalid value for $version when calling InlineObject202., must be smaller than or equal to 255.');
        }
        if (!is_null($version) && ($version < 0)) {
            throw new \InvalidArgumentException('invalid value for $version when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets max_allowed_trunk_members
     *
     * @return int|null
     */
    public function getMaxAllowedTrunkMembers()
    {
        return $this->container['max_allowed_trunk_members'];
    }

    /**
     * Sets max_allowed_trunk_members
     *
     * @param int|null $max_allowed_trunk_members FortiSwitch maximum allowed trunk members.
     *
     * @return self
     */
    public function setMaxAllowedTrunkMembers($max_allowed_trunk_members)
    {

        if (!is_null($max_allowed_trunk_members) && ($max_allowed_trunk_members > 255)) {
            throw new \InvalidArgumentException('invalid value for $max_allowed_trunk_members when calling InlineObject202., must be smaller than or equal to 255.');
        }
        if (!is_null($max_allowed_trunk_members) && ($max_allowed_trunk_members < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_allowed_trunk_members when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['max_allowed_trunk_members'] = $max_allowed_trunk_members;

        return $this;
    }

    /**
     * Gets pre_provisioned
     *
     * @return int|null
     */
    public function getPreProvisioned()
    {
        return $this->container['pre_provisioned'];
    }

    /**
     * Sets pre_provisioned
     *
     * @param int|null $pre_provisioned Pre-provisioned managed switch.
     *
     * @return self
     */
    public function setPreProvisioned($pre_provisioned)
    {

        if (!is_null($pre_provisioned) && ($pre_provisioned > 255)) {
            throw new \InvalidArgumentException('invalid value for $pre_provisioned when calling InlineObject202., must be smaller than or equal to 255.');
        }
        if (!is_null($pre_provisioned) && ($pre_provisioned < 0)) {
            throw new \InvalidArgumentException('invalid value for $pre_provisioned when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['pre_provisioned'] = $pre_provisioned;

        return $this;
    }

    /**
     * Gets l3_discovered
     *
     * @return int|null
     */
    public function getL3Discovered()
    {
        return $this->container['l3_discovered'];
    }

    /**
     * Sets l3_discovered
     *
     * @param int|null $l3_discovered Layer 3 management discovered.
     *
     * @return self
     */
    public function setL3Discovered($l3_discovered)
    {

        if (!is_null($l3_discovered) && ($l3_discovered > 1)) {
            throw new \InvalidArgumentException('invalid value for $l3_discovered when calling InlineObject202., must be smaller than or equal to 1.');
        }
        if (!is_null($l3_discovered) && ($l3_discovered < 0)) {
            throw new \InvalidArgumentException('invalid value for $l3_discovered when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['l3_discovered'] = $l3_discovered;

        return $this;
    }

    /**
     * Gets tdr_supported
     *
     * @return string|null
     */
    public function getTdrSupported()
    {
        return $this->container['tdr_supported'];
    }

    /**
     * Sets tdr_supported
     *
     * @param string|null $tdr_supported TDR supported.
     *
     * @return self
     */
    public function setTdrSupported($tdr_supported)
    {
        if (!is_null($tdr_supported) && (mb_strlen($tdr_supported) > 31)) {
            throw new \InvalidArgumentException('invalid length for $tdr_supported when calling InlineObject202., must be smaller than or equal to 31.');
        }

        $this->container['tdr_supported'] = $tdr_supported;

        return $this;
    }

    /**
     * Gets dynamic_capability
     *
     * @return string|null
     */
    public function getDynamicCapability()
    {
        return $this->container['dynamic_capability'];
    }

    /**
     * Sets dynamic_capability
     *
     * @param string|null $dynamic_capability List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
     *
     * @return self
     */
    public function setDynamicCapability($dynamic_capability)
    {
        $this->container['dynamic_capability'] = $dynamic_capability;

        return $this;
    }

    /**
     * Gets switch_device_tag
     *
     * @return string|null
     */
    public function getSwitchDeviceTag()
    {
        return $this->container['switch_device_tag'];
    }

    /**
     * Sets switch_device_tag
     *
     * @param string|null $switch_device_tag User definable label/tag.
     *
     * @return self
     */
    public function setSwitchDeviceTag($switch_device_tag)
    {
        if (!is_null($switch_device_tag) && (mb_strlen($switch_device_tag) > 32)) {
            throw new \InvalidArgumentException('invalid length for $switch_device_tag when calling InlineObject202., must be smaller than or equal to 32.');
        }

        $this->container['switch_device_tag'] = $switch_device_tag;

        return $this;
    }

    /**
     * Gets switch_dhcp_opt43_key
     *
     * @return string|null
     */
    public function getSwitchDhcpOpt43Key()
    {
        return $this->container['switch_dhcp_opt43_key'];
    }

    /**
     * Sets switch_dhcp_opt43_key
     *
     * @param string|null $switch_dhcp_opt43_key DHCP option43 key.
     *
     * @return self
     */
    public function setSwitchDhcpOpt43Key($switch_dhcp_opt43_key)
    {
        if (!is_null($switch_dhcp_opt43_key) && (mb_strlen($switch_dhcp_opt43_key) > 63)) {
            throw new \InvalidArgumentException('invalid length for $switch_dhcp_opt43_key when calling InlineObject202., must be smaller than or equal to 63.');
        }

        $this->container['switch_dhcp_opt43_key'] = $switch_dhcp_opt43_key;

        return $this;
    }

    /**
     * Gets mclag_igmp_snooping_aware
     *
     * @return string|null
     */
    public function getMclagIgmpSnoopingAware()
    {
        return $this->container['mclag_igmp_snooping_aware'];
    }

    /**
     * Sets mclag_igmp_snooping_aware
     *
     * @param string|null $mclag_igmp_snooping_aware Enable/disable MCLAG IGMP-snooping awareness.    enable:Enable MCLAG IGMP-snooping awareness.    disable:Disable MCLAG IGMP-snooping awareness.
     *
     * @return self
     */
    public function setMclagIgmpSnoopingAware($mclag_igmp_snooping_aware)
    {
        $allowedValues = $this->getMclagIgmpSnoopingAwareAllowableValues();
        if (!is_null($mclag_igmp_snooping_aware) && !in_array($mclag_igmp_snooping_aware, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mclag_igmp_snooping_aware', must be one of '%s'",
                    $mclag_igmp_snooping_aware,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mclag_igmp_snooping_aware'] = $mclag_igmp_snooping_aware;

        return $this;
    }

    /**
     * Gets dynamically_discovered
     *
     * @return int|null
     */
    public function getDynamicallyDiscovered()
    {
        return $this->container['dynamically_discovered'];
    }

    /**
     * Sets dynamically_discovered
     *
     * @param int|null $dynamically_discovered Dynamically discovered FortiSwitch.
     *
     * @return self
     */
    public function setDynamicallyDiscovered($dynamically_discovered)
    {

        if (!is_null($dynamically_discovered) && ($dynamically_discovered > 1)) {
            throw new \InvalidArgumentException('invalid value for $dynamically_discovered when calling InlineObject202., must be smaller than or equal to 1.');
        }
        if (!is_null($dynamically_discovered) && ($dynamically_discovered < 0)) {
            throw new \InvalidArgumentException('invalid value for $dynamically_discovered when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['dynamically_discovered'] = $dynamically_discovered;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Indication of switch type, physical or virtual.    virtual:Switch is of type virtual.    physical:Switch is of type physical.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets owner_vdom
     *
     * @return string|null
     */
    public function getOwnerVdom()
    {
        return $this->container['owner_vdom'];
    }

    /**
     * Sets owner_vdom
     *
     * @param string|null $owner_vdom VDOM which owner of port belongs to.
     *
     * @return self
     */
    public function setOwnerVdom($owner_vdom)
    {
        if (!is_null($owner_vdom) && (mb_strlen($owner_vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $owner_vdom when calling InlineObject202., must be smaller than or equal to 31.');
        }

        $this->container['owner_vdom'] = $owner_vdom;

        return $this;
    }

    /**
     * Gets flow_identity
     *
     * @return string|null
     */
    public function getFlowIdentity()
    {
        return $this->container['flow_identity'];
    }

    /**
     * Sets flow_identity
     *
     * @param string|null $flow_identity Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
     *
     * @return self
     */
    public function setFlowIdentity($flow_identity)
    {
        $this->container['flow_identity'] = $flow_identity;

        return $this;
    }

    /**
     * Gets staged_image_version
     *
     * @return string|null
     */
    public function getStagedImageVersion()
    {
        return $this->container['staged_image_version'];
    }

    /**
     * Sets staged_image_version
     *
     * @param string|null $staged_image_version Staged image version for FortiSwitch.
     *
     * @return self
     */
    public function setStagedImageVersion($staged_image_version)
    {
        if (!is_null($staged_image_version) && (mb_strlen($staged_image_version) > 127)) {
            throw new \InvalidArgumentException('invalid length for $staged_image_version when calling InlineObject202., must be smaller than or equal to 127.');
        }

        $this->container['staged_image_version'] = $staged_image_version;

        return $this;
    }

    /**
     * Gets delayed_restart_trigger
     *
     * @return int|null
     */
    public function getDelayedRestartTrigger()
    {
        return $this->container['delayed_restart_trigger'];
    }

    /**
     * Sets delayed_restart_trigger
     *
     * @param int|null $delayed_restart_trigger Delayed restart triggered for this FortiSwitch.
     *
     * @return self
     */
    public function setDelayedRestartTrigger($delayed_restart_trigger)
    {

        if (!is_null($delayed_restart_trigger) && ($delayed_restart_trigger > 255)) {
            throw new \InvalidArgumentException('invalid value for $delayed_restart_trigger when calling InlineObject202., must be smaller than or equal to 255.');
        }
        if (!is_null($delayed_restart_trigger) && ($delayed_restart_trigger < 0)) {
            throw new \InvalidArgumentException('invalid value for $delayed_restart_trigger when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['delayed_restart_trigger'] = $delayed_restart_trigger;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdPorts[]|null
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdPorts[]|null $ports Managed-switch port list.
     *
     * @return self
     */
    public function setPorts($ports)
    {

        if (!is_null($ports) && (count($ports) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ports when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets ip_source_guard
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIpSourceGuard[]|null
     */
    public function getIpSourceGuard()
    {
        return $this->container['ip_source_guard'];
    }

    /**
     * Sets ip_source_guard
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIpSourceGuard[]|null $ip_source_guard IP source guard.
     *
     * @return self
     */
    public function setIpSourceGuard($ip_source_guard)
    {

        if (!is_null($ip_source_guard) && (count($ip_source_guard) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ip_source_guard when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['ip_source_guard'] = $ip_source_guard;

        return $this;
    }

    /**
     * Gets stp_settings
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpSettings[]|null
     */
    public function getStpSettings()
    {
        return $this->container['stp_settings'];
    }

    /**
     * Sets stp_settings
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpSettings[]|null $stp_settings Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops.
     *
     * @return self
     */
    public function setStpSettings($stp_settings)
    {

        if (!is_null($stp_settings) && (count($stp_settings) > 0)) {
            throw new \InvalidArgumentException('invalid value for $stp_settings when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['stp_settings'] = $stp_settings;

        return $this;
    }

    /**
     * Gets stp_instance
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpInstance[]|null
     */
    public function getStpInstance()
    {
        return $this->container['stp_instance'];
    }

    /**
     * Sets stp_instance
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStpInstance[]|null $stp_instance Configuration method to edit Spanning Tree Protocol (STP) instances.
     *
     * @return self
     */
    public function setStpInstance($stp_instance)
    {

        if (!is_null($stp_instance) && (count($stp_instance) > 0)) {
            throw new \InvalidArgumentException('invalid value for $stp_instance when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['stp_instance'] = $stp_instance;

        return $this;
    }

    /**
     * Gets override_snmp_sysinfo
     *
     * @return string|null
     */
    public function getOverrideSnmpSysinfo()
    {
        return $this->container['override_snmp_sysinfo'];
    }

    /**
     * Sets override_snmp_sysinfo
     *
     * @param string|null $override_snmp_sysinfo Enable/disable overriding the global SNMP system information.    disable:Use the global SNMP system information.    enable:Override the global SNMP system information.
     *
     * @return self
     */
    public function setOverrideSnmpSysinfo($override_snmp_sysinfo)
    {
        $allowedValues = $this->getOverrideSnmpSysinfoAllowableValues();
        if (!is_null($override_snmp_sysinfo) && !in_array($override_snmp_sysinfo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_snmp_sysinfo', must be one of '%s'",
                    $override_snmp_sysinfo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_snmp_sysinfo'] = $override_snmp_sysinfo;

        return $this;
    }

    /**
     * Gets snmp_sysinfo
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpSysinfo[]|null
     */
    public function getSnmpSysinfo()
    {
        return $this->container['snmp_sysinfo'];
    }

    /**
     * Sets snmp_sysinfo
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpSysinfo[]|null $snmp_sysinfo Configuration method to edit Simple Network Management Protocol (SNMP) system info.
     *
     * @return self
     */
    public function setSnmpSysinfo($snmp_sysinfo)
    {

        if (!is_null($snmp_sysinfo) && (count($snmp_sysinfo) > 0)) {
            throw new \InvalidArgumentException('invalid value for $snmp_sysinfo when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['snmp_sysinfo'] = $snmp_sysinfo;

        return $this;
    }

    /**
     * Gets override_snmp_trap_threshold
     *
     * @return string|null
     */
    public function getOverrideSnmpTrapThreshold()
    {
        return $this->container['override_snmp_trap_threshold'];
    }

    /**
     * Sets override_snmp_trap_threshold
     *
     * @param string|null $override_snmp_trap_threshold Enable/disable overriding the global SNMP trap threshold values.    enable:Override the global SNMP trap threshold values.    disable:Use the global SNMP trap threshold values.
     *
     * @return self
     */
    public function setOverrideSnmpTrapThreshold($override_snmp_trap_threshold)
    {
        $allowedValues = $this->getOverrideSnmpTrapThresholdAllowableValues();
        if (!is_null($override_snmp_trap_threshold) && !in_array($override_snmp_trap_threshold, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_snmp_trap_threshold', must be one of '%s'",
                    $override_snmp_trap_threshold,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_snmp_trap_threshold'] = $override_snmp_trap_threshold;

        return $this;
    }

    /**
     * Gets snmp_trap_threshold
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpTrapThreshold[]|null
     */
    public function getSnmpTrapThreshold()
    {
        return $this->container['snmp_trap_threshold'];
    }

    /**
     * Sets snmp_trap_threshold
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpTrapThreshold[]|null $snmp_trap_threshold Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values.
     *
     * @return self
     */
    public function setSnmpTrapThreshold($snmp_trap_threshold)
    {

        if (!is_null($snmp_trap_threshold) && (count($snmp_trap_threshold) > 0)) {
            throw new \InvalidArgumentException('invalid value for $snmp_trap_threshold when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['snmp_trap_threshold'] = $snmp_trap_threshold;

        return $this;
    }

    /**
     * Gets override_snmp_community
     *
     * @return string|null
     */
    public function getOverrideSnmpCommunity()
    {
        return $this->container['override_snmp_community'];
    }

    /**
     * Sets override_snmp_community
     *
     * @param string|null $override_snmp_community Enable/disable overriding the global SNMP communities.    enable:Override the global SNMP communities.    disable:Use the global SNMP communities.
     *
     * @return self
     */
    public function setOverrideSnmpCommunity($override_snmp_community)
    {
        $allowedValues = $this->getOverrideSnmpCommunityAllowableValues();
        if (!is_null($override_snmp_community) && !in_array($override_snmp_community, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_snmp_community', must be one of '%s'",
                    $override_snmp_community,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_snmp_community'] = $override_snmp_community;

        return $this;
    }

    /**
     * Gets snmp_community
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpCommunity[]|null
     */
    public function getSnmpCommunity()
    {
        return $this->container['snmp_community'];
    }

    /**
     * Sets snmp_community
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpCommunity[]|null $snmp_community Configuration method to edit Simple Network Management Protocol (SNMP) communities.
     *
     * @return self
     */
    public function setSnmpCommunity($snmp_community)
    {

        if (!is_null($snmp_community) && (count($snmp_community) > 0)) {
            throw new \InvalidArgumentException('invalid value for $snmp_community when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['snmp_community'] = $snmp_community;

        return $this;
    }

    /**
     * Gets override_snmp_user
     *
     * @return string|null
     */
    public function getOverrideSnmpUser()
    {
        return $this->container['override_snmp_user'];
    }

    /**
     * Sets override_snmp_user
     *
     * @param string|null $override_snmp_user Enable/disable overriding the global SNMP users.    enable:Override the global SNMPv3 users.    disable:Use the global SNMPv3 users.
     *
     * @return self
     */
    public function setOverrideSnmpUser($override_snmp_user)
    {
        $allowedValues = $this->getOverrideSnmpUserAllowableValues();
        if (!is_null($override_snmp_user) && !in_array($override_snmp_user, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override_snmp_user', must be one of '%s'",
                    $override_snmp_user,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override_snmp_user'] = $override_snmp_user;

        return $this;
    }

    /**
     * Gets snmp_user
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpUser[]|null
     */
    public function getSnmpUser()
    {
        return $this->container['snmp_user'];
    }

    /**
     * Sets snmp_user
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSnmpUser[]|null $snmp_user Configuration method to edit Simple Network Management Protocol (SNMP) users.
     *
     * @return self
     */
    public function setSnmpUser($snmp_user)
    {

        if (!is_null($snmp_user) && (count($snmp_user) > 0)) {
            throw new \InvalidArgumentException('invalid value for $snmp_user when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['snmp_user'] = $snmp_user;

        return $this;
    }

    /**
     * Gets qos_drop_policy
     *
     * @return string|null
     */
    public function getQosDropPolicy()
    {
        return $this->container['qos_drop_policy'];
    }

    /**
     * Sets qos_drop_policy
     *
     * @param string|null $qos_drop_policy Set QoS drop-policy.    taildrop:Taildrop policy.    random-early-detection:Random early detection drop policy.
     *
     * @return self
     */
    public function setQosDropPolicy($qos_drop_policy)
    {
        $allowedValues = $this->getQosDropPolicyAllowableValues();
        if (!is_null($qos_drop_policy) && !in_array($qos_drop_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'qos_drop_policy', must be one of '%s'",
                    $qos_drop_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['qos_drop_policy'] = $qos_drop_policy;

        return $this;
    }

    /**
     * Gets qos_red_probability
     *
     * @return int|null
     */
    public function getQosRedProbability()
    {
        return $this->container['qos_red_probability'];
    }

    /**
     * Sets qos_red_probability
     *
     * @param int|null $qos_red_probability Set QoS RED/WRED drop probability.
     *
     * @return self
     */
    public function setQosRedProbability($qos_red_probability)
    {

        if (!is_null($qos_red_probability) && ($qos_red_probability > 100)) {
            throw new \InvalidArgumentException('invalid value for $qos_red_probability when calling InlineObject202., must be smaller than or equal to 100.');
        }
        if (!is_null($qos_red_probability) && ($qos_red_probability < 0)) {
            throw new \InvalidArgumentException('invalid value for $qos_red_probability when calling InlineObject202., must be bigger than or equal to 0.');
        }

        $this->container['qos_red_probability'] = $qos_red_probability;

        return $this;
    }

    /**
     * Gets switch_log
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSwitchLog[]|null
     */
    public function getSwitchLog()
    {
        return $this->container['switch_log'];
    }

    /**
     * Sets switch_log
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdSwitchLog[]|null $switch_log Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log).
     *
     * @return self
     */
    public function setSwitchLog($switch_log)
    {

        if (!is_null($switch_log) && (count($switch_log) > 0)) {
            throw new \InvalidArgumentException('invalid value for $switch_log when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['switch_log'] = $switch_log;

        return $this;
    }

    /**
     * Gets remote_log
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdRemoteLog[]|null
     */
    public function getRemoteLog()
    {
        return $this->container['remote_log'];
    }

    /**
     * Sets remote_log
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdRemoteLog[]|null $remote_log Configure logging by FortiSwitch device to a remote syslog server.
     *
     * @return self
     */
    public function setRemoteLog($remote_log)
    {

        if (!is_null($remote_log) && (count($remote_log) > 0)) {
            throw new \InvalidArgumentException('invalid value for $remote_log when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['remote_log'] = $remote_log;

        return $this;
    }

    /**
     * Gets storm_control
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStormControl[]|null
     */
    public function getStormControl()
    {
        return $this->container['storm_control'];
    }

    /**
     * Sets storm_control
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStormControl[]|null $storm_control Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption.
     *
     * @return self
     */
    public function setStormControl($storm_control)
    {

        if (!is_null($storm_control) && (count($storm_control) > 0)) {
            throw new \InvalidArgumentException('invalid value for $storm_control when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['storm_control'] = $storm_control;

        return $this;
    }

    /**
     * Gets mirror
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMirror[]|null
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMirror[]|null $mirror Configuration method to edit FortiSwitch packet mirror.
     *
     * @return self
     */
    public function setMirror($mirror)
    {

        if (!is_null($mirror) && (count($mirror) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mirror when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets static_mac
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStaticMac[]|null
     */
    public function getStaticMac()
    {
        return $this->container['static_mac'];
    }

    /**
     * Sets static_mac
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdStaticMac[]|null $static_mac Configuration method to edit FortiSwitch Static and Sticky MAC.
     *
     * @return self
     */
    public function setStaticMac($static_mac)
    {

        if (!is_null($static_mac) && (count($static_mac) > 0)) {
            throw new \InvalidArgumentException('invalid value for $static_mac when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['static_mac'] = $static_mac;

        return $this;
    }

    /**
     * Gets custom_command
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdCustomCommand[]|null
     */
    public function getCustomCommand()
    {
        return $this->container['custom_command'];
    }

    /**
     * Sets custom_command
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdCustomCommand[]|null $custom_command Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch.
     *
     * @return self
     */
    public function setCustomCommand($custom_command)
    {

        if (!is_null($custom_command) && (count($custom_command) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_command when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['custom_command'] = $custom_command;

        return $this;
    }

    /**
     * Gets igmp_snooping
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIgmpSnooping[]|null
     */
    public function getIgmpSnooping()
    {
        return $this->container['igmp_snooping'];
    }

    /**
     * Sets igmp_snooping
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdIgmpSnooping[]|null $igmp_snooping Configure FortiSwitch IGMP snooping global settings.
     *
     * @return self
     */
    public function setIgmpSnooping($igmp_snooping)
    {

        if (!is_null($igmp_snooping) && (count($igmp_snooping) > 0)) {
            throw new \InvalidArgumentException('invalid value for $igmp_snooping when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['igmp_snooping'] = $igmp_snooping;

        return $this;
    }

    /**
     * Gets _802_1_x_settings
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchId8021XSettings[]|null
     */
    public function get8021XSettings()
    {
        return $this->container['_802_1_x_settings'];
    }

    /**
     * Sets _802_1_x_settings
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchId8021XSettings[]|null $_802_1_x_settings Configuration method to edit FortiSwitch 802.1X global settings.
     *
     * @return self
     */
    public function set8021XSettings($_802_1_x_settings)
    {

        if (!is_null($_802_1_x_settings) && (count($_802_1_x_settings) > 0)) {
            throw new \InvalidArgumentException('invalid value for $_802_1_x_settings when calling InlineObject202., number of items must be less than or equal to 0.');
        }
        $this->container['_802_1_x_settings'] = $_802_1_x_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


