<?php
/**
 * InlineObject260
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject260 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject260 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_260';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'status' => 'string',
        'hosts' => '\Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts[]',
        'hosts6' => '\Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts6[]',
        'query_v1_status' => 'string',
        'query_v1_port' => 'int',
        'query_v2c_status' => 'string',
        'query_v2c_port' => 'int',
        'trap_v1_status' => 'string',
        'trap_v1_lport' => 'int',
        'trap_v1_rport' => 'int',
        'trap_v2c_status' => 'string',
        'trap_v2c_lport' => 'int',
        'trap_v2c_rport' => 'int',
        'events' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'status' => null,
        'hosts' => null,
        'hosts6' => null,
        'query_v1_status' => null,
        'query_v1_port' => null,
        'query_v2c_status' => null,
        'query_v2c_port' => null,
        'trap_v1_status' => null,
        'trap_v1_lport' => null,
        'trap_v1_rport' => null,
        'trap_v2c_status' => null,
        'trap_v2c_lport' => null,
        'trap_v2c_rport' => null,
        'events' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'hosts' => 'hosts',
        'hosts6' => 'hosts6',
        'query_v1_status' => 'query-v1-status',
        'query_v1_port' => 'query-v1-port',
        'query_v2c_status' => 'query-v2c-status',
        'query_v2c_port' => 'query-v2c-port',
        'trap_v1_status' => 'trap-v1-status',
        'trap_v1_lport' => 'trap-v1-lport',
        'trap_v1_rport' => 'trap-v1-rport',
        'trap_v2c_status' => 'trap-v2c-status',
        'trap_v2c_lport' => 'trap-v2c-lport',
        'trap_v2c_rport' => 'trap-v2c-rport',
        'events' => 'events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'status' => 'setStatus',
        'hosts' => 'setHosts',
        'hosts6' => 'setHosts6',
        'query_v1_status' => 'setQueryV1Status',
        'query_v1_port' => 'setQueryV1Port',
        'query_v2c_status' => 'setQueryV2cStatus',
        'query_v2c_port' => 'setQueryV2cPort',
        'trap_v1_status' => 'setTrapV1Status',
        'trap_v1_lport' => 'setTrapV1Lport',
        'trap_v1_rport' => 'setTrapV1Rport',
        'trap_v2c_status' => 'setTrapV2cStatus',
        'trap_v2c_lport' => 'setTrapV2cLport',
        'trap_v2c_rport' => 'setTrapV2cRport',
        'events' => 'setEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'status' => 'getStatus',
        'hosts' => 'getHosts',
        'hosts6' => 'getHosts6',
        'query_v1_status' => 'getQueryV1Status',
        'query_v1_port' => 'getQueryV1Port',
        'query_v2c_status' => 'getQueryV2cStatus',
        'query_v2c_port' => 'getQueryV2cPort',
        'trap_v1_status' => 'getTrapV1Status',
        'trap_v1_lport' => 'getTrapV1Lport',
        'trap_v1_rport' => 'getTrapV1Rport',
        'trap_v2c_status' => 'getTrapV2cStatus',
        'trap_v2c_lport' => 'getTrapV2cLport',
        'trap_v2c_rport' => 'getTrapV2cRport',
        'events' => 'getEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const QUERY_V1_STATUS_ENABLE = 'enable';
    const QUERY_V1_STATUS_DISABLE = 'disable';
    const QUERY_V2C_STATUS_ENABLE = 'enable';
    const QUERY_V2C_STATUS_DISABLE = 'disable';
    const TRAP_V1_STATUS_ENABLE = 'enable';
    const TRAP_V1_STATUS_DISABLE = 'disable';
    const TRAP_V2C_STATUS_ENABLE = 'enable';
    const TRAP_V2C_STATUS_DISABLE = 'disable';
    const EVENTS_CPU_HIGH = 'cpu-high';
    const EVENTS_MEM_LOW = 'mem-low';
    const EVENTS_LOG_FULL = 'log-full';
    const EVENTS_INTF_IP = 'intf-ip';
    const EVENTS_VPN_TUN_UP = 'vpn-tun-up';
    const EVENTS_VPN_TUN_DOWN = 'vpn-tun-down';
    const EVENTS_HA_SWITCH = 'ha-switch';
    const EVENTS_HA_HB_FAILURE = 'ha-hb-failure';
    const EVENTS_IPS_SIGNATURE = 'ips-signature';
    const EVENTS_IPS_ANOMALY = 'ips-anomaly';
    const EVENTS_AV_VIRUS = 'av-virus';
    const EVENTS_AV_OVERSIZE = 'av-oversize';
    const EVENTS_AV_PATTERN = 'av-pattern';
    const EVENTS_AV_FRAGMENTED = 'av-fragmented';
    const EVENTS_FM_IF_CHANGE = 'fm-if-change';
    const EVENTS_FM_CONF_CHANGE = 'fm-conf-change';
    const EVENTS_BGP_ESTABLISHED = 'bgp-established';
    const EVENTS_BGP_BACKWARD_TRANSITION = 'bgp-backward-transition';
    const EVENTS_HA_MEMBER_UP = 'ha-member-up';
    const EVENTS_HA_MEMBER_DOWN = 'ha-member-down';
    const EVENTS_ENT_CONF_CHANGE = 'ent-conf-change';
    const EVENTS_AV_CONSERVE = 'av-conserve';
    const EVENTS_AV_BYPASS = 'av-bypass';
    const EVENTS_AV_OVERSIZE_PASSED = 'av-oversize-passed';
    const EVENTS_AV_OVERSIZE_BLOCKED = 'av-oversize-blocked';
    const EVENTS_IPS_PKG_UPDATE = 'ips-pkg-update';
    const EVENTS_IPS_FAIL_OPEN = 'ips-fail-open';
    const EVENTS_POWER_SUPPLY_FAILURE = 'power-supply-failure';
    const EVENTS_FAZ_DISCONNECT = 'faz-disconnect';
    const EVENTS_WC_AP_UP = 'wc-ap-up';
    const EVENTS_WC_AP_DOWN = 'wc-ap-down';
    const EVENTS_FSWCTL_SESSION_UP = 'fswctl-session-up';
    const EVENTS_FSWCTL_SESSION_DOWN = 'fswctl-session-down';
    const EVENTS_LOAD_BALANCE_REAL_SERVER_DOWN = 'load-balance-real-server-down';
    const EVENTS_DEVICE_NEW = 'device-new';
    const EVENTS_PER_CPU_HIGH = 'per-cpu-high';
    const EVENTS_DHCP = 'dhcp';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryV1StatusAllowableValues()
    {
        return [
            self::QUERY_V1_STATUS_ENABLE,
            self::QUERY_V1_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQueryV2cStatusAllowableValues()
    {
        return [
            self::QUERY_V2C_STATUS_ENABLE,
            self::QUERY_V2C_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrapV1StatusAllowableValues()
    {
        return [
            self::TRAP_V1_STATUS_ENABLE,
            self::TRAP_V1_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrapV2cStatusAllowableValues()
    {
        return [
            self::TRAP_V2C_STATUS_ENABLE,
            self::TRAP_V2C_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventsAllowableValues()
    {
        return [
            self::EVENTS_CPU_HIGH,
            self::EVENTS_MEM_LOW,
            self::EVENTS_LOG_FULL,
            self::EVENTS_INTF_IP,
            self::EVENTS_VPN_TUN_UP,
            self::EVENTS_VPN_TUN_DOWN,
            self::EVENTS_HA_SWITCH,
            self::EVENTS_HA_HB_FAILURE,
            self::EVENTS_IPS_SIGNATURE,
            self::EVENTS_IPS_ANOMALY,
            self::EVENTS_AV_VIRUS,
            self::EVENTS_AV_OVERSIZE,
            self::EVENTS_AV_PATTERN,
            self::EVENTS_AV_FRAGMENTED,
            self::EVENTS_FM_IF_CHANGE,
            self::EVENTS_FM_CONF_CHANGE,
            self::EVENTS_BGP_ESTABLISHED,
            self::EVENTS_BGP_BACKWARD_TRANSITION,
            self::EVENTS_HA_MEMBER_UP,
            self::EVENTS_HA_MEMBER_DOWN,
            self::EVENTS_ENT_CONF_CHANGE,
            self::EVENTS_AV_CONSERVE,
            self::EVENTS_AV_BYPASS,
            self::EVENTS_AV_OVERSIZE_PASSED,
            self::EVENTS_AV_OVERSIZE_BLOCKED,
            self::EVENTS_IPS_PKG_UPDATE,
            self::EVENTS_IPS_FAIL_OPEN,
            self::EVENTS_POWER_SUPPLY_FAILURE,
            self::EVENTS_FAZ_DISCONNECT,
            self::EVENTS_WC_AP_UP,
            self::EVENTS_WC_AP_DOWN,
            self::EVENTS_FSWCTL_SESSION_UP,
            self::EVENTS_FSWCTL_SESSION_DOWN,
            self::EVENTS_LOAD_BALANCE_REAL_SERVER_DOWN,
            self::EVENTS_DEVICE_NEW,
            self::EVENTS_PER_CPU_HIGH,
            self::EVENTS_DHCP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['hosts'] = $data['hosts'] ?? null;
        $this->container['hosts6'] = $data['hosts6'] ?? null;
        $this->container['query_v1_status'] = $data['query_v1_status'] ?? null;
        $this->container['query_v1_port'] = $data['query_v1_port'] ?? null;
        $this->container['query_v2c_status'] = $data['query_v2c_status'] ?? null;
        $this->container['query_v2c_port'] = $data['query_v2c_port'] ?? null;
        $this->container['trap_v1_status'] = $data['trap_v1_status'] ?? null;
        $this->container['trap_v1_lport'] = $data['trap_v1_lport'] ?? null;
        $this->container['trap_v1_rport'] = $data['trap_v1_rport'] ?? null;
        $this->container['trap_v2c_status'] = $data['trap_v2c_status'] ?? null;
        $this->container['trap_v2c_lport'] = $data['trap_v2c_lport'] ?? null;
        $this->container['trap_v2c_rport'] = $data['trap_v2c_rport'] ?? null;
        $this->container['events'] = $data['events'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['hosts']) && (count($this->container['hosts']) > 16)) {
            $invalidProperties[] = "invalid value for 'hosts', number of items must be less than or equal to 16.";
        }

        if (!is_null($this->container['hosts6']) && (count($this->container['hosts6']) > 16)) {
            $invalidProperties[] = "invalid value for 'hosts6', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getQueryV1StatusAllowableValues();
        if (!is_null($this->container['query_v1_status']) && !in_array($this->container['query_v1_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'query_v1_status', must be one of '%s'",
                $this->container['query_v1_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['query_v1_port']) && ($this->container['query_v1_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'query_v1_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['query_v1_port']) && ($this->container['query_v1_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'query_v1_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getQueryV2cStatusAllowableValues();
        if (!is_null($this->container['query_v2c_status']) && !in_array($this->container['query_v2c_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'query_v2c_status', must be one of '%s'",
                $this->container['query_v2c_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['query_v2c_port']) && ($this->container['query_v2c_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'query_v2c_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['query_v2c_port']) && ($this->container['query_v2c_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'query_v2c_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTrapV1StatusAllowableValues();
        if (!is_null($this->container['trap_v1_status']) && !in_array($this->container['trap_v1_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trap_v1_status', must be one of '%s'",
                $this->container['trap_v1_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['trap_v1_lport']) && ($this->container['trap_v1_lport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'trap_v1_lport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['trap_v1_lport']) && ($this->container['trap_v1_lport'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_v1_lport', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trap_v1_rport']) && ($this->container['trap_v1_rport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'trap_v1_rport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['trap_v1_rport']) && ($this->container['trap_v1_rport'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_v1_rport', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTrapV2cStatusAllowableValues();
        if (!is_null($this->container['trap_v2c_status']) && !in_array($this->container['trap_v2c_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trap_v2c_status', must be one of '%s'",
                $this->container['trap_v2c_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['trap_v2c_lport']) && ($this->container['trap_v2c_lport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'trap_v2c_lport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['trap_v2c_lport']) && ($this->container['trap_v2c_lport'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_v2c_lport', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trap_v2c_rport']) && ($this->container['trap_v2c_rport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'trap_v2c_rport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['trap_v2c_rport']) && ($this->container['trap_v2c_rport'] < 1)) {
            $invalidProperties[] = "invalid value for 'trap_v2c_rport', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getEventsAllowableValues();
        if (!is_null($this->container['events']) && !in_array($this->container['events'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'events', must be one of '%s'",
                $this->container['events'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Community ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject260., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject260., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Community name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject260., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this SNMP community.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hosts
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts[]|null
     */
    public function getHosts()
    {
        return $this->container['hosts'];
    }

    /**
     * Sets hosts
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts[]|null $hosts Configure IPv4 SNMP managers (hosts).
     *
     * @return self
     */
    public function setHosts($hosts)
    {

        if (!is_null($hosts) && (count($hosts) > 16)) {
            throw new \InvalidArgumentException('invalid value for $hosts when calling InlineObject260., number of items must be less than or equal to 16.');
        }
        $this->container['hosts'] = $hosts;

        return $this;
    }

    /**
     * Gets hosts6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts6[]|null
     */
    public function getHosts6()
    {
        return $this->container['hosts6'];
    }

    /**
     * Sets hosts6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSnmpCommunityIdHosts6[]|null $hosts6 Configure IPv6 SNMP managers.
     *
     * @return self
     */
    public function setHosts6($hosts6)
    {

        if (!is_null($hosts6) && (count($hosts6) > 16)) {
            throw new \InvalidArgumentException('invalid value for $hosts6 when calling InlineObject260., number of items must be less than or equal to 16.');
        }
        $this->container['hosts6'] = $hosts6;

        return $this;
    }

    /**
     * Gets query_v1_status
     *
     * @return string|null
     */
    public function getQueryV1Status()
    {
        return $this->container['query_v1_status'];
    }

    /**
     * Sets query_v1_status
     *
     * @param string|null $query_v1_status Enable/disable SNMP v1 queries.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setQueryV1Status($query_v1_status)
    {
        $allowedValues = $this->getQueryV1StatusAllowableValues();
        if (!is_null($query_v1_status) && !in_array($query_v1_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'query_v1_status', must be one of '%s'",
                    $query_v1_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['query_v1_status'] = $query_v1_status;

        return $this;
    }

    /**
     * Gets query_v1_port
     *
     * @return int|null
     */
    public function getQueryV1Port()
    {
        return $this->container['query_v1_port'];
    }

    /**
     * Sets query_v1_port
     *
     * @param int|null $query_v1_port SNMP v1 query port (default = 161).
     *
     * @return self
     */
    public function setQueryV1Port($query_v1_port)
    {

        if (!is_null($query_v1_port) && ($query_v1_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $query_v1_port when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($query_v1_port) && ($query_v1_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $query_v1_port when calling InlineObject260., must be bigger than or equal to 1.');
        }

        $this->container['query_v1_port'] = $query_v1_port;

        return $this;
    }

    /**
     * Gets query_v2c_status
     *
     * @return string|null
     */
    public function getQueryV2cStatus()
    {
        return $this->container['query_v2c_status'];
    }

    /**
     * Sets query_v2c_status
     *
     * @param string|null $query_v2c_status Enable/disable SNMP v2c queries.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setQueryV2cStatus($query_v2c_status)
    {
        $allowedValues = $this->getQueryV2cStatusAllowableValues();
        if (!is_null($query_v2c_status) && !in_array($query_v2c_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'query_v2c_status', must be one of '%s'",
                    $query_v2c_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['query_v2c_status'] = $query_v2c_status;

        return $this;
    }

    /**
     * Gets query_v2c_port
     *
     * @return int|null
     */
    public function getQueryV2cPort()
    {
        return $this->container['query_v2c_port'];
    }

    /**
     * Sets query_v2c_port
     *
     * @param int|null $query_v2c_port SNMP v2c query port (default = 161).
     *
     * @return self
     */
    public function setQueryV2cPort($query_v2c_port)
    {

        if (!is_null($query_v2c_port) && ($query_v2c_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $query_v2c_port when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($query_v2c_port) && ($query_v2c_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $query_v2c_port when calling InlineObject260., must be bigger than or equal to 0.');
        }

        $this->container['query_v2c_port'] = $query_v2c_port;

        return $this;
    }

    /**
     * Gets trap_v1_status
     *
     * @return string|null
     */
    public function getTrapV1Status()
    {
        return $this->container['trap_v1_status'];
    }

    /**
     * Sets trap_v1_status
     *
     * @param string|null $trap_v1_status Enable/disable SNMP v1 traps.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setTrapV1Status($trap_v1_status)
    {
        $allowedValues = $this->getTrapV1StatusAllowableValues();
        if (!is_null($trap_v1_status) && !in_array($trap_v1_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trap_v1_status', must be one of '%s'",
                    $trap_v1_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trap_v1_status'] = $trap_v1_status;

        return $this;
    }

    /**
     * Gets trap_v1_lport
     *
     * @return int|null
     */
    public function getTrapV1Lport()
    {
        return $this->container['trap_v1_lport'];
    }

    /**
     * Sets trap_v1_lport
     *
     * @param int|null $trap_v1_lport SNMP v1 trap local port (default = 162).
     *
     * @return self
     */
    public function setTrapV1Lport($trap_v1_lport)
    {

        if (!is_null($trap_v1_lport) && ($trap_v1_lport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $trap_v1_lport when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($trap_v1_lport) && ($trap_v1_lport < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_v1_lport when calling InlineObject260., must be bigger than or equal to 1.');
        }

        $this->container['trap_v1_lport'] = $trap_v1_lport;

        return $this;
    }

    /**
     * Gets trap_v1_rport
     *
     * @return int|null
     */
    public function getTrapV1Rport()
    {
        return $this->container['trap_v1_rport'];
    }

    /**
     * Sets trap_v1_rport
     *
     * @param int|null $trap_v1_rport SNMP v1 trap remote port (default = 162).
     *
     * @return self
     */
    public function setTrapV1Rport($trap_v1_rport)
    {

        if (!is_null($trap_v1_rport) && ($trap_v1_rport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $trap_v1_rport when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($trap_v1_rport) && ($trap_v1_rport < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_v1_rport when calling InlineObject260., must be bigger than or equal to 1.');
        }

        $this->container['trap_v1_rport'] = $trap_v1_rport;

        return $this;
    }

    /**
     * Gets trap_v2c_status
     *
     * @return string|null
     */
    public function getTrapV2cStatus()
    {
        return $this->container['trap_v2c_status'];
    }

    /**
     * Sets trap_v2c_status
     *
     * @param string|null $trap_v2c_status Enable/disable SNMP v2c traps.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setTrapV2cStatus($trap_v2c_status)
    {
        $allowedValues = $this->getTrapV2cStatusAllowableValues();
        if (!is_null($trap_v2c_status) && !in_array($trap_v2c_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trap_v2c_status', must be one of '%s'",
                    $trap_v2c_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trap_v2c_status'] = $trap_v2c_status;

        return $this;
    }

    /**
     * Gets trap_v2c_lport
     *
     * @return int|null
     */
    public function getTrapV2cLport()
    {
        return $this->container['trap_v2c_lport'];
    }

    /**
     * Sets trap_v2c_lport
     *
     * @param int|null $trap_v2c_lport SNMP v2c trap local port (default = 162).
     *
     * @return self
     */
    public function setTrapV2cLport($trap_v2c_lport)
    {

        if (!is_null($trap_v2c_lport) && ($trap_v2c_lport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $trap_v2c_lport when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($trap_v2c_lport) && ($trap_v2c_lport < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_v2c_lport when calling InlineObject260., must be bigger than or equal to 1.');
        }

        $this->container['trap_v2c_lport'] = $trap_v2c_lport;

        return $this;
    }

    /**
     * Gets trap_v2c_rport
     *
     * @return int|null
     */
    public function getTrapV2cRport()
    {
        return $this->container['trap_v2c_rport'];
    }

    /**
     * Sets trap_v2c_rport
     *
     * @param int|null $trap_v2c_rport SNMP v2c trap remote port (default = 162).
     *
     * @return self
     */
    public function setTrapV2cRport($trap_v2c_rport)
    {

        if (!is_null($trap_v2c_rport) && ($trap_v2c_rport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $trap_v2c_rport when calling InlineObject260., must be smaller than or equal to 65535.');
        }
        if (!is_null($trap_v2c_rport) && ($trap_v2c_rport < 1)) {
            throw new \InvalidArgumentException('invalid value for $trap_v2c_rport when calling InlineObject260., must be bigger than or equal to 1.');
        }

        $this->container['trap_v2c_rport'] = $trap_v2c_rport;

        return $this;
    }

    /**
     * Gets events
     *
     * @return string|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param string|null $events SNMP trap events.    cpu-high:Send a trap when CPU usage is high.    mem-low:Send a trap when available memory is low.    log-full:Send a trap when log disk space becomes low.    intf-ip:Send a trap when an interface IP address is changed.    vpn-tun-up:Send a trap when a VPN tunnel comes up.    vpn-tun-down:Send a trap when a VPN tunnel goes down.    ha-switch:Send a trap after an HA failover when the backup unit has taken over.    ha-hb-failure:Send a trap when HA heartbeats are not received.    ips-signature:Send a trap when IPS detects an attack.    ips-anomaly:Send a trap when IPS finds an anomaly.    av-virus:Send a trap when AntiVirus finds a virus.    av-oversize:Send a trap when AntiVirus finds an oversized file.    av-pattern:Send a trap when AntiVirus finds file matching pattern.    av-fragmented:Send a trap when AntiVirus finds a fragmented file.    fm-if-change:Send a trap when FortiManager interface changes. Send a FortiManager trap.    fm-conf-change:Send a trap when a configuration change is made by a FortiGate administrator and the FortiGate is managed by FortiManager.    bgp-established:Send a trap when a BGP FSM transitions to the established state.    bgp-backward-transition:Send a trap when a BGP FSM goes from a high numbered state to a lower numbered state.    ha-member-up:Send a trap when an HA cluster member goes up.    ha-member-down:Send a trap when an HA cluster member goes down.    ent-conf-change:Send a trap when an entity MIB change occurs (RFC4133).    av-conserve:Send a trap when the FortiGate enters conserve mode.    av-bypass:Send a trap when the FortiGate enters bypass mode.    av-oversize-passed:Send a trap when AntiVirus passes an oversized file.    av-oversize-blocked:Send a trap when AntiVirus blocks an oversized file.    ips-pkg-update:Send a trap when the IPS signature database or engine is updated.    ips-fail-open:Send a trap when the IPS network buffer is full.    power-supply-failure:Send a trap when a power supply fails.    faz-disconnect:Send a trap when a FortiAnalyzer disconnects from the FortiGate.    wc-ap-up:Send a trap when a managed FortiAP comes up.    wc-ap-down:Send a trap when a managed FortiAP goes down.    fswctl-session-up:Send a trap when a FortiSwitch controller session comes up.    fswctl-session-down:Send a trap when a FortiSwitch controller session goes down.    load-balance-real-server-down:Send a trap when a server load balance real server goes down.    device-new:Send a trap when a new device is found.    per-cpu-high:Send a trap when per-CPU usage is high.    dhcp:Send a trap when the DHCP server exhausts the IP pool, an IP address already is in use, or a DHCP client interface received a DHCP-NAK.
     *
     * @return self
     */
    public function setEvents($events)
    {
        $allowedValues = $this->getEventsAllowableValues();
        if (!is_null($events) && !in_array($events, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'events', must be one of '%s'",
                    $events,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['events'] = $events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


