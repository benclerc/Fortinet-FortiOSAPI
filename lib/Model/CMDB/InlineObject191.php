<?php
/**
 * InlineObject191
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject191 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject191 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_191';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_vlan' => 'string',
        'quarantine' => 'string',
        'rspan' => 'string',
        'voice' => 'string',
        'video' => 'string',
        'nac' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_vlan' => null,
        'quarantine' => null,
        'rspan' => null,
        'voice' => null,
        'video' => null,
        'nac' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_vlan' => 'default-vlan',
        'quarantine' => 'quarantine',
        'rspan' => 'rspan',
        'voice' => 'voice',
        'video' => 'video',
        'nac' => 'nac'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_vlan' => 'setDefaultVlan',
        'quarantine' => 'setQuarantine',
        'rspan' => 'setRspan',
        'voice' => 'setVoice',
        'video' => 'setVideo',
        'nac' => 'setNac'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_vlan' => 'getDefaultVlan',
        'quarantine' => 'getQuarantine',
        'rspan' => 'getRspan',
        'voice' => 'getVoice',
        'video' => 'getVideo',
        'nac' => 'getNac'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_vlan'] = $data['default_vlan'] ?? null;
        $this->container['quarantine'] = $data['quarantine'] ?? null;
        $this->container['rspan'] = $data['rspan'] ?? null;
        $this->container['voice'] = $data['voice'] ?? null;
        $this->container['video'] = $data['video'] ?? null;
        $this->container['nac'] = $data['nac'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['default_vlan']) && (mb_strlen($this->container['default_vlan']) > 63)) {
            $invalidProperties[] = "invalid value for 'default_vlan', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['quarantine']) && (mb_strlen($this->container['quarantine']) > 63)) {
            $invalidProperties[] = "invalid value for 'quarantine', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['rspan']) && (mb_strlen($this->container['rspan']) > 63)) {
            $invalidProperties[] = "invalid value for 'rspan', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['voice']) && (mb_strlen($this->container['voice']) > 63)) {
            $invalidProperties[] = "invalid value for 'voice', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['video']) && (mb_strlen($this->container['video']) > 63)) {
            $invalidProperties[] = "invalid value for 'video', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['nac']) && (mb_strlen($this->container['nac']) > 63)) {
            $invalidProperties[] = "invalid value for 'nac', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_vlan
     *
     * @return string|null
     */
    public function getDefaultVlan()
    {
        return $this->container['default_vlan'];
    }

    /**
     * Sets default_vlan
     *
     * @param string|null $default_vlan Default VLAN (native) assigned to all switch ports upon discovery.
     *
     * @return self
     */
    public function setDefaultVlan($default_vlan)
    {
        if (!is_null($default_vlan) && (mb_strlen($default_vlan) > 63)) {
            throw new \InvalidArgumentException('invalid length for $default_vlan when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['default_vlan'] = $default_vlan;

        return $this;
    }

    /**
     * Gets quarantine
     *
     * @return string|null
     */
    public function getQuarantine()
    {
        return $this->container['quarantine'];
    }

    /**
     * Sets quarantine
     *
     * @param string|null $quarantine VLAN for quarantined traffic.
     *
     * @return self
     */
    public function setQuarantine($quarantine)
    {
        if (!is_null($quarantine) && (mb_strlen($quarantine) > 63)) {
            throw new \InvalidArgumentException('invalid length for $quarantine when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['quarantine'] = $quarantine;

        return $this;
    }

    /**
     * Gets rspan
     *
     * @return string|null
     */
    public function getRspan()
    {
        return $this->container['rspan'];
    }

    /**
     * Sets rspan
     *
     * @param string|null $rspan VLAN for RSPAN/ERSPAN mirrored traffic.
     *
     * @return self
     */
    public function setRspan($rspan)
    {
        if (!is_null($rspan) && (mb_strlen($rspan) > 63)) {
            throw new \InvalidArgumentException('invalid length for $rspan when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['rspan'] = $rspan;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return string|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param string|null $voice VLAN dedicated for voice devices.
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (!is_null($voice) && (mb_strlen($voice) > 63)) {
            throw new \InvalidArgumentException('invalid length for $voice when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets video
     *
     * @return string|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param string|null $video VLAN dedicated for video devices.
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (!is_null($video) && (mb_strlen($video) > 63)) {
            throw new \InvalidArgumentException('invalid length for $video when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets nac
     *
     * @return string|null
     */
    public function getNac()
    {
        return $this->container['nac'];
    }

    /**
     * Sets nac
     *
     * @param string|null $nac VLAN for NAC onboarding devices.
     *
     * @return self
     */
    public function setNac($nac)
    {
        if (!is_null($nac) && (mb_strlen($nac) > 63)) {
            throw new \InvalidArgumentException('invalid length for $nac when calling InlineObject191., must be smaller than or equal to 63.');
        }

        $this->container['nac'] = $nac;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


