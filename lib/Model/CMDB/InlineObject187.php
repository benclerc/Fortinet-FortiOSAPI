<?php
/**
 * InlineObject187
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject187 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject187 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_187';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'block' => 'string',
        'log' => 'string',
        'default_command_log' => 'string',
        'shell_commands' => '\Fortigate\FortiOS\Model\CMDB\SshFilterProfileNameShellCommands[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'block' => null,
        'log' => null,
        'default_command_log' => null,
        'shell_commands' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'block' => 'block',
        'log' => 'log',
        'default_command_log' => 'default-command-log',
        'shell_commands' => 'shell-commands'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'block' => 'setBlock',
        'log' => 'setLog',
        'default_command_log' => 'setDefaultCommandLog',
        'shell_commands' => 'setShellCommands'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'block' => 'getBlock',
        'log' => 'getLog',
        'default_command_log' => 'getDefaultCommandLog',
        'shell_commands' => 'getShellCommands'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BLOCK_X11 = 'x11';
    const BLOCK_SHELL = 'shell';
    const BLOCK_EXEC = 'exec';
    const BLOCK_PORT_FORWARD = 'port-forward';
    const BLOCK_TUN_FORWARD = 'tun-forward';
    const BLOCK_SFTP = 'sftp';
    const BLOCK_SCP = 'scp';
    const BLOCK_UNKNOWN = 'unknown';
    const LOG_X11 = 'x11';
    const LOG_SHELL = 'shell';
    const LOG_EXEC = 'exec';
    const LOG_PORT_FORWARD = 'port-forward';
    const LOG_TUN_FORWARD = 'tun-forward';
    const LOG_SFTP = 'sftp';
    const LOG_SCP = 'scp';
    const LOG_UNKNOWN = 'unknown';
    const DEFAULT_COMMAND_LOG_ENABLE = 'enable';
    const DEFAULT_COMMAND_LOG_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockAllowableValues()
    {
        return [
            self::BLOCK_X11,
            self::BLOCK_SHELL,
            self::BLOCK_EXEC,
            self::BLOCK_PORT_FORWARD,
            self::BLOCK_TUN_FORWARD,
            self::BLOCK_SFTP,
            self::BLOCK_SCP,
            self::BLOCK_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogAllowableValues()
    {
        return [
            self::LOG_X11,
            self::LOG_SHELL,
            self::LOG_EXEC,
            self::LOG_PORT_FORWARD,
            self::LOG_TUN_FORWARD,
            self::LOG_SFTP,
            self::LOG_SCP,
            self::LOG_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultCommandLogAllowableValues()
    {
        return [
            self::DEFAULT_COMMAND_LOG_ENABLE,
            self::DEFAULT_COMMAND_LOG_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['default_command_log'] = $data['default_command_log'] ?? null;
        $this->container['shell_commands'] = $data['shell_commands'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getBlockAllowableValues();
        if (!is_null($this->container['block']) && !in_array($this->container['block'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block', must be one of '%s'",
                $this->container['block'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($this->container['log']) && !in_array($this->container['log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log', must be one of '%s'",
                $this->container['log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultCommandLogAllowableValues();
        if (!is_null($this->container['default_command_log']) && !in_array($this->container['default_command_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_command_log', must be one of '%s'",
                $this->container['default_command_log'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shell_commands']) && (count($this->container['shell_commands']) > 256)) {
            $invalidProperties[] = "invalid value for 'shell_commands', number of items must be less than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name SSH filter profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject187., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string|null $block SSH blocking options.    x11:X server forwarding.    shell:SSH shell.    exec:SSH execution.    port-forward:Port forwarding.    tun-forward:Tunnel forwarding.    sftp:SFTP.    scp:SCP.    unknown:Unknown channel.
     *
     * @return self
     */
    public function setBlock($block)
    {
        $allowedValues = $this->getBlockAllowableValues();
        if (!is_null($block) && !in_array($block, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block', must be one of '%s'",
                    $block,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string|null $log SSH logging options.    x11:X server forwarding.    shell:SSH shell.    exec:SSH execution.    port-forward:Port forwarding.    tun-forward:Tunnel forwarding.    sftp:SFTP.    scp:SCP.    unknown:Unknown channel.
     *
     * @return self
     */
    public function setLog($log)
    {
        $allowedValues = $this->getLogAllowableValues();
        if (!is_null($log) && !in_array($log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log', must be one of '%s'",
                    $log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets default_command_log
     *
     * @return string|null
     */
    public function getDefaultCommandLog()
    {
        return $this->container['default_command_log'];
    }

    /**
     * Sets default_command_log
     *
     * @param string|null $default_command_log Enable/disable logging unmatched shell commands.    enable:Enable log unmatched shell commands.    disable:Disable log unmatched shell commands.
     *
     * @return self
     */
    public function setDefaultCommandLog($default_command_log)
    {
        $allowedValues = $this->getDefaultCommandLogAllowableValues();
        if (!is_null($default_command_log) && !in_array($default_command_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_command_log', must be one of '%s'",
                    $default_command_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_command_log'] = $default_command_log;

        return $this;
    }

    /**
     * Gets shell_commands
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SshFilterProfileNameShellCommands[]|null
     */
    public function getShellCommands()
    {
        return $this->container['shell_commands'];
    }

    /**
     * Sets shell_commands
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SshFilterProfileNameShellCommands[]|null $shell_commands SSH command filter.
     *
     * @return self
     */
    public function setShellCommands($shell_commands)
    {

        if (!is_null($shell_commands) && (count($shell_commands) > 256)) {
            throw new \InvalidArgumentException('invalid value for $shell_commands when calling InlineObject187., number of items must be less than or equal to 256.');
        }
        $this->container['shell_commands'] = $shell_commands;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


