<?php
/**
 * InlineObject526
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject526 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject526 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_526';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'header_client_ip' => 'string',
        'header_via_request' => 'string',
        'header_via_response' => 'string',
        'header_x_forwarded_for' => 'string',
        'header_front_end_https' => 'string',
        'header_x_authenticated_user' => 'string',
        'header_x_authenticated_groups' => 'string',
        'strip_encoding' => 'string',
        'log_header_change' => 'string',
        'headers' => '\Fortigate\FortiOS\Model\CMDB\WebProxyProfileNameHeaders[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'header_client_ip' => null,
        'header_via_request' => null,
        'header_via_response' => null,
        'header_x_forwarded_for' => null,
        'header_front_end_https' => null,
        'header_x_authenticated_user' => null,
        'header_x_authenticated_groups' => null,
        'strip_encoding' => null,
        'log_header_change' => null,
        'headers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'header_client_ip' => 'header-client-ip',
        'header_via_request' => 'header-via-request',
        'header_via_response' => 'header-via-response',
        'header_x_forwarded_for' => 'header-x-forwarded-for',
        'header_front_end_https' => 'header-front-end-https',
        'header_x_authenticated_user' => 'header-x-authenticated-user',
        'header_x_authenticated_groups' => 'header-x-authenticated-groups',
        'strip_encoding' => 'strip-encoding',
        'log_header_change' => 'log-header-change',
        'headers' => 'headers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'header_client_ip' => 'setHeaderClientIp',
        'header_via_request' => 'setHeaderViaRequest',
        'header_via_response' => 'setHeaderViaResponse',
        'header_x_forwarded_for' => 'setHeaderXForwardedFor',
        'header_front_end_https' => 'setHeaderFrontEndHttps',
        'header_x_authenticated_user' => 'setHeaderXAuthenticatedUser',
        'header_x_authenticated_groups' => 'setHeaderXAuthenticatedGroups',
        'strip_encoding' => 'setStripEncoding',
        'log_header_change' => 'setLogHeaderChange',
        'headers' => 'setHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'header_client_ip' => 'getHeaderClientIp',
        'header_via_request' => 'getHeaderViaRequest',
        'header_via_response' => 'getHeaderViaResponse',
        'header_x_forwarded_for' => 'getHeaderXForwardedFor',
        'header_front_end_https' => 'getHeaderFrontEndHttps',
        'header_x_authenticated_user' => 'getHeaderXAuthenticatedUser',
        'header_x_authenticated_groups' => 'getHeaderXAuthenticatedGroups',
        'strip_encoding' => 'getStripEncoding',
        'log_header_change' => 'getLogHeaderChange',
        'headers' => 'getHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HEADER_CLIENT_IP_PASS = 'pass';
    const HEADER_CLIENT_IP_ADD = 'add';
    const HEADER_CLIENT_IP_REMOVE = 'remove';
    const HEADER_VIA_REQUEST_PASS = 'pass';
    const HEADER_VIA_REQUEST_ADD = 'add';
    const HEADER_VIA_REQUEST_REMOVE = 'remove';
    const HEADER_VIA_RESPONSE_PASS = 'pass';
    const HEADER_VIA_RESPONSE_ADD = 'add';
    const HEADER_VIA_RESPONSE_REMOVE = 'remove';
    const HEADER_X_FORWARDED_FOR_PASS = 'pass';
    const HEADER_X_FORWARDED_FOR_ADD = 'add';
    const HEADER_X_FORWARDED_FOR_REMOVE = 'remove';
    const HEADER_FRONT_END_HTTPS_PASS = 'pass';
    const HEADER_FRONT_END_HTTPS_ADD = 'add';
    const HEADER_FRONT_END_HTTPS_REMOVE = 'remove';
    const HEADER_X_AUTHENTICATED_USER_PASS = 'pass';
    const HEADER_X_AUTHENTICATED_USER_ADD = 'add';
    const HEADER_X_AUTHENTICATED_USER_REMOVE = 'remove';
    const HEADER_X_AUTHENTICATED_GROUPS_PASS = 'pass';
    const HEADER_X_AUTHENTICATED_GROUPS_ADD = 'add';
    const HEADER_X_AUTHENTICATED_GROUPS_REMOVE = 'remove';
    const STRIP_ENCODING_ENABLE = 'enable';
    const STRIP_ENCODING_DISABLE = 'disable';
    const LOG_HEADER_CHANGE_ENABLE = 'enable';
    const LOG_HEADER_CHANGE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderClientIpAllowableValues()
    {
        return [
            self::HEADER_CLIENT_IP_PASS,
            self::HEADER_CLIENT_IP_ADD,
            self::HEADER_CLIENT_IP_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderViaRequestAllowableValues()
    {
        return [
            self::HEADER_VIA_REQUEST_PASS,
            self::HEADER_VIA_REQUEST_ADD,
            self::HEADER_VIA_REQUEST_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderViaResponseAllowableValues()
    {
        return [
            self::HEADER_VIA_RESPONSE_PASS,
            self::HEADER_VIA_RESPONSE_ADD,
            self::HEADER_VIA_RESPONSE_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderXForwardedForAllowableValues()
    {
        return [
            self::HEADER_X_FORWARDED_FOR_PASS,
            self::HEADER_X_FORWARDED_FOR_ADD,
            self::HEADER_X_FORWARDED_FOR_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderFrontEndHttpsAllowableValues()
    {
        return [
            self::HEADER_FRONT_END_HTTPS_PASS,
            self::HEADER_FRONT_END_HTTPS_ADD,
            self::HEADER_FRONT_END_HTTPS_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderXAuthenticatedUserAllowableValues()
    {
        return [
            self::HEADER_X_AUTHENTICATED_USER_PASS,
            self::HEADER_X_AUTHENTICATED_USER_ADD,
            self::HEADER_X_AUTHENTICATED_USER_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderXAuthenticatedGroupsAllowableValues()
    {
        return [
            self::HEADER_X_AUTHENTICATED_GROUPS_PASS,
            self::HEADER_X_AUTHENTICATED_GROUPS_ADD,
            self::HEADER_X_AUTHENTICATED_GROUPS_REMOVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStripEncodingAllowableValues()
    {
        return [
            self::STRIP_ENCODING_ENABLE,
            self::STRIP_ENCODING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogHeaderChangeAllowableValues()
    {
        return [
            self::LOG_HEADER_CHANGE_ENABLE,
            self::LOG_HEADER_CHANGE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['header_client_ip'] = $data['header_client_ip'] ?? null;
        $this->container['header_via_request'] = $data['header_via_request'] ?? null;
        $this->container['header_via_response'] = $data['header_via_response'] ?? null;
        $this->container['header_x_forwarded_for'] = $data['header_x_forwarded_for'] ?? null;
        $this->container['header_front_end_https'] = $data['header_front_end_https'] ?? null;
        $this->container['header_x_authenticated_user'] = $data['header_x_authenticated_user'] ?? null;
        $this->container['header_x_authenticated_groups'] = $data['header_x_authenticated_groups'] ?? null;
        $this->container['strip_encoding'] = $data['strip_encoding'] ?? null;
        $this->container['log_header_change'] = $data['log_header_change'] ?? null;
        $this->container['headers'] = $data['headers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getHeaderClientIpAllowableValues();
        if (!is_null($this->container['header_client_ip']) && !in_array($this->container['header_client_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_client_ip', must be one of '%s'",
                $this->container['header_client_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderViaRequestAllowableValues();
        if (!is_null($this->container['header_via_request']) && !in_array($this->container['header_via_request'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_via_request', must be one of '%s'",
                $this->container['header_via_request'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderViaResponseAllowableValues();
        if (!is_null($this->container['header_via_response']) && !in_array($this->container['header_via_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_via_response', must be one of '%s'",
                $this->container['header_via_response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderXForwardedForAllowableValues();
        if (!is_null($this->container['header_x_forwarded_for']) && !in_array($this->container['header_x_forwarded_for'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_x_forwarded_for', must be one of '%s'",
                $this->container['header_x_forwarded_for'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderFrontEndHttpsAllowableValues();
        if (!is_null($this->container['header_front_end_https']) && !in_array($this->container['header_front_end_https'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_front_end_https', must be one of '%s'",
                $this->container['header_front_end_https'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderXAuthenticatedUserAllowableValues();
        if (!is_null($this->container['header_x_authenticated_user']) && !in_array($this->container['header_x_authenticated_user'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_x_authenticated_user', must be one of '%s'",
                $this->container['header_x_authenticated_user'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderXAuthenticatedGroupsAllowableValues();
        if (!is_null($this->container['header_x_authenticated_groups']) && !in_array($this->container['header_x_authenticated_groups'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_x_authenticated_groups', must be one of '%s'",
                $this->container['header_x_authenticated_groups'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStripEncodingAllowableValues();
        if (!is_null($this->container['strip_encoding']) && !in_array($this->container['strip_encoding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strip_encoding', must be one of '%s'",
                $this->container['strip_encoding'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogHeaderChangeAllowableValues();
        if (!is_null($this->container['log_header_change']) && !in_array($this->container['log_header_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_header_change', must be one of '%s'",
                $this->container['log_header_change'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['headers']) && (count($this->container['headers']) > 0)) {
            $invalidProperties[] = "invalid value for 'headers', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject526., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets header_client_ip
     *
     * @return string|null
     */
    public function getHeaderClientIp()
    {
        return $this->container['header_client_ip'];
    }

    /**
     * Sets header_client_ip
     *
     * @param string|null $header_client_ip Action to take on the HTTP client-IP header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderClientIp($header_client_ip)
    {
        $allowedValues = $this->getHeaderClientIpAllowableValues();
        if (!is_null($header_client_ip) && !in_array($header_client_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_client_ip', must be one of '%s'",
                    $header_client_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_client_ip'] = $header_client_ip;

        return $this;
    }

    /**
     * Gets header_via_request
     *
     * @return string|null
     */
    public function getHeaderViaRequest()
    {
        return $this->container['header_via_request'];
    }

    /**
     * Sets header_via_request
     *
     * @param string|null $header_via_request Action to take on the HTTP via header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderViaRequest($header_via_request)
    {
        $allowedValues = $this->getHeaderViaRequestAllowableValues();
        if (!is_null($header_via_request) && !in_array($header_via_request, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_via_request', must be one of '%s'",
                    $header_via_request,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_via_request'] = $header_via_request;

        return $this;
    }

    /**
     * Gets header_via_response
     *
     * @return string|null
     */
    public function getHeaderViaResponse()
    {
        return $this->container['header_via_response'];
    }

    /**
     * Sets header_via_response
     *
     * @param string|null $header_via_response Action to take on the HTTP via header in forwarded responses: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderViaResponse($header_via_response)
    {
        $allowedValues = $this->getHeaderViaResponseAllowableValues();
        if (!is_null($header_via_response) && !in_array($header_via_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_via_response', must be one of '%s'",
                    $header_via_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_via_response'] = $header_via_response;

        return $this;
    }

    /**
     * Gets header_x_forwarded_for
     *
     * @return string|null
     */
    public function getHeaderXForwardedFor()
    {
        return $this->container['header_x_forwarded_for'];
    }

    /**
     * Sets header_x_forwarded_for
     *
     * @param string|null $header_x_forwarded_for Action to take on the HTTP x-forwarded-for header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderXForwardedFor($header_x_forwarded_for)
    {
        $allowedValues = $this->getHeaderXForwardedForAllowableValues();
        if (!is_null($header_x_forwarded_for) && !in_array($header_x_forwarded_for, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_x_forwarded_for', must be one of '%s'",
                    $header_x_forwarded_for,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_x_forwarded_for'] = $header_x_forwarded_for;

        return $this;
    }

    /**
     * Gets header_front_end_https
     *
     * @return string|null
     */
    public function getHeaderFrontEndHttps()
    {
        return $this->container['header_front_end_https'];
    }

    /**
     * Sets header_front_end_https
     *
     * @param string|null $header_front_end_https Action to take on the HTTP front-end-HTTPS header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderFrontEndHttps($header_front_end_https)
    {
        $allowedValues = $this->getHeaderFrontEndHttpsAllowableValues();
        if (!is_null($header_front_end_https) && !in_array($header_front_end_https, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_front_end_https', must be one of '%s'",
                    $header_front_end_https,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_front_end_https'] = $header_front_end_https;

        return $this;
    }

    /**
     * Gets header_x_authenticated_user
     *
     * @return string|null
     */
    public function getHeaderXAuthenticatedUser()
    {
        return $this->container['header_x_authenticated_user'];
    }

    /**
     * Sets header_x_authenticated_user
     *
     * @param string|null $header_x_authenticated_user Action to take on the HTTP x-authenticated-user header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderXAuthenticatedUser($header_x_authenticated_user)
    {
        $allowedValues = $this->getHeaderXAuthenticatedUserAllowableValues();
        if (!is_null($header_x_authenticated_user) && !in_array($header_x_authenticated_user, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_x_authenticated_user', must be one of '%s'",
                    $header_x_authenticated_user,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_x_authenticated_user'] = $header_x_authenticated_user;

        return $this;
    }

    /**
     * Gets header_x_authenticated_groups
     *
     * @return string|null
     */
    public function getHeaderXAuthenticatedGroups()
    {
        return $this->container['header_x_authenticated_groups'];
    }

    /**
     * Sets header_x_authenticated_groups
     *
     * @param string|null $header_x_authenticated_groups Action to take on the HTTP x-authenticated-groups header in forwarded requests: forwards (pass), adds, or removes the HTTP header.    pass:Forward the same HTTP header.    add:Add the HTTP header.    remove:Remove the HTTP header.
     *
     * @return self
     */
    public function setHeaderXAuthenticatedGroups($header_x_authenticated_groups)
    {
        $allowedValues = $this->getHeaderXAuthenticatedGroupsAllowableValues();
        if (!is_null($header_x_authenticated_groups) && !in_array($header_x_authenticated_groups, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_x_authenticated_groups', must be one of '%s'",
                    $header_x_authenticated_groups,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_x_authenticated_groups'] = $header_x_authenticated_groups;

        return $this;
    }

    /**
     * Gets strip_encoding
     *
     * @return string|null
     */
    public function getStripEncoding()
    {
        return $this->container['strip_encoding'];
    }

    /**
     * Sets strip_encoding
     *
     * @param string|null $strip_encoding Enable/disable stripping unsupported encoding from the request header.    enable:Enable stripping of unsupported encoding from the request header.    disable:Disable stripping of unsupported encoding from the request header.
     *
     * @return self
     */
    public function setStripEncoding($strip_encoding)
    {
        $allowedValues = $this->getStripEncodingAllowableValues();
        if (!is_null($strip_encoding) && !in_array($strip_encoding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strip_encoding', must be one of '%s'",
                    $strip_encoding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strip_encoding'] = $strip_encoding;

        return $this;
    }

    /**
     * Gets log_header_change
     *
     * @return string|null
     */
    public function getLogHeaderChange()
    {
        return $this->container['log_header_change'];
    }

    /**
     * Sets log_header_change
     *
     * @param string|null $log_header_change Enable/disable logging HTTP header changes.    enable:Enable Enable/disable logging HTTP header changes.    disable:Disable Enable/disable logging HTTP header changes.
     *
     * @return self
     */
    public function setLogHeaderChange($log_header_change)
    {
        $allowedValues = $this->getLogHeaderChangeAllowableValues();
        if (!is_null($log_header_change) && !in_array($log_header_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_header_change', must be one of '%s'",
                    $log_header_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_header_change'] = $log_header_change;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebProxyProfileNameHeaders[]|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebProxyProfileNameHeaders[]|null $headers Configure HTTP forwarded requests headers.
     *
     * @return self
     */
    public function setHeaders($headers)
    {

        if (!is_null($headers) && (count($headers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $headers when calling InlineObject526., number of items must be less than or equal to 0.');
        }
        $this->container['headers'] = $headers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


