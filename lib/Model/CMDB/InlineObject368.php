<?php
/**
 * InlineObject368
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject368 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject368 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_368';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'type' => 'string',
        'use_metadata_iam' => 'string',
        'ha_status' => 'string',
        'server' => 'string',
        'server_list' => '\Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameServerList[]',
        'server_port' => 'int',
        'username' => 'string',
        'password' => 'string',
        'vcenter_server' => 'string',
        'vcenter_username' => 'string',
        'vcenter_password' => 'string',
        'access_key' => 'string',
        'secret_key' => 'string',
        'region' => 'string',
        'vpc_id' => 'string',
        'tenant_id' => 'string',
        'client_id' => 'string',
        'client_secret' => 'string',
        'subscription_id' => 'string',
        'resource_group' => 'string',
        'login_endpoint' => 'string',
        'resource_url' => 'string',
        'azure_region' => 'string',
        'nic' => '\Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameNic[]',
        'route_table' => '\Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRouteTable[]',
        'user_id' => 'string',
        'compartment_id' => 'string',
        'oci_region' => 'string',
        'oci_region_type' => 'string',
        'oci_cert' => 'string',
        'oci_fingerprint' => 'string',
        'external_ip' => '\Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameExternalIp[]',
        'route' => '\Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRoute1[]',
        'gcp_project' => 'string',
        'service_account' => 'string',
        'private_key' => 'string',
        'secret_token' => 'string',
        'domain' => 'string',
        'group_name' => 'string',
        'api_key' => 'string',
        'compute_generation' => 'int',
        'ibm_region' => 'string',
        'update_interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'type' => null,
        'use_metadata_iam' => null,
        'ha_status' => null,
        'server' => null,
        'server_list' => null,
        'server_port' => null,
        'username' => null,
        'password' => null,
        'vcenter_server' => null,
        'vcenter_username' => null,
        'vcenter_password' => null,
        'access_key' => null,
        'secret_key' => 'password',
        'region' => null,
        'vpc_id' => null,
        'tenant_id' => null,
        'client_id' => null,
        'client_secret' => 'password',
        'subscription_id' => null,
        'resource_group' => null,
        'login_endpoint' => null,
        'resource_url' => null,
        'azure_region' => null,
        'nic' => null,
        'route_table' => null,
        'user_id' => null,
        'compartment_id' => null,
        'oci_region' => null,
        'oci_region_type' => null,
        'oci_cert' => null,
        'oci_fingerprint' => null,
        'external_ip' => null,
        'route' => null,
        'gcp_project' => null,
        'service_account' => null,
        'private_key' => null,
        'secret_token' => null,
        'domain' => null,
        'group_name' => null,
        'api_key' => 'password',
        'compute_generation' => null,
        'ibm_region' => null,
        'update_interval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'type' => 'type',
        'use_metadata_iam' => 'use-metadata-iam',
        'ha_status' => 'ha-status',
        'server' => 'server',
        'server_list' => 'server-list',
        'server_port' => 'server-port',
        'username' => 'username',
        'password' => 'password',
        'vcenter_server' => 'vcenter-server',
        'vcenter_username' => 'vcenter-username',
        'vcenter_password' => 'vcenter-password',
        'access_key' => 'access-key',
        'secret_key' => 'secret-key',
        'region' => 'region',
        'vpc_id' => 'vpc-id',
        'tenant_id' => 'tenant-id',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret',
        'subscription_id' => 'subscription-id',
        'resource_group' => 'resource-group',
        'login_endpoint' => 'login-endpoint',
        'resource_url' => 'resource-url',
        'azure_region' => 'azure-region',
        'nic' => 'nic',
        'route_table' => 'route-table',
        'user_id' => 'user-id',
        'compartment_id' => 'compartment-id',
        'oci_region' => 'oci-region',
        'oci_region_type' => 'oci-region-type',
        'oci_cert' => 'oci-cert',
        'oci_fingerprint' => 'oci-fingerprint',
        'external_ip' => 'external-ip',
        'route' => 'route',
        'gcp_project' => 'gcp-project',
        'service_account' => 'service-account',
        'private_key' => 'private-key',
        'secret_token' => 'secret-token',
        'domain' => 'domain',
        'group_name' => 'group-name',
        'api_key' => 'api-key',
        'compute_generation' => 'compute-generation',
        'ibm_region' => 'ibm-region',
        'update_interval' => 'update-interval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'type' => 'setType',
        'use_metadata_iam' => 'setUseMetadataIam',
        'ha_status' => 'setHaStatus',
        'server' => 'setServer',
        'server_list' => 'setServerList',
        'server_port' => 'setServerPort',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'vcenter_server' => 'setVcenterServer',
        'vcenter_username' => 'setVcenterUsername',
        'vcenter_password' => 'setVcenterPassword',
        'access_key' => 'setAccessKey',
        'secret_key' => 'setSecretKey',
        'region' => 'setRegion',
        'vpc_id' => 'setVpcId',
        'tenant_id' => 'setTenantId',
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'subscription_id' => 'setSubscriptionId',
        'resource_group' => 'setResourceGroup',
        'login_endpoint' => 'setLoginEndpoint',
        'resource_url' => 'setResourceUrl',
        'azure_region' => 'setAzureRegion',
        'nic' => 'setNic',
        'route_table' => 'setRouteTable',
        'user_id' => 'setUserId',
        'compartment_id' => 'setCompartmentId',
        'oci_region' => 'setOciRegion',
        'oci_region_type' => 'setOciRegionType',
        'oci_cert' => 'setOciCert',
        'oci_fingerprint' => 'setOciFingerprint',
        'external_ip' => 'setExternalIp',
        'route' => 'setRoute',
        'gcp_project' => 'setGcpProject',
        'service_account' => 'setServiceAccount',
        'private_key' => 'setPrivateKey',
        'secret_token' => 'setSecretToken',
        'domain' => 'setDomain',
        'group_name' => 'setGroupName',
        'api_key' => 'setApiKey',
        'compute_generation' => 'setComputeGeneration',
        'ibm_region' => 'setIbmRegion',
        'update_interval' => 'setUpdateInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'type' => 'getType',
        'use_metadata_iam' => 'getUseMetadataIam',
        'ha_status' => 'getHaStatus',
        'server' => 'getServer',
        'server_list' => 'getServerList',
        'server_port' => 'getServerPort',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'vcenter_server' => 'getVcenterServer',
        'vcenter_username' => 'getVcenterUsername',
        'vcenter_password' => 'getVcenterPassword',
        'access_key' => 'getAccessKey',
        'secret_key' => 'getSecretKey',
        'region' => 'getRegion',
        'vpc_id' => 'getVpcId',
        'tenant_id' => 'getTenantId',
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'subscription_id' => 'getSubscriptionId',
        'resource_group' => 'getResourceGroup',
        'login_endpoint' => 'getLoginEndpoint',
        'resource_url' => 'getResourceUrl',
        'azure_region' => 'getAzureRegion',
        'nic' => 'getNic',
        'route_table' => 'getRouteTable',
        'user_id' => 'getUserId',
        'compartment_id' => 'getCompartmentId',
        'oci_region' => 'getOciRegion',
        'oci_region_type' => 'getOciRegionType',
        'oci_cert' => 'getOciCert',
        'oci_fingerprint' => 'getOciFingerprint',
        'external_ip' => 'getExternalIp',
        'route' => 'getRoute',
        'gcp_project' => 'getGcpProject',
        'service_account' => 'getServiceAccount',
        'private_key' => 'getPrivateKey',
        'secret_token' => 'getSecretToken',
        'domain' => 'getDomain',
        'group_name' => 'getGroupName',
        'api_key' => 'getApiKey',
        'compute_generation' => 'getComputeGeneration',
        'ibm_region' => 'getIbmRegion',
        'update_interval' => 'getUpdateInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const TYPE_ACI = 'aci';
    const TYPE_ALICLOUD = 'alicloud';
    const TYPE_AWS = 'aws';
    const TYPE_AZURE = 'azure';
    const TYPE_GCP = 'gcp';
    const TYPE_NSX = 'nsx';
    const TYPE_NUAGE = 'nuage';
    const TYPE_OCI = 'oci';
    const TYPE_OPENSTACK = 'openstack';
    const TYPE_KUBERNETES = 'kubernetes';
    const TYPE_VMWARE = 'vmware';
    const TYPE_SEPM = 'sepm';
    const TYPE_ACI_DIRECT = 'aci-direct';
    const TYPE_IBM = 'ibm';
    const USE_METADATA_IAM_DISABLE = 'disable';
    const USE_METADATA_IAM_ENABLE = 'enable';
    const HA_STATUS_DISABLE = 'disable';
    const HA_STATUS_ENABLE = 'enable';
    const AZURE_REGION__GLOBAL = 'global';
    const AZURE_REGION_CHINA = 'china';
    const AZURE_REGION_GERMANY = 'germany';
    const AZURE_REGION_USGOV = 'usgov';
    const AZURE_REGION_LOCAL = 'local';
    const OCI_REGION_TYPE_COMMERCIAL = 'commercial';
    const OCI_REGION_TYPE_GOVERNMENT = 'government';
    const IBM_REGION_US_SOUTH = 'us-south';
    const IBM_REGION_US_EAST = 'us-east';
    const IBM_REGION_GERMANY = 'germany';
    const IBM_REGION_GREAT_BRITAIN = 'great-britain';
    const IBM_REGION_JAPAN = 'japan';
    const IBM_REGION_AUSTRALIA = 'australia';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACI,
            self::TYPE_ALICLOUD,
            self::TYPE_AWS,
            self::TYPE_AZURE,
            self::TYPE_GCP,
            self::TYPE_NSX,
            self::TYPE_NUAGE,
            self::TYPE_OCI,
            self::TYPE_OPENSTACK,
            self::TYPE_KUBERNETES,
            self::TYPE_VMWARE,
            self::TYPE_SEPM,
            self::TYPE_ACI_DIRECT,
            self::TYPE_IBM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseMetadataIamAllowableValues()
    {
        return [
            self::USE_METADATA_IAM_DISABLE,
            self::USE_METADATA_IAM_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaStatusAllowableValues()
    {
        return [
            self::HA_STATUS_DISABLE,
            self::HA_STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAzureRegionAllowableValues()
    {
        return [
            self::AZURE_REGION__GLOBAL,
            self::AZURE_REGION_CHINA,
            self::AZURE_REGION_GERMANY,
            self::AZURE_REGION_USGOV,
            self::AZURE_REGION_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOciRegionTypeAllowableValues()
    {
        return [
            self::OCI_REGION_TYPE_COMMERCIAL,
            self::OCI_REGION_TYPE_GOVERNMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIbmRegionAllowableValues()
    {
        return [
            self::IBM_REGION_US_SOUTH,
            self::IBM_REGION_US_EAST,
            self::IBM_REGION_GERMANY,
            self::IBM_REGION_GREAT_BRITAIN,
            self::IBM_REGION_JAPAN,
            self::IBM_REGION_AUSTRALIA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['use_metadata_iam'] = $data['use_metadata_iam'] ?? null;
        $this->container['ha_status'] = $data['ha_status'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['server_list'] = $data['server_list'] ?? null;
        $this->container['server_port'] = $data['server_port'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['vcenter_server'] = $data['vcenter_server'] ?? null;
        $this->container['vcenter_username'] = $data['vcenter_username'] ?? null;
        $this->container['vcenter_password'] = $data['vcenter_password'] ?? null;
        $this->container['access_key'] = $data['access_key'] ?? null;
        $this->container['secret_key'] = $data['secret_key'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['vpc_id'] = $data['vpc_id'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['client_secret'] = $data['client_secret'] ?? null;
        $this->container['subscription_id'] = $data['subscription_id'] ?? null;
        $this->container['resource_group'] = $data['resource_group'] ?? null;
        $this->container['login_endpoint'] = $data['login_endpoint'] ?? null;
        $this->container['resource_url'] = $data['resource_url'] ?? null;
        $this->container['azure_region'] = $data['azure_region'] ?? null;
        $this->container['nic'] = $data['nic'] ?? null;
        $this->container['route_table'] = $data['route_table'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['compartment_id'] = $data['compartment_id'] ?? null;
        $this->container['oci_region'] = $data['oci_region'] ?? null;
        $this->container['oci_region_type'] = $data['oci_region_type'] ?? null;
        $this->container['oci_cert'] = $data['oci_cert'] ?? null;
        $this->container['oci_fingerprint'] = $data['oci_fingerprint'] ?? null;
        $this->container['external_ip'] = $data['external_ip'] ?? null;
        $this->container['route'] = $data['route'] ?? null;
        $this->container['gcp_project'] = $data['gcp_project'] ?? null;
        $this->container['service_account'] = $data['service_account'] ?? null;
        $this->container['private_key'] = $data['private_key'] ?? null;
        $this->container['secret_token'] = $data['secret_token'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['group_name'] = $data['group_name'] ?? null;
        $this->container['api_key'] = $data['api_key'] ?? null;
        $this->container['compute_generation'] = $data['compute_generation'] ?? null;
        $this->container['ibm_region'] = $data['ibm_region'] ?? null;
        $this->container['update_interval'] = $data['update_interval'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseMetadataIamAllowableValues();
        if (!is_null($this->container['use_metadata_iam']) && !in_array($this->container['use_metadata_iam'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_metadata_iam', must be one of '%s'",
                $this->container['use_metadata_iam'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHaStatusAllowableValues();
        if (!is_null($this->container['ha_status']) && !in_array($this->container['ha_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ha_status', must be one of '%s'",
                $this->container['ha_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 127)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['server_list']) && (count($this->container['server_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'server_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['server_port']) && ($this->container['server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['server_port']) && ($this->container['server_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'server_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 64)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['vcenter_server']) && (mb_strlen($this->container['vcenter_server']) > 127)) {
            $invalidProperties[] = "invalid value for 'vcenter_server', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['vcenter_username']) && (mb_strlen($this->container['vcenter_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'vcenter_username', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['access_key']) && (mb_strlen($this->container['access_key']) > 31)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 31)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['vpc_id']) && (mb_strlen($this->container['vpc_id']) > 31)) {
            $invalidProperties[] = "invalid value for 'vpc_id', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['tenant_id']) && (mb_strlen($this->container['tenant_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'tenant_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) > 63)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['subscription_id']) && (mb_strlen($this->container['subscription_id']) > 63)) {
            $invalidProperties[] = "invalid value for 'subscription_id', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['resource_group']) && (mb_strlen($this->container['resource_group']) > 63)) {
            $invalidProperties[] = "invalid value for 'resource_group', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['login_endpoint']) && (mb_strlen($this->container['login_endpoint']) > 127)) {
            $invalidProperties[] = "invalid value for 'login_endpoint', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['resource_url']) && (mb_strlen($this->container['resource_url']) > 127)) {
            $invalidProperties[] = "invalid value for 'resource_url', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getAzureRegionAllowableValues();
        if (!is_null($this->container['azure_region']) && !in_array($this->container['azure_region'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'azure_region', must be one of '%s'",
                $this->container['azure_region'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nic']) && (count($this->container['nic']) > 0)) {
            $invalidProperties[] = "invalid value for 'nic', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['route_table']) && (count($this->container['route_table']) > 0)) {
            $invalidProperties[] = "invalid value for 'route_table', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['compartment_id']) && (mb_strlen($this->container['compartment_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'compartment_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['oci_region']) && (mb_strlen($this->container['oci_region']) > 31)) {
            $invalidProperties[] = "invalid value for 'oci_region', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getOciRegionTypeAllowableValues();
        if (!is_null($this->container['oci_region_type']) && !in_array($this->container['oci_region_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'oci_region_type', must be one of '%s'",
                $this->container['oci_region_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['oci_cert']) && (mb_strlen($this->container['oci_cert']) > 63)) {
            $invalidProperties[] = "invalid value for 'oci_cert', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['oci_fingerprint']) && (mb_strlen($this->container['oci_fingerprint']) > 63)) {
            $invalidProperties[] = "invalid value for 'oci_fingerprint', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['external_ip']) && (count($this->container['external_ip']) > 0)) {
            $invalidProperties[] = "invalid value for 'external_ip', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['route']) && (count($this->container['route']) > 0)) {
            $invalidProperties[] = "invalid value for 'route', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['gcp_project']) && (mb_strlen($this->container['gcp_project']) > 127)) {
            $invalidProperties[] = "invalid value for 'gcp_project', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['service_account']) && (mb_strlen($this->container['service_account']) > 127)) {
            $invalidProperties[] = "invalid value for 'service_account', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 127)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['group_name']) && (mb_strlen($this->container['group_name']) > 127)) {
            $invalidProperties[] = "invalid value for 'group_name', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['compute_generation']) && ($this->container['compute_generation'] > 2)) {
            $invalidProperties[] = "invalid value for 'compute_generation', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['compute_generation']) && ($this->container['compute_generation'] < 1)) {
            $invalidProperties[] = "invalid value for 'compute_generation', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIbmRegionAllowableValues();
        if (!is_null($this->container['ibm_region']) && !in_array($this->container['ibm_region'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ibm_region', must be one of '%s'",
                $this->container['ibm_region'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['update_interval']) && ($this->container['update_interval'] > 3600)) {
            $invalidProperties[] = "invalid value for 'update_interval', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['update_interval']) && ($this->container['update_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'update_interval', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name SDN connector name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject368., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable connection to the remote SDN connector.    disable:Disable connection to this SDN Connector.    enable:Enable connection to this SDN Connector.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of SDN connector.    aci:Application Centric Infrastructure (ACI).    alicloud:AliCloud Service (ACS).    aws:Amazon Web Services (AWS).    azure:Microsoft Azure.    gcp:Google Cloud Platform (GCP).    nsx:VMware NSX.    nuage:Nuage VSP.    oci:Oracle Cloud Infrastructure.    openstack:OpenStack.    kubernetes:Kubernetes.    vmware:VMware vSphere (vCenter & ESXi).    sepm:Symantec Endpoint Protection Manager.    aci-direct:Application Centric Infrastructure (ACI Direct Connection).    ibm:IBM Cloud Infrastructure.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_metadata_iam
     *
     * @return string|null
     */
    public function getUseMetadataIam()
    {
        return $this->container['use_metadata_iam'];
    }

    /**
     * Sets use_metadata_iam
     *
     * @param string|null $use_metadata_iam Enable/disable use of IAM role from metadata to call API.    disable:Disable using IAM role to call API.    enable:Enable using IAM role to call API.
     *
     * @return self
     */
    public function setUseMetadataIam($use_metadata_iam)
    {
        $allowedValues = $this->getUseMetadataIamAllowableValues();
        if (!is_null($use_metadata_iam) && !in_array($use_metadata_iam, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_metadata_iam', must be one of '%s'",
                    $use_metadata_iam,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_metadata_iam'] = $use_metadata_iam;

        return $this;
    }

    /**
     * Gets ha_status
     *
     * @return string|null
     */
    public function getHaStatus()
    {
        return $this->container['ha_status'];
    }

    /**
     * Sets ha_status
     *
     * @param string|null $ha_status Enable/disable use for FortiGate HA service.    disable:Disable use for FortiGate HA service.    enable:Enable use for FortiGate HA service.
     *
     * @return self
     */
    public function setHaStatus($ha_status)
    {
        $allowedValues = $this->getHaStatusAllowableValues();
        if (!is_null($ha_status) && !in_array($ha_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ha_status', must be one of '%s'",
                    $ha_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha_status'] = $ha_status;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server Server address of the remote SDN connector.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 127)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets server_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameServerList[]|null
     */
    public function getServerList()
    {
        return $this->container['server_list'];
    }

    /**
     * Sets server_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameServerList[]|null $server_list Server address list of the remote SDN connector.
     *
     * @return self
     */
    public function setServerList($server_list)
    {

        if (!is_null($server_list) && (count($server_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $server_list when calling InlineObject368., number of items must be less than or equal to 0.');
        }
        $this->container['server_list'] = $server_list;

        return $this;
    }

    /**
     * Gets server_port
     *
     * @return int|null
     */
    public function getServerPort()
    {
        return $this->container['server_port'];
    }

    /**
     * Sets server_port
     *
     * @param int|null $server_port Port number of the remote SDN connector.
     *
     * @return self
     */
    public function setServerPort($server_port)
    {

        if (!is_null($server_port) && ($server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $server_port when calling InlineObject368., must be smaller than or equal to 65535.');
        }
        if (!is_null($server_port) && ($server_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $server_port when calling InlineObject368., must be bigger than or equal to 0.');
        }

        $this->container['server_port'] = $server_port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username of the remote SDN connector as login credentials.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject368., must be smaller than or equal to 64.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password of the remote SDN connector as login credentials.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets vcenter_server
     *
     * @return string|null
     */
    public function getVcenterServer()
    {
        return $this->container['vcenter_server'];
    }

    /**
     * Sets vcenter_server
     *
     * @param string|null $vcenter_server vCenter server address for NSX quarantine.
     *
     * @return self
     */
    public function setVcenterServer($vcenter_server)
    {
        if (!is_null($vcenter_server) && (mb_strlen($vcenter_server) > 127)) {
            throw new \InvalidArgumentException('invalid length for $vcenter_server when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['vcenter_server'] = $vcenter_server;

        return $this;
    }

    /**
     * Gets vcenter_username
     *
     * @return string|null
     */
    public function getVcenterUsername()
    {
        return $this->container['vcenter_username'];
    }

    /**
     * Sets vcenter_username
     *
     * @param string|null $vcenter_username vCenter server username for NSX quarantine.
     *
     * @return self
     */
    public function setVcenterUsername($vcenter_username)
    {
        if (!is_null($vcenter_username) && (mb_strlen($vcenter_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $vcenter_username when calling InlineObject368., must be smaller than or equal to 64.');
        }

        $this->container['vcenter_username'] = $vcenter_username;

        return $this;
    }

    /**
     * Gets vcenter_password
     *
     * @return string|null
     */
    public function getVcenterPassword()
    {
        return $this->container['vcenter_password'];
    }

    /**
     * Sets vcenter_password
     *
     * @param string|null $vcenter_password vCenter server password for NSX quarantine.
     *
     * @return self
     */
    public function setVcenterPassword($vcenter_password)
    {
        $this->container['vcenter_password'] = $vcenter_password;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key AWS / ACS access key ID.
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {
        if (!is_null($access_key) && (mb_strlen($access_key) > 31)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling InlineObject368., must be smaller than or equal to 31.');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key AWS / ACS secret access key.
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region AWS / ACS region name.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (!is_null($region) && (mb_strlen($region) > 31)) {
            throw new \InvalidArgumentException('invalid length for $region when calling InlineObject368., must be smaller than or equal to 31.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string|null
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string|null $vpc_id AWS VPC ID.
     *
     * @return self
     */
    public function setVpcId($vpc_id)
    {
        if (!is_null($vpc_id) && (mb_strlen($vpc_id) > 31)) {
            throw new \InvalidArgumentException('invalid length for $vpc_id when calling InlineObject368., must be smaller than or equal to 31.');
        }

        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id Tenant ID (directory ID).
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (!is_null($tenant_id) && (mb_strlen($tenant_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Azure client ID (application ID).
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (!is_null($client_id) && (mb_strlen($client_id) > 63)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling InlineObject368., must be smaller than or equal to 63.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret Azure client secret (application key).
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id Azure subscription ID.
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        if (!is_null($subscription_id) && (mb_strlen($subscription_id) > 63)) {
            throw new \InvalidArgumentException('invalid length for $subscription_id when calling InlineObject368., must be smaller than or equal to 63.');
        }

        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets resource_group
     *
     * @return string|null
     */
    public function getResourceGroup()
    {
        return $this->container['resource_group'];
    }

    /**
     * Sets resource_group
     *
     * @param string|null $resource_group Azure resource group.
     *
     * @return self
     */
    public function setResourceGroup($resource_group)
    {
        if (!is_null($resource_group) && (mb_strlen($resource_group) > 63)) {
            throw new \InvalidArgumentException('invalid length for $resource_group when calling InlineObject368., must be smaller than or equal to 63.');
        }

        $this->container['resource_group'] = $resource_group;

        return $this;
    }

    /**
     * Gets login_endpoint
     *
     * @return string|null
     */
    public function getLoginEndpoint()
    {
        return $this->container['login_endpoint'];
    }

    /**
     * Sets login_endpoint
     *
     * @param string|null $login_endpoint Azure Stack login endpoint.
     *
     * @return self
     */
    public function setLoginEndpoint($login_endpoint)
    {
        if (!is_null($login_endpoint) && (mb_strlen($login_endpoint) > 127)) {
            throw new \InvalidArgumentException('invalid length for $login_endpoint when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['login_endpoint'] = $login_endpoint;

        return $this;
    }

    /**
     * Gets resource_url
     *
     * @return string|null
     */
    public function getResourceUrl()
    {
        return $this->container['resource_url'];
    }

    /**
     * Sets resource_url
     *
     * @param string|null $resource_url Azure Stack resource URL.
     *
     * @return self
     */
    public function setResourceUrl($resource_url)
    {
        if (!is_null($resource_url) && (mb_strlen($resource_url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $resource_url when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['resource_url'] = $resource_url;

        return $this;
    }

    /**
     * Gets azure_region
     *
     * @return string|null
     */
    public function getAzureRegion()
    {
        return $this->container['azure_region'];
    }

    /**
     * Sets azure_region
     *
     * @param string|null $azure_region Azure server region.    global:Global Azure Server.    china:China Azure Server.    germany:Germany Azure Server.    usgov:US Government Azure Server.    local:Azure Stack Local Server.
     *
     * @return self
     */
    public function setAzureRegion($azure_region)
    {
        $allowedValues = $this->getAzureRegionAllowableValues();
        if (!is_null($azure_region) && !in_array($azure_region, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'azure_region', must be one of '%s'",
                    $azure_region,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['azure_region'] = $azure_region;

        return $this;
    }

    /**
     * Gets nic
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameNic[]|null
     */
    public function getNic()
    {
        return $this->container['nic'];
    }

    /**
     * Sets nic
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameNic[]|null $nic Configure Azure network interface.
     *
     * @return self
     */
    public function setNic($nic)
    {

        if (!is_null($nic) && (count($nic) > 0)) {
            throw new \InvalidArgumentException('invalid value for $nic when calling InlineObject368., number of items must be less than or equal to 0.');
        }
        $this->container['nic'] = $nic;

        return $this;
    }

    /**
     * Gets route_table
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRouteTable[]|null
     */
    public function getRouteTable()
    {
        return $this->container['route_table'];
    }

    /**
     * Sets route_table
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRouteTable[]|null $route_table Configure Azure route table.
     *
     * @return self
     */
    public function setRouteTable($route_table)
    {

        if (!is_null($route_table) && (count($route_table) > 0)) {
            throw new \InvalidArgumentException('invalid value for $route_table when calling InlineObject368., number of items must be less than or equal to 0.');
        }
        $this->container['route_table'] = $route_table;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id User ID.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (!is_null($user_id) && (mb_strlen($user_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets compartment_id
     *
     * @return string|null
     */
    public function getCompartmentId()
    {
        return $this->container['compartment_id'];
    }

    /**
     * Sets compartment_id
     *
     * @param string|null $compartment_id Compartment ID.
     *
     * @return self
     */
    public function setCompartmentId($compartment_id)
    {
        if (!is_null($compartment_id) && (mb_strlen($compartment_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $compartment_id when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['compartment_id'] = $compartment_id;

        return $this;
    }

    /**
     * Gets oci_region
     *
     * @return string|null
     */
    public function getOciRegion()
    {
        return $this->container['oci_region'];
    }

    /**
     * Sets oci_region
     *
     * @param string|null $oci_region OCI server region.
     *
     * @return self
     */
    public function setOciRegion($oci_region)
    {
        if (!is_null($oci_region) && (mb_strlen($oci_region) > 31)) {
            throw new \InvalidArgumentException('invalid length for $oci_region when calling InlineObject368., must be smaller than or equal to 31.');
        }

        $this->container['oci_region'] = $oci_region;

        return $this;
    }

    /**
     * Gets oci_region_type
     *
     * @return string|null
     */
    public function getOciRegionType()
    {
        return $this->container['oci_region_type'];
    }

    /**
     * Sets oci_region_type
     *
     * @param string|null $oci_region_type OCI region type.    commercial:Commercial region.    government:Government region.
     *
     * @return self
     */
    public function setOciRegionType($oci_region_type)
    {
        $allowedValues = $this->getOciRegionTypeAllowableValues();
        if (!is_null($oci_region_type) && !in_array($oci_region_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'oci_region_type', must be one of '%s'",
                    $oci_region_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['oci_region_type'] = $oci_region_type;

        return $this;
    }

    /**
     * Gets oci_cert
     *
     * @return string|null
     */
    public function getOciCert()
    {
        return $this->container['oci_cert'];
    }

    /**
     * Sets oci_cert
     *
     * @param string|null $oci_cert OCI certificate.
     *
     * @return self
     */
    public function setOciCert($oci_cert)
    {
        if (!is_null($oci_cert) && (mb_strlen($oci_cert) > 63)) {
            throw new \InvalidArgumentException('invalid length for $oci_cert when calling InlineObject368., must be smaller than or equal to 63.');
        }

        $this->container['oci_cert'] = $oci_cert;

        return $this;
    }

    /**
     * Gets oci_fingerprint
     *
     * @return string|null
     */
    public function getOciFingerprint()
    {
        return $this->container['oci_fingerprint'];
    }

    /**
     * Sets oci_fingerprint
     *
     * @param string|null $oci_fingerprint OCI pubkey fingerprint.
     *
     * @return self
     */
    public function setOciFingerprint($oci_fingerprint)
    {
        if (!is_null($oci_fingerprint) && (mb_strlen($oci_fingerprint) > 63)) {
            throw new \InvalidArgumentException('invalid length for $oci_fingerprint when calling InlineObject368., must be smaller than or equal to 63.');
        }

        $this->container['oci_fingerprint'] = $oci_fingerprint;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameExternalIp[]|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameExternalIp[]|null $external_ip Configure GCP external IP.
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {

        if (!is_null($external_ip) && (count($external_ip) > 0)) {
            throw new \InvalidArgumentException('invalid value for $external_ip when calling InlineObject368., number of items must be less than or equal to 0.');
        }
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRoute1[]|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdnConnectorNameRoute1[]|null $route Configure GCP route.
     *
     * @return self
     */
    public function setRoute($route)
    {

        if (!is_null($route) && (count($route) > 0)) {
            throw new \InvalidArgumentException('invalid value for $route when calling InlineObject368., number of items must be less than or equal to 0.');
        }
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets gcp_project
     *
     * @return string|null
     */
    public function getGcpProject()
    {
        return $this->container['gcp_project'];
    }

    /**
     * Sets gcp_project
     *
     * @param string|null $gcp_project GCP project name.
     *
     * @return self
     */
    public function setGcpProject($gcp_project)
    {
        if (!is_null($gcp_project) && (mb_strlen($gcp_project) > 127)) {
            throw new \InvalidArgumentException('invalid length for $gcp_project when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['gcp_project'] = $gcp_project;

        return $this;
    }

    /**
     * Gets service_account
     *
     * @return string|null
     */
    public function getServiceAccount()
    {
        return $this->container['service_account'];
    }

    /**
     * Sets service_account
     *
     * @param string|null $service_account GCP service account email.
     *
     * @return self
     */
    public function setServiceAccount($service_account)
    {
        if (!is_null($service_account) && (mb_strlen($service_account) > 127)) {
            throw new \InvalidArgumentException('invalid length for $service_account when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['service_account'] = $service_account;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string|null
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key Private key of GCP service account.
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets secret_token
     *
     * @return string|null
     */
    public function getSecretToken()
    {
        return $this->container['secret_token'];
    }

    /**
     * Sets secret_token
     *
     * @param string|null $secret_token Secret token of Kubernetes service account.
     *
     * @return self
     */
    public function setSecretToken($secret_token)
    {
        $this->container['secret_token'] = $secret_token;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain name.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 127)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name Group name of computers.
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (!is_null($group_name) && (mb_strlen($group_name) > 127)) {
            throw new \InvalidArgumentException('invalid length for $group_name when calling InlineObject368., must be smaller than or equal to 127.');
        }

        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key IBM cloud API key or service ID API key.
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets compute_generation
     *
     * @return int|null
     */
    public function getComputeGeneration()
    {
        return $this->container['compute_generation'];
    }

    /**
     * Sets compute_generation
     *
     * @param int|null $compute_generation Compute generation for IBM cloud infrastructure.
     *
     * @return self
     */
    public function setComputeGeneration($compute_generation)
    {

        if (!is_null($compute_generation) && ($compute_generation > 2)) {
            throw new \InvalidArgumentException('invalid value for $compute_generation when calling InlineObject368., must be smaller than or equal to 2.');
        }
        if (!is_null($compute_generation) && ($compute_generation < 1)) {
            throw new \InvalidArgumentException('invalid value for $compute_generation when calling InlineObject368., must be bigger than or equal to 1.');
        }

        $this->container['compute_generation'] = $compute_generation;

        return $this;
    }

    /**
     * Gets ibm_region
     *
     * @return string|null
     */
    public function getIbmRegion()
    {
        return $this->container['ibm_region'];
    }

    /**
     * Sets ibm_region
     *
     * @param string|null $ibm_region IBM cloud region name.    us-south:US South (Dallas) Server.    us-east:US East (Washington DC) Server.    germany:Germany (Frankfurt) Server.    great-britain:Great Britain (London) Server.    japan:Japan (Tokyo) Server. (GEN1 support only)    australia:Australia (Sydney) Server. (GEN1 support only)
     *
     * @return self
     */
    public function setIbmRegion($ibm_region)
    {
        $allowedValues = $this->getIbmRegionAllowableValues();
        if (!is_null($ibm_region) && !in_array($ibm_region, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ibm_region', must be one of '%s'",
                    $ibm_region,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ibm_region'] = $ibm_region;

        return $this;
    }

    /**
     * Gets update_interval
     *
     * @return int|null
     */
    public function getUpdateInterval()
    {
        return $this->container['update_interval'];
    }

    /**
     * Sets update_interval
     *
     * @param int|null $update_interval Dynamic object update interval (30 - 3600 sec, default = 60, 0 = disabled).
     *
     * @return self
     */
    public function setUpdateInterval($update_interval)
    {

        if (!is_null($update_interval) && ($update_interval > 3600)) {
            throw new \InvalidArgumentException('invalid value for $update_interval when calling InlineObject368., must be smaller than or equal to 3600.');
        }
        if (!is_null($update_interval) && ($update_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $update_interval when calling InlineObject368., must be bigger than or equal to 0.');
        }

        $this->container['update_interval'] = $update_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


