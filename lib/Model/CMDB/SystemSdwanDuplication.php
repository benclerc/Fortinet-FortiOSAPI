<?php
/**
 * SystemSdwanDuplication
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanDuplication Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanDuplication implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_duplication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'service_id' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanServiceId[]',
        'srcaddr' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]',
        'dstaddr' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]',
        'srcaddr6' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]',
        'dstaddr6' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]',
        'srcintf' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]',
        'dstintf' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]',
        'service' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanService1[]',
        'packet_duplication' => 'string',
        'packet_de_duplication' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'service_id' => null,
        'srcaddr' => null,
        'dstaddr' => null,
        'srcaddr6' => null,
        'dstaddr6' => null,
        'srcintf' => null,
        'dstintf' => null,
        'service' => null,
        'packet_duplication' => null,
        'packet_de_duplication' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'service_id' => 'service-id',
        'srcaddr' => 'srcaddr',
        'dstaddr' => 'dstaddr',
        'srcaddr6' => 'srcaddr6',
        'dstaddr6' => 'dstaddr6',
        'srcintf' => 'srcintf',
        'dstintf' => 'dstintf',
        'service' => 'service',
        'packet_duplication' => 'packet-duplication',
        'packet_de_duplication' => 'packet-de-duplication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'service_id' => 'setServiceId',
        'srcaddr' => 'setSrcaddr',
        'dstaddr' => 'setDstaddr',
        'srcaddr6' => 'setSrcaddr6',
        'dstaddr6' => 'setDstaddr6',
        'srcintf' => 'setSrcintf',
        'dstintf' => 'setDstintf',
        'service' => 'setService',
        'packet_duplication' => 'setPacketDuplication',
        'packet_de_duplication' => 'setPacketDeDuplication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'service_id' => 'getServiceId',
        'srcaddr' => 'getSrcaddr',
        'dstaddr' => 'getDstaddr',
        'srcaddr6' => 'getSrcaddr6',
        'dstaddr6' => 'getDstaddr6',
        'srcintf' => 'getSrcintf',
        'dstintf' => 'getDstintf',
        'service' => 'getService',
        'packet_duplication' => 'getPacketDuplication',
        'packet_de_duplication' => 'getPacketDeDuplication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PACKET_DUPLICATION_DISABLE = 'disable';
    const PACKET_DUPLICATION_FORCE = 'force';
    const PACKET_DUPLICATION_ON_DEMAND = 'on-demand';
    const PACKET_DE_DUPLICATION_ENABLE = 'enable';
    const PACKET_DE_DUPLICATION_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPacketDuplicationAllowableValues()
    {
        return [
            self::PACKET_DUPLICATION_DISABLE,
            self::PACKET_DUPLICATION_FORCE,
            self::PACKET_DUPLICATION_ON_DEMAND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPacketDeDuplicationAllowableValues()
    {
        return [
            self::PACKET_DE_DUPLICATION_ENABLE,
            self::PACKET_DE_DUPLICATION_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['service_id'] = $data['service_id'] ?? null;
        $this->container['srcaddr'] = $data['srcaddr'] ?? null;
        $this->container['dstaddr'] = $data['dstaddr'] ?? null;
        $this->container['srcaddr6'] = $data['srcaddr6'] ?? null;
        $this->container['dstaddr6'] = $data['dstaddr6'] ?? null;
        $this->container['srcintf'] = $data['srcintf'] ?? null;
        $this->container['dstintf'] = $data['dstintf'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['packet_duplication'] = $data['packet_duplication'] ?? null;
        $this->container['packet_de_duplication'] = $data['packet_de_duplication'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 255)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['service_id']) && (count($this->container['service_id']) > 0)) {
            $invalidProperties[] = "invalid value for 'service_id', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['srcaddr']) && (count($this->container['srcaddr']) > 0)) {
            $invalidProperties[] = "invalid value for 'srcaddr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dstaddr']) && (count($this->container['dstaddr']) > 0)) {
            $invalidProperties[] = "invalid value for 'dstaddr', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['srcaddr6']) && (count($this->container['srcaddr6']) > 0)) {
            $invalidProperties[] = "invalid value for 'srcaddr6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dstaddr6']) && (count($this->container['dstaddr6']) > 0)) {
            $invalidProperties[] = "invalid value for 'dstaddr6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['srcintf']) && (count($this->container['srcintf']) > 0)) {
            $invalidProperties[] = "invalid value for 'srcintf', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dstintf']) && (count($this->container['dstintf']) > 0)) {
            $invalidProperties[] = "invalid value for 'dstintf', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['service']) && (count($this->container['service']) > 0)) {
            $invalidProperties[] = "invalid value for 'service', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getPacketDuplicationAllowableValues();
        if (!is_null($this->container['packet_duplication']) && !in_array($this->container['packet_duplication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packet_duplication', must be one of '%s'",
                $this->container['packet_duplication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPacketDeDuplicationAllowableValues();
        if (!is_null($this->container['packet_de_duplication']) && !in_array($this->container['packet_de_duplication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packet_de_duplication', must be one of '%s'",
                $this->container['packet_de_duplication'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Duplication rule ID (1 - 255).
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 255)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanDuplication., must be smaller than or equal to 255.');
        }
        if (!is_null($id) && ($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemSdwanDuplication., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanServiceId[]|null
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanServiceId[]|null $service_id SD-WAN service rule ID list.
     *
     * @return self
     */
    public function setServiceId($service_id)
    {

        if (!is_null($service_id) && (count($service_id) > 0)) {
            throw new \InvalidArgumentException('invalid value for $service_id when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets srcaddr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null
     */
    public function getSrcaddr()
    {
        return $this->container['srcaddr'];
    }

    /**
     * Sets srcaddr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null $srcaddr Source address or address group names.
     *
     * @return self
     */
    public function setSrcaddr($srcaddr)
    {

        if (!is_null($srcaddr) && (count($srcaddr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $srcaddr when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['srcaddr'] = $srcaddr;

        return $this;
    }

    /**
     * Gets dstaddr
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null
     */
    public function getDstaddr()
    {
        return $this->container['dstaddr'];
    }

    /**
     * Sets dstaddr
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst[]|null $dstaddr Destination address or address group names.
     *
     * @return self
     */
    public function setDstaddr($dstaddr)
    {

        if (!is_null($dstaddr) && (count($dstaddr) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dstaddr when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['dstaddr'] = $dstaddr;

        return $this;
    }

    /**
     * Gets srcaddr6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null
     */
    public function getSrcaddr6()
    {
        return $this->container['srcaddr6'];
    }

    /**
     * Sets srcaddr6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null $srcaddr6 Source address6 or address6 group names.
     *
     * @return self
     */
    public function setSrcaddr6($srcaddr6)
    {

        if (!is_null($srcaddr6) && (count($srcaddr6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $srcaddr6 when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['srcaddr6'] = $srcaddr6;

        return $this;
    }

    /**
     * Gets dstaddr6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null
     */
    public function getDstaddr6()
    {
        return $this->container['dstaddr6'];
    }

    /**
     * Sets dstaddr6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDst6[]|null $dstaddr6 Destination address6 or address6 group names.
     *
     * @return self
     */
    public function setDstaddr6($dstaddr6)
    {

        if (!is_null($dstaddr6) && (count($dstaddr6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dstaddr6 when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['dstaddr6'] = $dstaddr6;

        return $this;
    }

    /**
     * Gets srcintf
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]|null
     */
    public function getSrcintf()
    {
        return $this->container['srcintf'];
    }

    /**
     * Sets srcintf
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]|null $srcintf Incoming (ingress) interfaces or zones.
     *
     * @return self
     */
    public function setSrcintf($srcintf)
    {

        if (!is_null($srcintf) && (count($srcintf) > 0)) {
            throw new \InvalidArgumentException('invalid value for $srcintf when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['srcintf'] = $srcintf;

        return $this;
    }

    /**
     * Gets dstintf
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]|null
     */
    public function getDstintf()
    {
        return $this->container['dstintf'];
    }

    /**
     * Sets dstintf
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanSrcintf[]|null $dstintf Outgoing (egress) interfaces or zones.
     *
     * @return self
     */
    public function setDstintf($dstintf)
    {

        if (!is_null($dstintf) && (count($dstintf) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dstintf when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['dstintf'] = $dstintf;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanService1[]|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanService1[]|null $service Service and service group name.
     *
     * @return self
     */
    public function setService($service)
    {

        if (!is_null($service) && (count($service) > 0)) {
            throw new \InvalidArgumentException('invalid value for $service when calling SystemSdwanDuplication., number of items must be less than or equal to 0.');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets packet_duplication
     *
     * @return string|null
     */
    public function getPacketDuplication()
    {
        return $this->container['packet_duplication'];
    }

    /**
     * Sets packet_duplication
     *
     * @param string|null $packet_duplication Configure packet duplication method.    disable:Disable packet duplication.    force:Duplicate packets across all interface members of the SD-WAN zone.    on-demand:Duplicate packets across all interface members of the SD-WAN zone based on the link quality.
     *
     * @return self
     */
    public function setPacketDuplication($packet_duplication)
    {
        $allowedValues = $this->getPacketDuplicationAllowableValues();
        if (!is_null($packet_duplication) && !in_array($packet_duplication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packet_duplication', must be one of '%s'",
                    $packet_duplication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packet_duplication'] = $packet_duplication;

        return $this;
    }

    /**
     * Gets packet_de_duplication
     *
     * @return string|null
     */
    public function getPacketDeDuplication()
    {
        return $this->container['packet_de_duplication'];
    }

    /**
     * Sets packet_de_duplication
     *
     * @param string|null $packet_de_duplication Enable/disable discarding of packets that have been duplicated.    enable:Enable discarding of packets that have been duplicated.    disable:Disable discarding of packets that have been duplicated.
     *
     * @return self
     */
    public function setPacketDeDuplication($packet_de_duplication)
    {
        $allowedValues = $this->getPacketDeDuplicationAllowableValues();
        if (!is_null($packet_de_duplication) && !in_array($packet_de_duplication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packet_de_duplication', must be one of '%s'",
                    $packet_de_duplication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packet_de_duplication'] = $packet_de_duplication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


