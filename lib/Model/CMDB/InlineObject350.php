<?php
/**
 * InlineObject350
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject350 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject350 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_350';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'address' => 'string',
        'device' => 'string',
        'interface' => 'string',
        'multiple' => 'string',
        'color' => 'int',
        'tags' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTags[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'address' => null,
        'device' => null,
        'interface' => null,
        'multiple' => null,
        'color' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'address' => 'address',
        'device' => 'device',
        'interface' => 'interface',
        'multiple' => 'multiple',
        'color' => 'color',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'address' => 'setAddress',
        'device' => 'setDevice',
        'interface' => 'setInterface',
        'multiple' => 'setMultiple',
        'color' => 'setColor',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'address' => 'getAddress',
        'device' => 'getDevice',
        'interface' => 'getInterface',
        'multiple' => 'getMultiple',
        'color' => 'getColor',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDRESS_DISABLE = 'disable';
    const ADDRESS_MANDATORY = 'mandatory';
    const ADDRESS_OPTIONAL = 'optional';
    const DEVICE_DISABLE = 'disable';
    const DEVICE_MANDATORY = 'mandatory';
    const DEVICE_OPTIONAL = 'optional';
    const MODEL_INTERFACE_DISABLE = 'disable';
    const MODEL_INTERFACE_MANDATORY = 'mandatory';
    const MODEL_INTERFACE_OPTIONAL = 'optional';
    const MULTIPLE_ENABLE = 'enable';
    const MULTIPLE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressAllowableValues()
    {
        return [
            self::ADDRESS_DISABLE,
            self::ADDRESS_MANDATORY,
            self::ADDRESS_OPTIONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceAllowableValues()
    {
        return [
            self::DEVICE_DISABLE,
            self::DEVICE_MANDATORY,
            self::DEVICE_OPTIONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceAllowableValues()
    {
        return [
            self::MODEL_INTERFACE_DISABLE,
            self::MODEL_INTERFACE_MANDATORY,
            self::MODEL_INTERFACE_OPTIONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultipleAllowableValues()
    {
        return [
            self::MULTIPLE_ENABLE,
            self::MULTIPLE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = $data['category'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['multiple'] = $data['multiple'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['category']) && (mb_strlen($this->container['category']) > 63)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAddressAllowableValues();
        if (!is_null($this->container['address']) && !in_array($this->container['address'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'address', must be one of '%s'",
                $this->container['address'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceAllowableValues();
        if (!is_null($this->container['device']) && !in_array($this->container['device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device', must be one of '%s'",
                $this->container['device'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterfaceAllowableValues();
        if (!is_null($this->container['interface']) && !in_array($this->container['interface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface', must be one of '%s'",
                $this->container['interface'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMultipleAllowableValues();
        if (!is_null($this->container['multiple']) && !in_array($this->container['multiple'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multiple', must be one of '%s'",
                $this->container['multiple'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['color']) && ($this->container['color'] > 32)) {
            $invalidProperties[] = "invalid value for 'color', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['color']) && ($this->container['color'] < 0)) {
            $invalidProperties[] = "invalid value for 'color', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tags']) && (count($this->container['tags']) > 0)) {
            $invalidProperties[] = "invalid value for 'tags', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Tag Category.
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (!is_null($category) && (mb_strlen($category) > 63)) {
            throw new \InvalidArgumentException('invalid length for $category when calling InlineObject350., must be smaller than or equal to 63.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address.    disable:Disable.    mandatory:Mandatory.    optional:Optional.
     *
     * @return self
     */
    public function setAddress($address)
    {
        $allowedValues = $this->getAddressAllowableValues();
        if (!is_null($address) && !in_array($address, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'address', must be one of '%s'",
                    $address,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string|null $device Device.    disable:Disable.    mandatory:Mandatory.    optional:Optional.
     *
     * @return self
     */
    public function setDevice($device)
    {
        $allowedValues = $this->getDeviceAllowableValues();
        if (!is_null($device) && !in_array($device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device', must be one of '%s'",
                    $device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Interface.    disable:Disable.    mandatory:Mandatory.    optional:Optional.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        $allowedValues = $this->getInterfaceAllowableValues();
        if (!is_null($interface) && !in_array($interface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface', must be one of '%s'",
                    $interface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets multiple
     *
     * @return string|null
     */
    public function getMultiple()
    {
        return $this->container['multiple'];
    }

    /**
     * Sets multiple
     *
     * @param string|null $multiple Allow multiple tag selection.    enable:Enable multi-tagging.    disable:Disable multi-tagging.
     *
     * @return self
     */
    public function setMultiple($multiple)
    {
        $allowedValues = $this->getMultipleAllowableValues();
        if (!is_null($multiple) && !in_array($multiple, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multiple', must be one of '%s'",
                    $multiple,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multiple'] = $multiple;

        return $this;
    }

    /**
     * Gets color
     *
     * @return int|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param int|null $color Color of icon on the GUI.
     *
     * @return self
     */
    public function setColor($color)
    {

        if (!is_null($color) && ($color > 32)) {
            throw new \InvalidArgumentException('invalid value for $color when calling InlineObject350., must be smaller than or equal to 32.');
        }
        if (!is_null($color) && ($color < 0)) {
            throw new \InvalidArgumentException('invalid value for $color when calling InlineObject350., must be bigger than or equal to 0.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTags[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTags[]|null $tags Tags.
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (!is_null($tags) && (count($tags) > 0)) {
            throw new \InvalidArgumentException('invalid value for $tags when calling InlineObject350., number of items must be less than or equal to 0.');
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


