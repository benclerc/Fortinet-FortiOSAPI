<?php
/**
 * InlineObject192
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject192 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject192 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_192';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'security_mode' => 'string',
        'user_group' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]',
        'mac_auth_bypass' => 'string',
        'open_auth' => 'string',
        'eap_passthru' => 'string',
        'eap_auto_untagged_vlans' => 'string',
        'guest_vlan' => 'string',
        'guest_vlan_id' => 'string',
        'guest_auth_delay' => 'int',
        'auth_fail_vlan' => 'string',
        'auth_fail_vlan_id' => 'string',
        'framevid_apply' => 'string',
        'radius_timeout_overwrite' => 'string',
        'policy_type' => 'string',
        'authserver_timeout_period' => 'int',
        'authserver_timeout_vlan' => 'string',
        'authserver_timeout_vlanid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'security_mode' => null,
        'user_group' => null,
        'mac_auth_bypass' => null,
        'open_auth' => null,
        'eap_passthru' => null,
        'eap_auto_untagged_vlans' => null,
        'guest_vlan' => null,
        'guest_vlan_id' => null,
        'guest_auth_delay' => null,
        'auth_fail_vlan' => null,
        'auth_fail_vlan_id' => null,
        'framevid_apply' => null,
        'radius_timeout_overwrite' => null,
        'policy_type' => null,
        'authserver_timeout_period' => null,
        'authserver_timeout_vlan' => null,
        'authserver_timeout_vlanid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'security_mode' => 'security-mode',
        'user_group' => 'user-group',
        'mac_auth_bypass' => 'mac-auth-bypass',
        'open_auth' => 'open-auth',
        'eap_passthru' => 'eap-passthru',
        'eap_auto_untagged_vlans' => 'eap-auto-untagged-vlans',
        'guest_vlan' => 'guest-vlan',
        'guest_vlan_id' => 'guest-vlan-id',
        'guest_auth_delay' => 'guest-auth-delay',
        'auth_fail_vlan' => 'auth-fail-vlan',
        'auth_fail_vlan_id' => 'auth-fail-vlan-id',
        'framevid_apply' => 'framevid-apply',
        'radius_timeout_overwrite' => 'radius-timeout-overwrite',
        'policy_type' => 'policy-type',
        'authserver_timeout_period' => 'authserver-timeout-period',
        'authserver_timeout_vlan' => 'authserver-timeout-vlan',
        'authserver_timeout_vlanid' => 'authserver-timeout-vlanid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'security_mode' => 'setSecurityMode',
        'user_group' => 'setUserGroup',
        'mac_auth_bypass' => 'setMacAuthBypass',
        'open_auth' => 'setOpenAuth',
        'eap_passthru' => 'setEapPassthru',
        'eap_auto_untagged_vlans' => 'setEapAutoUntaggedVlans',
        'guest_vlan' => 'setGuestVlan',
        'guest_vlan_id' => 'setGuestVlanId',
        'guest_auth_delay' => 'setGuestAuthDelay',
        'auth_fail_vlan' => 'setAuthFailVlan',
        'auth_fail_vlan_id' => 'setAuthFailVlanId',
        'framevid_apply' => 'setFramevidApply',
        'radius_timeout_overwrite' => 'setRadiusTimeoutOverwrite',
        'policy_type' => 'setPolicyType',
        'authserver_timeout_period' => 'setAuthserverTimeoutPeriod',
        'authserver_timeout_vlan' => 'setAuthserverTimeoutVlan',
        'authserver_timeout_vlanid' => 'setAuthserverTimeoutVlanid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'security_mode' => 'getSecurityMode',
        'user_group' => 'getUserGroup',
        'mac_auth_bypass' => 'getMacAuthBypass',
        'open_auth' => 'getOpenAuth',
        'eap_passthru' => 'getEapPassthru',
        'eap_auto_untagged_vlans' => 'getEapAutoUntaggedVlans',
        'guest_vlan' => 'getGuestVlan',
        'guest_vlan_id' => 'getGuestVlanId',
        'guest_auth_delay' => 'getGuestAuthDelay',
        'auth_fail_vlan' => 'getAuthFailVlan',
        'auth_fail_vlan_id' => 'getAuthFailVlanId',
        'framevid_apply' => 'getFramevidApply',
        'radius_timeout_overwrite' => 'getRadiusTimeoutOverwrite',
        'policy_type' => 'getPolicyType',
        'authserver_timeout_period' => 'getAuthserverTimeoutPeriod',
        'authserver_timeout_vlan' => 'getAuthserverTimeoutVlan',
        'authserver_timeout_vlanid' => 'getAuthserverTimeoutVlanid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SECURITY_MODE__1_X = '802.1X';
    const SECURITY_MODE__1_X_MAC_BASED = '802.1X-mac-based';
    const MAC_AUTH_BYPASS_DISABLE = 'disable';
    const MAC_AUTH_BYPASS_ENABLE = 'enable';
    const OPEN_AUTH_DISABLE = 'disable';
    const OPEN_AUTH_ENABLE = 'enable';
    const EAP_PASSTHRU_DISABLE = 'disable';
    const EAP_PASSTHRU_ENABLE = 'enable';
    const EAP_AUTO_UNTAGGED_VLANS_DISABLE = 'disable';
    const EAP_AUTO_UNTAGGED_VLANS_ENABLE = 'enable';
    const GUEST_VLAN_DISABLE = 'disable';
    const GUEST_VLAN_ENABLE = 'enable';
    const AUTH_FAIL_VLAN_DISABLE = 'disable';
    const AUTH_FAIL_VLAN_ENABLE = 'enable';
    const FRAMEVID_APPLY_DISABLE = 'disable';
    const FRAMEVID_APPLY_ENABLE = 'enable';
    const RADIUS_TIMEOUT_OVERWRITE_DISABLE = 'disable';
    const RADIUS_TIMEOUT_OVERWRITE_ENABLE = 'enable';
    const POLICY_TYPE__802_1_X = '802.1X';
    const AUTHSERVER_TIMEOUT_VLAN_DISABLE = 'disable';
    const AUTHSERVER_TIMEOUT_VLAN_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityModeAllowableValues()
    {
        return [
            self::SECURITY_MODE__1_X,
            self::SECURITY_MODE__1_X_MAC_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacAuthBypassAllowableValues()
    {
        return [
            self::MAC_AUTH_BYPASS_DISABLE,
            self::MAC_AUTH_BYPASS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenAuthAllowableValues()
    {
        return [
            self::OPEN_AUTH_DISABLE,
            self::OPEN_AUTH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapPassthruAllowableValues()
    {
        return [
            self::EAP_PASSTHRU_DISABLE,
            self::EAP_PASSTHRU_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapAutoUntaggedVlansAllowableValues()
    {
        return [
            self::EAP_AUTO_UNTAGGED_VLANS_DISABLE,
            self::EAP_AUTO_UNTAGGED_VLANS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuestVlanAllowableValues()
    {
        return [
            self::GUEST_VLAN_DISABLE,
            self::GUEST_VLAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthFailVlanAllowableValues()
    {
        return [
            self::AUTH_FAIL_VLAN_DISABLE,
            self::AUTH_FAIL_VLAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFramevidApplyAllowableValues()
    {
        return [
            self::FRAMEVID_APPLY_DISABLE,
            self::FRAMEVID_APPLY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadiusTimeoutOverwriteAllowableValues()
    {
        return [
            self::RADIUS_TIMEOUT_OVERWRITE_DISABLE,
            self::RADIUS_TIMEOUT_OVERWRITE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyTypeAllowableValues()
    {
        return [
            self::POLICY_TYPE__802_1_X,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthserverTimeoutVlanAllowableValues()
    {
        return [
            self::AUTHSERVER_TIMEOUT_VLAN_DISABLE,
            self::AUTHSERVER_TIMEOUT_VLAN_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['user_group'] = $data['user_group'] ?? null;
        $this->container['mac_auth_bypass'] = $data['mac_auth_bypass'] ?? null;
        $this->container['open_auth'] = $data['open_auth'] ?? null;
        $this->container['eap_passthru'] = $data['eap_passthru'] ?? null;
        $this->container['eap_auto_untagged_vlans'] = $data['eap_auto_untagged_vlans'] ?? null;
        $this->container['guest_vlan'] = $data['guest_vlan'] ?? null;
        $this->container['guest_vlan_id'] = $data['guest_vlan_id'] ?? null;
        $this->container['guest_auth_delay'] = $data['guest_auth_delay'] ?? null;
        $this->container['auth_fail_vlan'] = $data['auth_fail_vlan'] ?? null;
        $this->container['auth_fail_vlan_id'] = $data['auth_fail_vlan_id'] ?? null;
        $this->container['framevid_apply'] = $data['framevid_apply'] ?? null;
        $this->container['radius_timeout_overwrite'] = $data['radius_timeout_overwrite'] ?? null;
        $this->container['policy_type'] = $data['policy_type'] ?? null;
        $this->container['authserver_timeout_period'] = $data['authserver_timeout_period'] ?? null;
        $this->container['authserver_timeout_vlan'] = $data['authserver_timeout_vlan'] ?? null;
        $this->container['authserver_timeout_vlanid'] = $data['authserver_timeout_vlanid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 31)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($this->container['security_mode']) && !in_array($this->container['security_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mode', must be one of '%s'",
                $this->container['security_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['user_group']) && (count($this->container['user_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'user_group', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getMacAuthBypassAllowableValues();
        if (!is_null($this->container['mac_auth_bypass']) && !in_array($this->container['mac_auth_bypass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_auth_bypass', must be one of '%s'",
                $this->container['mac_auth_bypass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenAuthAllowableValues();
        if (!is_null($this->container['open_auth']) && !in_array($this->container['open_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'open_auth', must be one of '%s'",
                $this->container['open_auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEapPassthruAllowableValues();
        if (!is_null($this->container['eap_passthru']) && !in_array($this->container['eap_passthru'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap_passthru', must be one of '%s'",
                $this->container['eap_passthru'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEapAutoUntaggedVlansAllowableValues();
        if (!is_null($this->container['eap_auto_untagged_vlans']) && !in_array($this->container['eap_auto_untagged_vlans'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap_auto_untagged_vlans', must be one of '%s'",
                $this->container['eap_auto_untagged_vlans'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuestVlanAllowableValues();
        if (!is_null($this->container['guest_vlan']) && !in_array($this->container['guest_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'guest_vlan', must be one of '%s'",
                $this->container['guest_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['guest_vlan_id']) && (mb_strlen($this->container['guest_vlan_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'guest_vlan_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['guest_auth_delay']) && ($this->container['guest_auth_delay'] > 900)) {
            $invalidProperties[] = "invalid value for 'guest_auth_delay', must be smaller than or equal to 900.";
        }

        if (!is_null($this->container['guest_auth_delay']) && ($this->container['guest_auth_delay'] < 1)) {
            $invalidProperties[] = "invalid value for 'guest_auth_delay', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthFailVlanAllowableValues();
        if (!is_null($this->container['auth_fail_vlan']) && !in_array($this->container['auth_fail_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_fail_vlan', must be one of '%s'",
                $this->container['auth_fail_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_fail_vlan_id']) && (mb_strlen($this->container['auth_fail_vlan_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'auth_fail_vlan_id', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getFramevidApplyAllowableValues();
        if (!is_null($this->container['framevid_apply']) && !in_array($this->container['framevid_apply'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'framevid_apply', must be one of '%s'",
                $this->container['framevid_apply'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRadiusTimeoutOverwriteAllowableValues();
        if (!is_null($this->container['radius_timeout_overwrite']) && !in_array($this->container['radius_timeout_overwrite'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'radius_timeout_overwrite', must be one of '%s'",
                $this->container['radius_timeout_overwrite'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPolicyTypeAllowableValues();
        if (!is_null($this->container['policy_type']) && !in_array($this->container['policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'policy_type', must be one of '%s'",
                $this->container['policy_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authserver_timeout_period']) && ($this->container['authserver_timeout_period'] > 15)) {
            $invalidProperties[] = "invalid value for 'authserver_timeout_period', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['authserver_timeout_period']) && ($this->container['authserver_timeout_period'] < 3)) {
            $invalidProperties[] = "invalid value for 'authserver_timeout_period', must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getAuthserverTimeoutVlanAllowableValues();
        if (!is_null($this->container['authserver_timeout_vlan']) && !in_array($this->container['authserver_timeout_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authserver_timeout_vlan', must be one of '%s'",
                $this->container['authserver_timeout_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authserver_timeout_vlanid']) && (mb_strlen($this->container['authserver_timeout_vlanid']) > 15)) {
            $invalidProperties[] = "invalid value for 'authserver_timeout_vlanid', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Policy name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 31)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject192., must be smaller than or equal to 31.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode Port or MAC based 802.1X security mode.    802.1X:802.1X port based authentication.    802.1X-mac-based:802.1X MAC based authentication.
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($security_mode) && !in_array($security_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mode', must be one of '%s'",
                    $security_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets user_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]|null
     */
    public function getUserGroup()
    {
        return $this->container['user_group'];
    }

    /**
     * Sets user_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerSecurityPolicy8021XNameUserGroup[]|null $user_group Name of user-group to assign to this MAC Authentication Bypass (MAB) policy.
     *
     * @return self
     */
    public function setUserGroup($user_group)
    {

        if (!is_null($user_group) && (count($user_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $user_group when calling InlineObject192., number of items must be less than or equal to 0.');
        }
        $this->container['user_group'] = $user_group;

        return $this;
    }

    /**
     * Gets mac_auth_bypass
     *
     * @return string|null
     */
    public function getMacAuthBypass()
    {
        return $this->container['mac_auth_bypass'];
    }

    /**
     * Sets mac_auth_bypass
     *
     * @param string|null $mac_auth_bypass Enable/disable MAB for this policy.    disable:Disable MAB.    enable:Enable MAB.
     *
     * @return self
     */
    public function setMacAuthBypass($mac_auth_bypass)
    {
        $allowedValues = $this->getMacAuthBypassAllowableValues();
        if (!is_null($mac_auth_bypass) && !in_array($mac_auth_bypass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_auth_bypass', must be one of '%s'",
                    $mac_auth_bypass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_auth_bypass'] = $mac_auth_bypass;

        return $this;
    }

    /**
     * Gets open_auth
     *
     * @return string|null
     */
    public function getOpenAuth()
    {
        return $this->container['open_auth'];
    }

    /**
     * Sets open_auth
     *
     * @param string|null $open_auth Enable/disable open authentication for this policy.    disable:Disable open authentication.    enable:Enable open authentication.
     *
     * @return self
     */
    public function setOpenAuth($open_auth)
    {
        $allowedValues = $this->getOpenAuthAllowableValues();
        if (!is_null($open_auth) && !in_array($open_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'open_auth', must be one of '%s'",
                    $open_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_auth'] = $open_auth;

        return $this;
    }

    /**
     * Gets eap_passthru
     *
     * @return string|null
     */
    public function getEapPassthru()
    {
        return $this->container['eap_passthru'];
    }

    /**
     * Sets eap_passthru
     *
     * @param string|null $eap_passthru Enable/disable EAP pass-through mode, allowing protocols (such as LLDP) to pass through ports for more flexible authentication.    disable:Disable EAP pass-through mode on this interface.    enable:Enable EAP pass-through mode on this interface.
     *
     * @return self
     */
    public function setEapPassthru($eap_passthru)
    {
        $allowedValues = $this->getEapPassthruAllowableValues();
        if (!is_null($eap_passthru) && !in_array($eap_passthru, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap_passthru', must be one of '%s'",
                    $eap_passthru,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap_passthru'] = $eap_passthru;

        return $this;
    }

    /**
     * Gets eap_auto_untagged_vlans
     *
     * @return string|null
     */
    public function getEapAutoUntaggedVlans()
    {
        return $this->container['eap_auto_untagged_vlans'];
    }

    /**
     * Sets eap_auto_untagged_vlans
     *
     * @param string|null $eap_auto_untagged_vlans Enable/disable automatic inclusion of untagged VLANs.    disable:Disable automatic inclusion of untagged VLANs.    enable:Enable automatic inclusion of untagged VLANs.
     *
     * @return self
     */
    public function setEapAutoUntaggedVlans($eap_auto_untagged_vlans)
    {
        $allowedValues = $this->getEapAutoUntaggedVlansAllowableValues();
        if (!is_null($eap_auto_untagged_vlans) && !in_array($eap_auto_untagged_vlans, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap_auto_untagged_vlans', must be one of '%s'",
                    $eap_auto_untagged_vlans,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap_auto_untagged_vlans'] = $eap_auto_untagged_vlans;

        return $this;
    }

    /**
     * Gets guest_vlan
     *
     * @return string|null
     */
    public function getGuestVlan()
    {
        return $this->container['guest_vlan'];
    }

    /**
     * Sets guest_vlan
     *
     * @param string|null $guest_vlan Enable the guest VLAN feature to allow limited access to non-802.1X-compliant clients.    disable:Disable guest VLAN on this interface.    enable:Enable guest VLAN on this interface.
     *
     * @return self
     */
    public function setGuestVlan($guest_vlan)
    {
        $allowedValues = $this->getGuestVlanAllowableValues();
        if (!is_null($guest_vlan) && !in_array($guest_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'guest_vlan', must be one of '%s'",
                    $guest_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['guest_vlan'] = $guest_vlan;

        return $this;
    }

    /**
     * Gets guest_vlan_id
     *
     * @return string|null
     */
    public function getGuestVlanId()
    {
        return $this->container['guest_vlan_id'];
    }

    /**
     * Sets guest_vlan_id
     *
     * @param string|null $guest_vlan_id Guest VLAN name.
     *
     * @return self
     */
    public function setGuestVlanId($guest_vlan_id)
    {
        if (!is_null($guest_vlan_id) && (mb_strlen($guest_vlan_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $guest_vlan_id when calling InlineObject192., must be smaller than or equal to 15.');
        }

        $this->container['guest_vlan_id'] = $guest_vlan_id;

        return $this;
    }

    /**
     * Gets guest_auth_delay
     *
     * @return int|null
     */
    public function getGuestAuthDelay()
    {
        return $this->container['guest_auth_delay'];
    }

    /**
     * Sets guest_auth_delay
     *
     * @param int|null $guest_auth_delay Guest authentication delay (1 - 900  sec, default = 30).
     *
     * @return self
     */
    public function setGuestAuthDelay($guest_auth_delay)
    {

        if (!is_null($guest_auth_delay) && ($guest_auth_delay > 900)) {
            throw new \InvalidArgumentException('invalid value for $guest_auth_delay when calling InlineObject192., must be smaller than or equal to 900.');
        }
        if (!is_null($guest_auth_delay) && ($guest_auth_delay < 1)) {
            throw new \InvalidArgumentException('invalid value for $guest_auth_delay when calling InlineObject192., must be bigger than or equal to 1.');
        }

        $this->container['guest_auth_delay'] = $guest_auth_delay;

        return $this;
    }

    /**
     * Gets auth_fail_vlan
     *
     * @return string|null
     */
    public function getAuthFailVlan()
    {
        return $this->container['auth_fail_vlan'];
    }

    /**
     * Sets auth_fail_vlan
     *
     * @param string|null $auth_fail_vlan Enable to allow limited access to clients that cannot authenticate.    disable:Disable authentication fail VLAN on this interface.    enable:Enable authentication fail VLAN on this interface.
     *
     * @return self
     */
    public function setAuthFailVlan($auth_fail_vlan)
    {
        $allowedValues = $this->getAuthFailVlanAllowableValues();
        if (!is_null($auth_fail_vlan) && !in_array($auth_fail_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_fail_vlan', must be one of '%s'",
                    $auth_fail_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_fail_vlan'] = $auth_fail_vlan;

        return $this;
    }

    /**
     * Gets auth_fail_vlan_id
     *
     * @return string|null
     */
    public function getAuthFailVlanId()
    {
        return $this->container['auth_fail_vlan_id'];
    }

    /**
     * Sets auth_fail_vlan_id
     *
     * @param string|null $auth_fail_vlan_id VLAN ID on which authentication failed.
     *
     * @return self
     */
    public function setAuthFailVlanId($auth_fail_vlan_id)
    {
        if (!is_null($auth_fail_vlan_id) && (mb_strlen($auth_fail_vlan_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $auth_fail_vlan_id when calling InlineObject192., must be smaller than or equal to 15.');
        }

        $this->container['auth_fail_vlan_id'] = $auth_fail_vlan_id;

        return $this;
    }

    /**
     * Gets framevid_apply
     *
     * @return string|null
     */
    public function getFramevidApply()
    {
        return $this->container['framevid_apply'];
    }

    /**
     * Sets framevid_apply
     *
     * @param string|null $framevid_apply Enable/disable the capability to apply the EAP/MAB frame VLAN to the port native VLAN.    disable:Disable the capability to apply the EAP/MAB frame VLAN to the port native VLAN.    enable:Enable the capability to apply the EAP/MAB frame VLAN to the port native VLAN.
     *
     * @return self
     */
    public function setFramevidApply($framevid_apply)
    {
        $allowedValues = $this->getFramevidApplyAllowableValues();
        if (!is_null($framevid_apply) && !in_array($framevid_apply, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'framevid_apply', must be one of '%s'",
                    $framevid_apply,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['framevid_apply'] = $framevid_apply;

        return $this;
    }

    /**
     * Gets radius_timeout_overwrite
     *
     * @return string|null
     */
    public function getRadiusTimeoutOverwrite()
    {
        return $this->container['radius_timeout_overwrite'];
    }

    /**
     * Sets radius_timeout_overwrite
     *
     * @param string|null $radius_timeout_overwrite Enable to override the global RADIUS session timeout.    disable:Override the global RADIUS session timeout.    enable:Use the global RADIUS session timeout.
     *
     * @return self
     */
    public function setRadiusTimeoutOverwrite($radius_timeout_overwrite)
    {
        $allowedValues = $this->getRadiusTimeoutOverwriteAllowableValues();
        if (!is_null($radius_timeout_overwrite) && !in_array($radius_timeout_overwrite, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'radius_timeout_overwrite', must be one of '%s'",
                    $radius_timeout_overwrite,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radius_timeout_overwrite'] = $radius_timeout_overwrite;

        return $this;
    }

    /**
     * Gets policy_type
     *
     * @return string|null
     */
    public function getPolicyType()
    {
        return $this->container['policy_type'];
    }

    /**
     * Sets policy_type
     *
     * @param string|null $policy_type Policy type.    802.1X:802.1X security policy.
     *
     * @return self
     */
    public function setPolicyType($policy_type)
    {
        $allowedValues = $this->getPolicyTypeAllowableValues();
        if (!is_null($policy_type) && !in_array($policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'policy_type', must be one of '%s'",
                    $policy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy_type'] = $policy_type;

        return $this;
    }

    /**
     * Gets authserver_timeout_period
     *
     * @return int|null
     */
    public function getAuthserverTimeoutPeriod()
    {
        return $this->container['authserver_timeout_period'];
    }

    /**
     * Sets authserver_timeout_period
     *
     * @param int|null $authserver_timeout_period Authentication server timeout period (3 - 15 sec, default = 3).
     *
     * @return self
     */
    public function setAuthserverTimeoutPeriod($authserver_timeout_period)
    {

        if (!is_null($authserver_timeout_period) && ($authserver_timeout_period > 15)) {
            throw new \InvalidArgumentException('invalid value for $authserver_timeout_period when calling InlineObject192., must be smaller than or equal to 15.');
        }
        if (!is_null($authserver_timeout_period) && ($authserver_timeout_period < 3)) {
            throw new \InvalidArgumentException('invalid value for $authserver_timeout_period when calling InlineObject192., must be bigger than or equal to 3.');
        }

        $this->container['authserver_timeout_period'] = $authserver_timeout_period;

        return $this;
    }

    /**
     * Gets authserver_timeout_vlan
     *
     * @return string|null
     */
    public function getAuthserverTimeoutVlan()
    {
        return $this->container['authserver_timeout_vlan'];
    }

    /**
     * Sets authserver_timeout_vlan
     *
     * @param string|null $authserver_timeout_vlan Enable/disable the authentication server timeout VLAN to allow limited access when RADIUS is unavailable.     disable:Disable authentication server timeout VLAN on this interface.    enable:Enable authentication server timeout VLAN on this interface.
     *
     * @return self
     */
    public function setAuthserverTimeoutVlan($authserver_timeout_vlan)
    {
        $allowedValues = $this->getAuthserverTimeoutVlanAllowableValues();
        if (!is_null($authserver_timeout_vlan) && !in_array($authserver_timeout_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authserver_timeout_vlan', must be one of '%s'",
                    $authserver_timeout_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authserver_timeout_vlan'] = $authserver_timeout_vlan;

        return $this;
    }

    /**
     * Gets authserver_timeout_vlanid
     *
     * @return string|null
     */
    public function getAuthserverTimeoutVlanid()
    {
        return $this->container['authserver_timeout_vlanid'];
    }

    /**
     * Sets authserver_timeout_vlanid
     *
     * @param string|null $authserver_timeout_vlanid Authentication server timeout VLAN name.
     *
     * @return self
     */
    public function setAuthserverTimeoutVlanid($authserver_timeout_vlanid)
    {
        if (!is_null($authserver_timeout_vlanid) && (mb_strlen($authserver_timeout_vlanid) > 15)) {
            throw new \InvalidArgumentException('invalid length for $authserver_timeout_vlanid when calling InlineObject192., must be smaller than or equal to 15.');
        }

        $this->container['authserver_timeout_vlanid'] = $authserver_timeout_vlanid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


