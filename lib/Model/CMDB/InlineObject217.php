<?php
/**
 * InlineObject217
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject217 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject217 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_217';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parallel_process_override' => 'string',
        'parallel_process' => 'int',
        'data_sync_interval' => 'int',
        'iot_weight_threshold' => 'int',
        'iot_scan_interval' => 'int',
        'iot_holdoff' => 'int',
        'iot_mac_idle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'parallel_process_override' => null,
        'parallel_process' => null,
        'data_sync_interval' => null,
        'iot_weight_threshold' => null,
        'iot_scan_interval' => null,
        'iot_holdoff' => null,
        'iot_mac_idle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parallel_process_override' => 'parallel-process-override',
        'parallel_process' => 'parallel-process',
        'data_sync_interval' => 'data-sync-interval',
        'iot_weight_threshold' => 'iot-weight-threshold',
        'iot_scan_interval' => 'iot-scan-interval',
        'iot_holdoff' => 'iot-holdoff',
        'iot_mac_idle' => 'iot-mac-idle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parallel_process_override' => 'setParallelProcessOverride',
        'parallel_process' => 'setParallelProcess',
        'data_sync_interval' => 'setDataSyncInterval',
        'iot_weight_threshold' => 'setIotWeightThreshold',
        'iot_scan_interval' => 'setIotScanInterval',
        'iot_holdoff' => 'setIotHoldoff',
        'iot_mac_idle' => 'setIotMacIdle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parallel_process_override' => 'getParallelProcessOverride',
        'parallel_process' => 'getParallelProcess',
        'data_sync_interval' => 'getDataSyncInterval',
        'iot_weight_threshold' => 'getIotWeightThreshold',
        'iot_scan_interval' => 'getIotScanInterval',
        'iot_holdoff' => 'getIotHoldoff',
        'iot_mac_idle' => 'getIotMacIdle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PARALLEL_PROCESS_OVERRIDE_DISABLE = 'disable';
    const PARALLEL_PROCESS_OVERRIDE_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParallelProcessOverrideAllowableValues()
    {
        return [
            self::PARALLEL_PROCESS_OVERRIDE_DISABLE,
            self::PARALLEL_PROCESS_OVERRIDE_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parallel_process_override'] = $data['parallel_process_override'] ?? null;
        $this->container['parallel_process'] = $data['parallel_process'] ?? null;
        $this->container['data_sync_interval'] = $data['data_sync_interval'] ?? null;
        $this->container['iot_weight_threshold'] = $data['iot_weight_threshold'] ?? null;
        $this->container['iot_scan_interval'] = $data['iot_scan_interval'] ?? null;
        $this->container['iot_holdoff'] = $data['iot_holdoff'] ?? null;
        $this->container['iot_mac_idle'] = $data['iot_mac_idle'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getParallelProcessOverrideAllowableValues();
        if (!is_null($this->container['parallel_process_override']) && !in_array($this->container['parallel_process_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'parallel_process_override', must be one of '%s'",
                $this->container['parallel_process_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['parallel_process']) && ($this->container['parallel_process'] > 32)) {
            $invalidProperties[] = "invalid value for 'parallel_process', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['parallel_process']) && ($this->container['parallel_process'] < 1)) {
            $invalidProperties[] = "invalid value for 'parallel_process', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['data_sync_interval']) && ($this->container['data_sync_interval'] > 1800)) {
            $invalidProperties[] = "invalid value for 'data_sync_interval', must be smaller than or equal to 1800.";
        }

        if (!is_null($this->container['data_sync_interval']) && ($this->container['data_sync_interval'] < 30)) {
            $invalidProperties[] = "invalid value for 'data_sync_interval', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['iot_weight_threshold']) && ($this->container['iot_weight_threshold'] > 255)) {
            $invalidProperties[] = "invalid value for 'iot_weight_threshold', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['iot_weight_threshold']) && ($this->container['iot_weight_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'iot_weight_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['iot_scan_interval']) && ($this->container['iot_scan_interval'] > 10080)) {
            $invalidProperties[] = "invalid value for 'iot_scan_interval', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['iot_scan_interval']) && ($this->container['iot_scan_interval'] < 2)) {
            $invalidProperties[] = "invalid value for 'iot_scan_interval', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['iot_holdoff']) && ($this->container['iot_holdoff'] > 10080)) {
            $invalidProperties[] = "invalid value for 'iot_holdoff', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['iot_holdoff']) && ($this->container['iot_holdoff'] < 0)) {
            $invalidProperties[] = "invalid value for 'iot_holdoff', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['iot_mac_idle']) && ($this->container['iot_mac_idle'] > 10080)) {
            $invalidProperties[] = "invalid value for 'iot_mac_idle', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['iot_mac_idle']) && ($this->container['iot_mac_idle'] < 0)) {
            $invalidProperties[] = "invalid value for 'iot_mac_idle', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parallel_process_override
     *
     * @return string|null
     */
    public function getParallelProcessOverride()
    {
        return $this->container['parallel_process_override'];
    }

    /**
     * Sets parallel_process_override
     *
     * @param string|null $parallel_process_override Enable/disable parallel process override.    disable:Disable maximum parallel process override.    enable:Enable maximum parallel process override.
     *
     * @return self
     */
    public function setParallelProcessOverride($parallel_process_override)
    {
        $allowedValues = $this->getParallelProcessOverrideAllowableValues();
        if (!is_null($parallel_process_override) && !in_array($parallel_process_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'parallel_process_override', must be one of '%s'",
                    $parallel_process_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['parallel_process_override'] = $parallel_process_override;

        return $this;
    }

    /**
     * Gets parallel_process
     *
     * @return int|null
     */
    public function getParallelProcess()
    {
        return $this->container['parallel_process'];
    }

    /**
     * Sets parallel_process
     *
     * @param int|null $parallel_process Maximum number of parallel processes.
     *
     * @return self
     */
    public function setParallelProcess($parallel_process)
    {

        if (!is_null($parallel_process) && ($parallel_process > 32)) {
            throw new \InvalidArgumentException('invalid value for $parallel_process when calling InlineObject217., must be smaller than or equal to 32.');
        }
        if (!is_null($parallel_process) && ($parallel_process < 1)) {
            throw new \InvalidArgumentException('invalid value for $parallel_process when calling InlineObject217., must be bigger than or equal to 1.');
        }

        $this->container['parallel_process'] = $parallel_process;

        return $this;
    }

    /**
     * Gets data_sync_interval
     *
     * @return int|null
     */
    public function getDataSyncInterval()
    {
        return $this->container['data_sync_interval'];
    }

    /**
     * Sets data_sync_interval
     *
     * @param int|null $data_sync_interval Time interval between collection of switch data (30 - 1800 sec, default = 60, 0 = disable).
     *
     * @return self
     */
    public function setDataSyncInterval($data_sync_interval)
    {

        if (!is_null($data_sync_interval) && ($data_sync_interval > 1800)) {
            throw new \InvalidArgumentException('invalid value for $data_sync_interval when calling InlineObject217., must be smaller than or equal to 1800.');
        }
        if (!is_null($data_sync_interval) && ($data_sync_interval < 30)) {
            throw new \InvalidArgumentException('invalid value for $data_sync_interval when calling InlineObject217., must be bigger than or equal to 30.');
        }

        $this->container['data_sync_interval'] = $data_sync_interval;

        return $this;
    }

    /**
     * Gets iot_weight_threshold
     *
     * @return int|null
     */
    public function getIotWeightThreshold()
    {
        return $this->container['iot_weight_threshold'];
    }

    /**
     * Sets iot_weight_threshold
     *
     * @param int|null $iot_weight_threshold MAC entry's confidence value. Value is re-queried when below this value (default = 1, 0 = disable).
     *
     * @return self
     */
    public function setIotWeightThreshold($iot_weight_threshold)
    {

        if (!is_null($iot_weight_threshold) && ($iot_weight_threshold > 255)) {
            throw new \InvalidArgumentException('invalid value for $iot_weight_threshold when calling InlineObject217., must be smaller than or equal to 255.');
        }
        if (!is_null($iot_weight_threshold) && ($iot_weight_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $iot_weight_threshold when calling InlineObject217., must be bigger than or equal to 0.');
        }

        $this->container['iot_weight_threshold'] = $iot_weight_threshold;

        return $this;
    }

    /**
     * Gets iot_scan_interval
     *
     * @return int|null
     */
    public function getIotScanInterval()
    {
        return $this->container['iot_scan_interval'];
    }

    /**
     * Sets iot_scan_interval
     *
     * @param int|null $iot_scan_interval IoT scan interval (2 - 10080 mins, default = 60 mins, 0 = disable).
     *
     * @return self
     */
    public function setIotScanInterval($iot_scan_interval)
    {

        if (!is_null($iot_scan_interval) && ($iot_scan_interval > 10080)) {
            throw new \InvalidArgumentException('invalid value for $iot_scan_interval when calling InlineObject217., must be smaller than or equal to 10080.');
        }
        if (!is_null($iot_scan_interval) && ($iot_scan_interval < 2)) {
            throw new \InvalidArgumentException('invalid value for $iot_scan_interval when calling InlineObject217., must be bigger than or equal to 2.');
        }

        $this->container['iot_scan_interval'] = $iot_scan_interval;

        return $this;
    }

    /**
     * Gets iot_holdoff
     *
     * @return int|null
     */
    public function getIotHoldoff()
    {
        return $this->container['iot_holdoff'];
    }

    /**
     * Sets iot_holdoff
     *
     * @param int|null $iot_holdoff MAC entry's creation time. Time must be greater than this value for an entry to be created (0 - 10080 mins, default = 5 mins).
     *
     * @return self
     */
    public function setIotHoldoff($iot_holdoff)
    {

        if (!is_null($iot_holdoff) && ($iot_holdoff > 10080)) {
            throw new \InvalidArgumentException('invalid value for $iot_holdoff when calling InlineObject217., must be smaller than or equal to 10080.');
        }
        if (!is_null($iot_holdoff) && ($iot_holdoff < 0)) {
            throw new \InvalidArgumentException('invalid value for $iot_holdoff when calling InlineObject217., must be bigger than or equal to 0.');
        }

        $this->container['iot_holdoff'] = $iot_holdoff;

        return $this;
    }

    /**
     * Gets iot_mac_idle
     *
     * @return int|null
     */
    public function getIotMacIdle()
    {
        return $this->container['iot_mac_idle'];
    }

    /**
     * Sets iot_mac_idle
     *
     * @param int|null $iot_mac_idle MAC entry's idle time. MAC entry is removed after this value (0 - 10080 mins, default = 1440 mins).
     *
     * @return self
     */
    public function setIotMacIdle($iot_mac_idle)
    {

        if (!is_null($iot_mac_idle) && ($iot_mac_idle > 10080)) {
            throw new \InvalidArgumentException('invalid value for $iot_mac_idle when calling InlineObject217., must be smaller than or equal to 10080.');
        }
        if (!is_null($iot_mac_idle) && ($iot_mac_idle < 0)) {
            throw new \InvalidArgumentException('invalid value for $iot_mac_idle when calling InlineObject217., must be bigger than or equal to 0.');
        }

        $this->container['iot_mac_idle'] = $iot_mac_idle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


