<?php
/**
 * InlineObject497
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject497 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject497 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_497';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'role' => 'string',
        'multipath' => 'string',
        'sdwan' => 'string',
        'wan_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]',
        'ip_allocation_block' => 'string',
        'overlays' => '\Fortigate\FortiOS\Model\CMDB\VpnOcvpnOverlays[]',
        'forticlient_access' => '\Fortigate\FortiOS\Model\CMDB\VpnOcvpnForticlientAccess[]',
        'auto_discovery' => 'string',
        'poll_interval' => 'int',
        'eap' => 'string',
        'eap_users' => 'string',
        'nat' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'role' => null,
        'multipath' => null,
        'sdwan' => null,
        'wan_interface' => null,
        'ip_allocation_block' => 'ipv4',
        'overlays' => null,
        'forticlient_access' => null,
        'auto_discovery' => null,
        'poll_interval' => null,
        'eap' => null,
        'eap_users' => null,
        'nat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'role' => 'role',
        'multipath' => 'multipath',
        'sdwan' => 'sdwan',
        'wan_interface' => 'wan-interface',
        'ip_allocation_block' => 'ip-allocation-block',
        'overlays' => 'overlays',
        'forticlient_access' => 'forticlient-access',
        'auto_discovery' => 'auto-discovery',
        'poll_interval' => 'poll-interval',
        'eap' => 'eap',
        'eap_users' => 'eap-users',
        'nat' => 'nat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'role' => 'setRole',
        'multipath' => 'setMultipath',
        'sdwan' => 'setSdwan',
        'wan_interface' => 'setWanInterface',
        'ip_allocation_block' => 'setIpAllocationBlock',
        'overlays' => 'setOverlays',
        'forticlient_access' => 'setForticlientAccess',
        'auto_discovery' => 'setAutoDiscovery',
        'poll_interval' => 'setPollInterval',
        'eap' => 'setEap',
        'eap_users' => 'setEapUsers',
        'nat' => 'setNat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'role' => 'getRole',
        'multipath' => 'getMultipath',
        'sdwan' => 'getSdwan',
        'wan_interface' => 'getWanInterface',
        'ip_allocation_block' => 'getIpAllocationBlock',
        'overlays' => 'getOverlays',
        'forticlient_access' => 'getForticlientAccess',
        'auto_discovery' => 'getAutoDiscovery',
        'poll_interval' => 'getPollInterval',
        'eap' => 'getEap',
        'eap_users' => 'getEapUsers',
        'nat' => 'getNat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const ROLE_SPOKE = 'spoke';
    const ROLE_PRIMARY_HUB = 'primary-hub';
    const ROLE_SECONDARY_HUB = 'secondary-hub';
    const MULTIPATH_ENABLE = 'enable';
    const MULTIPATH_DISABLE = 'disable';
    const SDWAN_ENABLE = 'enable';
    const SDWAN_DISABLE = 'disable';
    const AUTO_DISCOVERY_ENABLE = 'enable';
    const AUTO_DISCOVERY_DISABLE = 'disable';
    const EAP_ENABLE = 'enable';
    const EAP_DISABLE = 'disable';
    const NAT_ENABLE = 'enable';
    const NAT_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_SPOKE,
            self::ROLE_PRIMARY_HUB,
            self::ROLE_SECONDARY_HUB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultipathAllowableValues()
    {
        return [
            self::MULTIPATH_ENABLE,
            self::MULTIPATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdwanAllowableValues()
    {
        return [
            self::SDWAN_ENABLE,
            self::SDWAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDiscoveryAllowableValues()
    {
        return [
            self::AUTO_DISCOVERY_ENABLE,
            self::AUTO_DISCOVERY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapAllowableValues()
    {
        return [
            self::EAP_ENABLE,
            self::EAP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNatAllowableValues()
    {
        return [
            self::NAT_ENABLE,
            self::NAT_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['multipath'] = $data['multipath'] ?? null;
        $this->container['sdwan'] = $data['sdwan'] ?? null;
        $this->container['wan_interface'] = $data['wan_interface'] ?? null;
        $this->container['ip_allocation_block'] = $data['ip_allocation_block'] ?? null;
        $this->container['overlays'] = $data['overlays'] ?? null;
        $this->container['forticlient_access'] = $data['forticlient_access'] ?? null;
        $this->container['auto_discovery'] = $data['auto_discovery'] ?? null;
        $this->container['poll_interval'] = $data['poll_interval'] ?? null;
        $this->container['eap'] = $data['eap'] ?? null;
        $this->container['eap_users'] = $data['eap_users'] ?? null;
        $this->container['nat'] = $data['nat'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMultipathAllowableValues();
        if (!is_null($this->container['multipath']) && !in_array($this->container['multipath'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multipath', must be one of '%s'",
                $this->container['multipath'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($this->container['sdwan']) && !in_array($this->container['sdwan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdwan', must be one of '%s'",
                $this->container['sdwan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wan_interface']) && (count($this->container['wan_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'wan_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['overlays']) && (count($this->container['overlays']) > 10)) {
            $invalidProperties[] = "invalid value for 'overlays', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['forticlient_access']) && (count($this->container['forticlient_access']) > 0)) {
            $invalidProperties[] = "invalid value for 'forticlient_access', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAutoDiscoveryAllowableValues();
        if (!is_null($this->container['auto_discovery']) && !in_array($this->container['auto_discovery'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_discovery', must be one of '%s'",
                $this->container['auto_discovery'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['poll_interval']) && ($this->container['poll_interval'] > 120)) {
            $invalidProperties[] = "invalid value for 'poll_interval', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['poll_interval']) && ($this->container['poll_interval'] < 30)) {
            $invalidProperties[] = "invalid value for 'poll_interval', must be bigger than or equal to 30.";
        }

        $allowedValues = $this->getEapAllowableValues();
        if (!is_null($this->container['eap']) && !in_array($this->container['eap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap', must be one of '%s'",
                $this->container['eap'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eap_users']) && (mb_strlen($this->container['eap_users']) > 35)) {
            $invalidProperties[] = "invalid value for 'eap_users', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getNatAllowableValues();
        if (!is_null($this->container['nat']) && !in_array($this->container['nat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nat', must be one of '%s'",
                $this->container['nat'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable Overlay Controller cloud assisted VPN.    enable:Enable Overlay Controller VPN.    disable:Disable Overlay Controller VPN.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Set device role.    spoke:Register device as static spoke.    primary-hub:Register device as primary hub.    secondary-hub:Register device as secondary hub.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets multipath
     *
     * @return string|null
     */
    public function getMultipath()
    {
        return $this->container['multipath'];
    }

    /**
     * Sets multipath
     *
     * @param string|null $multipath Enable/disable multipath redundancy.    enable:Enable multipath redundancy.    disable:Disable multipath redundancy.
     *
     * @return self
     */
    public function setMultipath($multipath)
    {
        $allowedValues = $this->getMultipathAllowableValues();
        if (!is_null($multipath) && !in_array($multipath, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multipath', must be one of '%s'",
                    $multipath,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multipath'] = $multipath;

        return $this;
    }

    /**
     * Gets sdwan
     *
     * @return string|null
     */
    public function getSdwan()
    {
        return $this->container['sdwan'];
    }

    /**
     * Sets sdwan
     *
     * @param string|null $sdwan Enable/disable adding OCVPN tunnels to SDWAN.    enable:Enable adding OCVPN tunnels to SDWAN.    disable:Disable adding OCVPN tunnels to SDWAN.
     *
     * @return self
     */
    public function setSdwan($sdwan)
    {
        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($sdwan) && !in_array($sdwan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdwan', must be one of '%s'",
                    $sdwan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdwan'] = $sdwan;

        return $this;
    }

    /**
     * Gets wan_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null
     */
    public function getWanInterface()
    {
        return $this->container['wan_interface'];
    }

    /**
     * Sets wan_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null $wan_interface FortiGate WAN interfaces to use with OCVPN.
     *
     * @return self
     */
    public function setWanInterface($wan_interface)
    {

        if (!is_null($wan_interface) && (count($wan_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $wan_interface when calling InlineObject497., number of items must be less than or equal to 0.');
        }
        $this->container['wan_interface'] = $wan_interface;

        return $this;
    }

    /**
     * Gets ip_allocation_block
     *
     * @return string|null
     */
    public function getIpAllocationBlock()
    {
        return $this->container['ip_allocation_block'];
    }

    /**
     * Sets ip_allocation_block
     *
     * @param string|null $ip_allocation_block Class B subnet reserved for private IP address assignment.
     *
     * @return self
     */
    public function setIpAllocationBlock($ip_allocation_block)
    {
        $this->container['ip_allocation_block'] = $ip_allocation_block;

        return $this;
    }

    /**
     * Gets overlays
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnOcvpnOverlays[]|null
     */
    public function getOverlays()
    {
        return $this->container['overlays'];
    }

    /**
     * Sets overlays
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnOcvpnOverlays[]|null $overlays Network overlays to register with Overlay Controller VPN service.
     *
     * @return self
     */
    public function setOverlays($overlays)
    {

        if (!is_null($overlays) && (count($overlays) > 10)) {
            throw new \InvalidArgumentException('invalid value for $overlays when calling InlineObject497., number of items must be less than or equal to 10.');
        }
        $this->container['overlays'] = $overlays;

        return $this;
    }

    /**
     * Gets forticlient_access
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnOcvpnForticlientAccess[]|null
     */
    public function getForticlientAccess()
    {
        return $this->container['forticlient_access'];
    }

    /**
     * Sets forticlient_access
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnOcvpnForticlientAccess[]|null $forticlient_access Configure FortiClient settings.
     *
     * @return self
     */
    public function setForticlientAccess($forticlient_access)
    {

        if (!is_null($forticlient_access) && (count($forticlient_access) > 0)) {
            throw new \InvalidArgumentException('invalid value for $forticlient_access when calling InlineObject497., number of items must be less than or equal to 0.');
        }
        $this->container['forticlient_access'] = $forticlient_access;

        return $this;
    }

    /**
     * Gets auto_discovery
     *
     * @return string|null
     */
    public function getAutoDiscovery()
    {
        return $this->container['auto_discovery'];
    }

    /**
     * Sets auto_discovery
     *
     * @param string|null $auto_discovery Enable/disable auto-discovery shortcuts.    enable:Enable ADVPN auto-discovery shortcuts.    disable:Disable ADVPN auto-discovery shortcuts.
     *
     * @return self
     */
    public function setAutoDiscovery($auto_discovery)
    {
        $allowedValues = $this->getAutoDiscoveryAllowableValues();
        if (!is_null($auto_discovery) && !in_array($auto_discovery, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_discovery', must be one of '%s'",
                    $auto_discovery,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_discovery'] = $auto_discovery;

        return $this;
    }

    /**
     * Gets poll_interval
     *
     * @return int|null
     */
    public function getPollInterval()
    {
        return $this->container['poll_interval'];
    }

    /**
     * Sets poll_interval
     *
     * @param int|null $poll_interval Overlay Controller VPN polling interval.
     *
     * @return self
     */
    public function setPollInterval($poll_interval)
    {

        if (!is_null($poll_interval) && ($poll_interval > 120)) {
            throw new \InvalidArgumentException('invalid value for $poll_interval when calling InlineObject497., must be smaller than or equal to 120.');
        }
        if (!is_null($poll_interval) && ($poll_interval < 30)) {
            throw new \InvalidArgumentException('invalid value for $poll_interval when calling InlineObject497., must be bigger than or equal to 30.');
        }

        $this->container['poll_interval'] = $poll_interval;

        return $this;
    }

    /**
     * Gets eap
     *
     * @return string|null
     */
    public function getEap()
    {
        return $this->container['eap'];
    }

    /**
     * Sets eap
     *
     * @param string|null $eap Enable/disable EAP client authentication.    enable:Enable EAP client authentication.    disable:Disable EAP client authentication.
     *
     * @return self
     */
    public function setEap($eap)
    {
        $allowedValues = $this->getEapAllowableValues();
        if (!is_null($eap) && !in_array($eap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap', must be one of '%s'",
                    $eap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap'] = $eap;

        return $this;
    }

    /**
     * Gets eap_users
     *
     * @return string|null
     */
    public function getEapUsers()
    {
        return $this->container['eap_users'];
    }

    /**
     * Sets eap_users
     *
     * @param string|null $eap_users EAP authentication user group.
     *
     * @return self
     */
    public function setEapUsers($eap_users)
    {
        if (!is_null($eap_users) && (mb_strlen($eap_users) > 35)) {
            throw new \InvalidArgumentException('invalid length for $eap_users when calling InlineObject497., must be smaller than or equal to 35.');
        }

        $this->container['eap_users'] = $eap_users;

        return $this;
    }

    /**
     * Gets nat
     *
     * @return string|null
     */
    public function getNat()
    {
        return $this->container['nat'];
    }

    /**
     * Sets nat
     *
     * @param string|null $nat Enable/disable inter-overlay source NAT.    enable:Enable inter-overlay source NAT.    disable:Disable inter-overlay source NAT.
     *
     * @return self
     */
    public function setNat($nat)
    {
        $allowedValues = $this->getNatAllowableValues();
        if (!is_null($nat) && !in_array($nat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nat', must be one of '%s'",
                    $nat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nat'] = $nat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


