<?php
/**
 * InlineObject395
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject395 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject395 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_395';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'object' => 'string',
        'scope' => 'string',
        'vdom' => '\Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdSyncvd[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'scope' => null,
        'vdom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'scope' => 'scope',
        'vdom' => 'vdom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'scope' => 'setScope',
        'vdom' => 'setVdom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'scope' => 'getScope',
        'vdom' => 'getVdom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OBJECT_LOG_FORTIANALYZER_SETTING = 'log.fortianalyzer.setting';
    const OBJECT_LOG_FORTIANALYZER_OVERRIDE_SETTING = 'log.fortianalyzer.override-setting';
    const OBJECT_LOG_FORTIANALYZER2_SETTING = 'log.fortianalyzer2.setting';
    const OBJECT_LOG_FORTIANALYZER2_OVERRIDE_SETTING = 'log.fortianalyzer2.override-setting';
    const OBJECT_LOG_FORTIANALYZER3_SETTING = 'log.fortianalyzer3.setting';
    const OBJECT_LOG_FORTIANALYZER3_OVERRIDE_SETTING = 'log.fortianalyzer3.override-setting';
    const OBJECT_LOG_FORTIANALYZER_CLOUD_SETTING = 'log.fortianalyzer-cloud.setting';
    const OBJECT_LOG_FORTIANALYZER_CLOUD_OVERRIDE_SETTING = 'log.fortianalyzer-cloud.override-setting';
    const OBJECT_LOG_SYSLOGD_SETTING = 'log.syslogd.setting';
    const OBJECT_LOG_SYSLOGD_OVERRIDE_SETTING = 'log.syslogd.override-setting';
    const OBJECT_LOG_SYSLOGD2_SETTING = 'log.syslogd2.setting';
    const OBJECT_LOG_SYSLOGD2_OVERRIDE_SETTING = 'log.syslogd2.override-setting';
    const OBJECT_LOG_SYSLOGD3_SETTING = 'log.syslogd3.setting';
    const OBJECT_LOG_SYSLOGD3_OVERRIDE_SETTING = 'log.syslogd3.override-setting';
    const OBJECT_LOG_SYSLOGD4_SETTING = 'log.syslogd4.setting';
    const OBJECT_LOG_SYSLOGD4_OVERRIDE_SETTING = 'log.syslogd4.override-setting';
    const OBJECT_SYSTEM_CENTRAL_MANAGEMENT = 'system.central-management';
    const OBJECT_SYSTEM_CSF = 'system.csf';
    const OBJECT_USER_RADIUS = 'user.radius';
    const SCOPE_ALL = 'all';
    const SCOPE_INCLUSIVE = 'inclusive';
    const SCOPE_EXCLUSIVE = 'exclusive';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_LOG_FORTIANALYZER_SETTING,
            self::OBJECT_LOG_FORTIANALYZER_OVERRIDE_SETTING,
            self::OBJECT_LOG_FORTIANALYZER2_SETTING,
            self::OBJECT_LOG_FORTIANALYZER2_OVERRIDE_SETTING,
            self::OBJECT_LOG_FORTIANALYZER3_SETTING,
            self::OBJECT_LOG_FORTIANALYZER3_OVERRIDE_SETTING,
            self::OBJECT_LOG_FORTIANALYZER_CLOUD_SETTING,
            self::OBJECT_LOG_FORTIANALYZER_CLOUD_OVERRIDE_SETTING,
            self::OBJECT_LOG_SYSLOGD_SETTING,
            self::OBJECT_LOG_SYSLOGD_OVERRIDE_SETTING,
            self::OBJECT_LOG_SYSLOGD2_SETTING,
            self::OBJECT_LOG_SYSLOGD2_OVERRIDE_SETTING,
            self::OBJECT_LOG_SYSLOGD3_SETTING,
            self::OBJECT_LOG_SYSLOGD3_OVERRIDE_SETTING,
            self::OBJECT_LOG_SYSLOGD4_SETTING,
            self::OBJECT_LOG_SYSLOGD4_OVERRIDE_SETTING,
            self::OBJECT_SYSTEM_CENTRAL_MANAGEMENT,
            self::OBJECT_SYSTEM_CSF,
            self::OBJECT_USER_RADIUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_ALL,
            self::SCOPE_INCLUSIVE,
            self::SCOPE_EXCLUSIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['object'] = $data['object'] ?? null;
        $this->container['scope'] = $data['scope'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4096)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scope', must be one of '%s'",
                $this->container['scope'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vdom']) && (count($this->container['vdom']) > 0)) {
            $invalidProperties[] = "invalid value for 'vdom', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Index <1-4096>.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4096)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject395., must be smaller than or equal to 4096.');
        }
        if (!is_null($id) && ($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject395., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object Name of the configuration object that can be configured independently for all VDOMs.    log.fortianalyzer.setting:log.fortianalyzer.setting    log.fortianalyzer.override-setting:log.fortianalyzer.override-setting    log.fortianalyzer2.setting:log.fortianalyzer2.setting    log.fortianalyzer2.override-setting:log.fortianalyzer2.override-setting    log.fortianalyzer3.setting:log.fortianalyzer3.setting    log.fortianalyzer3.override-setting:log.fortianalyzer3.override-setting    log.fortianalyzer-cloud.setting:log.fortianalyzer-cloud.setting    log.fortianalyzer-cloud.override-setting:log.fortianalyzer-cloud.override-setting    log.syslogd.setting:log.syslogd.setting    log.syslogd.override-setting:log.syslogd.override-setting    log.syslogd2.setting:log.syslogd2.setting    log.syslogd2.override-setting:log.syslogd2.override-setting    log.syslogd3.setting:log.syslogd3.setting    log.syslogd3.override-setting:log.syslogd3.override-setting    log.syslogd4.setting:log.syslogd4.setting    log.syslogd4.override-setting:log.syslogd4.override-setting    system.central-management:system.central-management    system.csf:system.csf    user.radius:user.radius
     *
     * @return self
     */
    public function setObject($object)
    {
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($object) && !in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration.    all:Object configuration independent for all VDOMs.    inclusive:Object configuration independent for the listed VDOMs. Other VDOMs use the global configuration.    exclusive:Use the global object configuration for the listed VDOMs. Other VDOMs can be configured independently.
     *
     * @return self
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scope', must be one of '%s'",
                    $scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdSyncvd[]|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdSyncvd[]|null $vdom Names of the VDOMs.
     *
     * @return self
     */
    public function setVdom($vdom)
    {

        if (!is_null($vdom) && (count($vdom) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vdom when calling InlineObject395., number of items must be less than or equal to 0.');
        }
        $this->container['vdom'] = $vdom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


