<?php
/**
 * InlineObject599
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject599 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject599 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_599';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'uplink' => 'int',
        'downlink' => 'int',
        'uplink_sta' => 'int',
        'downlink_sta' => 'int',
        'burst' => 'string',
        'wmm' => 'string',
        'wmm_uapsd' => 'string',
        'call_admission_control' => 'string',
        'call_capacity' => 'int',
        'bandwidth_admission_control' => 'string',
        'bandwidth_capacity' => 'int',
        'dscp_wmm_mapping' => 'string',
        'dscp_wmm_vo' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]',
        'dscp_wmm_vi' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]',
        'dscp_wmm_be' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]',
        'dscp_wmm_bk' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]',
        'wmm_dscp_marking' => 'string',
        'wmm_vo_dscp' => 'int',
        'wmm_vi_dscp' => 'int',
        'wmm_be_dscp' => 'int',
        'wmm_bk_dscp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'uplink' => null,
        'downlink' => null,
        'uplink_sta' => null,
        'downlink_sta' => null,
        'burst' => null,
        'wmm' => null,
        'wmm_uapsd' => null,
        'call_admission_control' => null,
        'call_capacity' => null,
        'bandwidth_admission_control' => null,
        'bandwidth_capacity' => null,
        'dscp_wmm_mapping' => null,
        'dscp_wmm_vo' => null,
        'dscp_wmm_vi' => null,
        'dscp_wmm_be' => null,
        'dscp_wmm_bk' => null,
        'wmm_dscp_marking' => null,
        'wmm_vo_dscp' => null,
        'wmm_vi_dscp' => null,
        'wmm_be_dscp' => null,
        'wmm_bk_dscp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'uplink' => 'uplink',
        'downlink' => 'downlink',
        'uplink_sta' => 'uplink-sta',
        'downlink_sta' => 'downlink-sta',
        'burst' => 'burst',
        'wmm' => 'wmm',
        'wmm_uapsd' => 'wmm-uapsd',
        'call_admission_control' => 'call-admission-control',
        'call_capacity' => 'call-capacity',
        'bandwidth_admission_control' => 'bandwidth-admission-control',
        'bandwidth_capacity' => 'bandwidth-capacity',
        'dscp_wmm_mapping' => 'dscp-wmm-mapping',
        'dscp_wmm_vo' => 'dscp-wmm-vo',
        'dscp_wmm_vi' => 'dscp-wmm-vi',
        'dscp_wmm_be' => 'dscp-wmm-be',
        'dscp_wmm_bk' => 'dscp-wmm-bk',
        'wmm_dscp_marking' => 'wmm-dscp-marking',
        'wmm_vo_dscp' => 'wmm-vo-dscp',
        'wmm_vi_dscp' => 'wmm-vi-dscp',
        'wmm_be_dscp' => 'wmm-be-dscp',
        'wmm_bk_dscp' => 'wmm-bk-dscp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'uplink' => 'setUplink',
        'downlink' => 'setDownlink',
        'uplink_sta' => 'setUplinkSta',
        'downlink_sta' => 'setDownlinkSta',
        'burst' => 'setBurst',
        'wmm' => 'setWmm',
        'wmm_uapsd' => 'setWmmUapsd',
        'call_admission_control' => 'setCallAdmissionControl',
        'call_capacity' => 'setCallCapacity',
        'bandwidth_admission_control' => 'setBandwidthAdmissionControl',
        'bandwidth_capacity' => 'setBandwidthCapacity',
        'dscp_wmm_mapping' => 'setDscpWmmMapping',
        'dscp_wmm_vo' => 'setDscpWmmVo',
        'dscp_wmm_vi' => 'setDscpWmmVi',
        'dscp_wmm_be' => 'setDscpWmmBe',
        'dscp_wmm_bk' => 'setDscpWmmBk',
        'wmm_dscp_marking' => 'setWmmDscpMarking',
        'wmm_vo_dscp' => 'setWmmVoDscp',
        'wmm_vi_dscp' => 'setWmmViDscp',
        'wmm_be_dscp' => 'setWmmBeDscp',
        'wmm_bk_dscp' => 'setWmmBkDscp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'uplink' => 'getUplink',
        'downlink' => 'getDownlink',
        'uplink_sta' => 'getUplinkSta',
        'downlink_sta' => 'getDownlinkSta',
        'burst' => 'getBurst',
        'wmm' => 'getWmm',
        'wmm_uapsd' => 'getWmmUapsd',
        'call_admission_control' => 'getCallAdmissionControl',
        'call_capacity' => 'getCallCapacity',
        'bandwidth_admission_control' => 'getBandwidthAdmissionControl',
        'bandwidth_capacity' => 'getBandwidthCapacity',
        'dscp_wmm_mapping' => 'getDscpWmmMapping',
        'dscp_wmm_vo' => 'getDscpWmmVo',
        'dscp_wmm_vi' => 'getDscpWmmVi',
        'dscp_wmm_be' => 'getDscpWmmBe',
        'dscp_wmm_bk' => 'getDscpWmmBk',
        'wmm_dscp_marking' => 'getWmmDscpMarking',
        'wmm_vo_dscp' => 'getWmmVoDscp',
        'wmm_vi_dscp' => 'getWmmViDscp',
        'wmm_be_dscp' => 'getWmmBeDscp',
        'wmm_bk_dscp' => 'getWmmBkDscp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BURST_ENABLE = 'enable';
    const BURST_DISABLE = 'disable';
    const WMM_ENABLE = 'enable';
    const WMM_DISABLE = 'disable';
    const WMM_UAPSD_ENABLE = 'enable';
    const WMM_UAPSD_DISABLE = 'disable';
    const CALL_ADMISSION_CONTROL_ENABLE = 'enable';
    const CALL_ADMISSION_CONTROL_DISABLE = 'disable';
    const BANDWIDTH_ADMISSION_CONTROL_ENABLE = 'enable';
    const BANDWIDTH_ADMISSION_CONTROL_DISABLE = 'disable';
    const DSCP_WMM_MAPPING_ENABLE = 'enable';
    const DSCP_WMM_MAPPING_DISABLE = 'disable';
    const WMM_DSCP_MARKING_ENABLE = 'enable';
    const WMM_DSCP_MARKING_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBurstAllowableValues()
    {
        return [
            self::BURST_ENABLE,
            self::BURST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWmmAllowableValues()
    {
        return [
            self::WMM_ENABLE,
            self::WMM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWmmUapsdAllowableValues()
    {
        return [
            self::WMM_UAPSD_ENABLE,
            self::WMM_UAPSD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallAdmissionControlAllowableValues()
    {
        return [
            self::CALL_ADMISSION_CONTROL_ENABLE,
            self::CALL_ADMISSION_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandwidthAdmissionControlAllowableValues()
    {
        return [
            self::BANDWIDTH_ADMISSION_CONTROL_ENABLE,
            self::BANDWIDTH_ADMISSION_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDscpWmmMappingAllowableValues()
    {
        return [
            self::DSCP_WMM_MAPPING_ENABLE,
            self::DSCP_WMM_MAPPING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWmmDscpMarkingAllowableValues()
    {
        return [
            self::WMM_DSCP_MARKING_ENABLE,
            self::WMM_DSCP_MARKING_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['uplink'] = $data['uplink'] ?? null;
        $this->container['downlink'] = $data['downlink'] ?? null;
        $this->container['uplink_sta'] = $data['uplink_sta'] ?? null;
        $this->container['downlink_sta'] = $data['downlink_sta'] ?? null;
        $this->container['burst'] = $data['burst'] ?? null;
        $this->container['wmm'] = $data['wmm'] ?? null;
        $this->container['wmm_uapsd'] = $data['wmm_uapsd'] ?? null;
        $this->container['call_admission_control'] = $data['call_admission_control'] ?? null;
        $this->container['call_capacity'] = $data['call_capacity'] ?? null;
        $this->container['bandwidth_admission_control'] = $data['bandwidth_admission_control'] ?? null;
        $this->container['bandwidth_capacity'] = $data['bandwidth_capacity'] ?? null;
        $this->container['dscp_wmm_mapping'] = $data['dscp_wmm_mapping'] ?? null;
        $this->container['dscp_wmm_vo'] = $data['dscp_wmm_vo'] ?? null;
        $this->container['dscp_wmm_vi'] = $data['dscp_wmm_vi'] ?? null;
        $this->container['dscp_wmm_be'] = $data['dscp_wmm_be'] ?? null;
        $this->container['dscp_wmm_bk'] = $data['dscp_wmm_bk'] ?? null;
        $this->container['wmm_dscp_marking'] = $data['wmm_dscp_marking'] ?? null;
        $this->container['wmm_vo_dscp'] = $data['wmm_vo_dscp'] ?? null;
        $this->container['wmm_vi_dscp'] = $data['wmm_vi_dscp'] ?? null;
        $this->container['wmm_be_dscp'] = $data['wmm_be_dscp'] ?? null;
        $this->container['wmm_bk_dscp'] = $data['wmm_bk_dscp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 63)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['uplink']) && ($this->container['uplink'] > 2097152)) {
            $invalidProperties[] = "invalid value for 'uplink', must be smaller than or equal to 2097152.";
        }

        if (!is_null($this->container['uplink']) && ($this->container['uplink'] < 0)) {
            $invalidProperties[] = "invalid value for 'uplink', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['downlink']) && ($this->container['downlink'] > 2097152)) {
            $invalidProperties[] = "invalid value for 'downlink', must be smaller than or equal to 2097152.";
        }

        if (!is_null($this->container['downlink']) && ($this->container['downlink'] < 0)) {
            $invalidProperties[] = "invalid value for 'downlink', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['uplink_sta']) && ($this->container['uplink_sta'] > 2097152)) {
            $invalidProperties[] = "invalid value for 'uplink_sta', must be smaller than or equal to 2097152.";
        }

        if (!is_null($this->container['uplink_sta']) && ($this->container['uplink_sta'] < 0)) {
            $invalidProperties[] = "invalid value for 'uplink_sta', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['downlink_sta']) && ($this->container['downlink_sta'] > 2097152)) {
            $invalidProperties[] = "invalid value for 'downlink_sta', must be smaller than or equal to 2097152.";
        }

        if (!is_null($this->container['downlink_sta']) && ($this->container['downlink_sta'] < 0)) {
            $invalidProperties[] = "invalid value for 'downlink_sta', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBurstAllowableValues();
        if (!is_null($this->container['burst']) && !in_array($this->container['burst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'burst', must be one of '%s'",
                $this->container['burst'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWmmAllowableValues();
        if (!is_null($this->container['wmm']) && !in_array($this->container['wmm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wmm', must be one of '%s'",
                $this->container['wmm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWmmUapsdAllowableValues();
        if (!is_null($this->container['wmm_uapsd']) && !in_array($this->container['wmm_uapsd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wmm_uapsd', must be one of '%s'",
                $this->container['wmm_uapsd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCallAdmissionControlAllowableValues();
        if (!is_null($this->container['call_admission_control']) && !in_array($this->container['call_admission_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'call_admission_control', must be one of '%s'",
                $this->container['call_admission_control'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['call_capacity']) && ($this->container['call_capacity'] > 60)) {
            $invalidProperties[] = "invalid value for 'call_capacity', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['call_capacity']) && ($this->container['call_capacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'call_capacity', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBandwidthAdmissionControlAllowableValues();
        if (!is_null($this->container['bandwidth_admission_control']) && !in_array($this->container['bandwidth_admission_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bandwidth_admission_control', must be one of '%s'",
                $this->container['bandwidth_admission_control'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bandwidth_capacity']) && ($this->container['bandwidth_capacity'] > 600000)) {
            $invalidProperties[] = "invalid value for 'bandwidth_capacity', must be smaller than or equal to 600000.";
        }

        if (!is_null($this->container['bandwidth_capacity']) && ($this->container['bandwidth_capacity'] < 1)) {
            $invalidProperties[] = "invalid value for 'bandwidth_capacity', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDscpWmmMappingAllowableValues();
        if (!is_null($this->container['dscp_wmm_mapping']) && !in_array($this->container['dscp_wmm_mapping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dscp_wmm_mapping', must be one of '%s'",
                $this->container['dscp_wmm_mapping'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dscp_wmm_vo']) && (count($this->container['dscp_wmm_vo']) > 0)) {
            $invalidProperties[] = "invalid value for 'dscp_wmm_vo', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dscp_wmm_vi']) && (count($this->container['dscp_wmm_vi']) > 0)) {
            $invalidProperties[] = "invalid value for 'dscp_wmm_vi', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dscp_wmm_be']) && (count($this->container['dscp_wmm_be']) > 0)) {
            $invalidProperties[] = "invalid value for 'dscp_wmm_be', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dscp_wmm_bk']) && (count($this->container['dscp_wmm_bk']) > 0)) {
            $invalidProperties[] = "invalid value for 'dscp_wmm_bk', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getWmmDscpMarkingAllowableValues();
        if (!is_null($this->container['wmm_dscp_marking']) && !in_array($this->container['wmm_dscp_marking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wmm_dscp_marking', must be one of '%s'",
                $this->container['wmm_dscp_marking'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wmm_vo_dscp']) && ($this->container['wmm_vo_dscp'] > 63)) {
            $invalidProperties[] = "invalid value for 'wmm_vo_dscp', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['wmm_vo_dscp']) && ($this->container['wmm_vo_dscp'] < 0)) {
            $invalidProperties[] = "invalid value for 'wmm_vo_dscp', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['wmm_vi_dscp']) && ($this->container['wmm_vi_dscp'] > 63)) {
            $invalidProperties[] = "invalid value for 'wmm_vi_dscp', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['wmm_vi_dscp']) && ($this->container['wmm_vi_dscp'] < 0)) {
            $invalidProperties[] = "invalid value for 'wmm_vi_dscp', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['wmm_be_dscp']) && ($this->container['wmm_be_dscp'] > 63)) {
            $invalidProperties[] = "invalid value for 'wmm_be_dscp', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['wmm_be_dscp']) && ($this->container['wmm_be_dscp'] < 0)) {
            $invalidProperties[] = "invalid value for 'wmm_be_dscp', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['wmm_bk_dscp']) && ($this->container['wmm_bk_dscp'] > 63)) {
            $invalidProperties[] = "invalid value for 'wmm_bk_dscp', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['wmm_bk_dscp']) && ($this->container['wmm_bk_dscp'] < 0)) {
            $invalidProperties[] = "invalid value for 'wmm_bk_dscp', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WiFi QoS profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject599., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 63)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject599., must be smaller than or equal to 63.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets uplink
     *
     * @return int|null
     */
    public function getUplink()
    {
        return $this->container['uplink'];
    }

    /**
     * Sets uplink
     *
     * @param int|null $uplink Maximum uplink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
     *
     * @return self
     */
    public function setUplink($uplink)
    {

        if (!is_null($uplink) && ($uplink > 2097152)) {
            throw new \InvalidArgumentException('invalid value for $uplink when calling InlineObject599., must be smaller than or equal to 2097152.');
        }
        if (!is_null($uplink) && ($uplink < 0)) {
            throw new \InvalidArgumentException('invalid value for $uplink when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['uplink'] = $uplink;

        return $this;
    }

    /**
     * Gets downlink
     *
     * @return int|null
     */
    public function getDownlink()
    {
        return $this->container['downlink'];
    }

    /**
     * Sets downlink
     *
     * @param int|null $downlink Maximum downlink bandwidth for Virtual Access Points (VAPs) (0 - 2097152 Kbps, default = 0, 0 means no limit).
     *
     * @return self
     */
    public function setDownlink($downlink)
    {

        if (!is_null($downlink) && ($downlink > 2097152)) {
            throw new \InvalidArgumentException('invalid value for $downlink when calling InlineObject599., must be smaller than or equal to 2097152.');
        }
        if (!is_null($downlink) && ($downlink < 0)) {
            throw new \InvalidArgumentException('invalid value for $downlink when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['downlink'] = $downlink;

        return $this;
    }

    /**
     * Gets uplink_sta
     *
     * @return int|null
     */
    public function getUplinkSta()
    {
        return $this->container['uplink_sta'];
    }

    /**
     * Sets uplink_sta
     *
     * @param int|null $uplink_sta Maximum uplink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
     *
     * @return self
     */
    public function setUplinkSta($uplink_sta)
    {

        if (!is_null($uplink_sta) && ($uplink_sta > 2097152)) {
            throw new \InvalidArgumentException('invalid value for $uplink_sta when calling InlineObject599., must be smaller than or equal to 2097152.');
        }
        if (!is_null($uplink_sta) && ($uplink_sta < 0)) {
            throw new \InvalidArgumentException('invalid value for $uplink_sta when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['uplink_sta'] = $uplink_sta;

        return $this;
    }

    /**
     * Gets downlink_sta
     *
     * @return int|null
     */
    public function getDownlinkSta()
    {
        return $this->container['downlink_sta'];
    }

    /**
     * Sets downlink_sta
     *
     * @param int|null $downlink_sta Maximum downlink bandwidth for clients (0 - 2097152 Kbps, default = 0, 0 means no limit).
     *
     * @return self
     */
    public function setDownlinkSta($downlink_sta)
    {

        if (!is_null($downlink_sta) && ($downlink_sta > 2097152)) {
            throw new \InvalidArgumentException('invalid value for $downlink_sta when calling InlineObject599., must be smaller than or equal to 2097152.');
        }
        if (!is_null($downlink_sta) && ($downlink_sta < 0)) {
            throw new \InvalidArgumentException('invalid value for $downlink_sta when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['downlink_sta'] = $downlink_sta;

        return $this;
    }

    /**
     * Gets burst
     *
     * @return string|null
     */
    public function getBurst()
    {
        return $this->container['burst'];
    }

    /**
     * Sets burst
     *
     * @param string|null $burst Enable/disable client rate burst.    enable:Enable client rate burst.    disable:Disable client rate burst.
     *
     * @return self
     */
    public function setBurst($burst)
    {
        $allowedValues = $this->getBurstAllowableValues();
        if (!is_null($burst) && !in_array($burst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'burst', must be one of '%s'",
                    $burst,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['burst'] = $burst;

        return $this;
    }

    /**
     * Gets wmm
     *
     * @return string|null
     */
    public function getWmm()
    {
        return $this->container['wmm'];
    }

    /**
     * Sets wmm
     *
     * @param string|null $wmm Enable/disable WiFi multi-media (WMM) control.    enable:Enable WiFi multi-media (WMM) control.    disable:Disable WiFi multi-media (WMM) control.
     *
     * @return self
     */
    public function setWmm($wmm)
    {
        $allowedValues = $this->getWmmAllowableValues();
        if (!is_null($wmm) && !in_array($wmm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wmm', must be one of '%s'",
                    $wmm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wmm'] = $wmm;

        return $this;
    }

    /**
     * Gets wmm_uapsd
     *
     * @return string|null
     */
    public function getWmmUapsd()
    {
        return $this->container['wmm_uapsd'];
    }

    /**
     * Sets wmm_uapsd
     *
     * @param string|null $wmm_uapsd Enable/disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode.    enable:Enable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode.    disable:Disable WMM Unscheduled Automatic Power Save Delivery (U-APSD) power save mode.
     *
     * @return self
     */
    public function setWmmUapsd($wmm_uapsd)
    {
        $allowedValues = $this->getWmmUapsdAllowableValues();
        if (!is_null($wmm_uapsd) && !in_array($wmm_uapsd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wmm_uapsd', must be one of '%s'",
                    $wmm_uapsd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wmm_uapsd'] = $wmm_uapsd;

        return $this;
    }

    /**
     * Gets call_admission_control
     *
     * @return string|null
     */
    public function getCallAdmissionControl()
    {
        return $this->container['call_admission_control'];
    }

    /**
     * Sets call_admission_control
     *
     * @param string|null $call_admission_control Enable/disable WMM call admission control.    enable:Enable WMM call admission control.    disable:Disable WMM call admission control.
     *
     * @return self
     */
    public function setCallAdmissionControl($call_admission_control)
    {
        $allowedValues = $this->getCallAdmissionControlAllowableValues();
        if (!is_null($call_admission_control) && !in_array($call_admission_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'call_admission_control', must be one of '%s'",
                    $call_admission_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['call_admission_control'] = $call_admission_control;

        return $this;
    }

    /**
     * Gets call_capacity
     *
     * @return int|null
     */
    public function getCallCapacity()
    {
        return $this->container['call_capacity'];
    }

    /**
     * Sets call_capacity
     *
     * @param int|null $call_capacity Maximum number of Voice over WLAN (VoWLAN) phones allowed (0 - 60, default = 10).
     *
     * @return self
     */
    public function setCallCapacity($call_capacity)
    {

        if (!is_null($call_capacity) && ($call_capacity > 60)) {
            throw new \InvalidArgumentException('invalid value for $call_capacity when calling InlineObject599., must be smaller than or equal to 60.');
        }
        if (!is_null($call_capacity) && ($call_capacity < 0)) {
            throw new \InvalidArgumentException('invalid value for $call_capacity when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['call_capacity'] = $call_capacity;

        return $this;
    }

    /**
     * Gets bandwidth_admission_control
     *
     * @return string|null
     */
    public function getBandwidthAdmissionControl()
    {
        return $this->container['bandwidth_admission_control'];
    }

    /**
     * Sets bandwidth_admission_control
     *
     * @param string|null $bandwidth_admission_control Enable/disable WMM bandwidth admission control.    enable:Enable WMM bandwidth admission control.    disable:Disable WMM bandwidth admission control.
     *
     * @return self
     */
    public function setBandwidthAdmissionControl($bandwidth_admission_control)
    {
        $allowedValues = $this->getBandwidthAdmissionControlAllowableValues();
        if (!is_null($bandwidth_admission_control) && !in_array($bandwidth_admission_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bandwidth_admission_control', must be one of '%s'",
                    $bandwidth_admission_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bandwidth_admission_control'] = $bandwidth_admission_control;

        return $this;
    }

    /**
     * Gets bandwidth_capacity
     *
     * @return int|null
     */
    public function getBandwidthCapacity()
    {
        return $this->container['bandwidth_capacity'];
    }

    /**
     * Sets bandwidth_capacity
     *
     * @param int|null $bandwidth_capacity Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     *
     * @return self
     */
    public function setBandwidthCapacity($bandwidth_capacity)
    {

        if (!is_null($bandwidth_capacity) && ($bandwidth_capacity > 600000)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_capacity when calling InlineObject599., must be smaller than or equal to 600000.');
        }
        if (!is_null($bandwidth_capacity) && ($bandwidth_capacity < 1)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_capacity when calling InlineObject599., must be bigger than or equal to 1.');
        }

        $this->container['bandwidth_capacity'] = $bandwidth_capacity;

        return $this;
    }

    /**
     * Gets dscp_wmm_mapping
     *
     * @return string|null
     */
    public function getDscpWmmMapping()
    {
        return $this->container['dscp_wmm_mapping'];
    }

    /**
     * Sets dscp_wmm_mapping
     *
     * @param string|null $dscp_wmm_mapping Enable/disable Differentiated Services Code Point (DSCP) mapping.    enable:Enable Differentiated Services Code Point (DSCP) mapping.    disable:Disable Differentiated Services Code Point (DSCP) mapping.
     *
     * @return self
     */
    public function setDscpWmmMapping($dscp_wmm_mapping)
    {
        $allowedValues = $this->getDscpWmmMappingAllowableValues();
        if (!is_null($dscp_wmm_mapping) && !in_array($dscp_wmm_mapping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dscp_wmm_mapping', must be one of '%s'",
                    $dscp_wmm_mapping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dscp_wmm_mapping'] = $dscp_wmm_mapping;

        return $this;
    }

    /**
     * Gets dscp_wmm_vo
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null
     */
    public function getDscpWmmVo()
    {
        return $this->container['dscp_wmm_vo'];
    }

    /**
     * Sets dscp_wmm_vo
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null $dscp_wmm_vo DSCP mapping for voice access (default = 48 56).
     *
     * @return self
     */
    public function setDscpWmmVo($dscp_wmm_vo)
    {

        if (!is_null($dscp_wmm_vo) && (count($dscp_wmm_vo) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dscp_wmm_vo when calling InlineObject599., number of items must be less than or equal to 0.');
        }
        $this->container['dscp_wmm_vo'] = $dscp_wmm_vo;

        return $this;
    }

    /**
     * Gets dscp_wmm_vi
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null
     */
    public function getDscpWmmVi()
    {
        return $this->container['dscp_wmm_vi'];
    }

    /**
     * Sets dscp_wmm_vi
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null $dscp_wmm_vi DSCP mapping for video access (default = 32 40).
     *
     * @return self
     */
    public function setDscpWmmVi($dscp_wmm_vi)
    {

        if (!is_null($dscp_wmm_vi) && (count($dscp_wmm_vi) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dscp_wmm_vi when calling InlineObject599., number of items must be less than or equal to 0.');
        }
        $this->container['dscp_wmm_vi'] = $dscp_wmm_vi;

        return $this;
    }

    /**
     * Gets dscp_wmm_be
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null
     */
    public function getDscpWmmBe()
    {
        return $this->container['dscp_wmm_be'];
    }

    /**
     * Sets dscp_wmm_be
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null $dscp_wmm_be DSCP mapping for best effort access (default = 0 24).
     *
     * @return self
     */
    public function setDscpWmmBe($dscp_wmm_be)
    {

        if (!is_null($dscp_wmm_be) && (count($dscp_wmm_be) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dscp_wmm_be when calling InlineObject599., number of items must be less than or equal to 0.');
        }
        $this->container['dscp_wmm_be'] = $dscp_wmm_be;

        return $this;
    }

    /**
     * Gets dscp_wmm_bk
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null
     */
    public function getDscpWmmBk()
    {
        return $this->container['dscp_wmm_bk'];
    }

    /**
     * Sets dscp_wmm_bk
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerQosProfileNameDscpWmmVo[]|null $dscp_wmm_bk DSCP mapping for background access (default = 8 16).
     *
     * @return self
     */
    public function setDscpWmmBk($dscp_wmm_bk)
    {

        if (!is_null($dscp_wmm_bk) && (count($dscp_wmm_bk) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dscp_wmm_bk when calling InlineObject599., number of items must be less than or equal to 0.');
        }
        $this->container['dscp_wmm_bk'] = $dscp_wmm_bk;

        return $this;
    }

    /**
     * Gets wmm_dscp_marking
     *
     * @return string|null
     */
    public function getWmmDscpMarking()
    {
        return $this->container['wmm_dscp_marking'];
    }

    /**
     * Sets wmm_dscp_marking
     *
     * @param string|null $wmm_dscp_marking Enable/disable WMM Differentiated Services Code Point (DSCP) marking.    enable:Enable WMM Differentiated Services Code Point (DSCP) marking.    disable:Disable WMM Differentiated Services Code Point (DSCP) marking.
     *
     * @return self
     */
    public function setWmmDscpMarking($wmm_dscp_marking)
    {
        $allowedValues = $this->getWmmDscpMarkingAllowableValues();
        if (!is_null($wmm_dscp_marking) && !in_array($wmm_dscp_marking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wmm_dscp_marking', must be one of '%s'",
                    $wmm_dscp_marking,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wmm_dscp_marking'] = $wmm_dscp_marking;

        return $this;
    }

    /**
     * Gets wmm_vo_dscp
     *
     * @return int|null
     */
    public function getWmmVoDscp()
    {
        return $this->container['wmm_vo_dscp'];
    }

    /**
     * Sets wmm_vo_dscp
     *
     * @param int|null $wmm_vo_dscp DSCP marking for voice access (default = 48).
     *
     * @return self
     */
    public function setWmmVoDscp($wmm_vo_dscp)
    {

        if (!is_null($wmm_vo_dscp) && ($wmm_vo_dscp > 63)) {
            throw new \InvalidArgumentException('invalid value for $wmm_vo_dscp when calling InlineObject599., must be smaller than or equal to 63.');
        }
        if (!is_null($wmm_vo_dscp) && ($wmm_vo_dscp < 0)) {
            throw new \InvalidArgumentException('invalid value for $wmm_vo_dscp when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['wmm_vo_dscp'] = $wmm_vo_dscp;

        return $this;
    }

    /**
     * Gets wmm_vi_dscp
     *
     * @return int|null
     */
    public function getWmmViDscp()
    {
        return $this->container['wmm_vi_dscp'];
    }

    /**
     * Sets wmm_vi_dscp
     *
     * @param int|null $wmm_vi_dscp DSCP marking for video access (default = 32).
     *
     * @return self
     */
    public function setWmmViDscp($wmm_vi_dscp)
    {

        if (!is_null($wmm_vi_dscp) && ($wmm_vi_dscp > 63)) {
            throw new \InvalidArgumentException('invalid value for $wmm_vi_dscp when calling InlineObject599., must be smaller than or equal to 63.');
        }
        if (!is_null($wmm_vi_dscp) && ($wmm_vi_dscp < 0)) {
            throw new \InvalidArgumentException('invalid value for $wmm_vi_dscp when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['wmm_vi_dscp'] = $wmm_vi_dscp;

        return $this;
    }

    /**
     * Gets wmm_be_dscp
     *
     * @return int|null
     */
    public function getWmmBeDscp()
    {
        return $this->container['wmm_be_dscp'];
    }

    /**
     * Sets wmm_be_dscp
     *
     * @param int|null $wmm_be_dscp DSCP marking for best effort access (default = 0).
     *
     * @return self
     */
    public function setWmmBeDscp($wmm_be_dscp)
    {

        if (!is_null($wmm_be_dscp) && ($wmm_be_dscp > 63)) {
            throw new \InvalidArgumentException('invalid value for $wmm_be_dscp when calling InlineObject599., must be smaller than or equal to 63.');
        }
        if (!is_null($wmm_be_dscp) && ($wmm_be_dscp < 0)) {
            throw new \InvalidArgumentException('invalid value for $wmm_be_dscp when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['wmm_be_dscp'] = $wmm_be_dscp;

        return $this;
    }

    /**
     * Gets wmm_bk_dscp
     *
     * @return int|null
     */
    public function getWmmBkDscp()
    {
        return $this->container['wmm_bk_dscp'];
    }

    /**
     * Sets wmm_bk_dscp
     *
     * @param int|null $wmm_bk_dscp DSCP marking for background access (default = 8).
     *
     * @return self
     */
    public function setWmmBkDscp($wmm_bk_dscp)
    {

        if (!is_null($wmm_bk_dscp) && ($wmm_bk_dscp > 63)) {
            throw new \InvalidArgumentException('invalid value for $wmm_bk_dscp when calling InlineObject599., must be smaller than or equal to 63.');
        }
        if (!is_null($wmm_bk_dscp) && ($wmm_bk_dscp < 0)) {
            throw new \InvalidArgumentException('invalid value for $wmm_bk_dscp when calling InlineObject599., must be bigger than or equal to 0.');
        }

        $this->container['wmm_bk_dscp'] = $wmm_bk_dscp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


