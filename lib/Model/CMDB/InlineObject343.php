<?php
/**
 * InlineObject343
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject343 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject343 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_343';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'pin_init' => 'string',
        'network_init' => 'string',
        'lockdown_lac' => 'string',
        'mode' => 'string',
        'auto_dial' => 'string',
        'dial_on_demand' => 'string',
        'idle_timer' => 'int',
        'redial' => 'string',
        'reset' => 'int',
        'holddown_timer' => 'int',
        'connect_timeout' => 'int',
        'interface' => 'string',
        'wireless_port' => 'int',
        'dont_send_cr1' => 'string',
        'phone1' => 'string',
        'dial_cmd1' => 'string',
        'username1' => 'string',
        'passwd1' => 'string',
        'extra_init1' => 'string',
        'peer_modem1' => 'string',
        'ppp_echo_request1' => 'string',
        'authtype1' => 'string',
        'dont_send_cr2' => 'string',
        'phone2' => 'string',
        'dial_cmd2' => 'string',
        'username2' => 'string',
        'passwd2' => 'string',
        'extra_init2' => 'string',
        'peer_modem2' => 'string',
        'ppp_echo_request2' => 'string',
        'authtype2' => 'string',
        'dont_send_cr3' => 'string',
        'phone3' => 'string',
        'dial_cmd3' => 'string',
        'username3' => 'string',
        'passwd3' => 'string',
        'extra_init3' => 'string',
        'peer_modem3' => 'string',
        'ppp_echo_request3' => 'string',
        'altmode' => 'string',
        'authtype3' => 'string',
        'traffic_check' => 'string',
        'action' => 'string',
        'distance' => 'int',
        'priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'pin_init' => null,
        'network_init' => null,
        'lockdown_lac' => null,
        'mode' => null,
        'auto_dial' => null,
        'dial_on_demand' => null,
        'idle_timer' => null,
        'redial' => null,
        'reset' => null,
        'holddown_timer' => null,
        'connect_timeout' => null,
        'interface' => null,
        'wireless_port' => null,
        'dont_send_cr1' => null,
        'phone1' => null,
        'dial_cmd1' => null,
        'username1' => null,
        'passwd1' => 'password',
        'extra_init1' => null,
        'peer_modem1' => null,
        'ppp_echo_request1' => null,
        'authtype1' => null,
        'dont_send_cr2' => null,
        'phone2' => null,
        'dial_cmd2' => null,
        'username2' => null,
        'passwd2' => 'password',
        'extra_init2' => null,
        'peer_modem2' => null,
        'ppp_echo_request2' => null,
        'authtype2' => null,
        'dont_send_cr3' => null,
        'phone3' => null,
        'dial_cmd3' => null,
        'username3' => null,
        'passwd3' => 'password',
        'extra_init3' => null,
        'peer_modem3' => null,
        'ppp_echo_request3' => null,
        'altmode' => null,
        'authtype3' => null,
        'traffic_check' => null,
        'action' => null,
        'distance' => null,
        'priority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'pin_init' => 'pin-init',
        'network_init' => 'network-init',
        'lockdown_lac' => 'lockdown-lac',
        'mode' => 'mode',
        'auto_dial' => 'auto-dial',
        'dial_on_demand' => 'dial-on-demand',
        'idle_timer' => 'idle-timer',
        'redial' => 'redial',
        'reset' => 'reset',
        'holddown_timer' => 'holddown-timer',
        'connect_timeout' => 'connect-timeout',
        'interface' => 'interface',
        'wireless_port' => 'wireless-port',
        'dont_send_cr1' => 'dont-send-CR1',
        'phone1' => 'phone1',
        'dial_cmd1' => 'dial-cmd1',
        'username1' => 'username1',
        'passwd1' => 'passwd1',
        'extra_init1' => 'extra-init1',
        'peer_modem1' => 'peer-modem1',
        'ppp_echo_request1' => 'ppp-echo-request1',
        'authtype1' => 'authtype1',
        'dont_send_cr2' => 'dont-send-CR2',
        'phone2' => 'phone2',
        'dial_cmd2' => 'dial-cmd2',
        'username2' => 'username2',
        'passwd2' => 'passwd2',
        'extra_init2' => 'extra-init2',
        'peer_modem2' => 'peer-modem2',
        'ppp_echo_request2' => 'ppp-echo-request2',
        'authtype2' => 'authtype2',
        'dont_send_cr3' => 'dont-send-CR3',
        'phone3' => 'phone3',
        'dial_cmd3' => 'dial-cmd3',
        'username3' => 'username3',
        'passwd3' => 'passwd3',
        'extra_init3' => 'extra-init3',
        'peer_modem3' => 'peer-modem3',
        'ppp_echo_request3' => 'ppp-echo-request3',
        'altmode' => 'altmode',
        'authtype3' => 'authtype3',
        'traffic_check' => 'traffic-check',
        'action' => 'action',
        'distance' => 'distance',
        'priority' => 'priority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'pin_init' => 'setPinInit',
        'network_init' => 'setNetworkInit',
        'lockdown_lac' => 'setLockdownLac',
        'mode' => 'setMode',
        'auto_dial' => 'setAutoDial',
        'dial_on_demand' => 'setDialOnDemand',
        'idle_timer' => 'setIdleTimer',
        'redial' => 'setRedial',
        'reset' => 'setReset',
        'holddown_timer' => 'setHolddownTimer',
        'connect_timeout' => 'setConnectTimeout',
        'interface' => 'setInterface',
        'wireless_port' => 'setWirelessPort',
        'dont_send_cr1' => 'setDontSendCr1',
        'phone1' => 'setPhone1',
        'dial_cmd1' => 'setDialCmd1',
        'username1' => 'setUsername1',
        'passwd1' => 'setPasswd1',
        'extra_init1' => 'setExtraInit1',
        'peer_modem1' => 'setPeerModem1',
        'ppp_echo_request1' => 'setPppEchoRequest1',
        'authtype1' => 'setAuthtype1',
        'dont_send_cr2' => 'setDontSendCr2',
        'phone2' => 'setPhone2',
        'dial_cmd2' => 'setDialCmd2',
        'username2' => 'setUsername2',
        'passwd2' => 'setPasswd2',
        'extra_init2' => 'setExtraInit2',
        'peer_modem2' => 'setPeerModem2',
        'ppp_echo_request2' => 'setPppEchoRequest2',
        'authtype2' => 'setAuthtype2',
        'dont_send_cr3' => 'setDontSendCr3',
        'phone3' => 'setPhone3',
        'dial_cmd3' => 'setDialCmd3',
        'username3' => 'setUsername3',
        'passwd3' => 'setPasswd3',
        'extra_init3' => 'setExtraInit3',
        'peer_modem3' => 'setPeerModem3',
        'ppp_echo_request3' => 'setPppEchoRequest3',
        'altmode' => 'setAltmode',
        'authtype3' => 'setAuthtype3',
        'traffic_check' => 'setTrafficCheck',
        'action' => 'setAction',
        'distance' => 'setDistance',
        'priority' => 'setPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'pin_init' => 'getPinInit',
        'network_init' => 'getNetworkInit',
        'lockdown_lac' => 'getLockdownLac',
        'mode' => 'getMode',
        'auto_dial' => 'getAutoDial',
        'dial_on_demand' => 'getDialOnDemand',
        'idle_timer' => 'getIdleTimer',
        'redial' => 'getRedial',
        'reset' => 'getReset',
        'holddown_timer' => 'getHolddownTimer',
        'connect_timeout' => 'getConnectTimeout',
        'interface' => 'getInterface',
        'wireless_port' => 'getWirelessPort',
        'dont_send_cr1' => 'getDontSendCr1',
        'phone1' => 'getPhone1',
        'dial_cmd1' => 'getDialCmd1',
        'username1' => 'getUsername1',
        'passwd1' => 'getPasswd1',
        'extra_init1' => 'getExtraInit1',
        'peer_modem1' => 'getPeerModem1',
        'ppp_echo_request1' => 'getPppEchoRequest1',
        'authtype1' => 'getAuthtype1',
        'dont_send_cr2' => 'getDontSendCr2',
        'phone2' => 'getPhone2',
        'dial_cmd2' => 'getDialCmd2',
        'username2' => 'getUsername2',
        'passwd2' => 'getPasswd2',
        'extra_init2' => 'getExtraInit2',
        'peer_modem2' => 'getPeerModem2',
        'ppp_echo_request2' => 'getPppEchoRequest2',
        'authtype2' => 'getAuthtype2',
        'dont_send_cr3' => 'getDontSendCr3',
        'phone3' => 'getPhone3',
        'dial_cmd3' => 'getDialCmd3',
        'username3' => 'getUsername3',
        'passwd3' => 'getPasswd3',
        'extra_init3' => 'getExtraInit3',
        'peer_modem3' => 'getPeerModem3',
        'ppp_echo_request3' => 'getPppEchoRequest3',
        'altmode' => 'getAltmode',
        'authtype3' => 'getAuthtype3',
        'traffic_check' => 'getTrafficCheck',
        'action' => 'getAction',
        'distance' => 'getDistance',
        'priority' => 'getPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const MODE_STANDALONE = 'standalone';
    const MODE_REDUNDANT = 'redundant';
    const AUTO_DIAL_ENABLE = 'enable';
    const AUTO_DIAL_DISABLE = 'disable';
    const DIAL_ON_DEMAND_ENABLE = 'enable';
    const DIAL_ON_DEMAND_DISABLE = 'disable';
    const REDIAL_NONE = 'none';
    const REDIAL__1 = '1';
    const REDIAL__2 = '2';
    const REDIAL__3 = '3';
    const REDIAL__4 = '4';
    const REDIAL__5 = '5';
    const REDIAL__6 = '6';
    const REDIAL__7 = '7';
    const REDIAL__8 = '8';
    const REDIAL__9 = '9';
    const REDIAL__10 = '10';
    const DONT_SEND_CR1_ENABLE = 'enable';
    const DONT_SEND_CR1_DISABLE = 'disable';
    const PEER_MODEM1_GENERIC = 'generic';
    const PEER_MODEM1_ACTIONTEC = 'actiontec';
    const PEER_MODEM1_ASCEND_TNT = 'ascend_TNT';
    const PPP_ECHO_REQUEST1_ENABLE = 'enable';
    const PPP_ECHO_REQUEST1_DISABLE = 'disable';
    const AUTHTYPE1_PAP = 'pap';
    const AUTHTYPE1_CHAP = 'chap';
    const AUTHTYPE1_MSCHAP = 'mschap';
    const AUTHTYPE1_MSCHAPV2 = 'mschapv2';
    const DONT_SEND_CR2_ENABLE = 'enable';
    const DONT_SEND_CR2_DISABLE = 'disable';
    const PEER_MODEM2_GENERIC = 'generic';
    const PEER_MODEM2_ACTIONTEC = 'actiontec';
    const PEER_MODEM2_ASCEND_TNT = 'ascend_TNT';
    const PPP_ECHO_REQUEST2_ENABLE = 'enable';
    const PPP_ECHO_REQUEST2_DISABLE = 'disable';
    const AUTHTYPE2_PAP = 'pap';
    const AUTHTYPE2_CHAP = 'chap';
    const AUTHTYPE2_MSCHAP = 'mschap';
    const AUTHTYPE2_MSCHAPV2 = 'mschapv2';
    const DONT_SEND_CR3_ENABLE = 'enable';
    const DONT_SEND_CR3_DISABLE = 'disable';
    const PEER_MODEM3_GENERIC = 'generic';
    const PEER_MODEM3_ACTIONTEC = 'actiontec';
    const PEER_MODEM3_ASCEND_TNT = 'ascend_TNT';
    const PPP_ECHO_REQUEST3_ENABLE = 'enable';
    const PPP_ECHO_REQUEST3_DISABLE = 'disable';
    const ALTMODE_ENABLE = 'enable';
    const ALTMODE_DISABLE = 'disable';
    const AUTHTYPE3_PAP = 'pap';
    const AUTHTYPE3_CHAP = 'chap';
    const AUTHTYPE3_MSCHAP = 'mschap';
    const AUTHTYPE3_MSCHAPV2 = 'mschapv2';
    const TRAFFIC_CHECK_ENABLE = 'enable';
    const TRAFFIC_CHECK_DISABLE = 'disable';
    const ACTION_DIAL = 'dial';
    const ACTION_STOP = 'stop';
    const ACTION_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_STANDALONE,
            self::MODE_REDUNDANT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDialAllowableValues()
    {
        return [
            self::AUTO_DIAL_ENABLE,
            self::AUTO_DIAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDialOnDemandAllowableValues()
    {
        return [
            self::DIAL_ON_DEMAND_ENABLE,
            self::DIAL_ON_DEMAND_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedialAllowableValues()
    {
        return [
            self::REDIAL_NONE,
            self::REDIAL__1,
            self::REDIAL__2,
            self::REDIAL__3,
            self::REDIAL__4,
            self::REDIAL__5,
            self::REDIAL__6,
            self::REDIAL__7,
            self::REDIAL__8,
            self::REDIAL__9,
            self::REDIAL__10,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDontSendCr1AllowableValues()
    {
        return [
            self::DONT_SEND_CR1_ENABLE,
            self::DONT_SEND_CR1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerModem1AllowableValues()
    {
        return [
            self::PEER_MODEM1_GENERIC,
            self::PEER_MODEM1_ACTIONTEC,
            self::PEER_MODEM1_ASCEND_TNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPppEchoRequest1AllowableValues()
    {
        return [
            self::PPP_ECHO_REQUEST1_ENABLE,
            self::PPP_ECHO_REQUEST1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthtype1AllowableValues()
    {
        return [
            self::AUTHTYPE1_PAP,
            self::AUTHTYPE1_CHAP,
            self::AUTHTYPE1_MSCHAP,
            self::AUTHTYPE1_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDontSendCr2AllowableValues()
    {
        return [
            self::DONT_SEND_CR2_ENABLE,
            self::DONT_SEND_CR2_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerModem2AllowableValues()
    {
        return [
            self::PEER_MODEM2_GENERIC,
            self::PEER_MODEM2_ACTIONTEC,
            self::PEER_MODEM2_ASCEND_TNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPppEchoRequest2AllowableValues()
    {
        return [
            self::PPP_ECHO_REQUEST2_ENABLE,
            self::PPP_ECHO_REQUEST2_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthtype2AllowableValues()
    {
        return [
            self::AUTHTYPE2_PAP,
            self::AUTHTYPE2_CHAP,
            self::AUTHTYPE2_MSCHAP,
            self::AUTHTYPE2_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDontSendCr3AllowableValues()
    {
        return [
            self::DONT_SEND_CR3_ENABLE,
            self::DONT_SEND_CR3_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerModem3AllowableValues()
    {
        return [
            self::PEER_MODEM3_GENERIC,
            self::PEER_MODEM3_ACTIONTEC,
            self::PEER_MODEM3_ASCEND_TNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPppEchoRequest3AllowableValues()
    {
        return [
            self::PPP_ECHO_REQUEST3_ENABLE,
            self::PPP_ECHO_REQUEST3_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAltmodeAllowableValues()
    {
        return [
            self::ALTMODE_ENABLE,
            self::ALTMODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthtype3AllowableValues()
    {
        return [
            self::AUTHTYPE3_PAP,
            self::AUTHTYPE3_CHAP,
            self::AUTHTYPE3_MSCHAP,
            self::AUTHTYPE3_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficCheckAllowableValues()
    {
        return [
            self::TRAFFIC_CHECK_ENABLE,
            self::TRAFFIC_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_DIAL,
            self::ACTION_STOP,
            self::ACTION_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['pin_init'] = $data['pin_init'] ?? null;
        $this->container['network_init'] = $data['network_init'] ?? null;
        $this->container['lockdown_lac'] = $data['lockdown_lac'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['auto_dial'] = $data['auto_dial'] ?? null;
        $this->container['dial_on_demand'] = $data['dial_on_demand'] ?? null;
        $this->container['idle_timer'] = $data['idle_timer'] ?? null;
        $this->container['redial'] = $data['redial'] ?? null;
        $this->container['reset'] = $data['reset'] ?? null;
        $this->container['holddown_timer'] = $data['holddown_timer'] ?? null;
        $this->container['connect_timeout'] = $data['connect_timeout'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['wireless_port'] = $data['wireless_port'] ?? null;
        $this->container['dont_send_cr1'] = $data['dont_send_cr1'] ?? null;
        $this->container['phone1'] = $data['phone1'] ?? null;
        $this->container['dial_cmd1'] = $data['dial_cmd1'] ?? null;
        $this->container['username1'] = $data['username1'] ?? null;
        $this->container['passwd1'] = $data['passwd1'] ?? null;
        $this->container['extra_init1'] = $data['extra_init1'] ?? null;
        $this->container['peer_modem1'] = $data['peer_modem1'] ?? null;
        $this->container['ppp_echo_request1'] = $data['ppp_echo_request1'] ?? null;
        $this->container['authtype1'] = $data['authtype1'] ?? null;
        $this->container['dont_send_cr2'] = $data['dont_send_cr2'] ?? null;
        $this->container['phone2'] = $data['phone2'] ?? null;
        $this->container['dial_cmd2'] = $data['dial_cmd2'] ?? null;
        $this->container['username2'] = $data['username2'] ?? null;
        $this->container['passwd2'] = $data['passwd2'] ?? null;
        $this->container['extra_init2'] = $data['extra_init2'] ?? null;
        $this->container['peer_modem2'] = $data['peer_modem2'] ?? null;
        $this->container['ppp_echo_request2'] = $data['ppp_echo_request2'] ?? null;
        $this->container['authtype2'] = $data['authtype2'] ?? null;
        $this->container['dont_send_cr3'] = $data['dont_send_cr3'] ?? null;
        $this->container['phone3'] = $data['phone3'] ?? null;
        $this->container['dial_cmd3'] = $data['dial_cmd3'] ?? null;
        $this->container['username3'] = $data['username3'] ?? null;
        $this->container['passwd3'] = $data['passwd3'] ?? null;
        $this->container['extra_init3'] = $data['extra_init3'] ?? null;
        $this->container['peer_modem3'] = $data['peer_modem3'] ?? null;
        $this->container['ppp_echo_request3'] = $data['ppp_echo_request3'] ?? null;
        $this->container['altmode'] = $data['altmode'] ?? null;
        $this->container['authtype3'] = $data['authtype3'] ?? null;
        $this->container['traffic_check'] = $data['traffic_check'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pin_init']) && (mb_strlen($this->container['pin_init']) > 127)) {
            $invalidProperties[] = "invalid value for 'pin_init', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['network_init']) && (mb_strlen($this->container['network_init']) > 127)) {
            $invalidProperties[] = "invalid value for 'network_init', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['lockdown_lac']) && (mb_strlen($this->container['lockdown_lac']) > 127)) {
            $invalidProperties[] = "invalid value for 'lockdown_lac', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoDialAllowableValues();
        if (!is_null($this->container['auto_dial']) && !in_array($this->container['auto_dial'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_dial', must be one of '%s'",
                $this->container['auto_dial'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDialOnDemandAllowableValues();
        if (!is_null($this->container['dial_on_demand']) && !in_array($this->container['dial_on_demand'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dial_on_demand', must be one of '%s'",
                $this->container['dial_on_demand'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['idle_timer']) && ($this->container['idle_timer'] > 9999)) {
            $invalidProperties[] = "invalid value for 'idle_timer', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['idle_timer']) && ($this->container['idle_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'idle_timer', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRedialAllowableValues();
        if (!is_null($this->container['redial']) && !in_array($this->container['redial'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redial', must be one of '%s'",
                $this->container['redial'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reset']) && ($this->container['reset'] > 10)) {
            $invalidProperties[] = "invalid value for 'reset', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reset']) && ($this->container['reset'] < 0)) {
            $invalidProperties[] = "invalid value for 'reset', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['holddown_timer']) && ($this->container['holddown_timer'] > 60)) {
            $invalidProperties[] = "invalid value for 'holddown_timer', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['holddown_timer']) && ($this->container['holddown_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'holddown_timer', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['connect_timeout']) && ($this->container['connect_timeout'] > 255)) {
            $invalidProperties[] = "invalid value for 'connect_timeout', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['connect_timeout']) && ($this->container['connect_timeout'] < 30)) {
            $invalidProperties[] = "invalid value for 'connect_timeout', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 63)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['wireless_port']) && ($this->container['wireless_port'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'wireless_port', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['wireless_port']) && ($this->container['wireless_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'wireless_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDontSendCr1AllowableValues();
        if (!is_null($this->container['dont_send_cr1']) && !in_array($this->container['dont_send_cr1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dont_send_cr1', must be one of '%s'",
                $this->container['dont_send_cr1'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phone1']) && (mb_strlen($this->container['phone1']) > 63)) {
            $invalidProperties[] = "invalid value for 'phone1', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dial_cmd1']) && (mb_strlen($this->container['dial_cmd1']) > 63)) {
            $invalidProperties[] = "invalid value for 'dial_cmd1', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['username1']) && (mb_strlen($this->container['username1']) > 63)) {
            $invalidProperties[] = "invalid value for 'username1', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['extra_init1']) && (mb_strlen($this->container['extra_init1']) > 127)) {
            $invalidProperties[] = "invalid value for 'extra_init1', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getPeerModem1AllowableValues();
        if (!is_null($this->container['peer_modem1']) && !in_array($this->container['peer_modem1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_modem1', must be one of '%s'",
                $this->container['peer_modem1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPppEchoRequest1AllowableValues();
        if (!is_null($this->container['ppp_echo_request1']) && !in_array($this->container['ppp_echo_request1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ppp_echo_request1', must be one of '%s'",
                $this->container['ppp_echo_request1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthtype1AllowableValues();
        if (!is_null($this->container['authtype1']) && !in_array($this->container['authtype1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authtype1', must be one of '%s'",
                $this->container['authtype1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDontSendCr2AllowableValues();
        if (!is_null($this->container['dont_send_cr2']) && !in_array($this->container['dont_send_cr2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dont_send_cr2', must be one of '%s'",
                $this->container['dont_send_cr2'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phone2']) && (mb_strlen($this->container['phone2']) > 63)) {
            $invalidProperties[] = "invalid value for 'phone2', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dial_cmd2']) && (mb_strlen($this->container['dial_cmd2']) > 63)) {
            $invalidProperties[] = "invalid value for 'dial_cmd2', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['username2']) && (mb_strlen($this->container['username2']) > 63)) {
            $invalidProperties[] = "invalid value for 'username2', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['extra_init2']) && (mb_strlen($this->container['extra_init2']) > 127)) {
            $invalidProperties[] = "invalid value for 'extra_init2', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getPeerModem2AllowableValues();
        if (!is_null($this->container['peer_modem2']) && !in_array($this->container['peer_modem2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_modem2', must be one of '%s'",
                $this->container['peer_modem2'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPppEchoRequest2AllowableValues();
        if (!is_null($this->container['ppp_echo_request2']) && !in_array($this->container['ppp_echo_request2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ppp_echo_request2', must be one of '%s'",
                $this->container['ppp_echo_request2'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthtype2AllowableValues();
        if (!is_null($this->container['authtype2']) && !in_array($this->container['authtype2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authtype2', must be one of '%s'",
                $this->container['authtype2'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDontSendCr3AllowableValues();
        if (!is_null($this->container['dont_send_cr3']) && !in_array($this->container['dont_send_cr3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dont_send_cr3', must be one of '%s'",
                $this->container['dont_send_cr3'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phone3']) && (mb_strlen($this->container['phone3']) > 63)) {
            $invalidProperties[] = "invalid value for 'phone3', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dial_cmd3']) && (mb_strlen($this->container['dial_cmd3']) > 63)) {
            $invalidProperties[] = "invalid value for 'dial_cmd3', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['username3']) && (mb_strlen($this->container['username3']) > 63)) {
            $invalidProperties[] = "invalid value for 'username3', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['extra_init3']) && (mb_strlen($this->container['extra_init3']) > 127)) {
            $invalidProperties[] = "invalid value for 'extra_init3', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getPeerModem3AllowableValues();
        if (!is_null($this->container['peer_modem3']) && !in_array($this->container['peer_modem3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_modem3', must be one of '%s'",
                $this->container['peer_modem3'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPppEchoRequest3AllowableValues();
        if (!is_null($this->container['ppp_echo_request3']) && !in_array($this->container['ppp_echo_request3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ppp_echo_request3', must be one of '%s'",
                $this->container['ppp_echo_request3'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAltmodeAllowableValues();
        if (!is_null($this->container['altmode']) && !in_array($this->container['altmode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'altmode', must be one of '%s'",
                $this->container['altmode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthtype3AllowableValues();
        if (!is_null($this->container['authtype3']) && !in_array($this->container['authtype3'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authtype3', must be one of '%s'",
                $this->container['authtype3'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrafficCheckAllowableValues();
        if (!is_null($this->container['traffic_check']) && !in_array($this->container['traffic_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'traffic_check', must be one of '%s'",
                $this->container['traffic_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable Modem support (equivalent to bringing an interface up or down).    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pin_init
     *
     * @return string|null
     */
    public function getPinInit()
    {
        return $this->container['pin_init'];
    }

    /**
     * Sets pin_init
     *
     * @param string|null $pin_init AT command to set the PIN (AT+PIN=<pin>).
     *
     * @return self
     */
    public function setPinInit($pin_init)
    {
        if (!is_null($pin_init) && (mb_strlen($pin_init) > 127)) {
            throw new \InvalidArgumentException('invalid length for $pin_init when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['pin_init'] = $pin_init;

        return $this;
    }

    /**
     * Gets network_init
     *
     * @return string|null
     */
    public function getNetworkInit()
    {
        return $this->container['network_init'];
    }

    /**
     * Sets network_init
     *
     * @param string|null $network_init AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
     *
     * @return self
     */
    public function setNetworkInit($network_init)
    {
        if (!is_null($network_init) && (mb_strlen($network_init) > 127)) {
            throw new \InvalidArgumentException('invalid length for $network_init when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['network_init'] = $network_init;

        return $this;
    }

    /**
     * Gets lockdown_lac
     *
     * @return string|null
     */
    public function getLockdownLac()
    {
        return $this->container['lockdown_lac'];
    }

    /**
     * Sets lockdown_lac
     *
     * @param string|null $lockdown_lac Allow connection only to the specified Location Area Code (LAC).
     *
     * @return self
     */
    public function setLockdownLac($lockdown_lac)
    {
        if (!is_null($lockdown_lac) && (mb_strlen($lockdown_lac) > 127)) {
            throw new \InvalidArgumentException('invalid length for $lockdown_lac when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['lockdown_lac'] = $lockdown_lac;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Set MODEM operation mode to redundant or standalone.    standalone:Standalone.    redundant:Redundant for an interface.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets auto_dial
     *
     * @return string|null
     */
    public function getAutoDial()
    {
        return $this->container['auto_dial'];
    }

    /**
     * Sets auto_dial
     *
     * @param string|null $auto_dial Enable/disable auto-dial after a reboot or disconnection.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAutoDial($auto_dial)
    {
        $allowedValues = $this->getAutoDialAllowableValues();
        if (!is_null($auto_dial) && !in_array($auto_dial, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_dial', must be one of '%s'",
                    $auto_dial,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_dial'] = $auto_dial;

        return $this;
    }

    /**
     * Gets dial_on_demand
     *
     * @return string|null
     */
    public function getDialOnDemand()
    {
        return $this->container['dial_on_demand'];
    }

    /**
     * Sets dial_on_demand
     *
     * @param string|null $dial_on_demand Enable/disable to dial the modem when packets are routed to the modem interface.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDialOnDemand($dial_on_demand)
    {
        $allowedValues = $this->getDialOnDemandAllowableValues();
        if (!is_null($dial_on_demand) && !in_array($dial_on_demand, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dial_on_demand', must be one of '%s'",
                    $dial_on_demand,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dial_on_demand'] = $dial_on_demand;

        return $this;
    }

    /**
     * Gets idle_timer
     *
     * @return int|null
     */
    public function getIdleTimer()
    {
        return $this->container['idle_timer'];
    }

    /**
     * Sets idle_timer
     *
     * @param int|null $idle_timer MODEM connection idle time (1 - 9999 min, default = 5).
     *
     * @return self
     */
    public function setIdleTimer($idle_timer)
    {

        if (!is_null($idle_timer) && ($idle_timer > 9999)) {
            throw new \InvalidArgumentException('invalid value for $idle_timer when calling InlineObject343., must be smaller than or equal to 9999.');
        }
        if (!is_null($idle_timer) && ($idle_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $idle_timer when calling InlineObject343., must be bigger than or equal to 1.');
        }

        $this->container['idle_timer'] = $idle_timer;

        return $this;
    }

    /**
     * Gets redial
     *
     * @return string|null
     */
    public function getRedial()
    {
        return $this->container['redial'];
    }

    /**
     * Sets redial
     *
     * @param string|null $redial Redial limit (1 - 10 attempts, none = redial forever).    none:Forever.    1:One attempt.    2:Two attempts.    3:Three attempts.    4:Four attempts.    5:Five attempts.    6:Six attempts.    7:Seven attempts.    8:Eight attempts.    9:Nine attempts.    10:Ten attempts.
     *
     * @return self
     */
    public function setRedial($redial)
    {
        $allowedValues = $this->getRedialAllowableValues();
        if (!is_null($redial) && !in_array($redial, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redial', must be one of '%s'",
                    $redial,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redial'] = $redial;

        return $this;
    }

    /**
     * Gets reset
     *
     * @return int|null
     */
    public function getReset()
    {
        return $this->container['reset'];
    }

    /**
     * Sets reset
     *
     * @param int|null $reset Number of dial attempts before resetting modem (0 = never reset).
     *
     * @return self
     */
    public function setReset($reset)
    {

        if (!is_null($reset) && ($reset > 10)) {
            throw new \InvalidArgumentException('invalid value for $reset when calling InlineObject343., must be smaller than or equal to 10.');
        }
        if (!is_null($reset) && ($reset < 0)) {
            throw new \InvalidArgumentException('invalid value for $reset when calling InlineObject343., must be bigger than or equal to 0.');
        }

        $this->container['reset'] = $reset;

        return $this;
    }

    /**
     * Gets holddown_timer
     *
     * @return int|null
     */
    public function getHolddownTimer()
    {
        return $this->container['holddown_timer'];
    }

    /**
     * Sets holddown_timer
     *
     * @param int|null $holddown_timer Hold down timer in seconds (1 - 60 sec).
     *
     * @return self
     */
    public function setHolddownTimer($holddown_timer)
    {

        if (!is_null($holddown_timer) && ($holddown_timer > 60)) {
            throw new \InvalidArgumentException('invalid value for $holddown_timer when calling InlineObject343., must be smaller than or equal to 60.');
        }
        if (!is_null($holddown_timer) && ($holddown_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $holddown_timer when calling InlineObject343., must be bigger than or equal to 1.');
        }

        $this->container['holddown_timer'] = $holddown_timer;

        return $this;
    }

    /**
     * Gets connect_timeout
     *
     * @return int|null
     */
    public function getConnectTimeout()
    {
        return $this->container['connect_timeout'];
    }

    /**
     * Sets connect_timeout
     *
     * @param int|null $connect_timeout Connection completion timeout (30 - 255 sec, default = 90).
     *
     * @return self
     */
    public function setConnectTimeout($connect_timeout)
    {

        if (!is_null($connect_timeout) && ($connect_timeout > 255)) {
            throw new \InvalidArgumentException('invalid value for $connect_timeout when calling InlineObject343., must be smaller than or equal to 255.');
        }
        if (!is_null($connect_timeout) && ($connect_timeout < 30)) {
            throw new \InvalidArgumentException('invalid value for $connect_timeout when calling InlineObject343., must be bigger than or equal to 30.');
        }

        $this->container['connect_timeout'] = $connect_timeout;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Name of redundant interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 63)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets wireless_port
     *
     * @return int|null
     */
    public function getWirelessPort()
    {
        return $this->container['wireless_port'];
    }

    /**
     * Sets wireless_port
     *
     * @param int|null $wireless_port Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
     *
     * @return self
     */
    public function setWirelessPort($wireless_port)
    {

        if (!is_null($wireless_port) && ($wireless_port > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $wireless_port when calling InlineObject343., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($wireless_port) && ($wireless_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $wireless_port when calling InlineObject343., must be bigger than or equal to 0.');
        }

        $this->container['wireless_port'] = $wireless_port;

        return $this;
    }

    /**
     * Gets dont_send_cr1
     *
     * @return string|null
     */
    public function getDontSendCr1()
    {
        return $this->container['dont_send_cr1'];
    }

    /**
     * Sets dont_send_cr1
     *
     * @param string|null $dont_send_cr1 Do not send CR when connected (ISP1).    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDontSendCr1($dont_send_cr1)
    {
        $allowedValues = $this->getDontSendCr1AllowableValues();
        if (!is_null($dont_send_cr1) && !in_array($dont_send_cr1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dont_send_cr1', must be one of '%s'",
                    $dont_send_cr1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dont_send_cr1'] = $dont_send_cr1;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (!is_null($phone1) && (mb_strlen($phone1) > 63)) {
            throw new \InvalidArgumentException('invalid length for $phone1 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets dial_cmd1
     *
     * @return string|null
     */
    public function getDialCmd1()
    {
        return $this->container['dial_cmd1'];
    }

    /**
     * Sets dial_cmd1
     *
     * @param string|null $dial_cmd1 Dial command (this is often an ATD or ATDT command).
     *
     * @return self
     */
    public function setDialCmd1($dial_cmd1)
    {
        if (!is_null($dial_cmd1) && (mb_strlen($dial_cmd1) > 63)) {
            throw new \InvalidArgumentException('invalid length for $dial_cmd1 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['dial_cmd1'] = $dial_cmd1;

        return $this;
    }

    /**
     * Gets username1
     *
     * @return string|null
     */
    public function getUsername1()
    {
        return $this->container['username1'];
    }

    /**
     * Sets username1
     *
     * @param string|null $username1 User name to access the specified dialup account.
     *
     * @return self
     */
    public function setUsername1($username1)
    {
        if (!is_null($username1) && (mb_strlen($username1) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username1 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['username1'] = $username1;

        return $this;
    }

    /**
     * Gets passwd1
     *
     * @return string|null
     */
    public function getPasswd1()
    {
        return $this->container['passwd1'];
    }

    /**
     * Sets passwd1
     *
     * @param string|null $passwd1 Password to access the specified dialup account.
     *
     * @return self
     */
    public function setPasswd1($passwd1)
    {
        $this->container['passwd1'] = $passwd1;

        return $this;
    }

    /**
     * Gets extra_init1
     *
     * @return string|null
     */
    public function getExtraInit1()
    {
        return $this->container['extra_init1'];
    }

    /**
     * Sets extra_init1
     *
     * @param string|null $extra_init1 Extra initialization string to ISP 1.
     *
     * @return self
     */
    public function setExtraInit1($extra_init1)
    {
        if (!is_null($extra_init1) && (mb_strlen($extra_init1) > 127)) {
            throw new \InvalidArgumentException('invalid length for $extra_init1 when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['extra_init1'] = $extra_init1;

        return $this;
    }

    /**
     * Gets peer_modem1
     *
     * @return string|null
     */
    public function getPeerModem1()
    {
        return $this->container['peer_modem1'];
    }

    /**
     * Sets peer_modem1
     *
     * @param string|null $peer_modem1 Specify peer MODEM type for phone1.    generic:All other modem type.    actiontec:ActionTec modem.    ascend_TNT:Ascend TNT modem.
     *
     * @return self
     */
    public function setPeerModem1($peer_modem1)
    {
        $allowedValues = $this->getPeerModem1AllowableValues();
        if (!is_null($peer_modem1) && !in_array($peer_modem1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_modem1', must be one of '%s'",
                    $peer_modem1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_modem1'] = $peer_modem1;

        return $this;
    }

    /**
     * Gets ppp_echo_request1
     *
     * @return string|null
     */
    public function getPppEchoRequest1()
    {
        return $this->container['ppp_echo_request1'];
    }

    /**
     * Sets ppp_echo_request1
     *
     * @param string|null $ppp_echo_request1 Enable/disable PPP echo-request to ISP 1.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setPppEchoRequest1($ppp_echo_request1)
    {
        $allowedValues = $this->getPppEchoRequest1AllowableValues();
        if (!is_null($ppp_echo_request1) && !in_array($ppp_echo_request1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ppp_echo_request1', must be one of '%s'",
                    $ppp_echo_request1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ppp_echo_request1'] = $ppp_echo_request1;

        return $this;
    }

    /**
     * Gets authtype1
     *
     * @return string|null
     */
    public function getAuthtype1()
    {
        return $this->container['authtype1'];
    }

    /**
     * Sets authtype1
     *
     * @param string|null $authtype1 Allowed authentication types for ISP 1.    pap:PAP    chap:CHAP    mschap:MSCHAP    mschapv2:MSCHAPv2
     *
     * @return self
     */
    public function setAuthtype1($authtype1)
    {
        $allowedValues = $this->getAuthtype1AllowableValues();
        if (!is_null($authtype1) && !in_array($authtype1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authtype1', must be one of '%s'",
                    $authtype1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authtype1'] = $authtype1;

        return $this;
    }

    /**
     * Gets dont_send_cr2
     *
     * @return string|null
     */
    public function getDontSendCr2()
    {
        return $this->container['dont_send_cr2'];
    }

    /**
     * Sets dont_send_cr2
     *
     * @param string|null $dont_send_cr2 Do not send CR when connected (ISP2).    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDontSendCr2($dont_send_cr2)
    {
        $allowedValues = $this->getDontSendCr2AllowableValues();
        if (!is_null($dont_send_cr2) && !in_array($dont_send_cr2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dont_send_cr2', must be one of '%s'",
                    $dont_send_cr2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dont_send_cr2'] = $dont_send_cr2;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (!is_null($phone2) && (mb_strlen($phone2) > 63)) {
            throw new \InvalidArgumentException('invalid length for $phone2 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets dial_cmd2
     *
     * @return string|null
     */
    public function getDialCmd2()
    {
        return $this->container['dial_cmd2'];
    }

    /**
     * Sets dial_cmd2
     *
     * @param string|null $dial_cmd2 Dial command (this is often an ATD or ATDT command).
     *
     * @return self
     */
    public function setDialCmd2($dial_cmd2)
    {
        if (!is_null($dial_cmd2) && (mb_strlen($dial_cmd2) > 63)) {
            throw new \InvalidArgumentException('invalid length for $dial_cmd2 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['dial_cmd2'] = $dial_cmd2;

        return $this;
    }

    /**
     * Gets username2
     *
     * @return string|null
     */
    public function getUsername2()
    {
        return $this->container['username2'];
    }

    /**
     * Sets username2
     *
     * @param string|null $username2 User name to access the specified dialup account.
     *
     * @return self
     */
    public function setUsername2($username2)
    {
        if (!is_null($username2) && (mb_strlen($username2) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username2 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['username2'] = $username2;

        return $this;
    }

    /**
     * Gets passwd2
     *
     * @return string|null
     */
    public function getPasswd2()
    {
        return $this->container['passwd2'];
    }

    /**
     * Sets passwd2
     *
     * @param string|null $passwd2 Password to access the specified dialup account.
     *
     * @return self
     */
    public function setPasswd2($passwd2)
    {
        $this->container['passwd2'] = $passwd2;

        return $this;
    }

    /**
     * Gets extra_init2
     *
     * @return string|null
     */
    public function getExtraInit2()
    {
        return $this->container['extra_init2'];
    }

    /**
     * Sets extra_init2
     *
     * @param string|null $extra_init2 Extra initialization string to ISP 2.
     *
     * @return self
     */
    public function setExtraInit2($extra_init2)
    {
        if (!is_null($extra_init2) && (mb_strlen($extra_init2) > 127)) {
            throw new \InvalidArgumentException('invalid length for $extra_init2 when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['extra_init2'] = $extra_init2;

        return $this;
    }

    /**
     * Gets peer_modem2
     *
     * @return string|null
     */
    public function getPeerModem2()
    {
        return $this->container['peer_modem2'];
    }

    /**
     * Sets peer_modem2
     *
     * @param string|null $peer_modem2 Specify peer MODEM type for phone2.    generic:All other modem type.    actiontec:ActionTec modem.    ascend_TNT:Ascend TNT modem.
     *
     * @return self
     */
    public function setPeerModem2($peer_modem2)
    {
        $allowedValues = $this->getPeerModem2AllowableValues();
        if (!is_null($peer_modem2) && !in_array($peer_modem2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_modem2', must be one of '%s'",
                    $peer_modem2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_modem2'] = $peer_modem2;

        return $this;
    }

    /**
     * Gets ppp_echo_request2
     *
     * @return string|null
     */
    public function getPppEchoRequest2()
    {
        return $this->container['ppp_echo_request2'];
    }

    /**
     * Sets ppp_echo_request2
     *
     * @param string|null $ppp_echo_request2 Enable/disable PPP echo-request to ISP 2.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setPppEchoRequest2($ppp_echo_request2)
    {
        $allowedValues = $this->getPppEchoRequest2AllowableValues();
        if (!is_null($ppp_echo_request2) && !in_array($ppp_echo_request2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ppp_echo_request2', must be one of '%s'",
                    $ppp_echo_request2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ppp_echo_request2'] = $ppp_echo_request2;

        return $this;
    }

    /**
     * Gets authtype2
     *
     * @return string|null
     */
    public function getAuthtype2()
    {
        return $this->container['authtype2'];
    }

    /**
     * Sets authtype2
     *
     * @param string|null $authtype2 Allowed authentication types for ISP 2.    pap:PAP    chap:CHAP    mschap:MSCHAP    mschapv2:MSCHAPv2
     *
     * @return self
     */
    public function setAuthtype2($authtype2)
    {
        $allowedValues = $this->getAuthtype2AllowableValues();
        if (!is_null($authtype2) && !in_array($authtype2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authtype2', must be one of '%s'",
                    $authtype2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authtype2'] = $authtype2;

        return $this;
    }

    /**
     * Gets dont_send_cr3
     *
     * @return string|null
     */
    public function getDontSendCr3()
    {
        return $this->container['dont_send_cr3'];
    }

    /**
     * Sets dont_send_cr3
     *
     * @param string|null $dont_send_cr3 Do not send CR when connected (ISP3).    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDontSendCr3($dont_send_cr3)
    {
        $allowedValues = $this->getDontSendCr3AllowableValues();
        if (!is_null($dont_send_cr3) && !in_array($dont_send_cr3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dont_send_cr3', must be one of '%s'",
                    $dont_send_cr3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dont_send_cr3'] = $dont_send_cr3;

        return $this;
    }

    /**
     * Gets phone3
     *
     * @return string|null
     */
    public function getPhone3()
    {
        return $this->container['phone3'];
    }

    /**
     * Sets phone3
     *
     * @param string|null $phone3 Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     *
     * @return self
     */
    public function setPhone3($phone3)
    {
        if (!is_null($phone3) && (mb_strlen($phone3) > 63)) {
            throw new \InvalidArgumentException('invalid length for $phone3 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['phone3'] = $phone3;

        return $this;
    }

    /**
     * Gets dial_cmd3
     *
     * @return string|null
     */
    public function getDialCmd3()
    {
        return $this->container['dial_cmd3'];
    }

    /**
     * Sets dial_cmd3
     *
     * @param string|null $dial_cmd3 Dial command (this is often an ATD or ATDT command).
     *
     * @return self
     */
    public function setDialCmd3($dial_cmd3)
    {
        if (!is_null($dial_cmd3) && (mb_strlen($dial_cmd3) > 63)) {
            throw new \InvalidArgumentException('invalid length for $dial_cmd3 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['dial_cmd3'] = $dial_cmd3;

        return $this;
    }

    /**
     * Gets username3
     *
     * @return string|null
     */
    public function getUsername3()
    {
        return $this->container['username3'];
    }

    /**
     * Sets username3
     *
     * @param string|null $username3 User name to access the specified dialup account.
     *
     * @return self
     */
    public function setUsername3($username3)
    {
        if (!is_null($username3) && (mb_strlen($username3) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username3 when calling InlineObject343., must be smaller than or equal to 63.');
        }

        $this->container['username3'] = $username3;

        return $this;
    }

    /**
     * Gets passwd3
     *
     * @return string|null
     */
    public function getPasswd3()
    {
        return $this->container['passwd3'];
    }

    /**
     * Sets passwd3
     *
     * @param string|null $passwd3 Password to access the specified dialup account.
     *
     * @return self
     */
    public function setPasswd3($passwd3)
    {
        $this->container['passwd3'] = $passwd3;

        return $this;
    }

    /**
     * Gets extra_init3
     *
     * @return string|null
     */
    public function getExtraInit3()
    {
        return $this->container['extra_init3'];
    }

    /**
     * Sets extra_init3
     *
     * @param string|null $extra_init3 Extra initialization string to ISP 3.
     *
     * @return self
     */
    public function setExtraInit3($extra_init3)
    {
        if (!is_null($extra_init3) && (mb_strlen($extra_init3) > 127)) {
            throw new \InvalidArgumentException('invalid length for $extra_init3 when calling InlineObject343., must be smaller than or equal to 127.');
        }

        $this->container['extra_init3'] = $extra_init3;

        return $this;
    }

    /**
     * Gets peer_modem3
     *
     * @return string|null
     */
    public function getPeerModem3()
    {
        return $this->container['peer_modem3'];
    }

    /**
     * Sets peer_modem3
     *
     * @param string|null $peer_modem3 Specify peer MODEM type for phone3.    generic:All other modem type.    actiontec:ActionTec modem.    ascend_TNT:Ascend TNT modem.
     *
     * @return self
     */
    public function setPeerModem3($peer_modem3)
    {
        $allowedValues = $this->getPeerModem3AllowableValues();
        if (!is_null($peer_modem3) && !in_array($peer_modem3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_modem3', must be one of '%s'",
                    $peer_modem3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_modem3'] = $peer_modem3;

        return $this;
    }

    /**
     * Gets ppp_echo_request3
     *
     * @return string|null
     */
    public function getPppEchoRequest3()
    {
        return $this->container['ppp_echo_request3'];
    }

    /**
     * Sets ppp_echo_request3
     *
     * @param string|null $ppp_echo_request3 Enable/disable PPP echo-request to ISP 3.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setPppEchoRequest3($ppp_echo_request3)
    {
        $allowedValues = $this->getPppEchoRequest3AllowableValues();
        if (!is_null($ppp_echo_request3) && !in_array($ppp_echo_request3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ppp_echo_request3', must be one of '%s'",
                    $ppp_echo_request3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ppp_echo_request3'] = $ppp_echo_request3;

        return $this;
    }

    /**
     * Gets altmode
     *
     * @return string|null
     */
    public function getAltmode()
    {
        return $this->container['altmode'];
    }

    /**
     * Sets altmode
     *
     * @param string|null $altmode Enable/disable altmode for installations using PPP in China.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAltmode($altmode)
    {
        $allowedValues = $this->getAltmodeAllowableValues();
        if (!is_null($altmode) && !in_array($altmode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'altmode', must be one of '%s'",
                    $altmode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['altmode'] = $altmode;

        return $this;
    }

    /**
     * Gets authtype3
     *
     * @return string|null
     */
    public function getAuthtype3()
    {
        return $this->container['authtype3'];
    }

    /**
     * Sets authtype3
     *
     * @param string|null $authtype3 Allowed authentication types for ISP 3.    pap:PAP    chap:CHAP    mschap:MSCHAP    mschapv2:MSCHAPv2
     *
     * @return self
     */
    public function setAuthtype3($authtype3)
    {
        $allowedValues = $this->getAuthtype3AllowableValues();
        if (!is_null($authtype3) && !in_array($authtype3, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authtype3', must be one of '%s'",
                    $authtype3,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authtype3'] = $authtype3;

        return $this;
    }

    /**
     * Gets traffic_check
     *
     * @return string|null
     */
    public function getTrafficCheck()
    {
        return $this->container['traffic_check'];
    }

    /**
     * Sets traffic_check
     *
     * @param string|null $traffic_check Enable/disable traffic-check.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setTrafficCheck($traffic_check)
    {
        $allowedValues = $this->getTrafficCheckAllowableValues();
        if (!is_null($traffic_check) && !in_array($traffic_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'traffic_check', must be one of '%s'",
                    $traffic_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traffic_check'] = $traffic_check;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Dial up/stop MODEM.    dial:Dial up number.    stop:Stop dialup.    none:No action.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Distance of learned routes (1 - 255, default = 1).
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject343., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject343., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority of learned routes (0 - 4294967295, default = 0).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject343., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject343., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


