<?php
/**
 * InlineObject432
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject432 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject432 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_432';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'server' => 'string',
        'secondary_server' => 'string',
        'tertiary_server' => 'string',
        'server_identity_check' => 'string',
        'source_ip' => 'string',
        'cnid' => 'string',
        'dn' => 'string',
        'type' => 'string',
        'two_factor' => 'string',
        'two_factor_authentication' => 'string',
        'two_factor_notification' => 'string',
        'username' => 'string',
        'password' => 'string',
        'group_member_check' => 'string',
        'group_search_base' => 'string',
        'group_object_filter' => 'string',
        'group_filter' => 'string',
        'secure' => 'string',
        'ssl_min_proto_version' => 'string',
        'ca_cert' => 'string',
        'port' => 'int',
        'password_expiry_warning' => 'string',
        'password_renewal' => 'string',
        'member_attr' => 'string',
        'account_key_processing' => 'string',
        'account_key_filter' => 'string',
        'search_type' => 'string',
        'obtain_user_info' => 'string',
        'user_info_exchange_server' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'server' => null,
        'secondary_server' => null,
        'tertiary_server' => null,
        'server_identity_check' => null,
        'source_ip' => 'ipv4',
        'cnid' => null,
        'dn' => null,
        'type' => null,
        'two_factor' => null,
        'two_factor_authentication' => null,
        'two_factor_notification' => null,
        'username' => null,
        'password' => 'password',
        'group_member_check' => null,
        'group_search_base' => null,
        'group_object_filter' => null,
        'group_filter' => null,
        'secure' => null,
        'ssl_min_proto_version' => null,
        'ca_cert' => null,
        'port' => null,
        'password_expiry_warning' => null,
        'password_renewal' => null,
        'member_attr' => null,
        'account_key_processing' => null,
        'account_key_filter' => null,
        'search_type' => null,
        'obtain_user_info' => null,
        'user_info_exchange_server' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'server' => 'server',
        'secondary_server' => 'secondary-server',
        'tertiary_server' => 'tertiary-server',
        'server_identity_check' => 'server-identity-check',
        'source_ip' => 'source-ip',
        'cnid' => 'cnid',
        'dn' => 'dn',
        'type' => 'type',
        'two_factor' => 'two-factor',
        'two_factor_authentication' => 'two-factor-authentication',
        'two_factor_notification' => 'two-factor-notification',
        'username' => 'username',
        'password' => 'password',
        'group_member_check' => 'group-member-check',
        'group_search_base' => 'group-search-base',
        'group_object_filter' => 'group-object-filter',
        'group_filter' => 'group-filter',
        'secure' => 'secure',
        'ssl_min_proto_version' => 'ssl-min-proto-version',
        'ca_cert' => 'ca-cert',
        'port' => 'port',
        'password_expiry_warning' => 'password-expiry-warning',
        'password_renewal' => 'password-renewal',
        'member_attr' => 'member-attr',
        'account_key_processing' => 'account-key-processing',
        'account_key_filter' => 'account-key-filter',
        'search_type' => 'search-type',
        'obtain_user_info' => 'obtain-user-info',
        'user_info_exchange_server' => 'user-info-exchange-server',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'server' => 'setServer',
        'secondary_server' => 'setSecondaryServer',
        'tertiary_server' => 'setTertiaryServer',
        'server_identity_check' => 'setServerIdentityCheck',
        'source_ip' => 'setSourceIp',
        'cnid' => 'setCnid',
        'dn' => 'setDn',
        'type' => 'setType',
        'two_factor' => 'setTwoFactor',
        'two_factor_authentication' => 'setTwoFactorAuthentication',
        'two_factor_notification' => 'setTwoFactorNotification',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'group_member_check' => 'setGroupMemberCheck',
        'group_search_base' => 'setGroupSearchBase',
        'group_object_filter' => 'setGroupObjectFilter',
        'group_filter' => 'setGroupFilter',
        'secure' => 'setSecure',
        'ssl_min_proto_version' => 'setSslMinProtoVersion',
        'ca_cert' => 'setCaCert',
        'port' => 'setPort',
        'password_expiry_warning' => 'setPasswordExpiryWarning',
        'password_renewal' => 'setPasswordRenewal',
        'member_attr' => 'setMemberAttr',
        'account_key_processing' => 'setAccountKeyProcessing',
        'account_key_filter' => 'setAccountKeyFilter',
        'search_type' => 'setSearchType',
        'obtain_user_info' => 'setObtainUserInfo',
        'user_info_exchange_server' => 'setUserInfoExchangeServer',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'server' => 'getServer',
        'secondary_server' => 'getSecondaryServer',
        'tertiary_server' => 'getTertiaryServer',
        'server_identity_check' => 'getServerIdentityCheck',
        'source_ip' => 'getSourceIp',
        'cnid' => 'getCnid',
        'dn' => 'getDn',
        'type' => 'getType',
        'two_factor' => 'getTwoFactor',
        'two_factor_authentication' => 'getTwoFactorAuthentication',
        'two_factor_notification' => 'getTwoFactorNotification',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'group_member_check' => 'getGroupMemberCheck',
        'group_search_base' => 'getGroupSearchBase',
        'group_object_filter' => 'getGroupObjectFilter',
        'group_filter' => 'getGroupFilter',
        'secure' => 'getSecure',
        'ssl_min_proto_version' => 'getSslMinProtoVersion',
        'ca_cert' => 'getCaCert',
        'port' => 'getPort',
        'password_expiry_warning' => 'getPasswordExpiryWarning',
        'password_renewal' => 'getPasswordRenewal',
        'member_attr' => 'getMemberAttr',
        'account_key_processing' => 'getAccountKeyProcessing',
        'account_key_filter' => 'getAccountKeyFilter',
        'search_type' => 'getSearchType',
        'obtain_user_info' => 'getObtainUserInfo',
        'user_info_exchange_server' => 'getUserInfoExchangeServer',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SERVER_IDENTITY_CHECK_ENABLE = 'enable';
    const SERVER_IDENTITY_CHECK_DISABLE = 'disable';
    const TYPE_SIMPLE = 'simple';
    const TYPE_ANONYMOUS = 'anonymous';
    const TYPE_REGULAR = 'regular';
    const TWO_FACTOR_DISABLE = 'disable';
    const TWO_FACTOR_FORTITOKEN_CLOUD = 'fortitoken-cloud';
    const TWO_FACTOR_AUTHENTICATION_FORTITOKEN = 'fortitoken';
    const TWO_FACTOR_AUTHENTICATION_EMAIL = 'email';
    const TWO_FACTOR_AUTHENTICATION_SMS = 'sms';
    const TWO_FACTOR_NOTIFICATION_EMAIL = 'email';
    const TWO_FACTOR_NOTIFICATION_SMS = 'sms';
    const GROUP_MEMBER_CHECK_USER_ATTR = 'user-attr';
    const GROUP_MEMBER_CHECK_GROUP_OBJECT = 'group-object';
    const GROUP_MEMBER_CHECK_POSIX_GROUP_OBJECT = 'posix-group-object';
    const SECURE_DISABLE = 'disable';
    const SECURE_STARTTLS = 'starttls';
    const SECURE_LDAPS = 'ldaps';
    const SSL_MIN_PROTO_VERSION__DEFAULT = 'default';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    const PASSWORD_EXPIRY_WARNING_ENABLE = 'enable';
    const PASSWORD_EXPIRY_WARNING_DISABLE = 'disable';
    const PASSWORD_RENEWAL_ENABLE = 'enable';
    const PASSWORD_RENEWAL_DISABLE = 'disable';
    const ACCOUNT_KEY_PROCESSING_SAME = 'same';
    const ACCOUNT_KEY_PROCESSING_STRIP = 'strip';
    const SEARCH_TYPE_RECURSIVE = 'recursive';
    const OBTAIN_USER_INFO_ENABLE = 'enable';
    const OBTAIN_USER_INFO_DISABLE = 'disable';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerIdentityCheckAllowableValues()
    {
        return [
            self::SERVER_IDENTITY_CHECK_ENABLE,
            self::SERVER_IDENTITY_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SIMPLE,
            self::TYPE_ANONYMOUS,
            self::TYPE_REGULAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAllowableValues()
    {
        return [
            self::TWO_FACTOR_DISABLE,
            self::TWO_FACTOR_FORTITOKEN_CLOUD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAuthenticationAllowableValues()
    {
        return [
            self::TWO_FACTOR_AUTHENTICATION_FORTITOKEN,
            self::TWO_FACTOR_AUTHENTICATION_EMAIL,
            self::TWO_FACTOR_AUTHENTICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorNotificationAllowableValues()
    {
        return [
            self::TWO_FACTOR_NOTIFICATION_EMAIL,
            self::TWO_FACTOR_NOTIFICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupMemberCheckAllowableValues()
    {
        return [
            self::GROUP_MEMBER_CHECK_USER_ATTR,
            self::GROUP_MEMBER_CHECK_GROUP_OBJECT,
            self::GROUP_MEMBER_CHECK_POSIX_GROUP_OBJECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecureAllowableValues()
    {
        return [
            self::SECURE_DISABLE,
            self::SECURE_STARTTLS,
            self::SECURE_LDAPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION__DEFAULT,
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordExpiryWarningAllowableValues()
    {
        return [
            self::PASSWORD_EXPIRY_WARNING_ENABLE,
            self::PASSWORD_EXPIRY_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordRenewalAllowableValues()
    {
        return [
            self::PASSWORD_RENEWAL_ENABLE,
            self::PASSWORD_RENEWAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountKeyProcessingAllowableValues()
    {
        return [
            self::ACCOUNT_KEY_PROCESSING_SAME,
            self::ACCOUNT_KEY_PROCESSING_STRIP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchTypeAllowableValues()
    {
        return [
            self::SEARCH_TYPE_RECURSIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObtainUserInfoAllowableValues()
    {
        return [
            self::OBTAIN_USER_INFO_ENABLE,
            self::OBTAIN_USER_INFO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['secondary_server'] = $data['secondary_server'] ?? null;
        $this->container['tertiary_server'] = $data['tertiary_server'] ?? null;
        $this->container['server_identity_check'] = $data['server_identity_check'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['cnid'] = $data['cnid'] ?? null;
        $this->container['dn'] = $data['dn'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['two_factor'] = $data['two_factor'] ?? null;
        $this->container['two_factor_authentication'] = $data['two_factor_authentication'] ?? null;
        $this->container['two_factor_notification'] = $data['two_factor_notification'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['group_member_check'] = $data['group_member_check'] ?? null;
        $this->container['group_search_base'] = $data['group_search_base'] ?? null;
        $this->container['group_object_filter'] = $data['group_object_filter'] ?? null;
        $this->container['group_filter'] = $data['group_filter'] ?? null;
        $this->container['secure'] = $data['secure'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
        $this->container['ca_cert'] = $data['ca_cert'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['password_expiry_warning'] = $data['password_expiry_warning'] ?? null;
        $this->container['password_renewal'] = $data['password_renewal'] ?? null;
        $this->container['member_attr'] = $data['member_attr'] ?? null;
        $this->container['account_key_processing'] = $data['account_key_processing'] ?? null;
        $this->container['account_key_filter'] = $data['account_key_filter'] ?? null;
        $this->container['search_type'] = $data['search_type'] ?? null;
        $this->container['obtain_user_info'] = $data['obtain_user_info'] ?? null;
        $this->container['user_info_exchange_server'] = $data['user_info_exchange_server'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['secondary_server']) && (mb_strlen($this->container['secondary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'secondary_server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['tertiary_server']) && (mb_strlen($this->container['tertiary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'tertiary_server', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getServerIdentityCheckAllowableValues();
        if (!is_null($this->container['server_identity_check']) && !in_array($this->container['server_identity_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_identity_check', must be one of '%s'",
                $this->container['server_identity_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cnid']) && (mb_strlen($this->container['cnid']) > 20)) {
            $invalidProperties[] = "invalid value for 'cnid', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['dn']) && (mb_strlen($this->container['dn']) > 511)) {
            $invalidProperties[] = "invalid value for 'dn', the character length must be smaller than or equal to 511.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($this->container['two_factor']) && !in_array($this->container['two_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor', must be one of '%s'",
                $this->container['two_factor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($this->container['two_factor_authentication']) && !in_array($this->container['two_factor_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                $this->container['two_factor_authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($this->container['two_factor_notification']) && !in_array($this->container['two_factor_notification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                $this->container['two_factor_notification'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 511)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 511.";
        }

        $allowedValues = $this->getGroupMemberCheckAllowableValues();
        if (!is_null($this->container['group_member_check']) && !in_array($this->container['group_member_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_member_check', must be one of '%s'",
                $this->container['group_member_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['group_search_base']) && (mb_strlen($this->container['group_search_base']) > 511)) {
            $invalidProperties[] = "invalid value for 'group_search_base', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['group_object_filter']) && (mb_strlen($this->container['group_object_filter']) > 2047)) {
            $invalidProperties[] = "invalid value for 'group_object_filter', the character length must be smaller than or equal to 2047.";
        }

        if (!is_null($this->container['group_filter']) && (mb_strlen($this->container['group_filter']) > 2047)) {
            $invalidProperties[] = "invalid value for 'group_filter', the character length must be smaller than or equal to 2047.";
        }

        $allowedValues = $this->getSecureAllowableValues();
        if (!is_null($this->container['secure']) && !in_array($this->container['secure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secure', must be one of '%s'",
                $this->container['secure'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ca_cert']) && (mb_strlen($this->container['ca_cert']) > 79)) {
            $invalidProperties[] = "invalid value for 'ca_cert', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPasswordExpiryWarningAllowableValues();
        if (!is_null($this->container['password_expiry_warning']) && !in_array($this->container['password_expiry_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password_expiry_warning', must be one of '%s'",
                $this->container['password_expiry_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPasswordRenewalAllowableValues();
        if (!is_null($this->container['password_renewal']) && !in_array($this->container['password_renewal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password_renewal', must be one of '%s'",
                $this->container['password_renewal'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['member_attr']) && (mb_strlen($this->container['member_attr']) > 63)) {
            $invalidProperties[] = "invalid value for 'member_attr', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAccountKeyProcessingAllowableValues();
        if (!is_null($this->container['account_key_processing']) && !in_array($this->container['account_key_processing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_key_processing', must be one of '%s'",
                $this->container['account_key_processing'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_key_filter']) && (mb_strlen($this->container['account_key_filter']) > 2047)) {
            $invalidProperties[] = "invalid value for 'account_key_filter', the character length must be smaller than or equal to 2047.";
        }

        $allowedValues = $this->getSearchTypeAllowableValues();
        if (!is_null($this->container['search_type']) && !in_array($this->container['search_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'search_type', must be one of '%s'",
                $this->container['search_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getObtainUserInfoAllowableValues();
        if (!is_null($this->container['obtain_user_info']) && !in_array($this->container['obtain_user_info'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'obtain_user_info', must be one of '%s'",
                $this->container['obtain_user_info'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['user_info_exchange_server']) && (mb_strlen($this->container['user_info_exchange_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'user_info_exchange_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name LDAP server entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject432., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server LDAP server CN domain name or IP.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject432., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets secondary_server
     *
     * @return string|null
     */
    public function getSecondaryServer()
    {
        return $this->container['secondary_server'];
    }

    /**
     * Sets secondary_server
     *
     * @param string|null $secondary_server Secondary LDAP server CN domain name or IP.
     *
     * @return self
     */
    public function setSecondaryServer($secondary_server)
    {
        if (!is_null($secondary_server) && (mb_strlen($secondary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $secondary_server when calling InlineObject432., must be smaller than or equal to 63.');
        }

        $this->container['secondary_server'] = $secondary_server;

        return $this;
    }

    /**
     * Gets tertiary_server
     *
     * @return string|null
     */
    public function getTertiaryServer()
    {
        return $this->container['tertiary_server'];
    }

    /**
     * Sets tertiary_server
     *
     * @param string|null $tertiary_server Tertiary LDAP server CN domain name or IP.
     *
     * @return self
     */
    public function setTertiaryServer($tertiary_server)
    {
        if (!is_null($tertiary_server) && (mb_strlen($tertiary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $tertiary_server when calling InlineObject432., must be smaller than or equal to 63.');
        }

        $this->container['tertiary_server'] = $tertiary_server;

        return $this;
    }

    /**
     * Gets server_identity_check
     *
     * @return string|null
     */
    public function getServerIdentityCheck()
    {
        return $this->container['server_identity_check'];
    }

    /**
     * Sets server_identity_check
     *
     * @param string|null $server_identity_check Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate).    enable:Enable server identity check.    disable:Disable server identity check.
     *
     * @return self
     */
    public function setServerIdentityCheck($server_identity_check)
    {
        $allowedValues = $this->getServerIdentityCheckAllowableValues();
        if (!is_null($server_identity_check) && !in_array($server_identity_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_identity_check', must be one of '%s'",
                    $server_identity_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_identity_check'] = $server_identity_check;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP for communications to LDAP server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets cnid
     *
     * @return string|null
     */
    public function getCnid()
    {
        return $this->container['cnid'];
    }

    /**
     * Sets cnid
     *
     * @param string|null $cnid Common name identifier for the LDAP server. The common name identifier for most LDAP servers is \"cn\".
     *
     * @return self
     */
    public function setCnid($cnid)
    {
        if (!is_null($cnid) && (mb_strlen($cnid) > 20)) {
            throw new \InvalidArgumentException('invalid length for $cnid when calling InlineObject432., must be smaller than or equal to 20.');
        }

        $this->container['cnid'] = $cnid;

        return $this;
    }

    /**
     * Gets dn
     *
     * @return string|null
     */
    public function getDn()
    {
        return $this->container['dn'];
    }

    /**
     * Sets dn
     *
     * @param string|null $dn Distinguished name used to look up entries on the LDAP server.
     *
     * @return self
     */
    public function setDn($dn)
    {
        if (!is_null($dn) && (mb_strlen($dn) > 511)) {
            throw new \InvalidArgumentException('invalid length for $dn when calling InlineObject432., must be smaller than or equal to 511.');
        }

        $this->container['dn'] = $dn;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Authentication type for LDAP searches.    simple:Simple password authentication without search.    anonymous:Bind using anonymous user search.    regular:Bind using username/password and then search.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets two_factor
     *
     * @return string|null
     */
    public function getTwoFactor()
    {
        return $this->container['two_factor'];
    }

    /**
     * Sets two_factor
     *
     * @param string|null $two_factor Enable/disable two-factor authentication.    disable:disable two-factor authentication.    fortitoken-cloud:FortiToken Cloud Service.
     *
     * @return self
     */
    public function setTwoFactor($two_factor)
    {
        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($two_factor) && !in_array($two_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor', must be one of '%s'",
                    $two_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor'] = $two_factor;

        return $this;
    }

    /**
     * Gets two_factor_authentication
     *
     * @return string|null
     */
    public function getTwoFactorAuthentication()
    {
        return $this->container['two_factor_authentication'];
    }

    /**
     * Sets two_factor_authentication
     *
     * @param string|null $two_factor_authentication Authentication method by FortiToken Cloud.    fortitoken:FortiToken authentication.    email:Email one time password.    sms:SMS one time password.
     *
     * @return self
     */
    public function setTwoFactorAuthentication($two_factor_authentication)
    {
        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($two_factor_authentication) && !in_array($two_factor_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                    $two_factor_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_authentication'] = $two_factor_authentication;

        return $this;
    }

    /**
     * Gets two_factor_notification
     *
     * @return string|null
     */
    public function getTwoFactorNotification()
    {
        return $this->container['two_factor_notification'];
    }

    /**
     * Sets two_factor_notification
     *
     * @param string|null $two_factor_notification Notification method for user activation by FortiToken Cloud.    email:Email notification for activation code.    sms:SMS notification for activation code.
     *
     * @return self
     */
    public function setTwoFactorNotification($two_factor_notification)
    {
        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($two_factor_notification) && !in_array($two_factor_notification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                    $two_factor_notification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_notification'] = $two_factor_notification;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username (full DN) for initial binding.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 511)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject432., must be smaller than or equal to 511.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password for initial binding.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets group_member_check
     *
     * @return string|null
     */
    public function getGroupMemberCheck()
    {
        return $this->container['group_member_check'];
    }

    /**
     * Sets group_member_check
     *
     * @param string|null $group_member_check Group member checking methods.    user-attr:User attribute checking.    group-object:Group object checking.    posix-group-object:POSIX group object checking.
     *
     * @return self
     */
    public function setGroupMemberCheck($group_member_check)
    {
        $allowedValues = $this->getGroupMemberCheckAllowableValues();
        if (!is_null($group_member_check) && !in_array($group_member_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_member_check', must be one of '%s'",
                    $group_member_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_member_check'] = $group_member_check;

        return $this;
    }

    /**
     * Gets group_search_base
     *
     * @return string|null
     */
    public function getGroupSearchBase()
    {
        return $this->container['group_search_base'];
    }

    /**
     * Sets group_search_base
     *
     * @param string|null $group_search_base Search base used for group searching.
     *
     * @return self
     */
    public function setGroupSearchBase($group_search_base)
    {
        if (!is_null($group_search_base) && (mb_strlen($group_search_base) > 511)) {
            throw new \InvalidArgumentException('invalid length for $group_search_base when calling InlineObject432., must be smaller than or equal to 511.');
        }

        $this->container['group_search_base'] = $group_search_base;

        return $this;
    }

    /**
     * Gets group_object_filter
     *
     * @return string|null
     */
    public function getGroupObjectFilter()
    {
        return $this->container['group_object_filter'];
    }

    /**
     * Sets group_object_filter
     *
     * @param string|null $group_object_filter Filter used for group searching.
     *
     * @return self
     */
    public function setGroupObjectFilter($group_object_filter)
    {
        if (!is_null($group_object_filter) && (mb_strlen($group_object_filter) > 2047)) {
            throw new \InvalidArgumentException('invalid length for $group_object_filter when calling InlineObject432., must be smaller than or equal to 2047.');
        }

        $this->container['group_object_filter'] = $group_object_filter;

        return $this;
    }

    /**
     * Gets group_filter
     *
     * @return string|null
     */
    public function getGroupFilter()
    {
        return $this->container['group_filter'];
    }

    /**
     * Sets group_filter
     *
     * @param string|null $group_filter Filter used for group matching.
     *
     * @return self
     */
    public function setGroupFilter($group_filter)
    {
        if (!is_null($group_filter) && (mb_strlen($group_filter) > 2047)) {
            throw new \InvalidArgumentException('invalid length for $group_filter when calling InlineObject432., must be smaller than or equal to 2047.');
        }

        $this->container['group_filter'] = $group_filter;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return string|null
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param string|null $secure Port to be used for authentication.    disable:No SSL.    starttls:Use StartTLS.    ldaps:Use LDAPS.
     *
     * @return self
     */
    public function setSecure($secure)
    {
        $allowedValues = $this->getSecureAllowableValues();
        if (!is_null($secure) && !in_array($secure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secure', must be one of '%s'",
                    $secure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).    default:Follow system global setting.    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }

    /**
     * Gets ca_cert
     *
     * @return string|null
     */
    public function getCaCert()
    {
        return $this->container['ca_cert'];
    }

    /**
     * Sets ca_cert
     *
     * @param string|null $ca_cert CA certificate name.
     *
     * @return self
     */
    public function setCaCert($ca_cert)
    {
        if (!is_null($ca_cert) && (mb_strlen($ca_cert) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ca_cert when calling InlineObject432., must be smaller than or equal to 79.');
        }

        $this->container['ca_cert'] = $ca_cert;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port to be used for communication with the LDAP server (default = 389).
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject432., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject432., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets password_expiry_warning
     *
     * @return string|null
     */
    public function getPasswordExpiryWarning()
    {
        return $this->container['password_expiry_warning'];
    }

    /**
     * Sets password_expiry_warning
     *
     * @param string|null $password_expiry_warning Enable/disable password expiry warnings.    enable:Enable password expiry warnings.    disable:Disable password expiry warnings.
     *
     * @return self
     */
    public function setPasswordExpiryWarning($password_expiry_warning)
    {
        $allowedValues = $this->getPasswordExpiryWarningAllowableValues();
        if (!is_null($password_expiry_warning) && !in_array($password_expiry_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password_expiry_warning', must be one of '%s'",
                    $password_expiry_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_expiry_warning'] = $password_expiry_warning;

        return $this;
    }

    /**
     * Gets password_renewal
     *
     * @return string|null
     */
    public function getPasswordRenewal()
    {
        return $this->container['password_renewal'];
    }

    /**
     * Sets password_renewal
     *
     * @param string|null $password_renewal Enable/disable online password renewal.    enable:Enable online password renewal.    disable:Disable online password renewal.
     *
     * @return self
     */
    public function setPasswordRenewal($password_renewal)
    {
        $allowedValues = $this->getPasswordRenewalAllowableValues();
        if (!is_null($password_renewal) && !in_array($password_renewal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password_renewal', must be one of '%s'",
                    $password_renewal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_renewal'] = $password_renewal;

        return $this;
    }

    /**
     * Gets member_attr
     *
     * @return string|null
     */
    public function getMemberAttr()
    {
        return $this->container['member_attr'];
    }

    /**
     * Sets member_attr
     *
     * @param string|null $member_attr Name of attribute from which to get group membership.
     *
     * @return self
     */
    public function setMemberAttr($member_attr)
    {
        if (!is_null($member_attr) && (mb_strlen($member_attr) > 63)) {
            throw new \InvalidArgumentException('invalid length for $member_attr when calling InlineObject432., must be smaller than or equal to 63.');
        }

        $this->container['member_attr'] = $member_attr;

        return $this;
    }

    /**
     * Gets account_key_processing
     *
     * @return string|null
     */
    public function getAccountKeyProcessing()
    {
        return $this->container['account_key_processing'];
    }

    /**
     * Sets account_key_processing
     *
     * @param string|null $account_key_processing Account key processing operation, either keep or strip domain string of UPN in the token.    same:Same as UPN.    strip:Strip domain string from UPN.
     *
     * @return self
     */
    public function setAccountKeyProcessing($account_key_processing)
    {
        $allowedValues = $this->getAccountKeyProcessingAllowableValues();
        if (!is_null($account_key_processing) && !in_array($account_key_processing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_key_processing', must be one of '%s'",
                    $account_key_processing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_key_processing'] = $account_key_processing;

        return $this;
    }

    /**
     * Gets account_key_filter
     *
     * @return string|null
     */
    public function getAccountKeyFilter()
    {
        return $this->container['account_key_filter'];
    }

    /**
     * Sets account_key_filter
     *
     * @param string|null $account_key_filter Account key filter, using the UPN as the search filter.
     *
     * @return self
     */
    public function setAccountKeyFilter($account_key_filter)
    {
        if (!is_null($account_key_filter) && (mb_strlen($account_key_filter) > 2047)) {
            throw new \InvalidArgumentException('invalid length for $account_key_filter when calling InlineObject432., must be smaller than or equal to 2047.');
        }

        $this->container['account_key_filter'] = $account_key_filter;

        return $this;
    }

    /**
     * Gets search_type
     *
     * @return string|null
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     *
     * @param string|null $search_type Search type.    recursive:Recursively retrieve the user-group chain information of a user in a particular Microsoft AD domain.
     *
     * @return self
     */
    public function setSearchType($search_type)
    {
        $allowedValues = $this->getSearchTypeAllowableValues();
        if (!is_null($search_type) && !in_array($search_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'search_type', must be one of '%s'",
                    $search_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets obtain_user_info
     *
     * @return string|null
     */
    public function getObtainUserInfo()
    {
        return $this->container['obtain_user_info'];
    }

    /**
     * Sets obtain_user_info
     *
     * @param string|null $obtain_user_info Enable/disable obtaining of user information.    enable:Enable obtaining of user information.    disable:Disable obtaining of user information.
     *
     * @return self
     */
    public function setObtainUserInfo($obtain_user_info)
    {
        $allowedValues = $this->getObtainUserInfoAllowableValues();
        if (!is_null($obtain_user_info) && !in_array($obtain_user_info, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'obtain_user_info', must be one of '%s'",
                    $obtain_user_info,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['obtain_user_info'] = $obtain_user_info;

        return $this;
    }

    /**
     * Gets user_info_exchange_server
     *
     * @return string|null
     */
    public function getUserInfoExchangeServer()
    {
        return $this->container['user_info_exchange_server'];
    }

    /**
     * Sets user_info_exchange_server
     *
     * @param string|null $user_info_exchange_server MS Exchange server from which to fetch user information.
     *
     * @return self
     */
    public function setUserInfoExchangeServer($user_info_exchange_server)
    {
        if (!is_null($user_info_exchange_server) && (mb_strlen($user_info_exchange_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $user_info_exchange_server when calling InlineObject432., must be smaller than or equal to 35.');
        }

        $this->container['user_info_exchange_server'] = $user_info_exchange_server;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject432., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


