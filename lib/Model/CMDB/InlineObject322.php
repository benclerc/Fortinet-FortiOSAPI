<?php
/**
 * InlineObject322
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject322 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject322 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_322';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'vdom' => 'string',
        'vrf' => 'int',
        'cli_conn_status' => 'int',
        'fortilink' => 'string',
        'switch_controller_source_ip' => 'string',
        'mode' => 'string',
        'client_options' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameClientOptions[]',
        'distance' => 'int',
        'priority' => 'int',
        'dhcp_relay_interface_select_method' => 'string',
        'dhcp_relay_interface' => 'string',
        'dhcp_relay_service' => 'string',
        'dhcp_relay_ip' => 'string',
        'dhcp_relay_type' => 'string',
        'dhcp_relay_agent_option' => 'string',
        'management_ip' => 'string',
        'ip' => 'string',
        'allowaccess' => 'string',
        'gwdetect' => 'string',
        'ping_serv_status' => 'int',
        'detectserver' => 'string',
        'detectprotocol' => 'string',
        'ha_priority' => 'int',
        'fail_detect' => 'string',
        'fail_detect_option' => 'string',
        'fail_alert_method' => 'string',
        'fail_action_on_extender' => 'string',
        'fail_alert_interfaces' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameFailAlertInterfaces[]',
        'dhcp_client_identifier' => 'string',
        'dhcp_renew_time' => 'int',
        'ipunnumbered' => 'string',
        'username' => 'string',
        'pppoe_unnumbered_negotiate' => 'string',
        'password' => 'string',
        'idle_timeout' => 'int',
        'detected_peer_mtu' => 'int',
        'disc_retry_timeout' => 'int',
        'padt_retry_timeout' => 'int',
        'service_name' => 'string',
        'ac_name' => 'string',
        'lcp_echo_interval' => 'int',
        'lcp_max_echo_fails' => 'int',
        'defaultgw' => 'string',
        'dns_server_override' => 'string',
        'auth_type' => 'string',
        'pptp_client' => 'string',
        'pptp_user' => 'string',
        'pptp_password' => 'string',
        'pptp_server_ip' => 'string',
        'pptp_auth_type' => 'string',
        'pptp_timeout' => 'int',
        'arpforward' => 'string',
        'ndiscforward' => 'string',
        'broadcast_forward' => 'string',
        'bfd' => 'string',
        'bfd_desired_min_tx' => 'int',
        'bfd_detect_mult' => 'int',
        'bfd_required_min_rx' => 'int',
        'l2forward' => 'string',
        'icmp_send_redirect' => 'string',
        'icmp_accept_redirect' => 'string',
        'vlanforward' => 'string',
        'stpforward' => 'string',
        'stpforward_mode' => 'string',
        'ips_sniffer_mode' => 'string',
        'ident_accept' => 'string',
        'ipmac' => 'string',
        'subst' => 'string',
        'macaddr' => 'string',
        'substitute_dst_mac' => 'string',
        'speed' => 'string',
        'status' => 'string',
        'netbios_forward' => 'string',
        'wins_ip' => 'string',
        'type' => 'string',
        'dedicated_to' => 'string',
        'trust_ip_1' => 'string',
        'trust_ip_2' => 'string',
        'trust_ip_3' => 'string',
        'trust_ip6_1' => 'string',
        'trust_ip6_2' => 'string',
        'trust_ip6_3' => 'string',
        'mtu_override' => 'string',
        'mtu' => 'int',
        'wccp' => 'string',
        'netflow_sampler' => 'string',
        'sflow_sampler' => 'string',
        'drop_overlapped_fragment' => 'string',
        'drop_fragment' => 'string',
        'src_check' => 'string',
        'sample_rate' => 'int',
        'polling_interval' => 'int',
        'sample_direction' => 'string',
        'explicit_web_proxy' => 'string',
        'explicit_ftp_proxy' => 'string',
        'proxy_captive_portal' => 'string',
        'tcp_mss' => 'int',
        'inbandwidth' => 'int',
        'outbandwidth' => 'int',
        'egress_shaping_profile' => 'string',
        'ingress_shaping_profile' => 'string',
        'disconnect_threshold' => 'int',
        'spillover_threshold' => 'int',
        'ingress_spillover_threshold' => 'int',
        'weight' => 'int',
        'interface' => 'string',
        'external' => 'string',
        'vlan_protocol' => 'string',
        'vlanid' => 'int',
        'trunk' => 'string',
        'forward_domain' => 'int',
        'remote_ip' => 'string',
        'member' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]',
        'lacp_mode' => 'string',
        'lacp_ha_slave' => 'string',
        'lacp_speed' => 'string',
        'min_links' => 'int',
        'min_links_down' => 'string',
        'algorithm' => 'string',
        'link_up_delay' => 'int',
        'priority_override' => 'string',
        'aggregate' => 'string',
        'redundant_interface' => 'string',
        'devindex' => 'int',
        'vindex' => 'int',
        'switch' => 'string',
        'description' => 'string',
        'alias' => 'string',
        'l2tp_client' => 'string',
        'l2tp_client_settings' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameL2tpClientSettings[]',
        'security_mode' => 'string',
        'security_mac_auth_bypass' => 'string',
        'security_8021x_mode' => 'string',
        'security_8021x_master' => 'string',
        'security_8021x_dynamic_vlan_id' => 'int',
        'security_external_web' => 'string',
        'security_external_logout' => 'string',
        'replacemsg_override_group' => 'string',
        'security_redirect_url' => 'string',
        'security_exempt_list' => 'string',
        'security_groups' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecurityGroups[]',
        'stp' => 'string',
        'stp_ha_slave' => 'string',
        'device_identification' => 'string',
        'device_user_identification' => 'string',
        'lldp_reception' => 'string',
        'lldp_transmission' => 'string',
        'lldp_network_policy' => 'string',
        'estimated_upstream_bandwidth' => 'int',
        'estimated_downstream_bandwidth' => 'int',
        'measured_upstream_bandwidth' => 'int',
        'measured_downstream_bandwidth' => 'int',
        'bandwidth_measure_time' => 'int',
        'monitor_bandwidth' => 'string',
        'vrrp_virtual_mac' => 'string',
        'vrrp' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp[]',
        'role' => 'string',
        'snmp_index' => 'int',
        'secondary_ip' => 'string',
        'secondaryip' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecondaryip[]',
        'preserve_session_route' => 'string',
        'auto_auth_extension_device' => 'string',
        'ap_discover' => 'string',
        'fortilink_stacking' => 'string',
        'fortilink_neighbor_detect' => 'string',
        'ip_managed_by_fortiipam' => 'string',
        'managed_subnetwork_size' => 'string',
        'fortilink_split_interface' => 'string',
        'internal' => 'int',
        'fortilink_backup_link' => 'int',
        'switch_controller_access_vlan' => 'string',
        'switch_controller_traffic_policy' => 'string',
        'switch_controller_rspan_mode' => 'string',
        'switch_controller_mgmt_vlan' => 'int',
        'switch_controller_igmp_snooping' => 'string',
        'switch_controller_igmp_snooping_proxy' => 'string',
        'switch_controller_igmp_snooping_fast_leave' => 'string',
        'switch_controller_dhcp_snooping' => 'string',
        'switch_controller_dhcp_snooping_verify_mac' => 'string',
        'switch_controller_dhcp_snooping_option82' => 'string',
        'switch_controller_arp_inspection' => 'string',
        'switch_controller_learning_limit' => 'int',
        'switch_controller_nac' => 'string',
        'switch_controller_feature' => 'string',
        'switch_controller_iot_scanning' => 'string',
        'swc_vlan' => 'int',
        'swc_first_create' => 'int',
        'color' => 'int',
        'tagging' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTagging[]',
        'ipv6' => '\Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIpv6[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'vdom' => null,
        'vrf' => null,
        'cli_conn_status' => null,
        'fortilink' => null,
        'switch_controller_source_ip' => null,
        'mode' => null,
        'client_options' => null,
        'distance' => null,
        'priority' => null,
        'dhcp_relay_interface_select_method' => null,
        'dhcp_relay_interface' => null,
        'dhcp_relay_service' => null,
        'dhcp_relay_ip' => null,
        'dhcp_relay_type' => null,
        'dhcp_relay_agent_option' => null,
        'management_ip' => 'ipv4',
        'ip' => 'ipv4',
        'allowaccess' => null,
        'gwdetect' => null,
        'ping_serv_status' => null,
        'detectserver' => null,
        'detectprotocol' => null,
        'ha_priority' => null,
        'fail_detect' => null,
        'fail_detect_option' => null,
        'fail_alert_method' => null,
        'fail_action_on_extender' => null,
        'fail_alert_interfaces' => null,
        'dhcp_client_identifier' => null,
        'dhcp_renew_time' => null,
        'ipunnumbered' => 'ipv4',
        'username' => null,
        'pppoe_unnumbered_negotiate' => null,
        'password' => 'password',
        'idle_timeout' => null,
        'detected_peer_mtu' => null,
        'disc_retry_timeout' => null,
        'padt_retry_timeout' => null,
        'service_name' => null,
        'ac_name' => null,
        'lcp_echo_interval' => null,
        'lcp_max_echo_fails' => null,
        'defaultgw' => null,
        'dns_server_override' => null,
        'auth_type' => null,
        'pptp_client' => null,
        'pptp_user' => null,
        'pptp_password' => 'password',
        'pptp_server_ip' => 'ipv4',
        'pptp_auth_type' => null,
        'pptp_timeout' => null,
        'arpforward' => null,
        'ndiscforward' => null,
        'broadcast_forward' => null,
        'bfd' => null,
        'bfd_desired_min_tx' => null,
        'bfd_detect_mult' => null,
        'bfd_required_min_rx' => null,
        'l2forward' => null,
        'icmp_send_redirect' => null,
        'icmp_accept_redirect' => null,
        'vlanforward' => null,
        'stpforward' => null,
        'stpforward_mode' => null,
        'ips_sniffer_mode' => null,
        'ident_accept' => null,
        'ipmac' => null,
        'subst' => null,
        'macaddr' => 'mac-address',
        'substitute_dst_mac' => 'mac-address',
        'speed' => null,
        'status' => null,
        'netbios_forward' => null,
        'wins_ip' => 'ipv4',
        'type' => null,
        'dedicated_to' => null,
        'trust_ip_1' => 'ipv4',
        'trust_ip_2' => 'ipv4',
        'trust_ip_3' => 'ipv4',
        'trust_ip6_1' => 'ipv6',
        'trust_ip6_2' => 'ipv6',
        'trust_ip6_3' => 'ipv6',
        'mtu_override' => null,
        'mtu' => null,
        'wccp' => null,
        'netflow_sampler' => null,
        'sflow_sampler' => null,
        'drop_overlapped_fragment' => null,
        'drop_fragment' => null,
        'src_check' => null,
        'sample_rate' => null,
        'polling_interval' => null,
        'sample_direction' => null,
        'explicit_web_proxy' => null,
        'explicit_ftp_proxy' => null,
        'proxy_captive_portal' => null,
        'tcp_mss' => null,
        'inbandwidth' => null,
        'outbandwidth' => null,
        'egress_shaping_profile' => null,
        'ingress_shaping_profile' => null,
        'disconnect_threshold' => null,
        'spillover_threshold' => null,
        'ingress_spillover_threshold' => null,
        'weight' => null,
        'interface' => null,
        'external' => null,
        'vlan_protocol' => null,
        'vlanid' => null,
        'trunk' => null,
        'forward_domain' => null,
        'remote_ip' => 'ipv4',
        'member' => null,
        'lacp_mode' => null,
        'lacp_ha_slave' => null,
        'lacp_speed' => null,
        'min_links' => null,
        'min_links_down' => null,
        'algorithm' => null,
        'link_up_delay' => null,
        'priority_override' => null,
        'aggregate' => null,
        'redundant_interface' => null,
        'devindex' => null,
        'vindex' => null,
        'switch' => null,
        'description' => null,
        'alias' => null,
        'l2tp_client' => null,
        'l2tp_client_settings' => null,
        'security_mode' => null,
        'security_mac_auth_bypass' => null,
        'security_8021x_mode' => null,
        'security_8021x_master' => null,
        'security_8021x_dynamic_vlan_id' => null,
        'security_external_web' => null,
        'security_external_logout' => null,
        'replacemsg_override_group' => null,
        'security_redirect_url' => null,
        'security_exempt_list' => null,
        'security_groups' => null,
        'stp' => null,
        'stp_ha_slave' => null,
        'device_identification' => null,
        'device_user_identification' => null,
        'lldp_reception' => null,
        'lldp_transmission' => null,
        'lldp_network_policy' => null,
        'estimated_upstream_bandwidth' => null,
        'estimated_downstream_bandwidth' => null,
        'measured_upstream_bandwidth' => null,
        'measured_downstream_bandwidth' => null,
        'bandwidth_measure_time' => null,
        'monitor_bandwidth' => null,
        'vrrp_virtual_mac' => null,
        'vrrp' => null,
        'role' => null,
        'snmp_index' => null,
        'secondary_ip' => null,
        'secondaryip' => null,
        'preserve_session_route' => null,
        'auto_auth_extension_device' => null,
        'ap_discover' => null,
        'fortilink_stacking' => null,
        'fortilink_neighbor_detect' => null,
        'ip_managed_by_fortiipam' => null,
        'managed_subnetwork_size' => null,
        'fortilink_split_interface' => null,
        'internal' => null,
        'fortilink_backup_link' => null,
        'switch_controller_access_vlan' => null,
        'switch_controller_traffic_policy' => null,
        'switch_controller_rspan_mode' => null,
        'switch_controller_mgmt_vlan' => null,
        'switch_controller_igmp_snooping' => null,
        'switch_controller_igmp_snooping_proxy' => null,
        'switch_controller_igmp_snooping_fast_leave' => null,
        'switch_controller_dhcp_snooping' => null,
        'switch_controller_dhcp_snooping_verify_mac' => null,
        'switch_controller_dhcp_snooping_option82' => null,
        'switch_controller_arp_inspection' => null,
        'switch_controller_learning_limit' => null,
        'switch_controller_nac' => null,
        'switch_controller_feature' => null,
        'switch_controller_iot_scanning' => null,
        'swc_vlan' => null,
        'swc_first_create' => null,
        'color' => null,
        'tagging' => null,
        'ipv6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vdom' => 'vdom',
        'vrf' => 'vrf',
        'cli_conn_status' => 'cli-conn-status',
        'fortilink' => 'fortilink',
        'switch_controller_source_ip' => 'switch-controller-source-ip',
        'mode' => 'mode',
        'client_options' => 'client-options',
        'distance' => 'distance',
        'priority' => 'priority',
        'dhcp_relay_interface_select_method' => 'dhcp-relay-interface-select-method',
        'dhcp_relay_interface' => 'dhcp-relay-interface',
        'dhcp_relay_service' => 'dhcp-relay-service',
        'dhcp_relay_ip' => 'dhcp-relay-ip',
        'dhcp_relay_type' => 'dhcp-relay-type',
        'dhcp_relay_agent_option' => 'dhcp-relay-agent-option',
        'management_ip' => 'management-ip',
        'ip' => 'ip',
        'allowaccess' => 'allowaccess',
        'gwdetect' => 'gwdetect',
        'ping_serv_status' => 'ping-serv-status',
        'detectserver' => 'detectserver',
        'detectprotocol' => 'detectprotocol',
        'ha_priority' => 'ha-priority',
        'fail_detect' => 'fail-detect',
        'fail_detect_option' => 'fail-detect-option',
        'fail_alert_method' => 'fail-alert-method',
        'fail_action_on_extender' => 'fail-action-on-extender',
        'fail_alert_interfaces' => 'fail-alert-interfaces',
        'dhcp_client_identifier' => 'dhcp-client-identifier',
        'dhcp_renew_time' => 'dhcp-renew-time',
        'ipunnumbered' => 'ipunnumbered',
        'username' => 'username',
        'pppoe_unnumbered_negotiate' => 'pppoe-unnumbered-negotiate',
        'password' => 'password',
        'idle_timeout' => 'idle-timeout',
        'detected_peer_mtu' => 'detected-peer-mtu',
        'disc_retry_timeout' => 'disc-retry-timeout',
        'padt_retry_timeout' => 'padt-retry-timeout',
        'service_name' => 'service-name',
        'ac_name' => 'ac-name',
        'lcp_echo_interval' => 'lcp-echo-interval',
        'lcp_max_echo_fails' => 'lcp-max-echo-fails',
        'defaultgw' => 'defaultgw',
        'dns_server_override' => 'dns-server-override',
        'auth_type' => 'auth-type',
        'pptp_client' => 'pptp-client',
        'pptp_user' => 'pptp-user',
        'pptp_password' => 'pptp-password',
        'pptp_server_ip' => 'pptp-server-ip',
        'pptp_auth_type' => 'pptp-auth-type',
        'pptp_timeout' => 'pptp-timeout',
        'arpforward' => 'arpforward',
        'ndiscforward' => 'ndiscforward',
        'broadcast_forward' => 'broadcast-forward',
        'bfd' => 'bfd',
        'bfd_desired_min_tx' => 'bfd-desired-min-tx',
        'bfd_detect_mult' => 'bfd-detect-mult',
        'bfd_required_min_rx' => 'bfd-required-min-rx',
        'l2forward' => 'l2forward',
        'icmp_send_redirect' => 'icmp-send-redirect',
        'icmp_accept_redirect' => 'icmp-accept-redirect',
        'vlanforward' => 'vlanforward',
        'stpforward' => 'stpforward',
        'stpforward_mode' => 'stpforward-mode',
        'ips_sniffer_mode' => 'ips-sniffer-mode',
        'ident_accept' => 'ident-accept',
        'ipmac' => 'ipmac',
        'subst' => 'subst',
        'macaddr' => 'macaddr',
        'substitute_dst_mac' => 'substitute-dst-mac',
        'speed' => 'speed',
        'status' => 'status',
        'netbios_forward' => 'netbios-forward',
        'wins_ip' => 'wins-ip',
        'type' => 'type',
        'dedicated_to' => 'dedicated-to',
        'trust_ip_1' => 'trust-ip-1',
        'trust_ip_2' => 'trust-ip-2',
        'trust_ip_3' => 'trust-ip-3',
        'trust_ip6_1' => 'trust-ip6-1',
        'trust_ip6_2' => 'trust-ip6-2',
        'trust_ip6_3' => 'trust-ip6-3',
        'mtu_override' => 'mtu-override',
        'mtu' => 'mtu',
        'wccp' => 'wccp',
        'netflow_sampler' => 'netflow-sampler',
        'sflow_sampler' => 'sflow-sampler',
        'drop_overlapped_fragment' => 'drop-overlapped-fragment',
        'drop_fragment' => 'drop-fragment',
        'src_check' => 'src-check',
        'sample_rate' => 'sample-rate',
        'polling_interval' => 'polling-interval',
        'sample_direction' => 'sample-direction',
        'explicit_web_proxy' => 'explicit-web-proxy',
        'explicit_ftp_proxy' => 'explicit-ftp-proxy',
        'proxy_captive_portal' => 'proxy-captive-portal',
        'tcp_mss' => 'tcp-mss',
        'inbandwidth' => 'inbandwidth',
        'outbandwidth' => 'outbandwidth',
        'egress_shaping_profile' => 'egress-shaping-profile',
        'ingress_shaping_profile' => 'ingress-shaping-profile',
        'disconnect_threshold' => 'disconnect-threshold',
        'spillover_threshold' => 'spillover-threshold',
        'ingress_spillover_threshold' => 'ingress-spillover-threshold',
        'weight' => 'weight',
        'interface' => 'interface',
        'external' => 'external',
        'vlan_protocol' => 'vlan-protocol',
        'vlanid' => 'vlanid',
        'trunk' => 'trunk',
        'forward_domain' => 'forward-domain',
        'remote_ip' => 'remote-ip',
        'member' => 'member',
        'lacp_mode' => 'lacp-mode',
        'lacp_ha_slave' => 'lacp-ha-slave',
        'lacp_speed' => 'lacp-speed',
        'min_links' => 'min-links',
        'min_links_down' => 'min-links-down',
        'algorithm' => 'algorithm',
        'link_up_delay' => 'link-up-delay',
        'priority_override' => 'priority-override',
        'aggregate' => 'aggregate',
        'redundant_interface' => 'redundant-interface',
        'devindex' => 'devindex',
        'vindex' => 'vindex',
        'switch' => 'switch',
        'description' => 'description',
        'alias' => 'alias',
        'l2tp_client' => 'l2tp-client',
        'l2tp_client_settings' => 'l2tp-client-settings',
        'security_mode' => 'security-mode',
        'security_mac_auth_bypass' => 'security-mac-auth-bypass',
        'security_8021x_mode' => 'security-8021x-mode',
        'security_8021x_master' => 'security-8021x-master',
        'security_8021x_dynamic_vlan_id' => 'security-8021x-dynamic-vlan-id',
        'security_external_web' => 'security-external-web',
        'security_external_logout' => 'security-external-logout',
        'replacemsg_override_group' => 'replacemsg-override-group',
        'security_redirect_url' => 'security-redirect-url',
        'security_exempt_list' => 'security-exempt-list',
        'security_groups' => 'security-groups',
        'stp' => 'stp',
        'stp_ha_slave' => 'stp-ha-slave',
        'device_identification' => 'device-identification',
        'device_user_identification' => 'device-user-identification',
        'lldp_reception' => 'lldp-reception',
        'lldp_transmission' => 'lldp-transmission',
        'lldp_network_policy' => 'lldp-network-policy',
        'estimated_upstream_bandwidth' => 'estimated-upstream-bandwidth',
        'estimated_downstream_bandwidth' => 'estimated-downstream-bandwidth',
        'measured_upstream_bandwidth' => 'measured-upstream-bandwidth',
        'measured_downstream_bandwidth' => 'measured-downstream-bandwidth',
        'bandwidth_measure_time' => 'bandwidth-measure-time',
        'monitor_bandwidth' => 'monitor-bandwidth',
        'vrrp_virtual_mac' => 'vrrp-virtual-mac',
        'vrrp' => 'vrrp',
        'role' => 'role',
        'snmp_index' => 'snmp-index',
        'secondary_ip' => 'secondary-IP',
        'secondaryip' => 'secondaryip',
        'preserve_session_route' => 'preserve-session-route',
        'auto_auth_extension_device' => 'auto-auth-extension-device',
        'ap_discover' => 'ap-discover',
        'fortilink_stacking' => 'fortilink-stacking',
        'fortilink_neighbor_detect' => 'fortilink-neighbor-detect',
        'ip_managed_by_fortiipam' => 'ip-managed-by-fortiipam',
        'managed_subnetwork_size' => 'managed-subnetwork-size',
        'fortilink_split_interface' => 'fortilink-split-interface',
        'internal' => 'internal',
        'fortilink_backup_link' => 'fortilink-backup-link',
        'switch_controller_access_vlan' => 'switch-controller-access-vlan',
        'switch_controller_traffic_policy' => 'switch-controller-traffic-policy',
        'switch_controller_rspan_mode' => 'switch-controller-rspan-mode',
        'switch_controller_mgmt_vlan' => 'switch-controller-mgmt-vlan',
        'switch_controller_igmp_snooping' => 'switch-controller-igmp-snooping',
        'switch_controller_igmp_snooping_proxy' => 'switch-controller-igmp-snooping-proxy',
        'switch_controller_igmp_snooping_fast_leave' => 'switch-controller-igmp-snooping-fast-leave',
        'switch_controller_dhcp_snooping' => 'switch-controller-dhcp-snooping',
        'switch_controller_dhcp_snooping_verify_mac' => 'switch-controller-dhcp-snooping-verify-mac',
        'switch_controller_dhcp_snooping_option82' => 'switch-controller-dhcp-snooping-option82',
        'switch_controller_arp_inspection' => 'switch-controller-arp-inspection',
        'switch_controller_learning_limit' => 'switch-controller-learning-limit',
        'switch_controller_nac' => 'switch-controller-nac',
        'switch_controller_feature' => 'switch-controller-feature',
        'switch_controller_iot_scanning' => 'switch-controller-iot-scanning',
        'swc_vlan' => 'swc-vlan',
        'swc_first_create' => 'swc-first-create',
        'color' => 'color',
        'tagging' => 'tagging',
        'ipv6' => 'ipv6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vdom' => 'setVdom',
        'vrf' => 'setVrf',
        'cli_conn_status' => 'setCliConnStatus',
        'fortilink' => 'setFortilink',
        'switch_controller_source_ip' => 'setSwitchControllerSourceIp',
        'mode' => 'setMode',
        'client_options' => 'setClientOptions',
        'distance' => 'setDistance',
        'priority' => 'setPriority',
        'dhcp_relay_interface_select_method' => 'setDhcpRelayInterfaceSelectMethod',
        'dhcp_relay_interface' => 'setDhcpRelayInterface',
        'dhcp_relay_service' => 'setDhcpRelayService',
        'dhcp_relay_ip' => 'setDhcpRelayIp',
        'dhcp_relay_type' => 'setDhcpRelayType',
        'dhcp_relay_agent_option' => 'setDhcpRelayAgentOption',
        'management_ip' => 'setManagementIp',
        'ip' => 'setIp',
        'allowaccess' => 'setAllowaccess',
        'gwdetect' => 'setGwdetect',
        'ping_serv_status' => 'setPingServStatus',
        'detectserver' => 'setDetectserver',
        'detectprotocol' => 'setDetectprotocol',
        'ha_priority' => 'setHaPriority',
        'fail_detect' => 'setFailDetect',
        'fail_detect_option' => 'setFailDetectOption',
        'fail_alert_method' => 'setFailAlertMethod',
        'fail_action_on_extender' => 'setFailActionOnExtender',
        'fail_alert_interfaces' => 'setFailAlertInterfaces',
        'dhcp_client_identifier' => 'setDhcpClientIdentifier',
        'dhcp_renew_time' => 'setDhcpRenewTime',
        'ipunnumbered' => 'setIpunnumbered',
        'username' => 'setUsername',
        'pppoe_unnumbered_negotiate' => 'setPppoeUnnumberedNegotiate',
        'password' => 'setPassword',
        'idle_timeout' => 'setIdleTimeout',
        'detected_peer_mtu' => 'setDetectedPeerMtu',
        'disc_retry_timeout' => 'setDiscRetryTimeout',
        'padt_retry_timeout' => 'setPadtRetryTimeout',
        'service_name' => 'setServiceName',
        'ac_name' => 'setAcName',
        'lcp_echo_interval' => 'setLcpEchoInterval',
        'lcp_max_echo_fails' => 'setLcpMaxEchoFails',
        'defaultgw' => 'setDefaultgw',
        'dns_server_override' => 'setDnsServerOverride',
        'auth_type' => 'setAuthType',
        'pptp_client' => 'setPptpClient',
        'pptp_user' => 'setPptpUser',
        'pptp_password' => 'setPptpPassword',
        'pptp_server_ip' => 'setPptpServerIp',
        'pptp_auth_type' => 'setPptpAuthType',
        'pptp_timeout' => 'setPptpTimeout',
        'arpforward' => 'setArpforward',
        'ndiscforward' => 'setNdiscforward',
        'broadcast_forward' => 'setBroadcastForward',
        'bfd' => 'setBfd',
        'bfd_desired_min_tx' => 'setBfdDesiredMinTx',
        'bfd_detect_mult' => 'setBfdDetectMult',
        'bfd_required_min_rx' => 'setBfdRequiredMinRx',
        'l2forward' => 'setL2forward',
        'icmp_send_redirect' => 'setIcmpSendRedirect',
        'icmp_accept_redirect' => 'setIcmpAcceptRedirect',
        'vlanforward' => 'setVlanforward',
        'stpforward' => 'setStpforward',
        'stpforward_mode' => 'setStpforwardMode',
        'ips_sniffer_mode' => 'setIpsSnifferMode',
        'ident_accept' => 'setIdentAccept',
        'ipmac' => 'setIpmac',
        'subst' => 'setSubst',
        'macaddr' => 'setMacaddr',
        'substitute_dst_mac' => 'setSubstituteDstMac',
        'speed' => 'setSpeed',
        'status' => 'setStatus',
        'netbios_forward' => 'setNetbiosForward',
        'wins_ip' => 'setWinsIp',
        'type' => 'setType',
        'dedicated_to' => 'setDedicatedTo',
        'trust_ip_1' => 'setTrustIp1',
        'trust_ip_2' => 'setTrustIp2',
        'trust_ip_3' => 'setTrustIp3',
        'trust_ip6_1' => 'setTrustIp61',
        'trust_ip6_2' => 'setTrustIp62',
        'trust_ip6_3' => 'setTrustIp63',
        'mtu_override' => 'setMtuOverride',
        'mtu' => 'setMtu',
        'wccp' => 'setWccp',
        'netflow_sampler' => 'setNetflowSampler',
        'sflow_sampler' => 'setSflowSampler',
        'drop_overlapped_fragment' => 'setDropOverlappedFragment',
        'drop_fragment' => 'setDropFragment',
        'src_check' => 'setSrcCheck',
        'sample_rate' => 'setSampleRate',
        'polling_interval' => 'setPollingInterval',
        'sample_direction' => 'setSampleDirection',
        'explicit_web_proxy' => 'setExplicitWebProxy',
        'explicit_ftp_proxy' => 'setExplicitFtpProxy',
        'proxy_captive_portal' => 'setProxyCaptivePortal',
        'tcp_mss' => 'setTcpMss',
        'inbandwidth' => 'setInbandwidth',
        'outbandwidth' => 'setOutbandwidth',
        'egress_shaping_profile' => 'setEgressShapingProfile',
        'ingress_shaping_profile' => 'setIngressShapingProfile',
        'disconnect_threshold' => 'setDisconnectThreshold',
        'spillover_threshold' => 'setSpilloverThreshold',
        'ingress_spillover_threshold' => 'setIngressSpilloverThreshold',
        'weight' => 'setWeight',
        'interface' => 'setInterface',
        'external' => 'setExternal',
        'vlan_protocol' => 'setVlanProtocol',
        'vlanid' => 'setVlanid',
        'trunk' => 'setTrunk',
        'forward_domain' => 'setForwardDomain',
        'remote_ip' => 'setRemoteIp',
        'member' => 'setMember',
        'lacp_mode' => 'setLacpMode',
        'lacp_ha_slave' => 'setLacpHaSlave',
        'lacp_speed' => 'setLacpSpeed',
        'min_links' => 'setMinLinks',
        'min_links_down' => 'setMinLinksDown',
        'algorithm' => 'setAlgorithm',
        'link_up_delay' => 'setLinkUpDelay',
        'priority_override' => 'setPriorityOverride',
        'aggregate' => 'setAggregate',
        'redundant_interface' => 'setRedundantInterface',
        'devindex' => 'setDevindex',
        'vindex' => 'setVindex',
        'switch' => 'setSwitch',
        'description' => 'setDescription',
        'alias' => 'setAlias',
        'l2tp_client' => 'setL2tpClient',
        'l2tp_client_settings' => 'setL2tpClientSettings',
        'security_mode' => 'setSecurityMode',
        'security_mac_auth_bypass' => 'setSecurityMacAuthBypass',
        'security_8021x_mode' => 'setSecurity8021xMode',
        'security_8021x_master' => 'setSecurity8021xMaster',
        'security_8021x_dynamic_vlan_id' => 'setSecurity8021xDynamicVlanId',
        'security_external_web' => 'setSecurityExternalWeb',
        'security_external_logout' => 'setSecurityExternalLogout',
        'replacemsg_override_group' => 'setReplacemsgOverrideGroup',
        'security_redirect_url' => 'setSecurityRedirectUrl',
        'security_exempt_list' => 'setSecurityExemptList',
        'security_groups' => 'setSecurityGroups',
        'stp' => 'setStp',
        'stp_ha_slave' => 'setStpHaSlave',
        'device_identification' => 'setDeviceIdentification',
        'device_user_identification' => 'setDeviceUserIdentification',
        'lldp_reception' => 'setLldpReception',
        'lldp_transmission' => 'setLldpTransmission',
        'lldp_network_policy' => 'setLldpNetworkPolicy',
        'estimated_upstream_bandwidth' => 'setEstimatedUpstreamBandwidth',
        'estimated_downstream_bandwidth' => 'setEstimatedDownstreamBandwidth',
        'measured_upstream_bandwidth' => 'setMeasuredUpstreamBandwidth',
        'measured_downstream_bandwidth' => 'setMeasuredDownstreamBandwidth',
        'bandwidth_measure_time' => 'setBandwidthMeasureTime',
        'monitor_bandwidth' => 'setMonitorBandwidth',
        'vrrp_virtual_mac' => 'setVrrpVirtualMac',
        'vrrp' => 'setVrrp',
        'role' => 'setRole',
        'snmp_index' => 'setSnmpIndex',
        'secondary_ip' => 'setSecondaryIp',
        'secondaryip' => 'setSecondaryip',
        'preserve_session_route' => 'setPreserveSessionRoute',
        'auto_auth_extension_device' => 'setAutoAuthExtensionDevice',
        'ap_discover' => 'setApDiscover',
        'fortilink_stacking' => 'setFortilinkStacking',
        'fortilink_neighbor_detect' => 'setFortilinkNeighborDetect',
        'ip_managed_by_fortiipam' => 'setIpManagedByFortiipam',
        'managed_subnetwork_size' => 'setManagedSubnetworkSize',
        'fortilink_split_interface' => 'setFortilinkSplitInterface',
        'internal' => 'setInternal',
        'fortilink_backup_link' => 'setFortilinkBackupLink',
        'switch_controller_access_vlan' => 'setSwitchControllerAccessVlan',
        'switch_controller_traffic_policy' => 'setSwitchControllerTrafficPolicy',
        'switch_controller_rspan_mode' => 'setSwitchControllerRspanMode',
        'switch_controller_mgmt_vlan' => 'setSwitchControllerMgmtVlan',
        'switch_controller_igmp_snooping' => 'setSwitchControllerIgmpSnooping',
        'switch_controller_igmp_snooping_proxy' => 'setSwitchControllerIgmpSnoopingProxy',
        'switch_controller_igmp_snooping_fast_leave' => 'setSwitchControllerIgmpSnoopingFastLeave',
        'switch_controller_dhcp_snooping' => 'setSwitchControllerDhcpSnooping',
        'switch_controller_dhcp_snooping_verify_mac' => 'setSwitchControllerDhcpSnoopingVerifyMac',
        'switch_controller_dhcp_snooping_option82' => 'setSwitchControllerDhcpSnoopingOption82',
        'switch_controller_arp_inspection' => 'setSwitchControllerArpInspection',
        'switch_controller_learning_limit' => 'setSwitchControllerLearningLimit',
        'switch_controller_nac' => 'setSwitchControllerNac',
        'switch_controller_feature' => 'setSwitchControllerFeature',
        'switch_controller_iot_scanning' => 'setSwitchControllerIotScanning',
        'swc_vlan' => 'setSwcVlan',
        'swc_first_create' => 'setSwcFirstCreate',
        'color' => 'setColor',
        'tagging' => 'setTagging',
        'ipv6' => 'setIpv6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vdom' => 'getVdom',
        'vrf' => 'getVrf',
        'cli_conn_status' => 'getCliConnStatus',
        'fortilink' => 'getFortilink',
        'switch_controller_source_ip' => 'getSwitchControllerSourceIp',
        'mode' => 'getMode',
        'client_options' => 'getClientOptions',
        'distance' => 'getDistance',
        'priority' => 'getPriority',
        'dhcp_relay_interface_select_method' => 'getDhcpRelayInterfaceSelectMethod',
        'dhcp_relay_interface' => 'getDhcpRelayInterface',
        'dhcp_relay_service' => 'getDhcpRelayService',
        'dhcp_relay_ip' => 'getDhcpRelayIp',
        'dhcp_relay_type' => 'getDhcpRelayType',
        'dhcp_relay_agent_option' => 'getDhcpRelayAgentOption',
        'management_ip' => 'getManagementIp',
        'ip' => 'getIp',
        'allowaccess' => 'getAllowaccess',
        'gwdetect' => 'getGwdetect',
        'ping_serv_status' => 'getPingServStatus',
        'detectserver' => 'getDetectserver',
        'detectprotocol' => 'getDetectprotocol',
        'ha_priority' => 'getHaPriority',
        'fail_detect' => 'getFailDetect',
        'fail_detect_option' => 'getFailDetectOption',
        'fail_alert_method' => 'getFailAlertMethod',
        'fail_action_on_extender' => 'getFailActionOnExtender',
        'fail_alert_interfaces' => 'getFailAlertInterfaces',
        'dhcp_client_identifier' => 'getDhcpClientIdentifier',
        'dhcp_renew_time' => 'getDhcpRenewTime',
        'ipunnumbered' => 'getIpunnumbered',
        'username' => 'getUsername',
        'pppoe_unnumbered_negotiate' => 'getPppoeUnnumberedNegotiate',
        'password' => 'getPassword',
        'idle_timeout' => 'getIdleTimeout',
        'detected_peer_mtu' => 'getDetectedPeerMtu',
        'disc_retry_timeout' => 'getDiscRetryTimeout',
        'padt_retry_timeout' => 'getPadtRetryTimeout',
        'service_name' => 'getServiceName',
        'ac_name' => 'getAcName',
        'lcp_echo_interval' => 'getLcpEchoInterval',
        'lcp_max_echo_fails' => 'getLcpMaxEchoFails',
        'defaultgw' => 'getDefaultgw',
        'dns_server_override' => 'getDnsServerOverride',
        'auth_type' => 'getAuthType',
        'pptp_client' => 'getPptpClient',
        'pptp_user' => 'getPptpUser',
        'pptp_password' => 'getPptpPassword',
        'pptp_server_ip' => 'getPptpServerIp',
        'pptp_auth_type' => 'getPptpAuthType',
        'pptp_timeout' => 'getPptpTimeout',
        'arpforward' => 'getArpforward',
        'ndiscforward' => 'getNdiscforward',
        'broadcast_forward' => 'getBroadcastForward',
        'bfd' => 'getBfd',
        'bfd_desired_min_tx' => 'getBfdDesiredMinTx',
        'bfd_detect_mult' => 'getBfdDetectMult',
        'bfd_required_min_rx' => 'getBfdRequiredMinRx',
        'l2forward' => 'getL2forward',
        'icmp_send_redirect' => 'getIcmpSendRedirect',
        'icmp_accept_redirect' => 'getIcmpAcceptRedirect',
        'vlanforward' => 'getVlanforward',
        'stpforward' => 'getStpforward',
        'stpforward_mode' => 'getStpforwardMode',
        'ips_sniffer_mode' => 'getIpsSnifferMode',
        'ident_accept' => 'getIdentAccept',
        'ipmac' => 'getIpmac',
        'subst' => 'getSubst',
        'macaddr' => 'getMacaddr',
        'substitute_dst_mac' => 'getSubstituteDstMac',
        'speed' => 'getSpeed',
        'status' => 'getStatus',
        'netbios_forward' => 'getNetbiosForward',
        'wins_ip' => 'getWinsIp',
        'type' => 'getType',
        'dedicated_to' => 'getDedicatedTo',
        'trust_ip_1' => 'getTrustIp1',
        'trust_ip_2' => 'getTrustIp2',
        'trust_ip_3' => 'getTrustIp3',
        'trust_ip6_1' => 'getTrustIp61',
        'trust_ip6_2' => 'getTrustIp62',
        'trust_ip6_3' => 'getTrustIp63',
        'mtu_override' => 'getMtuOverride',
        'mtu' => 'getMtu',
        'wccp' => 'getWccp',
        'netflow_sampler' => 'getNetflowSampler',
        'sflow_sampler' => 'getSflowSampler',
        'drop_overlapped_fragment' => 'getDropOverlappedFragment',
        'drop_fragment' => 'getDropFragment',
        'src_check' => 'getSrcCheck',
        'sample_rate' => 'getSampleRate',
        'polling_interval' => 'getPollingInterval',
        'sample_direction' => 'getSampleDirection',
        'explicit_web_proxy' => 'getExplicitWebProxy',
        'explicit_ftp_proxy' => 'getExplicitFtpProxy',
        'proxy_captive_portal' => 'getProxyCaptivePortal',
        'tcp_mss' => 'getTcpMss',
        'inbandwidth' => 'getInbandwidth',
        'outbandwidth' => 'getOutbandwidth',
        'egress_shaping_profile' => 'getEgressShapingProfile',
        'ingress_shaping_profile' => 'getIngressShapingProfile',
        'disconnect_threshold' => 'getDisconnectThreshold',
        'spillover_threshold' => 'getSpilloverThreshold',
        'ingress_spillover_threshold' => 'getIngressSpilloverThreshold',
        'weight' => 'getWeight',
        'interface' => 'getInterface',
        'external' => 'getExternal',
        'vlan_protocol' => 'getVlanProtocol',
        'vlanid' => 'getVlanid',
        'trunk' => 'getTrunk',
        'forward_domain' => 'getForwardDomain',
        'remote_ip' => 'getRemoteIp',
        'member' => 'getMember',
        'lacp_mode' => 'getLacpMode',
        'lacp_ha_slave' => 'getLacpHaSlave',
        'lacp_speed' => 'getLacpSpeed',
        'min_links' => 'getMinLinks',
        'min_links_down' => 'getMinLinksDown',
        'algorithm' => 'getAlgorithm',
        'link_up_delay' => 'getLinkUpDelay',
        'priority_override' => 'getPriorityOverride',
        'aggregate' => 'getAggregate',
        'redundant_interface' => 'getRedundantInterface',
        'devindex' => 'getDevindex',
        'vindex' => 'getVindex',
        'switch' => 'getSwitch',
        'description' => 'getDescription',
        'alias' => 'getAlias',
        'l2tp_client' => 'getL2tpClient',
        'l2tp_client_settings' => 'getL2tpClientSettings',
        'security_mode' => 'getSecurityMode',
        'security_mac_auth_bypass' => 'getSecurityMacAuthBypass',
        'security_8021x_mode' => 'getSecurity8021xMode',
        'security_8021x_master' => 'getSecurity8021xMaster',
        'security_8021x_dynamic_vlan_id' => 'getSecurity8021xDynamicVlanId',
        'security_external_web' => 'getSecurityExternalWeb',
        'security_external_logout' => 'getSecurityExternalLogout',
        'replacemsg_override_group' => 'getReplacemsgOverrideGroup',
        'security_redirect_url' => 'getSecurityRedirectUrl',
        'security_exempt_list' => 'getSecurityExemptList',
        'security_groups' => 'getSecurityGroups',
        'stp' => 'getStp',
        'stp_ha_slave' => 'getStpHaSlave',
        'device_identification' => 'getDeviceIdentification',
        'device_user_identification' => 'getDeviceUserIdentification',
        'lldp_reception' => 'getLldpReception',
        'lldp_transmission' => 'getLldpTransmission',
        'lldp_network_policy' => 'getLldpNetworkPolicy',
        'estimated_upstream_bandwidth' => 'getEstimatedUpstreamBandwidth',
        'estimated_downstream_bandwidth' => 'getEstimatedDownstreamBandwidth',
        'measured_upstream_bandwidth' => 'getMeasuredUpstreamBandwidth',
        'measured_downstream_bandwidth' => 'getMeasuredDownstreamBandwidth',
        'bandwidth_measure_time' => 'getBandwidthMeasureTime',
        'monitor_bandwidth' => 'getMonitorBandwidth',
        'vrrp_virtual_mac' => 'getVrrpVirtualMac',
        'vrrp' => 'getVrrp',
        'role' => 'getRole',
        'snmp_index' => 'getSnmpIndex',
        'secondary_ip' => 'getSecondaryIp',
        'secondaryip' => 'getSecondaryip',
        'preserve_session_route' => 'getPreserveSessionRoute',
        'auto_auth_extension_device' => 'getAutoAuthExtensionDevice',
        'ap_discover' => 'getApDiscover',
        'fortilink_stacking' => 'getFortilinkStacking',
        'fortilink_neighbor_detect' => 'getFortilinkNeighborDetect',
        'ip_managed_by_fortiipam' => 'getIpManagedByFortiipam',
        'managed_subnetwork_size' => 'getManagedSubnetworkSize',
        'fortilink_split_interface' => 'getFortilinkSplitInterface',
        'internal' => 'getInternal',
        'fortilink_backup_link' => 'getFortilinkBackupLink',
        'switch_controller_access_vlan' => 'getSwitchControllerAccessVlan',
        'switch_controller_traffic_policy' => 'getSwitchControllerTrafficPolicy',
        'switch_controller_rspan_mode' => 'getSwitchControllerRspanMode',
        'switch_controller_mgmt_vlan' => 'getSwitchControllerMgmtVlan',
        'switch_controller_igmp_snooping' => 'getSwitchControllerIgmpSnooping',
        'switch_controller_igmp_snooping_proxy' => 'getSwitchControllerIgmpSnoopingProxy',
        'switch_controller_igmp_snooping_fast_leave' => 'getSwitchControllerIgmpSnoopingFastLeave',
        'switch_controller_dhcp_snooping' => 'getSwitchControllerDhcpSnooping',
        'switch_controller_dhcp_snooping_verify_mac' => 'getSwitchControllerDhcpSnoopingVerifyMac',
        'switch_controller_dhcp_snooping_option82' => 'getSwitchControllerDhcpSnoopingOption82',
        'switch_controller_arp_inspection' => 'getSwitchControllerArpInspection',
        'switch_controller_learning_limit' => 'getSwitchControllerLearningLimit',
        'switch_controller_nac' => 'getSwitchControllerNac',
        'switch_controller_feature' => 'getSwitchControllerFeature',
        'switch_controller_iot_scanning' => 'getSwitchControllerIotScanning',
        'swc_vlan' => 'getSwcVlan',
        'swc_first_create' => 'getSwcFirstCreate',
        'color' => 'getColor',
        'tagging' => 'getTagging',
        'ipv6' => 'getIpv6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FORTILINK_ENABLE = 'enable';
    const FORTILINK_DISABLE = 'disable';
    const SWITCH_CONTROLLER_SOURCE_IP_OUTBOUND = 'outbound';
    const SWITCH_CONTROLLER_SOURCE_IP_FIXED = 'fixed';
    const MODE__STATIC = 'static';
    const MODE_DHCP = 'dhcp';
    const MODE_PPPOE = 'pppoe';
    const DHCP_RELAY_INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const DHCP_RELAY_INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const DHCP_RELAY_INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    const DHCP_RELAY_SERVICE_DISABLE = 'disable';
    const DHCP_RELAY_SERVICE_ENABLE = 'enable';
    const DHCP_RELAY_TYPE_REGULAR = 'regular';
    const DHCP_RELAY_TYPE_IPSEC = 'ipsec';
    const DHCP_RELAY_AGENT_OPTION_ENABLE = 'enable';
    const DHCP_RELAY_AGENT_OPTION_DISABLE = 'disable';
    const ALLOWACCESS_PING = 'ping';
    const ALLOWACCESS_HTTPS = 'https';
    const ALLOWACCESS_SSH = 'ssh';
    const ALLOWACCESS_SNMP = 'snmp';
    const ALLOWACCESS_HTTP = 'http';
    const ALLOWACCESS_TELNET = 'telnet';
    const ALLOWACCESS_FGFM = 'fgfm';
    const ALLOWACCESS_RADIUS_ACCT = 'radius-acct';
    const ALLOWACCESS_PROBE_RESPONSE = 'probe-response';
    const ALLOWACCESS_FABRIC = 'fabric';
    const ALLOWACCESS_FTM = 'ftm';
    const GWDETECT_ENABLE = 'enable';
    const GWDETECT_DISABLE = 'disable';
    const DETECTPROTOCOL_PING = 'ping';
    const DETECTPROTOCOL_TCP_ECHO = 'tcp-echo';
    const DETECTPROTOCOL_UDP_ECHO = 'udp-echo';
    const FAIL_DETECT_ENABLE = 'enable';
    const FAIL_DETECT_DISABLE = 'disable';
    const FAIL_DETECT_OPTION_DETECTSERVER = 'detectserver';
    const FAIL_DETECT_OPTION_LINK_DOWN = 'link-down';
    const FAIL_ALERT_METHOD_FAILED_SIGNAL = 'link-failed-signal';
    const FAIL_ALERT_METHOD_DOWN = 'link-down';
    const FAIL_ACTION_ON_EXTENDER_SOFT_RESTART = 'soft-restart';
    const FAIL_ACTION_ON_EXTENDER_HARD_RESTART = 'hard-restart';
    const FAIL_ACTION_ON_EXTENDER_REBOOT = 'reboot';
    const PPPOE_UNNUMBERED_NEGOTIATE_ENABLE = 'enable';
    const PPPOE_UNNUMBERED_NEGOTIATE_DISABLE = 'disable';
    const DEFAULTGW_ENABLE = 'enable';
    const DEFAULTGW_DISABLE = 'disable';
    const DNS_SERVER_OVERRIDE_ENABLE = 'enable';
    const DNS_SERVER_OVERRIDE_DISABLE = 'disable';
    const AUTH_TYPE_AUTO = 'auto';
    const AUTH_TYPE_PAP = 'pap';
    const AUTH_TYPE_CHAP = 'chap';
    const AUTH_TYPE_MSCHAPV1 = 'mschapv1';
    const AUTH_TYPE_MSCHAPV2 = 'mschapv2';
    const PPTP_CLIENT_ENABLE = 'enable';
    const PPTP_CLIENT_DISABLE = 'disable';
    const PPTP_AUTH_TYPE_AUTO = 'auto';
    const PPTP_AUTH_TYPE_PAP = 'pap';
    const PPTP_AUTH_TYPE_CHAP = 'chap';
    const PPTP_AUTH_TYPE_MSCHAPV1 = 'mschapv1';
    const PPTP_AUTH_TYPE_MSCHAPV2 = 'mschapv2';
    const ARPFORWARD_ENABLE = 'enable';
    const ARPFORWARD_DISABLE = 'disable';
    const NDISCFORWARD_ENABLE = 'enable';
    const NDISCFORWARD_DISABLE = 'disable';
    const BROADCAST_FORWARD_ENABLE = 'enable';
    const BROADCAST_FORWARD_DISABLE = 'disable';
    const BFD__GLOBAL = 'global';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    const L2FORWARD_ENABLE = 'enable';
    const L2FORWARD_DISABLE = 'disable';
    const ICMP_SEND_REDIRECT_ENABLE = 'enable';
    const ICMP_SEND_REDIRECT_DISABLE = 'disable';
    const ICMP_ACCEPT_REDIRECT_ENABLE = 'enable';
    const ICMP_ACCEPT_REDIRECT_DISABLE = 'disable';
    const VLANFORWARD_ENABLE = 'enable';
    const VLANFORWARD_DISABLE = 'disable';
    const STPFORWARD_ENABLE = 'enable';
    const STPFORWARD_DISABLE = 'disable';
    const STPFORWARD_MODE_ALL_EXT_ID = 'rpl-all-ext-id';
    const STPFORWARD_MODE_BRIDGE_EXT_ID = 'rpl-bridge-ext-id';
    const STPFORWARD_MODE_NOTHING = 'rpl-nothing';
    const IPS_SNIFFER_MODE_ENABLE = 'enable';
    const IPS_SNIFFER_MODE_DISABLE = 'disable';
    const IDENT_ACCEPT_ENABLE = 'enable';
    const IDENT_ACCEPT_DISABLE = 'disable';
    const IPMAC_ENABLE = 'enable';
    const IPMAC_DISABLE = 'disable';
    const SUBST_ENABLE = 'enable';
    const SUBST_DISABLE = 'disable';
    const SPEED_AUTO = 'auto';
    const SPEED__10FULL = '10full';
    const SPEED__10HALF = '10half';
    const SPEED__100FULL = '100full';
    const SPEED__100HALF = '100half';
    const SPEED__1000FULL = '1000full';
    const SPEED__1000HALF = '1000half';
    const SPEED__1000AUTO = '1000auto';
    const STATUS_UP = 'up';
    const STATUS_DOWN = 'down';
    const NETBIOS_FORWARD_DISABLE = 'disable';
    const NETBIOS_FORWARD_ENABLE = 'enable';
    const TYPE_PHYSICAL = 'physical';
    const TYPE_VLAN = 'vlan';
    const TYPE_AGGREGATE = 'aggregate';
    const TYPE_REDUNDANT = 'redundant';
    const TYPE_TUNNEL = 'tunnel';
    const TYPE_VDOM_LINK = 'vdom-link';
    const TYPE_LOOPBACK = 'loopback';
    const TYPE__SWITCH = 'switch';
    const TYPE_HARD_SWITCH = 'hard-switch';
    const TYPE_VAP_SWITCH = 'vap-switch';
    const TYPE_WL_MESH = 'wl-mesh';
    const TYPE_FEXT_WAN = 'fext-wan';
    const TYPE_VXLAN = 'vxlan';
    const TYPE_GENEVE = 'geneve';
    const TYPE_HDLC = 'hdlc';
    const TYPE_SWITCH_VLAN = 'switch-vlan';
    const TYPE_EMAC_VLAN = 'emac-vlan';
    const DEDICATED_TO_NONE = 'none';
    const DEDICATED_TO_MANAGEMENT = 'management';
    const MTU_OVERRIDE_ENABLE = 'enable';
    const MTU_OVERRIDE_DISABLE = 'disable';
    const WCCP_ENABLE = 'enable';
    const WCCP_DISABLE = 'disable';
    const NETFLOW_SAMPLER_DISABLE = 'disable';
    const NETFLOW_SAMPLER_TX = 'tx';
    const NETFLOW_SAMPLER_RX = 'rx';
    const NETFLOW_SAMPLER_BOTH = 'both';
    const SFLOW_SAMPLER_ENABLE = 'enable';
    const SFLOW_SAMPLER_DISABLE = 'disable';
    const DROP_OVERLAPPED_FRAGMENT_ENABLE = 'enable';
    const DROP_OVERLAPPED_FRAGMENT_DISABLE = 'disable';
    const DROP_FRAGMENT_ENABLE = 'enable';
    const DROP_FRAGMENT_DISABLE = 'disable';
    const SRC_CHECK_ENABLE = 'enable';
    const SRC_CHECK_DISABLE = 'disable';
    const SAMPLE_DIRECTION_TX = 'tx';
    const SAMPLE_DIRECTION_RX = 'rx';
    const SAMPLE_DIRECTION_BOTH = 'both';
    const EXPLICIT_WEB_PROXY_ENABLE = 'enable';
    const EXPLICIT_WEB_PROXY_DISABLE = 'disable';
    const EXPLICIT_FTP_PROXY_ENABLE = 'enable';
    const EXPLICIT_FTP_PROXY_DISABLE = 'disable';
    const PROXY_CAPTIVE_PORTAL_ENABLE = 'enable';
    const PROXY_CAPTIVE_PORTAL_DISABLE = 'disable';
    const EXTERNAL_ENABLE = 'enable';
    const EXTERNAL_DISABLE = 'disable';
    const VLAN_PROTOCOL__8021Q = '8021q';
    const VLAN_PROTOCOL__8021AD = '8021ad';
    const TRUNK_ENABLE = 'enable';
    const TRUNK_DISABLE = 'disable';
    const LACP_MODE__STATIC = 'static';
    const LACP_MODE_PASSIVE = 'passive';
    const LACP_MODE_ACTIVE = 'active';
    const LACP_HA_SLAVE_ENABLE = 'enable';
    const LACP_HA_SLAVE_DISABLE = 'disable';
    const LACP_SPEED_SLOW = 'slow';
    const LACP_SPEED_FAST = 'fast';
    const MIN_LINKS_DOWN_OPERATIONAL = 'operational';
    const MIN_LINKS_DOWN_ADMINISTRATIVE = 'administrative';
    const ALGORITHM_L2 = 'L2';
    const ALGORITHM_L3 = 'L3';
    const ALGORITHM_L4 = 'L4';
    const PRIORITY_OVERRIDE_ENABLE = 'enable';
    const PRIORITY_OVERRIDE_DISABLE = 'disable';
    const L2TP_CLIENT_ENABLE = 'enable';
    const L2TP_CLIENT_DISABLE = 'disable';
    const SECURITY_MODE_NONE = 'none';
    const SECURITY_MODE_CAPTIVE_PORTAL = 'captive-portal';
    const SECURITY_MODE__802_1_X = '802.1X';
    const SECURITY_MAC_AUTH_BYPASS_MAC_AUTH_ONLY = 'mac-auth-only';
    const SECURITY_MAC_AUTH_BYPASS_ENABLE = 'enable';
    const SECURITY_MAC_AUTH_BYPASS_DISABLE = 'disable';
    const SECURITY_8021X_MODE__DEFAULT = 'default';
    const SECURITY_8021X_MODE_DYNAMIC_VLAN = 'dynamic-vlan';
    const SECURITY_8021X_MODE_FALLBACK = 'fallback';
    const SECURITY_8021X_MODE_SLAVE = 'slave';
    const STP_DISABLE = 'disable';
    const STP_ENABLE = 'enable';
    const STP_HA_SLAVE_DISABLE = 'disable';
    const STP_HA_SLAVE_ENABLE = 'enable';
    const STP_HA_SLAVE_PRIORITY_ADJUST = 'priority-adjust';
    const DEVICE_IDENTIFICATION_ENABLE = 'enable';
    const DEVICE_IDENTIFICATION_DISABLE = 'disable';
    const DEVICE_USER_IDENTIFICATION_ENABLE = 'enable';
    const DEVICE_USER_IDENTIFICATION_DISABLE = 'disable';
    const LLDP_RECEPTION_ENABLE = 'enable';
    const LLDP_RECEPTION_DISABLE = 'disable';
    const LLDP_RECEPTION_VDOM = 'vdom';
    const LLDP_TRANSMISSION_ENABLE = 'enable';
    const LLDP_TRANSMISSION_DISABLE = 'disable';
    const LLDP_TRANSMISSION_VDOM = 'vdom';
    const MONITOR_BANDWIDTH_ENABLE = 'enable';
    const MONITOR_BANDWIDTH_DISABLE = 'disable';
    const VRRP_VIRTUAL_MAC_ENABLE = 'enable';
    const VRRP_VIRTUAL_MAC_DISABLE = 'disable';
    const ROLE_LAN = 'lan';
    const ROLE_WAN = 'wan';
    const ROLE_DMZ = 'dmz';
    const ROLE_UNDEFINED = 'undefined';
    const SECONDARY_IP_ENABLE = 'enable';
    const SECONDARY_IP_DISABLE = 'disable';
    const PRESERVE_SESSION_ROUTE_ENABLE = 'enable';
    const PRESERVE_SESSION_ROUTE_DISABLE = 'disable';
    const AUTO_AUTH_EXTENSION_DEVICE_ENABLE = 'enable';
    const AUTO_AUTH_EXTENSION_DEVICE_DISABLE = 'disable';
    const AP_DISCOVER_ENABLE = 'enable';
    const AP_DISCOVER_DISABLE = 'disable';
    const FORTILINK_STACKING_ENABLE = 'enable';
    const FORTILINK_STACKING_DISABLE = 'disable';
    const FORTILINK_NEIGHBOR_DETECT_LLDP = 'lldp';
    const FORTILINK_NEIGHBOR_DETECT_FORTILINK = 'fortilink';
    const IP_MANAGED_BY_FORTIIPAM_ENABLE = 'enable';
    const IP_MANAGED_BY_FORTIIPAM_DISABLE = 'disable';
    const MANAGED_SUBNETWORK_SIZE__256 = '256';
    const MANAGED_SUBNETWORK_SIZE__512 = '512';
    const MANAGED_SUBNETWORK_SIZE__1024 = '1024';
    const MANAGED_SUBNETWORK_SIZE__2048 = '2048';
    const MANAGED_SUBNETWORK_SIZE__4096 = '4096';
    const MANAGED_SUBNETWORK_SIZE__8192 = '8192';
    const MANAGED_SUBNETWORK_SIZE__16384 = '16384';
    const MANAGED_SUBNETWORK_SIZE__32768 = '32768';
    const MANAGED_SUBNETWORK_SIZE__65536 = '65536';
    const FORTILINK_SPLIT_INTERFACE_ENABLE = 'enable';
    const FORTILINK_SPLIT_INTERFACE_DISABLE = 'disable';
    const SWITCH_CONTROLLER_ACCESS_VLAN_ENABLE = 'enable';
    const SWITCH_CONTROLLER_ACCESS_VLAN_DISABLE = 'disable';
    const SWITCH_CONTROLLER_RSPAN_MODE_DISABLE = 'disable';
    const SWITCH_CONTROLLER_RSPAN_MODE_ENABLE = 'enable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_ENABLE = 'enable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_DISABLE = 'disable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_PROXY_ENABLE = 'enable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_PROXY_DISABLE = 'disable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_FAST_LEAVE_ENABLE = 'enable';
    const SWITCH_CONTROLLER_IGMP_SNOOPING_FAST_LEAVE_DISABLE = 'disable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_ENABLE = 'enable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_DISABLE = 'disable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_VERIFY_MAC_ENABLE = 'enable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_VERIFY_MAC_DISABLE = 'disable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_OPTION82_ENABLE = 'enable';
    const SWITCH_CONTROLLER_DHCP_SNOOPING_OPTION82_DISABLE = 'disable';
    const SWITCH_CONTROLLER_ARP_INSPECTION_ENABLE = 'enable';
    const SWITCH_CONTROLLER_ARP_INSPECTION_DISABLE = 'disable';
    const SWITCH_CONTROLLER_FEATURE_NONE = 'none';
    const SWITCH_CONTROLLER_FEATURE_DEFAULT_VLAN = 'default-vlan';
    const SWITCH_CONTROLLER_FEATURE_QUARANTINE = 'quarantine';
    const SWITCH_CONTROLLER_FEATURE_RSPAN = 'rspan';
    const SWITCH_CONTROLLER_FEATURE_VOICE = 'voice';
    const SWITCH_CONTROLLER_FEATURE_VIDEO = 'video';
    const SWITCH_CONTROLLER_FEATURE_NAC = 'nac';
    const SWITCH_CONTROLLER_IOT_SCANNING_ENABLE = 'enable';
    const SWITCH_CONTROLLER_IOT_SCANNING_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortilinkAllowableValues()
    {
        return [
            self::FORTILINK_ENABLE,
            self::FORTILINK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerSourceIpAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_SOURCE_IP_OUTBOUND,
            self::SWITCH_CONTROLLER_SOURCE_IP_FIXED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE__STATIC,
            self::MODE_DHCP,
            self::MODE_PPPOE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpRelayInterfaceSelectMethodAllowableValues()
    {
        return [
            self::DHCP_RELAY_INTERFACE_SELECT_METHOD_AUTO,
            self::DHCP_RELAY_INTERFACE_SELECT_METHOD_SDWAN,
            self::DHCP_RELAY_INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpRelayServiceAllowableValues()
    {
        return [
            self::DHCP_RELAY_SERVICE_DISABLE,
            self::DHCP_RELAY_SERVICE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpRelayTypeAllowableValues()
    {
        return [
            self::DHCP_RELAY_TYPE_REGULAR,
            self::DHCP_RELAY_TYPE_IPSEC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpRelayAgentOptionAllowableValues()
    {
        return [
            self::DHCP_RELAY_AGENT_OPTION_ENABLE,
            self::DHCP_RELAY_AGENT_OPTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowaccessAllowableValues()
    {
        return [
            self::ALLOWACCESS_PING,
            self::ALLOWACCESS_HTTPS,
            self::ALLOWACCESS_SSH,
            self::ALLOWACCESS_SNMP,
            self::ALLOWACCESS_HTTP,
            self::ALLOWACCESS_TELNET,
            self::ALLOWACCESS_FGFM,
            self::ALLOWACCESS_RADIUS_ACCT,
            self::ALLOWACCESS_PROBE_RESPONSE,
            self::ALLOWACCESS_FABRIC,
            self::ALLOWACCESS_FTM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGwdetectAllowableValues()
    {
        return [
            self::GWDETECT_ENABLE,
            self::GWDETECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDetectprotocolAllowableValues()
    {
        return [
            self::DETECTPROTOCOL_PING,
            self::DETECTPROTOCOL_TCP_ECHO,
            self::DETECTPROTOCOL_UDP_ECHO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailDetectAllowableValues()
    {
        return [
            self::FAIL_DETECT_ENABLE,
            self::FAIL_DETECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailDetectOptionAllowableValues()
    {
        return [
            self::FAIL_DETECT_OPTION_DETECTSERVER,
            self::FAIL_DETECT_OPTION_LINK_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailAlertMethodAllowableValues()
    {
        return [
            self::FAIL_ALERT_METHOD_FAILED_SIGNAL,
            self::FAIL_ALERT_METHOD_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailActionOnExtenderAllowableValues()
    {
        return [
            self::FAIL_ACTION_ON_EXTENDER_SOFT_RESTART,
            self::FAIL_ACTION_ON_EXTENDER_HARD_RESTART,
            self::FAIL_ACTION_ON_EXTENDER_REBOOT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPppoeUnnumberedNegotiateAllowableValues()
    {
        return [
            self::PPPOE_UNNUMBERED_NEGOTIATE_ENABLE,
            self::PPPOE_UNNUMBERED_NEGOTIATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultgwAllowableValues()
    {
        return [
            self::DEFAULTGW_ENABLE,
            self::DEFAULTGW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsServerOverrideAllowableValues()
    {
        return [
            self::DNS_SERVER_OVERRIDE_ENABLE,
            self::DNS_SERVER_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_AUTO,
            self::AUTH_TYPE_PAP,
            self::AUTH_TYPE_CHAP,
            self::AUTH_TYPE_MSCHAPV1,
            self::AUTH_TYPE_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPptpClientAllowableValues()
    {
        return [
            self::PPTP_CLIENT_ENABLE,
            self::PPTP_CLIENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPptpAuthTypeAllowableValues()
    {
        return [
            self::PPTP_AUTH_TYPE_AUTO,
            self::PPTP_AUTH_TYPE_PAP,
            self::PPTP_AUTH_TYPE_CHAP,
            self::PPTP_AUTH_TYPE_MSCHAPV1,
            self::PPTP_AUTH_TYPE_MSCHAPV2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArpforwardAllowableValues()
    {
        return [
            self::ARPFORWARD_ENABLE,
            self::ARPFORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNdiscforwardAllowableValues()
    {
        return [
            self::NDISCFORWARD_ENABLE,
            self::NDISCFORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBroadcastForwardAllowableValues()
    {
        return [
            self::BROADCAST_FORWARD_ENABLE,
            self::BROADCAST_FORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD__GLOBAL,
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getL2forwardAllowableValues()
    {
        return [
            self::L2FORWARD_ENABLE,
            self::L2FORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmpSendRedirectAllowableValues()
    {
        return [
            self::ICMP_SEND_REDIRECT_ENABLE,
            self::ICMP_SEND_REDIRECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmpAcceptRedirectAllowableValues()
    {
        return [
            self::ICMP_ACCEPT_REDIRECT_ENABLE,
            self::ICMP_ACCEPT_REDIRECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanforwardAllowableValues()
    {
        return [
            self::VLANFORWARD_ENABLE,
            self::VLANFORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpforwardAllowableValues()
    {
        return [
            self::STPFORWARD_ENABLE,
            self::STPFORWARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpforwardModeAllowableValues()
    {
        return [
            self::STPFORWARD_MODE_ALL_EXT_ID,
            self::STPFORWARD_MODE_BRIDGE_EXT_ID,
            self::STPFORWARD_MODE_NOTHING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsSnifferModeAllowableValues()
    {
        return [
            self::IPS_SNIFFER_MODE_ENABLE,
            self::IPS_SNIFFER_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentAcceptAllowableValues()
    {
        return [
            self::IDENT_ACCEPT_ENABLE,
            self::IDENT_ACCEPT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpmacAllowableValues()
    {
        return [
            self::IPMAC_ENABLE,
            self::IPMAC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubstAllowableValues()
    {
        return [
            self::SUBST_ENABLE,
            self::SUBST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpeedAllowableValues()
    {
        return [
            self::SPEED_AUTO,
            self::SPEED__10FULL,
            self::SPEED__10HALF,
            self::SPEED__100FULL,
            self::SPEED__100HALF,
            self::SPEED__1000FULL,
            self::SPEED__1000HALF,
            self::SPEED__1000AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UP,
            self::STATUS_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetbiosForwardAllowableValues()
    {
        return [
            self::NETBIOS_FORWARD_DISABLE,
            self::NETBIOS_FORWARD_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PHYSICAL,
            self::TYPE_VLAN,
            self::TYPE_AGGREGATE,
            self::TYPE_REDUNDANT,
            self::TYPE_TUNNEL,
            self::TYPE_VDOM_LINK,
            self::TYPE_LOOPBACK,
            self::TYPE__SWITCH,
            self::TYPE_HARD_SWITCH,
            self::TYPE_VAP_SWITCH,
            self::TYPE_WL_MESH,
            self::TYPE_FEXT_WAN,
            self::TYPE_VXLAN,
            self::TYPE_GENEVE,
            self::TYPE_HDLC,
            self::TYPE_SWITCH_VLAN,
            self::TYPE_EMAC_VLAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDedicatedToAllowableValues()
    {
        return [
            self::DEDICATED_TO_NONE,
            self::DEDICATED_TO_MANAGEMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMtuOverrideAllowableValues()
    {
        return [
            self::MTU_OVERRIDE_ENABLE,
            self::MTU_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWccpAllowableValues()
    {
        return [
            self::WCCP_ENABLE,
            self::WCCP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetflowSamplerAllowableValues()
    {
        return [
            self::NETFLOW_SAMPLER_DISABLE,
            self::NETFLOW_SAMPLER_TX,
            self::NETFLOW_SAMPLER_RX,
            self::NETFLOW_SAMPLER_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSflowSamplerAllowableValues()
    {
        return [
            self::SFLOW_SAMPLER_ENABLE,
            self::SFLOW_SAMPLER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropOverlappedFragmentAllowableValues()
    {
        return [
            self::DROP_OVERLAPPED_FRAGMENT_ENABLE,
            self::DROP_OVERLAPPED_FRAGMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropFragmentAllowableValues()
    {
        return [
            self::DROP_FRAGMENT_ENABLE,
            self::DROP_FRAGMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSrcCheckAllowableValues()
    {
        return [
            self::SRC_CHECK_ENABLE,
            self::SRC_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSampleDirectionAllowableValues()
    {
        return [
            self::SAMPLE_DIRECTION_TX,
            self::SAMPLE_DIRECTION_RX,
            self::SAMPLE_DIRECTION_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExplicitWebProxyAllowableValues()
    {
        return [
            self::EXPLICIT_WEB_PROXY_ENABLE,
            self::EXPLICIT_WEB_PROXY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExplicitFtpProxyAllowableValues()
    {
        return [
            self::EXPLICIT_FTP_PROXY_ENABLE,
            self::EXPLICIT_FTP_PROXY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyCaptivePortalAllowableValues()
    {
        return [
            self::PROXY_CAPTIVE_PORTAL_ENABLE,
            self::PROXY_CAPTIVE_PORTAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalAllowableValues()
    {
        return [
            self::EXTERNAL_ENABLE,
            self::EXTERNAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanProtocolAllowableValues()
    {
        return [
            self::VLAN_PROTOCOL__8021Q,
            self::VLAN_PROTOCOL__8021AD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrunkAllowableValues()
    {
        return [
            self::TRUNK_ENABLE,
            self::TRUNK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLacpModeAllowableValues()
    {
        return [
            self::LACP_MODE__STATIC,
            self::LACP_MODE_PASSIVE,
            self::LACP_MODE_ACTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLacpHaSlaveAllowableValues()
    {
        return [
            self::LACP_HA_SLAVE_ENABLE,
            self::LACP_HA_SLAVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLacpSpeedAllowableValues()
    {
        return [
            self::LACP_SPEED_SLOW,
            self::LACP_SPEED_FAST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinLinksDownAllowableValues()
    {
        return [
            self::MIN_LINKS_DOWN_OPERATIONAL,
            self::MIN_LINKS_DOWN_ADMINISTRATIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlgorithmAllowableValues()
    {
        return [
            self::ALGORITHM_L2,
            self::ALGORITHM_L3,
            self::ALGORITHM_L4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityOverrideAllowableValues()
    {
        return [
            self::PRIORITY_OVERRIDE_ENABLE,
            self::PRIORITY_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getL2tpClientAllowableValues()
    {
        return [
            self::L2TP_CLIENT_ENABLE,
            self::L2TP_CLIENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityModeAllowableValues()
    {
        return [
            self::SECURITY_MODE_NONE,
            self::SECURITY_MODE_CAPTIVE_PORTAL,
            self::SECURITY_MODE__802_1_X,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityMacAuthBypassAllowableValues()
    {
        return [
            self::SECURITY_MAC_AUTH_BYPASS_MAC_AUTH_ONLY,
            self::SECURITY_MAC_AUTH_BYPASS_ENABLE,
            self::SECURITY_MAC_AUTH_BYPASS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurity8021xModeAllowableValues()
    {
        return [
            self::SECURITY_8021X_MODE__DEFAULT,
            self::SECURITY_8021X_MODE_DYNAMIC_VLAN,
            self::SECURITY_8021X_MODE_FALLBACK,
            self::SECURITY_8021X_MODE_SLAVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpAllowableValues()
    {
        return [
            self::STP_DISABLE,
            self::STP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpHaSlaveAllowableValues()
    {
        return [
            self::STP_HA_SLAVE_DISABLE,
            self::STP_HA_SLAVE_ENABLE,
            self::STP_HA_SLAVE_PRIORITY_ADJUST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceIdentificationAllowableValues()
    {
        return [
            self::DEVICE_IDENTIFICATION_ENABLE,
            self::DEVICE_IDENTIFICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceUserIdentificationAllowableValues()
    {
        return [
            self::DEVICE_USER_IDENTIFICATION_ENABLE,
            self::DEVICE_USER_IDENTIFICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpReceptionAllowableValues()
    {
        return [
            self::LLDP_RECEPTION_ENABLE,
            self::LLDP_RECEPTION_DISABLE,
            self::LLDP_RECEPTION_VDOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpTransmissionAllowableValues()
    {
        return [
            self::LLDP_TRANSMISSION_ENABLE,
            self::LLDP_TRANSMISSION_DISABLE,
            self::LLDP_TRANSMISSION_VDOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMonitorBandwidthAllowableValues()
    {
        return [
            self::MONITOR_BANDWIDTH_ENABLE,
            self::MONITOR_BANDWIDTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVrrpVirtualMacAllowableValues()
    {
        return [
            self::VRRP_VIRTUAL_MAC_ENABLE,
            self::VRRP_VIRTUAL_MAC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_LAN,
            self::ROLE_WAN,
            self::ROLE_DMZ,
            self::ROLE_UNDEFINED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryIpAllowableValues()
    {
        return [
            self::SECONDARY_IP_ENABLE,
            self::SECONDARY_IP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreserveSessionRouteAllowableValues()
    {
        return [
            self::PRESERVE_SESSION_ROUTE_ENABLE,
            self::PRESERVE_SESSION_ROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoAuthExtensionDeviceAllowableValues()
    {
        return [
            self::AUTO_AUTH_EXTENSION_DEVICE_ENABLE,
            self::AUTO_AUTH_EXTENSION_DEVICE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApDiscoverAllowableValues()
    {
        return [
            self::AP_DISCOVER_ENABLE,
            self::AP_DISCOVER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortilinkStackingAllowableValues()
    {
        return [
            self::FORTILINK_STACKING_ENABLE,
            self::FORTILINK_STACKING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortilinkNeighborDetectAllowableValues()
    {
        return [
            self::FORTILINK_NEIGHBOR_DETECT_LLDP,
            self::FORTILINK_NEIGHBOR_DETECT_FORTILINK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpManagedByFortiipamAllowableValues()
    {
        return [
            self::IP_MANAGED_BY_FORTIIPAM_ENABLE,
            self::IP_MANAGED_BY_FORTIIPAM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getManagedSubnetworkSizeAllowableValues()
    {
        return [
            self::MANAGED_SUBNETWORK_SIZE__256,
            self::MANAGED_SUBNETWORK_SIZE__512,
            self::MANAGED_SUBNETWORK_SIZE__1024,
            self::MANAGED_SUBNETWORK_SIZE__2048,
            self::MANAGED_SUBNETWORK_SIZE__4096,
            self::MANAGED_SUBNETWORK_SIZE__8192,
            self::MANAGED_SUBNETWORK_SIZE__16384,
            self::MANAGED_SUBNETWORK_SIZE__32768,
            self::MANAGED_SUBNETWORK_SIZE__65536,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortilinkSplitInterfaceAllowableValues()
    {
        return [
            self::FORTILINK_SPLIT_INTERFACE_ENABLE,
            self::FORTILINK_SPLIT_INTERFACE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerAccessVlanAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_ACCESS_VLAN_ENABLE,
            self::SWITCH_CONTROLLER_ACCESS_VLAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerRspanModeAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_RSPAN_MODE_DISABLE,
            self::SWITCH_CONTROLLER_RSPAN_MODE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerIgmpSnoopingAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_ENABLE,
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerIgmpSnoopingProxyAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_PROXY_ENABLE,
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_PROXY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerIgmpSnoopingFastLeaveAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_FAST_LEAVE_ENABLE,
            self::SWITCH_CONTROLLER_IGMP_SNOOPING_FAST_LEAVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerDhcpSnoopingAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_ENABLE,
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerDhcpSnoopingVerifyMacAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_VERIFY_MAC_ENABLE,
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_VERIFY_MAC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerDhcpSnoopingOption82AllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_OPTION82_ENABLE,
            self::SWITCH_CONTROLLER_DHCP_SNOOPING_OPTION82_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerArpInspectionAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_ARP_INSPECTION_ENABLE,
            self::SWITCH_CONTROLLER_ARP_INSPECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerFeatureAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_FEATURE_NONE,
            self::SWITCH_CONTROLLER_FEATURE_DEFAULT_VLAN,
            self::SWITCH_CONTROLLER_FEATURE_QUARANTINE,
            self::SWITCH_CONTROLLER_FEATURE_RSPAN,
            self::SWITCH_CONTROLLER_FEATURE_VOICE,
            self::SWITCH_CONTROLLER_FEATURE_VIDEO,
            self::SWITCH_CONTROLLER_FEATURE_NAC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerIotScanningAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_IOT_SCANNING_ENABLE,
            self::SWITCH_CONTROLLER_IOT_SCANNING_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['vrf'] = $data['vrf'] ?? null;
        $this->container['cli_conn_status'] = $data['cli_conn_status'] ?? null;
        $this->container['fortilink'] = $data['fortilink'] ?? null;
        $this->container['switch_controller_source_ip'] = $data['switch_controller_source_ip'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['client_options'] = $data['client_options'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['dhcp_relay_interface_select_method'] = $data['dhcp_relay_interface_select_method'] ?? null;
        $this->container['dhcp_relay_interface'] = $data['dhcp_relay_interface'] ?? null;
        $this->container['dhcp_relay_service'] = $data['dhcp_relay_service'] ?? null;
        $this->container['dhcp_relay_ip'] = $data['dhcp_relay_ip'] ?? null;
        $this->container['dhcp_relay_type'] = $data['dhcp_relay_type'] ?? null;
        $this->container['dhcp_relay_agent_option'] = $data['dhcp_relay_agent_option'] ?? null;
        $this->container['management_ip'] = $data['management_ip'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['allowaccess'] = $data['allowaccess'] ?? null;
        $this->container['gwdetect'] = $data['gwdetect'] ?? null;
        $this->container['ping_serv_status'] = $data['ping_serv_status'] ?? null;
        $this->container['detectserver'] = $data['detectserver'] ?? null;
        $this->container['detectprotocol'] = $data['detectprotocol'] ?? null;
        $this->container['ha_priority'] = $data['ha_priority'] ?? null;
        $this->container['fail_detect'] = $data['fail_detect'] ?? null;
        $this->container['fail_detect_option'] = $data['fail_detect_option'] ?? null;
        $this->container['fail_alert_method'] = $data['fail_alert_method'] ?? null;
        $this->container['fail_action_on_extender'] = $data['fail_action_on_extender'] ?? null;
        $this->container['fail_alert_interfaces'] = $data['fail_alert_interfaces'] ?? null;
        $this->container['dhcp_client_identifier'] = $data['dhcp_client_identifier'] ?? null;
        $this->container['dhcp_renew_time'] = $data['dhcp_renew_time'] ?? null;
        $this->container['ipunnumbered'] = $data['ipunnumbered'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['pppoe_unnumbered_negotiate'] = $data['pppoe_unnumbered_negotiate'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['idle_timeout'] = $data['idle_timeout'] ?? null;
        $this->container['detected_peer_mtu'] = $data['detected_peer_mtu'] ?? null;
        $this->container['disc_retry_timeout'] = $data['disc_retry_timeout'] ?? null;
        $this->container['padt_retry_timeout'] = $data['padt_retry_timeout'] ?? null;
        $this->container['service_name'] = $data['service_name'] ?? null;
        $this->container['ac_name'] = $data['ac_name'] ?? null;
        $this->container['lcp_echo_interval'] = $data['lcp_echo_interval'] ?? null;
        $this->container['lcp_max_echo_fails'] = $data['lcp_max_echo_fails'] ?? null;
        $this->container['defaultgw'] = $data['defaultgw'] ?? null;
        $this->container['dns_server_override'] = $data['dns_server_override'] ?? null;
        $this->container['auth_type'] = $data['auth_type'] ?? null;
        $this->container['pptp_client'] = $data['pptp_client'] ?? null;
        $this->container['pptp_user'] = $data['pptp_user'] ?? null;
        $this->container['pptp_password'] = $data['pptp_password'] ?? null;
        $this->container['pptp_server_ip'] = $data['pptp_server_ip'] ?? null;
        $this->container['pptp_auth_type'] = $data['pptp_auth_type'] ?? null;
        $this->container['pptp_timeout'] = $data['pptp_timeout'] ?? null;
        $this->container['arpforward'] = $data['arpforward'] ?? null;
        $this->container['ndiscforward'] = $data['ndiscforward'] ?? null;
        $this->container['broadcast_forward'] = $data['broadcast_forward'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
        $this->container['bfd_desired_min_tx'] = $data['bfd_desired_min_tx'] ?? null;
        $this->container['bfd_detect_mult'] = $data['bfd_detect_mult'] ?? null;
        $this->container['bfd_required_min_rx'] = $data['bfd_required_min_rx'] ?? null;
        $this->container['l2forward'] = $data['l2forward'] ?? null;
        $this->container['icmp_send_redirect'] = $data['icmp_send_redirect'] ?? null;
        $this->container['icmp_accept_redirect'] = $data['icmp_accept_redirect'] ?? null;
        $this->container['vlanforward'] = $data['vlanforward'] ?? null;
        $this->container['stpforward'] = $data['stpforward'] ?? null;
        $this->container['stpforward_mode'] = $data['stpforward_mode'] ?? null;
        $this->container['ips_sniffer_mode'] = $data['ips_sniffer_mode'] ?? null;
        $this->container['ident_accept'] = $data['ident_accept'] ?? null;
        $this->container['ipmac'] = $data['ipmac'] ?? null;
        $this->container['subst'] = $data['subst'] ?? null;
        $this->container['macaddr'] = $data['macaddr'] ?? null;
        $this->container['substitute_dst_mac'] = $data['substitute_dst_mac'] ?? null;
        $this->container['speed'] = $data['speed'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['netbios_forward'] = $data['netbios_forward'] ?? null;
        $this->container['wins_ip'] = $data['wins_ip'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['dedicated_to'] = $data['dedicated_to'] ?? null;
        $this->container['trust_ip_1'] = $data['trust_ip_1'] ?? null;
        $this->container['trust_ip_2'] = $data['trust_ip_2'] ?? null;
        $this->container['trust_ip_3'] = $data['trust_ip_3'] ?? null;
        $this->container['trust_ip6_1'] = $data['trust_ip6_1'] ?? null;
        $this->container['trust_ip6_2'] = $data['trust_ip6_2'] ?? null;
        $this->container['trust_ip6_3'] = $data['trust_ip6_3'] ?? null;
        $this->container['mtu_override'] = $data['mtu_override'] ?? null;
        $this->container['mtu'] = $data['mtu'] ?? null;
        $this->container['wccp'] = $data['wccp'] ?? null;
        $this->container['netflow_sampler'] = $data['netflow_sampler'] ?? null;
        $this->container['sflow_sampler'] = $data['sflow_sampler'] ?? null;
        $this->container['drop_overlapped_fragment'] = $data['drop_overlapped_fragment'] ?? null;
        $this->container['drop_fragment'] = $data['drop_fragment'] ?? null;
        $this->container['src_check'] = $data['src_check'] ?? null;
        $this->container['sample_rate'] = $data['sample_rate'] ?? null;
        $this->container['polling_interval'] = $data['polling_interval'] ?? null;
        $this->container['sample_direction'] = $data['sample_direction'] ?? null;
        $this->container['explicit_web_proxy'] = $data['explicit_web_proxy'] ?? null;
        $this->container['explicit_ftp_proxy'] = $data['explicit_ftp_proxy'] ?? null;
        $this->container['proxy_captive_portal'] = $data['proxy_captive_portal'] ?? null;
        $this->container['tcp_mss'] = $data['tcp_mss'] ?? null;
        $this->container['inbandwidth'] = $data['inbandwidth'] ?? null;
        $this->container['outbandwidth'] = $data['outbandwidth'] ?? null;
        $this->container['egress_shaping_profile'] = $data['egress_shaping_profile'] ?? null;
        $this->container['ingress_shaping_profile'] = $data['ingress_shaping_profile'] ?? null;
        $this->container['disconnect_threshold'] = $data['disconnect_threshold'] ?? null;
        $this->container['spillover_threshold'] = $data['spillover_threshold'] ?? null;
        $this->container['ingress_spillover_threshold'] = $data['ingress_spillover_threshold'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['external'] = $data['external'] ?? null;
        $this->container['vlan_protocol'] = $data['vlan_protocol'] ?? null;
        $this->container['vlanid'] = $data['vlanid'] ?? null;
        $this->container['trunk'] = $data['trunk'] ?? null;
        $this->container['forward_domain'] = $data['forward_domain'] ?? null;
        $this->container['remote_ip'] = $data['remote_ip'] ?? null;
        $this->container['member'] = $data['member'] ?? null;
        $this->container['lacp_mode'] = $data['lacp_mode'] ?? null;
        $this->container['lacp_ha_slave'] = $data['lacp_ha_slave'] ?? null;
        $this->container['lacp_speed'] = $data['lacp_speed'] ?? null;
        $this->container['min_links'] = $data['min_links'] ?? null;
        $this->container['min_links_down'] = $data['min_links_down'] ?? null;
        $this->container['algorithm'] = $data['algorithm'] ?? null;
        $this->container['link_up_delay'] = $data['link_up_delay'] ?? null;
        $this->container['priority_override'] = $data['priority_override'] ?? null;
        $this->container['aggregate'] = $data['aggregate'] ?? null;
        $this->container['redundant_interface'] = $data['redundant_interface'] ?? null;
        $this->container['devindex'] = $data['devindex'] ?? null;
        $this->container['vindex'] = $data['vindex'] ?? null;
        $this->container['switch'] = $data['switch'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['alias'] = $data['alias'] ?? null;
        $this->container['l2tp_client'] = $data['l2tp_client'] ?? null;
        $this->container['l2tp_client_settings'] = $data['l2tp_client_settings'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['security_mac_auth_bypass'] = $data['security_mac_auth_bypass'] ?? null;
        $this->container['security_8021x_mode'] = $data['security_8021x_mode'] ?? null;
        $this->container['security_8021x_master'] = $data['security_8021x_master'] ?? null;
        $this->container['security_8021x_dynamic_vlan_id'] = $data['security_8021x_dynamic_vlan_id'] ?? null;
        $this->container['security_external_web'] = $data['security_external_web'] ?? null;
        $this->container['security_external_logout'] = $data['security_external_logout'] ?? null;
        $this->container['replacemsg_override_group'] = $data['replacemsg_override_group'] ?? null;
        $this->container['security_redirect_url'] = $data['security_redirect_url'] ?? null;
        $this->container['security_exempt_list'] = $data['security_exempt_list'] ?? null;
        $this->container['security_groups'] = $data['security_groups'] ?? null;
        $this->container['stp'] = $data['stp'] ?? null;
        $this->container['stp_ha_slave'] = $data['stp_ha_slave'] ?? null;
        $this->container['device_identification'] = $data['device_identification'] ?? null;
        $this->container['device_user_identification'] = $data['device_user_identification'] ?? null;
        $this->container['lldp_reception'] = $data['lldp_reception'] ?? null;
        $this->container['lldp_transmission'] = $data['lldp_transmission'] ?? null;
        $this->container['lldp_network_policy'] = $data['lldp_network_policy'] ?? null;
        $this->container['estimated_upstream_bandwidth'] = $data['estimated_upstream_bandwidth'] ?? null;
        $this->container['estimated_downstream_bandwidth'] = $data['estimated_downstream_bandwidth'] ?? null;
        $this->container['measured_upstream_bandwidth'] = $data['measured_upstream_bandwidth'] ?? null;
        $this->container['measured_downstream_bandwidth'] = $data['measured_downstream_bandwidth'] ?? null;
        $this->container['bandwidth_measure_time'] = $data['bandwidth_measure_time'] ?? null;
        $this->container['monitor_bandwidth'] = $data['monitor_bandwidth'] ?? null;
        $this->container['vrrp_virtual_mac'] = $data['vrrp_virtual_mac'] ?? null;
        $this->container['vrrp'] = $data['vrrp'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['snmp_index'] = $data['snmp_index'] ?? null;
        $this->container['secondary_ip'] = $data['secondary_ip'] ?? null;
        $this->container['secondaryip'] = $data['secondaryip'] ?? null;
        $this->container['preserve_session_route'] = $data['preserve_session_route'] ?? null;
        $this->container['auto_auth_extension_device'] = $data['auto_auth_extension_device'] ?? null;
        $this->container['ap_discover'] = $data['ap_discover'] ?? null;
        $this->container['fortilink_stacking'] = $data['fortilink_stacking'] ?? null;
        $this->container['fortilink_neighbor_detect'] = $data['fortilink_neighbor_detect'] ?? null;
        $this->container['ip_managed_by_fortiipam'] = $data['ip_managed_by_fortiipam'] ?? null;
        $this->container['managed_subnetwork_size'] = $data['managed_subnetwork_size'] ?? null;
        $this->container['fortilink_split_interface'] = $data['fortilink_split_interface'] ?? null;
        $this->container['internal'] = $data['internal'] ?? null;
        $this->container['fortilink_backup_link'] = $data['fortilink_backup_link'] ?? null;
        $this->container['switch_controller_access_vlan'] = $data['switch_controller_access_vlan'] ?? null;
        $this->container['switch_controller_traffic_policy'] = $data['switch_controller_traffic_policy'] ?? null;
        $this->container['switch_controller_rspan_mode'] = $data['switch_controller_rspan_mode'] ?? null;
        $this->container['switch_controller_mgmt_vlan'] = $data['switch_controller_mgmt_vlan'] ?? null;
        $this->container['switch_controller_igmp_snooping'] = $data['switch_controller_igmp_snooping'] ?? null;
        $this->container['switch_controller_igmp_snooping_proxy'] = $data['switch_controller_igmp_snooping_proxy'] ?? null;
        $this->container['switch_controller_igmp_snooping_fast_leave'] = $data['switch_controller_igmp_snooping_fast_leave'] ?? null;
        $this->container['switch_controller_dhcp_snooping'] = $data['switch_controller_dhcp_snooping'] ?? null;
        $this->container['switch_controller_dhcp_snooping_verify_mac'] = $data['switch_controller_dhcp_snooping_verify_mac'] ?? null;
        $this->container['switch_controller_dhcp_snooping_option82'] = $data['switch_controller_dhcp_snooping_option82'] ?? null;
        $this->container['switch_controller_arp_inspection'] = $data['switch_controller_arp_inspection'] ?? null;
        $this->container['switch_controller_learning_limit'] = $data['switch_controller_learning_limit'] ?? null;
        $this->container['switch_controller_nac'] = $data['switch_controller_nac'] ?? null;
        $this->container['switch_controller_feature'] = $data['switch_controller_feature'] ?? null;
        $this->container['switch_controller_iot_scanning'] = $data['switch_controller_iot_scanning'] ?? null;
        $this->container['swc_vlan'] = $data['swc_vlan'] ?? null;
        $this->container['swc_first_create'] = $data['swc_first_create'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['tagging'] = $data['tagging'] ?? null;
        $this->container['ipv6'] = $data['ipv6'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['vdom']) && (mb_strlen($this->container['vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'vdom', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['vrf']) && ($this->container['vrf'] > 31)) {
            $invalidProperties[] = "invalid value for 'vrf', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['vrf']) && ($this->container['vrf'] < 0)) {
            $invalidProperties[] = "invalid value for 'vrf', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cli_conn_status']) && ($this->container['cli_conn_status'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'cli_conn_status', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['cli_conn_status']) && ($this->container['cli_conn_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'cli_conn_status', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getFortilinkAllowableValues();
        if (!is_null($this->container['fortilink']) && !in_array($this->container['fortilink'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortilink', must be one of '%s'",
                $this->container['fortilink'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerSourceIpAllowableValues();
        if (!is_null($this->container['switch_controller_source_ip']) && !in_array($this->container['switch_controller_source_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_source_ip', must be one of '%s'",
                $this->container['switch_controller_source_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['client_options']) && (count($this->container['client_options']) > 0)) {
            $invalidProperties[] = "invalid value for 'client_options', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDhcpRelayInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['dhcp_relay_interface_select_method']) && !in_array($this->container['dhcp_relay_interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_relay_interface_select_method', must be one of '%s'",
                $this->container['dhcp_relay_interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dhcp_relay_interface']) && (mb_strlen($this->container['dhcp_relay_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'dhcp_relay_interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getDhcpRelayServiceAllowableValues();
        if (!is_null($this->container['dhcp_relay_service']) && !in_array($this->container['dhcp_relay_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_relay_service', must be one of '%s'",
                $this->container['dhcp_relay_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpRelayTypeAllowableValues();
        if (!is_null($this->container['dhcp_relay_type']) && !in_array($this->container['dhcp_relay_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_relay_type', must be one of '%s'",
                $this->container['dhcp_relay_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpRelayAgentOptionAllowableValues();
        if (!is_null($this->container['dhcp_relay_agent_option']) && !in_array($this->container['dhcp_relay_agent_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_relay_agent_option', must be one of '%s'",
                $this->container['dhcp_relay_agent_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($this->container['allowaccess']) && !in_array($this->container['allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowaccess', must be one of '%s'",
                $this->container['allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGwdetectAllowableValues();
        if (!is_null($this->container['gwdetect']) && !in_array($this->container['gwdetect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gwdetect', must be one of '%s'",
                $this->container['gwdetect'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ping_serv_status']) && ($this->container['ping_serv_status'] > 255)) {
            $invalidProperties[] = "invalid value for 'ping_serv_status', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ping_serv_status']) && ($this->container['ping_serv_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'ping_serv_status', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDetectprotocolAllowableValues();
        if (!is_null($this->container['detectprotocol']) && !in_array($this->container['detectprotocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'detectprotocol', must be one of '%s'",
                $this->container['detectprotocol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] > 50)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getFailDetectAllowableValues();
        if (!is_null($this->container['fail_detect']) && !in_array($this->container['fail_detect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fail_detect', must be one of '%s'",
                $this->container['fail_detect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailDetectOptionAllowableValues();
        if (!is_null($this->container['fail_detect_option']) && !in_array($this->container['fail_detect_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fail_detect_option', must be one of '%s'",
                $this->container['fail_detect_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailAlertMethodAllowableValues();
        if (!is_null($this->container['fail_alert_method']) && !in_array($this->container['fail_alert_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fail_alert_method', must be one of '%s'",
                $this->container['fail_alert_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailActionOnExtenderAllowableValues();
        if (!is_null($this->container['fail_action_on_extender']) && !in_array($this->container['fail_action_on_extender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fail_action_on_extender', must be one of '%s'",
                $this->container['fail_action_on_extender'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fail_alert_interfaces']) && (count($this->container['fail_alert_interfaces']) > 0)) {
            $invalidProperties[] = "invalid value for 'fail_alert_interfaces', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dhcp_client_identifier']) && (mb_strlen($this->container['dhcp_client_identifier']) > 48)) {
            $invalidProperties[] = "invalid value for 'dhcp_client_identifier', the character length must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['dhcp_renew_time']) && ($this->container['dhcp_renew_time'] > 604800)) {
            $invalidProperties[] = "invalid value for 'dhcp_renew_time', must be smaller than or equal to 604800.";
        }

        if (!is_null($this->container['dhcp_renew_time']) && ($this->container['dhcp_renew_time'] < 300)) {
            $invalidProperties[] = "invalid value for 'dhcp_renew_time', must be bigger than or equal to 300.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 64)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getPppoeUnnumberedNegotiateAllowableValues();
        if (!is_null($this->container['pppoe_unnumbered_negotiate']) && !in_array($this->container['pppoe_unnumbered_negotiate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pppoe_unnumbered_negotiate', must be one of '%s'",
                $this->container['pppoe_unnumbered_negotiate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['idle_timeout']) && ($this->container['idle_timeout'] > 32767)) {
            $invalidProperties[] = "invalid value for 'idle_timeout', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['idle_timeout']) && ($this->container['idle_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'idle_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['detected_peer_mtu']) && ($this->container['detected_peer_mtu'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'detected_peer_mtu', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['detected_peer_mtu']) && ($this->container['detected_peer_mtu'] < 0)) {
            $invalidProperties[] = "invalid value for 'detected_peer_mtu', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['disc_retry_timeout']) && ($this->container['disc_retry_timeout'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'disc_retry_timeout', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['disc_retry_timeout']) && ($this->container['disc_retry_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'disc_retry_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['padt_retry_timeout']) && ($this->container['padt_retry_timeout'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'padt_retry_timeout', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['padt_retry_timeout']) && ($this->container['padt_retry_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'padt_retry_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['service_name']) && (mb_strlen($this->container['service_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'service_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['ac_name']) && (mb_strlen($this->container['ac_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'ac_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['lcp_echo_interval']) && ($this->container['lcp_echo_interval'] > 32767)) {
            $invalidProperties[] = "invalid value for 'lcp_echo_interval', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['lcp_echo_interval']) && ($this->container['lcp_echo_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'lcp_echo_interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lcp_max_echo_fails']) && ($this->container['lcp_max_echo_fails'] > 32767)) {
            $invalidProperties[] = "invalid value for 'lcp_max_echo_fails', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['lcp_max_echo_fails']) && ($this->container['lcp_max_echo_fails'] < 0)) {
            $invalidProperties[] = "invalid value for 'lcp_max_echo_fails', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDefaultgwAllowableValues();
        if (!is_null($this->container['defaultgw']) && !in_array($this->container['defaultgw'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'defaultgw', must be one of '%s'",
                $this->container['defaultgw'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsServerOverrideAllowableValues();
        if (!is_null($this->container['dns_server_override']) && !in_array($this->container['dns_server_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_server_override', must be one of '%s'",
                $this->container['dns_server_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPptpClientAllowableValues();
        if (!is_null($this->container['pptp_client']) && !in_array($this->container['pptp_client'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pptp_client', must be one of '%s'",
                $this->container['pptp_client'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pptp_user']) && (mb_strlen($this->container['pptp_user']) > 64)) {
            $invalidProperties[] = "invalid value for 'pptp_user', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getPptpAuthTypeAllowableValues();
        if (!is_null($this->container['pptp_auth_type']) && !in_array($this->container['pptp_auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pptp_auth_type', must be one of '%s'",
                $this->container['pptp_auth_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pptp_timeout']) && ($this->container['pptp_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'pptp_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['pptp_timeout']) && ($this->container['pptp_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'pptp_timeout', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getArpforwardAllowableValues();
        if (!is_null($this->container['arpforward']) && !in_array($this->container['arpforward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'arpforward', must be one of '%s'",
                $this->container['arpforward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNdiscforwardAllowableValues();
        if (!is_null($this->container['ndiscforward']) && !in_array($this->container['ndiscforward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ndiscforward', must be one of '%s'",
                $this->container['ndiscforward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBroadcastForwardAllowableValues();
        if (!is_null($this->container['broadcast_forward']) && !in_array($this->container['broadcast_forward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'broadcast_forward', must be one of '%s'",
                $this->container['broadcast_forward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bfd_desired_min_tx']) && ($this->container['bfd_desired_min_tx'] > 100000)) {
            $invalidProperties[] = "invalid value for 'bfd_desired_min_tx', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['bfd_desired_min_tx']) && ($this->container['bfd_desired_min_tx'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_desired_min_tx', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bfd_detect_mult']) && ($this->container['bfd_detect_mult'] > 50)) {
            $invalidProperties[] = "invalid value for 'bfd_detect_mult', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bfd_detect_mult']) && ($this->container['bfd_detect_mult'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_detect_mult', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bfd_required_min_rx']) && ($this->container['bfd_required_min_rx'] > 100000)) {
            $invalidProperties[] = "invalid value for 'bfd_required_min_rx', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['bfd_required_min_rx']) && ($this->container['bfd_required_min_rx'] < 1)) {
            $invalidProperties[] = "invalid value for 'bfd_required_min_rx', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getL2forwardAllowableValues();
        if (!is_null($this->container['l2forward']) && !in_array($this->container['l2forward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'l2forward', must be one of '%s'",
                $this->container['l2forward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIcmpSendRedirectAllowableValues();
        if (!is_null($this->container['icmp_send_redirect']) && !in_array($this->container['icmp_send_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp_send_redirect', must be one of '%s'",
                $this->container['icmp_send_redirect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIcmpAcceptRedirectAllowableValues();
        if (!is_null($this->container['icmp_accept_redirect']) && !in_array($this->container['icmp_accept_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp_accept_redirect', must be one of '%s'",
                $this->container['icmp_accept_redirect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVlanforwardAllowableValues();
        if (!is_null($this->container['vlanforward']) && !in_array($this->container['vlanforward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlanforward', must be one of '%s'",
                $this->container['vlanforward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpforwardAllowableValues();
        if (!is_null($this->container['stpforward']) && !in_array($this->container['stpforward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stpforward', must be one of '%s'",
                $this->container['stpforward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpforwardModeAllowableValues();
        if (!is_null($this->container['stpforward_mode']) && !in_array($this->container['stpforward_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stpforward_mode', must be one of '%s'",
                $this->container['stpforward_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsSnifferModeAllowableValues();
        if (!is_null($this->container['ips_sniffer_mode']) && !in_array($this->container['ips_sniffer_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ips_sniffer_mode', must be one of '%s'",
                $this->container['ips_sniffer_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdentAcceptAllowableValues();
        if (!is_null($this->container['ident_accept']) && !in_array($this->container['ident_accept'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ident_accept', must be one of '%s'",
                $this->container['ident_accept'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpmacAllowableValues();
        if (!is_null($this->container['ipmac']) && !in_array($this->container['ipmac'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipmac', must be one of '%s'",
                $this->container['ipmac'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubstAllowableValues();
        if (!is_null($this->container['subst']) && !in_array($this->container['subst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subst', must be one of '%s'",
                $this->container['subst'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpeedAllowableValues();
        if (!is_null($this->container['speed']) && !in_array($this->container['speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'speed', must be one of '%s'",
                $this->container['speed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetbiosForwardAllowableValues();
        if (!is_null($this->container['netbios_forward']) && !in_array($this->container['netbios_forward'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'netbios_forward', must be one of '%s'",
                $this->container['netbios_forward'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDedicatedToAllowableValues();
        if (!is_null($this->container['dedicated_to']) && !in_array($this->container['dedicated_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dedicated_to', must be one of '%s'",
                $this->container['dedicated_to'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMtuOverrideAllowableValues();
        if (!is_null($this->container['mtu_override']) && !in_array($this->container['mtu_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mtu_override', must be one of '%s'",
                $this->container['mtu_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'mtu', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] < 0)) {
            $invalidProperties[] = "invalid value for 'mtu', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWccpAllowableValues();
        if (!is_null($this->container['wccp']) && !in_array($this->container['wccp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wccp', must be one of '%s'",
                $this->container['wccp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetflowSamplerAllowableValues();
        if (!is_null($this->container['netflow_sampler']) && !in_array($this->container['netflow_sampler'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'netflow_sampler', must be one of '%s'",
                $this->container['netflow_sampler'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSflowSamplerAllowableValues();
        if (!is_null($this->container['sflow_sampler']) && !in_array($this->container['sflow_sampler'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sflow_sampler', must be one of '%s'",
                $this->container['sflow_sampler'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDropOverlappedFragmentAllowableValues();
        if (!is_null($this->container['drop_overlapped_fragment']) && !in_array($this->container['drop_overlapped_fragment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_overlapped_fragment', must be one of '%s'",
                $this->container['drop_overlapped_fragment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDropFragmentAllowableValues();
        if (!is_null($this->container['drop_fragment']) && !in_array($this->container['drop_fragment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_fragment', must be one of '%s'",
                $this->container['drop_fragment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSrcCheckAllowableValues();
        if (!is_null($this->container['src_check']) && !in_array($this->container['src_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'src_check', must be one of '%s'",
                $this->container['src_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] > 99999)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] < 10)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['polling_interval']) && ($this->container['polling_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'polling_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['polling_interval']) && ($this->container['polling_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'polling_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSampleDirectionAllowableValues();
        if (!is_null($this->container['sample_direction']) && !in_array($this->container['sample_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sample_direction', must be one of '%s'",
                $this->container['sample_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExplicitWebProxyAllowableValues();
        if (!is_null($this->container['explicit_web_proxy']) && !in_array($this->container['explicit_web_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'explicit_web_proxy', must be one of '%s'",
                $this->container['explicit_web_proxy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExplicitFtpProxyAllowableValues();
        if (!is_null($this->container['explicit_ftp_proxy']) && !in_array($this->container['explicit_ftp_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'explicit_ftp_proxy', must be one of '%s'",
                $this->container['explicit_ftp_proxy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProxyCaptivePortalAllowableValues();
        if (!is_null($this->container['proxy_captive_portal']) && !in_array($this->container['proxy_captive_portal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_captive_portal', must be one of '%s'",
                $this->container['proxy_captive_portal'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tcp_mss']) && ($this->container['tcp_mss'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'tcp_mss', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['tcp_mss']) && ($this->container['tcp_mss'] < 0)) {
            $invalidProperties[] = "invalid value for 'tcp_mss', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['inbandwidth']) && ($this->container['inbandwidth'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'inbandwidth', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['inbandwidth']) && ($this->container['inbandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'inbandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outbandwidth']) && ($this->container['outbandwidth'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'outbandwidth', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['outbandwidth']) && ($this->container['outbandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'outbandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['egress_shaping_profile']) && (mb_strlen($this->container['egress_shaping_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'egress_shaping_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ingress_shaping_profile']) && (mb_strlen($this->container['ingress_shaping_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'ingress_shaping_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['disconnect_threshold']) && ($this->container['disconnect_threshold'] > 10000)) {
            $invalidProperties[] = "invalid value for 'disconnect_threshold', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['disconnect_threshold']) && ($this->container['disconnect_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'disconnect_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spillover_threshold']) && ($this->container['spillover_threshold'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'spillover_threshold', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['spillover_threshold']) && ($this->container['spillover_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'spillover_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ingress_spillover_threshold']) && ($this->container['ingress_spillover_threshold'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'ingress_spillover_threshold', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['ingress_spillover_threshold']) && ($this->container['ingress_spillover_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'ingress_spillover_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 255)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($this->container['external']) && !in_array($this->container['external'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external', must be one of '%s'",
                $this->container['external'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVlanProtocolAllowableValues();
        if (!is_null($this->container['vlan_protocol']) && !in_array($this->container['vlan_protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlan_protocol', must be one of '%s'",
                $this->container['vlan_protocol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] > 4094)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] < 1)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTrunkAllowableValues();
        if (!is_null($this->container['trunk']) && !in_array($this->container['trunk'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trunk', must be one of '%s'",
                $this->container['trunk'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['forward_domain']) && ($this->container['forward_domain'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'forward_domain', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['forward_domain']) && ($this->container['forward_domain'] < 0)) {
            $invalidProperties[] = "invalid value for 'forward_domain', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['member']) && (count($this->container['member']) > 0)) {
            $invalidProperties[] = "invalid value for 'member', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getLacpModeAllowableValues();
        if (!is_null($this->container['lacp_mode']) && !in_array($this->container['lacp_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lacp_mode', must be one of '%s'",
                $this->container['lacp_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLacpHaSlaveAllowableValues();
        if (!is_null($this->container['lacp_ha_slave']) && !in_array($this->container['lacp_ha_slave'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lacp_ha_slave', must be one of '%s'",
                $this->container['lacp_ha_slave'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLacpSpeedAllowableValues();
        if (!is_null($this->container['lacp_speed']) && !in_array($this->container['lacp_speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lacp_speed', must be one of '%s'",
                $this->container['lacp_speed'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['min_links']) && ($this->container['min_links'] > 32)) {
            $invalidProperties[] = "invalid value for 'min_links', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['min_links']) && ($this->container['min_links'] < 1)) {
            $invalidProperties[] = "invalid value for 'min_links', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getMinLinksDownAllowableValues();
        if (!is_null($this->container['min_links_down']) && !in_array($this->container['min_links_down'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'min_links_down', must be one of '%s'",
                $this->container['min_links_down'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAlgorithmAllowableValues();
        if (!is_null($this->container['algorithm']) && !in_array($this->container['algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'algorithm', must be one of '%s'",
                $this->container['algorithm'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['link_up_delay']) && ($this->container['link_up_delay'] > 3600000)) {
            $invalidProperties[] = "invalid value for 'link_up_delay', must be smaller than or equal to 3600000.";
        }

        if (!is_null($this->container['link_up_delay']) && ($this->container['link_up_delay'] < 50)) {
            $invalidProperties[] = "invalid value for 'link_up_delay', must be bigger than or equal to 50.";
        }

        $allowedValues = $this->getPriorityOverrideAllowableValues();
        if (!is_null($this->container['priority_override']) && !in_array($this->container['priority_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority_override', must be one of '%s'",
                $this->container['priority_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['aggregate']) && (mb_strlen($this->container['aggregate']) > 15)) {
            $invalidProperties[] = "invalid value for 'aggregate', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['redundant_interface']) && (mb_strlen($this->container['redundant_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'redundant_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['devindex']) && ($this->container['devindex'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'devindex', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['devindex']) && ($this->container['devindex'] < 0)) {
            $invalidProperties[] = "invalid value for 'devindex', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vindex']) && ($this->container['vindex'] > 65535)) {
            $invalidProperties[] = "invalid value for 'vindex', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['vindex']) && ($this->container['vindex'] < 0)) {
            $invalidProperties[] = "invalid value for 'vindex', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['switch']) && (mb_strlen($this->container['switch']) > 15)) {
            $invalidProperties[] = "invalid value for 'switch', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['alias']) && (mb_strlen($this->container['alias']) > 25)) {
            $invalidProperties[] = "invalid value for 'alias', the character length must be smaller than or equal to 25.";
        }

        $allowedValues = $this->getL2tpClientAllowableValues();
        if (!is_null($this->container['l2tp_client']) && !in_array($this->container['l2tp_client'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'l2tp_client', must be one of '%s'",
                $this->container['l2tp_client'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['l2tp_client_settings']) && (count($this->container['l2tp_client_settings']) > 0)) {
            $invalidProperties[] = "invalid value for 'l2tp_client_settings', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($this->container['security_mode']) && !in_array($this->container['security_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mode', must be one of '%s'",
                $this->container['security_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityMacAuthBypassAllowableValues();
        if (!is_null($this->container['security_mac_auth_bypass']) && !in_array($this->container['security_mac_auth_bypass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mac_auth_bypass', must be one of '%s'",
                $this->container['security_mac_auth_bypass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurity8021xModeAllowableValues();
        if (!is_null($this->container['security_8021x_mode']) && !in_array($this->container['security_8021x_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_8021x_mode', must be one of '%s'",
                $this->container['security_8021x_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['security_8021x_master']) && (mb_strlen($this->container['security_8021x_master']) > 15)) {
            $invalidProperties[] = "invalid value for 'security_8021x_master', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['security_8021x_dynamic_vlan_id']) && ($this->container['security_8021x_dynamic_vlan_id'] > 4094)) {
            $invalidProperties[] = "invalid value for 'security_8021x_dynamic_vlan_id', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['security_8021x_dynamic_vlan_id']) && ($this->container['security_8021x_dynamic_vlan_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'security_8021x_dynamic_vlan_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['security_external_web']) && (mb_strlen($this->container['security_external_web']) > 127)) {
            $invalidProperties[] = "invalid value for 'security_external_web', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['security_external_logout']) && (mb_strlen($this->container['security_external_logout']) > 127)) {
            $invalidProperties[] = "invalid value for 'security_external_logout', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['replacemsg_override_group']) && (mb_strlen($this->container['replacemsg_override_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_override_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['security_redirect_url']) && (mb_strlen($this->container['security_redirect_url']) > 127)) {
            $invalidProperties[] = "invalid value for 'security_redirect_url', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['security_exempt_list']) && (mb_strlen($this->container['security_exempt_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'security_exempt_list', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['security_groups']) && (count($this->container['security_groups']) > 0)) {
            $invalidProperties[] = "invalid value for 'security_groups', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getStpAllowableValues();
        if (!is_null($this->container['stp']) && !in_array($this->container['stp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp', must be one of '%s'",
                $this->container['stp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpHaSlaveAllowableValues();
        if (!is_null($this->container['stp_ha_slave']) && !in_array($this->container['stp_ha_slave'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp_ha_slave', must be one of '%s'",
                $this->container['stp_ha_slave'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceIdentificationAllowableValues();
        if (!is_null($this->container['device_identification']) && !in_array($this->container['device_identification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_identification', must be one of '%s'",
                $this->container['device_identification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceUserIdentificationAllowableValues();
        if (!is_null($this->container['device_user_identification']) && !in_array($this->container['device_user_identification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_user_identification', must be one of '%s'",
                $this->container['device_user_identification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($this->container['lldp_reception']) && !in_array($this->container['lldp_reception'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_reception', must be one of '%s'",
                $this->container['lldp_reception'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($this->container['lldp_transmission']) && !in_array($this->container['lldp_transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                $this->container['lldp_transmission'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lldp_network_policy']) && (mb_strlen($this->container['lldp_network_policy']) > 35)) {
            $invalidProperties[] = "invalid value for 'lldp_network_policy', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['estimated_upstream_bandwidth']) && ($this->container['estimated_upstream_bandwidth'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'estimated_upstream_bandwidth', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['estimated_upstream_bandwidth']) && ($this->container['estimated_upstream_bandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'estimated_upstream_bandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['estimated_downstream_bandwidth']) && ($this->container['estimated_downstream_bandwidth'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'estimated_downstream_bandwidth', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['estimated_downstream_bandwidth']) && ($this->container['estimated_downstream_bandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'estimated_downstream_bandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['measured_upstream_bandwidth']) && ($this->container['measured_upstream_bandwidth'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'measured_upstream_bandwidth', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['measured_upstream_bandwidth']) && ($this->container['measured_upstream_bandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'measured_upstream_bandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['measured_downstream_bandwidth']) && ($this->container['measured_downstream_bandwidth'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'measured_downstream_bandwidth', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['measured_downstream_bandwidth']) && ($this->container['measured_downstream_bandwidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'measured_downstream_bandwidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bandwidth_measure_time']) && ($this->container['bandwidth_measure_time'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'bandwidth_measure_time', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['bandwidth_measure_time']) && ($this->container['bandwidth_measure_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'bandwidth_measure_time', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMonitorBandwidthAllowableValues();
        if (!is_null($this->container['monitor_bandwidth']) && !in_array($this->container['monitor_bandwidth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'monitor_bandwidth', must be one of '%s'",
                $this->container['monitor_bandwidth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVrrpVirtualMacAllowableValues();
        if (!is_null($this->container['vrrp_virtual_mac']) && !in_array($this->container['vrrp_virtual_mac'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vrrp_virtual_mac', must be one of '%s'",
                $this->container['vrrp_virtual_mac'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vrrp']) && (count($this->container['vrrp']) > 0)) {
            $invalidProperties[] = "invalid value for 'vrrp', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['snmp_index']) && ($this->container['snmp_index'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'snmp_index', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['snmp_index']) && ($this->container['snmp_index'] < 1)) {
            $invalidProperties[] = "invalid value for 'snmp_index', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSecondaryIpAllowableValues();
        if (!is_null($this->container['secondary_ip']) && !in_array($this->container['secondary_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secondary_ip', must be one of '%s'",
                $this->container['secondary_ip'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['secondaryip']) && (count($this->container['secondaryip']) > 32)) {
            $invalidProperties[] = "invalid value for 'secondaryip', number of items must be less than or equal to 32.";
        }

        $allowedValues = $this->getPreserveSessionRouteAllowableValues();
        if (!is_null($this->container['preserve_session_route']) && !in_array($this->container['preserve_session_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preserve_session_route', must be one of '%s'",
                $this->container['preserve_session_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoAuthExtensionDeviceAllowableValues();
        if (!is_null($this->container['auto_auth_extension_device']) && !in_array($this->container['auto_auth_extension_device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_auth_extension_device', must be one of '%s'",
                $this->container['auto_auth_extension_device'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApDiscoverAllowableValues();
        if (!is_null($this->container['ap_discover']) && !in_array($this->container['ap_discover'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_discover', must be one of '%s'",
                $this->container['ap_discover'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortilinkStackingAllowableValues();
        if (!is_null($this->container['fortilink_stacking']) && !in_array($this->container['fortilink_stacking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortilink_stacking', must be one of '%s'",
                $this->container['fortilink_stacking'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortilinkNeighborDetectAllowableValues();
        if (!is_null($this->container['fortilink_neighbor_detect']) && !in_array($this->container['fortilink_neighbor_detect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortilink_neighbor_detect', must be one of '%s'",
                $this->container['fortilink_neighbor_detect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpManagedByFortiipamAllowableValues();
        if (!is_null($this->container['ip_managed_by_fortiipam']) && !in_array($this->container['ip_managed_by_fortiipam'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_managed_by_fortiipam', must be one of '%s'",
                $this->container['ip_managed_by_fortiipam'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getManagedSubnetworkSizeAllowableValues();
        if (!is_null($this->container['managed_subnetwork_size']) && !in_array($this->container['managed_subnetwork_size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'managed_subnetwork_size', must be one of '%s'",
                $this->container['managed_subnetwork_size'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortilinkSplitInterfaceAllowableValues();
        if (!is_null($this->container['fortilink_split_interface']) && !in_array($this->container['fortilink_split_interface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortilink_split_interface', must be one of '%s'",
                $this->container['fortilink_split_interface'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['internal']) && ($this->container['internal'] > 255)) {
            $invalidProperties[] = "invalid value for 'internal', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['internal']) && ($this->container['internal'] < 0)) {
            $invalidProperties[] = "invalid value for 'internal', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fortilink_backup_link']) && ($this->container['fortilink_backup_link'] > 255)) {
            $invalidProperties[] = "invalid value for 'fortilink_backup_link', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fortilink_backup_link']) && ($this->container['fortilink_backup_link'] < 0)) {
            $invalidProperties[] = "invalid value for 'fortilink_backup_link', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSwitchControllerAccessVlanAllowableValues();
        if (!is_null($this->container['switch_controller_access_vlan']) && !in_array($this->container['switch_controller_access_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_access_vlan', must be one of '%s'",
                $this->container['switch_controller_access_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_controller_traffic_policy']) && (mb_strlen($this->container['switch_controller_traffic_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'switch_controller_traffic_policy', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSwitchControllerRspanModeAllowableValues();
        if (!is_null($this->container['switch_controller_rspan_mode']) && !in_array($this->container['switch_controller_rspan_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_rspan_mode', must be one of '%s'",
                $this->container['switch_controller_rspan_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_controller_mgmt_vlan']) && ($this->container['switch_controller_mgmt_vlan'] > 4094)) {
            $invalidProperties[] = "invalid value for 'switch_controller_mgmt_vlan', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['switch_controller_mgmt_vlan']) && ($this->container['switch_controller_mgmt_vlan'] < 1)) {
            $invalidProperties[] = "invalid value for 'switch_controller_mgmt_vlan', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSwitchControllerIgmpSnoopingAllowableValues();
        if (!is_null($this->container['switch_controller_igmp_snooping']) && !in_array($this->container['switch_controller_igmp_snooping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_igmp_snooping', must be one of '%s'",
                $this->container['switch_controller_igmp_snooping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerIgmpSnoopingProxyAllowableValues();
        if (!is_null($this->container['switch_controller_igmp_snooping_proxy']) && !in_array($this->container['switch_controller_igmp_snooping_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_igmp_snooping_proxy', must be one of '%s'",
                $this->container['switch_controller_igmp_snooping_proxy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerIgmpSnoopingFastLeaveAllowableValues();
        if (!is_null($this->container['switch_controller_igmp_snooping_fast_leave']) && !in_array($this->container['switch_controller_igmp_snooping_fast_leave'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_igmp_snooping_fast_leave', must be one of '%s'",
                $this->container['switch_controller_igmp_snooping_fast_leave'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerDhcpSnoopingAllowableValues();
        if (!is_null($this->container['switch_controller_dhcp_snooping']) && !in_array($this->container['switch_controller_dhcp_snooping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_dhcp_snooping', must be one of '%s'",
                $this->container['switch_controller_dhcp_snooping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerDhcpSnoopingVerifyMacAllowableValues();
        if (!is_null($this->container['switch_controller_dhcp_snooping_verify_mac']) && !in_array($this->container['switch_controller_dhcp_snooping_verify_mac'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_dhcp_snooping_verify_mac', must be one of '%s'",
                $this->container['switch_controller_dhcp_snooping_verify_mac'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerDhcpSnoopingOption82AllowableValues();
        if (!is_null($this->container['switch_controller_dhcp_snooping_option82']) && !in_array($this->container['switch_controller_dhcp_snooping_option82'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_dhcp_snooping_option82', must be one of '%s'",
                $this->container['switch_controller_dhcp_snooping_option82'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerArpInspectionAllowableValues();
        if (!is_null($this->container['switch_controller_arp_inspection']) && !in_array($this->container['switch_controller_arp_inspection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_arp_inspection', must be one of '%s'",
                $this->container['switch_controller_arp_inspection'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_controller_learning_limit']) && ($this->container['switch_controller_learning_limit'] > 128)) {
            $invalidProperties[] = "invalid value for 'switch_controller_learning_limit', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['switch_controller_learning_limit']) && ($this->container['switch_controller_learning_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'switch_controller_learning_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['switch_controller_nac']) && (mb_strlen($this->container['switch_controller_nac']) > 35)) {
            $invalidProperties[] = "invalid value for 'switch_controller_nac', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSwitchControllerFeatureAllowableValues();
        if (!is_null($this->container['switch_controller_feature']) && !in_array($this->container['switch_controller_feature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_feature', must be one of '%s'",
                $this->container['switch_controller_feature'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerIotScanningAllowableValues();
        if (!is_null($this->container['switch_controller_iot_scanning']) && !in_array($this->container['switch_controller_iot_scanning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_iot_scanning', must be one of '%s'",
                $this->container['switch_controller_iot_scanning'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['swc_vlan']) && ($this->container['swc_vlan'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'swc_vlan', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['swc_vlan']) && ($this->container['swc_vlan'] < 0)) {
            $invalidProperties[] = "invalid value for 'swc_vlan', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['swc_first_create']) && ($this->container['swc_first_create'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'swc_first_create', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['swc_first_create']) && ($this->container['swc_first_create'] < 0)) {
            $invalidProperties[] = "invalid value for 'swc_first_create', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['color']) && ($this->container['color'] > 32)) {
            $invalidProperties[] = "invalid value for 'color', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['color']) && ($this->container['color'] < 0)) {
            $invalidProperties[] = "invalid value for 'color', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tagging']) && (count($this->container['tagging']) > 0)) {
            $invalidProperties[] = "invalid value for 'tagging', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ipv6']) && (count($this->container['ipv6']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipv6', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom Interface is in this virtual domain (VDOM).
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        if (!is_null($vdom) && (mb_strlen($vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $vdom when calling InlineObject322., must be smaller than or equal to 31.');
        }

        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets vrf
     *
     * @return int|null
     */
    public function getVrf()
    {
        return $this->container['vrf'];
    }

    /**
     * Sets vrf
     *
     * @param int|null $vrf Virtual Routing Forwarding ID.
     *
     * @return self
     */
    public function setVrf($vrf)
    {

        if (!is_null($vrf) && ($vrf > 31)) {
            throw new \InvalidArgumentException('invalid value for $vrf when calling InlineObject322., must be smaller than or equal to 31.');
        }
        if (!is_null($vrf) && ($vrf < 0)) {
            throw new \InvalidArgumentException('invalid value for $vrf when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['vrf'] = $vrf;

        return $this;
    }

    /**
     * Gets cli_conn_status
     *
     * @return int|null
     */
    public function getCliConnStatus()
    {
        return $this->container['cli_conn_status'];
    }

    /**
     * Sets cli_conn_status
     *
     * @param int|null $cli_conn_status CLI connection status.
     *
     * @return self
     */
    public function setCliConnStatus($cli_conn_status)
    {

        if (!is_null($cli_conn_status) && ($cli_conn_status > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $cli_conn_status when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($cli_conn_status) && ($cli_conn_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $cli_conn_status when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['cli_conn_status'] = $cli_conn_status;

        return $this;
    }

    /**
     * Gets fortilink
     *
     * @return string|null
     */
    public function getFortilink()
    {
        return $this->container['fortilink'];
    }

    /**
     * Sets fortilink
     *
     * @param string|null $fortilink Enable FortiLink to dedicate this interface to manage other Fortinet devices.    enable:Enable FortiLink to dedicated interface for managing FortiSwitch devices.    disable:Disable FortiLink to dedicated interface for managing FortiSwitch devices.
     *
     * @return self
     */
    public function setFortilink($fortilink)
    {
        $allowedValues = $this->getFortilinkAllowableValues();
        if (!is_null($fortilink) && !in_array($fortilink, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortilink', must be one of '%s'",
                    $fortilink,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortilink'] = $fortilink;

        return $this;
    }

    /**
     * Gets switch_controller_source_ip
     *
     * @return string|null
     */
    public function getSwitchControllerSourceIp()
    {
        return $this->container['switch_controller_source_ip'];
    }

    /**
     * Sets switch_controller_source_ip
     *
     * @param string|null $switch_controller_source_ip Source IP address used in FortiLink over L3 connections.    outbound:Source IP address is that of the outbound interface.    fixed:Source IP address is that of the FortiLink interface.
     *
     * @return self
     */
    public function setSwitchControllerSourceIp($switch_controller_source_ip)
    {
        $allowedValues = $this->getSwitchControllerSourceIpAllowableValues();
        if (!is_null($switch_controller_source_ip) && !in_array($switch_controller_source_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_source_ip', must be one of '%s'",
                    $switch_controller_source_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_source_ip'] = $switch_controller_source_ip;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Addressing mode (static, DHCP, PPPoE).    static:Static setting.    dhcp:External DHCP client mode.    pppoe:External PPPoE mode.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets client_options
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameClientOptions[]|null
     */
    public function getClientOptions()
    {
        return $this->container['client_options'];
    }

    /**
     * Sets client_options
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameClientOptions[]|null $client_options DHCP client options.
     *
     * @return self
     */
    public function setClientOptions($client_options)
    {

        if (!is_null($client_options) && (count($client_options) > 0)) {
            throw new \InvalidArgumentException('invalid value for $client_options when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['client_options'] = $client_options;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority of learned routes.
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets dhcp_relay_interface_select_method
     *
     * @return string|null
     */
    public function getDhcpRelayInterfaceSelectMethod()
    {
        return $this->container['dhcp_relay_interface_select_method'];
    }

    /**
     * Sets dhcp_relay_interface_select_method
     *
     * @param string|null $dhcp_relay_interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setDhcpRelayInterfaceSelectMethod($dhcp_relay_interface_select_method)
    {
        $allowedValues = $this->getDhcpRelayInterfaceSelectMethodAllowableValues();
        if (!is_null($dhcp_relay_interface_select_method) && !in_array($dhcp_relay_interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_relay_interface_select_method', must be one of '%s'",
                    $dhcp_relay_interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_relay_interface_select_method'] = $dhcp_relay_interface_select_method;

        return $this;
    }

    /**
     * Gets dhcp_relay_interface
     *
     * @return string|null
     */
    public function getDhcpRelayInterface()
    {
        return $this->container['dhcp_relay_interface'];
    }

    /**
     * Sets dhcp_relay_interface
     *
     * @param string|null $dhcp_relay_interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setDhcpRelayInterface($dhcp_relay_interface)
    {
        if (!is_null($dhcp_relay_interface) && (mb_strlen($dhcp_relay_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $dhcp_relay_interface when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['dhcp_relay_interface'] = $dhcp_relay_interface;

        return $this;
    }

    /**
     * Gets dhcp_relay_service
     *
     * @return string|null
     */
    public function getDhcpRelayService()
    {
        return $this->container['dhcp_relay_service'];
    }

    /**
     * Sets dhcp_relay_service
     *
     * @param string|null $dhcp_relay_service Enable/disable allowing this interface to act as a DHCP relay.    disable:None.    enable:DHCP relay agent.
     *
     * @return self
     */
    public function setDhcpRelayService($dhcp_relay_service)
    {
        $allowedValues = $this->getDhcpRelayServiceAllowableValues();
        if (!is_null($dhcp_relay_service) && !in_array($dhcp_relay_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_relay_service', must be one of '%s'",
                    $dhcp_relay_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_relay_service'] = $dhcp_relay_service;

        return $this;
    }

    /**
     * Gets dhcp_relay_ip
     *
     * @return string|null
     */
    public function getDhcpRelayIp()
    {
        return $this->container['dhcp_relay_ip'];
    }

    /**
     * Sets dhcp_relay_ip
     *
     * @param string|null $dhcp_relay_ip DHCP relay IP address.
     *
     * @return self
     */
    public function setDhcpRelayIp($dhcp_relay_ip)
    {
        $this->container['dhcp_relay_ip'] = $dhcp_relay_ip;

        return $this;
    }

    /**
     * Gets dhcp_relay_type
     *
     * @return string|null
     */
    public function getDhcpRelayType()
    {
        return $this->container['dhcp_relay_type'];
    }

    /**
     * Sets dhcp_relay_type
     *
     * @param string|null $dhcp_relay_type DHCP relay type (regular or IPsec).    regular:Regular DHCP relay.    ipsec:DHCP relay for IPsec.
     *
     * @return self
     */
    public function setDhcpRelayType($dhcp_relay_type)
    {
        $allowedValues = $this->getDhcpRelayTypeAllowableValues();
        if (!is_null($dhcp_relay_type) && !in_array($dhcp_relay_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_relay_type', must be one of '%s'",
                    $dhcp_relay_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_relay_type'] = $dhcp_relay_type;

        return $this;
    }

    /**
     * Gets dhcp_relay_agent_option
     *
     * @return string|null
     */
    public function getDhcpRelayAgentOption()
    {
        return $this->container['dhcp_relay_agent_option'];
    }

    /**
     * Sets dhcp_relay_agent_option
     *
     * @param string|null $dhcp_relay_agent_option Enable/disable DHCP relay agent option.    enable:Enable DHCP relay agent option.    disable:Disable DHCP relay agent option.
     *
     * @return self
     */
    public function setDhcpRelayAgentOption($dhcp_relay_agent_option)
    {
        $allowedValues = $this->getDhcpRelayAgentOptionAllowableValues();
        if (!is_null($dhcp_relay_agent_option) && !in_array($dhcp_relay_agent_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_relay_agent_option', must be one of '%s'",
                    $dhcp_relay_agent_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_relay_agent_option'] = $dhcp_relay_agent_option;

        return $this;
    }

    /**
     * Gets management_ip
     *
     * @return string|null
     */
    public function getManagementIp()
    {
        return $this->container['management_ip'];
    }

    /**
     * Sets management_ip
     *
     * @param string|null $management_ip High Availability in-band management IP address of this interface.
     *
     * @return self
     */
    public function setManagementIp($management_ip)
    {
        $this->container['management_ip'] = $management_ip;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets allowaccess
     *
     * @return string|null
     */
    public function getAllowaccess()
    {
        return $this->container['allowaccess'];
    }

    /**
     * Sets allowaccess
     *
     * @param string|null $allowaccess Permitted types of management access to this interface.    ping:PING access.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.    http:HTTP access.    telnet:TELNET access.    fgfm:FortiManager access.    radius-acct:RADIUS accounting access.    probe-response:Probe access.    fabric:Security Fabric access.    ftm:FTM access.
     *
     * @return self
     */
    public function setAllowaccess($allowaccess)
    {
        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($allowaccess) && !in_array($allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowaccess', must be one of '%s'",
                    $allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowaccess'] = $allowaccess;

        return $this;
    }

    /**
     * Gets gwdetect
     *
     * @return string|null
     */
    public function getGwdetect()
    {
        return $this->container['gwdetect'];
    }

    /**
     * Sets gwdetect
     *
     * @param string|null $gwdetect Enable/disable detect gateway alive for first.    enable:Enable detect gateway alive for first.    disable:Disable detect gateway alive for first.
     *
     * @return self
     */
    public function setGwdetect($gwdetect)
    {
        $allowedValues = $this->getGwdetectAllowableValues();
        if (!is_null($gwdetect) && !in_array($gwdetect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gwdetect', must be one of '%s'",
                    $gwdetect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gwdetect'] = $gwdetect;

        return $this;
    }

    /**
     * Gets ping_serv_status
     *
     * @return int|null
     */
    public function getPingServStatus()
    {
        return $this->container['ping_serv_status'];
    }

    /**
     * Sets ping_serv_status
     *
     * @param int|null $ping_serv_status PING server status.
     *
     * @return self
     */
    public function setPingServStatus($ping_serv_status)
    {

        if (!is_null($ping_serv_status) && ($ping_serv_status > 255)) {
            throw new \InvalidArgumentException('invalid value for $ping_serv_status when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($ping_serv_status) && ($ping_serv_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $ping_serv_status when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['ping_serv_status'] = $ping_serv_status;

        return $this;
    }

    /**
     * Gets detectserver
     *
     * @return string|null
     */
    public function getDetectserver()
    {
        return $this->container['detectserver'];
    }

    /**
     * Sets detectserver
     *
     * @param string|null $detectserver Gateway's ping server for this IP.
     *
     * @return self
     */
    public function setDetectserver($detectserver)
    {
        $this->container['detectserver'] = $detectserver;

        return $this;
    }

    /**
     * Gets detectprotocol
     *
     * @return string|null
     */
    public function getDetectprotocol()
    {
        return $this->container['detectprotocol'];
    }

    /**
     * Sets detectprotocol
     *
     * @param string|null $detectprotocol Protocols used to detect the server.    ping:PING.    tcp-echo:TCP echo.    udp-echo:UDP echo.
     *
     * @return self
     */
    public function setDetectprotocol($detectprotocol)
    {
        $allowedValues = $this->getDetectprotocolAllowableValues();
        if (!is_null($detectprotocol) && !in_array($detectprotocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'detectprotocol', must be one of '%s'",
                    $detectprotocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['detectprotocol'] = $detectprotocol;

        return $this;
    }

    /**
     * Gets ha_priority
     *
     * @return int|null
     */
    public function getHaPriority()
    {
        return $this->container['ha_priority'];
    }

    /**
     * Sets ha_priority
     *
     * @param int|null $ha_priority HA election priority for the PING server.
     *
     * @return self
     */
    public function setHaPriority($ha_priority)
    {

        if (!is_null($ha_priority) && ($ha_priority > 50)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling InlineObject322., must be smaller than or equal to 50.');
        }
        if (!is_null($ha_priority) && ($ha_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['ha_priority'] = $ha_priority;

        return $this;
    }

    /**
     * Gets fail_detect
     *
     * @return string|null
     */
    public function getFailDetect()
    {
        return $this->container['fail_detect'];
    }

    /**
     * Sets fail_detect
     *
     * @param string|null $fail_detect Enable/disable fail detection features for this interface.    enable:Enable interface failed option status.    disable:Disable interface failed option status.
     *
     * @return self
     */
    public function setFailDetect($fail_detect)
    {
        $allowedValues = $this->getFailDetectAllowableValues();
        if (!is_null($fail_detect) && !in_array($fail_detect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fail_detect', must be one of '%s'",
                    $fail_detect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fail_detect'] = $fail_detect;

        return $this;
    }

    /**
     * Gets fail_detect_option
     *
     * @return string|null
     */
    public function getFailDetectOption()
    {
        return $this->container['fail_detect_option'];
    }

    /**
     * Sets fail_detect_option
     *
     * @param string|null $fail_detect_option Options for detecting that this interface has failed.    detectserver:Use a ping server to determine if the interface has failed.    link-down:Use port detection to determine if the interface has failed.
     *
     * @return self
     */
    public function setFailDetectOption($fail_detect_option)
    {
        $allowedValues = $this->getFailDetectOptionAllowableValues();
        if (!is_null($fail_detect_option) && !in_array($fail_detect_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fail_detect_option', must be one of '%s'",
                    $fail_detect_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fail_detect_option'] = $fail_detect_option;

        return $this;
    }

    /**
     * Gets fail_alert_method
     *
     * @return string|null
     */
    public function getFailAlertMethod()
    {
        return $this->container['fail_alert_method'];
    }

    /**
     * Sets fail_alert_method
     *
     * @param string|null $fail_alert_method Select link-failed-signal or link-down method to alert about a failed link.    link-failed-signal:Link-failed-signal.    link-down:Link-down.
     *
     * @return self
     */
    public function setFailAlertMethod($fail_alert_method)
    {
        $allowedValues = $this->getFailAlertMethodAllowableValues();
        if (!is_null($fail_alert_method) && !in_array($fail_alert_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fail_alert_method', must be one of '%s'",
                    $fail_alert_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fail_alert_method'] = $fail_alert_method;

        return $this;
    }

    /**
     * Gets fail_action_on_extender
     *
     * @return string|null
     */
    public function getFailActionOnExtender()
    {
        return $this->container['fail_action_on_extender'];
    }

    /**
     * Sets fail_action_on_extender
     *
     * @param string|null $fail_action_on_extender Action on extender when interface fail .    soft-restart:Soft-restart-on-extender.    hard-restart:Hard-restart-on-extender.    reboot:Reboot-on-extender.
     *
     * @return self
     */
    public function setFailActionOnExtender($fail_action_on_extender)
    {
        $allowedValues = $this->getFailActionOnExtenderAllowableValues();
        if (!is_null($fail_action_on_extender) && !in_array($fail_action_on_extender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fail_action_on_extender', must be one of '%s'",
                    $fail_action_on_extender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fail_action_on_extender'] = $fail_action_on_extender;

        return $this;
    }

    /**
     * Gets fail_alert_interfaces
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameFailAlertInterfaces[]|null
     */
    public function getFailAlertInterfaces()
    {
        return $this->container['fail_alert_interfaces'];
    }

    /**
     * Sets fail_alert_interfaces
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameFailAlertInterfaces[]|null $fail_alert_interfaces Names of the FortiGate interfaces to which the link failure alert is sent.
     *
     * @return self
     */
    public function setFailAlertInterfaces($fail_alert_interfaces)
    {

        if (!is_null($fail_alert_interfaces) && (count($fail_alert_interfaces) > 0)) {
            throw new \InvalidArgumentException('invalid value for $fail_alert_interfaces when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['fail_alert_interfaces'] = $fail_alert_interfaces;

        return $this;
    }

    /**
     * Gets dhcp_client_identifier
     *
     * @return string|null
     */
    public function getDhcpClientIdentifier()
    {
        return $this->container['dhcp_client_identifier'];
    }

    /**
     * Sets dhcp_client_identifier
     *
     * @param string|null $dhcp_client_identifier DHCP client identifier.
     *
     * @return self
     */
    public function setDhcpClientIdentifier($dhcp_client_identifier)
    {
        if (!is_null($dhcp_client_identifier) && (mb_strlen($dhcp_client_identifier) > 48)) {
            throw new \InvalidArgumentException('invalid length for $dhcp_client_identifier when calling InlineObject322., must be smaller than or equal to 48.');
        }

        $this->container['dhcp_client_identifier'] = $dhcp_client_identifier;

        return $this;
    }

    /**
     * Gets dhcp_renew_time
     *
     * @return int|null
     */
    public function getDhcpRenewTime()
    {
        return $this->container['dhcp_renew_time'];
    }

    /**
     * Sets dhcp_renew_time
     *
     * @param int|null $dhcp_renew_time DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
     *
     * @return self
     */
    public function setDhcpRenewTime($dhcp_renew_time)
    {

        if (!is_null($dhcp_renew_time) && ($dhcp_renew_time > 604800)) {
            throw new \InvalidArgumentException('invalid value for $dhcp_renew_time when calling InlineObject322., must be smaller than or equal to 604800.');
        }
        if (!is_null($dhcp_renew_time) && ($dhcp_renew_time < 300)) {
            throw new \InvalidArgumentException('invalid value for $dhcp_renew_time when calling InlineObject322., must be bigger than or equal to 300.');
        }

        $this->container['dhcp_renew_time'] = $dhcp_renew_time;

        return $this;
    }

    /**
     * Gets ipunnumbered
     *
     * @return string|null
     */
    public function getIpunnumbered()
    {
        return $this->container['ipunnumbered'];
    }

    /**
     * Sets ipunnumbered
     *
     * @param string|null $ipunnumbered Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
     *
     * @return self
     */
    public function setIpunnumbered($ipunnumbered)
    {
        $this->container['ipunnumbered'] = $ipunnumbered;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username of the PPPoE account, provided by your ISP.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject322., must be smaller than or equal to 64.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets pppoe_unnumbered_negotiate
     *
     * @return string|null
     */
    public function getPppoeUnnumberedNegotiate()
    {
        return $this->container['pppoe_unnumbered_negotiate'];
    }

    /**
     * Sets pppoe_unnumbered_negotiate
     *
     * @param string|null $pppoe_unnumbered_negotiate Enable/disable PPPoE unnumbered negotiation.    enable:Enable IP address negotiating for unnumbered.    disable:Disable IP address negotiating for unnumbered.
     *
     * @return self
     */
    public function setPppoeUnnumberedNegotiate($pppoe_unnumbered_negotiate)
    {
        $allowedValues = $this->getPppoeUnnumberedNegotiateAllowableValues();
        if (!is_null($pppoe_unnumbered_negotiate) && !in_array($pppoe_unnumbered_negotiate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pppoe_unnumbered_negotiate', must be one of '%s'",
                    $pppoe_unnumbered_negotiate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pppoe_unnumbered_negotiate'] = $pppoe_unnumbered_negotiate;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password PPPoE account's password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets idle_timeout
     *
     * @return int|null
     */
    public function getIdleTimeout()
    {
        return $this->container['idle_timeout'];
    }

    /**
     * Sets idle_timeout
     *
     * @param int|null $idle_timeout PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
     *
     * @return self
     */
    public function setIdleTimeout($idle_timeout)
    {

        if (!is_null($idle_timeout) && ($idle_timeout > 32767)) {
            throw new \InvalidArgumentException('invalid value for $idle_timeout when calling InlineObject322., must be smaller than or equal to 32767.');
        }
        if (!is_null($idle_timeout) && ($idle_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $idle_timeout when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['idle_timeout'] = $idle_timeout;

        return $this;
    }

    /**
     * Gets detected_peer_mtu
     *
     * @return int|null
     */
    public function getDetectedPeerMtu()
    {
        return $this->container['detected_peer_mtu'];
    }

    /**
     * Sets detected_peer_mtu
     *
     * @param int|null $detected_peer_mtu MTU of detected peer (0 - 4294967295).
     *
     * @return self
     */
    public function setDetectedPeerMtu($detected_peer_mtu)
    {

        if (!is_null($detected_peer_mtu) && ($detected_peer_mtu > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $detected_peer_mtu when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($detected_peer_mtu) && ($detected_peer_mtu < 0)) {
            throw new \InvalidArgumentException('invalid value for $detected_peer_mtu when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['detected_peer_mtu'] = $detected_peer_mtu;

        return $this;
    }

    /**
     * Gets disc_retry_timeout
     *
     * @return int|null
     */
    public function getDiscRetryTimeout()
    {
        return $this->container['disc_retry_timeout'];
    }

    /**
     * Sets disc_retry_timeout
     *
     * @param int|null $disc_retry_timeout Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
     *
     * @return self
     */
    public function setDiscRetryTimeout($disc_retry_timeout)
    {

        if (!is_null($disc_retry_timeout) && ($disc_retry_timeout > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $disc_retry_timeout when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($disc_retry_timeout) && ($disc_retry_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $disc_retry_timeout when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['disc_retry_timeout'] = $disc_retry_timeout;

        return $this;
    }

    /**
     * Gets padt_retry_timeout
     *
     * @return int|null
     */
    public function getPadtRetryTimeout()
    {
        return $this->container['padt_retry_timeout'];
    }

    /**
     * Sets padt_retry_timeout
     *
     * @param int|null $padt_retry_timeout PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
     *
     * @return self
     */
    public function setPadtRetryTimeout($padt_retry_timeout)
    {

        if (!is_null($padt_retry_timeout) && ($padt_retry_timeout > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $padt_retry_timeout when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($padt_retry_timeout) && ($padt_retry_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $padt_retry_timeout when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['padt_retry_timeout'] = $padt_retry_timeout;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name PPPoE service name.
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        if (!is_null($service_name) && (mb_strlen($service_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $service_name when calling InlineObject322., must be smaller than or equal to 63.');
        }

        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets ac_name
     *
     * @return string|null
     */
    public function getAcName()
    {
        return $this->container['ac_name'];
    }

    /**
     * Sets ac_name
     *
     * @param string|null $ac_name PPPoE server name.
     *
     * @return self
     */
    public function setAcName($ac_name)
    {
        if (!is_null($ac_name) && (mb_strlen($ac_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $ac_name when calling InlineObject322., must be smaller than or equal to 63.');
        }

        $this->container['ac_name'] = $ac_name;

        return $this;
    }

    /**
     * Gets lcp_echo_interval
     *
     * @return int|null
     */
    public function getLcpEchoInterval()
    {
        return $this->container['lcp_echo_interval'];
    }

    /**
     * Sets lcp_echo_interval
     *
     * @param int|null $lcp_echo_interval Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     *
     * @return self
     */
    public function setLcpEchoInterval($lcp_echo_interval)
    {

        if (!is_null($lcp_echo_interval) && ($lcp_echo_interval > 32767)) {
            throw new \InvalidArgumentException('invalid value for $lcp_echo_interval when calling InlineObject322., must be smaller than or equal to 32767.');
        }
        if (!is_null($lcp_echo_interval) && ($lcp_echo_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $lcp_echo_interval when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['lcp_echo_interval'] = $lcp_echo_interval;

        return $this;
    }

    /**
     * Gets lcp_max_echo_fails
     *
     * @return int|null
     */
    public function getLcpMaxEchoFails()
    {
        return $this->container['lcp_max_echo_fails'];
    }

    /**
     * Sets lcp_max_echo_fails
     *
     * @param int|null $lcp_max_echo_fails Maximum missed LCP echo messages before disconnect.
     *
     * @return self
     */
    public function setLcpMaxEchoFails($lcp_max_echo_fails)
    {

        if (!is_null($lcp_max_echo_fails) && ($lcp_max_echo_fails > 32767)) {
            throw new \InvalidArgumentException('invalid value for $lcp_max_echo_fails when calling InlineObject322., must be smaller than or equal to 32767.');
        }
        if (!is_null($lcp_max_echo_fails) && ($lcp_max_echo_fails < 0)) {
            throw new \InvalidArgumentException('invalid value for $lcp_max_echo_fails when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['lcp_max_echo_fails'] = $lcp_max_echo_fails;

        return $this;
    }

    /**
     * Gets defaultgw
     *
     * @return string|null
     */
    public function getDefaultgw()
    {
        return $this->container['defaultgw'];
    }

    /**
     * Sets defaultgw
     *
     * @param string|null $defaultgw Enable to get the gateway IP from the DHCP or PPPoE server.    enable:Enable default gateway.    disable:Disable default gateway.
     *
     * @return self
     */
    public function setDefaultgw($defaultgw)
    {
        $allowedValues = $this->getDefaultgwAllowableValues();
        if (!is_null($defaultgw) && !in_array($defaultgw, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'defaultgw', must be one of '%s'",
                    $defaultgw,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['defaultgw'] = $defaultgw;

        return $this;
    }

    /**
     * Gets dns_server_override
     *
     * @return string|null
     */
    public function getDnsServerOverride()
    {
        return $this->container['dns_server_override'];
    }

    /**
     * Sets dns_server_override
     *
     * @param string|null $dns_server_override Enable/disable use DNS acquired by DHCP or PPPoE.    enable:Use DNS acquired by DHCP or PPPoE.    disable:No not use DNS acquired by DHCP or PPPoE.
     *
     * @return self
     */
    public function setDnsServerOverride($dns_server_override)
    {
        $allowedValues = $this->getDnsServerOverrideAllowableValues();
        if (!is_null($dns_server_override) && !in_array($dns_server_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_server_override', must be one of '%s'",
                    $dns_server_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_server_override'] = $dns_server_override;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type PPP authentication type to use.    auto:Automatically choose authentication.    pap:PAP authentication.    chap:CHAP authentication.    mschapv1:MS-CHAPv1 authentication.    mschapv2:MS-CHAPv2 authentication.
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets pptp_client
     *
     * @return string|null
     */
    public function getPptpClient()
    {
        return $this->container['pptp_client'];
    }

    /**
     * Sets pptp_client
     *
     * @param string|null $pptp_client Enable/disable PPTP client.    enable:Enable PPTP client.    disable:Disable PPTP client.
     *
     * @return self
     */
    public function setPptpClient($pptp_client)
    {
        $allowedValues = $this->getPptpClientAllowableValues();
        if (!is_null($pptp_client) && !in_array($pptp_client, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pptp_client', must be one of '%s'",
                    $pptp_client,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pptp_client'] = $pptp_client;

        return $this;
    }

    /**
     * Gets pptp_user
     *
     * @return string|null
     */
    public function getPptpUser()
    {
        return $this->container['pptp_user'];
    }

    /**
     * Sets pptp_user
     *
     * @param string|null $pptp_user PPTP user name.
     *
     * @return self
     */
    public function setPptpUser($pptp_user)
    {
        if (!is_null($pptp_user) && (mb_strlen($pptp_user) > 64)) {
            throw new \InvalidArgumentException('invalid length for $pptp_user when calling InlineObject322., must be smaller than or equal to 64.');
        }

        $this->container['pptp_user'] = $pptp_user;

        return $this;
    }

    /**
     * Gets pptp_password
     *
     * @return string|null
     */
    public function getPptpPassword()
    {
        return $this->container['pptp_password'];
    }

    /**
     * Sets pptp_password
     *
     * @param string|null $pptp_password PPTP password.
     *
     * @return self
     */
    public function setPptpPassword($pptp_password)
    {
        $this->container['pptp_password'] = $pptp_password;

        return $this;
    }

    /**
     * Gets pptp_server_ip
     *
     * @return string|null
     */
    public function getPptpServerIp()
    {
        return $this->container['pptp_server_ip'];
    }

    /**
     * Sets pptp_server_ip
     *
     * @param string|null $pptp_server_ip PPTP server IP address.
     *
     * @return self
     */
    public function setPptpServerIp($pptp_server_ip)
    {
        $this->container['pptp_server_ip'] = $pptp_server_ip;

        return $this;
    }

    /**
     * Gets pptp_auth_type
     *
     * @return string|null
     */
    public function getPptpAuthType()
    {
        return $this->container['pptp_auth_type'];
    }

    /**
     * Sets pptp_auth_type
     *
     * @param string|null $pptp_auth_type PPTP authentication type.    auto:Automatically choose authentication.    pap:PAP authentication.    chap:CHAP authentication.    mschapv1:MS-CHAPv1 authentication.    mschapv2:MS-CHAPv2 authentication.
     *
     * @return self
     */
    public function setPptpAuthType($pptp_auth_type)
    {
        $allowedValues = $this->getPptpAuthTypeAllowableValues();
        if (!is_null($pptp_auth_type) && !in_array($pptp_auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pptp_auth_type', must be one of '%s'",
                    $pptp_auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pptp_auth_type'] = $pptp_auth_type;

        return $this;
    }

    /**
     * Gets pptp_timeout
     *
     * @return int|null
     */
    public function getPptpTimeout()
    {
        return $this->container['pptp_timeout'];
    }

    /**
     * Sets pptp_timeout
     *
     * @param int|null $pptp_timeout Idle timer in minutes (0 for disabled).
     *
     * @return self
     */
    public function setPptpTimeout($pptp_timeout)
    {

        if (!is_null($pptp_timeout) && ($pptp_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $pptp_timeout when calling InlineObject322., must be smaller than or equal to 65535.');
        }
        if (!is_null($pptp_timeout) && ($pptp_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $pptp_timeout when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['pptp_timeout'] = $pptp_timeout;

        return $this;
    }

    /**
     * Gets arpforward
     *
     * @return string|null
     */
    public function getArpforward()
    {
        return $this->container['arpforward'];
    }

    /**
     * Sets arpforward
     *
     * @param string|null $arpforward Enable/disable ARP forwarding.    enable:Enable ARP forwarding.    disable:Disable ARP forwarding.
     *
     * @return self
     */
    public function setArpforward($arpforward)
    {
        $allowedValues = $this->getArpforwardAllowableValues();
        if (!is_null($arpforward) && !in_array($arpforward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'arpforward', must be one of '%s'",
                    $arpforward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['arpforward'] = $arpforward;

        return $this;
    }

    /**
     * Gets ndiscforward
     *
     * @return string|null
     */
    public function getNdiscforward()
    {
        return $this->container['ndiscforward'];
    }

    /**
     * Sets ndiscforward
     *
     * @param string|null $ndiscforward Enable/disable NDISC forwarding.    enable:Enable NDISC forwarding.    disable:Disable NDISC forwarding.
     *
     * @return self
     */
    public function setNdiscforward($ndiscforward)
    {
        $allowedValues = $this->getNdiscforwardAllowableValues();
        if (!is_null($ndiscforward) && !in_array($ndiscforward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ndiscforward', must be one of '%s'",
                    $ndiscforward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ndiscforward'] = $ndiscforward;

        return $this;
    }

    /**
     * Gets broadcast_forward
     *
     * @return string|null
     */
    public function getBroadcastForward()
    {
        return $this->container['broadcast_forward'];
    }

    /**
     * Sets broadcast_forward
     *
     * @param string|null $broadcast_forward Enable/disable broadcast forwarding.    enable:Enable broadcast forwarding.    disable:Disable broadcast forwarding.
     *
     * @return self
     */
    public function setBroadcastForward($broadcast_forward)
    {
        $allowedValues = $this->getBroadcastForwardAllowableValues();
        if (!is_null($broadcast_forward) && !in_array($broadcast_forward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'broadcast_forward', must be one of '%s'",
                    $broadcast_forward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['broadcast_forward'] = $broadcast_forward;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Bidirectional Forwarding Detection (BFD) settings.    global:BFD behavior of this interface will be based on global configuration.    enable:Enable BFD on this interface and ignore global configuration.    disable:Disable BFD on this interface and ignore global configuration.
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }

    /**
     * Gets bfd_desired_min_tx
     *
     * @return int|null
     */
    public function getBfdDesiredMinTx()
    {
        return $this->container['bfd_desired_min_tx'];
    }

    /**
     * Sets bfd_desired_min_tx
     *
     * @param int|null $bfd_desired_min_tx BFD desired minimal transmit interval.
     *
     * @return self
     */
    public function setBfdDesiredMinTx($bfd_desired_min_tx)
    {

        if (!is_null($bfd_desired_min_tx) && ($bfd_desired_min_tx > 100000)) {
            throw new \InvalidArgumentException('invalid value for $bfd_desired_min_tx when calling InlineObject322., must be smaller than or equal to 100000.');
        }
        if (!is_null($bfd_desired_min_tx) && ($bfd_desired_min_tx < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_desired_min_tx when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['bfd_desired_min_tx'] = $bfd_desired_min_tx;

        return $this;
    }

    /**
     * Gets bfd_detect_mult
     *
     * @return int|null
     */
    public function getBfdDetectMult()
    {
        return $this->container['bfd_detect_mult'];
    }

    /**
     * Sets bfd_detect_mult
     *
     * @param int|null $bfd_detect_mult BFD detection multiplier.
     *
     * @return self
     */
    public function setBfdDetectMult($bfd_detect_mult)
    {

        if (!is_null($bfd_detect_mult) && ($bfd_detect_mult > 50)) {
            throw new \InvalidArgumentException('invalid value for $bfd_detect_mult when calling InlineObject322., must be smaller than or equal to 50.');
        }
        if (!is_null($bfd_detect_mult) && ($bfd_detect_mult < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_detect_mult when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['bfd_detect_mult'] = $bfd_detect_mult;

        return $this;
    }

    /**
     * Gets bfd_required_min_rx
     *
     * @return int|null
     */
    public function getBfdRequiredMinRx()
    {
        return $this->container['bfd_required_min_rx'];
    }

    /**
     * Sets bfd_required_min_rx
     *
     * @param int|null $bfd_required_min_rx BFD required minimal receive interval.
     *
     * @return self
     */
    public function setBfdRequiredMinRx($bfd_required_min_rx)
    {

        if (!is_null($bfd_required_min_rx) && ($bfd_required_min_rx > 100000)) {
            throw new \InvalidArgumentException('invalid value for $bfd_required_min_rx when calling InlineObject322., must be smaller than or equal to 100000.');
        }
        if (!is_null($bfd_required_min_rx) && ($bfd_required_min_rx < 1)) {
            throw new \InvalidArgumentException('invalid value for $bfd_required_min_rx when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['bfd_required_min_rx'] = $bfd_required_min_rx;

        return $this;
    }

    /**
     * Gets l2forward
     *
     * @return string|null
     */
    public function getL2forward()
    {
        return $this->container['l2forward'];
    }

    /**
     * Sets l2forward
     *
     * @param string|null $l2forward Enable/disable l2 forwarding.    enable:Enable L2 forwarding.    disable:Disable L2 forwarding.
     *
     * @return self
     */
    public function setL2forward($l2forward)
    {
        $allowedValues = $this->getL2forwardAllowableValues();
        if (!is_null($l2forward) && !in_array($l2forward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'l2forward', must be one of '%s'",
                    $l2forward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['l2forward'] = $l2forward;

        return $this;
    }

    /**
     * Gets icmp_send_redirect
     *
     * @return string|null
     */
    public function getIcmpSendRedirect()
    {
        return $this->container['icmp_send_redirect'];
    }

    /**
     * Sets icmp_send_redirect
     *
     * @param string|null $icmp_send_redirect Enable/disable sending of ICMP redirects.    enable:Enable sending of ICMP redirects.    disable:Disable sending of ICMP redirects.
     *
     * @return self
     */
    public function setIcmpSendRedirect($icmp_send_redirect)
    {
        $allowedValues = $this->getIcmpSendRedirectAllowableValues();
        if (!is_null($icmp_send_redirect) && !in_array($icmp_send_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp_send_redirect', must be one of '%s'",
                    $icmp_send_redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp_send_redirect'] = $icmp_send_redirect;

        return $this;
    }

    /**
     * Gets icmp_accept_redirect
     *
     * @return string|null
     */
    public function getIcmpAcceptRedirect()
    {
        return $this->container['icmp_accept_redirect'];
    }

    /**
     * Sets icmp_accept_redirect
     *
     * @param string|null $icmp_accept_redirect Enable/disable ICMP accept redirect.    enable:Enable ICMP accept redirect.    disable:Disable ICMP accept redirect.
     *
     * @return self
     */
    public function setIcmpAcceptRedirect($icmp_accept_redirect)
    {
        $allowedValues = $this->getIcmpAcceptRedirectAllowableValues();
        if (!is_null($icmp_accept_redirect) && !in_array($icmp_accept_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp_accept_redirect', must be one of '%s'",
                    $icmp_accept_redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp_accept_redirect'] = $icmp_accept_redirect;

        return $this;
    }

    /**
     * Gets vlanforward
     *
     * @return string|null
     */
    public function getVlanforward()
    {
        return $this->container['vlanforward'];
    }

    /**
     * Sets vlanforward
     *
     * @param string|null $vlanforward Enable/disable traffic forwarding between VLANs on this interface.    enable:Enable traffic forwarding.    disable:Disable traffic forwarding.
     *
     * @return self
     */
    public function setVlanforward($vlanforward)
    {
        $allowedValues = $this->getVlanforwardAllowableValues();
        if (!is_null($vlanforward) && !in_array($vlanforward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlanforward', must be one of '%s'",
                    $vlanforward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlanforward'] = $vlanforward;

        return $this;
    }

    /**
     * Gets stpforward
     *
     * @return string|null
     */
    public function getStpforward()
    {
        return $this->container['stpforward'];
    }

    /**
     * Sets stpforward
     *
     * @param string|null $stpforward Enable/disable STP forwarding.    enable:Enable STP forwarding.    disable:Disable STP forwarding.
     *
     * @return self
     */
    public function setStpforward($stpforward)
    {
        $allowedValues = $this->getStpforwardAllowableValues();
        if (!is_null($stpforward) && !in_array($stpforward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stpforward', must be one of '%s'",
                    $stpforward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stpforward'] = $stpforward;

        return $this;
    }

    /**
     * Gets stpforward_mode
     *
     * @return string|null
     */
    public function getStpforwardMode()
    {
        return $this->container['stpforward_mode'];
    }

    /**
     * Sets stpforward_mode
     *
     * @param string|null $stpforward_mode Configure STP forwarding mode.    rpl-all-ext-id:Replace all extension IDs (root, bridge).    rpl-bridge-ext-id:Replace the bridge extension ID only.    rpl-nothing:Replace nothing.
     *
     * @return self
     */
    public function setStpforwardMode($stpforward_mode)
    {
        $allowedValues = $this->getStpforwardModeAllowableValues();
        if (!is_null($stpforward_mode) && !in_array($stpforward_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stpforward_mode', must be one of '%s'",
                    $stpforward_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stpforward_mode'] = $stpforward_mode;

        return $this;
    }

    /**
     * Gets ips_sniffer_mode
     *
     * @return string|null
     */
    public function getIpsSnifferMode()
    {
        return $this->container['ips_sniffer_mode'];
    }

    /**
     * Sets ips_sniffer_mode
     *
     * @param string|null $ips_sniffer_mode Enable/disable the use of this interface as a one-armed sniffer.    enable:Enable IPS sniffer mode.    disable:Disable IPS sniffer mode.
     *
     * @return self
     */
    public function setIpsSnifferMode($ips_sniffer_mode)
    {
        $allowedValues = $this->getIpsSnifferModeAllowableValues();
        if (!is_null($ips_sniffer_mode) && !in_array($ips_sniffer_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ips_sniffer_mode', must be one of '%s'",
                    $ips_sniffer_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ips_sniffer_mode'] = $ips_sniffer_mode;

        return $this;
    }

    /**
     * Gets ident_accept
     *
     * @return string|null
     */
    public function getIdentAccept()
    {
        return $this->container['ident_accept'];
    }

    /**
     * Sets ident_accept
     *
     * @param string|null $ident_accept Enable/disable authentication for this interface.    enable:Enable determining a user's identity from packet identification.    disable:Disable determining a user's identity from packet identification.
     *
     * @return self
     */
    public function setIdentAccept($ident_accept)
    {
        $allowedValues = $this->getIdentAcceptAllowableValues();
        if (!is_null($ident_accept) && !in_array($ident_accept, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ident_accept', must be one of '%s'",
                    $ident_accept,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ident_accept'] = $ident_accept;

        return $this;
    }

    /**
     * Gets ipmac
     *
     * @return string|null
     */
    public function getIpmac()
    {
        return $this->container['ipmac'];
    }

    /**
     * Sets ipmac
     *
     * @param string|null $ipmac Enable/disable IP/MAC binding.    enable:Enable IP/MAC binding.    disable:Disable IP/MAC binding.
     *
     * @return self
     */
    public function setIpmac($ipmac)
    {
        $allowedValues = $this->getIpmacAllowableValues();
        if (!is_null($ipmac) && !in_array($ipmac, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipmac', must be one of '%s'",
                    $ipmac,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipmac'] = $ipmac;

        return $this;
    }

    /**
     * Gets subst
     *
     * @return string|null
     */
    public function getSubst()
    {
        return $this->container['subst'];
    }

    /**
     * Sets subst
     *
     * @param string|null $subst Enable to always send packets from this interface to a destination MAC address.    enable:Send packets from this interface.    disable:Do not send packets from this interface.
     *
     * @return self
     */
    public function setSubst($subst)
    {
        $allowedValues = $this->getSubstAllowableValues();
        if (!is_null($subst) && !in_array($subst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subst', must be one of '%s'",
                    $subst,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subst'] = $subst;

        return $this;
    }

    /**
     * Gets macaddr
     *
     * @return string|null
     */
    public function getMacaddr()
    {
        return $this->container['macaddr'];
    }

    /**
     * Sets macaddr
     *
     * @param string|null $macaddr Change the interface's MAC address.
     *
     * @return self
     */
    public function setMacaddr($macaddr)
    {
        $this->container['macaddr'] = $macaddr;

        return $this;
    }

    /**
     * Gets substitute_dst_mac
     *
     * @return string|null
     */
    public function getSubstituteDstMac()
    {
        return $this->container['substitute_dst_mac'];
    }

    /**
     * Sets substitute_dst_mac
     *
     * @param string|null $substitute_dst_mac Destination MAC address that all packets are sent to from this interface.
     *
     * @return self
     */
    public function setSubstituteDstMac($substitute_dst_mac)
    {
        $this->container['substitute_dst_mac'] = $substitute_dst_mac;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return string|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param string|null $speed Interface speed. The default setting and the options available depend on the interface hardware.    auto:Automatically adjust speed.    10full:10M full-duplex.    10half:10M half-duplex.    100full:100M full-duplex.    100half:100M half-duplex.    1000full:1000M full-duplex.    1000half:1000M half-duplex.    1000auto:1000M auto adjust.
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        $allowedValues = $this->getSpeedAllowableValues();
        if (!is_null($speed) && !in_array($speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'speed', must be one of '%s'",
                    $speed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Bring the interface up or shut the interface down.    up:Bring the interface up.    down:Shut the interface down.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets netbios_forward
     *
     * @return string|null
     */
    public function getNetbiosForward()
    {
        return $this->container['netbios_forward'];
    }

    /**
     * Sets netbios_forward
     *
     * @param string|null $netbios_forward Enable/disable NETBIOS forwarding.    disable:Disable NETBIOS forwarding.    enable:Enable NETBIOS forwarding.
     *
     * @return self
     */
    public function setNetbiosForward($netbios_forward)
    {
        $allowedValues = $this->getNetbiosForwardAllowableValues();
        if (!is_null($netbios_forward) && !in_array($netbios_forward, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'netbios_forward', must be one of '%s'",
                    $netbios_forward,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['netbios_forward'] = $netbios_forward;

        return $this;
    }

    /**
     * Gets wins_ip
     *
     * @return string|null
     */
    public function getWinsIp()
    {
        return $this->container['wins_ip'];
    }

    /**
     * Sets wins_ip
     *
     * @param string|null $wins_ip WINS server IP.
     *
     * @return self
     */
    public function setWinsIp($wins_ip)
    {
        $this->container['wins_ip'] = $wins_ip;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Interface type.    physical:Physical interface.    vlan:VLAN interface.    aggregate:Aggregate interface.    redundant:Redundant interface.    tunnel:Tunnel interface.    vdom-link:VDOM link interface.    loopback:Loopback interface.    switch:Software switch interface.    hard-switch:Hardware switch interface.    vap-switch:VAP interface.    wl-mesh:WLAN mesh interface.    fext-wan:FortiExtender interface.    vxlan:VXLAN interface.    geneve:GENEVE interface.    hdlc:T1/E1 interface.    switch-vlan:Switch VLAN interface.    emac-vlan:EMAC VLAN interface.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dedicated_to
     *
     * @return string|null
     */
    public function getDedicatedTo()
    {
        return $this->container['dedicated_to'];
    }

    /**
     * Sets dedicated_to
     *
     * @param string|null $dedicated_to Configure interface for single purpose.    none:Interface not dedicated for any purpose.    management:Dedicate this interface for management purposes only.
     *
     * @return self
     */
    public function setDedicatedTo($dedicated_to)
    {
        $allowedValues = $this->getDedicatedToAllowableValues();
        if (!is_null($dedicated_to) && !in_array($dedicated_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dedicated_to', must be one of '%s'",
                    $dedicated_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dedicated_to'] = $dedicated_to;

        return $this;
    }

    /**
     * Gets trust_ip_1
     *
     * @return string|null
     */
    public function getTrustIp1()
    {
        return $this->container['trust_ip_1'];
    }

    /**
     * Sets trust_ip_1
     *
     * @param string|null $trust_ip_1 Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     *
     * @return self
     */
    public function setTrustIp1($trust_ip_1)
    {
        $this->container['trust_ip_1'] = $trust_ip_1;

        return $this;
    }

    /**
     * Gets trust_ip_2
     *
     * @return string|null
     */
    public function getTrustIp2()
    {
        return $this->container['trust_ip_2'];
    }

    /**
     * Sets trust_ip_2
     *
     * @param string|null $trust_ip_2 Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     *
     * @return self
     */
    public function setTrustIp2($trust_ip_2)
    {
        $this->container['trust_ip_2'] = $trust_ip_2;

        return $this;
    }

    /**
     * Gets trust_ip_3
     *
     * @return string|null
     */
    public function getTrustIp3()
    {
        return $this->container['trust_ip_3'];
    }

    /**
     * Sets trust_ip_3
     *
     * @param string|null $trust_ip_3 Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     *
     * @return self
     */
    public function setTrustIp3($trust_ip_3)
    {
        $this->container['trust_ip_3'] = $trust_ip_3;

        return $this;
    }

    /**
     * Gets trust_ip6_1
     *
     * @return string|null
     */
    public function getTrustIp61()
    {
        return $this->container['trust_ip6_1'];
    }

    /**
     * Sets trust_ip6_1
     *
     * @param string|null $trust_ip6_1 Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     *
     * @return self
     */
    public function setTrustIp61($trust_ip6_1)
    {
        $this->container['trust_ip6_1'] = $trust_ip6_1;

        return $this;
    }

    /**
     * Gets trust_ip6_2
     *
     * @return string|null
     */
    public function getTrustIp62()
    {
        return $this->container['trust_ip6_2'];
    }

    /**
     * Sets trust_ip6_2
     *
     * @param string|null $trust_ip6_2 Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     *
     * @return self
     */
    public function setTrustIp62($trust_ip6_2)
    {
        $this->container['trust_ip6_2'] = $trust_ip6_2;

        return $this;
    }

    /**
     * Gets trust_ip6_3
     *
     * @return string|null
     */
    public function getTrustIp63()
    {
        return $this->container['trust_ip6_3'];
    }

    /**
     * Sets trust_ip6_3
     *
     * @param string|null $trust_ip6_3 Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     *
     * @return self
     */
    public function setTrustIp63($trust_ip6_3)
    {
        $this->container['trust_ip6_3'] = $trust_ip6_3;

        return $this;
    }

    /**
     * Gets mtu_override
     *
     * @return string|null
     */
    public function getMtuOverride()
    {
        return $this->container['mtu_override'];
    }

    /**
     * Sets mtu_override
     *
     * @param string|null $mtu_override Enable to set a custom MTU for this interface.    enable:Override default MTU.    disable:Use default MTU (1500).
     *
     * @return self
     */
    public function setMtuOverride($mtu_override)
    {
        $allowedValues = $this->getMtuOverrideAllowableValues();
        if (!is_null($mtu_override) && !in_array($mtu_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mtu_override', must be one of '%s'",
                    $mtu_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mtu_override'] = $mtu_override;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int|null
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int|null $mtu MTU value for this interface.
     *
     * @return self
     */
    public function setMtu($mtu)
    {

        if (!is_null($mtu) && ($mtu > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($mtu) && ($mtu < 0)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets wccp
     *
     * @return string|null
     */
    public function getWccp()
    {
        return $this->container['wccp'];
    }

    /**
     * Sets wccp
     *
     * @param string|null $wccp Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers.    enable:Enable WCCP protocol on this interface.    disable:Disable WCCP protocol on this interface.
     *
     * @return self
     */
    public function setWccp($wccp)
    {
        $allowedValues = $this->getWccpAllowableValues();
        if (!is_null($wccp) && !in_array($wccp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wccp', must be one of '%s'",
                    $wccp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wccp'] = $wccp;

        return $this;
    }

    /**
     * Gets netflow_sampler
     *
     * @return string|null
     */
    public function getNetflowSampler()
    {
        return $this->container['netflow_sampler'];
    }

    /**
     * Sets netflow_sampler
     *
     * @param string|null $netflow_sampler Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both).    disable:Disable NetFlow protocol on this interface.    tx:Monitor transmitted traffic on this interface.    rx:Monitor received traffic on this interface.    both:Monitor transmitted/received traffic on this interface.
     *
     * @return self
     */
    public function setNetflowSampler($netflow_sampler)
    {
        $allowedValues = $this->getNetflowSamplerAllowableValues();
        if (!is_null($netflow_sampler) && !in_array($netflow_sampler, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'netflow_sampler', must be one of '%s'",
                    $netflow_sampler,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['netflow_sampler'] = $netflow_sampler;

        return $this;
    }

    /**
     * Gets sflow_sampler
     *
     * @return string|null
     */
    public function getSflowSampler()
    {
        return $this->container['sflow_sampler'];
    }

    /**
     * Sets sflow_sampler
     *
     * @param string|null $sflow_sampler Enable/disable sFlow on this interface.    enable:Enable sFlow protocol on this interface.    disable:Disable sFlow protocol on this interface.
     *
     * @return self
     */
    public function setSflowSampler($sflow_sampler)
    {
        $allowedValues = $this->getSflowSamplerAllowableValues();
        if (!is_null($sflow_sampler) && !in_array($sflow_sampler, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sflow_sampler', must be one of '%s'",
                    $sflow_sampler,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sflow_sampler'] = $sflow_sampler;

        return $this;
    }

    /**
     * Gets drop_overlapped_fragment
     *
     * @return string|null
     */
    public function getDropOverlappedFragment()
    {
        return $this->container['drop_overlapped_fragment'];
    }

    /**
     * Sets drop_overlapped_fragment
     *
     * @param string|null $drop_overlapped_fragment Enable/disable drop overlapped fragment packets.    enable:Enable drop of overlapped fragment packets.    disable:Disable drop of overlapped fragment packets.
     *
     * @return self
     */
    public function setDropOverlappedFragment($drop_overlapped_fragment)
    {
        $allowedValues = $this->getDropOverlappedFragmentAllowableValues();
        if (!is_null($drop_overlapped_fragment) && !in_array($drop_overlapped_fragment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_overlapped_fragment', must be one of '%s'",
                    $drop_overlapped_fragment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drop_overlapped_fragment'] = $drop_overlapped_fragment;

        return $this;
    }

    /**
     * Gets drop_fragment
     *
     * @return string|null
     */
    public function getDropFragment()
    {
        return $this->container['drop_fragment'];
    }

    /**
     * Sets drop_fragment
     *
     * @param string|null $drop_fragment Enable/disable drop fragment packets.    enable:Enable/disable drop fragment packets.    disable:Do not drop fragment packets.
     *
     * @return self
     */
    public function setDropFragment($drop_fragment)
    {
        $allowedValues = $this->getDropFragmentAllowableValues();
        if (!is_null($drop_fragment) && !in_array($drop_fragment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_fragment', must be one of '%s'",
                    $drop_fragment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drop_fragment'] = $drop_fragment;

        return $this;
    }

    /**
     * Gets src_check
     *
     * @return string|null
     */
    public function getSrcCheck()
    {
        return $this->container['src_check'];
    }

    /**
     * Sets src_check
     *
     * @param string|null $src_check Enable/disable source IP check.    enable:Enable source IP check.    disable:Disable source IP check.
     *
     * @return self
     */
    public function setSrcCheck($src_check)
    {
        $allowedValues = $this->getSrcCheckAllowableValues();
        if (!is_null($src_check) && !in_array($src_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'src_check', must be one of '%s'",
                    $src_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['src_check'] = $src_check;

        return $this;
    }

    /**
     * Gets sample_rate
     *
     * @return int|null
     */
    public function getSampleRate()
    {
        return $this->container['sample_rate'];
    }

    /**
     * Sets sample_rate
     *
     * @param int|null $sample_rate sFlow sample rate (10 - 99999).
     *
     * @return self
     */
    public function setSampleRate($sample_rate)
    {

        if (!is_null($sample_rate) && ($sample_rate > 99999)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling InlineObject322., must be smaller than or equal to 99999.');
        }
        if (!is_null($sample_rate) && ($sample_rate < 10)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling InlineObject322., must be bigger than or equal to 10.');
        }

        $this->container['sample_rate'] = $sample_rate;

        return $this;
    }

    /**
     * Gets polling_interval
     *
     * @return int|null
     */
    public function getPollingInterval()
    {
        return $this->container['polling_interval'];
    }

    /**
     * Sets polling_interval
     *
     * @param int|null $polling_interval sFlow polling interval (1 - 255 sec).
     *
     * @return self
     */
    public function setPollingInterval($polling_interval)
    {

        if (!is_null($polling_interval) && ($polling_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $polling_interval when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($polling_interval) && ($polling_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $polling_interval when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['polling_interval'] = $polling_interval;

        return $this;
    }

    /**
     * Gets sample_direction
     *
     * @return string|null
     */
    public function getSampleDirection()
    {
        return $this->container['sample_direction'];
    }

    /**
     * Sets sample_direction
     *
     * @param string|null $sample_direction Data that NetFlow collects (rx, tx, or both).    tx:Monitor transmitted traffic on this interface.    rx:Monitor received traffic on this interface.    both:Monitor transmitted/received traffic on this interface.
     *
     * @return self
     */
    public function setSampleDirection($sample_direction)
    {
        $allowedValues = $this->getSampleDirectionAllowableValues();
        if (!is_null($sample_direction) && !in_array($sample_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sample_direction', must be one of '%s'",
                    $sample_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sample_direction'] = $sample_direction;

        return $this;
    }

    /**
     * Gets explicit_web_proxy
     *
     * @return string|null
     */
    public function getExplicitWebProxy()
    {
        return $this->container['explicit_web_proxy'];
    }

    /**
     * Sets explicit_web_proxy
     *
     * @param string|null $explicit_web_proxy Enable/disable the explicit web proxy on this interface.    enable:Enable explicit Web proxy on this interface.    disable:Disable explicit Web proxy on this interface.
     *
     * @return self
     */
    public function setExplicitWebProxy($explicit_web_proxy)
    {
        $allowedValues = $this->getExplicitWebProxyAllowableValues();
        if (!is_null($explicit_web_proxy) && !in_array($explicit_web_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'explicit_web_proxy', must be one of '%s'",
                    $explicit_web_proxy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['explicit_web_proxy'] = $explicit_web_proxy;

        return $this;
    }

    /**
     * Gets explicit_ftp_proxy
     *
     * @return string|null
     */
    public function getExplicitFtpProxy()
    {
        return $this->container['explicit_ftp_proxy'];
    }

    /**
     * Sets explicit_ftp_proxy
     *
     * @param string|null $explicit_ftp_proxy Enable/disable the explicit FTP proxy on this interface.    enable:Enable explicit FTP proxy on this interface.    disable:Disable explicit FTP proxy on this interface.
     *
     * @return self
     */
    public function setExplicitFtpProxy($explicit_ftp_proxy)
    {
        $allowedValues = $this->getExplicitFtpProxyAllowableValues();
        if (!is_null($explicit_ftp_proxy) && !in_array($explicit_ftp_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'explicit_ftp_proxy', must be one of '%s'",
                    $explicit_ftp_proxy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['explicit_ftp_proxy'] = $explicit_ftp_proxy;

        return $this;
    }

    /**
     * Gets proxy_captive_portal
     *
     * @return string|null
     */
    public function getProxyCaptivePortal()
    {
        return $this->container['proxy_captive_portal'];
    }

    /**
     * Sets proxy_captive_portal
     *
     * @param string|null $proxy_captive_portal Enable/disable proxy captive portal on this interface.    enable:Enable proxy captive portal on this interface.    disable:Disable proxy captive portal on this interface.
     *
     * @return self
     */
    public function setProxyCaptivePortal($proxy_captive_portal)
    {
        $allowedValues = $this->getProxyCaptivePortalAllowableValues();
        if (!is_null($proxy_captive_portal) && !in_array($proxy_captive_portal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_captive_portal', must be one of '%s'",
                    $proxy_captive_portal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_captive_portal'] = $proxy_captive_portal;

        return $this;
    }

    /**
     * Gets tcp_mss
     *
     * @return int|null
     */
    public function getTcpMss()
    {
        return $this->container['tcp_mss'];
    }

    /**
     * Sets tcp_mss
     *
     * @param int|null $tcp_mss TCP maximum segment size. 0 means do not change segment size.
     *
     * @return self
     */
    public function setTcpMss($tcp_mss)
    {

        if (!is_null($tcp_mss) && ($tcp_mss > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $tcp_mss when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($tcp_mss) && ($tcp_mss < 0)) {
            throw new \InvalidArgumentException('invalid value for $tcp_mss when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['tcp_mss'] = $tcp_mss;

        return $this;
    }

    /**
     * Gets inbandwidth
     *
     * @return int|null
     */
    public function getInbandwidth()
    {
        return $this->container['inbandwidth'];
    }

    /**
     * Sets inbandwidth
     *
     * @param int|null $inbandwidth Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
     *
     * @return self
     */
    public function setInbandwidth($inbandwidth)
    {

        if (!is_null($inbandwidth) && ($inbandwidth > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $inbandwidth when calling InlineObject322., must be smaller than or equal to 16776000.');
        }
        if (!is_null($inbandwidth) && ($inbandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $inbandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['inbandwidth'] = $inbandwidth;

        return $this;
    }

    /**
     * Gets outbandwidth
     *
     * @return int|null
     */
    public function getOutbandwidth()
    {
        return $this->container['outbandwidth'];
    }

    /**
     * Sets outbandwidth
     *
     * @param int|null $outbandwidth Bandwidth limit for outgoing traffic (0 - 16776000 kbps), 0 means unlimited.
     *
     * @return self
     */
    public function setOutbandwidth($outbandwidth)
    {

        if (!is_null($outbandwidth) && ($outbandwidth > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $outbandwidth when calling InlineObject322., must be smaller than or equal to 16776000.');
        }
        if (!is_null($outbandwidth) && ($outbandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $outbandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['outbandwidth'] = $outbandwidth;

        return $this;
    }

    /**
     * Gets egress_shaping_profile
     *
     * @return string|null
     */
    public function getEgressShapingProfile()
    {
        return $this->container['egress_shaping_profile'];
    }

    /**
     * Sets egress_shaping_profile
     *
     * @param string|null $egress_shaping_profile Outgoing traffic shaping profile.
     *
     * @return self
     */
    public function setEgressShapingProfile($egress_shaping_profile)
    {
        if (!is_null($egress_shaping_profile) && (mb_strlen($egress_shaping_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $egress_shaping_profile when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['egress_shaping_profile'] = $egress_shaping_profile;

        return $this;
    }

    /**
     * Gets ingress_shaping_profile
     *
     * @return string|null
     */
    public function getIngressShapingProfile()
    {
        return $this->container['ingress_shaping_profile'];
    }

    /**
     * Sets ingress_shaping_profile
     *
     * @param string|null $ingress_shaping_profile Incoming traffic shaping profile.
     *
     * @return self
     */
    public function setIngressShapingProfile($ingress_shaping_profile)
    {
        if (!is_null($ingress_shaping_profile) && (mb_strlen($ingress_shaping_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ingress_shaping_profile when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['ingress_shaping_profile'] = $ingress_shaping_profile;

        return $this;
    }

    /**
     * Gets disconnect_threshold
     *
     * @return int|null
     */
    public function getDisconnectThreshold()
    {
        return $this->container['disconnect_threshold'];
    }

    /**
     * Sets disconnect_threshold
     *
     * @param int|null $disconnect_threshold Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
     *
     * @return self
     */
    public function setDisconnectThreshold($disconnect_threshold)
    {

        if (!is_null($disconnect_threshold) && ($disconnect_threshold > 10000)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_threshold when calling InlineObject322., must be smaller than or equal to 10000.');
        }
        if (!is_null($disconnect_threshold) && ($disconnect_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $disconnect_threshold when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['disconnect_threshold'] = $disconnect_threshold;

        return $this;
    }

    /**
     * Gets spillover_threshold
     *
     * @return int|null
     */
    public function getSpilloverThreshold()
    {
        return $this->container['spillover_threshold'];
    }

    /**
     * Sets spillover_threshold
     *
     * @param int|null $spillover_threshold Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
     *
     * @return self
     */
    public function setSpilloverThreshold($spillover_threshold)
    {

        if (!is_null($spillover_threshold) && ($spillover_threshold > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $spillover_threshold when calling InlineObject322., must be smaller than or equal to 16776000.');
        }
        if (!is_null($spillover_threshold) && ($spillover_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $spillover_threshold when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['spillover_threshold'] = $spillover_threshold;

        return $this;
    }

    /**
     * Gets ingress_spillover_threshold
     *
     * @return int|null
     */
    public function getIngressSpilloverThreshold()
    {
        return $this->container['ingress_spillover_threshold'];
    }

    /**
     * Sets ingress_spillover_threshold
     *
     * @param int|null $ingress_spillover_threshold Ingress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
     *
     * @return self
     */
    public function setIngressSpilloverThreshold($ingress_spillover_threshold)
    {

        if (!is_null($ingress_spillover_threshold) && ($ingress_spillover_threshold > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $ingress_spillover_threshold when calling InlineObject322., must be smaller than or equal to 16776000.');
        }
        if (!is_null($ingress_spillover_threshold) && ($ingress_spillover_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $ingress_spillover_threshold when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['ingress_spillover_threshold'] = $ingress_spillover_threshold;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Default weight for static routes (if route has no weight configured).
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (!is_null($weight) && ($weight > 255)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($weight) && ($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Interface name.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets external
     *
     * @return string|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param string|null $external Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet).    enable:Enable identifying the interface as an external interface.    disable:Disable identifying the interface as an external interface.
     *
     * @return self
     */
    public function setExternal($external)
    {
        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($external) && !in_array($external, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external', must be one of '%s'",
                    $external,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets vlan_protocol
     *
     * @return string|null
     */
    public function getVlanProtocol()
    {
        return $this->container['vlan_protocol'];
    }

    /**
     * Sets vlan_protocol
     *
     * @param string|null $vlan_protocol Ethernet protocol of VLAN.    8021q:IEEE 802.1Q.    8021ad:IEEE 802.1AD.
     *
     * @return self
     */
    public function setVlanProtocol($vlan_protocol)
    {
        $allowedValues = $this->getVlanProtocolAllowableValues();
        if (!is_null($vlan_protocol) && !in_array($vlan_protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlan_protocol', must be one of '%s'",
                    $vlan_protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlan_protocol'] = $vlan_protocol;

        return $this;
    }

    /**
     * Gets vlanid
     *
     * @return int|null
     */
    public function getVlanid()
    {
        return $this->container['vlanid'];
    }

    /**
     * Sets vlanid
     *
     * @param int|null $vlanid VLAN ID (1 - 4094).
     *
     * @return self
     */
    public function setVlanid($vlanid)
    {

        if (!is_null($vlanid) && ($vlanid > 4094)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject322., must be smaller than or equal to 4094.');
        }
        if (!is_null($vlanid) && ($vlanid < 1)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['vlanid'] = $vlanid;

        return $this;
    }

    /**
     * Gets trunk
     *
     * @return string|null
     */
    public function getTrunk()
    {
        return $this->container['trunk'];
    }

    /**
     * Sets trunk
     *
     * @param string|null $trunk Enable/disable VLAN trunk.    enable:Enable VLAN trunk on this interface.    disable:Disable VLAN trunk on this interface.
     *
     * @return self
     */
    public function setTrunk($trunk)
    {
        $allowedValues = $this->getTrunkAllowableValues();
        if (!is_null($trunk) && !in_array($trunk, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trunk', must be one of '%s'",
                    $trunk,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trunk'] = $trunk;

        return $this;
    }

    /**
     * Gets forward_domain
     *
     * @return int|null
     */
    public function getForwardDomain()
    {
        return $this->container['forward_domain'];
    }

    /**
     * Sets forward_domain
     *
     * @param int|null $forward_domain Transparent mode forward domain.
     *
     * @return self
     */
    public function setForwardDomain($forward_domain)
    {

        if (!is_null($forward_domain) && ($forward_domain > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $forward_domain when calling InlineObject322., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($forward_domain) && ($forward_domain < 0)) {
            throw new \InvalidArgumentException('invalid value for $forward_domain when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['forward_domain'] = $forward_domain;

        return $this;
    }

    /**
     * Gets remote_ip
     *
     * @return string|null
     */
    public function getRemoteIp()
    {
        return $this->container['remote_ip'];
    }

    /**
     * Sets remote_ip
     *
     * @param string|null $remote_ip Remote IP address of tunnel.
     *
     * @return self
     */
    public function setRemoteIp($remote_ip)
    {
        $this->container['remote_ip'] = $remote_ip;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameMember[]|null $member Physical interfaces that belong to the aggregate or redundant interface.
     *
     * @return self
     */
    public function setMember($member)
    {

        if (!is_null($member) && (count($member) > 0)) {
            throw new \InvalidArgumentException('invalid value for $member when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets lacp_mode
     *
     * @return string|null
     */
    public function getLacpMode()
    {
        return $this->container['lacp_mode'];
    }

    /**
     * Sets lacp_mode
     *
     * @param string|null $lacp_mode LACP mode.    static:Use static aggregation, do not send and ignore any LACP messages.    passive:Passively use LACP to negotiate 802.3ad aggregation.    active:Actively use LACP to negotiate 802.3ad aggregation.
     *
     * @return self
     */
    public function setLacpMode($lacp_mode)
    {
        $allowedValues = $this->getLacpModeAllowableValues();
        if (!is_null($lacp_mode) && !in_array($lacp_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lacp_mode', must be one of '%s'",
                    $lacp_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lacp_mode'] = $lacp_mode;

        return $this;
    }

    /**
     * Gets lacp_ha_slave
     *
     * @return string|null
     */
    public function getLacpHaSlave()
    {
        return $this->container['lacp_ha_slave'];
    }

    /**
     * Sets lacp_ha_slave
     *
     * @param string|null $lacp_ha_slave LACP HA slave.    enable:Allow HA slave to send/receive LACP messages.    disable:Block HA slave from sending/receiving LACP messages.
     *
     * @return self
     */
    public function setLacpHaSlave($lacp_ha_slave)
    {
        $allowedValues = $this->getLacpHaSlaveAllowableValues();
        if (!is_null($lacp_ha_slave) && !in_array($lacp_ha_slave, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lacp_ha_slave', must be one of '%s'",
                    $lacp_ha_slave,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lacp_ha_slave'] = $lacp_ha_slave;

        return $this;
    }

    /**
     * Gets lacp_speed
     *
     * @return string|null
     */
    public function getLacpSpeed()
    {
        return $this->container['lacp_speed'];
    }

    /**
     * Sets lacp_speed
     *
     * @param string|null $lacp_speed How often the interface sends LACP messages.    slow:Send LACP message every 30 seconds.    fast:Send LACP message every second.
     *
     * @return self
     */
    public function setLacpSpeed($lacp_speed)
    {
        $allowedValues = $this->getLacpSpeedAllowableValues();
        if (!is_null($lacp_speed) && !in_array($lacp_speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lacp_speed', must be one of '%s'",
                    $lacp_speed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lacp_speed'] = $lacp_speed;

        return $this;
    }

    /**
     * Gets min_links
     *
     * @return int|null
     */
    public function getMinLinks()
    {
        return $this->container['min_links'];
    }

    /**
     * Sets min_links
     *
     * @param int|null $min_links Minimum number of aggregated ports that must be up.
     *
     * @return self
     */
    public function setMinLinks($min_links)
    {

        if (!is_null($min_links) && ($min_links > 32)) {
            throw new \InvalidArgumentException('invalid value for $min_links when calling InlineObject322., must be smaller than or equal to 32.');
        }
        if (!is_null($min_links) && ($min_links < 1)) {
            throw new \InvalidArgumentException('invalid value for $min_links when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['min_links'] = $min_links;

        return $this;
    }

    /**
     * Gets min_links_down
     *
     * @return string|null
     */
    public function getMinLinksDown()
    {
        return $this->container['min_links_down'];
    }

    /**
     * Sets min_links_down
     *
     * @param string|null $min_links_down Action to take when less than the configured minimum number of links are active.    operational:Set the aggregate operationally down.    administrative:Set the aggregate administratively down.
     *
     * @return self
     */
    public function setMinLinksDown($min_links_down)
    {
        $allowedValues = $this->getMinLinksDownAllowableValues();
        if (!is_null($min_links_down) && !in_array($min_links_down, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'min_links_down', must be one of '%s'",
                    $min_links_down,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['min_links_down'] = $min_links_down;

        return $this;
    }

    /**
     * Gets algorithm
     *
     * @return string|null
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     *
     * @param string|null $algorithm Frame distribution algorithm.    L2:Use layer 2 address for distribution.    L3:Use layer 3 address for distribution.    L4:Use layer 4 information for distribution.
     *
     * @return self
     */
    public function setAlgorithm($algorithm)
    {
        $allowedValues = $this->getAlgorithmAllowableValues();
        if (!is_null($algorithm) && !in_array($algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'algorithm', must be one of '%s'",
                    $algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets link_up_delay
     *
     * @return int|null
     */
    public function getLinkUpDelay()
    {
        return $this->container['link_up_delay'];
    }

    /**
     * Sets link_up_delay
     *
     * @param int|null $link_up_delay Number of milliseconds to wait before considering a link is up.
     *
     * @return self
     */
    public function setLinkUpDelay($link_up_delay)
    {

        if (!is_null($link_up_delay) && ($link_up_delay > 3600000)) {
            throw new \InvalidArgumentException('invalid value for $link_up_delay when calling InlineObject322., must be smaller than or equal to 3600000.');
        }
        if (!is_null($link_up_delay) && ($link_up_delay < 50)) {
            throw new \InvalidArgumentException('invalid value for $link_up_delay when calling InlineObject322., must be bigger than or equal to 50.');
        }

        $this->container['link_up_delay'] = $link_up_delay;

        return $this;
    }

    /**
     * Gets priority_override
     *
     * @return string|null
     */
    public function getPriorityOverride()
    {
        return $this->container['priority_override'];
    }

    /**
     * Sets priority_override
     *
     * @param string|null $priority_override Enable/disable fail back to higher priority port once recovered.    enable:Enable fail back to higher priority port once recovered.    disable:Disable fail back to higher priority port once recovered.
     *
     * @return self
     */
    public function setPriorityOverride($priority_override)
    {
        $allowedValues = $this->getPriorityOverrideAllowableValues();
        if (!is_null($priority_override) && !in_array($priority_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority_override', must be one of '%s'",
                    $priority_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority_override'] = $priority_override;

        return $this;
    }

    /**
     * Gets aggregate
     *
     * @return string|null
     */
    public function getAggregate()
    {
        return $this->container['aggregate'];
    }

    /**
     * Sets aggregate
     *
     * @param string|null $aggregate Aggregate interface.
     *
     * @return self
     */
    public function setAggregate($aggregate)
    {
        if (!is_null($aggregate) && (mb_strlen($aggregate) > 15)) {
            throw new \InvalidArgumentException('invalid length for $aggregate when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['aggregate'] = $aggregate;

        return $this;
    }

    /**
     * Gets redundant_interface
     *
     * @return string|null
     */
    public function getRedundantInterface()
    {
        return $this->container['redundant_interface'];
    }

    /**
     * Sets redundant_interface
     *
     * @param string|null $redundant_interface Redundant interface.
     *
     * @return self
     */
    public function setRedundantInterface($redundant_interface)
    {
        if (!is_null($redundant_interface) && (mb_strlen($redundant_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $redundant_interface when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['redundant_interface'] = $redundant_interface;

        return $this;
    }

    /**
     * Gets devindex
     *
     * @return int|null
     */
    public function getDevindex()
    {
        return $this->container['devindex'];
    }

    /**
     * Sets devindex
     *
     * @param int|null $devindex Device Index.
     *
     * @return self
     */
    public function setDevindex($devindex)
    {

        if (!is_null($devindex) && ($devindex > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $devindex when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($devindex) && ($devindex < 0)) {
            throw new \InvalidArgumentException('invalid value for $devindex when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['devindex'] = $devindex;

        return $this;
    }

    /**
     * Gets vindex
     *
     * @return int|null
     */
    public function getVindex()
    {
        return $this->container['vindex'];
    }

    /**
     * Sets vindex
     *
     * @param int|null $vindex Switch control interface VLAN ID.
     *
     * @return self
     */
    public function setVindex($vindex)
    {

        if (!is_null($vindex) && ($vindex > 65535)) {
            throw new \InvalidArgumentException('invalid value for $vindex when calling InlineObject322., must be smaller than or equal to 65535.');
        }
        if (!is_null($vindex) && ($vindex < 0)) {
            throw new \InvalidArgumentException('invalid value for $vindex when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['vindex'] = $vindex;

        return $this;
    }

    /**
     * Gets switch
     *
     * @return string|null
     */
    public function getSwitch()
    {
        return $this->container['switch'];
    }

    /**
     * Sets switch
     *
     * @param string|null $switch Contained in switch.
     *
     * @return self
     */
    public function setSwitch($switch)
    {
        if (!is_null($switch) && (mb_strlen($switch) > 15)) {
            throw new \InvalidArgumentException('invalid length for $switch when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['switch'] = $switch;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject322., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias Alias will be displayed with the interface name to make it easier to distinguish.
     *
     * @return self
     */
    public function setAlias($alias)
    {
        if (!is_null($alias) && (mb_strlen($alias) > 25)) {
            throw new \InvalidArgumentException('invalid length for $alias when calling InlineObject322., must be smaller than or equal to 25.');
        }

        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets l2tp_client
     *
     * @return string|null
     */
    public function getL2tpClient()
    {
        return $this->container['l2tp_client'];
    }

    /**
     * Sets l2tp_client
     *
     * @param string|null $l2tp_client Enable/disable this interface as a Layer 2 Tunnelling Protocol (L2TP) client.    enable:Enable L2TP client.    disable:Disable L2TP client.
     *
     * @return self
     */
    public function setL2tpClient($l2tp_client)
    {
        $allowedValues = $this->getL2tpClientAllowableValues();
        if (!is_null($l2tp_client) && !in_array($l2tp_client, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'l2tp_client', must be one of '%s'",
                    $l2tp_client,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['l2tp_client'] = $l2tp_client;

        return $this;
    }

    /**
     * Gets l2tp_client_settings
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameL2tpClientSettings[]|null
     */
    public function getL2tpClientSettings()
    {
        return $this->container['l2tp_client_settings'];
    }

    /**
     * Sets l2tp_client_settings
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameL2tpClientSettings[]|null $l2tp_client_settings L2TP client settings.
     *
     * @return self
     */
    public function setL2tpClientSettings($l2tp_client_settings)
    {

        if (!is_null($l2tp_client_settings) && (count($l2tp_client_settings) > 0)) {
            throw new \InvalidArgumentException('invalid value for $l2tp_client_settings when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['l2tp_client_settings'] = $l2tp_client_settings;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode Turn on captive portal authentication for this interface.    none:No security option.    captive-portal:Captive portal authentication.    802.1X:802.1X port-based authentication.
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($security_mode) && !in_array($security_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mode', must be one of '%s'",
                    $security_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets security_mac_auth_bypass
     *
     * @return string|null
     */
    public function getSecurityMacAuthBypass()
    {
        return $this->container['security_mac_auth_bypass'];
    }

    /**
     * Sets security_mac_auth_bypass
     *
     * @param string|null $security_mac_auth_bypass Enable/disable MAC authentication bypass.    mac-auth-only:Enable MAC authentication bypass without EAP.    enable:Enable MAC authentication bypass.    disable:Disable MAC authentication bypass.
     *
     * @return self
     */
    public function setSecurityMacAuthBypass($security_mac_auth_bypass)
    {
        $allowedValues = $this->getSecurityMacAuthBypassAllowableValues();
        if (!is_null($security_mac_auth_bypass) && !in_array($security_mac_auth_bypass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mac_auth_bypass', must be one of '%s'",
                    $security_mac_auth_bypass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mac_auth_bypass'] = $security_mac_auth_bypass;

        return $this;
    }

    /**
     * Gets security_8021x_mode
     *
     * @return string|null
     */
    public function getSecurity8021xMode()
    {
        return $this->container['security_8021x_mode'];
    }

    /**
     * Sets security_8021x_mode
     *
     * @param string|null $security_8021x_mode 802.1X mode.    default:802.1X default mode.    dynamic-vlan:802.1X dynamic VLAN (master) mode.    fallback:802.1X fallback (master) mode.    slave:802.1X slave mode.
     *
     * @return self
     */
    public function setSecurity8021xMode($security_8021x_mode)
    {
        $allowedValues = $this->getSecurity8021xModeAllowableValues();
        if (!is_null($security_8021x_mode) && !in_array($security_8021x_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_8021x_mode', must be one of '%s'",
                    $security_8021x_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_8021x_mode'] = $security_8021x_mode;

        return $this;
    }

    /**
     * Gets security_8021x_master
     *
     * @return string|null
     */
    public function getSecurity8021xMaster()
    {
        return $this->container['security_8021x_master'];
    }

    /**
     * Sets security_8021x_master
     *
     * @param string|null $security_8021x_master 802.1X master virtual-switch.
     *
     * @return self
     */
    public function setSecurity8021xMaster($security_8021x_master)
    {
        if (!is_null($security_8021x_master) && (mb_strlen($security_8021x_master) > 15)) {
            throw new \InvalidArgumentException('invalid length for $security_8021x_master when calling InlineObject322., must be smaller than or equal to 15.');
        }

        $this->container['security_8021x_master'] = $security_8021x_master;

        return $this;
    }

    /**
     * Gets security_8021x_dynamic_vlan_id
     *
     * @return int|null
     */
    public function getSecurity8021xDynamicVlanId()
    {
        return $this->container['security_8021x_dynamic_vlan_id'];
    }

    /**
     * Sets security_8021x_dynamic_vlan_id
     *
     * @param int|null $security_8021x_dynamic_vlan_id VLAN ID for virtual switch.
     *
     * @return self
     */
    public function setSecurity8021xDynamicVlanId($security_8021x_dynamic_vlan_id)
    {

        if (!is_null($security_8021x_dynamic_vlan_id) && ($security_8021x_dynamic_vlan_id > 4094)) {
            throw new \InvalidArgumentException('invalid value for $security_8021x_dynamic_vlan_id when calling InlineObject322., must be smaller than or equal to 4094.');
        }
        if (!is_null($security_8021x_dynamic_vlan_id) && ($security_8021x_dynamic_vlan_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $security_8021x_dynamic_vlan_id when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['security_8021x_dynamic_vlan_id'] = $security_8021x_dynamic_vlan_id;

        return $this;
    }

    /**
     * Gets security_external_web
     *
     * @return string|null
     */
    public function getSecurityExternalWeb()
    {
        return $this->container['security_external_web'];
    }

    /**
     * Sets security_external_web
     *
     * @param string|null $security_external_web URL of external authentication web server.
     *
     * @return self
     */
    public function setSecurityExternalWeb($security_external_web)
    {
        if (!is_null($security_external_web) && (mb_strlen($security_external_web) > 127)) {
            throw new \InvalidArgumentException('invalid length for $security_external_web when calling InlineObject322., must be smaller than or equal to 127.');
        }

        $this->container['security_external_web'] = $security_external_web;

        return $this;
    }

    /**
     * Gets security_external_logout
     *
     * @return string|null
     */
    public function getSecurityExternalLogout()
    {
        return $this->container['security_external_logout'];
    }

    /**
     * Sets security_external_logout
     *
     * @param string|null $security_external_logout URL of external authentication logout server.
     *
     * @return self
     */
    public function setSecurityExternalLogout($security_external_logout)
    {
        if (!is_null($security_external_logout) && (mb_strlen($security_external_logout) > 127)) {
            throw new \InvalidArgumentException('invalid length for $security_external_logout when calling InlineObject322., must be smaller than or equal to 127.');
        }

        $this->container['security_external_logout'] = $security_external_logout;

        return $this;
    }

    /**
     * Gets replacemsg_override_group
     *
     * @return string|null
     */
    public function getReplacemsgOverrideGroup()
    {
        return $this->container['replacemsg_override_group'];
    }

    /**
     * Sets replacemsg_override_group
     *
     * @param string|null $replacemsg_override_group Replacement message override group.
     *
     * @return self
     */
    public function setReplacemsgOverrideGroup($replacemsg_override_group)
    {
        if (!is_null($replacemsg_override_group) && (mb_strlen($replacemsg_override_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_override_group when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_override_group'] = $replacemsg_override_group;

        return $this;
    }

    /**
     * Gets security_redirect_url
     *
     * @return string|null
     */
    public function getSecurityRedirectUrl()
    {
        return $this->container['security_redirect_url'];
    }

    /**
     * Sets security_redirect_url
     *
     * @param string|null $security_redirect_url URL redirection after disclaimer/authentication.
     *
     * @return self
     */
    public function setSecurityRedirectUrl($security_redirect_url)
    {
        if (!is_null($security_redirect_url) && (mb_strlen($security_redirect_url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $security_redirect_url when calling InlineObject322., must be smaller than or equal to 127.');
        }

        $this->container['security_redirect_url'] = $security_redirect_url;

        return $this;
    }

    /**
     * Gets security_exempt_list
     *
     * @return string|null
     */
    public function getSecurityExemptList()
    {
        return $this->container['security_exempt_list'];
    }

    /**
     * Sets security_exempt_list
     *
     * @param string|null $security_exempt_list Name of security-exempt-list.
     *
     * @return self
     */
    public function setSecurityExemptList($security_exempt_list)
    {
        if (!is_null($security_exempt_list) && (mb_strlen($security_exempt_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $security_exempt_list when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['security_exempt_list'] = $security_exempt_list;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecurityGroups[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecurityGroups[]|null $security_groups User groups that can authenticate with the captive portal.
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {

        if (!is_null($security_groups) && (count($security_groups) > 0)) {
            throw new \InvalidArgumentException('invalid value for $security_groups when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['security_groups'] = $security_groups;

        return $this;
    }

    /**
     * Gets stp
     *
     * @return string|null
     */
    public function getStp()
    {
        return $this->container['stp'];
    }

    /**
     * Sets stp
     *
     * @param string|null $stp Enable/disable STP.    disable:Disable STP.    enable:Enable STP.
     *
     * @return self
     */
    public function setStp($stp)
    {
        $allowedValues = $this->getStpAllowableValues();
        if (!is_null($stp) && !in_array($stp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp', must be one of '%s'",
                    $stp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp'] = $stp;

        return $this;
    }

    /**
     * Gets stp_ha_slave
     *
     * @return string|null
     */
    public function getStpHaSlave()
    {
        return $this->container['stp_ha_slave'];
    }

    /**
     * Sets stp_ha_slave
     *
     * @param string|null $stp_ha_slave Control STP behaviour on HA slave.    disable:Disable STP negotiation on HA slave.    enable:Enable STP negotiation on HA slave.    priority-adjust:Enable STP negotiation on HA slave and make priority lower than HA master.
     *
     * @return self
     */
    public function setStpHaSlave($stp_ha_slave)
    {
        $allowedValues = $this->getStpHaSlaveAllowableValues();
        if (!is_null($stp_ha_slave) && !in_array($stp_ha_slave, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp_ha_slave', must be one of '%s'",
                    $stp_ha_slave,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_ha_slave'] = $stp_ha_slave;

        return $this;
    }

    /**
     * Gets device_identification
     *
     * @return string|null
     */
    public function getDeviceIdentification()
    {
        return $this->container['device_identification'];
    }

    /**
     * Sets device_identification
     *
     * @param string|null $device_identification Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.    enable:Enable passive gathering of identity information about hosts.    disable:Disable passive gathering of identity information about hosts.
     *
     * @return self
     */
    public function setDeviceIdentification($device_identification)
    {
        $allowedValues = $this->getDeviceIdentificationAllowableValues();
        if (!is_null($device_identification) && !in_array($device_identification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_identification', must be one of '%s'",
                    $device_identification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_identification'] = $device_identification;

        return $this;
    }

    /**
     * Gets device_user_identification
     *
     * @return string|null
     */
    public function getDeviceUserIdentification()
    {
        return $this->container['device_user_identification'];
    }

    /**
     * Sets device_user_identification
     *
     * @param string|null $device_user_identification Enable/disable passive gathering of user identity information about users on this interface.    enable:Enable passive gathering of user identity information about users.    disable:Disable passive gathering of user identity information about users.
     *
     * @return self
     */
    public function setDeviceUserIdentification($device_user_identification)
    {
        $allowedValues = $this->getDeviceUserIdentificationAllowableValues();
        if (!is_null($device_user_identification) && !in_array($device_user_identification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_user_identification', must be one of '%s'",
                    $device_user_identification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_user_identification'] = $device_user_identification;

        return $this;
    }

    /**
     * Gets lldp_reception
     *
     * @return string|null
     */
    public function getLldpReception()
    {
        return $this->container['lldp_reception'];
    }

    /**
     * Sets lldp_reception
     *
     * @param string|null $lldp_reception Enable/disable Link Layer Discovery Protocol (LLDP) reception.    enable:Enable reception of Link Layer Discovery Protocol (LLDP).    disable:Disable reception of Link Layer Discovery Protocol (LLDP).    vdom:Use VDOM Link Layer Discovery Protocol (LLDP) reception configuration setting.
     *
     * @return self
     */
    public function setLldpReception($lldp_reception)
    {
        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($lldp_reception) && !in_array($lldp_reception, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_reception', must be one of '%s'",
                    $lldp_reception,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_reception'] = $lldp_reception;

        return $this;
    }

    /**
     * Gets lldp_transmission
     *
     * @return string|null
     */
    public function getLldpTransmission()
    {
        return $this->container['lldp_transmission'];
    }

    /**
     * Sets lldp_transmission
     *
     * @param string|null $lldp_transmission Enable/disable Link Layer Discovery Protocol (LLDP) transmission.    enable:Enable transmission of Link Layer Discovery Protocol (LLDP).    disable:Disable transmission of Link Layer Discovery Protocol (LLDP).    vdom:Use VDOM Link Layer Discovery Protocol (LLDP) transmission configuration setting.
     *
     * @return self
     */
    public function setLldpTransmission($lldp_transmission)
    {
        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($lldp_transmission) && !in_array($lldp_transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                    $lldp_transmission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_transmission'] = $lldp_transmission;

        return $this;
    }

    /**
     * Gets lldp_network_policy
     *
     * @return string|null
     */
    public function getLldpNetworkPolicy()
    {
        return $this->container['lldp_network_policy'];
    }

    /**
     * Sets lldp_network_policy
     *
     * @param string|null $lldp_network_policy LLDP-MED network policy profile.
     *
     * @return self
     */
    public function setLldpNetworkPolicy($lldp_network_policy)
    {
        if (!is_null($lldp_network_policy) && (mb_strlen($lldp_network_policy) > 35)) {
            throw new \InvalidArgumentException('invalid length for $lldp_network_policy when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['lldp_network_policy'] = $lldp_network_policy;

        return $this;
    }

    /**
     * Gets estimated_upstream_bandwidth
     *
     * @return int|null
     */
    public function getEstimatedUpstreamBandwidth()
    {
        return $this->container['estimated_upstream_bandwidth'];
    }

    /**
     * Sets estimated_upstream_bandwidth
     *
     * @param int|null $estimated_upstream_bandwidth Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
     *
     * @return self
     */
    public function setEstimatedUpstreamBandwidth($estimated_upstream_bandwidth)
    {

        if (!is_null($estimated_upstream_bandwidth) && ($estimated_upstream_bandwidth > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $estimated_upstream_bandwidth when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($estimated_upstream_bandwidth) && ($estimated_upstream_bandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $estimated_upstream_bandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['estimated_upstream_bandwidth'] = $estimated_upstream_bandwidth;

        return $this;
    }

    /**
     * Gets estimated_downstream_bandwidth
     *
     * @return int|null
     */
    public function getEstimatedDownstreamBandwidth()
    {
        return $this->container['estimated_downstream_bandwidth'];
    }

    /**
     * Sets estimated_downstream_bandwidth
     *
     * @param int|null $estimated_downstream_bandwidth Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
     *
     * @return self
     */
    public function setEstimatedDownstreamBandwidth($estimated_downstream_bandwidth)
    {

        if (!is_null($estimated_downstream_bandwidth) && ($estimated_downstream_bandwidth > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $estimated_downstream_bandwidth when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($estimated_downstream_bandwidth) && ($estimated_downstream_bandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $estimated_downstream_bandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['estimated_downstream_bandwidth'] = $estimated_downstream_bandwidth;

        return $this;
    }

    /**
     * Gets measured_upstream_bandwidth
     *
     * @return int|null
     */
    public function getMeasuredUpstreamBandwidth()
    {
        return $this->container['measured_upstream_bandwidth'];
    }

    /**
     * Sets measured_upstream_bandwidth
     *
     * @param int|null $measured_upstream_bandwidth Measured upstream bandwidth (kbps).
     *
     * @return self
     */
    public function setMeasuredUpstreamBandwidth($measured_upstream_bandwidth)
    {

        if (!is_null($measured_upstream_bandwidth) && ($measured_upstream_bandwidth > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $measured_upstream_bandwidth when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($measured_upstream_bandwidth) && ($measured_upstream_bandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $measured_upstream_bandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['measured_upstream_bandwidth'] = $measured_upstream_bandwidth;

        return $this;
    }

    /**
     * Gets measured_downstream_bandwidth
     *
     * @return int|null
     */
    public function getMeasuredDownstreamBandwidth()
    {
        return $this->container['measured_downstream_bandwidth'];
    }

    /**
     * Sets measured_downstream_bandwidth
     *
     * @param int|null $measured_downstream_bandwidth Measured downstream bandwidth (kbps).
     *
     * @return self
     */
    public function setMeasuredDownstreamBandwidth($measured_downstream_bandwidth)
    {

        if (!is_null($measured_downstream_bandwidth) && ($measured_downstream_bandwidth > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $measured_downstream_bandwidth when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($measured_downstream_bandwidth) && ($measured_downstream_bandwidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $measured_downstream_bandwidth when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['measured_downstream_bandwidth'] = $measured_downstream_bandwidth;

        return $this;
    }

    /**
     * Gets bandwidth_measure_time
     *
     * @return int|null
     */
    public function getBandwidthMeasureTime()
    {
        return $this->container['bandwidth_measure_time'];
    }

    /**
     * Sets bandwidth_measure_time
     *
     * @param int|null $bandwidth_measure_time Bandwidth measure time
     *
     * @return self
     */
    public function setBandwidthMeasureTime($bandwidth_measure_time)
    {

        if (!is_null($bandwidth_measure_time) && ($bandwidth_measure_time > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_measure_time when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($bandwidth_measure_time) && ($bandwidth_measure_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_measure_time when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['bandwidth_measure_time'] = $bandwidth_measure_time;

        return $this;
    }

    /**
     * Gets monitor_bandwidth
     *
     * @return string|null
     */
    public function getMonitorBandwidth()
    {
        return $this->container['monitor_bandwidth'];
    }

    /**
     * Sets monitor_bandwidth
     *
     * @param string|null $monitor_bandwidth Enable monitoring bandwidth on this interface.    enable:Enable monitoring bandwidth on this interface.    disable:Disable monitoring bandwidth on this interface.
     *
     * @return self
     */
    public function setMonitorBandwidth($monitor_bandwidth)
    {
        $allowedValues = $this->getMonitorBandwidthAllowableValues();
        if (!is_null($monitor_bandwidth) && !in_array($monitor_bandwidth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'monitor_bandwidth', must be one of '%s'",
                    $monitor_bandwidth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['monitor_bandwidth'] = $monitor_bandwidth;

        return $this;
    }

    /**
     * Gets vrrp_virtual_mac
     *
     * @return string|null
     */
    public function getVrrpVirtualMac()
    {
        return $this->container['vrrp_virtual_mac'];
    }

    /**
     * Sets vrrp_virtual_mac
     *
     * @param string|null $vrrp_virtual_mac Enable/disable use of virtual MAC for VRRP.    enable:Enable use of virtual MAC for VRRP.    disable:Disable use of virtual MAC for VRRP.
     *
     * @return self
     */
    public function setVrrpVirtualMac($vrrp_virtual_mac)
    {
        $allowedValues = $this->getVrrpVirtualMacAllowableValues();
        if (!is_null($vrrp_virtual_mac) && !in_array($vrrp_virtual_mac, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vrrp_virtual_mac', must be one of '%s'",
                    $vrrp_virtual_mac,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vrrp_virtual_mac'] = $vrrp_virtual_mac;

        return $this;
    }

    /**
     * Gets vrrp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp[]|null
     */
    public function getVrrp()
    {
        return $this->container['vrrp'];
    }

    /**
     * Sets vrrp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameVrrp[]|null $vrrp VRRP configuration.
     *
     * @return self
     */
    public function setVrrp($vrrp)
    {

        if (!is_null($vrrp) && (count($vrrp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vrrp when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['vrrp'] = $vrrp;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Interface role.    lan:Connected to local network of endpoints.    wan:Connected to Internet.    dmz:Connected to server zone.    undefined:Interface has no specific role.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets snmp_index
     *
     * @return int|null
     */
    public function getSnmpIndex()
    {
        return $this->container['snmp_index'];
    }

    /**
     * Sets snmp_index
     *
     * @param int|null $snmp_index Permanent SNMP Index of the interface.
     *
     * @return self
     */
    public function setSnmpIndex($snmp_index)
    {

        if (!is_null($snmp_index) && ($snmp_index > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $snmp_index when calling InlineObject322., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($snmp_index) && ($snmp_index < 1)) {
            throw new \InvalidArgumentException('invalid value for $snmp_index when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['snmp_index'] = $snmp_index;

        return $this;
    }

    /**
     * Gets secondary_ip
     *
     * @return string|null
     */
    public function getSecondaryIp()
    {
        return $this->container['secondary_ip'];
    }

    /**
     * Sets secondary_ip
     *
     * @param string|null $secondary_ip Enable/disable adding a secondary IP to this interface.    enable:Enable secondary IP.    disable:Disable secondary IP.
     *
     * @return self
     */
    public function setSecondaryIp($secondary_ip)
    {
        $allowedValues = $this->getSecondaryIpAllowableValues();
        if (!is_null($secondary_ip) && !in_array($secondary_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secondary_ip', must be one of '%s'",
                    $secondary_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_ip'] = $secondary_ip;

        return $this;
    }

    /**
     * Gets secondaryip
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecondaryip[]|null
     */
    public function getSecondaryip()
    {
        return $this->container['secondaryip'];
    }

    /**
     * Sets secondaryip
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameSecondaryip[]|null $secondaryip Second IP address of interface.
     *
     * @return self
     */
    public function setSecondaryip($secondaryip)
    {

        if (!is_null($secondaryip) && (count($secondaryip) > 32)) {
            throw new \InvalidArgumentException('invalid value for $secondaryip when calling InlineObject322., number of items must be less than or equal to 32.');
        }
        $this->container['secondaryip'] = $secondaryip;

        return $this;
    }

    /**
     * Gets preserve_session_route
     *
     * @return string|null
     */
    public function getPreserveSessionRoute()
    {
        return $this->container['preserve_session_route'];
    }

    /**
     * Sets preserve_session_route
     *
     * @param string|null $preserve_session_route Enable/disable preservation of session route when dirty.    enable:Enable preservation of session route when dirty.    disable:Disable preservation of session route when dirty.
     *
     * @return self
     */
    public function setPreserveSessionRoute($preserve_session_route)
    {
        $allowedValues = $this->getPreserveSessionRouteAllowableValues();
        if (!is_null($preserve_session_route) && !in_array($preserve_session_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preserve_session_route', must be one of '%s'",
                    $preserve_session_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preserve_session_route'] = $preserve_session_route;

        return $this;
    }

    /**
     * Gets auto_auth_extension_device
     *
     * @return string|null
     */
    public function getAutoAuthExtensionDevice()
    {
        return $this->container['auto_auth_extension_device'];
    }

    /**
     * Sets auto_auth_extension_device
     *
     * @param string|null $auto_auth_extension_device Enable/disable automatic authorization of dedicated Fortinet extension device on this interface.    enable:Enable automatic authorization of dedicated Fortinet extension device on this interface.    disable:Disable automatic authorization of dedicated Fortinet extension device on this interface.
     *
     * @return self
     */
    public function setAutoAuthExtensionDevice($auto_auth_extension_device)
    {
        $allowedValues = $this->getAutoAuthExtensionDeviceAllowableValues();
        if (!is_null($auto_auth_extension_device) && !in_array($auto_auth_extension_device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_auth_extension_device', must be one of '%s'",
                    $auto_auth_extension_device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_auth_extension_device'] = $auto_auth_extension_device;

        return $this;
    }

    /**
     * Gets ap_discover
     *
     * @return string|null
     */
    public function getApDiscover()
    {
        return $this->container['ap_discover'];
    }

    /**
     * Sets ap_discover
     *
     * @param string|null $ap_discover Enable/disable automatic registration of unknown FortiAP devices.    enable:Enable automatic registration of unknown FortiAP devices.    disable:Disable automatic registration of unknown FortiAP devices.
     *
     * @return self
     */
    public function setApDiscover($ap_discover)
    {
        $allowedValues = $this->getApDiscoverAllowableValues();
        if (!is_null($ap_discover) && !in_array($ap_discover, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_discover', must be one of '%s'",
                    $ap_discover,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_discover'] = $ap_discover;

        return $this;
    }

    /**
     * Gets fortilink_stacking
     *
     * @return string|null
     */
    public function getFortilinkStacking()
    {
        return $this->container['fortilink_stacking'];
    }

    /**
     * Sets fortilink_stacking
     *
     * @param string|null $fortilink_stacking Enable/disable FortiLink switch-stacking on this interface.    enable:Enable FortiLink switch stacking.    disable:Disable FortiLink switch stacking.
     *
     * @return self
     */
    public function setFortilinkStacking($fortilink_stacking)
    {
        $allowedValues = $this->getFortilinkStackingAllowableValues();
        if (!is_null($fortilink_stacking) && !in_array($fortilink_stacking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortilink_stacking', must be one of '%s'",
                    $fortilink_stacking,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortilink_stacking'] = $fortilink_stacking;

        return $this;
    }

    /**
     * Gets fortilink_neighbor_detect
     *
     * @return string|null
     */
    public function getFortilinkNeighborDetect()
    {
        return $this->container['fortilink_neighbor_detect'];
    }

    /**
     * Sets fortilink_neighbor_detect
     *
     * @param string|null $fortilink_neighbor_detect Protocol for FortiGate neighbor discovery.    lldp:Detect FortiLink neighbors using LLDP protocol.    fortilink:Detect FortiLink neighbors using FortiLink protocol.
     *
     * @return self
     */
    public function setFortilinkNeighborDetect($fortilink_neighbor_detect)
    {
        $allowedValues = $this->getFortilinkNeighborDetectAllowableValues();
        if (!is_null($fortilink_neighbor_detect) && !in_array($fortilink_neighbor_detect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortilink_neighbor_detect', must be one of '%s'",
                    $fortilink_neighbor_detect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortilink_neighbor_detect'] = $fortilink_neighbor_detect;

        return $this;
    }

    /**
     * Gets ip_managed_by_fortiipam
     *
     * @return string|null
     */
    public function getIpManagedByFortiipam()
    {
        return $this->container['ip_managed_by_fortiipam'];
    }

    /**
     * Sets ip_managed_by_fortiipam
     *
     * @param string|null $ip_managed_by_fortiipam Enable/disable automatic IP address assignment of this interface by FortiIPAM.    enable:Enable automatic IP address assignment of this interface by FortiIPAM.    disable:Disable automatic IP address assignment of this interface by FortiIPAM.
     *
     * @return self
     */
    public function setIpManagedByFortiipam($ip_managed_by_fortiipam)
    {
        $allowedValues = $this->getIpManagedByFortiipamAllowableValues();
        if (!is_null($ip_managed_by_fortiipam) && !in_array($ip_managed_by_fortiipam, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_managed_by_fortiipam', must be one of '%s'",
                    $ip_managed_by_fortiipam,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_managed_by_fortiipam'] = $ip_managed_by_fortiipam;

        return $this;
    }

    /**
     * Gets managed_subnetwork_size
     *
     * @return string|null
     */
    public function getManagedSubnetworkSize()
    {
        return $this->container['managed_subnetwork_size'];
    }

    /**
     * Sets managed_subnetwork_size
     *
     * @param string|null $managed_subnetwork_size Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.    256:Allocate a subnet with 256 IP addresses.    512:Allocate a subnet with 512 IP addresses.    1024:Allocate a subnet with 1024 IP addresses.    2048:Allocate a subnet with 2048 IP addresses.    4096:Allocate a subnet with 4096 IP addresses.    8192:Allocate a subnet with 8192 IP addresses.    16384:Allocate a subnet with 16384 IP addresses.    32768:Allocate a subnet with 32768 IP addresses.    65536:Allocate a subnet with 65536 IP addresses.
     *
     * @return self
     */
    public function setManagedSubnetworkSize($managed_subnetwork_size)
    {
        $allowedValues = $this->getManagedSubnetworkSizeAllowableValues();
        if (!is_null($managed_subnetwork_size) && !in_array($managed_subnetwork_size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'managed_subnetwork_size', must be one of '%s'",
                    $managed_subnetwork_size,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['managed_subnetwork_size'] = $managed_subnetwork_size;

        return $this;
    }

    /**
     * Gets fortilink_split_interface
     *
     * @return string|null
     */
    public function getFortilinkSplitInterface()
    {
        return $this->container['fortilink_split_interface'];
    }

    /**
     * Sets fortilink_split_interface
     *
     * @param string|null $fortilink_split_interface Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.    enable:Enable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.    disable:Disable FortiLink split interface.
     *
     * @return self
     */
    public function setFortilinkSplitInterface($fortilink_split_interface)
    {
        $allowedValues = $this->getFortilinkSplitInterfaceAllowableValues();
        if (!is_null($fortilink_split_interface) && !in_array($fortilink_split_interface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortilink_split_interface', must be one of '%s'",
                    $fortilink_split_interface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortilink_split_interface'] = $fortilink_split_interface;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return int|null
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param int|null $internal Implicitly created.
     *
     * @return self
     */
    public function setInternal($internal)
    {

        if (!is_null($internal) && ($internal > 255)) {
            throw new \InvalidArgumentException('invalid value for $internal when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($internal) && ($internal < 0)) {
            throw new \InvalidArgumentException('invalid value for $internal when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets fortilink_backup_link
     *
     * @return int|null
     */
    public function getFortilinkBackupLink()
    {
        return $this->container['fortilink_backup_link'];
    }

    /**
     * Sets fortilink_backup_link
     *
     * @param int|null $fortilink_backup_link fortilink split interface backup link.
     *
     * @return self
     */
    public function setFortilinkBackupLink($fortilink_backup_link)
    {

        if (!is_null($fortilink_backup_link) && ($fortilink_backup_link > 255)) {
            throw new \InvalidArgumentException('invalid value for $fortilink_backup_link when calling InlineObject322., must be smaller than or equal to 255.');
        }
        if (!is_null($fortilink_backup_link) && ($fortilink_backup_link < 0)) {
            throw new \InvalidArgumentException('invalid value for $fortilink_backup_link when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['fortilink_backup_link'] = $fortilink_backup_link;

        return $this;
    }

    /**
     * Gets switch_controller_access_vlan
     *
     * @return string|null
     */
    public function getSwitchControllerAccessVlan()
    {
        return $this->container['switch_controller_access_vlan'];
    }

    /**
     * Sets switch_controller_access_vlan
     *
     * @param string|null $switch_controller_access_vlan Block FortiSwitch port-to-port traffic.    enable:Block FortiSwitch port-to-port traffic on the VLAN, only permitting traffic to and from the FortiGate.    disable:Allow normal VLAN traffic.
     *
     * @return self
     */
    public function setSwitchControllerAccessVlan($switch_controller_access_vlan)
    {
        $allowedValues = $this->getSwitchControllerAccessVlanAllowableValues();
        if (!is_null($switch_controller_access_vlan) && !in_array($switch_controller_access_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_access_vlan', must be one of '%s'",
                    $switch_controller_access_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_access_vlan'] = $switch_controller_access_vlan;

        return $this;
    }

    /**
     * Gets switch_controller_traffic_policy
     *
     * @return string|null
     */
    public function getSwitchControllerTrafficPolicy()
    {
        return $this->container['switch_controller_traffic_policy'];
    }

    /**
     * Sets switch_controller_traffic_policy
     *
     * @param string|null $switch_controller_traffic_policy Switch controller traffic policy for the VLAN.
     *
     * @return self
     */
    public function setSwitchControllerTrafficPolicy($switch_controller_traffic_policy)
    {
        if (!is_null($switch_controller_traffic_policy) && (mb_strlen($switch_controller_traffic_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $switch_controller_traffic_policy when calling InlineObject322., must be smaller than or equal to 63.');
        }

        $this->container['switch_controller_traffic_policy'] = $switch_controller_traffic_policy;

        return $this;
    }

    /**
     * Gets switch_controller_rspan_mode
     *
     * @return string|null
     */
    public function getSwitchControllerRspanMode()
    {
        return $this->container['switch_controller_rspan_mode'];
    }

    /**
     * Sets switch_controller_rspan_mode
     *
     * @param string|null $switch_controller_rspan_mode Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface.    disable:Disable RSPAN passthrough mode on this VLAN interface.    enable:Enable RSPAN passthrough mode on this VLAN interface.
     *
     * @return self
     */
    public function setSwitchControllerRspanMode($switch_controller_rspan_mode)
    {
        $allowedValues = $this->getSwitchControllerRspanModeAllowableValues();
        if (!is_null($switch_controller_rspan_mode) && !in_array($switch_controller_rspan_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_rspan_mode', must be one of '%s'",
                    $switch_controller_rspan_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_rspan_mode'] = $switch_controller_rspan_mode;

        return $this;
    }

    /**
     * Gets switch_controller_mgmt_vlan
     *
     * @return int|null
     */
    public function getSwitchControllerMgmtVlan()
    {
        return $this->container['switch_controller_mgmt_vlan'];
    }

    /**
     * Sets switch_controller_mgmt_vlan
     *
     * @param int|null $switch_controller_mgmt_vlan VLAN to use for FortiLink management purposes.
     *
     * @return self
     */
    public function setSwitchControllerMgmtVlan($switch_controller_mgmt_vlan)
    {

        if (!is_null($switch_controller_mgmt_vlan) && ($switch_controller_mgmt_vlan > 4094)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_mgmt_vlan when calling InlineObject322., must be smaller than or equal to 4094.');
        }
        if (!is_null($switch_controller_mgmt_vlan) && ($switch_controller_mgmt_vlan < 1)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_mgmt_vlan when calling InlineObject322., must be bigger than or equal to 1.');
        }

        $this->container['switch_controller_mgmt_vlan'] = $switch_controller_mgmt_vlan;

        return $this;
    }

    /**
     * Gets switch_controller_igmp_snooping
     *
     * @return string|null
     */
    public function getSwitchControllerIgmpSnooping()
    {
        return $this->container['switch_controller_igmp_snooping'];
    }

    /**
     * Sets switch_controller_igmp_snooping
     *
     * @param string|null $switch_controller_igmp_snooping Switch controller IGMP snooping.    enable:Enable IGMP snooping.    disable:Disable IGMP snooping.
     *
     * @return self
     */
    public function setSwitchControllerIgmpSnooping($switch_controller_igmp_snooping)
    {
        $allowedValues = $this->getSwitchControllerIgmpSnoopingAllowableValues();
        if (!is_null($switch_controller_igmp_snooping) && !in_array($switch_controller_igmp_snooping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_igmp_snooping', must be one of '%s'",
                    $switch_controller_igmp_snooping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_igmp_snooping'] = $switch_controller_igmp_snooping;

        return $this;
    }

    /**
     * Gets switch_controller_igmp_snooping_proxy
     *
     * @return string|null
     */
    public function getSwitchControllerIgmpSnoopingProxy()
    {
        return $this->container['switch_controller_igmp_snooping_proxy'];
    }

    /**
     * Sets switch_controller_igmp_snooping_proxy
     *
     * @param string|null $switch_controller_igmp_snooping_proxy Switch controller IGMP snooping proxy.    enable:Enable IGMP snooping proxy.    disable:Disable IGMP snooping proxy.
     *
     * @return self
     */
    public function setSwitchControllerIgmpSnoopingProxy($switch_controller_igmp_snooping_proxy)
    {
        $allowedValues = $this->getSwitchControllerIgmpSnoopingProxyAllowableValues();
        if (!is_null($switch_controller_igmp_snooping_proxy) && !in_array($switch_controller_igmp_snooping_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_igmp_snooping_proxy', must be one of '%s'",
                    $switch_controller_igmp_snooping_proxy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_igmp_snooping_proxy'] = $switch_controller_igmp_snooping_proxy;

        return $this;
    }

    /**
     * Gets switch_controller_igmp_snooping_fast_leave
     *
     * @return string|null
     */
    public function getSwitchControllerIgmpSnoopingFastLeave()
    {
        return $this->container['switch_controller_igmp_snooping_fast_leave'];
    }

    /**
     * Sets switch_controller_igmp_snooping_fast_leave
     *
     * @param string|null $switch_controller_igmp_snooping_fast_leave Switch controller IGMP snooping fast-leave.    enable:Enable IGMP snooping fast-leave.    disable:Disable IGMP snooping fast-leave.
     *
     * @return self
     */
    public function setSwitchControllerIgmpSnoopingFastLeave($switch_controller_igmp_snooping_fast_leave)
    {
        $allowedValues = $this->getSwitchControllerIgmpSnoopingFastLeaveAllowableValues();
        if (!is_null($switch_controller_igmp_snooping_fast_leave) && !in_array($switch_controller_igmp_snooping_fast_leave, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_igmp_snooping_fast_leave', must be one of '%s'",
                    $switch_controller_igmp_snooping_fast_leave,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_igmp_snooping_fast_leave'] = $switch_controller_igmp_snooping_fast_leave;

        return $this;
    }

    /**
     * Gets switch_controller_dhcp_snooping
     *
     * @return string|null
     */
    public function getSwitchControllerDhcpSnooping()
    {
        return $this->container['switch_controller_dhcp_snooping'];
    }

    /**
     * Sets switch_controller_dhcp_snooping
     *
     * @param string|null $switch_controller_dhcp_snooping Switch controller DHCP snooping.    enable:Enable DHCP snooping for FortiSwitch devices.    disable:Disable DHCP snooping for FortiSwitch devices.
     *
     * @return self
     */
    public function setSwitchControllerDhcpSnooping($switch_controller_dhcp_snooping)
    {
        $allowedValues = $this->getSwitchControllerDhcpSnoopingAllowableValues();
        if (!is_null($switch_controller_dhcp_snooping) && !in_array($switch_controller_dhcp_snooping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_dhcp_snooping', must be one of '%s'",
                    $switch_controller_dhcp_snooping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_dhcp_snooping'] = $switch_controller_dhcp_snooping;

        return $this;
    }

    /**
     * Gets switch_controller_dhcp_snooping_verify_mac
     *
     * @return string|null
     */
    public function getSwitchControllerDhcpSnoopingVerifyMac()
    {
        return $this->container['switch_controller_dhcp_snooping_verify_mac'];
    }

    /**
     * Sets switch_controller_dhcp_snooping_verify_mac
     *
     * @param string|null $switch_controller_dhcp_snooping_verify_mac Switch controller DHCP snooping verify MAC.    enable:Enable DHCP snooping verify source MAC for FortiSwitch devices.    disable:Disable DHCP snooping verify source MAC for FortiSwitch devices.
     *
     * @return self
     */
    public function setSwitchControllerDhcpSnoopingVerifyMac($switch_controller_dhcp_snooping_verify_mac)
    {
        $allowedValues = $this->getSwitchControllerDhcpSnoopingVerifyMacAllowableValues();
        if (!is_null($switch_controller_dhcp_snooping_verify_mac) && !in_array($switch_controller_dhcp_snooping_verify_mac, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_dhcp_snooping_verify_mac', must be one of '%s'",
                    $switch_controller_dhcp_snooping_verify_mac,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_dhcp_snooping_verify_mac'] = $switch_controller_dhcp_snooping_verify_mac;

        return $this;
    }

    /**
     * Gets switch_controller_dhcp_snooping_option82
     *
     * @return string|null
     */
    public function getSwitchControllerDhcpSnoopingOption82()
    {
        return $this->container['switch_controller_dhcp_snooping_option82'];
    }

    /**
     * Sets switch_controller_dhcp_snooping_option82
     *
     * @param string|null $switch_controller_dhcp_snooping_option82 Switch controller DHCP snooping option82.    enable:Enable DHCP snooping insert option82 for FortiSwitch devices.    disable:Disable DHCP snooping insert option82 for FortiSwitch devices.
     *
     * @return self
     */
    public function setSwitchControllerDhcpSnoopingOption82($switch_controller_dhcp_snooping_option82)
    {
        $allowedValues = $this->getSwitchControllerDhcpSnoopingOption82AllowableValues();
        if (!is_null($switch_controller_dhcp_snooping_option82) && !in_array($switch_controller_dhcp_snooping_option82, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_dhcp_snooping_option82', must be one of '%s'",
                    $switch_controller_dhcp_snooping_option82,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_dhcp_snooping_option82'] = $switch_controller_dhcp_snooping_option82;

        return $this;
    }

    /**
     * Gets switch_controller_arp_inspection
     *
     * @return string|null
     */
    public function getSwitchControllerArpInspection()
    {
        return $this->container['switch_controller_arp_inspection'];
    }

    /**
     * Sets switch_controller_arp_inspection
     *
     * @param string|null $switch_controller_arp_inspection Enable/disable FortiSwitch ARP inspection.    enable:Enable ARP inspection for FortiSwitch devices.    disable:Disable ARP inspection for FortiSwitch devices.
     *
     * @return self
     */
    public function setSwitchControllerArpInspection($switch_controller_arp_inspection)
    {
        $allowedValues = $this->getSwitchControllerArpInspectionAllowableValues();
        if (!is_null($switch_controller_arp_inspection) && !in_array($switch_controller_arp_inspection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_arp_inspection', must be one of '%s'",
                    $switch_controller_arp_inspection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_arp_inspection'] = $switch_controller_arp_inspection;

        return $this;
    }

    /**
     * Gets switch_controller_learning_limit
     *
     * @return int|null
     */
    public function getSwitchControllerLearningLimit()
    {
        return $this->container['switch_controller_learning_limit'];
    }

    /**
     * Sets switch_controller_learning_limit
     *
     * @param int|null $switch_controller_learning_limit Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
     *
     * @return self
     */
    public function setSwitchControllerLearningLimit($switch_controller_learning_limit)
    {

        if (!is_null($switch_controller_learning_limit) && ($switch_controller_learning_limit > 128)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_learning_limit when calling InlineObject322., must be smaller than or equal to 128.');
        }
        if (!is_null($switch_controller_learning_limit) && ($switch_controller_learning_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_learning_limit when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['switch_controller_learning_limit'] = $switch_controller_learning_limit;

        return $this;
    }

    /**
     * Gets switch_controller_nac
     *
     * @return string|null
     */
    public function getSwitchControllerNac()
    {
        return $this->container['switch_controller_nac'];
    }

    /**
     * Sets switch_controller_nac
     *
     * @param string|null $switch_controller_nac Integrated NAC settings for managed FortiSwitch.
     *
     * @return self
     */
    public function setSwitchControllerNac($switch_controller_nac)
    {
        if (!is_null($switch_controller_nac) && (mb_strlen($switch_controller_nac) > 35)) {
            throw new \InvalidArgumentException('invalid length for $switch_controller_nac when calling InlineObject322., must be smaller than or equal to 35.');
        }

        $this->container['switch_controller_nac'] = $switch_controller_nac;

        return $this;
    }

    /**
     * Gets switch_controller_feature
     *
     * @return string|null
     */
    public function getSwitchControllerFeature()
    {
        return $this->container['switch_controller_feature'];
    }

    /**
     * Sets switch_controller_feature
     *
     * @param string|null $switch_controller_feature Interface's purpose when assigning traffic (read only).    none:VLAN for generic purpose.    default-vlan:Default VLAN (native) assigned to all switch ports upon discovery.    quarantine:VLAN for quarantined traffic.    rspan:VLAN for RSPAN/ERSPAN mirrored traffic.    voice:VLAN dedicated for voice devices.    video:VLAN dedicated for camera devices.    nac:VLAN dedicated for NAC onboarding devices.
     *
     * @return self
     */
    public function setSwitchControllerFeature($switch_controller_feature)
    {
        $allowedValues = $this->getSwitchControllerFeatureAllowableValues();
        if (!is_null($switch_controller_feature) && !in_array($switch_controller_feature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_feature', must be one of '%s'",
                    $switch_controller_feature,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_feature'] = $switch_controller_feature;

        return $this;
    }

    /**
     * Gets switch_controller_iot_scanning
     *
     * @return string|null
     */
    public function getSwitchControllerIotScanning()
    {
        return $this->container['switch_controller_iot_scanning'];
    }

    /**
     * Sets switch_controller_iot_scanning
     *
     * @param string|null $switch_controller_iot_scanning Enable/disable managed FortiSwitch IoT scanning.    enable:Enable IoT scanning for managed FortiSwitch devices.    disable:Disable IoT scanning for managed FortiSwitch devices.
     *
     * @return self
     */
    public function setSwitchControllerIotScanning($switch_controller_iot_scanning)
    {
        $allowedValues = $this->getSwitchControllerIotScanningAllowableValues();
        if (!is_null($switch_controller_iot_scanning) && !in_array($switch_controller_iot_scanning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_iot_scanning', must be one of '%s'",
                    $switch_controller_iot_scanning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_iot_scanning'] = $switch_controller_iot_scanning;

        return $this;
    }

    /**
     * Gets swc_vlan
     *
     * @return int|null
     */
    public function getSwcVlan()
    {
        return $this->container['swc_vlan'];
    }

    /**
     * Sets swc_vlan
     *
     * @param int|null $swc_vlan Creation status for switch-controller VLANs.
     *
     * @return self
     */
    public function setSwcVlan($swc_vlan)
    {

        if (!is_null($swc_vlan) && ($swc_vlan > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $swc_vlan when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($swc_vlan) && ($swc_vlan < 0)) {
            throw new \InvalidArgumentException('invalid value for $swc_vlan when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['swc_vlan'] = $swc_vlan;

        return $this;
    }

    /**
     * Gets swc_first_create
     *
     * @return int|null
     */
    public function getSwcFirstCreate()
    {
        return $this->container['swc_first_create'];
    }

    /**
     * Sets swc_first_create
     *
     * @param int|null $swc_first_create Initial create for switch-controller VLANs.
     *
     * @return self
     */
    public function setSwcFirstCreate($swc_first_create)
    {

        if (!is_null($swc_first_create) && ($swc_first_create > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $swc_first_create when calling InlineObject322., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($swc_first_create) && ($swc_first_create < 0)) {
            throw new \InvalidArgumentException('invalid value for $swc_first_create when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['swc_first_create'] = $swc_first_create;

        return $this;
    }

    /**
     * Gets color
     *
     * @return int|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param int|null $color Color of icon on the GUI.
     *
     * @return self
     */
    public function setColor($color)
    {

        if (!is_null($color) && ($color > 32)) {
            throw new \InvalidArgumentException('invalid value for $color when calling InlineObject322., must be smaller than or equal to 32.');
        }
        if (!is_null($color) && ($color < 0)) {
            throw new \InvalidArgumentException('invalid value for $color when calling InlineObject322., must be bigger than or equal to 0.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets tagging
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTagging[]|null
     */
    public function getTagging()
    {
        return $this->container['tagging'];
    }

    /**
     * Sets tagging
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameTagging[]|null $tagging Config object tagging.
     *
     * @return self
     */
    public function setTagging($tagging)
    {

        if (!is_null($tagging) && (count($tagging) > 0)) {
            throw new \InvalidArgumentException('invalid value for $tagging when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['tagging'] = $tagging;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIpv6[]|null
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemInterfaceNameIpv6[]|null $ipv6 IPv6 of interface.
     *
     * @return self
     */
    public function setIpv6($ipv6)
    {

        if (!is_null($ipv6) && (count($ipv6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv6 when calling InlineObject322., number of items must be less than or equal to 0.');
        }
        $this->container['ipv6'] = $ipv6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


