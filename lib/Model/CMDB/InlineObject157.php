<?php
/**
 * InlineObject157
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject157 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject157 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_157';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'as' => 'int',
        'router_id' => 'string',
        'keepalive_timer' => 'int',
        'holdtime_timer' => 'int',
        'always_compare_med' => 'string',
        'bestpath_as_path_ignore' => 'string',
        'bestpath_cmp_confed_aspath' => 'string',
        'bestpath_cmp_routerid' => 'string',
        'bestpath_med_confed' => 'string',
        'bestpath_med_missing_as_worst' => 'string',
        'client_to_client_reflection' => 'string',
        'dampening' => 'string',
        'deterministic_med' => 'string',
        'ebgp_multipath' => 'string',
        'ibgp_multipath' => 'string',
        'enforce_first_as' => 'string',
        'fast_external_failover' => 'string',
        'log_neighbour_changes' => 'string',
        'network_import_check' => 'string',
        'ignore_optional_capability' => 'string',
        'additional_path' => 'string',
        'additional_path6' => 'string',
        'multipath_recursive_distance' => 'string',
        'cluster_id' => 'string',
        'confederation_identifier' => 'int',
        'confederation_peers' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpConfederationPeers[]',
        'dampening_route_map' => 'string',
        'dampening_reachability_half_life' => 'int',
        'dampening_reuse' => 'int',
        'dampening_suppress' => 'int',
        'dampening_max_suppress_time' => 'int',
        'dampening_unreachability_half_life' => 'int',
        'default_local_preference' => 'int',
        'scan_time' => 'int',
        'distance_external' => 'int',
        'distance_internal' => 'int',
        'distance_local' => 'int',
        'synchronization' => 'string',
        'graceful_restart' => 'string',
        'graceful_restart_time' => 'int',
        'graceful_stalepath_time' => 'int',
        'graceful_update_delay' => 'int',
        'graceful_end_on_timer' => 'string',
        'additional_path_select' => 'int',
        'additional_path_select6' => 'int',
        'aggregate_address' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress[]',
        'aggregate_address6' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress6[]',
        'neighbor' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNeighbor[]',
        'neighbor_group' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborGroup[]',
        'neighbor_range' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange[]',
        'neighbor_range6' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange6[]',
        'network' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork[]',
        'network6' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork6[]',
        'redistribute' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]',
        'redistribute6' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]',
        'admin_distance' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpAdminDistance[]',
        'vrf_leak' => '\Fortigate\FortiOS\Model\CMDB\RouterBgpVrfLeak[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'as' => null,
        'router_id' => 'ipv4',
        'keepalive_timer' => null,
        'holdtime_timer' => null,
        'always_compare_med' => null,
        'bestpath_as_path_ignore' => null,
        'bestpath_cmp_confed_aspath' => null,
        'bestpath_cmp_routerid' => null,
        'bestpath_med_confed' => null,
        'bestpath_med_missing_as_worst' => null,
        'client_to_client_reflection' => null,
        'dampening' => null,
        'deterministic_med' => null,
        'ebgp_multipath' => null,
        'ibgp_multipath' => null,
        'enforce_first_as' => null,
        'fast_external_failover' => null,
        'log_neighbour_changes' => null,
        'network_import_check' => null,
        'ignore_optional_capability' => null,
        'additional_path' => null,
        'additional_path6' => null,
        'multipath_recursive_distance' => null,
        'cluster_id' => 'ipv4',
        'confederation_identifier' => null,
        'confederation_peers' => null,
        'dampening_route_map' => null,
        'dampening_reachability_half_life' => null,
        'dampening_reuse' => null,
        'dampening_suppress' => null,
        'dampening_max_suppress_time' => null,
        'dampening_unreachability_half_life' => null,
        'default_local_preference' => null,
        'scan_time' => null,
        'distance_external' => null,
        'distance_internal' => null,
        'distance_local' => null,
        'synchronization' => null,
        'graceful_restart' => null,
        'graceful_restart_time' => null,
        'graceful_stalepath_time' => null,
        'graceful_update_delay' => null,
        'graceful_end_on_timer' => null,
        'additional_path_select' => null,
        'additional_path_select6' => null,
        'aggregate_address' => null,
        'aggregate_address6' => null,
        'neighbor' => null,
        'neighbor_group' => null,
        'neighbor_range' => null,
        'neighbor_range6' => null,
        'network' => null,
        'network6' => null,
        'redistribute' => null,
        'redistribute6' => null,
        'admin_distance' => null,
        'vrf_leak' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'as' => 'as',
        'router_id' => 'router-id',
        'keepalive_timer' => 'keepalive-timer',
        'holdtime_timer' => 'holdtime-timer',
        'always_compare_med' => 'always-compare-med',
        'bestpath_as_path_ignore' => 'bestpath-as-path-ignore',
        'bestpath_cmp_confed_aspath' => 'bestpath-cmp-confed-aspath',
        'bestpath_cmp_routerid' => 'bestpath-cmp-routerid',
        'bestpath_med_confed' => 'bestpath-med-confed',
        'bestpath_med_missing_as_worst' => 'bestpath-med-missing-as-worst',
        'client_to_client_reflection' => 'client-to-client-reflection',
        'dampening' => 'dampening',
        'deterministic_med' => 'deterministic-med',
        'ebgp_multipath' => 'ebgp-multipath',
        'ibgp_multipath' => 'ibgp-multipath',
        'enforce_first_as' => 'enforce-first-as',
        'fast_external_failover' => 'fast-external-failover',
        'log_neighbour_changes' => 'log-neighbour-changes',
        'network_import_check' => 'network-import-check',
        'ignore_optional_capability' => 'ignore-optional-capability',
        'additional_path' => 'additional-path',
        'additional_path6' => 'additional-path6',
        'multipath_recursive_distance' => 'multipath-recursive-distance',
        'cluster_id' => 'cluster-id',
        'confederation_identifier' => 'confederation-identifier',
        'confederation_peers' => 'confederation-peers',
        'dampening_route_map' => 'dampening-route-map',
        'dampening_reachability_half_life' => 'dampening-reachability-half-life',
        'dampening_reuse' => 'dampening-reuse',
        'dampening_suppress' => 'dampening-suppress',
        'dampening_max_suppress_time' => 'dampening-max-suppress-time',
        'dampening_unreachability_half_life' => 'dampening-unreachability-half-life',
        'default_local_preference' => 'default-local-preference',
        'scan_time' => 'scan-time',
        'distance_external' => 'distance-external',
        'distance_internal' => 'distance-internal',
        'distance_local' => 'distance-local',
        'synchronization' => 'synchronization',
        'graceful_restart' => 'graceful-restart',
        'graceful_restart_time' => 'graceful-restart-time',
        'graceful_stalepath_time' => 'graceful-stalepath-time',
        'graceful_update_delay' => 'graceful-update-delay',
        'graceful_end_on_timer' => 'graceful-end-on-timer',
        'additional_path_select' => 'additional-path-select',
        'additional_path_select6' => 'additional-path-select6',
        'aggregate_address' => 'aggregate-address',
        'aggregate_address6' => 'aggregate-address6',
        'neighbor' => 'neighbor',
        'neighbor_group' => 'neighbor-group',
        'neighbor_range' => 'neighbor-range',
        'neighbor_range6' => 'neighbor-range6',
        'network' => 'network',
        'network6' => 'network6',
        'redistribute' => 'redistribute',
        'redistribute6' => 'redistribute6',
        'admin_distance' => 'admin-distance',
        'vrf_leak' => 'vrf-leak'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'as' => 'setAs',
        'router_id' => 'setRouterId',
        'keepalive_timer' => 'setKeepaliveTimer',
        'holdtime_timer' => 'setHoldtimeTimer',
        'always_compare_med' => 'setAlwaysCompareMed',
        'bestpath_as_path_ignore' => 'setBestpathAsPathIgnore',
        'bestpath_cmp_confed_aspath' => 'setBestpathCmpConfedAspath',
        'bestpath_cmp_routerid' => 'setBestpathCmpRouterid',
        'bestpath_med_confed' => 'setBestpathMedConfed',
        'bestpath_med_missing_as_worst' => 'setBestpathMedMissingAsWorst',
        'client_to_client_reflection' => 'setClientToClientReflection',
        'dampening' => 'setDampening',
        'deterministic_med' => 'setDeterministicMed',
        'ebgp_multipath' => 'setEbgpMultipath',
        'ibgp_multipath' => 'setIbgpMultipath',
        'enforce_first_as' => 'setEnforceFirstAs',
        'fast_external_failover' => 'setFastExternalFailover',
        'log_neighbour_changes' => 'setLogNeighbourChanges',
        'network_import_check' => 'setNetworkImportCheck',
        'ignore_optional_capability' => 'setIgnoreOptionalCapability',
        'additional_path' => 'setAdditionalPath',
        'additional_path6' => 'setAdditionalPath6',
        'multipath_recursive_distance' => 'setMultipathRecursiveDistance',
        'cluster_id' => 'setClusterId',
        'confederation_identifier' => 'setConfederationIdentifier',
        'confederation_peers' => 'setConfederationPeers',
        'dampening_route_map' => 'setDampeningRouteMap',
        'dampening_reachability_half_life' => 'setDampeningReachabilityHalfLife',
        'dampening_reuse' => 'setDampeningReuse',
        'dampening_suppress' => 'setDampeningSuppress',
        'dampening_max_suppress_time' => 'setDampeningMaxSuppressTime',
        'dampening_unreachability_half_life' => 'setDampeningUnreachabilityHalfLife',
        'default_local_preference' => 'setDefaultLocalPreference',
        'scan_time' => 'setScanTime',
        'distance_external' => 'setDistanceExternal',
        'distance_internal' => 'setDistanceInternal',
        'distance_local' => 'setDistanceLocal',
        'synchronization' => 'setSynchronization',
        'graceful_restart' => 'setGracefulRestart',
        'graceful_restart_time' => 'setGracefulRestartTime',
        'graceful_stalepath_time' => 'setGracefulStalepathTime',
        'graceful_update_delay' => 'setGracefulUpdateDelay',
        'graceful_end_on_timer' => 'setGracefulEndOnTimer',
        'additional_path_select' => 'setAdditionalPathSelect',
        'additional_path_select6' => 'setAdditionalPathSelect6',
        'aggregate_address' => 'setAggregateAddress',
        'aggregate_address6' => 'setAggregateAddress6',
        'neighbor' => 'setNeighbor',
        'neighbor_group' => 'setNeighborGroup',
        'neighbor_range' => 'setNeighborRange',
        'neighbor_range6' => 'setNeighborRange6',
        'network' => 'setNetwork',
        'network6' => 'setNetwork6',
        'redistribute' => 'setRedistribute',
        'redistribute6' => 'setRedistribute6',
        'admin_distance' => 'setAdminDistance',
        'vrf_leak' => 'setVrfLeak'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'as' => 'getAs',
        'router_id' => 'getRouterId',
        'keepalive_timer' => 'getKeepaliveTimer',
        'holdtime_timer' => 'getHoldtimeTimer',
        'always_compare_med' => 'getAlwaysCompareMed',
        'bestpath_as_path_ignore' => 'getBestpathAsPathIgnore',
        'bestpath_cmp_confed_aspath' => 'getBestpathCmpConfedAspath',
        'bestpath_cmp_routerid' => 'getBestpathCmpRouterid',
        'bestpath_med_confed' => 'getBestpathMedConfed',
        'bestpath_med_missing_as_worst' => 'getBestpathMedMissingAsWorst',
        'client_to_client_reflection' => 'getClientToClientReflection',
        'dampening' => 'getDampening',
        'deterministic_med' => 'getDeterministicMed',
        'ebgp_multipath' => 'getEbgpMultipath',
        'ibgp_multipath' => 'getIbgpMultipath',
        'enforce_first_as' => 'getEnforceFirstAs',
        'fast_external_failover' => 'getFastExternalFailover',
        'log_neighbour_changes' => 'getLogNeighbourChanges',
        'network_import_check' => 'getNetworkImportCheck',
        'ignore_optional_capability' => 'getIgnoreOptionalCapability',
        'additional_path' => 'getAdditionalPath',
        'additional_path6' => 'getAdditionalPath6',
        'multipath_recursive_distance' => 'getMultipathRecursiveDistance',
        'cluster_id' => 'getClusterId',
        'confederation_identifier' => 'getConfederationIdentifier',
        'confederation_peers' => 'getConfederationPeers',
        'dampening_route_map' => 'getDampeningRouteMap',
        'dampening_reachability_half_life' => 'getDampeningReachabilityHalfLife',
        'dampening_reuse' => 'getDampeningReuse',
        'dampening_suppress' => 'getDampeningSuppress',
        'dampening_max_suppress_time' => 'getDampeningMaxSuppressTime',
        'dampening_unreachability_half_life' => 'getDampeningUnreachabilityHalfLife',
        'default_local_preference' => 'getDefaultLocalPreference',
        'scan_time' => 'getScanTime',
        'distance_external' => 'getDistanceExternal',
        'distance_internal' => 'getDistanceInternal',
        'distance_local' => 'getDistanceLocal',
        'synchronization' => 'getSynchronization',
        'graceful_restart' => 'getGracefulRestart',
        'graceful_restart_time' => 'getGracefulRestartTime',
        'graceful_stalepath_time' => 'getGracefulStalepathTime',
        'graceful_update_delay' => 'getGracefulUpdateDelay',
        'graceful_end_on_timer' => 'getGracefulEndOnTimer',
        'additional_path_select' => 'getAdditionalPathSelect',
        'additional_path_select6' => 'getAdditionalPathSelect6',
        'aggregate_address' => 'getAggregateAddress',
        'aggregate_address6' => 'getAggregateAddress6',
        'neighbor' => 'getNeighbor',
        'neighbor_group' => 'getNeighborGroup',
        'neighbor_range' => 'getNeighborRange',
        'neighbor_range6' => 'getNeighborRange6',
        'network' => 'getNetwork',
        'network6' => 'getNetwork6',
        'redistribute' => 'getRedistribute',
        'redistribute6' => 'getRedistribute6',
        'admin_distance' => 'getAdminDistance',
        'vrf_leak' => 'getVrfLeak'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALWAYS_COMPARE_MED_ENABLE = 'enable';
    const ALWAYS_COMPARE_MED_DISABLE = 'disable';
    const BESTPATH_AS_PATH_IGNORE_ENABLE = 'enable';
    const BESTPATH_AS_PATH_IGNORE_DISABLE = 'disable';
    const BESTPATH_CMP_CONFED_ASPATH_ENABLE = 'enable';
    const BESTPATH_CMP_CONFED_ASPATH_DISABLE = 'disable';
    const BESTPATH_CMP_ROUTERID_ENABLE = 'enable';
    const BESTPATH_CMP_ROUTERID_DISABLE = 'disable';
    const BESTPATH_MED_CONFED_ENABLE = 'enable';
    const BESTPATH_MED_CONFED_DISABLE = 'disable';
    const BESTPATH_MED_MISSING_AS_WORST_ENABLE = 'enable';
    const BESTPATH_MED_MISSING_AS_WORST_DISABLE = 'disable';
    const CLIENT_TO_CLIENT_REFLECTION_ENABLE = 'enable';
    const CLIENT_TO_CLIENT_REFLECTION_DISABLE = 'disable';
    const DAMPENING_ENABLE = 'enable';
    const DAMPENING_DISABLE = 'disable';
    const DETERMINISTIC_MED_ENABLE = 'enable';
    const DETERMINISTIC_MED_DISABLE = 'disable';
    const EBGP_MULTIPATH_ENABLE = 'enable';
    const EBGP_MULTIPATH_DISABLE = 'disable';
    const IBGP_MULTIPATH_ENABLE = 'enable';
    const IBGP_MULTIPATH_DISABLE = 'disable';
    const ENFORCE_FIRST_AS_ENABLE = 'enable';
    const ENFORCE_FIRST_AS_DISABLE = 'disable';
    const FAST_EXTERNAL_FAILOVER_ENABLE = 'enable';
    const FAST_EXTERNAL_FAILOVER_DISABLE = 'disable';
    const LOG_NEIGHBOUR_CHANGES_ENABLE = 'enable';
    const LOG_NEIGHBOUR_CHANGES_DISABLE = 'disable';
    const NETWORK_IMPORT_CHECK_ENABLE = 'enable';
    const NETWORK_IMPORT_CHECK_DISABLE = 'disable';
    const IGNORE_OPTIONAL_CAPABILITY_ENABLE = 'enable';
    const IGNORE_OPTIONAL_CAPABILITY_DISABLE = 'disable';
    const ADDITIONAL_PATH_ENABLE = 'enable';
    const ADDITIONAL_PATH_DISABLE = 'disable';
    const ADDITIONAL_PATH6_ENABLE = 'enable';
    const ADDITIONAL_PATH6_DISABLE = 'disable';
    const MULTIPATH_RECURSIVE_DISTANCE_ENABLE = 'enable';
    const MULTIPATH_RECURSIVE_DISTANCE_DISABLE = 'disable';
    const SYNCHRONIZATION_ENABLE = 'enable';
    const SYNCHRONIZATION_DISABLE = 'disable';
    const GRACEFUL_RESTART_ENABLE = 'enable';
    const GRACEFUL_RESTART_DISABLE = 'disable';
    const GRACEFUL_END_ON_TIMER_ENABLE = 'enable';
    const GRACEFUL_END_ON_TIMER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlwaysCompareMedAllowableValues()
    {
        return [
            self::ALWAYS_COMPARE_MED_ENABLE,
            self::ALWAYS_COMPARE_MED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpathAsPathIgnoreAllowableValues()
    {
        return [
            self::BESTPATH_AS_PATH_IGNORE_ENABLE,
            self::BESTPATH_AS_PATH_IGNORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpathCmpConfedAspathAllowableValues()
    {
        return [
            self::BESTPATH_CMP_CONFED_ASPATH_ENABLE,
            self::BESTPATH_CMP_CONFED_ASPATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpathCmpRouteridAllowableValues()
    {
        return [
            self::BESTPATH_CMP_ROUTERID_ENABLE,
            self::BESTPATH_CMP_ROUTERID_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpathMedConfedAllowableValues()
    {
        return [
            self::BESTPATH_MED_CONFED_ENABLE,
            self::BESTPATH_MED_CONFED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpathMedMissingAsWorstAllowableValues()
    {
        return [
            self::BESTPATH_MED_MISSING_AS_WORST_ENABLE,
            self::BESTPATH_MED_MISSING_AS_WORST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientToClientReflectionAllowableValues()
    {
        return [
            self::CLIENT_TO_CLIENT_REFLECTION_ENABLE,
            self::CLIENT_TO_CLIENT_REFLECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDampeningAllowableValues()
    {
        return [
            self::DAMPENING_ENABLE,
            self::DAMPENING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeterministicMedAllowableValues()
    {
        return [
            self::DETERMINISTIC_MED_ENABLE,
            self::DETERMINISTIC_MED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEbgpMultipathAllowableValues()
    {
        return [
            self::EBGP_MULTIPATH_ENABLE,
            self::EBGP_MULTIPATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIbgpMultipathAllowableValues()
    {
        return [
            self::IBGP_MULTIPATH_ENABLE,
            self::IBGP_MULTIPATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnforceFirstAsAllowableValues()
    {
        return [
            self::ENFORCE_FIRST_AS_ENABLE,
            self::ENFORCE_FIRST_AS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFastExternalFailoverAllowableValues()
    {
        return [
            self::FAST_EXTERNAL_FAILOVER_ENABLE,
            self::FAST_EXTERNAL_FAILOVER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogNeighbourChangesAllowableValues()
    {
        return [
            self::LOG_NEIGHBOUR_CHANGES_ENABLE,
            self::LOG_NEIGHBOUR_CHANGES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkImportCheckAllowableValues()
    {
        return [
            self::NETWORK_IMPORT_CHECK_ENABLE,
            self::NETWORK_IMPORT_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoreOptionalCapabilityAllowableValues()
    {
        return [
            self::IGNORE_OPTIONAL_CAPABILITY_ENABLE,
            self::IGNORE_OPTIONAL_CAPABILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalPathAllowableValues()
    {
        return [
            self::ADDITIONAL_PATH_ENABLE,
            self::ADDITIONAL_PATH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalPath6AllowableValues()
    {
        return [
            self::ADDITIONAL_PATH6_ENABLE,
            self::ADDITIONAL_PATH6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultipathRecursiveDistanceAllowableValues()
    {
        return [
            self::MULTIPATH_RECURSIVE_DISTANCE_ENABLE,
            self::MULTIPATH_RECURSIVE_DISTANCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSynchronizationAllowableValues()
    {
        return [
            self::SYNCHRONIZATION_ENABLE,
            self::SYNCHRONIZATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGracefulRestartAllowableValues()
    {
        return [
            self::GRACEFUL_RESTART_ENABLE,
            self::GRACEFUL_RESTART_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGracefulEndOnTimerAllowableValues()
    {
        return [
            self::GRACEFUL_END_ON_TIMER_ENABLE,
            self::GRACEFUL_END_ON_TIMER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['as'] = $data['as'] ?? null;
        $this->container['router_id'] = $data['router_id'] ?? null;
        $this->container['keepalive_timer'] = $data['keepalive_timer'] ?? null;
        $this->container['holdtime_timer'] = $data['holdtime_timer'] ?? null;
        $this->container['always_compare_med'] = $data['always_compare_med'] ?? null;
        $this->container['bestpath_as_path_ignore'] = $data['bestpath_as_path_ignore'] ?? null;
        $this->container['bestpath_cmp_confed_aspath'] = $data['bestpath_cmp_confed_aspath'] ?? null;
        $this->container['bestpath_cmp_routerid'] = $data['bestpath_cmp_routerid'] ?? null;
        $this->container['bestpath_med_confed'] = $data['bestpath_med_confed'] ?? null;
        $this->container['bestpath_med_missing_as_worst'] = $data['bestpath_med_missing_as_worst'] ?? null;
        $this->container['client_to_client_reflection'] = $data['client_to_client_reflection'] ?? null;
        $this->container['dampening'] = $data['dampening'] ?? null;
        $this->container['deterministic_med'] = $data['deterministic_med'] ?? null;
        $this->container['ebgp_multipath'] = $data['ebgp_multipath'] ?? null;
        $this->container['ibgp_multipath'] = $data['ibgp_multipath'] ?? null;
        $this->container['enforce_first_as'] = $data['enforce_first_as'] ?? null;
        $this->container['fast_external_failover'] = $data['fast_external_failover'] ?? null;
        $this->container['log_neighbour_changes'] = $data['log_neighbour_changes'] ?? null;
        $this->container['network_import_check'] = $data['network_import_check'] ?? null;
        $this->container['ignore_optional_capability'] = $data['ignore_optional_capability'] ?? null;
        $this->container['additional_path'] = $data['additional_path'] ?? null;
        $this->container['additional_path6'] = $data['additional_path6'] ?? null;
        $this->container['multipath_recursive_distance'] = $data['multipath_recursive_distance'] ?? null;
        $this->container['cluster_id'] = $data['cluster_id'] ?? null;
        $this->container['confederation_identifier'] = $data['confederation_identifier'] ?? null;
        $this->container['confederation_peers'] = $data['confederation_peers'] ?? null;
        $this->container['dampening_route_map'] = $data['dampening_route_map'] ?? null;
        $this->container['dampening_reachability_half_life'] = $data['dampening_reachability_half_life'] ?? null;
        $this->container['dampening_reuse'] = $data['dampening_reuse'] ?? null;
        $this->container['dampening_suppress'] = $data['dampening_suppress'] ?? null;
        $this->container['dampening_max_suppress_time'] = $data['dampening_max_suppress_time'] ?? null;
        $this->container['dampening_unreachability_half_life'] = $data['dampening_unreachability_half_life'] ?? null;
        $this->container['default_local_preference'] = $data['default_local_preference'] ?? null;
        $this->container['scan_time'] = $data['scan_time'] ?? null;
        $this->container['distance_external'] = $data['distance_external'] ?? null;
        $this->container['distance_internal'] = $data['distance_internal'] ?? null;
        $this->container['distance_local'] = $data['distance_local'] ?? null;
        $this->container['synchronization'] = $data['synchronization'] ?? null;
        $this->container['graceful_restart'] = $data['graceful_restart'] ?? null;
        $this->container['graceful_restart_time'] = $data['graceful_restart_time'] ?? null;
        $this->container['graceful_stalepath_time'] = $data['graceful_stalepath_time'] ?? null;
        $this->container['graceful_update_delay'] = $data['graceful_update_delay'] ?? null;
        $this->container['graceful_end_on_timer'] = $data['graceful_end_on_timer'] ?? null;
        $this->container['additional_path_select'] = $data['additional_path_select'] ?? null;
        $this->container['additional_path_select6'] = $data['additional_path_select6'] ?? null;
        $this->container['aggregate_address'] = $data['aggregate_address'] ?? null;
        $this->container['aggregate_address6'] = $data['aggregate_address6'] ?? null;
        $this->container['neighbor'] = $data['neighbor'] ?? null;
        $this->container['neighbor_group'] = $data['neighbor_group'] ?? null;
        $this->container['neighbor_range'] = $data['neighbor_range'] ?? null;
        $this->container['neighbor_range6'] = $data['neighbor_range6'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['network6'] = $data['network6'] ?? null;
        $this->container['redistribute'] = $data['redistribute'] ?? null;
        $this->container['redistribute6'] = $data['redistribute6'] ?? null;
        $this->container['admin_distance'] = $data['admin_distance'] ?? null;
        $this->container['vrf_leak'] = $data['vrf_leak'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['as']) && ($this->container['as'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'as', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['as']) && ($this->container['as'] < 0)) {
            $invalidProperties[] = "invalid value for 'as', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['keepalive_timer']) && ($this->container['keepalive_timer'] > 65535)) {
            $invalidProperties[] = "invalid value for 'keepalive_timer', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['keepalive_timer']) && ($this->container['keepalive_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'keepalive_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['holdtime_timer']) && ($this->container['holdtime_timer'] > 65535)) {
            $invalidProperties[] = "invalid value for 'holdtime_timer', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['holdtime_timer']) && ($this->container['holdtime_timer'] < 3)) {
            $invalidProperties[] = "invalid value for 'holdtime_timer', must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getAlwaysCompareMedAllowableValues();
        if (!is_null($this->container['always_compare_med']) && !in_array($this->container['always_compare_med'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'always_compare_med', must be one of '%s'",
                $this->container['always_compare_med'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBestpathAsPathIgnoreAllowableValues();
        if (!is_null($this->container['bestpath_as_path_ignore']) && !in_array($this->container['bestpath_as_path_ignore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpath_as_path_ignore', must be one of '%s'",
                $this->container['bestpath_as_path_ignore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBestpathCmpConfedAspathAllowableValues();
        if (!is_null($this->container['bestpath_cmp_confed_aspath']) && !in_array($this->container['bestpath_cmp_confed_aspath'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpath_cmp_confed_aspath', must be one of '%s'",
                $this->container['bestpath_cmp_confed_aspath'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBestpathCmpRouteridAllowableValues();
        if (!is_null($this->container['bestpath_cmp_routerid']) && !in_array($this->container['bestpath_cmp_routerid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpath_cmp_routerid', must be one of '%s'",
                $this->container['bestpath_cmp_routerid'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBestpathMedConfedAllowableValues();
        if (!is_null($this->container['bestpath_med_confed']) && !in_array($this->container['bestpath_med_confed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpath_med_confed', must be one of '%s'",
                $this->container['bestpath_med_confed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBestpathMedMissingAsWorstAllowableValues();
        if (!is_null($this->container['bestpath_med_missing_as_worst']) && !in_array($this->container['bestpath_med_missing_as_worst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpath_med_missing_as_worst', must be one of '%s'",
                $this->container['bestpath_med_missing_as_worst'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClientToClientReflectionAllowableValues();
        if (!is_null($this->container['client_to_client_reflection']) && !in_array($this->container['client_to_client_reflection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'client_to_client_reflection', must be one of '%s'",
                $this->container['client_to_client_reflection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDampeningAllowableValues();
        if (!is_null($this->container['dampening']) && !in_array($this->container['dampening'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dampening', must be one of '%s'",
                $this->container['dampening'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeterministicMedAllowableValues();
        if (!is_null($this->container['deterministic_med']) && !in_array($this->container['deterministic_med'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deterministic_med', must be one of '%s'",
                $this->container['deterministic_med'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEbgpMultipathAllowableValues();
        if (!is_null($this->container['ebgp_multipath']) && !in_array($this->container['ebgp_multipath'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ebgp_multipath', must be one of '%s'",
                $this->container['ebgp_multipath'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIbgpMultipathAllowableValues();
        if (!is_null($this->container['ibgp_multipath']) && !in_array($this->container['ibgp_multipath'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ibgp_multipath', must be one of '%s'",
                $this->container['ibgp_multipath'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnforceFirstAsAllowableValues();
        if (!is_null($this->container['enforce_first_as']) && !in_array($this->container['enforce_first_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enforce_first_as', must be one of '%s'",
                $this->container['enforce_first_as'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFastExternalFailoverAllowableValues();
        if (!is_null($this->container['fast_external_failover']) && !in_array($this->container['fast_external_failover'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fast_external_failover', must be one of '%s'",
                $this->container['fast_external_failover'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($this->container['log_neighbour_changes']) && !in_array($this->container['log_neighbour_changes'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                $this->container['log_neighbour_changes'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkImportCheckAllowableValues();
        if (!is_null($this->container['network_import_check']) && !in_array($this->container['network_import_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_import_check', must be one of '%s'",
                $this->container['network_import_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgnoreOptionalCapabilityAllowableValues();
        if (!is_null($this->container['ignore_optional_capability']) && !in_array($this->container['ignore_optional_capability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_optional_capability', must be one of '%s'",
                $this->container['ignore_optional_capability'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdditionalPathAllowableValues();
        if (!is_null($this->container['additional_path']) && !in_array($this->container['additional_path'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'additional_path', must be one of '%s'",
                $this->container['additional_path'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdditionalPath6AllowableValues();
        if (!is_null($this->container['additional_path6']) && !in_array($this->container['additional_path6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'additional_path6', must be one of '%s'",
                $this->container['additional_path6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMultipathRecursiveDistanceAllowableValues();
        if (!is_null($this->container['multipath_recursive_distance']) && !in_array($this->container['multipath_recursive_distance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multipath_recursive_distance', must be one of '%s'",
                $this->container['multipath_recursive_distance'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['confederation_identifier']) && ($this->container['confederation_identifier'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'confederation_identifier', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['confederation_identifier']) && ($this->container['confederation_identifier'] < 1)) {
            $invalidProperties[] = "invalid value for 'confederation_identifier', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['confederation_peers']) && (count($this->container['confederation_peers']) > 0)) {
            $invalidProperties[] = "invalid value for 'confederation_peers', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['dampening_route_map']) && (mb_strlen($this->container['dampening_route_map']) > 35)) {
            $invalidProperties[] = "invalid value for 'dampening_route_map', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['dampening_reachability_half_life']) && ($this->container['dampening_reachability_half_life'] > 45)) {
            $invalidProperties[] = "invalid value for 'dampening_reachability_half_life', must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['dampening_reachability_half_life']) && ($this->container['dampening_reachability_half_life'] < 1)) {
            $invalidProperties[] = "invalid value for 'dampening_reachability_half_life', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dampening_reuse']) && ($this->container['dampening_reuse'] > 20000)) {
            $invalidProperties[] = "invalid value for 'dampening_reuse', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['dampening_reuse']) && ($this->container['dampening_reuse'] < 1)) {
            $invalidProperties[] = "invalid value for 'dampening_reuse', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dampening_suppress']) && ($this->container['dampening_suppress'] > 20000)) {
            $invalidProperties[] = "invalid value for 'dampening_suppress', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['dampening_suppress']) && ($this->container['dampening_suppress'] < 1)) {
            $invalidProperties[] = "invalid value for 'dampening_suppress', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dampening_max_suppress_time']) && ($this->container['dampening_max_suppress_time'] > 255)) {
            $invalidProperties[] = "invalid value for 'dampening_max_suppress_time', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['dampening_max_suppress_time']) && ($this->container['dampening_max_suppress_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'dampening_max_suppress_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dampening_unreachability_half_life']) && ($this->container['dampening_unreachability_half_life'] > 45)) {
            $invalidProperties[] = "invalid value for 'dampening_unreachability_half_life', must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['dampening_unreachability_half_life']) && ($this->container['dampening_unreachability_half_life'] < 1)) {
            $invalidProperties[] = "invalid value for 'dampening_unreachability_half_life', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['default_local_preference']) && ($this->container['default_local_preference'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'default_local_preference', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['default_local_preference']) && ($this->container['default_local_preference'] < 0)) {
            $invalidProperties[] = "invalid value for 'default_local_preference', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['scan_time']) && ($this->container['scan_time'] > 60)) {
            $invalidProperties[] = "invalid value for 'scan_time', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['scan_time']) && ($this->container['scan_time'] < 5)) {
            $invalidProperties[] = "invalid value for 'scan_time', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['distance_external']) && ($this->container['distance_external'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_external', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_external']) && ($this->container['distance_external'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_external', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance_internal']) && ($this->container['distance_internal'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_internal', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_internal']) && ($this->container['distance_internal'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_internal', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distance_local']) && ($this->container['distance_local'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance_local', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance_local']) && ($this->container['distance_local'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance_local', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSynchronizationAllowableValues();
        if (!is_null($this->container['synchronization']) && !in_array($this->container['synchronization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'synchronization', must be one of '%s'",
                $this->container['synchronization'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGracefulRestartAllowableValues();
        if (!is_null($this->container['graceful_restart']) && !in_array($this->container['graceful_restart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'graceful_restart', must be one of '%s'",
                $this->container['graceful_restart'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['graceful_restart_time']) && ($this->container['graceful_restart_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'graceful_restart_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['graceful_restart_time']) && ($this->container['graceful_restart_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'graceful_restart_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['graceful_stalepath_time']) && ($this->container['graceful_stalepath_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'graceful_stalepath_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['graceful_stalepath_time']) && ($this->container['graceful_stalepath_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'graceful_stalepath_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['graceful_update_delay']) && ($this->container['graceful_update_delay'] > 3600)) {
            $invalidProperties[] = "invalid value for 'graceful_update_delay', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['graceful_update_delay']) && ($this->container['graceful_update_delay'] < 1)) {
            $invalidProperties[] = "invalid value for 'graceful_update_delay', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getGracefulEndOnTimerAllowableValues();
        if (!is_null($this->container['graceful_end_on_timer']) && !in_array($this->container['graceful_end_on_timer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'graceful_end_on_timer', must be one of '%s'",
                $this->container['graceful_end_on_timer'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['additional_path_select']) && ($this->container['additional_path_select'] > 255)) {
            $invalidProperties[] = "invalid value for 'additional_path_select', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['additional_path_select']) && ($this->container['additional_path_select'] < 2)) {
            $invalidProperties[] = "invalid value for 'additional_path_select', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['additional_path_select6']) && ($this->container['additional_path_select6'] > 255)) {
            $invalidProperties[] = "invalid value for 'additional_path_select6', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['additional_path_select6']) && ($this->container['additional_path_select6'] < 2)) {
            $invalidProperties[] = "invalid value for 'additional_path_select6', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['aggregate_address']) && (count($this->container['aggregate_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'aggregate_address', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['aggregate_address6']) && (count($this->container['aggregate_address6']) > 0)) {
            $invalidProperties[] = "invalid value for 'aggregate_address6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor']) && (count($this->container['neighbor']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor_group']) && (count($this->container['neighbor_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor_range']) && (count($this->container['neighbor_range']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor_range', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor_range6']) && (count($this->container['neighbor_range6']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor_range6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['network']) && (count($this->container['network']) > 0)) {
            $invalidProperties[] = "invalid value for 'network', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['network6']) && (count($this->container['network6']) > 0)) {
            $invalidProperties[] = "invalid value for 'network6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute']) && (count($this->container['redistribute']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute6']) && (count($this->container['redistribute6']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['admin_distance']) && (count($this->container['admin_distance']) > 0)) {
            $invalidProperties[] = "invalid value for 'admin_distance', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['vrf_leak']) && (count($this->container['vrf_leak']) > 0)) {
            $invalidProperties[] = "invalid value for 'vrf_leak', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets as
     *
     * @return int|null
     */
    public function getAs()
    {
        return $this->container['as'];
    }

    /**
     * Sets as
     *
     * @param int|null $as Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
     *
     * @return self
     */
    public function setAs($as)
    {

        if (!is_null($as) && ($as > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $as when calling InlineObject157., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($as) && ($as < 0)) {
            throw new \InvalidArgumentException('invalid value for $as when calling InlineObject157., must be bigger than or equal to 0.');
        }

        $this->container['as'] = $as;

        return $this;
    }

    /**
     * Gets router_id
     *
     * @return string|null
     */
    public function getRouterId()
    {
        return $this->container['router_id'];
    }

    /**
     * Sets router_id
     *
     * @param string|null $router_id Router ID.
     *
     * @return self
     */
    public function setRouterId($router_id)
    {
        $this->container['router_id'] = $router_id;

        return $this;
    }

    /**
     * Gets keepalive_timer
     *
     * @return int|null
     */
    public function getKeepaliveTimer()
    {
        return $this->container['keepalive_timer'];
    }

    /**
     * Sets keepalive_timer
     *
     * @param int|null $keepalive_timer Frequency to send keep alive requests.
     *
     * @return self
     */
    public function setKeepaliveTimer($keepalive_timer)
    {

        if (!is_null($keepalive_timer) && ($keepalive_timer > 65535)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_timer when calling InlineObject157., must be smaller than or equal to 65535.');
        }
        if (!is_null($keepalive_timer) && ($keepalive_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_timer when calling InlineObject157., must be bigger than or equal to 0.');
        }

        $this->container['keepalive_timer'] = $keepalive_timer;

        return $this;
    }

    /**
     * Gets holdtime_timer
     *
     * @return int|null
     */
    public function getHoldtimeTimer()
    {
        return $this->container['holdtime_timer'];
    }

    /**
     * Sets holdtime_timer
     *
     * @param int|null $holdtime_timer Number of seconds to mark peer as dead.
     *
     * @return self
     */
    public function setHoldtimeTimer($holdtime_timer)
    {

        if (!is_null($holdtime_timer) && ($holdtime_timer > 65535)) {
            throw new \InvalidArgumentException('invalid value for $holdtime_timer when calling InlineObject157., must be smaller than or equal to 65535.');
        }
        if (!is_null($holdtime_timer) && ($holdtime_timer < 3)) {
            throw new \InvalidArgumentException('invalid value for $holdtime_timer when calling InlineObject157., must be bigger than or equal to 3.');
        }

        $this->container['holdtime_timer'] = $holdtime_timer;

        return $this;
    }

    /**
     * Gets always_compare_med
     *
     * @return string|null
     */
    public function getAlwaysCompareMed()
    {
        return $this->container['always_compare_med'];
    }

    /**
     * Sets always_compare_med
     *
     * @param string|null $always_compare_med Enable/disable always compare MED.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAlwaysCompareMed($always_compare_med)
    {
        $allowedValues = $this->getAlwaysCompareMedAllowableValues();
        if (!is_null($always_compare_med) && !in_array($always_compare_med, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'always_compare_med', must be one of '%s'",
                    $always_compare_med,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['always_compare_med'] = $always_compare_med;

        return $this;
    }

    /**
     * Gets bestpath_as_path_ignore
     *
     * @return string|null
     */
    public function getBestpathAsPathIgnore()
    {
        return $this->container['bestpath_as_path_ignore'];
    }

    /**
     * Sets bestpath_as_path_ignore
     *
     * @param string|null $bestpath_as_path_ignore Enable/disable ignore AS path.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBestpathAsPathIgnore($bestpath_as_path_ignore)
    {
        $allowedValues = $this->getBestpathAsPathIgnoreAllowableValues();
        if (!is_null($bestpath_as_path_ignore) && !in_array($bestpath_as_path_ignore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpath_as_path_ignore', must be one of '%s'",
                    $bestpath_as_path_ignore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpath_as_path_ignore'] = $bestpath_as_path_ignore;

        return $this;
    }

    /**
     * Gets bestpath_cmp_confed_aspath
     *
     * @return string|null
     */
    public function getBestpathCmpConfedAspath()
    {
        return $this->container['bestpath_cmp_confed_aspath'];
    }

    /**
     * Sets bestpath_cmp_confed_aspath
     *
     * @param string|null $bestpath_cmp_confed_aspath Enable/disable compare federation AS path length.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBestpathCmpConfedAspath($bestpath_cmp_confed_aspath)
    {
        $allowedValues = $this->getBestpathCmpConfedAspathAllowableValues();
        if (!is_null($bestpath_cmp_confed_aspath) && !in_array($bestpath_cmp_confed_aspath, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpath_cmp_confed_aspath', must be one of '%s'",
                    $bestpath_cmp_confed_aspath,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpath_cmp_confed_aspath'] = $bestpath_cmp_confed_aspath;

        return $this;
    }

    /**
     * Gets bestpath_cmp_routerid
     *
     * @return string|null
     */
    public function getBestpathCmpRouterid()
    {
        return $this->container['bestpath_cmp_routerid'];
    }

    /**
     * Sets bestpath_cmp_routerid
     *
     * @param string|null $bestpath_cmp_routerid Enable/disable compare router ID for identical EBGP paths.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBestpathCmpRouterid($bestpath_cmp_routerid)
    {
        $allowedValues = $this->getBestpathCmpRouteridAllowableValues();
        if (!is_null($bestpath_cmp_routerid) && !in_array($bestpath_cmp_routerid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpath_cmp_routerid', must be one of '%s'",
                    $bestpath_cmp_routerid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpath_cmp_routerid'] = $bestpath_cmp_routerid;

        return $this;
    }

    /**
     * Gets bestpath_med_confed
     *
     * @return string|null
     */
    public function getBestpathMedConfed()
    {
        return $this->container['bestpath_med_confed'];
    }

    /**
     * Sets bestpath_med_confed
     *
     * @param string|null $bestpath_med_confed Enable/disable compare MED among confederation paths.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBestpathMedConfed($bestpath_med_confed)
    {
        $allowedValues = $this->getBestpathMedConfedAllowableValues();
        if (!is_null($bestpath_med_confed) && !in_array($bestpath_med_confed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpath_med_confed', must be one of '%s'",
                    $bestpath_med_confed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpath_med_confed'] = $bestpath_med_confed;

        return $this;
    }

    /**
     * Gets bestpath_med_missing_as_worst
     *
     * @return string|null
     */
    public function getBestpathMedMissingAsWorst()
    {
        return $this->container['bestpath_med_missing_as_worst'];
    }

    /**
     * Sets bestpath_med_missing_as_worst
     *
     * @param string|null $bestpath_med_missing_as_worst Enable/disable treat missing MED as least preferred.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setBestpathMedMissingAsWorst($bestpath_med_missing_as_worst)
    {
        $allowedValues = $this->getBestpathMedMissingAsWorstAllowableValues();
        if (!is_null($bestpath_med_missing_as_worst) && !in_array($bestpath_med_missing_as_worst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpath_med_missing_as_worst', must be one of '%s'",
                    $bestpath_med_missing_as_worst,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpath_med_missing_as_worst'] = $bestpath_med_missing_as_worst;

        return $this;
    }

    /**
     * Gets client_to_client_reflection
     *
     * @return string|null
     */
    public function getClientToClientReflection()
    {
        return $this->container['client_to_client_reflection'];
    }

    /**
     * Sets client_to_client_reflection
     *
     * @param string|null $client_to_client_reflection Enable/disable client-to-client route reflection.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setClientToClientReflection($client_to_client_reflection)
    {
        $allowedValues = $this->getClientToClientReflectionAllowableValues();
        if (!is_null($client_to_client_reflection) && !in_array($client_to_client_reflection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'client_to_client_reflection', must be one of '%s'",
                    $client_to_client_reflection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client_to_client_reflection'] = $client_to_client_reflection;

        return $this;
    }

    /**
     * Gets dampening
     *
     * @return string|null
     */
    public function getDampening()
    {
        return $this->container['dampening'];
    }

    /**
     * Sets dampening
     *
     * @param string|null $dampening Enable/disable route-flap dampening.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDampening($dampening)
    {
        $allowedValues = $this->getDampeningAllowableValues();
        if (!is_null($dampening) && !in_array($dampening, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dampening', must be one of '%s'",
                    $dampening,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dampening'] = $dampening;

        return $this;
    }

    /**
     * Gets deterministic_med
     *
     * @return string|null
     */
    public function getDeterministicMed()
    {
        return $this->container['deterministic_med'];
    }

    /**
     * Sets deterministic_med
     *
     * @param string|null $deterministic_med Enable/disable enforce deterministic comparison of MED.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDeterministicMed($deterministic_med)
    {
        $allowedValues = $this->getDeterministicMedAllowableValues();
        if (!is_null($deterministic_med) && !in_array($deterministic_med, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deterministic_med', must be one of '%s'",
                    $deterministic_med,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deterministic_med'] = $deterministic_med;

        return $this;
    }

    /**
     * Gets ebgp_multipath
     *
     * @return string|null
     */
    public function getEbgpMultipath()
    {
        return $this->container['ebgp_multipath'];
    }

    /**
     * Sets ebgp_multipath
     *
     * @param string|null $ebgp_multipath Enable/disable EBGP multi-path.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setEbgpMultipath($ebgp_multipath)
    {
        $allowedValues = $this->getEbgpMultipathAllowableValues();
        if (!is_null($ebgp_multipath) && !in_array($ebgp_multipath, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ebgp_multipath', must be one of '%s'",
                    $ebgp_multipath,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ebgp_multipath'] = $ebgp_multipath;

        return $this;
    }

    /**
     * Gets ibgp_multipath
     *
     * @return string|null
     */
    public function getIbgpMultipath()
    {
        return $this->container['ibgp_multipath'];
    }

    /**
     * Sets ibgp_multipath
     *
     * @param string|null $ibgp_multipath Enable/disable IBGP multi-path.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIbgpMultipath($ibgp_multipath)
    {
        $allowedValues = $this->getIbgpMultipathAllowableValues();
        if (!is_null($ibgp_multipath) && !in_array($ibgp_multipath, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ibgp_multipath', must be one of '%s'",
                    $ibgp_multipath,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ibgp_multipath'] = $ibgp_multipath;

        return $this;
    }

    /**
     * Gets enforce_first_as
     *
     * @return string|null
     */
    public function getEnforceFirstAs()
    {
        return $this->container['enforce_first_as'];
    }

    /**
     * Sets enforce_first_as
     *
     * @param string|null $enforce_first_as Enable/disable enforce first AS for EBGP routes.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setEnforceFirstAs($enforce_first_as)
    {
        $allowedValues = $this->getEnforceFirstAsAllowableValues();
        if (!is_null($enforce_first_as) && !in_array($enforce_first_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enforce_first_as', must be one of '%s'",
                    $enforce_first_as,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enforce_first_as'] = $enforce_first_as;

        return $this;
    }

    /**
     * Gets fast_external_failover
     *
     * @return string|null
     */
    public function getFastExternalFailover()
    {
        return $this->container['fast_external_failover'];
    }

    /**
     * Sets fast_external_failover
     *
     * @param string|null $fast_external_failover Enable/disable reset peer BGP session if link goes down.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setFastExternalFailover($fast_external_failover)
    {
        $allowedValues = $this->getFastExternalFailoverAllowableValues();
        if (!is_null($fast_external_failover) && !in_array($fast_external_failover, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fast_external_failover', must be one of '%s'",
                    $fast_external_failover,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fast_external_failover'] = $fast_external_failover;

        return $this;
    }

    /**
     * Gets log_neighbour_changes
     *
     * @return string|null
     */
    public function getLogNeighbourChanges()
    {
        return $this->container['log_neighbour_changes'];
    }

    /**
     * Sets log_neighbour_changes
     *
     * @param string|null $log_neighbour_changes Enable logging of BGP neighbour's changes    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLogNeighbourChanges($log_neighbour_changes)
    {
        $allowedValues = $this->getLogNeighbourChangesAllowableValues();
        if (!is_null($log_neighbour_changes) && !in_array($log_neighbour_changes, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_neighbour_changes', must be one of '%s'",
                    $log_neighbour_changes,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_neighbour_changes'] = $log_neighbour_changes;

        return $this;
    }

    /**
     * Gets network_import_check
     *
     * @return string|null
     */
    public function getNetworkImportCheck()
    {
        return $this->container['network_import_check'];
    }

    /**
     * Sets network_import_check
     *
     * @param string|null $network_import_check Enable/disable ensure BGP network route exists in IGP.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setNetworkImportCheck($network_import_check)
    {
        $allowedValues = $this->getNetworkImportCheckAllowableValues();
        if (!is_null($network_import_check) && !in_array($network_import_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_import_check', must be one of '%s'",
                    $network_import_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_import_check'] = $network_import_check;

        return $this;
    }

    /**
     * Gets ignore_optional_capability
     *
     * @return string|null
     */
    public function getIgnoreOptionalCapability()
    {
        return $this->container['ignore_optional_capability'];
    }

    /**
     * Sets ignore_optional_capability
     *
     * @param string|null $ignore_optional_capability Don't send unknown optional capability notification message    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setIgnoreOptionalCapability($ignore_optional_capability)
    {
        $allowedValues = $this->getIgnoreOptionalCapabilityAllowableValues();
        if (!is_null($ignore_optional_capability) && !in_array($ignore_optional_capability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_optional_capability', must be one of '%s'",
                    $ignore_optional_capability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_optional_capability'] = $ignore_optional_capability;

        return $this;
    }

    /**
     * Gets additional_path
     *
     * @return string|null
     */
    public function getAdditionalPath()
    {
        return $this->container['additional_path'];
    }

    /**
     * Sets additional_path
     *
     * @param string|null $additional_path Enable/disable selection of BGP IPv4 additional paths.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAdditionalPath($additional_path)
    {
        $allowedValues = $this->getAdditionalPathAllowableValues();
        if (!is_null($additional_path) && !in_array($additional_path, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'additional_path', must be one of '%s'",
                    $additional_path,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_path'] = $additional_path;

        return $this;
    }

    /**
     * Gets additional_path6
     *
     * @return string|null
     */
    public function getAdditionalPath6()
    {
        return $this->container['additional_path6'];
    }

    /**
     * Sets additional_path6
     *
     * @param string|null $additional_path6 Enable/disable selection of BGP IPv6 additional paths.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAdditionalPath6($additional_path6)
    {
        $allowedValues = $this->getAdditionalPath6AllowableValues();
        if (!is_null($additional_path6) && !in_array($additional_path6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'additional_path6', must be one of '%s'",
                    $additional_path6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_path6'] = $additional_path6;

        return $this;
    }

    /**
     * Gets multipath_recursive_distance
     *
     * @return string|null
     */
    public function getMultipathRecursiveDistance()
    {
        return $this->container['multipath_recursive_distance'];
    }

    /**
     * Sets multipath_recursive_distance
     *
     * @param string|null $multipath_recursive_distance Enable/disable use of recursive distance to select multipath.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMultipathRecursiveDistance($multipath_recursive_distance)
    {
        $allowedValues = $this->getMultipathRecursiveDistanceAllowableValues();
        if (!is_null($multipath_recursive_distance) && !in_array($multipath_recursive_distance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multipath_recursive_distance', must be one of '%s'",
                    $multipath_recursive_distance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multipath_recursive_distance'] = $multipath_recursive_distance;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string|null
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string|null $cluster_id Route reflector cluster ID.
     *
     * @return self
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets confederation_identifier
     *
     * @return int|null
     */
    public function getConfederationIdentifier()
    {
        return $this->container['confederation_identifier'];
    }

    /**
     * Sets confederation_identifier
     *
     * @param int|null $confederation_identifier Confederation identifier.
     *
     * @return self
     */
    public function setConfederationIdentifier($confederation_identifier)
    {

        if (!is_null($confederation_identifier) && ($confederation_identifier > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $confederation_identifier when calling InlineObject157., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($confederation_identifier) && ($confederation_identifier < 1)) {
            throw new \InvalidArgumentException('invalid value for $confederation_identifier when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['confederation_identifier'] = $confederation_identifier;

        return $this;
    }

    /**
     * Gets confederation_peers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpConfederationPeers[]|null
     */
    public function getConfederationPeers()
    {
        return $this->container['confederation_peers'];
    }

    /**
     * Sets confederation_peers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpConfederationPeers[]|null $confederation_peers Confederation peers.
     *
     * @return self
     */
    public function setConfederationPeers($confederation_peers)
    {

        if (!is_null($confederation_peers) && (count($confederation_peers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $confederation_peers when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['confederation_peers'] = $confederation_peers;

        return $this;
    }

    /**
     * Gets dampening_route_map
     *
     * @return string|null
     */
    public function getDampeningRouteMap()
    {
        return $this->container['dampening_route_map'];
    }

    /**
     * Sets dampening_route_map
     *
     * @param string|null $dampening_route_map Criteria for dampening.
     *
     * @return self
     */
    public function setDampeningRouteMap($dampening_route_map)
    {
        if (!is_null($dampening_route_map) && (mb_strlen($dampening_route_map) > 35)) {
            throw new \InvalidArgumentException('invalid length for $dampening_route_map when calling InlineObject157., must be smaller than or equal to 35.');
        }

        $this->container['dampening_route_map'] = $dampening_route_map;

        return $this;
    }

    /**
     * Gets dampening_reachability_half_life
     *
     * @return int|null
     */
    public function getDampeningReachabilityHalfLife()
    {
        return $this->container['dampening_reachability_half_life'];
    }

    /**
     * Sets dampening_reachability_half_life
     *
     * @param int|null $dampening_reachability_half_life Reachability half-life time for penalty (min).
     *
     * @return self
     */
    public function setDampeningReachabilityHalfLife($dampening_reachability_half_life)
    {

        if (!is_null($dampening_reachability_half_life) && ($dampening_reachability_half_life > 45)) {
            throw new \InvalidArgumentException('invalid value for $dampening_reachability_half_life when calling InlineObject157., must be smaller than or equal to 45.');
        }
        if (!is_null($dampening_reachability_half_life) && ($dampening_reachability_half_life < 1)) {
            throw new \InvalidArgumentException('invalid value for $dampening_reachability_half_life when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['dampening_reachability_half_life'] = $dampening_reachability_half_life;

        return $this;
    }

    /**
     * Gets dampening_reuse
     *
     * @return int|null
     */
    public function getDampeningReuse()
    {
        return $this->container['dampening_reuse'];
    }

    /**
     * Sets dampening_reuse
     *
     * @param int|null $dampening_reuse Threshold to reuse routes.
     *
     * @return self
     */
    public function setDampeningReuse($dampening_reuse)
    {

        if (!is_null($dampening_reuse) && ($dampening_reuse > 20000)) {
            throw new \InvalidArgumentException('invalid value for $dampening_reuse when calling InlineObject157., must be smaller than or equal to 20000.');
        }
        if (!is_null($dampening_reuse) && ($dampening_reuse < 1)) {
            throw new \InvalidArgumentException('invalid value for $dampening_reuse when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['dampening_reuse'] = $dampening_reuse;

        return $this;
    }

    /**
     * Gets dampening_suppress
     *
     * @return int|null
     */
    public function getDampeningSuppress()
    {
        return $this->container['dampening_suppress'];
    }

    /**
     * Sets dampening_suppress
     *
     * @param int|null $dampening_suppress Threshold to suppress routes.
     *
     * @return self
     */
    public function setDampeningSuppress($dampening_suppress)
    {

        if (!is_null($dampening_suppress) && ($dampening_suppress > 20000)) {
            throw new \InvalidArgumentException('invalid value for $dampening_suppress when calling InlineObject157., must be smaller than or equal to 20000.');
        }
        if (!is_null($dampening_suppress) && ($dampening_suppress < 1)) {
            throw new \InvalidArgumentException('invalid value for $dampening_suppress when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['dampening_suppress'] = $dampening_suppress;

        return $this;
    }

    /**
     * Gets dampening_max_suppress_time
     *
     * @return int|null
     */
    public function getDampeningMaxSuppressTime()
    {
        return $this->container['dampening_max_suppress_time'];
    }

    /**
     * Sets dampening_max_suppress_time
     *
     * @param int|null $dampening_max_suppress_time Maximum minutes a route can be suppressed.
     *
     * @return self
     */
    public function setDampeningMaxSuppressTime($dampening_max_suppress_time)
    {

        if (!is_null($dampening_max_suppress_time) && ($dampening_max_suppress_time > 255)) {
            throw new \InvalidArgumentException('invalid value for $dampening_max_suppress_time when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($dampening_max_suppress_time) && ($dampening_max_suppress_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $dampening_max_suppress_time when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['dampening_max_suppress_time'] = $dampening_max_suppress_time;

        return $this;
    }

    /**
     * Gets dampening_unreachability_half_life
     *
     * @return int|null
     */
    public function getDampeningUnreachabilityHalfLife()
    {
        return $this->container['dampening_unreachability_half_life'];
    }

    /**
     * Sets dampening_unreachability_half_life
     *
     * @param int|null $dampening_unreachability_half_life Unreachability half-life time for penalty (min).
     *
     * @return self
     */
    public function setDampeningUnreachabilityHalfLife($dampening_unreachability_half_life)
    {

        if (!is_null($dampening_unreachability_half_life) && ($dampening_unreachability_half_life > 45)) {
            throw new \InvalidArgumentException('invalid value for $dampening_unreachability_half_life when calling InlineObject157., must be smaller than or equal to 45.');
        }
        if (!is_null($dampening_unreachability_half_life) && ($dampening_unreachability_half_life < 1)) {
            throw new \InvalidArgumentException('invalid value for $dampening_unreachability_half_life when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['dampening_unreachability_half_life'] = $dampening_unreachability_half_life;

        return $this;
    }

    /**
     * Gets default_local_preference
     *
     * @return int|null
     */
    public function getDefaultLocalPreference()
    {
        return $this->container['default_local_preference'];
    }

    /**
     * Sets default_local_preference
     *
     * @param int|null $default_local_preference Default local preference.
     *
     * @return self
     */
    public function setDefaultLocalPreference($default_local_preference)
    {

        if (!is_null($default_local_preference) && ($default_local_preference > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $default_local_preference when calling InlineObject157., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($default_local_preference) && ($default_local_preference < 0)) {
            throw new \InvalidArgumentException('invalid value for $default_local_preference when calling InlineObject157., must be bigger than or equal to 0.');
        }

        $this->container['default_local_preference'] = $default_local_preference;

        return $this;
    }

    /**
     * Gets scan_time
     *
     * @return int|null
     */
    public function getScanTime()
    {
        return $this->container['scan_time'];
    }

    /**
     * Sets scan_time
     *
     * @param int|null $scan_time Background scanner interval (sec), 0 to disable it.
     *
     * @return self
     */
    public function setScanTime($scan_time)
    {

        if (!is_null($scan_time) && ($scan_time > 60)) {
            throw new \InvalidArgumentException('invalid value for $scan_time when calling InlineObject157., must be smaller than or equal to 60.');
        }
        if (!is_null($scan_time) && ($scan_time < 5)) {
            throw new \InvalidArgumentException('invalid value for $scan_time when calling InlineObject157., must be bigger than or equal to 5.');
        }

        $this->container['scan_time'] = $scan_time;

        return $this;
    }

    /**
     * Gets distance_external
     *
     * @return int|null
     */
    public function getDistanceExternal()
    {
        return $this->container['distance_external'];
    }

    /**
     * Sets distance_external
     *
     * @param int|null $distance_external Distance for routes external to the AS.
     *
     * @return self
     */
    public function setDistanceExternal($distance_external)
    {

        if (!is_null($distance_external) && ($distance_external > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_external when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_external) && ($distance_external < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_external when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['distance_external'] = $distance_external;

        return $this;
    }

    /**
     * Gets distance_internal
     *
     * @return int|null
     */
    public function getDistanceInternal()
    {
        return $this->container['distance_internal'];
    }

    /**
     * Sets distance_internal
     *
     * @param int|null $distance_internal Distance for routes internal to the AS.
     *
     * @return self
     */
    public function setDistanceInternal($distance_internal)
    {

        if (!is_null($distance_internal) && ($distance_internal > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_internal when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_internal) && ($distance_internal < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_internal when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['distance_internal'] = $distance_internal;

        return $this;
    }

    /**
     * Gets distance_local
     *
     * @return int|null
     */
    public function getDistanceLocal()
    {
        return $this->container['distance_local'];
    }

    /**
     * Sets distance_local
     *
     * @param int|null $distance_local Distance for routes local to the AS.
     *
     * @return self
     */
    public function setDistanceLocal($distance_local)
    {

        if (!is_null($distance_local) && ($distance_local > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance_local when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($distance_local) && ($distance_local < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance_local when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['distance_local'] = $distance_local;

        return $this;
    }

    /**
     * Gets synchronization
     *
     * @return string|null
     */
    public function getSynchronization()
    {
        return $this->container['synchronization'];
    }

    /**
     * Sets synchronization
     *
     * @param string|null $synchronization Enable/disable only advertise routes from iBGP if routes present in an IGP.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSynchronization($synchronization)
    {
        $allowedValues = $this->getSynchronizationAllowableValues();
        if (!is_null($synchronization) && !in_array($synchronization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'synchronization', must be one of '%s'",
                    $synchronization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['synchronization'] = $synchronization;

        return $this;
    }

    /**
     * Gets graceful_restart
     *
     * @return string|null
     */
    public function getGracefulRestart()
    {
        return $this->container['graceful_restart'];
    }

    /**
     * Sets graceful_restart
     *
     * @param string|null $graceful_restart Enable/disable BGP graceful restart capabilities.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setGracefulRestart($graceful_restart)
    {
        $allowedValues = $this->getGracefulRestartAllowableValues();
        if (!is_null($graceful_restart) && !in_array($graceful_restart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'graceful_restart', must be one of '%s'",
                    $graceful_restart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['graceful_restart'] = $graceful_restart;

        return $this;
    }

    /**
     * Gets graceful_restart_time
     *
     * @return int|null
     */
    public function getGracefulRestartTime()
    {
        return $this->container['graceful_restart_time'];
    }

    /**
     * Sets graceful_restart_time
     *
     * @param int|null $graceful_restart_time Time needed for neighbors to restart (sec).
     *
     * @return self
     */
    public function setGracefulRestartTime($graceful_restart_time)
    {

        if (!is_null($graceful_restart_time) && ($graceful_restart_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $graceful_restart_time when calling InlineObject157., must be smaller than or equal to 3600.');
        }
        if (!is_null($graceful_restart_time) && ($graceful_restart_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $graceful_restart_time when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['graceful_restart_time'] = $graceful_restart_time;

        return $this;
    }

    /**
     * Gets graceful_stalepath_time
     *
     * @return int|null
     */
    public function getGracefulStalepathTime()
    {
        return $this->container['graceful_stalepath_time'];
    }

    /**
     * Sets graceful_stalepath_time
     *
     * @param int|null $graceful_stalepath_time Time to hold stale paths of restarting neighbor (sec).
     *
     * @return self
     */
    public function setGracefulStalepathTime($graceful_stalepath_time)
    {

        if (!is_null($graceful_stalepath_time) && ($graceful_stalepath_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $graceful_stalepath_time when calling InlineObject157., must be smaller than or equal to 3600.');
        }
        if (!is_null($graceful_stalepath_time) && ($graceful_stalepath_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $graceful_stalepath_time when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['graceful_stalepath_time'] = $graceful_stalepath_time;

        return $this;
    }

    /**
     * Gets graceful_update_delay
     *
     * @return int|null
     */
    public function getGracefulUpdateDelay()
    {
        return $this->container['graceful_update_delay'];
    }

    /**
     * Sets graceful_update_delay
     *
     * @param int|null $graceful_update_delay Route advertisement/selection delay after restart (sec).
     *
     * @return self
     */
    public function setGracefulUpdateDelay($graceful_update_delay)
    {

        if (!is_null($graceful_update_delay) && ($graceful_update_delay > 3600)) {
            throw new \InvalidArgumentException('invalid value for $graceful_update_delay when calling InlineObject157., must be smaller than or equal to 3600.');
        }
        if (!is_null($graceful_update_delay) && ($graceful_update_delay < 1)) {
            throw new \InvalidArgumentException('invalid value for $graceful_update_delay when calling InlineObject157., must be bigger than or equal to 1.');
        }

        $this->container['graceful_update_delay'] = $graceful_update_delay;

        return $this;
    }

    /**
     * Gets graceful_end_on_timer
     *
     * @return string|null
     */
    public function getGracefulEndOnTimer()
    {
        return $this->container['graceful_end_on_timer'];
    }

    /**
     * Sets graceful_end_on_timer
     *
     * @param string|null $graceful_end_on_timer Enable/disable to exit graceful restart on timer only.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setGracefulEndOnTimer($graceful_end_on_timer)
    {
        $allowedValues = $this->getGracefulEndOnTimerAllowableValues();
        if (!is_null($graceful_end_on_timer) && !in_array($graceful_end_on_timer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'graceful_end_on_timer', must be one of '%s'",
                    $graceful_end_on_timer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['graceful_end_on_timer'] = $graceful_end_on_timer;

        return $this;
    }

    /**
     * Gets additional_path_select
     *
     * @return int|null
     */
    public function getAdditionalPathSelect()
    {
        return $this->container['additional_path_select'];
    }

    /**
     * Sets additional_path_select
     *
     * @param int|null $additional_path_select Number of additional paths to be selected for each IPv4 NLRI.
     *
     * @return self
     */
    public function setAdditionalPathSelect($additional_path_select)
    {

        if (!is_null($additional_path_select) && ($additional_path_select > 255)) {
            throw new \InvalidArgumentException('invalid value for $additional_path_select when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($additional_path_select) && ($additional_path_select < 2)) {
            throw new \InvalidArgumentException('invalid value for $additional_path_select when calling InlineObject157., must be bigger than or equal to 2.');
        }

        $this->container['additional_path_select'] = $additional_path_select;

        return $this;
    }

    /**
     * Gets additional_path_select6
     *
     * @return int|null
     */
    public function getAdditionalPathSelect6()
    {
        return $this->container['additional_path_select6'];
    }

    /**
     * Sets additional_path_select6
     *
     * @param int|null $additional_path_select6 Number of additional paths to be selected for each IPv6 NLRI.
     *
     * @return self
     */
    public function setAdditionalPathSelect6($additional_path_select6)
    {

        if (!is_null($additional_path_select6) && ($additional_path_select6 > 255)) {
            throw new \InvalidArgumentException('invalid value for $additional_path_select6 when calling InlineObject157., must be smaller than or equal to 255.');
        }
        if (!is_null($additional_path_select6) && ($additional_path_select6 < 2)) {
            throw new \InvalidArgumentException('invalid value for $additional_path_select6 when calling InlineObject157., must be bigger than or equal to 2.');
        }

        $this->container['additional_path_select6'] = $additional_path_select6;

        return $this;
    }

    /**
     * Gets aggregate_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress[]|null
     */
    public function getAggregateAddress()
    {
        return $this->container['aggregate_address'];
    }

    /**
     * Sets aggregate_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress[]|null $aggregate_address BGP aggregate address table.
     *
     * @return self
     */
    public function setAggregateAddress($aggregate_address)
    {

        if (!is_null($aggregate_address) && (count($aggregate_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $aggregate_address when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['aggregate_address'] = $aggregate_address;

        return $this;
    }

    /**
     * Gets aggregate_address6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress6[]|null
     */
    public function getAggregateAddress6()
    {
        return $this->container['aggregate_address6'];
    }

    /**
     * Sets aggregate_address6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpAggregateAddress6[]|null $aggregate_address6 BGP IPv6 aggregate address table.
     *
     * @return self
     */
    public function setAggregateAddress6($aggregate_address6)
    {

        if (!is_null($aggregate_address6) && (count($aggregate_address6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $aggregate_address6 when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['aggregate_address6'] = $aggregate_address6;

        return $this;
    }

    /**
     * Gets neighbor
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighbor[]|null
     */
    public function getNeighbor()
    {
        return $this->container['neighbor'];
    }

    /**
     * Sets neighbor
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighbor[]|null $neighbor BGP neighbor table.
     *
     * @return self
     */
    public function setNeighbor($neighbor)
    {

        if (!is_null($neighbor) && (count($neighbor) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor'] = $neighbor;

        return $this;
    }

    /**
     * Gets neighbor_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborGroup[]|null
     */
    public function getNeighborGroup()
    {
        return $this->container['neighbor_group'];
    }

    /**
     * Sets neighbor_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborGroup[]|null $neighbor_group BGP neighbor group table.
     *
     * @return self
     */
    public function setNeighborGroup($neighbor_group)
    {

        if (!is_null($neighbor_group) && (count($neighbor_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_group when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor_group'] = $neighbor_group;

        return $this;
    }

    /**
     * Gets neighbor_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange[]|null
     */
    public function getNeighborRange()
    {
        return $this->container['neighbor_range'];
    }

    /**
     * Sets neighbor_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange[]|null $neighbor_range BGP neighbor range table.
     *
     * @return self
     */
    public function setNeighborRange($neighbor_range)
    {

        if (!is_null($neighbor_range) && (count($neighbor_range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_range when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor_range'] = $neighbor_range;

        return $this;
    }

    /**
     * Gets neighbor_range6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange6[]|null
     */
    public function getNeighborRange6()
    {
        return $this->container['neighbor_range6'];
    }

    /**
     * Sets neighbor_range6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNeighborRange6[]|null $neighbor_range6 BGP IPv6 neighbor range table.
     *
     * @return self
     */
    public function setNeighborRange6($neighbor_range6)
    {

        if (!is_null($neighbor_range6) && (count($neighbor_range6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_range6 when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor_range6'] = $neighbor_range6;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork[]|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork[]|null $network BGP network table.
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if (!is_null($network) && (count($network) > 0)) {
            throw new \InvalidArgumentException('invalid value for $network when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets network6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork6[]|null
     */
    public function getNetwork6()
    {
        return $this->container['network6'];
    }

    /**
     * Sets network6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpNetwork6[]|null $network6 BGP IPv6 network table.
     *
     * @return self
     */
    public function setNetwork6($network6)
    {

        if (!is_null($network6) && (count($network6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $network6 when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['network6'] = $network6;

        return $this;
    }

    /**
     * Gets redistribute
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]|null
     */
    public function getRedistribute()
    {
        return $this->container['redistribute'];
    }

    /**
     * Sets redistribute
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]|null $redistribute BGP IPv4 redistribute table.
     *
     * @return self
     */
    public function setRedistribute($redistribute)
    {

        if (!is_null($redistribute) && (count($redistribute) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute'] = $redistribute;

        return $this;
    }

    /**
     * Gets redistribute6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]|null
     */
    public function getRedistribute6()
    {
        return $this->container['redistribute6'];
    }

    /**
     * Sets redistribute6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpRedistribute[]|null $redistribute6 BGP IPv6 redistribute table.
     *
     * @return self
     */
    public function setRedistribute6($redistribute6)
    {

        if (!is_null($redistribute6) && (count($redistribute6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute6 when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute6'] = $redistribute6;

        return $this;
    }

    /**
     * Gets admin_distance
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpAdminDistance[]|null
     */
    public function getAdminDistance()
    {
        return $this->container['admin_distance'];
    }

    /**
     * Sets admin_distance
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpAdminDistance[]|null $admin_distance Administrative distance modifications.
     *
     * @return self
     */
    public function setAdminDistance($admin_distance)
    {

        if (!is_null($admin_distance) && (count($admin_distance) > 0)) {
            throw new \InvalidArgumentException('invalid value for $admin_distance when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['admin_distance'] = $admin_distance;

        return $this;
    }

    /**
     * Gets vrf_leak
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterBgpVrfLeak[]|null
     */
    public function getVrfLeak()
    {
        return $this->container['vrf_leak'];
    }

    /**
     * Sets vrf_leak
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterBgpVrfLeak[]|null $vrf_leak BGP VRF leaking table.
     *
     * @return self
     */
    public function setVrfLeak($vrf_leak)
    {

        if (!is_null($vrf_leak) && (count($vrf_leak) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vrf_leak when calling InlineObject157., number of items must be less than or equal to 0.');
        }
        $this->container['vrf_leak'] = $vrf_leak;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


