<?php
/**
 * InlineObject166
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject166 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject166 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_166';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'multicast_routing' => 'string',
        'multicast_pmtu' => 'string',
        'interface' => '\Fortigate\FortiOS\Model\CMDB\RouterMulticast6Interface[]',
        'pim_sm_global' => '\Fortigate\FortiOS\Model\CMDB\RouterMulticast6PimSmGlobal[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'multicast_routing' => null,
        'multicast_pmtu' => null,
        'interface' => null,
        'pim_sm_global' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'multicast_routing' => 'multicast-routing',
        'multicast_pmtu' => 'multicast-pmtu',
        'interface' => 'interface',
        'pim_sm_global' => 'pim-sm-global'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'multicast_routing' => 'setMulticastRouting',
        'multicast_pmtu' => 'setMulticastPmtu',
        'interface' => 'setInterface',
        'pim_sm_global' => 'setPimSmGlobal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'multicast_routing' => 'getMulticastRouting',
        'multicast_pmtu' => 'getMulticastPmtu',
        'interface' => 'getInterface',
        'pim_sm_global' => 'getPimSmGlobal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MULTICAST_ROUTING_ENABLE = 'enable';
    const MULTICAST_ROUTING_DISABLE = 'disable';
    const MULTICAST_PMTU_ENABLE = 'enable';
    const MULTICAST_PMTU_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastRoutingAllowableValues()
    {
        return [
            self::MULTICAST_ROUTING_ENABLE,
            self::MULTICAST_ROUTING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastPmtuAllowableValues()
    {
        return [
            self::MULTICAST_PMTU_ENABLE,
            self::MULTICAST_PMTU_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['multicast_routing'] = $data['multicast_routing'] ?? null;
        $this->container['multicast_pmtu'] = $data['multicast_pmtu'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['pim_sm_global'] = $data['pim_sm_global'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!is_null($this->container['multicast_routing']) && !in_array($this->container['multicast_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_routing', must be one of '%s'",
                $this->container['multicast_routing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMulticastPmtuAllowableValues();
        if (!is_null($this->container['multicast_pmtu']) && !in_array($this->container['multicast_pmtu'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_pmtu', must be one of '%s'",
                $this->container['multicast_pmtu'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (count($this->container['interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['pim_sm_global']) && (count($this->container['pim_sm_global']) > 0)) {
            $invalidProperties[] = "invalid value for 'pim_sm_global', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets multicast_routing
     *
     * @return string|null
     */
    public function getMulticastRouting()
    {
        return $this->container['multicast_routing'];
    }

    /**
     * Sets multicast_routing
     *
     * @param string|null $multicast_routing Enable/disable IPv6 multicast routing.    enable:Enable IPv6 multicast routing.    disable:Disable IPv6 multicast routing.
     *
     * @return self
     */
    public function setMulticastRouting($multicast_routing)
    {
        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!is_null($multicast_routing) && !in_array($multicast_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_routing', must be one of '%s'",
                    $multicast_routing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_routing'] = $multicast_routing;

        return $this;
    }

    /**
     * Gets multicast_pmtu
     *
     * @return string|null
     */
    public function getMulticastPmtu()
    {
        return $this->container['multicast_pmtu'];
    }

    /**
     * Sets multicast_pmtu
     *
     * @param string|null $multicast_pmtu Enable/disable PMTU for IPv6 multicast.    enable:Enable PMTU for IPv6 multicast.    disable:Disable PMTU for IPv6 multicast.
     *
     * @return self
     */
    public function setMulticastPmtu($multicast_pmtu)
    {
        $allowedValues = $this->getMulticastPmtuAllowableValues();
        if (!is_null($multicast_pmtu) && !in_array($multicast_pmtu, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_pmtu', must be one of '%s'",
                    $multicast_pmtu,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_pmtu'] = $multicast_pmtu;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterMulticast6Interface[]|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterMulticast6Interface[]|null $interface Protocol Independent Multicast (PIM) interfaces.
     *
     * @return self
     */
    public function setInterface($interface)
    {

        if (!is_null($interface) && (count($interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $interface when calling InlineObject166., number of items must be less than or equal to 0.');
        }
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets pim_sm_global
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterMulticast6PimSmGlobal[]|null
     */
    public function getPimSmGlobal()
    {
        return $this->container['pim_sm_global'];
    }

    /**
     * Sets pim_sm_global
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterMulticast6PimSmGlobal[]|null $pim_sm_global PIM sparse-mode global settings.
     *
     * @return self
     */
    public function setPimSmGlobal($pim_sm_global)
    {

        if (!is_null($pim_sm_global) && (count($pim_sm_global) > 0)) {
            throw new \InvalidArgumentException('invalid value for $pim_sm_global when calling InlineObject166., number of items must be less than or equal to 0.');
        }
        $this->container['pim_sm_global'] = $pim_sm_global;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


