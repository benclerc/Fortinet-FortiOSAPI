<?php
/**
 * InlineObject619
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject619 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject619 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_619';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'platform' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNamePlatform[]',
        'control_message_offload' => 'string',
        'apcfg_profile' => 'string',
        'ble_profile' => 'string',
        'wan_port_mode' => 'string',
        'lan' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]',
        'energy_efficient_ethernet' => 'string',
        'led_state' => 'string',
        'led_schedules' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]',
        'dtls_policy' => 'string',
        'dtls_in_kernel' => 'string',
        'max_clients' => 'int',
        'handoff_rssi' => 'int',
        'handoff_sta_thresh' => 'int',
        'handoff_roaming' => 'string',
        'deny_mac_list' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameDenyMacList[]',
        'ap_country' => 'string',
        'ip_fragment_preventing' => 'string',
        'tun_mtu_uplink' => 'int',
        'tun_mtu_downlink' => 'int',
        'split_tunneling_acl_path' => 'string',
        'split_tunneling_acl_local_ap_subnet' => 'string',
        'split_tunneling_acl' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]',
        'allowaccess' => 'string',
        'login_passwd_change' => 'string',
        'login_passwd' => 'string',
        'lldp' => 'string',
        'poe_mode' => 'string',
        'frequency_handoff' => 'string',
        'ap_handoff' => 'string',
        'radio_1' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio1[]',
        'radio_2' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio2[]',
        'radio_3' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]',
        'radio_4' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]',
        'lbs' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameLbs[]',
        'ext_info_enable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'platform' => null,
        'control_message_offload' => null,
        'apcfg_profile' => null,
        'ble_profile' => null,
        'wan_port_mode' => null,
        'lan' => null,
        'energy_efficient_ethernet' => null,
        'led_state' => null,
        'led_schedules' => null,
        'dtls_policy' => null,
        'dtls_in_kernel' => null,
        'max_clients' => null,
        'handoff_rssi' => null,
        'handoff_sta_thresh' => null,
        'handoff_roaming' => null,
        'deny_mac_list' => null,
        'ap_country' => null,
        'ip_fragment_preventing' => null,
        'tun_mtu_uplink' => null,
        'tun_mtu_downlink' => null,
        'split_tunneling_acl_path' => null,
        'split_tunneling_acl_local_ap_subnet' => null,
        'split_tunneling_acl' => null,
        'allowaccess' => null,
        'login_passwd_change' => null,
        'login_passwd' => 'password',
        'lldp' => null,
        'poe_mode' => null,
        'frequency_handoff' => null,
        'ap_handoff' => null,
        'radio_1' => null,
        'radio_2' => null,
        'radio_3' => null,
        'radio_4' => null,
        'lbs' => null,
        'ext_info_enable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'platform' => 'platform',
        'control_message_offload' => 'control-message-offload',
        'apcfg_profile' => 'apcfg-profile',
        'ble_profile' => 'ble-profile',
        'wan_port_mode' => 'wan-port-mode',
        'lan' => 'lan',
        'energy_efficient_ethernet' => 'energy-efficient-ethernet',
        'led_state' => 'led-state',
        'led_schedules' => 'led-schedules',
        'dtls_policy' => 'dtls-policy',
        'dtls_in_kernel' => 'dtls-in-kernel',
        'max_clients' => 'max-clients',
        'handoff_rssi' => 'handoff-rssi',
        'handoff_sta_thresh' => 'handoff-sta-thresh',
        'handoff_roaming' => 'handoff-roaming',
        'deny_mac_list' => 'deny-mac-list',
        'ap_country' => 'ap-country',
        'ip_fragment_preventing' => 'ip-fragment-preventing',
        'tun_mtu_uplink' => 'tun-mtu-uplink',
        'tun_mtu_downlink' => 'tun-mtu-downlink',
        'split_tunneling_acl_path' => 'split-tunneling-acl-path',
        'split_tunneling_acl_local_ap_subnet' => 'split-tunneling-acl-local-ap-subnet',
        'split_tunneling_acl' => 'split-tunneling-acl',
        'allowaccess' => 'allowaccess',
        'login_passwd_change' => 'login-passwd-change',
        'login_passwd' => 'login-passwd',
        'lldp' => 'lldp',
        'poe_mode' => 'poe-mode',
        'frequency_handoff' => 'frequency-handoff',
        'ap_handoff' => 'ap-handoff',
        'radio_1' => 'radio-1',
        'radio_2' => 'radio-2',
        'radio_3' => 'radio-3',
        'radio_4' => 'radio-4',
        'lbs' => 'lbs',
        'ext_info_enable' => 'ext-info-enable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'platform' => 'setPlatform',
        'control_message_offload' => 'setControlMessageOffload',
        'apcfg_profile' => 'setApcfgProfile',
        'ble_profile' => 'setBleProfile',
        'wan_port_mode' => 'setWanPortMode',
        'lan' => 'setLan',
        'energy_efficient_ethernet' => 'setEnergyEfficientEthernet',
        'led_state' => 'setLedState',
        'led_schedules' => 'setLedSchedules',
        'dtls_policy' => 'setDtlsPolicy',
        'dtls_in_kernel' => 'setDtlsInKernel',
        'max_clients' => 'setMaxClients',
        'handoff_rssi' => 'setHandoffRssi',
        'handoff_sta_thresh' => 'setHandoffStaThresh',
        'handoff_roaming' => 'setHandoffRoaming',
        'deny_mac_list' => 'setDenyMacList',
        'ap_country' => 'setApCountry',
        'ip_fragment_preventing' => 'setIpFragmentPreventing',
        'tun_mtu_uplink' => 'setTunMtuUplink',
        'tun_mtu_downlink' => 'setTunMtuDownlink',
        'split_tunneling_acl_path' => 'setSplitTunnelingAclPath',
        'split_tunneling_acl_local_ap_subnet' => 'setSplitTunnelingAclLocalApSubnet',
        'split_tunneling_acl' => 'setSplitTunnelingAcl',
        'allowaccess' => 'setAllowaccess',
        'login_passwd_change' => 'setLoginPasswdChange',
        'login_passwd' => 'setLoginPasswd',
        'lldp' => 'setLldp',
        'poe_mode' => 'setPoeMode',
        'frequency_handoff' => 'setFrequencyHandoff',
        'ap_handoff' => 'setApHandoff',
        'radio_1' => 'setRadio1',
        'radio_2' => 'setRadio2',
        'radio_3' => 'setRadio3',
        'radio_4' => 'setRadio4',
        'lbs' => 'setLbs',
        'ext_info_enable' => 'setExtInfoEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'platform' => 'getPlatform',
        'control_message_offload' => 'getControlMessageOffload',
        'apcfg_profile' => 'getApcfgProfile',
        'ble_profile' => 'getBleProfile',
        'wan_port_mode' => 'getWanPortMode',
        'lan' => 'getLan',
        'energy_efficient_ethernet' => 'getEnergyEfficientEthernet',
        'led_state' => 'getLedState',
        'led_schedules' => 'getLedSchedules',
        'dtls_policy' => 'getDtlsPolicy',
        'dtls_in_kernel' => 'getDtlsInKernel',
        'max_clients' => 'getMaxClients',
        'handoff_rssi' => 'getHandoffRssi',
        'handoff_sta_thresh' => 'getHandoffStaThresh',
        'handoff_roaming' => 'getHandoffRoaming',
        'deny_mac_list' => 'getDenyMacList',
        'ap_country' => 'getApCountry',
        'ip_fragment_preventing' => 'getIpFragmentPreventing',
        'tun_mtu_uplink' => 'getTunMtuUplink',
        'tun_mtu_downlink' => 'getTunMtuDownlink',
        'split_tunneling_acl_path' => 'getSplitTunnelingAclPath',
        'split_tunneling_acl_local_ap_subnet' => 'getSplitTunnelingAclLocalApSubnet',
        'split_tunneling_acl' => 'getSplitTunnelingAcl',
        'allowaccess' => 'getAllowaccess',
        'login_passwd_change' => 'getLoginPasswdChange',
        'login_passwd' => 'getLoginPasswd',
        'lldp' => 'getLldp',
        'poe_mode' => 'getPoeMode',
        'frequency_handoff' => 'getFrequencyHandoff',
        'ap_handoff' => 'getApHandoff',
        'radio_1' => 'getRadio1',
        'radio_2' => 'getRadio2',
        'radio_3' => 'getRadio3',
        'radio_4' => 'getRadio4',
        'lbs' => 'getLbs',
        'ext_info_enable' => 'getExtInfoEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTROL_MESSAGE_OFFLOAD_EBP_FRAME = 'ebp-frame';
    const CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_TAG = 'aeroscout-tag';
    const CONTROL_MESSAGE_OFFLOAD_AP_LIST = 'ap-list';
    const CONTROL_MESSAGE_OFFLOAD_STA_LIST = 'sta-list';
    const CONTROL_MESSAGE_OFFLOAD_STA_CAP_LIST = 'sta-cap-list';
    const CONTROL_MESSAGE_OFFLOAD_STATS = 'stats';
    const CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_MU = 'aeroscout-mu';
    const CONTROL_MESSAGE_OFFLOAD_STA_HEALTH = 'sta-health';
    const CONTROL_MESSAGE_OFFLOAD_SPECTRAL_ANALYSIS = 'spectral-analysis';
    const WAN_PORT_MODE_LAN = 'wan-lan';
    const WAN_PORT_MODE_ONLY = 'wan-only';
    const ENERGY_EFFICIENT_ETHERNET_ENABLE = 'enable';
    const ENERGY_EFFICIENT_ETHERNET_DISABLE = 'disable';
    const LED_STATE_ENABLE = 'enable';
    const LED_STATE_DISABLE = 'disable';
    const DTLS_POLICY_CLEAR_TEXT = 'clear-text';
    const DTLS_POLICY_DTLS_ENABLED = 'dtls-enabled';
    const DTLS_POLICY_IPSEC_VPN = 'ipsec-vpn';
    const DTLS_IN_KERNEL_ENABLE = 'enable';
    const DTLS_IN_KERNEL_DISABLE = 'disable';
    const HANDOFF_ROAMING_ENABLE = 'enable';
    const HANDOFF_ROAMING_DISABLE = 'disable';
    const AP_COUNTRY_NA = 'NA';
    const AP_COUNTRY_AF = 'AF';
    const AP_COUNTRY_AL = 'AL';
    const AP_COUNTRY_DZ = 'DZ';
    const AP_COUNTRY__AS = 'AS';
    const AP_COUNTRY_AO = 'AO';
    const AP_COUNTRY_AR = 'AR';
    const AP_COUNTRY_AM = 'AM';
    const AP_COUNTRY_AU = 'AU';
    const AP_COUNTRY_AT = 'AT';
    const AP_COUNTRY_AZ = 'AZ';
    const AP_COUNTRY_BS = 'BS';
    const AP_COUNTRY_BH = 'BH';
    const AP_COUNTRY_BD = 'BD';
    const AP_COUNTRY_BB = 'BB';
    const AP_COUNTRY_BY = 'BY';
    const AP_COUNTRY_BE = 'BE';
    const AP_COUNTRY_BZ = 'BZ';
    const AP_COUNTRY_BJ = 'BJ';
    const AP_COUNTRY_BM = 'BM';
    const AP_COUNTRY_BT = 'BT';
    const AP_COUNTRY_BO = 'BO';
    const AP_COUNTRY_BA = 'BA';
    const AP_COUNTRY_BW = 'BW';
    const AP_COUNTRY_BR = 'BR';
    const AP_COUNTRY_BN = 'BN';
    const AP_COUNTRY_BG = 'BG';
    const AP_COUNTRY_BF = 'BF';
    const AP_COUNTRY_KH = 'KH';
    const AP_COUNTRY_CM = 'CM';
    const AP_COUNTRY_KY = 'KY';
    const AP_COUNTRY_CF = 'CF';
    const AP_COUNTRY_TD = 'TD';
    const AP_COUNTRY_CL = 'CL';
    const AP_COUNTRY_CN = 'CN';
    const AP_COUNTRY_CX = 'CX';
    const AP_COUNTRY_CO = 'CO';
    const AP_COUNTRY_CR = 'CR';
    const AP_COUNTRY_HR = 'HR';
    const AP_COUNTRY_CY = 'CY';
    const AP_COUNTRY_CZ = 'CZ';
    const AP_COUNTRY_DK = 'DK';
    const AP_COUNTRY_DM = 'DM';
    const AP_COUNTRY__DO = 'DO';
    const AP_COUNTRY_EC = 'EC';
    const AP_COUNTRY_EG = 'EG';
    const AP_COUNTRY_SV = 'SV';
    const AP_COUNTRY_ET = 'ET';
    const AP_COUNTRY_EE = 'EE';
    const AP_COUNTRY_GF = 'GF';
    const AP_COUNTRY_PF = 'PF';
    const AP_COUNTRY_FO = 'FO';
    const AP_COUNTRY_FI = 'FI';
    const AP_COUNTRY_FR = 'FR';
    const AP_COUNTRY_GE = 'GE';
    const AP_COUNTRY_DE = 'DE';
    const AP_COUNTRY_GH = 'GH';
    const AP_COUNTRY_GI = 'GI';
    const AP_COUNTRY_GR = 'GR';
    const AP_COUNTRY_GL = 'GL';
    const AP_COUNTRY_GD = 'GD';
    const AP_COUNTRY_GP = 'GP';
    const AP_COUNTRY_GU = 'GU';
    const AP_COUNTRY_GT = 'GT';
    const AP_COUNTRY_GY = 'GY';
    const AP_COUNTRY_HT = 'HT';
    const AP_COUNTRY_HN = 'HN';
    const AP_COUNTRY_HK = 'HK';
    const AP_COUNTRY_HU = 'HU';
    const AP_COUNTRY_IS = 'IS';
    const AP_COUNTRY_IN = 'IN';
    const AP_COUNTRY_ID = 'ID';
    const AP_COUNTRY_IR = 'IR';
    const AP_COUNTRY_IE = 'IE';
    const AP_COUNTRY_IM = 'IM';
    const AP_COUNTRY_IL = 'IL';
    const AP_COUNTRY_IT = 'IT';
    const AP_COUNTRY_CI = 'CI';
    const AP_COUNTRY_JM = 'JM';
    const AP_COUNTRY_JO = 'JO';
    const AP_COUNTRY_KZ = 'KZ';
    const AP_COUNTRY_KE = 'KE';
    const AP_COUNTRY_KP = 'KP';
    const AP_COUNTRY_KR = 'KR';
    const AP_COUNTRY_KW = 'KW';
    const AP_COUNTRY_LA = 'LA';
    const AP_COUNTRY_LV = 'LV';
    const AP_COUNTRY_LB = 'LB';
    const AP_COUNTRY_LS = 'LS';
    const AP_COUNTRY_LY = 'LY';
    const AP_COUNTRY_LI = 'LI';
    const AP_COUNTRY_LT = 'LT';
    const AP_COUNTRY_LU = 'LU';
    const AP_COUNTRY_MO = 'MO';
    const AP_COUNTRY_MK = 'MK';
    const AP_COUNTRY_MG = 'MG';
    const AP_COUNTRY_MW = 'MW';
    const AP_COUNTRY_MY = 'MY';
    const AP_COUNTRY_MV = 'MV';
    const AP_COUNTRY_ML = 'ML';
    const AP_COUNTRY_MT = 'MT';
    const AP_COUNTRY_MH = 'MH';
    const AP_COUNTRY_MQ = 'MQ';
    const AP_COUNTRY_MU = 'MU';
    const AP_COUNTRY_YT = 'YT';
    const AP_COUNTRY_MX = 'MX';
    const AP_COUNTRY_FM = 'FM';
    const AP_COUNTRY_MD = 'MD';
    const AP_COUNTRY_MC = 'MC';
    const AP_COUNTRY_MA = 'MA';
    const AP_COUNTRY_MZ = 'MZ';
    const AP_COUNTRY_MM = 'MM';
    const AP_COUNTRY_NP = 'NP';
    const AP_COUNTRY_NL = 'NL';
    const AP_COUNTRY_AN = 'AN';
    const AP_COUNTRY_AW = 'AW';
    const AP_COUNTRY_NZ = 'NZ';
    const AP_COUNTRY_NI = 'NI';
    const AP_COUNTRY_NE = 'NE';
    const AP_COUNTRY_NO = 'NO';
    const AP_COUNTRY_MP = 'MP';
    const AP_COUNTRY_OM = 'OM';
    const AP_COUNTRY_PK = 'PK';
    const AP_COUNTRY_PW = 'PW';
    const AP_COUNTRY_PA = 'PA';
    const AP_COUNTRY_PG = 'PG';
    const AP_COUNTRY_PY = 'PY';
    const AP_COUNTRY_PE = 'PE';
    const AP_COUNTRY_PH = 'PH';
    const AP_COUNTRY_PL = 'PL';
    const AP_COUNTRY_PT = 'PT';
    const AP_COUNTRY_PR = 'PR';
    const AP_COUNTRY_QA = 'QA';
    const AP_COUNTRY_RE = 'RE';
    const AP_COUNTRY_RO = 'RO';
    const AP_COUNTRY_RU = 'RU';
    const AP_COUNTRY_RW = 'RW';
    const AP_COUNTRY_BL = 'BL';
    const AP_COUNTRY_KN = 'KN';
    const AP_COUNTRY_LC = 'LC';
    const AP_COUNTRY_MF = 'MF';
    const AP_COUNTRY_PM = 'PM';
    const AP_COUNTRY_VC = 'VC';
    const AP_COUNTRY_SA = 'SA';
    const AP_COUNTRY_SN = 'SN';
    const AP_COUNTRY_RS = 'RS';
    const AP_COUNTRY_ME = 'ME';
    const AP_COUNTRY_SL = 'SL';
    const AP_COUNTRY_SG = 'SG';
    const AP_COUNTRY_SK = 'SK';
    const AP_COUNTRY_SI = 'SI';
    const AP_COUNTRY_ZA = 'ZA';
    const AP_COUNTRY_ES = 'ES';
    const AP_COUNTRY_LK = 'LK';
    const AP_COUNTRY_SE = 'SE';
    const AP_COUNTRY_SD = 'SD';
    const AP_COUNTRY_SR = 'SR';
    const AP_COUNTRY_CH = 'CH';
    const AP_COUNTRY_SY = 'SY';
    const AP_COUNTRY_TW = 'TW';
    const AP_COUNTRY_TZ = 'TZ';
    const AP_COUNTRY_TH = 'TH';
    const AP_COUNTRY_TG = 'TG';
    const AP_COUNTRY_TT = 'TT';
    const AP_COUNTRY_TN = 'TN';
    const AP_COUNTRY_TR = 'TR';
    const AP_COUNTRY_TM = 'TM';
    const AP_COUNTRY_AE = 'AE';
    const AP_COUNTRY_TC = 'TC';
    const AP_COUNTRY_UG = 'UG';
    const AP_COUNTRY_UA = 'UA';
    const AP_COUNTRY_GB = 'GB';
    const AP_COUNTRY_US = 'US';
    const AP_COUNTRY_PS = 'PS';
    const AP_COUNTRY_UY = 'UY';
    const AP_COUNTRY_UZ = 'UZ';
    const AP_COUNTRY_VU = 'VU';
    const AP_COUNTRY_VE = 'VE';
    const AP_COUNTRY_VN = 'VN';
    const AP_COUNTRY_VI = 'VI';
    const AP_COUNTRY_WF = 'WF';
    const AP_COUNTRY_YE = 'YE';
    const AP_COUNTRY_ZB = 'ZB';
    const AP_COUNTRY_ZW = 'ZW';
    const AP_COUNTRY_JP = 'JP';
    const AP_COUNTRY_CA = 'CA';
    const IP_FRAGMENT_PREVENTING_TCP_MSS_ADJUST = 'tcp-mss-adjust';
    const IP_FRAGMENT_PREVENTING_ICMP_UNREACHABLE = 'icmp-unreachable';
    const SPLIT_TUNNELING_ACL_PATH_TUNNEL = 'tunnel';
    const SPLIT_TUNNELING_ACL_PATH_LOCAL = 'local';
    const SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_ENABLE = 'enable';
    const SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_DISABLE = 'disable';
    const ALLOWACCESS_HTTPS = 'https';
    const ALLOWACCESS_SSH = 'ssh';
    const ALLOWACCESS_SNMP = 'snmp';
    const LOGIN_PASSWD_CHANGE_YES = 'yes';
    const LOGIN_PASSWD_CHANGE__DEFAULT = 'default';
    const LOGIN_PASSWD_CHANGE_NO = 'no';
    const LLDP_ENABLE = 'enable';
    const LLDP_DISABLE = 'disable';
    const POE_MODE_AUTO = 'auto';
    const POE_MODE__8023AF = '8023af';
    const POE_MODE__8023AT = '8023at';
    const POE_MODE_POWER_ADAPTER = 'power-adapter';
    const POE_MODE_FULL = 'full';
    const POE_MODE_HIGH = 'high';
    const POE_MODE_LOW = 'low';
    const FREQUENCY_HANDOFF_ENABLE = 'enable';
    const FREQUENCY_HANDOFF_DISABLE = 'disable';
    const AP_HANDOFF_ENABLE = 'enable';
    const AP_HANDOFF_DISABLE = 'disable';
    const EXT_INFO_ENABLE_ENABLE = 'enable';
    const EXT_INFO_ENABLE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getControlMessageOffloadAllowableValues()
    {
        return [
            self::CONTROL_MESSAGE_OFFLOAD_EBP_FRAME,
            self::CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_TAG,
            self::CONTROL_MESSAGE_OFFLOAD_AP_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STA_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STA_CAP_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STATS,
            self::CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_MU,
            self::CONTROL_MESSAGE_OFFLOAD_STA_HEALTH,
            self::CONTROL_MESSAGE_OFFLOAD_SPECTRAL_ANALYSIS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWanPortModeAllowableValues()
    {
        return [
            self::WAN_PORT_MODE_LAN,
            self::WAN_PORT_MODE_ONLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnergyEfficientEthernetAllowableValues()
    {
        return [
            self::ENERGY_EFFICIENT_ETHERNET_ENABLE,
            self::ENERGY_EFFICIENT_ETHERNET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLedStateAllowableValues()
    {
        return [
            self::LED_STATE_ENABLE,
            self::LED_STATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDtlsPolicyAllowableValues()
    {
        return [
            self::DTLS_POLICY_CLEAR_TEXT,
            self::DTLS_POLICY_DTLS_ENABLED,
            self::DTLS_POLICY_IPSEC_VPN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDtlsInKernelAllowableValues()
    {
        return [
            self::DTLS_IN_KERNEL_ENABLE,
            self::DTLS_IN_KERNEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandoffRoamingAllowableValues()
    {
        return [
            self::HANDOFF_ROAMING_ENABLE,
            self::HANDOFF_ROAMING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApCountryAllowableValues()
    {
        return [
            self::AP_COUNTRY_NA,
            self::AP_COUNTRY_AF,
            self::AP_COUNTRY_AL,
            self::AP_COUNTRY_DZ,
            self::AP_COUNTRY__AS,
            self::AP_COUNTRY_AO,
            self::AP_COUNTRY_AR,
            self::AP_COUNTRY_AM,
            self::AP_COUNTRY_AU,
            self::AP_COUNTRY_AT,
            self::AP_COUNTRY_AZ,
            self::AP_COUNTRY_BS,
            self::AP_COUNTRY_BH,
            self::AP_COUNTRY_BD,
            self::AP_COUNTRY_BB,
            self::AP_COUNTRY_BY,
            self::AP_COUNTRY_BE,
            self::AP_COUNTRY_BZ,
            self::AP_COUNTRY_BJ,
            self::AP_COUNTRY_BM,
            self::AP_COUNTRY_BT,
            self::AP_COUNTRY_BO,
            self::AP_COUNTRY_BA,
            self::AP_COUNTRY_BW,
            self::AP_COUNTRY_BR,
            self::AP_COUNTRY_BN,
            self::AP_COUNTRY_BG,
            self::AP_COUNTRY_BF,
            self::AP_COUNTRY_KH,
            self::AP_COUNTRY_CM,
            self::AP_COUNTRY_KY,
            self::AP_COUNTRY_CF,
            self::AP_COUNTRY_TD,
            self::AP_COUNTRY_CL,
            self::AP_COUNTRY_CN,
            self::AP_COUNTRY_CX,
            self::AP_COUNTRY_CO,
            self::AP_COUNTRY_CR,
            self::AP_COUNTRY_HR,
            self::AP_COUNTRY_CY,
            self::AP_COUNTRY_CZ,
            self::AP_COUNTRY_DK,
            self::AP_COUNTRY_DM,
            self::AP_COUNTRY__DO,
            self::AP_COUNTRY_EC,
            self::AP_COUNTRY_EG,
            self::AP_COUNTRY_SV,
            self::AP_COUNTRY_ET,
            self::AP_COUNTRY_EE,
            self::AP_COUNTRY_GF,
            self::AP_COUNTRY_PF,
            self::AP_COUNTRY_FO,
            self::AP_COUNTRY_FI,
            self::AP_COUNTRY_FR,
            self::AP_COUNTRY_GE,
            self::AP_COUNTRY_DE,
            self::AP_COUNTRY_GH,
            self::AP_COUNTRY_GI,
            self::AP_COUNTRY_GR,
            self::AP_COUNTRY_GL,
            self::AP_COUNTRY_GD,
            self::AP_COUNTRY_GP,
            self::AP_COUNTRY_GU,
            self::AP_COUNTRY_GT,
            self::AP_COUNTRY_GY,
            self::AP_COUNTRY_HT,
            self::AP_COUNTRY_HN,
            self::AP_COUNTRY_HK,
            self::AP_COUNTRY_HU,
            self::AP_COUNTRY_IS,
            self::AP_COUNTRY_IN,
            self::AP_COUNTRY_ID,
            self::AP_COUNTRY_IR,
            self::AP_COUNTRY_IE,
            self::AP_COUNTRY_IM,
            self::AP_COUNTRY_IL,
            self::AP_COUNTRY_IT,
            self::AP_COUNTRY_CI,
            self::AP_COUNTRY_JM,
            self::AP_COUNTRY_JO,
            self::AP_COUNTRY_KZ,
            self::AP_COUNTRY_KE,
            self::AP_COUNTRY_KP,
            self::AP_COUNTRY_KR,
            self::AP_COUNTRY_KW,
            self::AP_COUNTRY_LA,
            self::AP_COUNTRY_LV,
            self::AP_COUNTRY_LB,
            self::AP_COUNTRY_LS,
            self::AP_COUNTRY_LY,
            self::AP_COUNTRY_LI,
            self::AP_COUNTRY_LT,
            self::AP_COUNTRY_LU,
            self::AP_COUNTRY_MO,
            self::AP_COUNTRY_MK,
            self::AP_COUNTRY_MG,
            self::AP_COUNTRY_MW,
            self::AP_COUNTRY_MY,
            self::AP_COUNTRY_MV,
            self::AP_COUNTRY_ML,
            self::AP_COUNTRY_MT,
            self::AP_COUNTRY_MH,
            self::AP_COUNTRY_MQ,
            self::AP_COUNTRY_MU,
            self::AP_COUNTRY_YT,
            self::AP_COUNTRY_MX,
            self::AP_COUNTRY_FM,
            self::AP_COUNTRY_MD,
            self::AP_COUNTRY_MC,
            self::AP_COUNTRY_MA,
            self::AP_COUNTRY_MZ,
            self::AP_COUNTRY_MM,
            self::AP_COUNTRY_NP,
            self::AP_COUNTRY_NL,
            self::AP_COUNTRY_AN,
            self::AP_COUNTRY_AW,
            self::AP_COUNTRY_NZ,
            self::AP_COUNTRY_NI,
            self::AP_COUNTRY_NE,
            self::AP_COUNTRY_NO,
            self::AP_COUNTRY_MP,
            self::AP_COUNTRY_OM,
            self::AP_COUNTRY_PK,
            self::AP_COUNTRY_PW,
            self::AP_COUNTRY_PA,
            self::AP_COUNTRY_PG,
            self::AP_COUNTRY_PY,
            self::AP_COUNTRY_PE,
            self::AP_COUNTRY_PH,
            self::AP_COUNTRY_PL,
            self::AP_COUNTRY_PT,
            self::AP_COUNTRY_PR,
            self::AP_COUNTRY_QA,
            self::AP_COUNTRY_RE,
            self::AP_COUNTRY_RO,
            self::AP_COUNTRY_RU,
            self::AP_COUNTRY_RW,
            self::AP_COUNTRY_BL,
            self::AP_COUNTRY_KN,
            self::AP_COUNTRY_LC,
            self::AP_COUNTRY_MF,
            self::AP_COUNTRY_PM,
            self::AP_COUNTRY_VC,
            self::AP_COUNTRY_SA,
            self::AP_COUNTRY_SN,
            self::AP_COUNTRY_RS,
            self::AP_COUNTRY_ME,
            self::AP_COUNTRY_SL,
            self::AP_COUNTRY_SG,
            self::AP_COUNTRY_SK,
            self::AP_COUNTRY_SI,
            self::AP_COUNTRY_ZA,
            self::AP_COUNTRY_ES,
            self::AP_COUNTRY_LK,
            self::AP_COUNTRY_SE,
            self::AP_COUNTRY_SD,
            self::AP_COUNTRY_SR,
            self::AP_COUNTRY_CH,
            self::AP_COUNTRY_SY,
            self::AP_COUNTRY_TW,
            self::AP_COUNTRY_TZ,
            self::AP_COUNTRY_TH,
            self::AP_COUNTRY_TG,
            self::AP_COUNTRY_TT,
            self::AP_COUNTRY_TN,
            self::AP_COUNTRY_TR,
            self::AP_COUNTRY_TM,
            self::AP_COUNTRY_AE,
            self::AP_COUNTRY_TC,
            self::AP_COUNTRY_UG,
            self::AP_COUNTRY_UA,
            self::AP_COUNTRY_GB,
            self::AP_COUNTRY_US,
            self::AP_COUNTRY_PS,
            self::AP_COUNTRY_UY,
            self::AP_COUNTRY_UZ,
            self::AP_COUNTRY_VU,
            self::AP_COUNTRY_VE,
            self::AP_COUNTRY_VN,
            self::AP_COUNTRY_VI,
            self::AP_COUNTRY_WF,
            self::AP_COUNTRY_YE,
            self::AP_COUNTRY_ZB,
            self::AP_COUNTRY_ZW,
            self::AP_COUNTRY_JP,
            self::AP_COUNTRY_CA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpFragmentPreventingAllowableValues()
    {
        return [
            self::IP_FRAGMENT_PREVENTING_TCP_MSS_ADJUST,
            self::IP_FRAGMENT_PREVENTING_ICMP_UNREACHABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAclPathAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ACL_PATH_TUNNEL,
            self::SPLIT_TUNNELING_ACL_PATH_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAclLocalApSubnetAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_ENABLE,
            self::SPLIT_TUNNELING_ACL_LOCAL_AP_SUBNET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowaccessAllowableValues()
    {
        return [
            self::ALLOWACCESS_HTTPS,
            self::ALLOWACCESS_SSH,
            self::ALLOWACCESS_SNMP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoginPasswdChangeAllowableValues()
    {
        return [
            self::LOGIN_PASSWD_CHANGE_YES,
            self::LOGIN_PASSWD_CHANGE__DEFAULT,
            self::LOGIN_PASSWD_CHANGE_NO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpAllowableValues()
    {
        return [
            self::LLDP_ENABLE,
            self::LLDP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoeModeAllowableValues()
    {
        return [
            self::POE_MODE_AUTO,
            self::POE_MODE__8023AF,
            self::POE_MODE__8023AT,
            self::POE_MODE_POWER_ADAPTER,
            self::POE_MODE_FULL,
            self::POE_MODE_HIGH,
            self::POE_MODE_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyHandoffAllowableValues()
    {
        return [
            self::FREQUENCY_HANDOFF_ENABLE,
            self::FREQUENCY_HANDOFF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApHandoffAllowableValues()
    {
        return [
            self::AP_HANDOFF_ENABLE,
            self::AP_HANDOFF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtInfoEnableAllowableValues()
    {
        return [
            self::EXT_INFO_ENABLE_ENABLE,
            self::EXT_INFO_ENABLE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['platform'] = $data['platform'] ?? null;
        $this->container['control_message_offload'] = $data['control_message_offload'] ?? null;
        $this->container['apcfg_profile'] = $data['apcfg_profile'] ?? null;
        $this->container['ble_profile'] = $data['ble_profile'] ?? null;
        $this->container['wan_port_mode'] = $data['wan_port_mode'] ?? null;
        $this->container['lan'] = $data['lan'] ?? null;
        $this->container['energy_efficient_ethernet'] = $data['energy_efficient_ethernet'] ?? null;
        $this->container['led_state'] = $data['led_state'] ?? null;
        $this->container['led_schedules'] = $data['led_schedules'] ?? null;
        $this->container['dtls_policy'] = $data['dtls_policy'] ?? null;
        $this->container['dtls_in_kernel'] = $data['dtls_in_kernel'] ?? null;
        $this->container['max_clients'] = $data['max_clients'] ?? null;
        $this->container['handoff_rssi'] = $data['handoff_rssi'] ?? null;
        $this->container['handoff_sta_thresh'] = $data['handoff_sta_thresh'] ?? null;
        $this->container['handoff_roaming'] = $data['handoff_roaming'] ?? null;
        $this->container['deny_mac_list'] = $data['deny_mac_list'] ?? null;
        $this->container['ap_country'] = $data['ap_country'] ?? null;
        $this->container['ip_fragment_preventing'] = $data['ip_fragment_preventing'] ?? null;
        $this->container['tun_mtu_uplink'] = $data['tun_mtu_uplink'] ?? null;
        $this->container['tun_mtu_downlink'] = $data['tun_mtu_downlink'] ?? null;
        $this->container['split_tunneling_acl_path'] = $data['split_tunneling_acl_path'] ?? null;
        $this->container['split_tunneling_acl_local_ap_subnet'] = $data['split_tunneling_acl_local_ap_subnet'] ?? null;
        $this->container['split_tunneling_acl'] = $data['split_tunneling_acl'] ?? null;
        $this->container['allowaccess'] = $data['allowaccess'] ?? null;
        $this->container['login_passwd_change'] = $data['login_passwd_change'] ?? null;
        $this->container['login_passwd'] = $data['login_passwd'] ?? null;
        $this->container['lldp'] = $data['lldp'] ?? null;
        $this->container['poe_mode'] = $data['poe_mode'] ?? null;
        $this->container['frequency_handoff'] = $data['frequency_handoff'] ?? null;
        $this->container['ap_handoff'] = $data['ap_handoff'] ?? null;
        $this->container['radio_1'] = $data['radio_1'] ?? null;
        $this->container['radio_2'] = $data['radio_2'] ?? null;
        $this->container['radio_3'] = $data['radio_3'] ?? null;
        $this->container['radio_4'] = $data['radio_4'] ?? null;
        $this->container['lbs'] = $data['lbs'] ?? null;
        $this->container['ext_info_enable'] = $data['ext_info_enable'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['platform']) && (count($this->container['platform']) > 0)) {
            $invalidProperties[] = "invalid value for 'platform', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getControlMessageOffloadAllowableValues();
        if (!is_null($this->container['control_message_offload']) && !in_array($this->container['control_message_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'control_message_offload', must be one of '%s'",
                $this->container['control_message_offload'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['apcfg_profile']) && (mb_strlen($this->container['apcfg_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'apcfg_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ble_profile']) && (mb_strlen($this->container['ble_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'ble_profile', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getWanPortModeAllowableValues();
        if (!is_null($this->container['wan_port_mode']) && !in_array($this->container['wan_port_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wan_port_mode', must be one of '%s'",
                $this->container['wan_port_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lan']) && (count($this->container['lan']) > 0)) {
            $invalidProperties[] = "invalid value for 'lan', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getEnergyEfficientEthernetAllowableValues();
        if (!is_null($this->container['energy_efficient_ethernet']) && !in_array($this->container['energy_efficient_ethernet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'energy_efficient_ethernet', must be one of '%s'",
                $this->container['energy_efficient_ethernet'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLedStateAllowableValues();
        if (!is_null($this->container['led_state']) && !in_array($this->container['led_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'led_state', must be one of '%s'",
                $this->container['led_state'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['led_schedules']) && (count($this->container['led_schedules']) > 16)) {
            $invalidProperties[] = "invalid value for 'led_schedules', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getDtlsPolicyAllowableValues();
        if (!is_null($this->container['dtls_policy']) && !in_array($this->container['dtls_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dtls_policy', must be one of '%s'",
                $this->container['dtls_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDtlsInKernelAllowableValues();
        if (!is_null($this->container['dtls_in_kernel']) && !in_array($this->container['dtls_in_kernel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dtls_in_kernel', must be one of '%s'",
                $this->container['dtls_in_kernel'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['handoff_rssi']) && ($this->container['handoff_rssi'] > 30)) {
            $invalidProperties[] = "invalid value for 'handoff_rssi', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['handoff_rssi']) && ($this->container['handoff_rssi'] < 20)) {
            $invalidProperties[] = "invalid value for 'handoff_rssi', must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['handoff_sta_thresh']) && ($this->container['handoff_sta_thresh'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'handoff_sta_thresh', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['handoff_sta_thresh']) && ($this->container['handoff_sta_thresh'] < 0)) {
            $invalidProperties[] = "invalid value for 'handoff_sta_thresh', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getHandoffRoamingAllowableValues();
        if (!is_null($this->container['handoff_roaming']) && !in_array($this->container['handoff_roaming'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'handoff_roaming', must be one of '%s'",
                $this->container['handoff_roaming'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['deny_mac_list']) && (count($this->container['deny_mac_list']) > 256)) {
            $invalidProperties[] = "invalid value for 'deny_mac_list', number of items must be less than or equal to 256.";
        }

        $allowedValues = $this->getApCountryAllowableValues();
        if (!is_null($this->container['ap_country']) && !in_array($this->container['ap_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_country', must be one of '%s'",
                $this->container['ap_country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpFragmentPreventingAllowableValues();
        if (!is_null($this->container['ip_fragment_preventing']) && !in_array($this->container['ip_fragment_preventing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_fragment_preventing', must be one of '%s'",
                $this->container['ip_fragment_preventing'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tun_mtu_uplink']) && ($this->container['tun_mtu_uplink'] > 1500)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_uplink', must be smaller than or equal to 1500.";
        }

        if (!is_null($this->container['tun_mtu_uplink']) && ($this->container['tun_mtu_uplink'] < 576)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_uplink', must be bigger than or equal to 576.";
        }

        if (!is_null($this->container['tun_mtu_downlink']) && ($this->container['tun_mtu_downlink'] > 1500)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_downlink', must be smaller than or equal to 1500.";
        }

        if (!is_null($this->container['tun_mtu_downlink']) && ($this->container['tun_mtu_downlink'] < 576)) {
            $invalidProperties[] = "invalid value for 'tun_mtu_downlink', must be bigger than or equal to 576.";
        }

        $allowedValues = $this->getSplitTunnelingAclPathAllowableValues();
        if (!is_null($this->container['split_tunneling_acl_path']) && !in_array($this->container['split_tunneling_acl_path'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling_acl_path', must be one of '%s'",
                $this->container['split_tunneling_acl_path'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSplitTunnelingAclLocalApSubnetAllowableValues();
        if (!is_null($this->container['split_tunneling_acl_local_ap_subnet']) && !in_array($this->container['split_tunneling_acl_local_ap_subnet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling_acl_local_ap_subnet', must be one of '%s'",
                $this->container['split_tunneling_acl_local_ap_subnet'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['split_tunneling_acl']) && (count($this->container['split_tunneling_acl']) > 16)) {
            $invalidProperties[] = "invalid value for 'split_tunneling_acl', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($this->container['allowaccess']) && !in_array($this->container['allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowaccess', must be one of '%s'",
                $this->container['allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoginPasswdChangeAllowableValues();
        if (!is_null($this->container['login_passwd_change']) && !in_array($this->container['login_passwd_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'login_passwd_change', must be one of '%s'",
                $this->container['login_passwd_change'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpAllowableValues();
        if (!is_null($this->container['lldp']) && !in_array($this->container['lldp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp', must be one of '%s'",
                $this->container['lldp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoeModeAllowableValues();
        if (!is_null($this->container['poe_mode']) && !in_array($this->container['poe_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_mode', must be one of '%s'",
                $this->container['poe_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFrequencyHandoffAllowableValues();
        if (!is_null($this->container['frequency_handoff']) && !in_array($this->container['frequency_handoff'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'frequency_handoff', must be one of '%s'",
                $this->container['frequency_handoff'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApHandoffAllowableValues();
        if (!is_null($this->container['ap_handoff']) && !in_array($this->container['ap_handoff'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_handoff', must be one of '%s'",
                $this->container['ap_handoff'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radio_1']) && (count($this->container['radio_1']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_1', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_2']) && (count($this->container['radio_2']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_2', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_3']) && (count($this->container['radio_3']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_3', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['radio_4']) && (count($this->container['radio_4']) > 0)) {
            $invalidProperties[] = "invalid value for 'radio_4', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['lbs']) && (count($this->container['lbs']) > 0)) {
            $invalidProperties[] = "invalid value for 'lbs', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getExtInfoEnableAllowableValues();
        if (!is_null($this->container['ext_info_enable']) && !in_array($this->container['ext_info_enable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ext_info_enable', must be one of '%s'",
                $this->container['ext_info_enable'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WTP (or FortiAP or AP) profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject619., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject619., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNamePlatform[]|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNamePlatform[]|null $platform WTP, FortiAP, or AP platform.
     *
     * @return self
     */
    public function setPlatform($platform)
    {

        if (!is_null($platform) && (count($platform) > 0)) {
            throw new \InvalidArgumentException('invalid value for $platform when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets control_message_offload
     *
     * @return string|null
     */
    public function getControlMessageOffload()
    {
        return $this->container['control_message_offload'];
    }

    /**
     * Sets control_message_offload
     *
     * @param string|null $control_message_offload Enable/disable CAPWAP control message data channel offload.    ebp-frame:Ekahau blink protocol (EBP) frames.    aeroscout-tag:AeroScout tag.    ap-list:Rogue AP list.    sta-list:Rogue STA list.    sta-cap-list:STA capability list.    stats:WTP, radio, VAP, and STA statistics.    aeroscout-mu:AeroScout Mobile Unit (MU) report.    sta-health:STA health log.    spectral-analysis:Spectral analysis report.
     *
     * @return self
     */
    public function setControlMessageOffload($control_message_offload)
    {
        $allowedValues = $this->getControlMessageOffloadAllowableValues();
        if (!is_null($control_message_offload) && !in_array($control_message_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'control_message_offload', must be one of '%s'",
                    $control_message_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['control_message_offload'] = $control_message_offload;

        return $this;
    }

    /**
     * Gets apcfg_profile
     *
     * @return string|null
     */
    public function getApcfgProfile()
    {
        return $this->container['apcfg_profile'];
    }

    /**
     * Sets apcfg_profile
     *
     * @param string|null $apcfg_profile AP local configuration profile name.
     *
     * @return self
     */
    public function setApcfgProfile($apcfg_profile)
    {
        if (!is_null($apcfg_profile) && (mb_strlen($apcfg_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $apcfg_profile when calling InlineObject619., must be smaller than or equal to 35.');
        }

        $this->container['apcfg_profile'] = $apcfg_profile;

        return $this;
    }

    /**
     * Gets ble_profile
     *
     * @return string|null
     */
    public function getBleProfile()
    {
        return $this->container['ble_profile'];
    }

    /**
     * Sets ble_profile
     *
     * @param string|null $ble_profile Bluetooth Low Energy profile name.
     *
     * @return self
     */
    public function setBleProfile($ble_profile)
    {
        if (!is_null($ble_profile) && (mb_strlen($ble_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ble_profile when calling InlineObject619., must be smaller than or equal to 35.');
        }

        $this->container['ble_profile'] = $ble_profile;

        return $this;
    }

    /**
     * Gets wan_port_mode
     *
     * @return string|null
     */
    public function getWanPortMode()
    {
        return $this->container['wan_port_mode'];
    }

    /**
     * Sets wan_port_mode
     *
     * @param string|null $wan_port_mode Enable/disable using a WAN port as a LAN port.    wan-lan:Enable using a WAN port as a LAN port.    wan-only:Disable using a WAN port as a LAN port.
     *
     * @return self
     */
    public function setWanPortMode($wan_port_mode)
    {
        $allowedValues = $this->getWanPortModeAllowableValues();
        if (!is_null($wan_port_mode) && !in_array($wan_port_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wan_port_mode', must be one of '%s'",
                    $wan_port_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wan_port_mode'] = $wan_port_mode;

        return $this;
    }

    /**
     * Gets lan
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]|null
     */
    public function getLan()
    {
        return $this->container['lan'];
    }

    /**
     * Sets lan
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdLan[]|null $lan WTP LAN port mapping.
     *
     * @return self
     */
    public function setLan($lan)
    {

        if (!is_null($lan) && (count($lan) > 0)) {
            throw new \InvalidArgumentException('invalid value for $lan when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['lan'] = $lan;

        return $this;
    }

    /**
     * Gets energy_efficient_ethernet
     *
     * @return string|null
     */
    public function getEnergyEfficientEthernet()
    {
        return $this->container['energy_efficient_ethernet'];
    }

    /**
     * Sets energy_efficient_ethernet
     *
     * @param string|null $energy_efficient_ethernet Enable/disable use of energy efficient Ethernet on WTP.    enable:Enable use of energy efficient Ethernet on WTP.    disable:Disable use of energy efficient Ethernet on WTP.
     *
     * @return self
     */
    public function setEnergyEfficientEthernet($energy_efficient_ethernet)
    {
        $allowedValues = $this->getEnergyEfficientEthernetAllowableValues();
        if (!is_null($energy_efficient_ethernet) && !in_array($energy_efficient_ethernet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'energy_efficient_ethernet', must be one of '%s'",
                    $energy_efficient_ethernet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['energy_efficient_ethernet'] = $energy_efficient_ethernet;

        return $this;
    }

    /**
     * Gets led_state
     *
     * @return string|null
     */
    public function getLedState()
    {
        return $this->container['led_state'];
    }

    /**
     * Sets led_state
     *
     * @param string|null $led_state Enable/disable use of LEDs on WTP (default = disable).    enable:Enable use of LEDs on WTP.    disable:Disable use of LEDs on WTP.
     *
     * @return self
     */
    public function setLedState($led_state)
    {
        $allowedValues = $this->getLedStateAllowableValues();
        if (!is_null($led_state) && !in_array($led_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'led_state', must be one of '%s'",
                    $led_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['led_state'] = $led_state;

        return $this;
    }

    /**
     * Gets led_schedules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null
     */
    public function getLedSchedules()
    {
        return $this->container['led_schedules'];
    }

    /**
     * Sets led_schedules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null $led_schedules Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space.
     *
     * @return self
     */
    public function setLedSchedules($led_schedules)
    {

        if (!is_null($led_schedules) && (count($led_schedules) > 16)) {
            throw new \InvalidArgumentException('invalid value for $led_schedules when calling InlineObject619., number of items must be less than or equal to 16.');
        }
        $this->container['led_schedules'] = $led_schedules;

        return $this;
    }

    /**
     * Gets dtls_policy
     *
     * @return string|null
     */
    public function getDtlsPolicy()
    {
        return $this->container['dtls_policy'];
    }

    /**
     * Sets dtls_policy
     *
     * @param string|null $dtls_policy WTP data channel DTLS policy (default = clear-text).    clear-text:Clear Text Data Channel.    dtls-enabled:DTLS Enabled Data Channel.    ipsec-vpn:IPsec VPN Data Channel.
     *
     * @return self
     */
    public function setDtlsPolicy($dtls_policy)
    {
        $allowedValues = $this->getDtlsPolicyAllowableValues();
        if (!is_null($dtls_policy) && !in_array($dtls_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dtls_policy', must be one of '%s'",
                    $dtls_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dtls_policy'] = $dtls_policy;

        return $this;
    }

    /**
     * Gets dtls_in_kernel
     *
     * @return string|null
     */
    public function getDtlsInKernel()
    {
        return $this->container['dtls_in_kernel'];
    }

    /**
     * Sets dtls_in_kernel
     *
     * @param string|null $dtls_in_kernel Enable/disable data channel DTLS in kernel.    enable:Enable data channel DTLS in kernel.    disable:Disable data channel DTLS in kernel.
     *
     * @return self
     */
    public function setDtlsInKernel($dtls_in_kernel)
    {
        $allowedValues = $this->getDtlsInKernelAllowableValues();
        if (!is_null($dtls_in_kernel) && !in_array($dtls_in_kernel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dtls_in_kernel', must be one of '%s'",
                    $dtls_in_kernel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dtls_in_kernel'] = $dtls_in_kernel;

        return $this;
    }

    /**
     * Gets max_clients
     *
     * @return int|null
     */
    public function getMaxClients()
    {
        return $this->container['max_clients'];
    }

    /**
     * Sets max_clients
     *
     * @param int|null $max_clients Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
     *
     * @return self
     */
    public function setMaxClients($max_clients)
    {

        if (!is_null($max_clients) && ($max_clients > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject619., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_clients) && ($max_clients < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject619., must be bigger than or equal to 0.');
        }

        $this->container['max_clients'] = $max_clients;

        return $this;
    }

    /**
     * Gets handoff_rssi
     *
     * @return int|null
     */
    public function getHandoffRssi()
    {
        return $this->container['handoff_rssi'];
    }

    /**
     * Sets handoff_rssi
     *
     * @param int|null $handoff_rssi Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
     *
     * @return self
     */
    public function setHandoffRssi($handoff_rssi)
    {

        if (!is_null($handoff_rssi) && ($handoff_rssi > 30)) {
            throw new \InvalidArgumentException('invalid value for $handoff_rssi when calling InlineObject619., must be smaller than or equal to 30.');
        }
        if (!is_null($handoff_rssi) && ($handoff_rssi < 20)) {
            throw new \InvalidArgumentException('invalid value for $handoff_rssi when calling InlineObject619., must be bigger than or equal to 20.');
        }

        $this->container['handoff_rssi'] = $handoff_rssi;

        return $this;
    }

    /**
     * Gets handoff_sta_thresh
     *
     * @return int|null
     */
    public function getHandoffStaThresh()
    {
        return $this->container['handoff_sta_thresh'];
    }

    /**
     * Sets handoff_sta_thresh
     *
     * @param int|null $handoff_sta_thresh Threshold value for AP handoff.
     *
     * @return self
     */
    public function setHandoffStaThresh($handoff_sta_thresh)
    {

        if (!is_null($handoff_sta_thresh) && ($handoff_sta_thresh > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $handoff_sta_thresh when calling InlineObject619., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($handoff_sta_thresh) && ($handoff_sta_thresh < 0)) {
            throw new \InvalidArgumentException('invalid value for $handoff_sta_thresh when calling InlineObject619., must be bigger than or equal to 0.');
        }

        $this->container['handoff_sta_thresh'] = $handoff_sta_thresh;

        return $this;
    }

    /**
     * Gets handoff_roaming
     *
     * @return string|null
     */
    public function getHandoffRoaming()
    {
        return $this->container['handoff_roaming'];
    }

    /**
     * Sets handoff_roaming
     *
     * @param string|null $handoff_roaming Enable/disable client load balancing during roaming to avoid roaming delay (default = disable).    enable:Enable handoff roaming.    disable:Disable handoff roaming.
     *
     * @return self
     */
    public function setHandoffRoaming($handoff_roaming)
    {
        $allowedValues = $this->getHandoffRoamingAllowableValues();
        if (!is_null($handoff_roaming) && !in_array($handoff_roaming, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'handoff_roaming', must be one of '%s'",
                    $handoff_roaming,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handoff_roaming'] = $handoff_roaming;

        return $this;
    }

    /**
     * Gets deny_mac_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameDenyMacList[]|null
     */
    public function getDenyMacList()
    {
        return $this->container['deny_mac_list'];
    }

    /**
     * Sets deny_mac_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameDenyMacList[]|null $deny_mac_list List of MAC addresses that are denied access to this WTP, FortiAP, or AP.
     *
     * @return self
     */
    public function setDenyMacList($deny_mac_list)
    {

        if (!is_null($deny_mac_list) && (count($deny_mac_list) > 256)) {
            throw new \InvalidArgumentException('invalid value for $deny_mac_list when calling InlineObject619., number of items must be less than or equal to 256.');
        }
        $this->container['deny_mac_list'] = $deny_mac_list;

        return $this;
    }

    /**
     * Gets ap_country
     *
     * @return string|null
     */
    public function getApCountry()
    {
        return $this->container['ap_country'];
    }

    /**
     * Sets ap_country
     *
     * @param string|null $ap_country Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).    NA:NO_COUNTRY_SET    AF:AFGHANISTAN    AL:ALBANIA    DZ:ALGERIA    AS:AMERICAN SAMOA    AO:ANGOLA    AR:ARGENTINA    AM:ARMENIA    AU:AUSTRALIA    AT:AUSTRIA    AZ:AZERBAIJAN    BS:BAHAMAS    BH:BAHRAIN    BD:BANGLADESH    BB:BARBADOS    BY:BELARUS    BE:BELGIUM    BZ:BELIZE    BJ:BENIN    BM:BERMUDA    BT:BHUTAN    BO:BOLIVIA    BA:BOSNIA AND HERZEGOVINA    BW:BOTSWANA    BR:BRAZIL    BN:BRUNEI DARUSSALAM    BG:BULGARIA    BF:BURKINA-FASO    KH:CAMBODIA    CM:CAMEROON    KY:CAYMAN ISLANDS    CF:CENTRAL AFRICA REPUBLIC    TD:CHAD      CL:CHILE    CN:CHINA    CX:CHRISTMAS ISLAND    CO:COLOMBIA    CR:COSTA RICA    HR:CROATIA    CY:CYPRUS    CZ:CZECH REPUBLIC    DK:DENMARK    DM:DOMINICA    DO:DOMINICAN REPUBLIC    EC:ECUADOR    EG:EGYPT    SV:EL SALVADOR    ET:ETHIOPIA    EE:ESTONIA    GF:FRENCH GUIANA    PF:FRENCH POLYNESIA    FO:FAEROE ISLANDS    FI:FINLAND    FR:FRANCE    GE:GEORGIA    DE:GERMANY    GH:GHANA    GI:GIBRALTAR    GR:GREECE    GL:GREENLAND    GD:GRENADA    GP:GUADELOUPE    GU:GUAM    GT:GUATEMALA    GY:GUYANA    HT:HAITI    HN:HONDURAS    HK:HONG KONG    HU:HUNGARY    IS:ICELAND    IN:INDIA    ID:INDONESIA    IR:IRAN    IE:IRELAND    IM:ISLE OF MAN    IL:ISRAEL    IT:ITALY    CI:COTE_D_IVOIRE    JM:JAMAICA    JO:JORDAN    KZ:KAZAKHSTAN    KE:KENYA    KP:NORTH KOREA    KR:KOREA REPUBLIC    KW:KUWAIT    LA:LAOS    LV:LATVIA    LB:LEBANON    LS:LESOTHO    LY:LIBYA    LI:LIECHTENSTEIN    LT:LITHUANIA    LU:LUXEMBOURG    MO:MACAU SAR    MK:MACEDONIA, FYRO    MG:MADAGASCAR    MW:MALAWI    MY:MALAYSIA    MV:MALDIVES    ML:MALI    MT:MALTA    MH:MARSHALL ISLANDS    MQ:MARTINIQUE    MU:MAURITIUS    YT:MAYOTTE    MX:MEXICO    FM:MICRONESIA    MD:REPUBLIC OF MOLDOVA    MC:MONACO    MA:MOROCCO    MZ:MOZAMBIQUE    MM:MYANMAR    NP:NEPAL    NL:NETHERLANDS    AN:NETHERLANDS ANTILLES    AW:ARUBA    NZ:NEW ZEALAND    NI:NICARAGUA    NE:NIGER    NO:NORWAY    MP:NORTHERN MARIANA ISLANDS    OM:OMAN    PK:PAKISTAN    PW:PALAU    PA:PANAMA    PG:PAPUA NEW GUINEA    PY:PARAGUAY    PE:PERU    PH:PHILIPPINES    PL:POLAND    PT:PORTUGAL    PR:PUERTO RICO    QA:QATAR    RE:REUNION    RO:ROMANIA    RU:RUSSIA    RW:RWANDA    BL:SAINT BARTHELEMY    KN:SAINT KITTS AND NEVIS    LC:SAINT LUCIA    MF:SAINT MARTIN    PM:SAINT PIERRE AND MIQUELON    VC:SAINT VINCENT AND GRENADIENS    SA:SAUDI ARABIA    SN:SENEGAL    RS:REPUBLIC OF SERBIA    ME:MONTENEGRO    SL:SIERRA LEONE    SG:SINGAPORE    SK:SLOVAKIA    SI:SLOVENIA    ZA:SOUTH AFRICA    ES:SPAIN    LK:SRI LANKA    SE:SWEDEN    SD:SUDAN    SR:SURINAME    CH:SWITZERLAND    SY:SYRIAN ARAB REPUBLIC    TW:TAIWAN    TZ:TANZANIA    TH:THAILAND    TG:TOGO    TT:TRINIDAD AND TOBAGO    TN:TUNISIA    TR:TURKEY    TM:TURKMENISTAN    AE:UNITED ARAB EMIRATES    TC:TURKS AND CAICOS    UG:UGANDA    UA:UKRAINE    GB:UNITED KINGDOM    US:UNITED STATES2    PS:UNITED STATES (PUBLIC SAFETY)    UY:URUGUAY    UZ:UZBEKISTAN    VU:VANUATU    VE:VENEZUELA    VN:VIET NAM    VI:VIRGIN ISLANDS    WF:WALLIS AND FUTUNA    YE:YEMEN    ZB:ZAMBIA    ZW:ZIMBABWE    JP:JAPAN14    CA:CANADA2
     *
     * @return self
     */
    public function setApCountry($ap_country)
    {
        $allowedValues = $this->getApCountryAllowableValues();
        if (!is_null($ap_country) && !in_array($ap_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_country', must be one of '%s'",
                    $ap_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_country'] = $ap_country;

        return $this;
    }

    /**
     * Gets ip_fragment_preventing
     *
     * @return string|null
     */
    public function getIpFragmentPreventing()
    {
        return $this->container['ip_fragment_preventing'];
    }

    /**
     * Sets ip_fragment_preventing
     *
     * @param string|null $ip_fragment_preventing Method(s) by which IP fragmentation is prevented for control and data packets through CAPWAP tunnel (default = tcp-mss-adjust).    tcp-mss-adjust:TCP maximum segment size adjustment.    icmp-unreachable:Drop packet and send ICMP Destination Unreachable
     *
     * @return self
     */
    public function setIpFragmentPreventing($ip_fragment_preventing)
    {
        $allowedValues = $this->getIpFragmentPreventingAllowableValues();
        if (!is_null($ip_fragment_preventing) && !in_array($ip_fragment_preventing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_fragment_preventing', must be one of '%s'",
                    $ip_fragment_preventing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_fragment_preventing'] = $ip_fragment_preventing;

        return $this;
    }

    /**
     * Gets tun_mtu_uplink
     *
     * @return int|null
     */
    public function getTunMtuUplink()
    {
        return $this->container['tun_mtu_uplink'];
    }

    /**
     * Sets tun_mtu_uplink
     *
     * @param int|null $tun_mtu_uplink The maximum transmission unit (MTU) of uplink CAPWAP tunnel (576 - 1500 bytes or 0; 0 means the local MTU of FortiAP; default = 0).
     *
     * @return self
     */
    public function setTunMtuUplink($tun_mtu_uplink)
    {

        if (!is_null($tun_mtu_uplink) && ($tun_mtu_uplink > 1500)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_uplink when calling InlineObject619., must be smaller than or equal to 1500.');
        }
        if (!is_null($tun_mtu_uplink) && ($tun_mtu_uplink < 576)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_uplink when calling InlineObject619., must be bigger than or equal to 576.');
        }

        $this->container['tun_mtu_uplink'] = $tun_mtu_uplink;

        return $this;
    }

    /**
     * Gets tun_mtu_downlink
     *
     * @return int|null
     */
    public function getTunMtuDownlink()
    {
        return $this->container['tun_mtu_downlink'];
    }

    /**
     * Sets tun_mtu_downlink
     *
     * @param int|null $tun_mtu_downlink The MTU of downlink CAPWAP tunnel (576 - 1500 bytes or 0; 0 means the local MTU of FortiAP; default = 0).
     *
     * @return self
     */
    public function setTunMtuDownlink($tun_mtu_downlink)
    {

        if (!is_null($tun_mtu_downlink) && ($tun_mtu_downlink > 1500)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_downlink when calling InlineObject619., must be smaller than or equal to 1500.');
        }
        if (!is_null($tun_mtu_downlink) && ($tun_mtu_downlink < 576)) {
            throw new \InvalidArgumentException('invalid value for $tun_mtu_downlink when calling InlineObject619., must be bigger than or equal to 576.');
        }

        $this->container['tun_mtu_downlink'] = $tun_mtu_downlink;

        return $this;
    }

    /**
     * Gets split_tunneling_acl_path
     *
     * @return string|null
     */
    public function getSplitTunnelingAclPath()
    {
        return $this->container['split_tunneling_acl_path'];
    }

    /**
     * Sets split_tunneling_acl_path
     *
     * @param string|null $split_tunneling_acl_path Split tunneling ACL path is local/tunnel.    tunnel:Split tunneling ACL list traffic will be tunnel.    local:Split tunneling ACL list traffic will be local NATed.
     *
     * @return self
     */
    public function setSplitTunnelingAclPath($split_tunneling_acl_path)
    {
        $allowedValues = $this->getSplitTunnelingAclPathAllowableValues();
        if (!is_null($split_tunneling_acl_path) && !in_array($split_tunneling_acl_path, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling_acl_path', must be one of '%s'",
                    $split_tunneling_acl_path,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling_acl_path'] = $split_tunneling_acl_path;

        return $this;
    }

    /**
     * Gets split_tunneling_acl_local_ap_subnet
     *
     * @return string|null
     */
    public function getSplitTunnelingAclLocalApSubnet()
    {
        return $this->container['split_tunneling_acl_local_ap_subnet'];
    }

    /**
     * Sets split_tunneling_acl_local_ap_subnet
     *
     * @param string|null $split_tunneling_acl_local_ap_subnet Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable).    enable:Enable automatically adding local subnetwork of FortiAP to split-tunneling ACL.    disable:Disable automatically adding local subnetwork of FortiAP to split-tunneling ACL.
     *
     * @return self
     */
    public function setSplitTunnelingAclLocalApSubnet($split_tunneling_acl_local_ap_subnet)
    {
        $allowedValues = $this->getSplitTunnelingAclLocalApSubnetAllowableValues();
        if (!is_null($split_tunneling_acl_local_ap_subnet) && !in_array($split_tunneling_acl_local_ap_subnet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling_acl_local_ap_subnet', must be one of '%s'",
                    $split_tunneling_acl_local_ap_subnet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling_acl_local_ap_subnet'] = $split_tunneling_acl_local_ap_subnet;

        return $this;
    }

    /**
     * Gets split_tunneling_acl
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]|null
     */
    public function getSplitTunnelingAcl()
    {
        return $this->container['split_tunneling_acl'];
    }

    /**
     * Sets split_tunneling_acl
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdSplitTunnelingAcl[]|null $split_tunneling_acl Split tunneling ACL filter list.
     *
     * @return self
     */
    public function setSplitTunnelingAcl($split_tunneling_acl)
    {

        if (!is_null($split_tunneling_acl) && (count($split_tunneling_acl) > 16)) {
            throw new \InvalidArgumentException('invalid value for $split_tunneling_acl when calling InlineObject619., number of items must be less than or equal to 16.');
        }
        $this->container['split_tunneling_acl'] = $split_tunneling_acl;

        return $this;
    }

    /**
     * Gets allowaccess
     *
     * @return string|null
     */
    public function getAllowaccess()
    {
        return $this->container['allowaccess'];
    }

    /**
     * Sets allowaccess
     *
     * @param string|null $allowaccess Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.
     *
     * @return self
     */
    public function setAllowaccess($allowaccess)
    {
        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($allowaccess) && !in_array($allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowaccess', must be one of '%s'",
                    $allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowaccess'] = $allowaccess;

        return $this;
    }

    /**
     * Gets login_passwd_change
     *
     * @return string|null
     */
    public function getLoginPasswdChange()
    {
        return $this->container['login_passwd_change'];
    }

    /**
     * Sets login_passwd_change
     *
     * @param string|null $login_passwd_change Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no).    yes:Change the managed WTP, FortiAP or AP's administrator password. Use the login-password option to set the password.    default:Keep the managed WTP, FortiAP or AP's administrator password set to the factory default.    no:Do not change the managed WTP, FortiAP or AP's administrator password.
     *
     * @return self
     */
    public function setLoginPasswdChange($login_passwd_change)
    {
        $allowedValues = $this->getLoginPasswdChangeAllowableValues();
        if (!is_null($login_passwd_change) && !in_array($login_passwd_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'login_passwd_change', must be one of '%s'",
                    $login_passwd_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['login_passwd_change'] = $login_passwd_change;

        return $this;
    }

    /**
     * Gets login_passwd
     *
     * @return string|null
     */
    public function getLoginPasswd()
    {
        return $this->container['login_passwd'];
    }

    /**
     * Sets login_passwd
     *
     * @param string|null $login_passwd Set the managed WTP, FortiAP, or AP's administrator password.
     *
     * @return self
     */
    public function setLoginPasswd($login_passwd)
    {
        $this->container['login_passwd'] = $login_passwd;

        return $this;
    }

    /**
     * Gets lldp
     *
     * @return string|null
     */
    public function getLldp()
    {
        return $this->container['lldp'];
    }

    /**
     * Sets lldp
     *
     * @param string|null $lldp Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = enable).    enable:Enable LLDP.    disable:Disable LLDP.
     *
     * @return self
     */
    public function setLldp($lldp)
    {
        $allowedValues = $this->getLldpAllowableValues();
        if (!is_null($lldp) && !in_array($lldp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp', must be one of '%s'",
                    $lldp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp'] = $lldp;

        return $this;
    }

    /**
     * Gets poe_mode
     *
     * @return string|null
     */
    public function getPoeMode()
    {
        return $this->container['poe_mode'];
    }

    /**
     * Sets poe_mode
     *
     * @param string|null $poe_mode Set the WTP, FortiAP, or AP's PoE mode.    auto:Automatically detect the PoE mode.    8023af:Use 802.3af PoE mode.    8023at:Use 802.3at PoE mode.    power-adapter:Use the power adapter to control the PoE mode.    full:Use full power mode.    high:Use high power mode.    low:Use low power mode.
     *
     * @return self
     */
    public function setPoeMode($poe_mode)
    {
        $allowedValues = $this->getPoeModeAllowableValues();
        if (!is_null($poe_mode) && !in_array($poe_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_mode', must be one of '%s'",
                    $poe_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_mode'] = $poe_mode;

        return $this;
    }

    /**
     * Gets frequency_handoff
     *
     * @return string|null
     */
    public function getFrequencyHandoff()
    {
        return $this->container['frequency_handoff'];
    }

    /**
     * Sets frequency_handoff
     *
     * @param string|null $frequency_handoff Enable/disable frequency handoff of clients to other channels (default = disable).    enable:Enable frequency handoff.    disable:Disable frequency handoff.
     *
     * @return self
     */
    public function setFrequencyHandoff($frequency_handoff)
    {
        $allowedValues = $this->getFrequencyHandoffAllowableValues();
        if (!is_null($frequency_handoff) && !in_array($frequency_handoff, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'frequency_handoff', must be one of '%s'",
                    $frequency_handoff,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency_handoff'] = $frequency_handoff;

        return $this;
    }

    /**
     * Gets ap_handoff
     *
     * @return string|null
     */
    public function getApHandoff()
    {
        return $this->container['ap_handoff'];
    }

    /**
     * Sets ap_handoff
     *
     * @param string|null $ap_handoff Enable/disable AP handoff of clients to other APs (default = disable).    enable:Enable AP handoff.    disable:Disable AP handoff.
     *
     * @return self
     */
    public function setApHandoff($ap_handoff)
    {
        $allowedValues = $this->getApHandoffAllowableValues();
        if (!is_null($ap_handoff) && !in_array($ap_handoff, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_handoff', must be one of '%s'",
                    $ap_handoff,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_handoff'] = $ap_handoff;

        return $this;
    }

    /**
     * Gets radio_1
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio1[]|null
     */
    public function getRadio1()
    {
        return $this->container['radio_1'];
    }

    /**
     * Sets radio_1
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio1[]|null $radio_1 Configuration options for radio 1.
     *
     * @return self
     */
    public function setRadio1($radio_1)
    {

        if (!is_null($radio_1) && (count($radio_1) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_1 when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['radio_1'] = $radio_1;

        return $this;
    }

    /**
     * Gets radio_2
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio2[]|null
     */
    public function getRadio2()
    {
        return $this->container['radio_2'];
    }

    /**
     * Sets radio_2
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio2[]|null $radio_2 Configuration options for radio 2.
     *
     * @return self
     */
    public function setRadio2($radio_2)
    {

        if (!is_null($radio_2) && (count($radio_2) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_2 when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['radio_2'] = $radio_2;

        return $this;
    }

    /**
     * Gets radio_3
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]|null
     */
    public function getRadio3()
    {
        return $this->container['radio_3'];
    }

    /**
     * Sets radio_3
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]|null $radio_3 Configuration options for radio 3.
     *
     * @return self
     */
    public function setRadio3($radio_3)
    {

        if (!is_null($radio_3) && (count($radio_3) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_3 when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['radio_3'] = $radio_3;

        return $this;
    }

    /**
     * Gets radio_4
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]|null
     */
    public function getRadio4()
    {
        return $this->container['radio_4'];
    }

    /**
     * Sets radio_4
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameRadio3[]|null $radio_4 Configuration options for radio 4.
     *
     * @return self
     */
    public function setRadio4($radio_4)
    {

        if (!is_null($radio_4) && (count($radio_4) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radio_4 when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['radio_4'] = $radio_4;

        return $this;
    }

    /**
     * Gets lbs
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameLbs[]|null
     */
    public function getLbs()
    {
        return $this->container['lbs'];
    }

    /**
     * Sets lbs
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpProfileNameLbs[]|null $lbs Set various location based service (LBS) options.
     *
     * @return self
     */
    public function setLbs($lbs)
    {

        if (!is_null($lbs) && (count($lbs) > 0)) {
            throw new \InvalidArgumentException('invalid value for $lbs when calling InlineObject619., number of items must be less than or equal to 0.');
        }
        $this->container['lbs'] = $lbs;

        return $this;
    }

    /**
     * Gets ext_info_enable
     *
     * @return string|null
     */
    public function getExtInfoEnable()
    {
        return $this->container['ext_info_enable'];
    }

    /**
     * Sets ext_info_enable
     *
     * @param string|null $ext_info_enable Enable/disable station/VAP/radio extension information.    enable:Enable station/VAP/radio extension information.    disable:Disable station/VAP/radio extension information.
     *
     * @return self
     */
    public function setExtInfoEnable($ext_info_enable)
    {
        $allowedValues = $this->getExtInfoEnableAllowableValues();
        if (!is_null($ext_info_enable) && !in_array($ext_info_enable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ext_info_enable', must be one of '%s'",
                    $ext_info_enable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ext_info_enable'] = $ext_info_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


