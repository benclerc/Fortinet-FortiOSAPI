<?php
/**
 * InlineObject270
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject270 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject270 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_270';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comments' => 'string',
        'api_key' => 'string',
        'accprofile' => 'string',
        'vdom' => '\Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]',
        'schedule' => 'string',
        'cors_allow_origin' => 'string',
        'peer_auth' => 'string',
        'peer_group' => 'string',
        'trusthost' => '\Fortigate\FortiOS\Model\CMDB\SystemApiUserNameTrusthost[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comments' => null,
        'api_key' => null,
        'accprofile' => null,
        'vdom' => null,
        'schedule' => null,
        'cors_allow_origin' => null,
        'peer_auth' => null,
        'peer_group' => null,
        'trusthost' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comments' => 'comments',
        'api_key' => 'api-key',
        'accprofile' => 'accprofile',
        'vdom' => 'vdom',
        'schedule' => 'schedule',
        'cors_allow_origin' => 'cors-allow-origin',
        'peer_auth' => 'peer-auth',
        'peer_group' => 'peer-group',
        'trusthost' => 'trusthost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comments' => 'setComments',
        'api_key' => 'setApiKey',
        'accprofile' => 'setAccprofile',
        'vdom' => 'setVdom',
        'schedule' => 'setSchedule',
        'cors_allow_origin' => 'setCorsAllowOrigin',
        'peer_auth' => 'setPeerAuth',
        'peer_group' => 'setPeerGroup',
        'trusthost' => 'setTrusthost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comments' => 'getComments',
        'api_key' => 'getApiKey',
        'accprofile' => 'getAccprofile',
        'vdom' => 'getVdom',
        'schedule' => 'getSchedule',
        'cors_allow_origin' => 'getCorsAllowOrigin',
        'peer_auth' => 'getPeerAuth',
        'peer_group' => 'getPeerGroup',
        'trusthost' => 'getTrusthost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PEER_AUTH_ENABLE = 'enable';
    const PEER_AUTH_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerAuthAllowableValues()
    {
        return [
            self::PEER_AUTH_ENABLE,
            self::PEER_AUTH_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['api_key'] = $data['api_key'] ?? null;
        $this->container['accprofile'] = $data['accprofile'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['cors_allow_origin'] = $data['cors_allow_origin'] ?? null;
        $this->container['peer_auth'] = $data['peer_auth'] ?? null;
        $this->container['peer_group'] = $data['peer_group'] ?? null;
        $this->container['trusthost'] = $data['trusthost'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['accprofile']) && (mb_strlen($this->container['accprofile']) > 35)) {
            $invalidProperties[] = "invalid value for 'accprofile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['vdom']) && (count($this->container['vdom']) > 0)) {
            $invalidProperties[] = "invalid value for 'vdom', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['schedule']) && (mb_strlen($this->container['schedule']) > 35)) {
            $invalidProperties[] = "invalid value for 'schedule', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cors_allow_origin']) && (mb_strlen($this->container['cors_allow_origin']) > 269)) {
            $invalidProperties[] = "invalid value for 'cors_allow_origin', the character length must be smaller than or equal to 269.";
        }

        $allowedValues = $this->getPeerAuthAllowableValues();
        if (!is_null($this->container['peer_auth']) && !in_array($this->container['peer_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_auth', must be one of '%s'",
                $this->container['peer_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['peer_group']) && (mb_strlen($this->container['peer_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'peer_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['trusthost']) && (count($this->container['trusthost']) > 0)) {
            $invalidProperties[] = "invalid value for 'trusthost', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name User name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject270., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject270., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key Admin user password.
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets accprofile
     *
     * @return string|null
     */
    public function getAccprofile()
    {
        return $this->container['accprofile'];
    }

    /**
     * Sets accprofile
     *
     * @param string|null $accprofile Admin user access profile.
     *
     * @return self
     */
    public function setAccprofile($accprofile)
    {
        if (!is_null($accprofile) && (mb_strlen($accprofile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $accprofile when calling InlineObject270., must be smaller than or equal to 35.');
        }

        $this->container['accprofile'] = $accprofile;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]|null $vdom Virtual domains.
     *
     * @return self
     */
    public function setVdom($vdom)
    {

        if (!is_null($vdom) && (count($vdom) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vdom when calling InlineObject270., number of items must be less than or equal to 0.');
        }
        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule Schedule name.
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (!is_null($schedule) && (mb_strlen($schedule) > 35)) {
            throw new \InvalidArgumentException('invalid length for $schedule when calling InlineObject270., must be smaller than or equal to 35.');
        }

        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets cors_allow_origin
     *
     * @return string|null
     */
    public function getCorsAllowOrigin()
    {
        return $this->container['cors_allow_origin'];
    }

    /**
     * Sets cors_allow_origin
     *
     * @param string|null $cors_allow_origin Value for Access-Control-Allow-Origin on API responses. Avoid using '*' if possible.
     *
     * @return self
     */
    public function setCorsAllowOrigin($cors_allow_origin)
    {
        if (!is_null($cors_allow_origin) && (mb_strlen($cors_allow_origin) > 269)) {
            throw new \InvalidArgumentException('invalid length for $cors_allow_origin when calling InlineObject270., must be smaller than or equal to 269.');
        }

        $this->container['cors_allow_origin'] = $cors_allow_origin;

        return $this;
    }

    /**
     * Gets peer_auth
     *
     * @return string|null
     */
    public function getPeerAuth()
    {
        return $this->container['peer_auth'];
    }

    /**
     * Sets peer_auth
     *
     * @param string|null $peer_auth Enable/disable peer authentication.    enable:Enable peer.    disable:Disable peer.
     *
     * @return self
     */
    public function setPeerAuth($peer_auth)
    {
        $allowedValues = $this->getPeerAuthAllowableValues();
        if (!is_null($peer_auth) && !in_array($peer_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_auth', must be one of '%s'",
                    $peer_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_auth'] = $peer_auth;

        return $this;
    }

    /**
     * Gets peer_group
     *
     * @return string|null
     */
    public function getPeerGroup()
    {
        return $this->container['peer_group'];
    }

    /**
     * Sets peer_group
     *
     * @param string|null $peer_group Peer group name.
     *
     * @return self
     */
    public function setPeerGroup($peer_group)
    {
        if (!is_null($peer_group) && (mb_strlen($peer_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $peer_group when calling InlineObject270., must be smaller than or equal to 35.');
        }

        $this->container['peer_group'] = $peer_group;

        return $this;
    }

    /**
     * Gets trusthost
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemApiUserNameTrusthost[]|null
     */
    public function getTrusthost()
    {
        return $this->container['trusthost'];
    }

    /**
     * Sets trusthost
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemApiUserNameTrusthost[]|null $trusthost Trusthost.
     *
     * @return self
     */
    public function setTrusthost($trusthost)
    {

        if (!is_null($trusthost) && (count($trusthost) > 0)) {
            throw new \InvalidArgumentException('invalid value for $trusthost when calling InlineObject270., number of items must be less than or equal to 0.');
        }
        $this->container['trusthost'] = $trusthost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


