<?php
/**
 * InlineObject409
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject409 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject409 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_409';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'interface' => 'string',
        'ssl_certificate' => 'string',
        'bmr_hostname' => 'string',
        'auto_asic_offload' => 'string',
        'ipv4_address' => 'string',
        'br' => 'string',
        'update_url' => 'string',
        'mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'interface' => null,
        'ssl_certificate' => null,
        'bmr_hostname' => 'password',
        'auto_asic_offload' => null,
        'ipv4_address' => 'ipv4',
        'br' => 'ipv6',
        'update_url' => null,
        'mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'interface' => 'interface',
        'ssl_certificate' => 'ssl-certificate',
        'bmr_hostname' => 'bmr-hostname',
        'auto_asic_offload' => 'auto-asic-offload',
        'ipv4_address' => 'ipv4-address',
        'br' => 'br',
        'update_url' => 'update-url',
        'mode' => 'mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'interface' => 'setInterface',
        'ssl_certificate' => 'setSslCertificate',
        'bmr_hostname' => 'setBmrHostname',
        'auto_asic_offload' => 'setAutoAsicOffload',
        'ipv4_address' => 'setIpv4Address',
        'br' => 'setBr',
        'update_url' => 'setUpdateUrl',
        'mode' => 'setMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'interface' => 'getInterface',
        'ssl_certificate' => 'getSslCertificate',
        'bmr_hostname' => 'getBmrHostname',
        'auto_asic_offload' => 'getAutoAsicOffload',
        'ipv4_address' => 'getIpv4Address',
        'br' => 'getBr',
        'update_url' => 'getUpdateUrl',
        'mode' => 'getMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const AUTO_ASIC_OFFLOAD_ENABLE = 'enable';
    const AUTO_ASIC_OFFLOAD_DISABLE = 'disable';
    const MODE_MAP_E = 'map-e';
    const MODE_FIXED_IP = 'fixed-ip';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoAsicOffloadAllowableValues()
    {
        return [
            self::AUTO_ASIC_OFFLOAD_ENABLE,
            self::AUTO_ASIC_OFFLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_MAP_E,
            self::MODE_FIXED_IP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['ssl_certificate'] = $data['ssl_certificate'] ?? null;
        $this->container['bmr_hostname'] = $data['bmr_hostname'] ?? null;
        $this->container['auto_asic_offload'] = $data['auto_asic_offload'] ?? null;
        $this->container['ipv4_address'] = $data['ipv4_address'] ?? null;
        $this->container['br'] = $data['br'] ?? null;
        $this->container['update_url'] = $data['update_url'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['ssl_certificate']) && (mb_strlen($this->container['ssl_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_certificate', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAutoAsicOffloadAllowableValues();
        if (!is_null($this->container['auto_asic_offload']) && !in_array($this->container['auto_asic_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_asic_offload', must be one of '%s'",
                $this->container['auto_asic_offload'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['update_url']) && (mb_strlen($this->container['update_url']) > 511)) {
            $invalidProperties[] = "invalid value for 'update_url', the character length must be smaller than or equal to 511.";
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable VNE tunnel.    enable:Enable VNE tunnel.    disable:Disable VNE tunnel.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Interface name.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject409., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets ssl_certificate
     *
     * @return string|null
     */
    public function getSslCertificate()
    {
        return $this->container['ssl_certificate'];
    }

    /**
     * Sets ssl_certificate
     *
     * @param string|null $ssl_certificate Name of local certificate for SSL connections.
     *
     * @return self
     */
    public function setSslCertificate($ssl_certificate)
    {
        if (!is_null($ssl_certificate) && (mb_strlen($ssl_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_certificate when calling InlineObject409., must be smaller than or equal to 35.');
        }

        $this->container['ssl_certificate'] = $ssl_certificate;

        return $this;
    }

    /**
     * Gets bmr_hostname
     *
     * @return string|null
     */
    public function getBmrHostname()
    {
        return $this->container['bmr_hostname'];
    }

    /**
     * Sets bmr_hostname
     *
     * @param string|null $bmr_hostname BMR hostname.
     *
     * @return self
     */
    public function setBmrHostname($bmr_hostname)
    {
        $this->container['bmr_hostname'] = $bmr_hostname;

        return $this;
    }

    /**
     * Gets auto_asic_offload
     *
     * @return string|null
     */
    public function getAutoAsicOffload()
    {
        return $this->container['auto_asic_offload'];
    }

    /**
     * Sets auto_asic_offload
     *
     * @param string|null $auto_asic_offload Enable/disable tunnel ASIC offloading.    enable:Enable auto ASIC offloading.    disable:Disable ASIC offloading.
     *
     * @return self
     */
    public function setAutoAsicOffload($auto_asic_offload)
    {
        $allowedValues = $this->getAutoAsicOffloadAllowableValues();
        if (!is_null($auto_asic_offload) && !in_array($auto_asic_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_asic_offload', must be one of '%s'",
                    $auto_asic_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_asic_offload'] = $auto_asic_offload;

        return $this;
    }

    /**
     * Gets ipv4_address
     *
     * @return string|null
     */
    public function getIpv4Address()
    {
        return $this->container['ipv4_address'];
    }

    /**
     * Sets ipv4_address
     *
     * @param string|null $ipv4_address Tunnel IPv4 address and netmask.
     *
     * @return self
     */
    public function setIpv4Address($ipv4_address)
    {
        $this->container['ipv4_address'] = $ipv4_address;

        return $this;
    }

    /**
     * Gets br
     *
     * @return string|null
     */
    public function getBr()
    {
        return $this->container['br'];
    }

    /**
     * Sets br
     *
     * @param string|null $br Border relay IPv6 address.
     *
     * @return self
     */
    public function setBr($br)
    {
        $this->container['br'] = $br;

        return $this;
    }

    /**
     * Gets update_url
     *
     * @return string|null
     */
    public function getUpdateUrl()
    {
        return $this->container['update_url'];
    }

    /**
     * Sets update_url
     *
     * @param string|null $update_url URL of provisioning server.
     *
     * @return self
     */
    public function setUpdateUrl($update_url)
    {
        if (!is_null($update_url) && (mb_strlen($update_url) > 511)) {
            throw new \InvalidArgumentException('invalid length for $update_url when calling InlineObject409., must be smaller than or equal to 511.');
        }

        $this->container['update_url'] = $update_url;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode VNE tunnel mode.    map-e:Map-e mode.    fixed-ip:Fixed-ip mode.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


