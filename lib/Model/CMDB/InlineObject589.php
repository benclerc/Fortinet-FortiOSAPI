<?php
/**
 * InlineObject589
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject589 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject589 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_589';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'advertising' => 'string',
        'ibeacon_uuid' => 'string',
        'major_id' => 'int',
        'minor_id' => 'int',
        'eddystone_namespace' => 'string',
        'eddystone_instance' => 'string',
        'eddystone_url' => 'string',
        'txpower' => 'string',
        'beacon_interval' => 'int',
        'ble_scanning' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'advertising' => null,
        'ibeacon_uuid' => null,
        'major_id' => null,
        'minor_id' => null,
        'eddystone_namespace' => null,
        'eddystone_instance' => null,
        'eddystone_url' => null,
        'txpower' => null,
        'beacon_interval' => null,
        'ble_scanning' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'advertising' => 'advertising',
        'ibeacon_uuid' => 'ibeacon-uuid',
        'major_id' => 'major-id',
        'minor_id' => 'minor-id',
        'eddystone_namespace' => 'eddystone-namespace',
        'eddystone_instance' => 'eddystone-instance',
        'eddystone_url' => 'eddystone-url',
        'txpower' => 'txpower',
        'beacon_interval' => 'beacon-interval',
        'ble_scanning' => 'ble-scanning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'advertising' => 'setAdvertising',
        'ibeacon_uuid' => 'setIbeaconUuid',
        'major_id' => 'setMajorId',
        'minor_id' => 'setMinorId',
        'eddystone_namespace' => 'setEddystoneNamespace',
        'eddystone_instance' => 'setEddystoneInstance',
        'eddystone_url' => 'setEddystoneUrl',
        'txpower' => 'setTxpower',
        'beacon_interval' => 'setBeaconInterval',
        'ble_scanning' => 'setBleScanning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'advertising' => 'getAdvertising',
        'ibeacon_uuid' => 'getIbeaconUuid',
        'major_id' => 'getMajorId',
        'minor_id' => 'getMinorId',
        'eddystone_namespace' => 'getEddystoneNamespace',
        'eddystone_instance' => 'getEddystoneInstance',
        'eddystone_url' => 'getEddystoneUrl',
        'txpower' => 'getTxpower',
        'beacon_interval' => 'getBeaconInterval',
        'ble_scanning' => 'getBleScanning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADVERTISING_IBEACON = 'ibeacon';
    const ADVERTISING_EDDYSTONE_UID = 'eddystone-uid';
    const ADVERTISING_EDDYSTONE_URL = 'eddystone-url';
    const TXPOWER__0 = '0';
    const TXPOWER__1 = '1';
    const TXPOWER__2 = '2';
    const TXPOWER__3 = '3';
    const TXPOWER__4 = '4';
    const TXPOWER__5 = '5';
    const TXPOWER__6 = '6';
    const TXPOWER__7 = '7';
    const TXPOWER__8 = '8';
    const TXPOWER__9 = '9';
    const TXPOWER__10 = '10';
    const TXPOWER__11 = '11';
    const TXPOWER__12 = '12';
    const BLE_SCANNING_ENABLE = 'enable';
    const BLE_SCANNING_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdvertisingAllowableValues()
    {
        return [
            self::ADVERTISING_IBEACON,
            self::ADVERTISING_EDDYSTONE_UID,
            self::ADVERTISING_EDDYSTONE_URL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTxpowerAllowableValues()
    {
        return [
            self::TXPOWER__0,
            self::TXPOWER__1,
            self::TXPOWER__2,
            self::TXPOWER__3,
            self::TXPOWER__4,
            self::TXPOWER__5,
            self::TXPOWER__6,
            self::TXPOWER__7,
            self::TXPOWER__8,
            self::TXPOWER__9,
            self::TXPOWER__10,
            self::TXPOWER__11,
            self::TXPOWER__12,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBleScanningAllowableValues()
    {
        return [
            self::BLE_SCANNING_ENABLE,
            self::BLE_SCANNING_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['advertising'] = $data['advertising'] ?? null;
        $this->container['ibeacon_uuid'] = $data['ibeacon_uuid'] ?? null;
        $this->container['major_id'] = $data['major_id'] ?? null;
        $this->container['minor_id'] = $data['minor_id'] ?? null;
        $this->container['eddystone_namespace'] = $data['eddystone_namespace'] ?? null;
        $this->container['eddystone_instance'] = $data['eddystone_instance'] ?? null;
        $this->container['eddystone_url'] = $data['eddystone_url'] ?? null;
        $this->container['txpower'] = $data['txpower'] ?? null;
        $this->container['beacon_interval'] = $data['beacon_interval'] ?? null;
        $this->container['ble_scanning'] = $data['ble_scanning'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 63)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAdvertisingAllowableValues();
        if (!is_null($this->container['advertising']) && !in_array($this->container['advertising'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'advertising', must be one of '%s'",
                $this->container['advertising'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ibeacon_uuid']) && (mb_strlen($this->container['ibeacon_uuid']) > 63)) {
            $invalidProperties[] = "invalid value for 'ibeacon_uuid', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['major_id']) && ($this->container['major_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'major_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['major_id']) && ($this->container['major_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'major_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['minor_id']) && ($this->container['minor_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'minor_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['minor_id']) && ($this->container['minor_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'minor_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['eddystone_namespace']) && (mb_strlen($this->container['eddystone_namespace']) > 10)) {
            $invalidProperties[] = "invalid value for 'eddystone_namespace', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['eddystone_instance']) && (mb_strlen($this->container['eddystone_instance']) > 6)) {
            $invalidProperties[] = "invalid value for 'eddystone_instance', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['eddystone_url']) && (mb_strlen($this->container['eddystone_url']) > 127)) {
            $invalidProperties[] = "invalid value for 'eddystone_url', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getTxpowerAllowableValues();
        if (!is_null($this->container['txpower']) && !in_array($this->container['txpower'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'txpower', must be one of '%s'",
                $this->container['txpower'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['beacon_interval']) && ($this->container['beacon_interval'] > 3500)) {
            $invalidProperties[] = "invalid value for 'beacon_interval', must be smaller than or equal to 3500.";
        }

        if (!is_null($this->container['beacon_interval']) && ($this->container['beacon_interval'] < 40)) {
            $invalidProperties[] = "invalid value for 'beacon_interval', must be bigger than or equal to 40.";
        }

        $allowedValues = $this->getBleScanningAllowableValues();
        if (!is_null($this->container['ble_scanning']) && !in_array($this->container['ble_scanning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ble_scanning', must be one of '%s'",
                $this->container['ble_scanning'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Bluetooth Low Energy profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject589., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 63)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject589., must be smaller than or equal to 63.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets advertising
     *
     * @return string|null
     */
    public function getAdvertising()
    {
        return $this->container['advertising'];
    }

    /**
     * Sets advertising
     *
     * @param string|null $advertising Advertising type.    ibeacon:iBeacon advertising.    eddystone-uid:Eddystone UID advertising.    eddystone-url:Eddystone URL advertising.
     *
     * @return self
     */
    public function setAdvertising($advertising)
    {
        $allowedValues = $this->getAdvertisingAllowableValues();
        if (!is_null($advertising) && !in_array($advertising, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'advertising', must be one of '%s'",
                    $advertising,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['advertising'] = $advertising;

        return $this;
    }

    /**
     * Gets ibeacon_uuid
     *
     * @return string|null
     */
    public function getIbeaconUuid()
    {
        return $this->container['ibeacon_uuid'];
    }

    /**
     * Sets ibeacon_uuid
     *
     * @param string|null $ibeacon_uuid Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     *
     * @return self
     */
    public function setIbeaconUuid($ibeacon_uuid)
    {
        if (!is_null($ibeacon_uuid) && (mb_strlen($ibeacon_uuid) > 63)) {
            throw new \InvalidArgumentException('invalid length for $ibeacon_uuid when calling InlineObject589., must be smaller than or equal to 63.');
        }

        $this->container['ibeacon_uuid'] = $ibeacon_uuid;

        return $this;
    }

    /**
     * Gets major_id
     *
     * @return int|null
     */
    public function getMajorId()
    {
        return $this->container['major_id'];
    }

    /**
     * Sets major_id
     *
     * @param int|null $major_id Major ID.
     *
     * @return self
     */
    public function setMajorId($major_id)
    {

        if (!is_null($major_id) && ($major_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $major_id when calling InlineObject589., must be smaller than or equal to 65535.');
        }
        if (!is_null($major_id) && ($major_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $major_id when calling InlineObject589., must be bigger than or equal to 0.');
        }

        $this->container['major_id'] = $major_id;

        return $this;
    }

    /**
     * Gets minor_id
     *
     * @return int|null
     */
    public function getMinorId()
    {
        return $this->container['minor_id'];
    }

    /**
     * Sets minor_id
     *
     * @param int|null $minor_id Minor ID.
     *
     * @return self
     */
    public function setMinorId($minor_id)
    {

        if (!is_null($minor_id) && ($minor_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $minor_id when calling InlineObject589., must be smaller than or equal to 65535.');
        }
        if (!is_null($minor_id) && ($minor_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $minor_id when calling InlineObject589., must be bigger than or equal to 0.');
        }

        $this->container['minor_id'] = $minor_id;

        return $this;
    }

    /**
     * Gets eddystone_namespace
     *
     * @return string|null
     */
    public function getEddystoneNamespace()
    {
        return $this->container['eddystone_namespace'];
    }

    /**
     * Sets eddystone_namespace
     *
     * @param string|null $eddystone_namespace Eddystone namespace ID.
     *
     * @return self
     */
    public function setEddystoneNamespace($eddystone_namespace)
    {
        if (!is_null($eddystone_namespace) && (mb_strlen($eddystone_namespace) > 10)) {
            throw new \InvalidArgumentException('invalid length for $eddystone_namespace when calling InlineObject589., must be smaller than or equal to 10.');
        }

        $this->container['eddystone_namespace'] = $eddystone_namespace;

        return $this;
    }

    /**
     * Gets eddystone_instance
     *
     * @return string|null
     */
    public function getEddystoneInstance()
    {
        return $this->container['eddystone_instance'];
    }

    /**
     * Sets eddystone_instance
     *
     * @param string|null $eddystone_instance Eddystone instance ID.
     *
     * @return self
     */
    public function setEddystoneInstance($eddystone_instance)
    {
        if (!is_null($eddystone_instance) && (mb_strlen($eddystone_instance) > 6)) {
            throw new \InvalidArgumentException('invalid length for $eddystone_instance when calling InlineObject589., must be smaller than or equal to 6.');
        }

        $this->container['eddystone_instance'] = $eddystone_instance;

        return $this;
    }

    /**
     * Gets eddystone_url
     *
     * @return string|null
     */
    public function getEddystoneUrl()
    {
        return $this->container['eddystone_url'];
    }

    /**
     * Sets eddystone_url
     *
     * @param string|null $eddystone_url Eddystone URL.
     *
     * @return self
     */
    public function setEddystoneUrl($eddystone_url)
    {
        if (!is_null($eddystone_url) && (mb_strlen($eddystone_url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $eddystone_url when calling InlineObject589., must be smaller than or equal to 127.');
        }

        $this->container['eddystone_url'] = $eddystone_url;

        return $this;
    }

    /**
     * Gets txpower
     *
     * @return string|null
     */
    public function getTxpower()
    {
        return $this->container['txpower'];
    }

    /**
     * Sets txpower
     *
     * @param string|null $txpower Transmit power level (default = 0).    0:Transmit power level 0 (-21 dBm)    1:Transmit power level 1 (-18 dBm)    2:Transmit power level 2 (-15 dBm)    3:Transmit power level 3 (-12 dBm)    4:Transmit power level 4 (-9 dBm)    5:Transmit power level 5 (-6 dBm)    6:Transmit power level 6 (-3 dBm)    7:Transmit power level 7 (0 dBm)    8:Transmit power level 8 (1 dBm)    9:Transmit power level 9 (2 dBm)    10:Transmit power level 10 (3 dBm)    11:Transmit power level 11 (4 dBm)    12:Transmit power level 12 (5 dBm)
     *
     * @return self
     */
    public function setTxpower($txpower)
    {
        $allowedValues = $this->getTxpowerAllowableValues();
        if (!is_null($txpower) && !in_array($txpower, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'txpower', must be one of '%s'",
                    $txpower,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['txpower'] = $txpower;

        return $this;
    }

    /**
     * Gets beacon_interval
     *
     * @return int|null
     */
    public function getBeaconInterval()
    {
        return $this->container['beacon_interval'];
    }

    /**
     * Sets beacon_interval
     *
     * @param int|null $beacon_interval Beacon interval (default = 100 msec).
     *
     * @return self
     */
    public function setBeaconInterval($beacon_interval)
    {

        if (!is_null($beacon_interval) && ($beacon_interval > 3500)) {
            throw new \InvalidArgumentException('invalid value for $beacon_interval when calling InlineObject589., must be smaller than or equal to 3500.');
        }
        if (!is_null($beacon_interval) && ($beacon_interval < 40)) {
            throw new \InvalidArgumentException('invalid value for $beacon_interval when calling InlineObject589., must be bigger than or equal to 40.');
        }

        $this->container['beacon_interval'] = $beacon_interval;

        return $this;
    }

    /**
     * Gets ble_scanning
     *
     * @return string|null
     */
    public function getBleScanning()
    {
        return $this->container['ble_scanning'];
    }

    /**
     * Sets ble_scanning
     *
     * @param string|null $ble_scanning Enable/disable Bluetooth Low Energy (BLE) scanning.    enable:Enable BLE scanning.    disable:Disable BLE scanning.
     *
     * @return self
     */
    public function setBleScanning($ble_scanning)
    {
        $allowedValues = $this->getBleScanningAllowableValues();
        if (!is_null($ble_scanning) && !in_array($ble_scanning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ble_scanning', must be one of '%s'",
                    $ble_scanning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ble_scanning'] = $ble_scanning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


