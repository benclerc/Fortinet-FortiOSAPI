<?php
/**
 * InlineObject507
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject507 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject507 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_507';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prefer_scenario' => 'string',
        'collaboration' => 'string',
        'device_id' => 'string',
        'acceptable_connections' => 'string',
        'dst_peer' => '\Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]',
        'src_peer' => '\Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prefer_scenario' => null,
        'collaboration' => null,
        'device_id' => null,
        'acceptable_connections' => null,
        'dst_peer' => null,
        'src_peer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prefer_scenario' => 'prefer-scenario',
        'collaboration' => 'collaboration',
        'device_id' => 'device-id',
        'acceptable_connections' => 'acceptable-connections',
        'dst_peer' => 'dst-peer',
        'src_peer' => 'src-peer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prefer_scenario' => 'setPreferScenario',
        'collaboration' => 'setCollaboration',
        'device_id' => 'setDeviceId',
        'acceptable_connections' => 'setAcceptableConnections',
        'dst_peer' => 'setDstPeer',
        'src_peer' => 'setSrcPeer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prefer_scenario' => 'getPreferScenario',
        'collaboration' => 'getCollaboration',
        'device_id' => 'getDeviceId',
        'acceptable_connections' => 'getAcceptableConnections',
        'dst_peer' => 'getDstPeer',
        'src_peer' => 'getSrcPeer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PREFER_SCENARIO_BALANCE = 'balance';
    const PREFER_SCENARIO_PREFER_SPEED = 'prefer-speed';
    const PREFER_SCENARIO_PREFER_CACHE = 'prefer-cache';
    const COLLABORATION_ENABLE = 'enable';
    const COLLABORATION_DISABLE = 'disable';
    const ACCEPTABLE_CONNECTIONS_ANY = 'any';
    const ACCEPTABLE_CONNECTIONS_PEERS = 'peers';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreferScenarioAllowableValues()
    {
        return [
            self::PREFER_SCENARIO_BALANCE,
            self::PREFER_SCENARIO_PREFER_SPEED,
            self::PREFER_SCENARIO_PREFER_CACHE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCollaborationAllowableValues()
    {
        return [
            self::COLLABORATION_ENABLE,
            self::COLLABORATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptableConnectionsAllowableValues()
    {
        return [
            self::ACCEPTABLE_CONNECTIONS_ANY,
            self::ACCEPTABLE_CONNECTIONS_PEERS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prefer_scenario'] = $data['prefer_scenario'] ?? null;
        $this->container['collaboration'] = $data['collaboration'] ?? null;
        $this->container['device_id'] = $data['device_id'] ?? null;
        $this->container['acceptable_connections'] = $data['acceptable_connections'] ?? null;
        $this->container['dst_peer'] = $data['dst_peer'] ?? null;
        $this->container['src_peer'] = $data['src_peer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPreferScenarioAllowableValues();
        if (!is_null($this->container['prefer_scenario']) && !in_array($this->container['prefer_scenario'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'prefer_scenario', must be one of '%s'",
                $this->container['prefer_scenario'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCollaborationAllowableValues();
        if (!is_null($this->container['collaboration']) && !in_array($this->container['collaboration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'collaboration', must be one of '%s'",
                $this->container['collaboration'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['device_id']) && (mb_strlen($this->container['device_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'device_id', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAcceptableConnectionsAllowableValues();
        if (!is_null($this->container['acceptable_connections']) && !in_array($this->container['acceptable_connections'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'acceptable_connections', must be one of '%s'",
                $this->container['acceptable_connections'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dst_peer']) && (count($this->container['dst_peer']) > 0)) {
            $invalidProperties[] = "invalid value for 'dst_peer', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['src_peer']) && (count($this->container['src_peer']) > 0)) {
            $invalidProperties[] = "invalid value for 'src_peer', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prefer_scenario
     *
     * @return string|null
     */
    public function getPreferScenario()
    {
        return $this->container['prefer_scenario'];
    }

    /**
     * Sets prefer_scenario
     *
     * @param string|null $prefer_scenario Set the preferred cache behavior towards the balance between latency and hit-ratio.    balance:Balance between speed and cache hit ratio.    prefer-speed:Prefer response speed at the expense of increased cache bypasses.    prefer-cache:Prefer improving hit-ratio through increasing latency tolerance.
     *
     * @return self
     */
    public function setPreferScenario($prefer_scenario)
    {
        $allowedValues = $this->getPreferScenarioAllowableValues();
        if (!is_null($prefer_scenario) && !in_array($prefer_scenario, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'prefer_scenario', must be one of '%s'",
                    $prefer_scenario,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prefer_scenario'] = $prefer_scenario;

        return $this;
    }

    /**
     * Gets collaboration
     *
     * @return string|null
     */
    public function getCollaboration()
    {
        return $this->container['collaboration'];
    }

    /**
     * Sets collaboration
     *
     * @param string|null $collaboration Enable/disable cache-collaboration between cache-service clusters.    enable:Enable cache cache-collaboration.    disable:Disable cache cache-collaboration.
     *
     * @return self
     */
    public function setCollaboration($collaboration)
    {
        $allowedValues = $this->getCollaborationAllowableValues();
        if (!is_null($collaboration) && !in_array($collaboration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'collaboration', must be one of '%s'",
                    $collaboration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['collaboration'] = $collaboration;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id Set identifier for this cache device.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (!is_null($device_id) && (mb_strlen($device_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $device_id when calling InlineObject507., must be smaller than or equal to 35.');
        }

        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets acceptable_connections
     *
     * @return string|null
     */
    public function getAcceptableConnections()
    {
        return $this->container['acceptable_connections'];
    }

    /**
     * Sets acceptable_connections
     *
     * @param string|null $acceptable_connections Set strategy when accepting cache collaboration connection.    any:We can accept any cache-collaboration connection.    peers:We can only accept connections that are already in src-peers.
     *
     * @return self
     */
    public function setAcceptableConnections($acceptable_connections)
    {
        $allowedValues = $this->getAcceptableConnectionsAllowableValues();
        if (!is_null($acceptable_connections) && !in_array($acceptable_connections, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'acceptable_connections', must be one of '%s'",
                    $acceptable_connections,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acceptable_connections'] = $acceptable_connections;

        return $this;
    }

    /**
     * Gets dst_peer
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]|null
     */
    public function getDstPeer()
    {
        return $this->container['dst_peer'];
    }

    /**
     * Sets dst_peer
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]|null $dst_peer Modify cache-service destination peer list.
     *
     * @return self
     */
    public function setDstPeer($dst_peer)
    {

        if (!is_null($dst_peer) && (count($dst_peer) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dst_peer when calling InlineObject507., number of items must be less than or equal to 0.');
        }
        $this->container['dst_peer'] = $dst_peer;

        return $this;
    }

    /**
     * Gets src_peer
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]|null
     */
    public function getSrcPeer()
    {
        return $this->container['src_peer'];
    }

    /**
     * Sets src_peer
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WanoptCacheServiceDstPeer[]|null $src_peer Modify cache-service source peer list.
     *
     * @return self
     */
    public function setSrcPeer($src_peer)
    {

        if (!is_null($src_peer) && (count($src_peer) > 0)) {
            throw new \InvalidArgumentException('invalid value for $src_peer when calling InlineObject507., number of items must be less than or equal to 0.');
        }
        $this->container['src_peer'] = $src_peer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


