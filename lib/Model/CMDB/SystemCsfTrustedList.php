<?php
/**
 * SystemCsfTrustedList
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemCsfTrustedList Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemCsfTrustedList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_csf_trusted_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'authorization_type' => 'string',
        'serial' => 'string',
        'certificate' => 'string',
        'action' => 'string',
        'ha_members' => 'string',
        'downstream_authorization' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'authorization_type' => null,
        'serial' => null,
        'certificate' => null,
        'action' => null,
        'ha_members' => null,
        'downstream_authorization' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'authorization_type' => 'authorization-type',
        'serial' => 'serial',
        'certificate' => 'certificate',
        'action' => 'action',
        'ha_members' => 'ha-members',
        'downstream_authorization' => 'downstream-authorization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'authorization_type' => 'setAuthorizationType',
        'serial' => 'setSerial',
        'certificate' => 'setCertificate',
        'action' => 'setAction',
        'ha_members' => 'setHaMembers',
        'downstream_authorization' => 'setDownstreamAuthorization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'authorization_type' => 'getAuthorizationType',
        'serial' => 'getSerial',
        'certificate' => 'getCertificate',
        'action' => 'getAction',
        'ha_members' => 'getHaMembers',
        'downstream_authorization' => 'getDownstreamAuthorization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHORIZATION_TYPE_SERIAL = 'serial';
    const AUTHORIZATION_TYPE_CERTIFICATE = 'certificate';
    const ACTION_ACCEPT = 'accept';
    const ACTION_DENY = 'deny';
    const DOWNSTREAM_AUTHORIZATION_ENABLE = 'enable';
    const DOWNSTREAM_AUTHORIZATION_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationTypeAllowableValues()
    {
        return [
            self::AUTHORIZATION_TYPE_SERIAL,
            self::AUTHORIZATION_TYPE_CERTIFICATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_ACCEPT,
            self::ACTION_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDownstreamAuthorizationAllowableValues()
    {
        return [
            self::DOWNSTREAM_AUTHORIZATION_ENABLE,
            self::DOWNSTREAM_AUTHORIZATION_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['authorization_type'] = $data['authorization_type'] ?? null;
        $this->container['serial'] = $data['serial'] ?? null;
        $this->container['certificate'] = $data['certificate'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['ha_members'] = $data['ha_members'] ?? null;
        $this->container['downstream_authorization'] = $data['downstream_authorization'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthorizationTypeAllowableValues();
        if (!is_null($this->container['authorization_type']) && !in_array($this->container['authorization_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization_type', must be one of '%s'",
                $this->container['authorization_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['serial']) && (mb_strlen($this->container['serial']) > 19)) {
            $invalidProperties[] = "invalid value for 'serial', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['certificate']) && (mb_strlen($this->container['certificate']) > 32767)) {
            $invalidProperties[] = "invalid value for 'certificate', the character length must be smaller than or equal to 32767.";
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ha_members']) && (mb_strlen($this->container['ha_members']) > 19)) {
            $invalidProperties[] = "invalid value for 'ha_members', the character length must be smaller than or equal to 19.";
        }

        $allowedValues = $this->getDownstreamAuthorizationAllowableValues();
        if (!is_null($this->container['downstream_authorization']) && !in_array($this->container['downstream_authorization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'downstream_authorization', must be one of '%s'",
                $this->container['downstream_authorization'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SystemCsfTrustedList., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets authorization_type
     *
     * @return string|null
     */
    public function getAuthorizationType()
    {
        return $this->container['authorization_type'];
    }

    /**
     * Sets authorization_type
     *
     * @param string|null $authorization_type Authorization type.    serial:Verify downstream by serial number.    certificate:Verify downstream by certificate.
     *
     * @return self
     */
    public function setAuthorizationType($authorization_type)
    {
        $allowedValues = $this->getAuthorizationTypeAllowableValues();
        if (!is_null($authorization_type) && !in_array($authorization_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization_type', must be one of '%s'",
                    $authorization_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization_type'] = $authorization_type;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Serial.
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (!is_null($serial) && (mb_strlen($serial) > 19)) {
            throw new \InvalidArgumentException('invalid length for $serial when calling SystemCsfTrustedList., must be smaller than or equal to 19.');
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate Certificate.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (!is_null($certificate) && (mb_strlen($certificate) > 32767)) {
            throw new \InvalidArgumentException('invalid length for $certificate when calling SystemCsfTrustedList., must be smaller than or equal to 32767.');
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Security fabric authorization action.    accept:Accept authorization request.    deny:Deny authorization request.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets ha_members
     *
     * @return string|null
     */
    public function getHaMembers()
    {
        return $this->container['ha_members'];
    }

    /**
     * Sets ha_members
     *
     * @param string|null $ha_members HA members.
     *
     * @return self
     */
    public function setHaMembers($ha_members)
    {
        if (!is_null($ha_members) && (mb_strlen($ha_members) > 19)) {
            throw new \InvalidArgumentException('invalid length for $ha_members when calling SystemCsfTrustedList., must be smaller than or equal to 19.');
        }

        $this->container['ha_members'] = $ha_members;

        return $this;
    }

    /**
     * Gets downstream_authorization
     *
     * @return string|null
     */
    public function getDownstreamAuthorization()
    {
        return $this->container['downstream_authorization'];
    }

    /**
     * Sets downstream_authorization
     *
     * @param string|null $downstream_authorization Trust authorizations by this node's administrator.    enable:Enable downstream authorization.    disable:Disable downstream authorization.
     *
     * @return self
     */
    public function setDownstreamAuthorization($downstream_authorization)
    {
        $allowedValues = $this->getDownstreamAuthorizationAllowableValues();
        if (!is_null($downstream_authorization) && !in_array($downstream_authorization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'downstream_authorization', must be one of '%s'",
                    $downstream_authorization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['downstream_authorization'] = $downstream_authorization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


