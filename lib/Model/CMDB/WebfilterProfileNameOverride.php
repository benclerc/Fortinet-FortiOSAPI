<?php
/**
 * WebfilterProfileNameOverride
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebfilterProfileNameOverride Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebfilterProfileNameOverride implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_webfilter_profile__name__override';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ovrd_cookie' => 'string',
        'ovrd_scope' => 'string',
        'profile_type' => 'string',
        'ovrd_dur_mode' => 'string',
        'ovrd_dur' => 'string',
        'profile_attribute' => 'string',
        'ovrd_user_group' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]',
        'profile' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameProfile[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ovrd_cookie' => null,
        'ovrd_scope' => null,
        'profile_type' => null,
        'ovrd_dur_mode' => null,
        'ovrd_dur' => null,
        'profile_attribute' => null,
        'ovrd_user_group' => null,
        'profile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ovrd_cookie' => 'ovrd-cookie',
        'ovrd_scope' => 'ovrd-scope',
        'profile_type' => 'profile-type',
        'ovrd_dur_mode' => 'ovrd-dur-mode',
        'ovrd_dur' => 'ovrd-dur',
        'profile_attribute' => 'profile-attribute',
        'ovrd_user_group' => 'ovrd-user-group',
        'profile' => 'profile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ovrd_cookie' => 'setOvrdCookie',
        'ovrd_scope' => 'setOvrdScope',
        'profile_type' => 'setProfileType',
        'ovrd_dur_mode' => 'setOvrdDurMode',
        'ovrd_dur' => 'setOvrdDur',
        'profile_attribute' => 'setProfileAttribute',
        'ovrd_user_group' => 'setOvrdUserGroup',
        'profile' => 'setProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ovrd_cookie' => 'getOvrdCookie',
        'ovrd_scope' => 'getOvrdScope',
        'profile_type' => 'getProfileType',
        'ovrd_dur_mode' => 'getOvrdDurMode',
        'ovrd_dur' => 'getOvrdDur',
        'profile_attribute' => 'getProfileAttribute',
        'ovrd_user_group' => 'getOvrdUserGroup',
        'profile' => 'getProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OVRD_COOKIE_ALLOW = 'allow';
    const OVRD_COOKIE_DENY = 'deny';
    const OVRD_SCOPE_USER = 'user';
    const OVRD_SCOPE_USER_GROUP = 'user-group';
    const OVRD_SCOPE_IP = 'ip';
    const OVRD_SCOPE_BROWSER = 'browser';
    const OVRD_SCOPE_ASK = 'ask';
    const PROFILE_TYPE__LIST = 'list';
    const PROFILE_TYPE_RADIUS = 'radius';
    const OVRD_DUR_MODE_CONSTANT = 'constant';
    const OVRD_DUR_MODE_ASK = 'ask';
    const PROFILE_ATTRIBUTE_USER_NAME = 'User-Name';
    const PROFILE_ATTRIBUTE_NAS_IP_ADDRESS = 'NAS-IP-Address';
    const PROFILE_ATTRIBUTE_FRAMED_IP_ADDRESS = 'Framed-IP-Address';
    const PROFILE_ATTRIBUTE_FRAMED_IP_NETMASK = 'Framed-IP-Netmask';
    const PROFILE_ATTRIBUTE_FILTER_ID = 'Filter-Id';
    const PROFILE_ATTRIBUTE_LOGIN_IP_HOST = 'Login-IP-Host';
    const PROFILE_ATTRIBUTE_REPLY_MESSAGE = 'Reply-Message';
    const PROFILE_ATTRIBUTE_CALLBACK_NUMBER = 'Callback-Number';
    const PROFILE_ATTRIBUTE_CALLBACK_ID = 'Callback-Id';
    const PROFILE_ATTRIBUTE_FRAMED_ROUTE = 'Framed-Route';
    const PROFILE_ATTRIBUTE_FRAMED_IPX_NETWORK = 'Framed-IPX-Network';
    const PROFILE_ATTRIBUTE__CLASS = 'Class';
    const PROFILE_ATTRIBUTE_CALLED_STATION_ID = 'Called-Station-Id';
    const PROFILE_ATTRIBUTE_CALLING_STATION_ID = 'Calling-Station-Id';
    const PROFILE_ATTRIBUTE_NAS_IDENTIFIER = 'NAS-Identifier';
    const PROFILE_ATTRIBUTE_PROXY_STATE = 'Proxy-State';
    const PROFILE_ATTRIBUTE_LOGIN_LAT_SERVICE = 'Login-LAT-Service';
    const PROFILE_ATTRIBUTE_LOGIN_LAT_NODE = 'Login-LAT-Node';
    const PROFILE_ATTRIBUTE_LOGIN_LAT_GROUP = 'Login-LAT-Group';
    const PROFILE_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE = 'Framed-AppleTalk-Zone';
    const PROFILE_ATTRIBUTE_ACCT_SESSION_ID = 'Acct-Session-Id';
    const PROFILE_ATTRIBUTE_ACCT_MULTI_SESSION_ID = 'Acct-Multi-Session-Id';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvrdCookieAllowableValues()
    {
        return [
            self::OVRD_COOKIE_ALLOW,
            self::OVRD_COOKIE_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvrdScopeAllowableValues()
    {
        return [
            self::OVRD_SCOPE_USER,
            self::OVRD_SCOPE_USER_GROUP,
            self::OVRD_SCOPE_IP,
            self::OVRD_SCOPE_BROWSER,
            self::OVRD_SCOPE_ASK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileTypeAllowableValues()
    {
        return [
            self::PROFILE_TYPE__LIST,
            self::PROFILE_TYPE_RADIUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvrdDurModeAllowableValues()
    {
        return [
            self::OVRD_DUR_MODE_CONSTANT,
            self::OVRD_DUR_MODE_ASK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileAttributeAllowableValues()
    {
        return [
            self::PROFILE_ATTRIBUTE_USER_NAME,
            self::PROFILE_ATTRIBUTE_NAS_IP_ADDRESS,
            self::PROFILE_ATTRIBUTE_FRAMED_IP_ADDRESS,
            self::PROFILE_ATTRIBUTE_FRAMED_IP_NETMASK,
            self::PROFILE_ATTRIBUTE_FILTER_ID,
            self::PROFILE_ATTRIBUTE_LOGIN_IP_HOST,
            self::PROFILE_ATTRIBUTE_REPLY_MESSAGE,
            self::PROFILE_ATTRIBUTE_CALLBACK_NUMBER,
            self::PROFILE_ATTRIBUTE_CALLBACK_ID,
            self::PROFILE_ATTRIBUTE_FRAMED_ROUTE,
            self::PROFILE_ATTRIBUTE_FRAMED_IPX_NETWORK,
            self::PROFILE_ATTRIBUTE__CLASS,
            self::PROFILE_ATTRIBUTE_CALLED_STATION_ID,
            self::PROFILE_ATTRIBUTE_CALLING_STATION_ID,
            self::PROFILE_ATTRIBUTE_NAS_IDENTIFIER,
            self::PROFILE_ATTRIBUTE_PROXY_STATE,
            self::PROFILE_ATTRIBUTE_LOGIN_LAT_SERVICE,
            self::PROFILE_ATTRIBUTE_LOGIN_LAT_NODE,
            self::PROFILE_ATTRIBUTE_LOGIN_LAT_GROUP,
            self::PROFILE_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE,
            self::PROFILE_ATTRIBUTE_ACCT_SESSION_ID,
            self::PROFILE_ATTRIBUTE_ACCT_MULTI_SESSION_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ovrd_cookie'] = $data['ovrd_cookie'] ?? null;
        $this->container['ovrd_scope'] = $data['ovrd_scope'] ?? null;
        $this->container['profile_type'] = $data['profile_type'] ?? null;
        $this->container['ovrd_dur_mode'] = $data['ovrd_dur_mode'] ?? null;
        $this->container['ovrd_dur'] = $data['ovrd_dur'] ?? null;
        $this->container['profile_attribute'] = $data['profile_attribute'] ?? null;
        $this->container['ovrd_user_group'] = $data['ovrd_user_group'] ?? null;
        $this->container['profile'] = $data['profile'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOvrdCookieAllowableValues();
        if (!is_null($this->container['ovrd_cookie']) && !in_array($this->container['ovrd_cookie'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ovrd_cookie', must be one of '%s'",
                $this->container['ovrd_cookie'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOvrdScopeAllowableValues();
        if (!is_null($this->container['ovrd_scope']) && !in_array($this->container['ovrd_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ovrd_scope', must be one of '%s'",
                $this->container['ovrd_scope'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProfileTypeAllowableValues();
        if (!is_null($this->container['profile_type']) && !in_array($this->container['profile_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'profile_type', must be one of '%s'",
                $this->container['profile_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOvrdDurModeAllowableValues();
        if (!is_null($this->container['ovrd_dur_mode']) && !in_array($this->container['ovrd_dur_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ovrd_dur_mode', must be one of '%s'",
                $this->container['ovrd_dur_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProfileAttributeAllowableValues();
        if (!is_null($this->container['profile_attribute']) && !in_array($this->container['profile_attribute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'profile_attribute', must be one of '%s'",
                $this->container['profile_attribute'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ovrd_user_group']) && (count($this->container['ovrd_user_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'ovrd_user_group', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['profile']) && (count($this->container['profile']) > 0)) {
            $invalidProperties[] = "invalid value for 'profile', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ovrd_cookie
     *
     * @return string|null
     */
    public function getOvrdCookie()
    {
        return $this->container['ovrd_cookie'];
    }

    /**
     * Sets ovrd_cookie
     *
     * @param string|null $ovrd_cookie Allow/deny browser-based (cookie) overrides.    allow:Allow browser-based (cookie) override.    deny:Deny browser-based (cookie) override.
     *
     * @return self
     */
    public function setOvrdCookie($ovrd_cookie)
    {
        $allowedValues = $this->getOvrdCookieAllowableValues();
        if (!is_null($ovrd_cookie) && !in_array($ovrd_cookie, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ovrd_cookie', must be one of '%s'",
                    $ovrd_cookie,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ovrd_cookie'] = $ovrd_cookie;

        return $this;
    }

    /**
     * Gets ovrd_scope
     *
     * @return string|null
     */
    public function getOvrdScope()
    {
        return $this->container['ovrd_scope'];
    }

    /**
     * Sets ovrd_scope
     *
     * @param string|null $ovrd_scope Override scope.    user:Override for the user.    user-group:Override for the user's group.    ip:Override for the initiating IP.    browser:Create browser-based (cookie) override.    ask:Prompt for scope when initiating an override.
     *
     * @return self
     */
    public function setOvrdScope($ovrd_scope)
    {
        $allowedValues = $this->getOvrdScopeAllowableValues();
        if (!is_null($ovrd_scope) && !in_array($ovrd_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ovrd_scope', must be one of '%s'",
                    $ovrd_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ovrd_scope'] = $ovrd_scope;

        return $this;
    }

    /**
     * Gets profile_type
     *
     * @return string|null
     */
    public function getProfileType()
    {
        return $this->container['profile_type'];
    }

    /**
     * Sets profile_type
     *
     * @param string|null $profile_type Override profile type.    list:Profile chosen from list.    radius:Profile determined by RADIUS server.
     *
     * @return self
     */
    public function setProfileType($profile_type)
    {
        $allowedValues = $this->getProfileTypeAllowableValues();
        if (!is_null($profile_type) && !in_array($profile_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'profile_type', must be one of '%s'",
                    $profile_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profile_type'] = $profile_type;

        return $this;
    }

    /**
     * Gets ovrd_dur_mode
     *
     * @return string|null
     */
    public function getOvrdDurMode()
    {
        return $this->container['ovrd_dur_mode'];
    }

    /**
     * Sets ovrd_dur_mode
     *
     * @param string|null $ovrd_dur_mode Override duration mode.    constant:Constant mode.    ask:Prompt for duration when initiating an override.
     *
     * @return self
     */
    public function setOvrdDurMode($ovrd_dur_mode)
    {
        $allowedValues = $this->getOvrdDurModeAllowableValues();
        if (!is_null($ovrd_dur_mode) && !in_array($ovrd_dur_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ovrd_dur_mode', must be one of '%s'",
                    $ovrd_dur_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ovrd_dur_mode'] = $ovrd_dur_mode;

        return $this;
    }

    /**
     * Gets ovrd_dur
     *
     * @return string|null
     */
    public function getOvrdDur()
    {
        return $this->container['ovrd_dur'];
    }

    /**
     * Sets ovrd_dur
     *
     * @param string|null $ovrd_dur Override duration.
     *
     * @return self
     */
    public function setOvrdDur($ovrd_dur)
    {
        $this->container['ovrd_dur'] = $ovrd_dur;

        return $this;
    }

    /**
     * Gets profile_attribute
     *
     * @return string|null
     */
    public function getProfileAttribute()
    {
        return $this->container['profile_attribute'];
    }

    /**
     * Sets profile_attribute
     *
     * @param string|null $profile_attribute Profile attribute to retrieve from the RADIUS server.    User-Name:Use this attribute.    NAS-IP-Address:Use this attribute.    Framed-IP-Address:Use this attribute.    Framed-IP-Netmask:Use this attribute.    Filter-Id:Use this attribute.    Login-IP-Host:Use this attribute.    Reply-Message:Use this attribute.    Callback-Number:Use this attribute.    Callback-Id:Use this attribute.    Framed-Route:Use this attribute.    Framed-IPX-Network:Use this attribute.    Class:Use this attribute.    Called-Station-Id:Use this attribute.    Calling-Station-Id:Use this attribute.    NAS-Identifier:Use this attribute.    Proxy-State:Use this attribute.    Login-LAT-Service:Use this attribute.    Login-LAT-Node:Use this attribute.    Login-LAT-Group:Use this attribute.    Framed-AppleTalk-Zone:Use this attribute.    Acct-Session-Id:Use this attribute.    Acct-Multi-Session-Id:Use this attribute.
     *
     * @return self
     */
    public function setProfileAttribute($profile_attribute)
    {
        $allowedValues = $this->getProfileAttributeAllowableValues();
        if (!is_null($profile_attribute) && !in_array($profile_attribute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'profile_attribute', must be one of '%s'",
                    $profile_attribute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profile_attribute'] = $profile_attribute;

        return $this;
    }

    /**
     * Gets ovrd_user_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null
     */
    public function getOvrdUserGroup()
    {
        return $this->container['ovrd_user_group'];
    }

    /**
     * Sets ovrd_user_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null $ovrd_user_group User groups with permission to use the override.
     *
     * @return self
     */
    public function setOvrdUserGroup($ovrd_user_group)
    {

        if (!is_null($ovrd_user_group) && (count($ovrd_user_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_user_group when calling WebfilterProfileNameOverride., number of items must be less than or equal to 0.');
        }
        $this->container['ovrd_user_group'] = $ovrd_user_group;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameProfile[]|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameProfile[]|null $profile Web filter profile with permission to create overrides.
     *
     * @return self
     */
    public function setProfile($profile)
    {

        if (!is_null($profile) && (count($profile) > 0)) {
            throw new \InvalidArgumentException('invalid value for $profile when calling WebfilterProfileNameOverride., number of items must be less than or equal to 0.');
        }
        $this->container['profile'] = $profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


