<?php
/**
 * InlineObject276
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject276 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject276 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_276';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'action_type' => 'string',
        'tls_certificate' => 'string',
        'email_to' => '\Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameEmailTo[]',
        'email_from' => 'string',
        'email_subject' => 'string',
        'minimum_interval' => 'int',
        'delay' => 'int',
        'required' => 'string',
        'aws_api_id' => 'string',
        'aws_region' => 'string',
        'aws_domain' => 'string',
        'aws_api_stage' => 'string',
        'aws_api_path' => 'string',
        'aws_api_key' => 'string',
        'azure_app' => 'string',
        'azure_function' => 'string',
        'azure_domain' => 'string',
        'azure_function_authorization' => 'string',
        'azure_api_key' => 'string',
        'gcp_function_region' => 'string',
        'gcp_project' => 'string',
        'gcp_function_domain' => 'string',
        'gcp_function' => 'string',
        'alicloud_account_id' => 'string',
        'alicloud_region' => 'string',
        'alicloud_function_domain' => 'string',
        'alicloud_version' => 'string',
        'alicloud_service' => 'string',
        'alicloud_function' => 'string',
        'alicloud_function_authorization' => 'string',
        'alicloud_access_key_id' => 'string',
        'alicloud_access_key_secret' => 'string',
        'message' => 'string',
        'protocol' => 'string',
        'method' => 'string',
        'uri' => 'string',
        'http_body' => 'string',
        'port' => 'int',
        'headers' => '\Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameHeaders[]',
        'script' => 'string',
        'security_tag' => 'string',
        'sdn_connector' => '\Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameSdnConnector[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'action_type' => null,
        'tls_certificate' => null,
        'email_to' => null,
        'email_from' => null,
        'email_subject' => null,
        'minimum_interval' => null,
        'delay' => null,
        'required' => null,
        'aws_api_id' => null,
        'aws_region' => null,
        'aws_domain' => null,
        'aws_api_stage' => null,
        'aws_api_path' => null,
        'aws_api_key' => 'password',
        'azure_app' => null,
        'azure_function' => null,
        'azure_domain' => null,
        'azure_function_authorization' => null,
        'azure_api_key' => 'password',
        'gcp_function_region' => null,
        'gcp_project' => null,
        'gcp_function_domain' => null,
        'gcp_function' => null,
        'alicloud_account_id' => null,
        'alicloud_region' => null,
        'alicloud_function_domain' => null,
        'alicloud_version' => null,
        'alicloud_service' => null,
        'alicloud_function' => null,
        'alicloud_function_authorization' => null,
        'alicloud_access_key_id' => null,
        'alicloud_access_key_secret' => 'password',
        'message' => null,
        'protocol' => null,
        'method' => null,
        'uri' => null,
        'http_body' => null,
        'port' => null,
        'headers' => null,
        'script' => null,
        'security_tag' => null,
        'sdn_connector' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'action_type' => 'action-type',
        'tls_certificate' => 'tls-certificate',
        'email_to' => 'email-to',
        'email_from' => 'email-from',
        'email_subject' => 'email-subject',
        'minimum_interval' => 'minimum-interval',
        'delay' => 'delay',
        'required' => 'required',
        'aws_api_id' => 'aws-api-id',
        'aws_region' => 'aws-region',
        'aws_domain' => 'aws-domain',
        'aws_api_stage' => 'aws-api-stage',
        'aws_api_path' => 'aws-api-path',
        'aws_api_key' => 'aws-api-key',
        'azure_app' => 'azure-app',
        'azure_function' => 'azure-function',
        'azure_domain' => 'azure-domain',
        'azure_function_authorization' => 'azure-function-authorization',
        'azure_api_key' => 'azure-api-key',
        'gcp_function_region' => 'gcp-function-region',
        'gcp_project' => 'gcp-project',
        'gcp_function_domain' => 'gcp-function-domain',
        'gcp_function' => 'gcp-function',
        'alicloud_account_id' => 'alicloud-account-id',
        'alicloud_region' => 'alicloud-region',
        'alicloud_function_domain' => 'alicloud-function-domain',
        'alicloud_version' => 'alicloud-version',
        'alicloud_service' => 'alicloud-service',
        'alicloud_function' => 'alicloud-function',
        'alicloud_function_authorization' => 'alicloud-function-authorization',
        'alicloud_access_key_id' => 'alicloud-access-key-id',
        'alicloud_access_key_secret' => 'alicloud-access-key-secret',
        'message' => 'message',
        'protocol' => 'protocol',
        'method' => 'method',
        'uri' => 'uri',
        'http_body' => 'http-body',
        'port' => 'port',
        'headers' => 'headers',
        'script' => 'script',
        'security_tag' => 'security-tag',
        'sdn_connector' => 'sdn-connector'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'action_type' => 'setActionType',
        'tls_certificate' => 'setTlsCertificate',
        'email_to' => 'setEmailTo',
        'email_from' => 'setEmailFrom',
        'email_subject' => 'setEmailSubject',
        'minimum_interval' => 'setMinimumInterval',
        'delay' => 'setDelay',
        'required' => 'setRequired',
        'aws_api_id' => 'setAwsApiId',
        'aws_region' => 'setAwsRegion',
        'aws_domain' => 'setAwsDomain',
        'aws_api_stage' => 'setAwsApiStage',
        'aws_api_path' => 'setAwsApiPath',
        'aws_api_key' => 'setAwsApiKey',
        'azure_app' => 'setAzureApp',
        'azure_function' => 'setAzureFunction',
        'azure_domain' => 'setAzureDomain',
        'azure_function_authorization' => 'setAzureFunctionAuthorization',
        'azure_api_key' => 'setAzureApiKey',
        'gcp_function_region' => 'setGcpFunctionRegion',
        'gcp_project' => 'setGcpProject',
        'gcp_function_domain' => 'setGcpFunctionDomain',
        'gcp_function' => 'setGcpFunction',
        'alicloud_account_id' => 'setAlicloudAccountId',
        'alicloud_region' => 'setAlicloudRegion',
        'alicloud_function_domain' => 'setAlicloudFunctionDomain',
        'alicloud_version' => 'setAlicloudVersion',
        'alicloud_service' => 'setAlicloudService',
        'alicloud_function' => 'setAlicloudFunction',
        'alicloud_function_authorization' => 'setAlicloudFunctionAuthorization',
        'alicloud_access_key_id' => 'setAlicloudAccessKeyId',
        'alicloud_access_key_secret' => 'setAlicloudAccessKeySecret',
        'message' => 'setMessage',
        'protocol' => 'setProtocol',
        'method' => 'setMethod',
        'uri' => 'setUri',
        'http_body' => 'setHttpBody',
        'port' => 'setPort',
        'headers' => 'setHeaders',
        'script' => 'setScript',
        'security_tag' => 'setSecurityTag',
        'sdn_connector' => 'setSdnConnector'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'action_type' => 'getActionType',
        'tls_certificate' => 'getTlsCertificate',
        'email_to' => 'getEmailTo',
        'email_from' => 'getEmailFrom',
        'email_subject' => 'getEmailSubject',
        'minimum_interval' => 'getMinimumInterval',
        'delay' => 'getDelay',
        'required' => 'getRequired',
        'aws_api_id' => 'getAwsApiId',
        'aws_region' => 'getAwsRegion',
        'aws_domain' => 'getAwsDomain',
        'aws_api_stage' => 'getAwsApiStage',
        'aws_api_path' => 'getAwsApiPath',
        'aws_api_key' => 'getAwsApiKey',
        'azure_app' => 'getAzureApp',
        'azure_function' => 'getAzureFunction',
        'azure_domain' => 'getAzureDomain',
        'azure_function_authorization' => 'getAzureFunctionAuthorization',
        'azure_api_key' => 'getAzureApiKey',
        'gcp_function_region' => 'getGcpFunctionRegion',
        'gcp_project' => 'getGcpProject',
        'gcp_function_domain' => 'getGcpFunctionDomain',
        'gcp_function' => 'getGcpFunction',
        'alicloud_account_id' => 'getAlicloudAccountId',
        'alicloud_region' => 'getAlicloudRegion',
        'alicloud_function_domain' => 'getAlicloudFunctionDomain',
        'alicloud_version' => 'getAlicloudVersion',
        'alicloud_service' => 'getAlicloudService',
        'alicloud_function' => 'getAlicloudFunction',
        'alicloud_function_authorization' => 'getAlicloudFunctionAuthorization',
        'alicloud_access_key_id' => 'getAlicloudAccessKeyId',
        'alicloud_access_key_secret' => 'getAlicloudAccessKeySecret',
        'message' => 'getMessage',
        'protocol' => 'getProtocol',
        'method' => 'getMethod',
        'uri' => 'getUri',
        'http_body' => 'getHttpBody',
        'port' => 'getPort',
        'headers' => 'getHeaders',
        'script' => 'getScript',
        'security_tag' => 'getSecurityTag',
        'sdn_connector' => 'getSdnConnector'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTION_TYPE_EMAIL = 'email';
    const ACTION_TYPE_IOS_NOTIFICATION = 'ios-notification';
    const ACTION_TYPE_ALERT = 'alert';
    const ACTION_TYPE_DISABLE_SSID = 'disable-ssid';
    const ACTION_TYPE_QUARANTINE = 'quarantine';
    const ACTION_TYPE_QUARANTINE_FORTICLIENT = 'quarantine-forticlient';
    const ACTION_TYPE_QUARANTINE_NSX = 'quarantine-nsx';
    const ACTION_TYPE_QUARANTINE_FORTINAC = 'quarantine-fortinac';
    const ACTION_TYPE_BAN_IP = 'ban-ip';
    const ACTION_TYPE_AWS_LAMBDA = 'aws-lambda';
    const ACTION_TYPE_AZURE_FUNCTION = 'azure-function';
    const ACTION_TYPE_GOOGLE_CLOUD_FUNCTION = 'google-cloud-function';
    const ACTION_TYPE_ALICLOUD_FUNCTION = 'alicloud-function';
    const ACTION_TYPE_WEBHOOK = 'webhook';
    const ACTION_TYPE_CLI_SCRIPT = 'cli-script';
    const ACTION_TYPE_SLACK_NOTIFICATION = 'slack-notification';
    const REQUIRED_ENABLE = 'enable';
    const REQUIRED_DISABLE = 'disable';
    const AZURE_FUNCTION_AUTHORIZATION_ANONYMOUS = 'anonymous';
    const AZURE_FUNCTION_AUTHORIZATION__FUNCTION = 'function';
    const AZURE_FUNCTION_AUTHORIZATION_ADMIN = 'admin';
    const ALICLOUD_FUNCTION_AUTHORIZATION_ANONYMOUS = 'anonymous';
    const ALICLOUD_FUNCTION_AUTHORIZATION__FUNCTION = 'function';
    const PROTOCOL_HTTP = 'http';
    const PROTOCOL_HTTPS = 'https';
    const METHOD_POST = 'post';
    const METHOD_PUT = 'put';
    const METHOD_GET = 'get';
    const METHOD_PATCH = 'patch';
    const METHOD_DELETE = 'delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionTypeAllowableValues()
    {
        return [
            self::ACTION_TYPE_EMAIL,
            self::ACTION_TYPE_IOS_NOTIFICATION,
            self::ACTION_TYPE_ALERT,
            self::ACTION_TYPE_DISABLE_SSID,
            self::ACTION_TYPE_QUARANTINE,
            self::ACTION_TYPE_QUARANTINE_FORTICLIENT,
            self::ACTION_TYPE_QUARANTINE_NSX,
            self::ACTION_TYPE_QUARANTINE_FORTINAC,
            self::ACTION_TYPE_BAN_IP,
            self::ACTION_TYPE_AWS_LAMBDA,
            self::ACTION_TYPE_AZURE_FUNCTION,
            self::ACTION_TYPE_GOOGLE_CLOUD_FUNCTION,
            self::ACTION_TYPE_ALICLOUD_FUNCTION,
            self::ACTION_TYPE_WEBHOOK,
            self::ACTION_TYPE_CLI_SCRIPT,
            self::ACTION_TYPE_SLACK_NOTIFICATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequiredAllowableValues()
    {
        return [
            self::REQUIRED_ENABLE,
            self::REQUIRED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAzureFunctionAuthorizationAllowableValues()
    {
        return [
            self::AZURE_FUNCTION_AUTHORIZATION_ANONYMOUS,
            self::AZURE_FUNCTION_AUTHORIZATION__FUNCTION,
            self::AZURE_FUNCTION_AUTHORIZATION_ADMIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlicloudFunctionAuthorizationAllowableValues()
    {
        return [
            self::ALICLOUD_FUNCTION_AUTHORIZATION_ANONYMOUS,
            self::ALICLOUD_FUNCTION_AUTHORIZATION__FUNCTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_HTTP,
            self::PROTOCOL_HTTPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_POST,
            self::METHOD_PUT,
            self::METHOD_GET,
            self::METHOD_PATCH,
            self::METHOD_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['action_type'] = $data['action_type'] ?? null;
        $this->container['tls_certificate'] = $data['tls_certificate'] ?? null;
        $this->container['email_to'] = $data['email_to'] ?? null;
        $this->container['email_from'] = $data['email_from'] ?? null;
        $this->container['email_subject'] = $data['email_subject'] ?? null;
        $this->container['minimum_interval'] = $data['minimum_interval'] ?? null;
        $this->container['delay'] = $data['delay'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['aws_api_id'] = $data['aws_api_id'] ?? null;
        $this->container['aws_region'] = $data['aws_region'] ?? null;
        $this->container['aws_domain'] = $data['aws_domain'] ?? null;
        $this->container['aws_api_stage'] = $data['aws_api_stage'] ?? null;
        $this->container['aws_api_path'] = $data['aws_api_path'] ?? null;
        $this->container['aws_api_key'] = $data['aws_api_key'] ?? null;
        $this->container['azure_app'] = $data['azure_app'] ?? null;
        $this->container['azure_function'] = $data['azure_function'] ?? null;
        $this->container['azure_domain'] = $data['azure_domain'] ?? null;
        $this->container['azure_function_authorization'] = $data['azure_function_authorization'] ?? null;
        $this->container['azure_api_key'] = $data['azure_api_key'] ?? null;
        $this->container['gcp_function_region'] = $data['gcp_function_region'] ?? null;
        $this->container['gcp_project'] = $data['gcp_project'] ?? null;
        $this->container['gcp_function_domain'] = $data['gcp_function_domain'] ?? null;
        $this->container['gcp_function'] = $data['gcp_function'] ?? null;
        $this->container['alicloud_account_id'] = $data['alicloud_account_id'] ?? null;
        $this->container['alicloud_region'] = $data['alicloud_region'] ?? null;
        $this->container['alicloud_function_domain'] = $data['alicloud_function_domain'] ?? null;
        $this->container['alicloud_version'] = $data['alicloud_version'] ?? null;
        $this->container['alicloud_service'] = $data['alicloud_service'] ?? null;
        $this->container['alicloud_function'] = $data['alicloud_function'] ?? null;
        $this->container['alicloud_function_authorization'] = $data['alicloud_function_authorization'] ?? null;
        $this->container['alicloud_access_key_id'] = $data['alicloud_access_key_id'] ?? null;
        $this->container['alicloud_access_key_secret'] = $data['alicloud_access_key_secret'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['uri'] = $data['uri'] ?? null;
        $this->container['http_body'] = $data['http_body'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['headers'] = $data['headers'] ?? null;
        $this->container['script'] = $data['script'] ?? null;
        $this->container['security_tag'] = $data['security_tag'] ?? null;
        $this->container['sdn_connector'] = $data['sdn_connector'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getActionTypeAllowableValues();
        if (!is_null($this->container['action_type']) && !in_array($this->container['action_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_type', must be one of '%s'",
                $this->container['action_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tls_certificate']) && (mb_strlen($this->container['tls_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'tls_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['email_to']) && (count($this->container['email_to']) > 0)) {
            $invalidProperties[] = "invalid value for 'email_to', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['email_from']) && (mb_strlen($this->container['email_from']) > 127)) {
            $invalidProperties[] = "invalid value for 'email_from', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['email_subject']) && (mb_strlen($this->container['email_subject']) > 511)) {
            $invalidProperties[] = "invalid value for 'email_subject', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['minimum_interval']) && ($this->container['minimum_interval'] > 2592000)) {
            $invalidProperties[] = "invalid value for 'minimum_interval', must be smaller than or equal to 2592000.";
        }

        if (!is_null($this->container['minimum_interval']) && ($this->container['minimum_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimum_interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delay']) && ($this->container['delay'] > 3600)) {
            $invalidProperties[] = "invalid value for 'delay', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['delay']) && ($this->container['delay'] < 0)) {
            $invalidProperties[] = "invalid value for 'delay', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRequiredAllowableValues();
        if (!is_null($this->container['required']) && !in_array($this->container['required'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'required', must be one of '%s'",
                $this->container['required'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['aws_api_id']) && (mb_strlen($this->container['aws_api_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'aws_api_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['aws_region']) && (mb_strlen($this->container['aws_region']) > 35)) {
            $invalidProperties[] = "invalid value for 'aws_region', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['aws_domain']) && (mb_strlen($this->container['aws_domain']) > 63)) {
            $invalidProperties[] = "invalid value for 'aws_domain', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['aws_api_stage']) && (mb_strlen($this->container['aws_api_stage']) > 63)) {
            $invalidProperties[] = "invalid value for 'aws_api_stage', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['aws_api_path']) && (mb_strlen($this->container['aws_api_path']) > 63)) {
            $invalidProperties[] = "invalid value for 'aws_api_path', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['azure_app']) && (mb_strlen($this->container['azure_app']) > 63)) {
            $invalidProperties[] = "invalid value for 'azure_app', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['azure_function']) && (mb_strlen($this->container['azure_function']) > 63)) {
            $invalidProperties[] = "invalid value for 'azure_function', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['azure_domain']) && (mb_strlen($this->container['azure_domain']) > 63)) {
            $invalidProperties[] = "invalid value for 'azure_domain', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAzureFunctionAuthorizationAllowableValues();
        if (!is_null($this->container['azure_function_authorization']) && !in_array($this->container['azure_function_authorization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'azure_function_authorization', must be one of '%s'",
                $this->container['azure_function_authorization'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gcp_function_region']) && (mb_strlen($this->container['gcp_function_region']) > 63)) {
            $invalidProperties[] = "invalid value for 'gcp_function_region', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['gcp_project']) && (mb_strlen($this->container['gcp_project']) > 63)) {
            $invalidProperties[] = "invalid value for 'gcp_project', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['gcp_function_domain']) && (mb_strlen($this->container['gcp_function_domain']) > 63)) {
            $invalidProperties[] = "invalid value for 'gcp_function_domain', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['gcp_function']) && (mb_strlen($this->container['gcp_function']) > 63)) {
            $invalidProperties[] = "invalid value for 'gcp_function', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['alicloud_account_id']) && (mb_strlen($this->container['alicloud_account_id']) > 63)) {
            $invalidProperties[] = "invalid value for 'alicloud_account_id', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['alicloud_region']) && (mb_strlen($this->container['alicloud_region']) > 63)) {
            $invalidProperties[] = "invalid value for 'alicloud_region', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['alicloud_function_domain']) && (mb_strlen($this->container['alicloud_function_domain']) > 63)) {
            $invalidProperties[] = "invalid value for 'alicloud_function_domain', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['alicloud_version']) && (mb_strlen($this->container['alicloud_version']) > 63)) {
            $invalidProperties[] = "invalid value for 'alicloud_version', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['alicloud_service']) && (mb_strlen($this->container['alicloud_service']) > 128)) {
            $invalidProperties[] = "invalid value for 'alicloud_service', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['alicloud_function']) && (mb_strlen($this->container['alicloud_function']) > 128)) {
            $invalidProperties[] = "invalid value for 'alicloud_function', the character length must be smaller than or equal to 128.";
        }

        $allowedValues = $this->getAlicloudFunctionAuthorizationAllowableValues();
        if (!is_null($this->container['alicloud_function_authorization']) && !in_array($this->container['alicloud_function_authorization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'alicloud_function_authorization', must be one of '%s'",
                $this->container['alicloud_function_authorization'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['alicloud_access_key_id']) && (mb_strlen($this->container['alicloud_access_key_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'alicloud_access_key_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) > 1023)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be smaller than or equal to 1023.";
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uri']) && (mb_strlen($this->container['uri']) > 1023)) {
            $invalidProperties[] = "invalid value for 'uri', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['http_body']) && (mb_strlen($this->container['http_body']) > 1023)) {
            $invalidProperties[] = "invalid value for 'http_body', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['headers']) && (count($this->container['headers']) > 0)) {
            $invalidProperties[] = "invalid value for 'headers', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['script']) && (mb_strlen($this->container['script']) > 1023)) {
            $invalidProperties[] = "invalid value for 'script', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['security_tag']) && (mb_strlen($this->container['security_tag']) > 255)) {
            $invalidProperties[] = "invalid value for 'security_tag', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sdn_connector']) && (count($this->container['sdn_connector']) > 0)) {
            $invalidProperties[] = "invalid value for 'sdn_connector', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject276., must be smaller than or equal to 64.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string|null
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string|null $action_type Action type.    email:Send notification email.    ios-notification:Send push notification to FortiExplorer iOS.    alert:Generate FortiOS dashboard alert.    disable-ssid:Disable interface.    quarantine:Quarantine host.    quarantine-forticlient:Quarantine FortiClient by EMS.    quarantine-nsx:Quarantine NSX instance.    quarantine-fortinac:Quarantine host by FortiNAC.    ban-ip:Ban IP address.    aws-lambda:Send log data to integrated AWS service.    azure-function:Send log data to an Azure function.    google-cloud-function:Send log data to a Google Cloud function.    alicloud-function:Send log data to an AliCloud function.    webhook:Send an HTTP request.    cli-script:Run CLI script.    slack-notification:Send a notification message to a Slack incoming webhook.
     *
     * @return self
     */
    public function setActionType($action_type)
    {
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!is_null($action_type) && !in_array($action_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_type', must be one of '%s'",
                    $action_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets tls_certificate
     *
     * @return string|null
     */
    public function getTlsCertificate()
    {
        return $this->container['tls_certificate'];
    }

    /**
     * Sets tls_certificate
     *
     * @param string|null $tls_certificate Custom TLS certificate for API request.
     *
     * @return self
     */
    public function setTlsCertificate($tls_certificate)
    {
        if (!is_null($tls_certificate) && (mb_strlen($tls_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $tls_certificate when calling InlineObject276., must be smaller than or equal to 35.');
        }

        $this->container['tls_certificate'] = $tls_certificate;

        return $this;
    }

    /**
     * Gets email_to
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameEmailTo[]|null
     */
    public function getEmailTo()
    {
        return $this->container['email_to'];
    }

    /**
     * Sets email_to
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameEmailTo[]|null $email_to Email addresses.
     *
     * @return self
     */
    public function setEmailTo($email_to)
    {

        if (!is_null($email_to) && (count($email_to) > 0)) {
            throw new \InvalidArgumentException('invalid value for $email_to when calling InlineObject276., number of items must be less than or equal to 0.');
        }
        $this->container['email_to'] = $email_to;

        return $this;
    }

    /**
     * Gets email_from
     *
     * @return string|null
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string|null $email_from Email sender name.
     *
     * @return self
     */
    public function setEmailFrom($email_from)
    {
        if (!is_null($email_from) && (mb_strlen($email_from) > 127)) {
            throw new \InvalidArgumentException('invalid length for $email_from when calling InlineObject276., must be smaller than or equal to 127.');
        }

        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string|null
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string|null $email_subject Email subject.
     *
     * @return self
     */
    public function setEmailSubject($email_subject)
    {
        if (!is_null($email_subject) && (mb_strlen($email_subject) > 511)) {
            throw new \InvalidArgumentException('invalid length for $email_subject when calling InlineObject276., must be smaller than or equal to 511.');
        }

        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets minimum_interval
     *
     * @return int|null
     */
    public function getMinimumInterval()
    {
        return $this->container['minimum_interval'];
    }

    /**
     * Sets minimum_interval
     *
     * @param int|null $minimum_interval Limit execution to no more than once in this interval (in seconds).
     *
     * @return self
     */
    public function setMinimumInterval($minimum_interval)
    {

        if (!is_null($minimum_interval) && ($minimum_interval > 2592000)) {
            throw new \InvalidArgumentException('invalid value for $minimum_interval when calling InlineObject276., must be smaller than or equal to 2592000.');
        }
        if (!is_null($minimum_interval) && ($minimum_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_interval when calling InlineObject276., must be bigger than or equal to 0.');
        }

        $this->container['minimum_interval'] = $minimum_interval;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int|null
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int|null $delay Delay before execution (in seconds).
     *
     * @return self
     */
    public function setDelay($delay)
    {

        if (!is_null($delay) && ($delay > 3600)) {
            throw new \InvalidArgumentException('invalid value for $delay when calling InlineObject276., must be smaller than or equal to 3600.');
        }
        if (!is_null($delay) && ($delay < 0)) {
            throw new \InvalidArgumentException('invalid value for $delay when calling InlineObject276., must be bigger than or equal to 0.');
        }

        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets required
     *
     * @return string|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param string|null $required Required in action chain.    enable:Required in action chain.    disable:Not required in action chain.
     *
     * @return self
     */
    public function setRequired($required)
    {
        $allowedValues = $this->getRequiredAllowableValues();
        if (!is_null($required) && !in_array($required, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'required', must be one of '%s'",
                    $required,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets aws_api_id
     *
     * @return string|null
     */
    public function getAwsApiId()
    {
        return $this->container['aws_api_id'];
    }

    /**
     * Sets aws_api_id
     *
     * @param string|null $aws_api_id AWS API Gateway ID.
     *
     * @return self
     */
    public function setAwsApiId($aws_api_id)
    {
        if (!is_null($aws_api_id) && (mb_strlen($aws_api_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $aws_api_id when calling InlineObject276., must be smaller than or equal to 35.');
        }

        $this->container['aws_api_id'] = $aws_api_id;

        return $this;
    }

    /**
     * Gets aws_region
     *
     * @return string|null
     */
    public function getAwsRegion()
    {
        return $this->container['aws_region'];
    }

    /**
     * Sets aws_region
     *
     * @param string|null $aws_region AWS region.
     *
     * @return self
     */
    public function setAwsRegion($aws_region)
    {
        if (!is_null($aws_region) && (mb_strlen($aws_region) > 35)) {
            throw new \InvalidArgumentException('invalid length for $aws_region when calling InlineObject276., must be smaller than or equal to 35.');
        }

        $this->container['aws_region'] = $aws_region;

        return $this;
    }

    /**
     * Gets aws_domain
     *
     * @return string|null
     */
    public function getAwsDomain()
    {
        return $this->container['aws_domain'];
    }

    /**
     * Sets aws_domain
     *
     * @param string|null $aws_domain AWS domain.
     *
     * @return self
     */
    public function setAwsDomain($aws_domain)
    {
        if (!is_null($aws_domain) && (mb_strlen($aws_domain) > 63)) {
            throw new \InvalidArgumentException('invalid length for $aws_domain when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['aws_domain'] = $aws_domain;

        return $this;
    }

    /**
     * Gets aws_api_stage
     *
     * @return string|null
     */
    public function getAwsApiStage()
    {
        return $this->container['aws_api_stage'];
    }

    /**
     * Sets aws_api_stage
     *
     * @param string|null $aws_api_stage AWS API Gateway deployment stage name.
     *
     * @return self
     */
    public function setAwsApiStage($aws_api_stage)
    {
        if (!is_null($aws_api_stage) && (mb_strlen($aws_api_stage) > 63)) {
            throw new \InvalidArgumentException('invalid length for $aws_api_stage when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['aws_api_stage'] = $aws_api_stage;

        return $this;
    }

    /**
     * Gets aws_api_path
     *
     * @return string|null
     */
    public function getAwsApiPath()
    {
        return $this->container['aws_api_path'];
    }

    /**
     * Sets aws_api_path
     *
     * @param string|null $aws_api_path AWS API Gateway path.
     *
     * @return self
     */
    public function setAwsApiPath($aws_api_path)
    {
        if (!is_null($aws_api_path) && (mb_strlen($aws_api_path) > 63)) {
            throw new \InvalidArgumentException('invalid length for $aws_api_path when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['aws_api_path'] = $aws_api_path;

        return $this;
    }

    /**
     * Gets aws_api_key
     *
     * @return string|null
     */
    public function getAwsApiKey()
    {
        return $this->container['aws_api_key'];
    }

    /**
     * Sets aws_api_key
     *
     * @param string|null $aws_api_key AWS API Gateway API key.
     *
     * @return self
     */
    public function setAwsApiKey($aws_api_key)
    {
        $this->container['aws_api_key'] = $aws_api_key;

        return $this;
    }

    /**
     * Gets azure_app
     *
     * @return string|null
     */
    public function getAzureApp()
    {
        return $this->container['azure_app'];
    }

    /**
     * Sets azure_app
     *
     * @param string|null $azure_app Azure function application name.
     *
     * @return self
     */
    public function setAzureApp($azure_app)
    {
        if (!is_null($azure_app) && (mb_strlen($azure_app) > 63)) {
            throw new \InvalidArgumentException('invalid length for $azure_app when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['azure_app'] = $azure_app;

        return $this;
    }

    /**
     * Gets azure_function
     *
     * @return string|null
     */
    public function getAzureFunction()
    {
        return $this->container['azure_function'];
    }

    /**
     * Sets azure_function
     *
     * @param string|null $azure_function Azure function name.
     *
     * @return self
     */
    public function setAzureFunction($azure_function)
    {
        if (!is_null($azure_function) && (mb_strlen($azure_function) > 63)) {
            throw new \InvalidArgumentException('invalid length for $azure_function when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['azure_function'] = $azure_function;

        return $this;
    }

    /**
     * Gets azure_domain
     *
     * @return string|null
     */
    public function getAzureDomain()
    {
        return $this->container['azure_domain'];
    }

    /**
     * Sets azure_domain
     *
     * @param string|null $azure_domain Azure function domain.
     *
     * @return self
     */
    public function setAzureDomain($azure_domain)
    {
        if (!is_null($azure_domain) && (mb_strlen($azure_domain) > 63)) {
            throw new \InvalidArgumentException('invalid length for $azure_domain when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['azure_domain'] = $azure_domain;

        return $this;
    }

    /**
     * Gets azure_function_authorization
     *
     * @return string|null
     */
    public function getAzureFunctionAuthorization()
    {
        return $this->container['azure_function_authorization'];
    }

    /**
     * Sets azure_function_authorization
     *
     * @param string|null $azure_function_authorization Azure function authorization level.    anonymous:Anonymous authorization level (No authorization required).    function:Function authorization level (Function or Host Key required).    admin:Admin authorization level (Master Host Key required).
     *
     * @return self
     */
    public function setAzureFunctionAuthorization($azure_function_authorization)
    {
        $allowedValues = $this->getAzureFunctionAuthorizationAllowableValues();
        if (!is_null($azure_function_authorization) && !in_array($azure_function_authorization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'azure_function_authorization', must be one of '%s'",
                    $azure_function_authorization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['azure_function_authorization'] = $azure_function_authorization;

        return $this;
    }

    /**
     * Gets azure_api_key
     *
     * @return string|null
     */
    public function getAzureApiKey()
    {
        return $this->container['azure_api_key'];
    }

    /**
     * Sets azure_api_key
     *
     * @param string|null $azure_api_key Azure function API key.
     *
     * @return self
     */
    public function setAzureApiKey($azure_api_key)
    {
        $this->container['azure_api_key'] = $azure_api_key;

        return $this;
    }

    /**
     * Gets gcp_function_region
     *
     * @return string|null
     */
    public function getGcpFunctionRegion()
    {
        return $this->container['gcp_function_region'];
    }

    /**
     * Sets gcp_function_region
     *
     * @param string|null $gcp_function_region Google Cloud function region.
     *
     * @return self
     */
    public function setGcpFunctionRegion($gcp_function_region)
    {
        if (!is_null($gcp_function_region) && (mb_strlen($gcp_function_region) > 63)) {
            throw new \InvalidArgumentException('invalid length for $gcp_function_region when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['gcp_function_region'] = $gcp_function_region;

        return $this;
    }

    /**
     * Gets gcp_project
     *
     * @return string|null
     */
    public function getGcpProject()
    {
        return $this->container['gcp_project'];
    }

    /**
     * Sets gcp_project
     *
     * @param string|null $gcp_project Google Cloud Platform project name.
     *
     * @return self
     */
    public function setGcpProject($gcp_project)
    {
        if (!is_null($gcp_project) && (mb_strlen($gcp_project) > 63)) {
            throw new \InvalidArgumentException('invalid length for $gcp_project when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['gcp_project'] = $gcp_project;

        return $this;
    }

    /**
     * Gets gcp_function_domain
     *
     * @return string|null
     */
    public function getGcpFunctionDomain()
    {
        return $this->container['gcp_function_domain'];
    }

    /**
     * Sets gcp_function_domain
     *
     * @param string|null $gcp_function_domain Google Cloud function domain.
     *
     * @return self
     */
    public function setGcpFunctionDomain($gcp_function_domain)
    {
        if (!is_null($gcp_function_domain) && (mb_strlen($gcp_function_domain) > 63)) {
            throw new \InvalidArgumentException('invalid length for $gcp_function_domain when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['gcp_function_domain'] = $gcp_function_domain;

        return $this;
    }

    /**
     * Gets gcp_function
     *
     * @return string|null
     */
    public function getGcpFunction()
    {
        return $this->container['gcp_function'];
    }

    /**
     * Sets gcp_function
     *
     * @param string|null $gcp_function Google Cloud function name.
     *
     * @return self
     */
    public function setGcpFunction($gcp_function)
    {
        if (!is_null($gcp_function) && (mb_strlen($gcp_function) > 63)) {
            throw new \InvalidArgumentException('invalid length for $gcp_function when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['gcp_function'] = $gcp_function;

        return $this;
    }

    /**
     * Gets alicloud_account_id
     *
     * @return string|null
     */
    public function getAlicloudAccountId()
    {
        return $this->container['alicloud_account_id'];
    }

    /**
     * Sets alicloud_account_id
     *
     * @param string|null $alicloud_account_id AliCloud account ID.
     *
     * @return self
     */
    public function setAlicloudAccountId($alicloud_account_id)
    {
        if (!is_null($alicloud_account_id) && (mb_strlen($alicloud_account_id) > 63)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_account_id when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['alicloud_account_id'] = $alicloud_account_id;

        return $this;
    }

    /**
     * Gets alicloud_region
     *
     * @return string|null
     */
    public function getAlicloudRegion()
    {
        return $this->container['alicloud_region'];
    }

    /**
     * Sets alicloud_region
     *
     * @param string|null $alicloud_region AliCloud region.
     *
     * @return self
     */
    public function setAlicloudRegion($alicloud_region)
    {
        if (!is_null($alicloud_region) && (mb_strlen($alicloud_region) > 63)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_region when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['alicloud_region'] = $alicloud_region;

        return $this;
    }

    /**
     * Gets alicloud_function_domain
     *
     * @return string|null
     */
    public function getAlicloudFunctionDomain()
    {
        return $this->container['alicloud_function_domain'];
    }

    /**
     * Sets alicloud_function_domain
     *
     * @param string|null $alicloud_function_domain AliCloud function domain.
     *
     * @return self
     */
    public function setAlicloudFunctionDomain($alicloud_function_domain)
    {
        if (!is_null($alicloud_function_domain) && (mb_strlen($alicloud_function_domain) > 63)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_function_domain when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['alicloud_function_domain'] = $alicloud_function_domain;

        return $this;
    }

    /**
     * Gets alicloud_version
     *
     * @return string|null
     */
    public function getAlicloudVersion()
    {
        return $this->container['alicloud_version'];
    }

    /**
     * Sets alicloud_version
     *
     * @param string|null $alicloud_version AliCloud version.
     *
     * @return self
     */
    public function setAlicloudVersion($alicloud_version)
    {
        if (!is_null($alicloud_version) && (mb_strlen($alicloud_version) > 63)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_version when calling InlineObject276., must be smaller than or equal to 63.');
        }

        $this->container['alicloud_version'] = $alicloud_version;

        return $this;
    }

    /**
     * Gets alicloud_service
     *
     * @return string|null
     */
    public function getAlicloudService()
    {
        return $this->container['alicloud_service'];
    }

    /**
     * Sets alicloud_service
     *
     * @param string|null $alicloud_service AliCloud service name.
     *
     * @return self
     */
    public function setAlicloudService($alicloud_service)
    {
        if (!is_null($alicloud_service) && (mb_strlen($alicloud_service) > 128)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_service when calling InlineObject276., must be smaller than or equal to 128.');
        }

        $this->container['alicloud_service'] = $alicloud_service;

        return $this;
    }

    /**
     * Gets alicloud_function
     *
     * @return string|null
     */
    public function getAlicloudFunction()
    {
        return $this->container['alicloud_function'];
    }

    /**
     * Sets alicloud_function
     *
     * @param string|null $alicloud_function AliCloud function name.
     *
     * @return self
     */
    public function setAlicloudFunction($alicloud_function)
    {
        if (!is_null($alicloud_function) && (mb_strlen($alicloud_function) > 128)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_function when calling InlineObject276., must be smaller than or equal to 128.');
        }

        $this->container['alicloud_function'] = $alicloud_function;

        return $this;
    }

    /**
     * Gets alicloud_function_authorization
     *
     * @return string|null
     */
    public function getAlicloudFunctionAuthorization()
    {
        return $this->container['alicloud_function_authorization'];
    }

    /**
     * Sets alicloud_function_authorization
     *
     * @param string|null $alicloud_function_authorization AliCloud function authorization type.    anonymous:Anonymous authorization (No authorization required).    function:Function authorization (Authorization required).
     *
     * @return self
     */
    public function setAlicloudFunctionAuthorization($alicloud_function_authorization)
    {
        $allowedValues = $this->getAlicloudFunctionAuthorizationAllowableValues();
        if (!is_null($alicloud_function_authorization) && !in_array($alicloud_function_authorization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'alicloud_function_authorization', must be one of '%s'",
                    $alicloud_function_authorization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alicloud_function_authorization'] = $alicloud_function_authorization;

        return $this;
    }

    /**
     * Gets alicloud_access_key_id
     *
     * @return string|null
     */
    public function getAlicloudAccessKeyId()
    {
        return $this->container['alicloud_access_key_id'];
    }

    /**
     * Sets alicloud_access_key_id
     *
     * @param string|null $alicloud_access_key_id AliCloud AccessKey ID.
     *
     * @return self
     */
    public function setAlicloudAccessKeyId($alicloud_access_key_id)
    {
        if (!is_null($alicloud_access_key_id) && (mb_strlen($alicloud_access_key_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $alicloud_access_key_id when calling InlineObject276., must be smaller than or equal to 35.');
        }

        $this->container['alicloud_access_key_id'] = $alicloud_access_key_id;

        return $this;
    }

    /**
     * Gets alicloud_access_key_secret
     *
     * @return string|null
     */
    public function getAlicloudAccessKeySecret()
    {
        return $this->container['alicloud_access_key_secret'];
    }

    /**
     * Sets alicloud_access_key_secret
     *
     * @param string|null $alicloud_access_key_secret AliCloud AccessKey secret.
     *
     * @return self
     */
    public function setAlicloudAccessKeySecret($alicloud_access_key_secret)
    {
        $this->container['alicloud_access_key_secret'] = $alicloud_access_key_secret;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Message content.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (!is_null($message) && (mb_strlen($message) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $message when calling InlineObject276., must be smaller than or equal to 1023.');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Request protocol.    http:HTTP.    https:HTTPS.
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method Request method (POST, PUT, GET, PATCH or DELETE).    post:POST.    put:PUT.    get:GET.    patch:PATCH.    delete:DELETE.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri Request API URI.
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (!is_null($uri) && (mb_strlen($uri) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $uri when calling InlineObject276., must be smaller than or equal to 1023.');
        }

        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets http_body
     *
     * @return string|null
     */
    public function getHttpBody()
    {
        return $this->container['http_body'];
    }

    /**
     * Sets http_body
     *
     * @param string|null $http_body Request body (if necessary). Should be serialized json string.
     *
     * @return self
     */
    public function setHttpBody($http_body)
    {
        if (!is_null($http_body) && (mb_strlen($http_body) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $http_body when calling InlineObject276., must be smaller than or equal to 1023.');
        }

        $this->container['http_body'] = $http_body;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Protocol port.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject276., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject276., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameHeaders[]|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameHeaders[]|null $headers Request headers.
     *
     * @return self
     */
    public function setHeaders($headers)
    {

        if (!is_null($headers) && (count($headers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $headers when calling InlineObject276., number of items must be less than or equal to 0.');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string|null
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string|null $script CLI script.
     *
     * @return self
     */
    public function setScript($script)
    {
        if (!is_null($script) && (mb_strlen($script) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $script when calling InlineObject276., must be smaller than or equal to 1023.');
        }

        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets security_tag
     *
     * @return string|null
     */
    public function getSecurityTag()
    {
        return $this->container['security_tag'];
    }

    /**
     * Sets security_tag
     *
     * @param string|null $security_tag NSX security tag.
     *
     * @return self
     */
    public function setSecurityTag($security_tag)
    {
        if (!is_null($security_tag) && (mb_strlen($security_tag) > 255)) {
            throw new \InvalidArgumentException('invalid length for $security_tag when calling InlineObject276., must be smaller than or equal to 255.');
        }

        $this->container['security_tag'] = $security_tag;

        return $this;
    }

    /**
     * Gets sdn_connector
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameSdnConnector[]|null
     */
    public function getSdnConnector()
    {
        return $this->container['sdn_connector'];
    }

    /**
     * Sets sdn_connector
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAutomationActionNameSdnConnector[]|null $sdn_connector NSX SDN connector names.
     *
     * @return self
     */
    public function setSdnConnector($sdn_connector)
    {

        if (!is_null($sdn_connector) && (count($sdn_connector) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sdn_connector when calling InlineObject276., number of items must be less than or equal to 0.');
        }
        $this->container['sdn_connector'] = $sdn_connector;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


