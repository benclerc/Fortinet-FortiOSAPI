<?php
/**
 * InlineObject468
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject468 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject468 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_468';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ocsp_status' => 'string',
        'ocsp_option' => 'string',
        'ssl_ocsp_source_ip' => 'string',
        'ocsp_default_server' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string',
        'check_ca_cert' => 'string',
        'check_ca_chain' => 'string',
        'subject_match' => 'string',
        'cn_match' => 'string',
        'strict_crl_check' => 'string',
        'strict_ocsp_check' => 'string',
        'ssl_min_proto_version' => 'string',
        'cmp_save_extra_certs' => 'string',
        'cmp_key_usage_checking' => 'string',
        'certname_rsa1024' => 'string',
        'certname_rsa2048' => 'string',
        'certname_rsa4096' => 'string',
        'certname_dsa1024' => 'string',
        'certname_dsa2048' => 'string',
        'certname_ecdsa256' => 'string',
        'certname_ecdsa384' => 'string',
        'certname_ecdsa521' => 'string',
        'certname_ed25519' => 'string',
        'certname_ed448' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ocsp_status' => null,
        'ocsp_option' => null,
        'ssl_ocsp_source_ip' => 'ipv4',
        'ocsp_default_server' => null,
        'interface_select_method' => null,
        'interface' => null,
        'check_ca_cert' => null,
        'check_ca_chain' => null,
        'subject_match' => null,
        'cn_match' => null,
        'strict_crl_check' => null,
        'strict_ocsp_check' => null,
        'ssl_min_proto_version' => null,
        'cmp_save_extra_certs' => null,
        'cmp_key_usage_checking' => null,
        'certname_rsa1024' => null,
        'certname_rsa2048' => null,
        'certname_rsa4096' => null,
        'certname_dsa1024' => null,
        'certname_dsa2048' => null,
        'certname_ecdsa256' => null,
        'certname_ecdsa384' => null,
        'certname_ecdsa521' => null,
        'certname_ed25519' => null,
        'certname_ed448' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ocsp_status' => 'ocsp-status',
        'ocsp_option' => 'ocsp-option',
        'ssl_ocsp_source_ip' => 'ssl-ocsp-source-ip',
        'ocsp_default_server' => 'ocsp-default-server',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface',
        'check_ca_cert' => 'check-ca-cert',
        'check_ca_chain' => 'check-ca-chain',
        'subject_match' => 'subject-match',
        'cn_match' => 'cn-match',
        'strict_crl_check' => 'strict-crl-check',
        'strict_ocsp_check' => 'strict-ocsp-check',
        'ssl_min_proto_version' => 'ssl-min-proto-version',
        'cmp_save_extra_certs' => 'cmp-save-extra-certs',
        'cmp_key_usage_checking' => 'cmp-key-usage-checking',
        'certname_rsa1024' => 'certname-rsa1024',
        'certname_rsa2048' => 'certname-rsa2048',
        'certname_rsa4096' => 'certname-rsa4096',
        'certname_dsa1024' => 'certname-dsa1024',
        'certname_dsa2048' => 'certname-dsa2048',
        'certname_ecdsa256' => 'certname-ecdsa256',
        'certname_ecdsa384' => 'certname-ecdsa384',
        'certname_ecdsa521' => 'certname-ecdsa521',
        'certname_ed25519' => 'certname-ed25519',
        'certname_ed448' => 'certname-ed448'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ocsp_status' => 'setOcspStatus',
        'ocsp_option' => 'setOcspOption',
        'ssl_ocsp_source_ip' => 'setSslOcspSourceIp',
        'ocsp_default_server' => 'setOcspDefaultServer',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface',
        'check_ca_cert' => 'setCheckCaCert',
        'check_ca_chain' => 'setCheckCaChain',
        'subject_match' => 'setSubjectMatch',
        'cn_match' => 'setCnMatch',
        'strict_crl_check' => 'setStrictCrlCheck',
        'strict_ocsp_check' => 'setStrictOcspCheck',
        'ssl_min_proto_version' => 'setSslMinProtoVersion',
        'cmp_save_extra_certs' => 'setCmpSaveExtraCerts',
        'cmp_key_usage_checking' => 'setCmpKeyUsageChecking',
        'certname_rsa1024' => 'setCertnameRsa1024',
        'certname_rsa2048' => 'setCertnameRsa2048',
        'certname_rsa4096' => 'setCertnameRsa4096',
        'certname_dsa1024' => 'setCertnameDsa1024',
        'certname_dsa2048' => 'setCertnameDsa2048',
        'certname_ecdsa256' => 'setCertnameEcdsa256',
        'certname_ecdsa384' => 'setCertnameEcdsa384',
        'certname_ecdsa521' => 'setCertnameEcdsa521',
        'certname_ed25519' => 'setCertnameEd25519',
        'certname_ed448' => 'setCertnameEd448'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ocsp_status' => 'getOcspStatus',
        'ocsp_option' => 'getOcspOption',
        'ssl_ocsp_source_ip' => 'getSslOcspSourceIp',
        'ocsp_default_server' => 'getOcspDefaultServer',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface',
        'check_ca_cert' => 'getCheckCaCert',
        'check_ca_chain' => 'getCheckCaChain',
        'subject_match' => 'getSubjectMatch',
        'cn_match' => 'getCnMatch',
        'strict_crl_check' => 'getStrictCrlCheck',
        'strict_ocsp_check' => 'getStrictOcspCheck',
        'ssl_min_proto_version' => 'getSslMinProtoVersion',
        'cmp_save_extra_certs' => 'getCmpSaveExtraCerts',
        'cmp_key_usage_checking' => 'getCmpKeyUsageChecking',
        'certname_rsa1024' => 'getCertnameRsa1024',
        'certname_rsa2048' => 'getCertnameRsa2048',
        'certname_rsa4096' => 'getCertnameRsa4096',
        'certname_dsa1024' => 'getCertnameDsa1024',
        'certname_dsa2048' => 'getCertnameDsa2048',
        'certname_ecdsa256' => 'getCertnameEcdsa256',
        'certname_ecdsa384' => 'getCertnameEcdsa384',
        'certname_ecdsa521' => 'getCertnameEcdsa521',
        'certname_ed25519' => 'getCertnameEd25519',
        'certname_ed448' => 'getCertnameEd448'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OCSP_STATUS_ENABLE = 'enable';
    const OCSP_STATUS_DISABLE = 'disable';
    const OCSP_OPTION_CERTIFICATE = 'certificate';
    const OCSP_OPTION_SERVER = 'server';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    const CHECK_CA_CERT_ENABLE = 'enable';
    const CHECK_CA_CERT_DISABLE = 'disable';
    const CHECK_CA_CHAIN_ENABLE = 'enable';
    const CHECK_CA_CHAIN_DISABLE = 'disable';
    const SUBJECT_MATCH_SUBSTRING = 'substring';
    const SUBJECT_MATCH_VALUE = 'value';
    const CN_MATCH_SUBSTRING = 'substring';
    const CN_MATCH_VALUE = 'value';
    const STRICT_CRL_CHECK_ENABLE = 'enable';
    const STRICT_CRL_CHECK_DISABLE = 'disable';
    const STRICT_OCSP_CHECK_ENABLE = 'enable';
    const STRICT_OCSP_CHECK_DISABLE = 'disable';
    const SSL_MIN_PROTO_VERSION__DEFAULT = 'default';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    const CMP_SAVE_EXTRA_CERTS_ENABLE = 'enable';
    const CMP_SAVE_EXTRA_CERTS_DISABLE = 'disable';
    const CMP_KEY_USAGE_CHECKING_ENABLE = 'enable';
    const CMP_KEY_USAGE_CHECKING_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOcspStatusAllowableValues()
    {
        return [
            self::OCSP_STATUS_ENABLE,
            self::OCSP_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOcspOptionAllowableValues()
    {
        return [
            self::OCSP_OPTION_CERTIFICATE,
            self::OCSP_OPTION_SERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckCaCertAllowableValues()
    {
        return [
            self::CHECK_CA_CERT_ENABLE,
            self::CHECK_CA_CERT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckCaChainAllowableValues()
    {
        return [
            self::CHECK_CA_CHAIN_ENABLE,
            self::CHECK_CA_CHAIN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubjectMatchAllowableValues()
    {
        return [
            self::SUBJECT_MATCH_SUBSTRING,
            self::SUBJECT_MATCH_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCnMatchAllowableValues()
    {
        return [
            self::CN_MATCH_SUBSTRING,
            self::CN_MATCH_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictCrlCheckAllowableValues()
    {
        return [
            self::STRICT_CRL_CHECK_ENABLE,
            self::STRICT_CRL_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictOcspCheckAllowableValues()
    {
        return [
            self::STRICT_OCSP_CHECK_ENABLE,
            self::STRICT_OCSP_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION__DEFAULT,
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCmpSaveExtraCertsAllowableValues()
    {
        return [
            self::CMP_SAVE_EXTRA_CERTS_ENABLE,
            self::CMP_SAVE_EXTRA_CERTS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCmpKeyUsageCheckingAllowableValues()
    {
        return [
            self::CMP_KEY_USAGE_CHECKING_ENABLE,
            self::CMP_KEY_USAGE_CHECKING_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ocsp_status'] = $data['ocsp_status'] ?? null;
        $this->container['ocsp_option'] = $data['ocsp_option'] ?? null;
        $this->container['ssl_ocsp_source_ip'] = $data['ssl_ocsp_source_ip'] ?? null;
        $this->container['ocsp_default_server'] = $data['ocsp_default_server'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['check_ca_cert'] = $data['check_ca_cert'] ?? null;
        $this->container['check_ca_chain'] = $data['check_ca_chain'] ?? null;
        $this->container['subject_match'] = $data['subject_match'] ?? null;
        $this->container['cn_match'] = $data['cn_match'] ?? null;
        $this->container['strict_crl_check'] = $data['strict_crl_check'] ?? null;
        $this->container['strict_ocsp_check'] = $data['strict_ocsp_check'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
        $this->container['cmp_save_extra_certs'] = $data['cmp_save_extra_certs'] ?? null;
        $this->container['cmp_key_usage_checking'] = $data['cmp_key_usage_checking'] ?? null;
        $this->container['certname_rsa1024'] = $data['certname_rsa1024'] ?? null;
        $this->container['certname_rsa2048'] = $data['certname_rsa2048'] ?? null;
        $this->container['certname_rsa4096'] = $data['certname_rsa4096'] ?? null;
        $this->container['certname_dsa1024'] = $data['certname_dsa1024'] ?? null;
        $this->container['certname_dsa2048'] = $data['certname_dsa2048'] ?? null;
        $this->container['certname_ecdsa256'] = $data['certname_ecdsa256'] ?? null;
        $this->container['certname_ecdsa384'] = $data['certname_ecdsa384'] ?? null;
        $this->container['certname_ecdsa521'] = $data['certname_ecdsa521'] ?? null;
        $this->container['certname_ed25519'] = $data['certname_ed25519'] ?? null;
        $this->container['certname_ed448'] = $data['certname_ed448'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOcspStatusAllowableValues();
        if (!is_null($this->container['ocsp_status']) && !in_array($this->container['ocsp_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ocsp_status', must be one of '%s'",
                $this->container['ocsp_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOcspOptionAllowableValues();
        if (!is_null($this->container['ocsp_option']) && !in_array($this->container['ocsp_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ocsp_option', must be one of '%s'",
                $this->container['ocsp_option'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ocsp_default_server']) && (mb_strlen($this->container['ocsp_default_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ocsp_default_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getCheckCaCertAllowableValues();
        if (!is_null($this->container['check_ca_cert']) && !in_array($this->container['check_ca_cert'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_ca_cert', must be one of '%s'",
                $this->container['check_ca_cert'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckCaChainAllowableValues();
        if (!is_null($this->container['check_ca_chain']) && !in_array($this->container['check_ca_chain'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_ca_chain', must be one of '%s'",
                $this->container['check_ca_chain'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubjectMatchAllowableValues();
        if (!is_null($this->container['subject_match']) && !in_array($this->container['subject_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subject_match', must be one of '%s'",
                $this->container['subject_match'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCnMatchAllowableValues();
        if (!is_null($this->container['cn_match']) && !in_array($this->container['cn_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cn_match', must be one of '%s'",
                $this->container['cn_match'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictCrlCheckAllowableValues();
        if (!is_null($this->container['strict_crl_check']) && !in_array($this->container['strict_crl_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_crl_check', must be one of '%s'",
                $this->container['strict_crl_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictOcspCheckAllowableValues();
        if (!is_null($this->container['strict_ocsp_check']) && !in_array($this->container['strict_ocsp_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_ocsp_check', must be one of '%s'",
                $this->container['strict_ocsp_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCmpSaveExtraCertsAllowableValues();
        if (!is_null($this->container['cmp_save_extra_certs']) && !in_array($this->container['cmp_save_extra_certs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cmp_save_extra_certs', must be one of '%s'",
                $this->container['cmp_save_extra_certs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCmpKeyUsageCheckingAllowableValues();
        if (!is_null($this->container['cmp_key_usage_checking']) && !in_array($this->container['cmp_key_usage_checking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cmp_key_usage_checking', must be one of '%s'",
                $this->container['cmp_key_usage_checking'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['certname_rsa1024']) && (mb_strlen($this->container['certname_rsa1024']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_rsa1024', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_rsa2048']) && (mb_strlen($this->container['certname_rsa2048']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_rsa2048', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_rsa4096']) && (mb_strlen($this->container['certname_rsa4096']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_rsa4096', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_dsa1024']) && (mb_strlen($this->container['certname_dsa1024']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_dsa1024', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_dsa2048']) && (mb_strlen($this->container['certname_dsa2048']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_dsa2048', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_ecdsa256']) && (mb_strlen($this->container['certname_ecdsa256']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_ecdsa256', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_ecdsa384']) && (mb_strlen($this->container['certname_ecdsa384']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_ecdsa384', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_ecdsa521']) && (mb_strlen($this->container['certname_ecdsa521']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_ecdsa521', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_ed25519']) && (mb_strlen($this->container['certname_ed25519']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_ed25519', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['certname_ed448']) && (mb_strlen($this->container['certname_ed448']) > 35)) {
            $invalidProperties[] = "invalid value for 'certname_ed448', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ocsp_status
     *
     * @return string|null
     */
    public function getOcspStatus()
    {
        return $this->container['ocsp_status'];
    }

    /**
     * Sets ocsp_status
     *
     * @param string|null $ocsp_status Enable/disable receiving certificates using the OCSP.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setOcspStatus($ocsp_status)
    {
        $allowedValues = $this->getOcspStatusAllowableValues();
        if (!is_null($ocsp_status) && !in_array($ocsp_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ocsp_status', must be one of '%s'",
                    $ocsp_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ocsp_status'] = $ocsp_status;

        return $this;
    }

    /**
     * Gets ocsp_option
     *
     * @return string|null
     */
    public function getOcspOption()
    {
        return $this->container['ocsp_option'];
    }

    /**
     * Sets ocsp_option
     *
     * @param string|null $ocsp_option Specify whether the OCSP URL is from certificate or configured OCSP server.    certificate:Use URL from certificate.    server:Use URL from configured OCSP server.
     *
     * @return self
     */
    public function setOcspOption($ocsp_option)
    {
        $allowedValues = $this->getOcspOptionAllowableValues();
        if (!is_null($ocsp_option) && !in_array($ocsp_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ocsp_option', must be one of '%s'",
                    $ocsp_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ocsp_option'] = $ocsp_option;

        return $this;
    }

    /**
     * Gets ssl_ocsp_source_ip
     *
     * @return string|null
     */
    public function getSslOcspSourceIp()
    {
        return $this->container['ssl_ocsp_source_ip'];
    }

    /**
     * Sets ssl_ocsp_source_ip
     *
     * @param string|null $ssl_ocsp_source_ip Source IP address to use to communicate with the OCSP server.
     *
     * @return self
     */
    public function setSslOcspSourceIp($ssl_ocsp_source_ip)
    {
        $this->container['ssl_ocsp_source_ip'] = $ssl_ocsp_source_ip;

        return $this;
    }

    /**
     * Gets ocsp_default_server
     *
     * @return string|null
     */
    public function getOcspDefaultServer()
    {
        return $this->container['ocsp_default_server'];
    }

    /**
     * Sets ocsp_default_server
     *
     * @param string|null $ocsp_default_server Default OCSP server.
     *
     * @return self
     */
    public function setOcspDefaultServer($ocsp_default_server)
    {
        if (!is_null($ocsp_default_server) && (mb_strlen($ocsp_default_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ocsp_default_server when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['ocsp_default_server'] = $ocsp_default_server;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject468., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets check_ca_cert
     *
     * @return string|null
     */
    public function getCheckCaCert()
    {
        return $this->container['check_ca_cert'];
    }

    /**
     * Sets check_ca_cert
     *
     * @param string|null $check_ca_cert Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable).    enable:Enable verification of the user certificate.    disable:Disable verification of the user certificate.
     *
     * @return self
     */
    public function setCheckCaCert($check_ca_cert)
    {
        $allowedValues = $this->getCheckCaCertAllowableValues();
        if (!is_null($check_ca_cert) && !in_array($check_ca_cert, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_ca_cert', must be one of '%s'",
                    $check_ca_cert,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_ca_cert'] = $check_ca_cert;

        return $this;
    }

    /**
     * Gets check_ca_chain
     *
     * @return string|null
     */
    public function getCheckCaChain()
    {
        return $this->container['check_ca_chain'];
    }

    /**
     * Sets check_ca_chain
     *
     * @param string|null $check_ca_chain Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable).    enable:Enable verification of the entire certificate chain.    disable:Disable verification of the entire certificate chain.
     *
     * @return self
     */
    public function setCheckCaChain($check_ca_chain)
    {
        $allowedValues = $this->getCheckCaChainAllowableValues();
        if (!is_null($check_ca_chain) && !in_array($check_ca_chain, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_ca_chain', must be one of '%s'",
                    $check_ca_chain,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_ca_chain'] = $check_ca_chain;

        return $this;
    }

    /**
     * Gets subject_match
     *
     * @return string|null
     */
    public function getSubjectMatch()
    {
        return $this->container['subject_match'];
    }

    /**
     * Sets subject_match
     *
     * @param string|null $subject_match When searching for a matching certificate, control how to find matches in the certificate subject name.    substring:Find a match if any string in the certificate subject name matches the name being searched for.    value:Find a match if any attribute value string in a certificate subject name is an exact match with the name being searched for.
     *
     * @return self
     */
    public function setSubjectMatch($subject_match)
    {
        $allowedValues = $this->getSubjectMatchAllowableValues();
        if (!is_null($subject_match) && !in_array($subject_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subject_match', must be one of '%s'",
                    $subject_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subject_match'] = $subject_match;

        return $this;
    }

    /**
     * Gets cn_match
     *
     * @return string|null
     */
    public function getCnMatch()
    {
        return $this->container['cn_match'];
    }

    /**
     * Sets cn_match
     *
     * @param string|null $cn_match When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name.    substring:Find a match if any string in a certificate subject name cn attribute name matches the name being searched for.    value:Find a match if the cn attribute value string is an exact match with the name being searched for.
     *
     * @return self
     */
    public function setCnMatch($cn_match)
    {
        $allowedValues = $this->getCnMatchAllowableValues();
        if (!is_null($cn_match) && !in_array($cn_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cn_match', must be one of '%s'",
                    $cn_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cn_match'] = $cn_match;

        return $this;
    }

    /**
     * Gets strict_crl_check
     *
     * @return string|null
     */
    public function getStrictCrlCheck()
    {
        return $this->container['strict_crl_check'];
    }

    /**
     * Sets strict_crl_check
     *
     * @param string|null $strict_crl_check Enable/disable strict mode CRL checking.    enable:Enable strict mode CRL checking.    disable:Disable strict mode CRL checking.
     *
     * @return self
     */
    public function setStrictCrlCheck($strict_crl_check)
    {
        $allowedValues = $this->getStrictCrlCheckAllowableValues();
        if (!is_null($strict_crl_check) && !in_array($strict_crl_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_crl_check', must be one of '%s'",
                    $strict_crl_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_crl_check'] = $strict_crl_check;

        return $this;
    }

    /**
     * Gets strict_ocsp_check
     *
     * @return string|null
     */
    public function getStrictOcspCheck()
    {
        return $this->container['strict_ocsp_check'];
    }

    /**
     * Sets strict_ocsp_check
     *
     * @param string|null $strict_ocsp_check Enable/disable strict mode OCSP checking.    enable:Enable strict mode OCSP checking.    disable:Disable strict mode OCSP checking.
     *
     * @return self
     */
    public function setStrictOcspCheck($strict_ocsp_check)
    {
        $allowedValues = $this->getStrictOcspCheckAllowableValues();
        if (!is_null($strict_ocsp_check) && !in_array($strict_ocsp_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_ocsp_check', must be one of '%s'",
                    $strict_ocsp_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_ocsp_check'] = $strict_ocsp_check;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).    default:Follow system global setting.    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }

    /**
     * Gets cmp_save_extra_certs
     *
     * @return string|null
     */
    public function getCmpSaveExtraCerts()
    {
        return $this->container['cmp_save_extra_certs'];
    }

    /**
     * Sets cmp_save_extra_certs
     *
     * @param string|null $cmp_save_extra_certs Enable/disable saving extra certificates in CMP mode (default = disable).    enable:Enable saving extra certificates in CMP mode.    disable:Disable saving extra certificates in CMP mode.
     *
     * @return self
     */
    public function setCmpSaveExtraCerts($cmp_save_extra_certs)
    {
        $allowedValues = $this->getCmpSaveExtraCertsAllowableValues();
        if (!is_null($cmp_save_extra_certs) && !in_array($cmp_save_extra_certs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cmp_save_extra_certs', must be one of '%s'",
                    $cmp_save_extra_certs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cmp_save_extra_certs'] = $cmp_save_extra_certs;

        return $this;
    }

    /**
     * Gets cmp_key_usage_checking
     *
     * @return string|null
     */
    public function getCmpKeyUsageChecking()
    {
        return $this->container['cmp_key_usage_checking'];
    }

    /**
     * Sets cmp_key_usage_checking
     *
     * @param string|null $cmp_key_usage_checking Enable/disable server certificate key usage checking in CMP mode (default = enable).    enable:Enable server certificate key usage checking in CMP mode.    disable:Disable server certificate key usage checking in CMP mode.
     *
     * @return self
     */
    public function setCmpKeyUsageChecking($cmp_key_usage_checking)
    {
        $allowedValues = $this->getCmpKeyUsageCheckingAllowableValues();
        if (!is_null($cmp_key_usage_checking) && !in_array($cmp_key_usage_checking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cmp_key_usage_checking', must be one of '%s'",
                    $cmp_key_usage_checking,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cmp_key_usage_checking'] = $cmp_key_usage_checking;

        return $this;
    }

    /**
     * Gets certname_rsa1024
     *
     * @return string|null
     */
    public function getCertnameRsa1024()
    {
        return $this->container['certname_rsa1024'];
    }

    /**
     * Sets certname_rsa1024
     *
     * @param string|null $certname_rsa1024 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameRsa1024($certname_rsa1024)
    {
        if (!is_null($certname_rsa1024) && (mb_strlen($certname_rsa1024) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_rsa1024 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_rsa1024'] = $certname_rsa1024;

        return $this;
    }

    /**
     * Gets certname_rsa2048
     *
     * @return string|null
     */
    public function getCertnameRsa2048()
    {
        return $this->container['certname_rsa2048'];
    }

    /**
     * Sets certname_rsa2048
     *
     * @param string|null $certname_rsa2048 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameRsa2048($certname_rsa2048)
    {
        if (!is_null($certname_rsa2048) && (mb_strlen($certname_rsa2048) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_rsa2048 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_rsa2048'] = $certname_rsa2048;

        return $this;
    }

    /**
     * Gets certname_rsa4096
     *
     * @return string|null
     */
    public function getCertnameRsa4096()
    {
        return $this->container['certname_rsa4096'];
    }

    /**
     * Sets certname_rsa4096
     *
     * @param string|null $certname_rsa4096 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameRsa4096($certname_rsa4096)
    {
        if (!is_null($certname_rsa4096) && (mb_strlen($certname_rsa4096) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_rsa4096 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_rsa4096'] = $certname_rsa4096;

        return $this;
    }

    /**
     * Gets certname_dsa1024
     *
     * @return string|null
     */
    public function getCertnameDsa1024()
    {
        return $this->container['certname_dsa1024'];
    }

    /**
     * Sets certname_dsa1024
     *
     * @param string|null $certname_dsa1024 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameDsa1024($certname_dsa1024)
    {
        if (!is_null($certname_dsa1024) && (mb_strlen($certname_dsa1024) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_dsa1024 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_dsa1024'] = $certname_dsa1024;

        return $this;
    }

    /**
     * Gets certname_dsa2048
     *
     * @return string|null
     */
    public function getCertnameDsa2048()
    {
        return $this->container['certname_dsa2048'];
    }

    /**
     * Sets certname_dsa2048
     *
     * @param string|null $certname_dsa2048 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameDsa2048($certname_dsa2048)
    {
        if (!is_null($certname_dsa2048) && (mb_strlen($certname_dsa2048) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_dsa2048 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_dsa2048'] = $certname_dsa2048;

        return $this;
    }

    /**
     * Gets certname_ecdsa256
     *
     * @return string|null
     */
    public function getCertnameEcdsa256()
    {
        return $this->container['certname_ecdsa256'];
    }

    /**
     * Sets certname_ecdsa256
     *
     * @param string|null $certname_ecdsa256 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameEcdsa256($certname_ecdsa256)
    {
        if (!is_null($certname_ecdsa256) && (mb_strlen($certname_ecdsa256) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_ecdsa256 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_ecdsa256'] = $certname_ecdsa256;

        return $this;
    }

    /**
     * Gets certname_ecdsa384
     *
     * @return string|null
     */
    public function getCertnameEcdsa384()
    {
        return $this->container['certname_ecdsa384'];
    }

    /**
     * Sets certname_ecdsa384
     *
     * @param string|null $certname_ecdsa384 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameEcdsa384($certname_ecdsa384)
    {
        if (!is_null($certname_ecdsa384) && (mb_strlen($certname_ecdsa384) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_ecdsa384 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_ecdsa384'] = $certname_ecdsa384;

        return $this;
    }

    /**
     * Gets certname_ecdsa521
     *
     * @return string|null
     */
    public function getCertnameEcdsa521()
    {
        return $this->container['certname_ecdsa521'];
    }

    /**
     * Sets certname_ecdsa521
     *
     * @param string|null $certname_ecdsa521 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameEcdsa521($certname_ecdsa521)
    {
        if (!is_null($certname_ecdsa521) && (mb_strlen($certname_ecdsa521) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_ecdsa521 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_ecdsa521'] = $certname_ecdsa521;

        return $this;
    }

    /**
     * Gets certname_ed25519
     *
     * @return string|null
     */
    public function getCertnameEd25519()
    {
        return $this->container['certname_ed25519'];
    }

    /**
     * Sets certname_ed25519
     *
     * @param string|null $certname_ed25519 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameEd25519($certname_ed25519)
    {
        if (!is_null($certname_ed25519) && (mb_strlen($certname_ed25519) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_ed25519 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_ed25519'] = $certname_ed25519;

        return $this;
    }

    /**
     * Gets certname_ed448
     *
     * @return string|null
     */
    public function getCertnameEd448()
    {
        return $this->container['certname_ed448'];
    }

    /**
     * Sets certname_ed448
     *
     * @param string|null $certname_ed448 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     *
     * @return self
     */
    public function setCertnameEd448($certname_ed448)
    {
        if (!is_null($certname_ed448) && (mb_strlen($certname_ed448) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certname_ed448 when calling InlineObject468., must be smaller than or equal to 35.');
        }

        $this->container['certname_ed448'] = $certname_ed448;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


