<?php
/**
 * RouterMulticastPimSmGlobal
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterMulticastPimSmGlobal Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterMulticastPimSmGlobal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_multicast_pim_sm_global';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_interval' => 'int',
        'join_prune_holdtime' => 'int',
        'accept_register_list' => 'string',
        'accept_source_list' => 'string',
        'bsr_candidate' => 'string',
        'bsr_interface' => 'string',
        'bsr_priority' => 'int',
        'bsr_hash' => 'int',
        'bsr_allow_quick_refresh' => 'string',
        'cisco_register_checksum' => 'string',
        'cisco_register_checksum_group' => 'string',
        'cisco_crp_prefix' => 'string',
        'cisco_ignore_rp_set_priority' => 'string',
        'register_rp_reachability' => 'string',
        'register_source' => 'string',
        'register_source_interface' => 'string',
        'register_source_ip' => 'string',
        'register_supression' => 'int',
        'null_register_retries' => 'int',
        'rp_register_keepalive' => 'int',
        'spt_threshold' => 'string',
        'spt_threshold_group' => 'string',
        'ssm' => 'string',
        'ssm_range' => 'string',
        'register_rate_limit' => 'int',
        'rp_address' => '\Fortigate\FortiOS\Model\CMDB\RouterMulticastRpAddress[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_interval' => null,
        'join_prune_holdtime' => null,
        'accept_register_list' => null,
        'accept_source_list' => null,
        'bsr_candidate' => null,
        'bsr_interface' => null,
        'bsr_priority' => null,
        'bsr_hash' => null,
        'bsr_allow_quick_refresh' => null,
        'cisco_register_checksum' => null,
        'cisco_register_checksum_group' => null,
        'cisco_crp_prefix' => null,
        'cisco_ignore_rp_set_priority' => null,
        'register_rp_reachability' => null,
        'register_source' => null,
        'register_source_interface' => null,
        'register_source_ip' => 'ipv4',
        'register_supression' => null,
        'null_register_retries' => null,
        'rp_register_keepalive' => null,
        'spt_threshold' => null,
        'spt_threshold_group' => null,
        'ssm' => null,
        'ssm_range' => null,
        'register_rate_limit' => null,
        'rp_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_interval' => 'message-interval',
        'join_prune_holdtime' => 'join-prune-holdtime',
        'accept_register_list' => 'accept-register-list',
        'accept_source_list' => 'accept-source-list',
        'bsr_candidate' => 'bsr-candidate',
        'bsr_interface' => 'bsr-interface',
        'bsr_priority' => 'bsr-priority',
        'bsr_hash' => 'bsr-hash',
        'bsr_allow_quick_refresh' => 'bsr-allow-quick-refresh',
        'cisco_register_checksum' => 'cisco-register-checksum',
        'cisco_register_checksum_group' => 'cisco-register-checksum-group',
        'cisco_crp_prefix' => 'cisco-crp-prefix',
        'cisco_ignore_rp_set_priority' => 'cisco-ignore-rp-set-priority',
        'register_rp_reachability' => 'register-rp-reachability',
        'register_source' => 'register-source',
        'register_source_interface' => 'register-source-interface',
        'register_source_ip' => 'register-source-ip',
        'register_supression' => 'register-supression',
        'null_register_retries' => 'null-register-retries',
        'rp_register_keepalive' => 'rp-register-keepalive',
        'spt_threshold' => 'spt-threshold',
        'spt_threshold_group' => 'spt-threshold-group',
        'ssm' => 'ssm',
        'ssm_range' => 'ssm-range',
        'register_rate_limit' => 'register-rate-limit',
        'rp_address' => 'rp-address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_interval' => 'setMessageInterval',
        'join_prune_holdtime' => 'setJoinPruneHoldtime',
        'accept_register_list' => 'setAcceptRegisterList',
        'accept_source_list' => 'setAcceptSourceList',
        'bsr_candidate' => 'setBsrCandidate',
        'bsr_interface' => 'setBsrInterface',
        'bsr_priority' => 'setBsrPriority',
        'bsr_hash' => 'setBsrHash',
        'bsr_allow_quick_refresh' => 'setBsrAllowQuickRefresh',
        'cisco_register_checksum' => 'setCiscoRegisterChecksum',
        'cisco_register_checksum_group' => 'setCiscoRegisterChecksumGroup',
        'cisco_crp_prefix' => 'setCiscoCrpPrefix',
        'cisco_ignore_rp_set_priority' => 'setCiscoIgnoreRpSetPriority',
        'register_rp_reachability' => 'setRegisterRpReachability',
        'register_source' => 'setRegisterSource',
        'register_source_interface' => 'setRegisterSourceInterface',
        'register_source_ip' => 'setRegisterSourceIp',
        'register_supression' => 'setRegisterSupression',
        'null_register_retries' => 'setNullRegisterRetries',
        'rp_register_keepalive' => 'setRpRegisterKeepalive',
        'spt_threshold' => 'setSptThreshold',
        'spt_threshold_group' => 'setSptThresholdGroup',
        'ssm' => 'setSsm',
        'ssm_range' => 'setSsmRange',
        'register_rate_limit' => 'setRegisterRateLimit',
        'rp_address' => 'setRpAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_interval' => 'getMessageInterval',
        'join_prune_holdtime' => 'getJoinPruneHoldtime',
        'accept_register_list' => 'getAcceptRegisterList',
        'accept_source_list' => 'getAcceptSourceList',
        'bsr_candidate' => 'getBsrCandidate',
        'bsr_interface' => 'getBsrInterface',
        'bsr_priority' => 'getBsrPriority',
        'bsr_hash' => 'getBsrHash',
        'bsr_allow_quick_refresh' => 'getBsrAllowQuickRefresh',
        'cisco_register_checksum' => 'getCiscoRegisterChecksum',
        'cisco_register_checksum_group' => 'getCiscoRegisterChecksumGroup',
        'cisco_crp_prefix' => 'getCiscoCrpPrefix',
        'cisco_ignore_rp_set_priority' => 'getCiscoIgnoreRpSetPriority',
        'register_rp_reachability' => 'getRegisterRpReachability',
        'register_source' => 'getRegisterSource',
        'register_source_interface' => 'getRegisterSourceInterface',
        'register_source_ip' => 'getRegisterSourceIp',
        'register_supression' => 'getRegisterSupression',
        'null_register_retries' => 'getNullRegisterRetries',
        'rp_register_keepalive' => 'getRpRegisterKeepalive',
        'spt_threshold' => 'getSptThreshold',
        'spt_threshold_group' => 'getSptThresholdGroup',
        'ssm' => 'getSsm',
        'ssm_range' => 'getSsmRange',
        'register_rate_limit' => 'getRegisterRateLimit',
        'rp_address' => 'getRpAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BSR_CANDIDATE_ENABLE = 'enable';
    const BSR_CANDIDATE_DISABLE = 'disable';
    const BSR_ALLOW_QUICK_REFRESH_ENABLE = 'enable';
    const BSR_ALLOW_QUICK_REFRESH_DISABLE = 'disable';
    const CISCO_REGISTER_CHECKSUM_ENABLE = 'enable';
    const CISCO_REGISTER_CHECKSUM_DISABLE = 'disable';
    const CISCO_CRP_PREFIX_ENABLE = 'enable';
    const CISCO_CRP_PREFIX_DISABLE = 'disable';
    const CISCO_IGNORE_RP_SET_PRIORITY_ENABLE = 'enable';
    const CISCO_IGNORE_RP_SET_PRIORITY_DISABLE = 'disable';
    const REGISTER_RP_REACHABILITY_ENABLE = 'enable';
    const REGISTER_RP_REACHABILITY_DISABLE = 'disable';
    const REGISTER_SOURCE_DISABLE = 'disable';
    const REGISTER_SOURCE__INTERFACE = 'interface';
    const REGISTER_SOURCE_IP_ADDRESS = 'ip-address';
    const SPT_THRESHOLD_ENABLE = 'enable';
    const SPT_THRESHOLD_DISABLE = 'disable';
    const SSM_ENABLE = 'enable';
    const SSM_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBsrCandidateAllowableValues()
    {
        return [
            self::BSR_CANDIDATE_ENABLE,
            self::BSR_CANDIDATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBsrAllowQuickRefreshAllowableValues()
    {
        return [
            self::BSR_ALLOW_QUICK_REFRESH_ENABLE,
            self::BSR_ALLOW_QUICK_REFRESH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCiscoRegisterChecksumAllowableValues()
    {
        return [
            self::CISCO_REGISTER_CHECKSUM_ENABLE,
            self::CISCO_REGISTER_CHECKSUM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCiscoCrpPrefixAllowableValues()
    {
        return [
            self::CISCO_CRP_PREFIX_ENABLE,
            self::CISCO_CRP_PREFIX_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCiscoIgnoreRpSetPriorityAllowableValues()
    {
        return [
            self::CISCO_IGNORE_RP_SET_PRIORITY_ENABLE,
            self::CISCO_IGNORE_RP_SET_PRIORITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegisterRpReachabilityAllowableValues()
    {
        return [
            self::REGISTER_RP_REACHABILITY_ENABLE,
            self::REGISTER_RP_REACHABILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegisterSourceAllowableValues()
    {
        return [
            self::REGISTER_SOURCE_DISABLE,
            self::REGISTER_SOURCE__INTERFACE,
            self::REGISTER_SOURCE_IP_ADDRESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSptThresholdAllowableValues()
    {
        return [
            self::SPT_THRESHOLD_ENABLE,
            self::SPT_THRESHOLD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsmAllowableValues()
    {
        return [
            self::SSM_ENABLE,
            self::SSM_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_interval'] = $data['message_interval'] ?? null;
        $this->container['join_prune_holdtime'] = $data['join_prune_holdtime'] ?? null;
        $this->container['accept_register_list'] = $data['accept_register_list'] ?? null;
        $this->container['accept_source_list'] = $data['accept_source_list'] ?? null;
        $this->container['bsr_candidate'] = $data['bsr_candidate'] ?? null;
        $this->container['bsr_interface'] = $data['bsr_interface'] ?? null;
        $this->container['bsr_priority'] = $data['bsr_priority'] ?? null;
        $this->container['bsr_hash'] = $data['bsr_hash'] ?? null;
        $this->container['bsr_allow_quick_refresh'] = $data['bsr_allow_quick_refresh'] ?? null;
        $this->container['cisco_register_checksum'] = $data['cisco_register_checksum'] ?? null;
        $this->container['cisco_register_checksum_group'] = $data['cisco_register_checksum_group'] ?? null;
        $this->container['cisco_crp_prefix'] = $data['cisco_crp_prefix'] ?? null;
        $this->container['cisco_ignore_rp_set_priority'] = $data['cisco_ignore_rp_set_priority'] ?? null;
        $this->container['register_rp_reachability'] = $data['register_rp_reachability'] ?? null;
        $this->container['register_source'] = $data['register_source'] ?? null;
        $this->container['register_source_interface'] = $data['register_source_interface'] ?? null;
        $this->container['register_source_ip'] = $data['register_source_ip'] ?? null;
        $this->container['register_supression'] = $data['register_supression'] ?? null;
        $this->container['null_register_retries'] = $data['null_register_retries'] ?? null;
        $this->container['rp_register_keepalive'] = $data['rp_register_keepalive'] ?? null;
        $this->container['spt_threshold'] = $data['spt_threshold'] ?? null;
        $this->container['spt_threshold_group'] = $data['spt_threshold_group'] ?? null;
        $this->container['ssm'] = $data['ssm'] ?? null;
        $this->container['ssm_range'] = $data['ssm_range'] ?? null;
        $this->container['register_rate_limit'] = $data['register_rate_limit'] ?? null;
        $this->container['rp_address'] = $data['rp_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['message_interval']) && ($this->container['message_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'message_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['message_interval']) && ($this->container['message_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'message_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['join_prune_holdtime']) && ($this->container['join_prune_holdtime'] > 65535)) {
            $invalidProperties[] = "invalid value for 'join_prune_holdtime', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['join_prune_holdtime']) && ($this->container['join_prune_holdtime'] < 1)) {
            $invalidProperties[] = "invalid value for 'join_prune_holdtime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['accept_register_list']) && (mb_strlen($this->container['accept_register_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'accept_register_list', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['accept_source_list']) && (mb_strlen($this->container['accept_source_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'accept_source_list', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getBsrCandidateAllowableValues();
        if (!is_null($this->container['bsr_candidate']) && !in_array($this->container['bsr_candidate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bsr_candidate', must be one of '%s'",
                $this->container['bsr_candidate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bsr_interface']) && (mb_strlen($this->container['bsr_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'bsr_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['bsr_priority']) && ($this->container['bsr_priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'bsr_priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bsr_priority']) && ($this->container['bsr_priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'bsr_priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bsr_hash']) && ($this->container['bsr_hash'] > 32)) {
            $invalidProperties[] = "invalid value for 'bsr_hash', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['bsr_hash']) && ($this->container['bsr_hash'] < 0)) {
            $invalidProperties[] = "invalid value for 'bsr_hash', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBsrAllowQuickRefreshAllowableValues();
        if (!is_null($this->container['bsr_allow_quick_refresh']) && !in_array($this->container['bsr_allow_quick_refresh'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bsr_allow_quick_refresh', must be one of '%s'",
                $this->container['bsr_allow_quick_refresh'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCiscoRegisterChecksumAllowableValues();
        if (!is_null($this->container['cisco_register_checksum']) && !in_array($this->container['cisco_register_checksum'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cisco_register_checksum', must be one of '%s'",
                $this->container['cisco_register_checksum'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cisco_register_checksum_group']) && (mb_strlen($this->container['cisco_register_checksum_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'cisco_register_checksum_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getCiscoCrpPrefixAllowableValues();
        if (!is_null($this->container['cisco_crp_prefix']) && !in_array($this->container['cisco_crp_prefix'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cisco_crp_prefix', must be one of '%s'",
                $this->container['cisco_crp_prefix'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCiscoIgnoreRpSetPriorityAllowableValues();
        if (!is_null($this->container['cisco_ignore_rp_set_priority']) && !in_array($this->container['cisco_ignore_rp_set_priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cisco_ignore_rp_set_priority', must be one of '%s'",
                $this->container['cisco_ignore_rp_set_priority'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRegisterRpReachabilityAllowableValues();
        if (!is_null($this->container['register_rp_reachability']) && !in_array($this->container['register_rp_reachability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'register_rp_reachability', must be one of '%s'",
                $this->container['register_rp_reachability'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRegisterSourceAllowableValues();
        if (!is_null($this->container['register_source']) && !in_array($this->container['register_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'register_source', must be one of '%s'",
                $this->container['register_source'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['register_source_interface']) && (mb_strlen($this->container['register_source_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'register_source_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['register_supression']) && ($this->container['register_supression'] > 65535)) {
            $invalidProperties[] = "invalid value for 'register_supression', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['register_supression']) && ($this->container['register_supression'] < 1)) {
            $invalidProperties[] = "invalid value for 'register_supression', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['null_register_retries']) && ($this->container['null_register_retries'] > 20)) {
            $invalidProperties[] = "invalid value for 'null_register_retries', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['null_register_retries']) && ($this->container['null_register_retries'] < 1)) {
            $invalidProperties[] = "invalid value for 'null_register_retries', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rp_register_keepalive']) && ($this->container['rp_register_keepalive'] > 65535)) {
            $invalidProperties[] = "invalid value for 'rp_register_keepalive', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['rp_register_keepalive']) && ($this->container['rp_register_keepalive'] < 1)) {
            $invalidProperties[] = "invalid value for 'rp_register_keepalive', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSptThresholdAllowableValues();
        if (!is_null($this->container['spt_threshold']) && !in_array($this->container['spt_threshold'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'spt_threshold', must be one of '%s'",
                $this->container['spt_threshold'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['spt_threshold_group']) && (mb_strlen($this->container['spt_threshold_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'spt_threshold_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSsmAllowableValues();
        if (!is_null($this->container['ssm']) && !in_array($this->container['ssm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssm', must be one of '%s'",
                $this->container['ssm'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssm_range']) && (mb_strlen($this->container['ssm_range']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssm_range', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['register_rate_limit']) && ($this->container['register_rate_limit'] > 65535)) {
            $invalidProperties[] = "invalid value for 'register_rate_limit', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['register_rate_limit']) && ($this->container['register_rate_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'register_rate_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rp_address']) && (count($this->container['rp_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'rp_address', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_interval
     *
     * @return int|null
     */
    public function getMessageInterval()
    {
        return $this->container['message_interval'];
    }

    /**
     * Sets message_interval
     *
     * @param int|null $message_interval Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
     *
     * @return self
     */
    public function setMessageInterval($message_interval)
    {

        if (!is_null($message_interval) && ($message_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $message_interval when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 65535.');
        }
        if (!is_null($message_interval) && ($message_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $message_interval when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 1.');
        }

        $this->container['message_interval'] = $message_interval;

        return $this;
    }

    /**
     * Gets join_prune_holdtime
     *
     * @return int|null
     */
    public function getJoinPruneHoldtime()
    {
        return $this->container['join_prune_holdtime'];
    }

    /**
     * Sets join_prune_holdtime
     *
     * @param int|null $join_prune_holdtime Join/prune holdtime (1 - 65535, default = 210).
     *
     * @return self
     */
    public function setJoinPruneHoldtime($join_prune_holdtime)
    {

        if (!is_null($join_prune_holdtime) && ($join_prune_holdtime > 65535)) {
            throw new \InvalidArgumentException('invalid value for $join_prune_holdtime when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 65535.');
        }
        if (!is_null($join_prune_holdtime) && ($join_prune_holdtime < 1)) {
            throw new \InvalidArgumentException('invalid value for $join_prune_holdtime when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 1.');
        }

        $this->container['join_prune_holdtime'] = $join_prune_holdtime;

        return $this;
    }

    /**
     * Gets accept_register_list
     *
     * @return string|null
     */
    public function getAcceptRegisterList()
    {
        return $this->container['accept_register_list'];
    }

    /**
     * Sets accept_register_list
     *
     * @param string|null $accept_register_list Sources allowed to register packets with this Rendezvous Point (RP).
     *
     * @return self
     */
    public function setAcceptRegisterList($accept_register_list)
    {
        if (!is_null($accept_register_list) && (mb_strlen($accept_register_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $accept_register_list when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 35.');
        }

        $this->container['accept_register_list'] = $accept_register_list;

        return $this;
    }

    /**
     * Gets accept_source_list
     *
     * @return string|null
     */
    public function getAcceptSourceList()
    {
        return $this->container['accept_source_list'];
    }

    /**
     * Sets accept_source_list
     *
     * @param string|null $accept_source_list Sources allowed to send multicast traffic.
     *
     * @return self
     */
    public function setAcceptSourceList($accept_source_list)
    {
        if (!is_null($accept_source_list) && (mb_strlen($accept_source_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $accept_source_list when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 35.');
        }

        $this->container['accept_source_list'] = $accept_source_list;

        return $this;
    }

    /**
     * Gets bsr_candidate
     *
     * @return string|null
     */
    public function getBsrCandidate()
    {
        return $this->container['bsr_candidate'];
    }

    /**
     * Sets bsr_candidate
     *
     * @param string|null $bsr_candidate Enable/disable allowing this router to become a bootstrap router (BSR).    enable:Allow this router to function as a BSR.    disable:Do not allow this router to function as a BSR.
     *
     * @return self
     */
    public function setBsrCandidate($bsr_candidate)
    {
        $allowedValues = $this->getBsrCandidateAllowableValues();
        if (!is_null($bsr_candidate) && !in_array($bsr_candidate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bsr_candidate', must be one of '%s'",
                    $bsr_candidate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bsr_candidate'] = $bsr_candidate;

        return $this;
    }

    /**
     * Gets bsr_interface
     *
     * @return string|null
     */
    public function getBsrInterface()
    {
        return $this->container['bsr_interface'];
    }

    /**
     * Sets bsr_interface
     *
     * @param string|null $bsr_interface Interface to advertise as candidate BSR.
     *
     * @return self
     */
    public function setBsrInterface($bsr_interface)
    {
        if (!is_null($bsr_interface) && (mb_strlen($bsr_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $bsr_interface when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 15.');
        }

        $this->container['bsr_interface'] = $bsr_interface;

        return $this;
    }

    /**
     * Gets bsr_priority
     *
     * @return int|null
     */
    public function getBsrPriority()
    {
        return $this->container['bsr_priority'];
    }

    /**
     * Sets bsr_priority
     *
     * @param int|null $bsr_priority BSR priority (0 - 255, default = 0).
     *
     * @return self
     */
    public function setBsrPriority($bsr_priority)
    {

        if (!is_null($bsr_priority) && ($bsr_priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $bsr_priority when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 255.');
        }
        if (!is_null($bsr_priority) && ($bsr_priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $bsr_priority when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 0.');
        }

        $this->container['bsr_priority'] = $bsr_priority;

        return $this;
    }

    /**
     * Gets bsr_hash
     *
     * @return int|null
     */
    public function getBsrHash()
    {
        return $this->container['bsr_hash'];
    }

    /**
     * Sets bsr_hash
     *
     * @param int|null $bsr_hash BSR hash length (0 - 32, default = 10).
     *
     * @return self
     */
    public function setBsrHash($bsr_hash)
    {

        if (!is_null($bsr_hash) && ($bsr_hash > 32)) {
            throw new \InvalidArgumentException('invalid value for $bsr_hash when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 32.');
        }
        if (!is_null($bsr_hash) && ($bsr_hash < 0)) {
            throw new \InvalidArgumentException('invalid value for $bsr_hash when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 0.');
        }

        $this->container['bsr_hash'] = $bsr_hash;

        return $this;
    }

    /**
     * Gets bsr_allow_quick_refresh
     *
     * @return string|null
     */
    public function getBsrAllowQuickRefresh()
    {
        return $this->container['bsr_allow_quick_refresh'];
    }

    /**
     * Sets bsr_allow_quick_refresh
     *
     * @param string|null $bsr_allow_quick_refresh Enable/disable accept BSR quick refresh packets from neighbors.    enable:Allow quick refresh packets.    disable:Do not allow quick refresh packets.
     *
     * @return self
     */
    public function setBsrAllowQuickRefresh($bsr_allow_quick_refresh)
    {
        $allowedValues = $this->getBsrAllowQuickRefreshAllowableValues();
        if (!is_null($bsr_allow_quick_refresh) && !in_array($bsr_allow_quick_refresh, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bsr_allow_quick_refresh', must be one of '%s'",
                    $bsr_allow_quick_refresh,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bsr_allow_quick_refresh'] = $bsr_allow_quick_refresh;

        return $this;
    }

    /**
     * Gets cisco_register_checksum
     *
     * @return string|null
     */
    public function getCiscoRegisterChecksum()
    {
        return $this->container['cisco_register_checksum'];
    }

    /**
     * Sets cisco_register_checksum
     *
     * @param string|null $cisco_register_checksum Checksum entire register packet(for old Cisco IOS compatibility).    enable:register checksum entire packet.    disable:Do not register checksum entire packet.
     *
     * @return self
     */
    public function setCiscoRegisterChecksum($cisco_register_checksum)
    {
        $allowedValues = $this->getCiscoRegisterChecksumAllowableValues();
        if (!is_null($cisco_register_checksum) && !in_array($cisco_register_checksum, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cisco_register_checksum', must be one of '%s'",
                    $cisco_register_checksum,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cisco_register_checksum'] = $cisco_register_checksum;

        return $this;
    }

    /**
     * Gets cisco_register_checksum_group
     *
     * @return string|null
     */
    public function getCiscoRegisterChecksumGroup()
    {
        return $this->container['cisco_register_checksum_group'];
    }

    /**
     * Sets cisco_register_checksum_group
     *
     * @param string|null $cisco_register_checksum_group Cisco register checksum only these groups.
     *
     * @return self
     */
    public function setCiscoRegisterChecksumGroup($cisco_register_checksum_group)
    {
        if (!is_null($cisco_register_checksum_group) && (mb_strlen($cisco_register_checksum_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $cisco_register_checksum_group when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 35.');
        }

        $this->container['cisco_register_checksum_group'] = $cisco_register_checksum_group;

        return $this;
    }

    /**
     * Gets cisco_crp_prefix
     *
     * @return string|null
     */
    public function getCiscoCrpPrefix()
    {
        return $this->container['cisco_crp_prefix'];
    }

    /**
     * Sets cisco_crp_prefix
     *
     * @param string|null $cisco_crp_prefix Enable/disable making candidate RP compatible with old Cisco IOS.    enable:Do not allow sending group prefix of zero.    disable:Allow sending group prefix of zero.
     *
     * @return self
     */
    public function setCiscoCrpPrefix($cisco_crp_prefix)
    {
        $allowedValues = $this->getCiscoCrpPrefixAllowableValues();
        if (!is_null($cisco_crp_prefix) && !in_array($cisco_crp_prefix, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cisco_crp_prefix', must be one of '%s'",
                    $cisco_crp_prefix,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cisco_crp_prefix'] = $cisco_crp_prefix;

        return $this;
    }

    /**
     * Gets cisco_ignore_rp_set_priority
     *
     * @return string|null
     */
    public function getCiscoIgnoreRpSetPriority()
    {
        return $this->container['cisco_ignore_rp_set_priority'];
    }

    /**
     * Sets cisco_ignore_rp_set_priority
     *
     * @param string|null $cisco_ignore_rp_set_priority Use only hash for RP selection (compatibility with old Cisco IOS).    enable:Ignore RP-SET priority value.    disable:Do not ignore RP-SET priority value.
     *
     * @return self
     */
    public function setCiscoIgnoreRpSetPriority($cisco_ignore_rp_set_priority)
    {
        $allowedValues = $this->getCiscoIgnoreRpSetPriorityAllowableValues();
        if (!is_null($cisco_ignore_rp_set_priority) && !in_array($cisco_ignore_rp_set_priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cisco_ignore_rp_set_priority', must be one of '%s'",
                    $cisco_ignore_rp_set_priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cisco_ignore_rp_set_priority'] = $cisco_ignore_rp_set_priority;

        return $this;
    }

    /**
     * Gets register_rp_reachability
     *
     * @return string|null
     */
    public function getRegisterRpReachability()
    {
        return $this->container['register_rp_reachability'];
    }

    /**
     * Sets register_rp_reachability
     *
     * @param string|null $register_rp_reachability Enable/disable check RP is reachable before registering packets.    enable:Check target RP is unicast reachable before registering.    disable:Do not check RP unicast reachability.
     *
     * @return self
     */
    public function setRegisterRpReachability($register_rp_reachability)
    {
        $allowedValues = $this->getRegisterRpReachabilityAllowableValues();
        if (!is_null($register_rp_reachability) && !in_array($register_rp_reachability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'register_rp_reachability', must be one of '%s'",
                    $register_rp_reachability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['register_rp_reachability'] = $register_rp_reachability;

        return $this;
    }

    /**
     * Gets register_source
     *
     * @return string|null
     */
    public function getRegisterSource()
    {
        return $this->container['register_source'];
    }

    /**
     * Sets register_source
     *
     * @param string|null $register_source Override source address in register packets.    disable:Use source address of RPF interface.    interface:Use primary IP of an interface.    ip-address:Use a local IP address.
     *
     * @return self
     */
    public function setRegisterSource($register_source)
    {
        $allowedValues = $this->getRegisterSourceAllowableValues();
        if (!is_null($register_source) && !in_array($register_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'register_source', must be one of '%s'",
                    $register_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['register_source'] = $register_source;

        return $this;
    }

    /**
     * Gets register_source_interface
     *
     * @return string|null
     */
    public function getRegisterSourceInterface()
    {
        return $this->container['register_source_interface'];
    }

    /**
     * Sets register_source_interface
     *
     * @param string|null $register_source_interface Override with primary interface address.
     *
     * @return self
     */
    public function setRegisterSourceInterface($register_source_interface)
    {
        if (!is_null($register_source_interface) && (mb_strlen($register_source_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $register_source_interface when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 15.');
        }

        $this->container['register_source_interface'] = $register_source_interface;

        return $this;
    }

    /**
     * Gets register_source_ip
     *
     * @return string|null
     */
    public function getRegisterSourceIp()
    {
        return $this->container['register_source_ip'];
    }

    /**
     * Sets register_source_ip
     *
     * @param string|null $register_source_ip Override with local IP address.
     *
     * @return self
     */
    public function setRegisterSourceIp($register_source_ip)
    {
        $this->container['register_source_ip'] = $register_source_ip;

        return $this;
    }

    /**
     * Gets register_supression
     *
     * @return int|null
     */
    public function getRegisterSupression()
    {
        return $this->container['register_supression'];
    }

    /**
     * Sets register_supression
     *
     * @param int|null $register_supression Period of time to honor register-stop message (1 - 65535 sec, default = 60).
     *
     * @return self
     */
    public function setRegisterSupression($register_supression)
    {

        if (!is_null($register_supression) && ($register_supression > 65535)) {
            throw new \InvalidArgumentException('invalid value for $register_supression when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 65535.');
        }
        if (!is_null($register_supression) && ($register_supression < 1)) {
            throw new \InvalidArgumentException('invalid value for $register_supression when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 1.');
        }

        $this->container['register_supression'] = $register_supression;

        return $this;
    }

    /**
     * Gets null_register_retries
     *
     * @return int|null
     */
    public function getNullRegisterRetries()
    {
        return $this->container['null_register_retries'];
    }

    /**
     * Sets null_register_retries
     *
     * @param int|null $null_register_retries Maximum retries of null register (1 - 20, default = 1).
     *
     * @return self
     */
    public function setNullRegisterRetries($null_register_retries)
    {

        if (!is_null($null_register_retries) && ($null_register_retries > 20)) {
            throw new \InvalidArgumentException('invalid value for $null_register_retries when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 20.');
        }
        if (!is_null($null_register_retries) && ($null_register_retries < 1)) {
            throw new \InvalidArgumentException('invalid value for $null_register_retries when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 1.');
        }

        $this->container['null_register_retries'] = $null_register_retries;

        return $this;
    }

    /**
     * Gets rp_register_keepalive
     *
     * @return int|null
     */
    public function getRpRegisterKeepalive()
    {
        return $this->container['rp_register_keepalive'];
    }

    /**
     * Sets rp_register_keepalive
     *
     * @param int|null $rp_register_keepalive Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
     *
     * @return self
     */
    public function setRpRegisterKeepalive($rp_register_keepalive)
    {

        if (!is_null($rp_register_keepalive) && ($rp_register_keepalive > 65535)) {
            throw new \InvalidArgumentException('invalid value for $rp_register_keepalive when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 65535.');
        }
        if (!is_null($rp_register_keepalive) && ($rp_register_keepalive < 1)) {
            throw new \InvalidArgumentException('invalid value for $rp_register_keepalive when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 1.');
        }

        $this->container['rp_register_keepalive'] = $rp_register_keepalive;

        return $this;
    }

    /**
     * Gets spt_threshold
     *
     * @return string|null
     */
    public function getSptThreshold()
    {
        return $this->container['spt_threshold'];
    }

    /**
     * Sets spt_threshold
     *
     * @param string|null $spt_threshold Enable/disable switching to source specific trees.    enable:Switch to Source tree when available.    disable:Do not switch to Source tree when available.
     *
     * @return self
     */
    public function setSptThreshold($spt_threshold)
    {
        $allowedValues = $this->getSptThresholdAllowableValues();
        if (!is_null($spt_threshold) && !in_array($spt_threshold, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'spt_threshold', must be one of '%s'",
                    $spt_threshold,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spt_threshold'] = $spt_threshold;

        return $this;
    }

    /**
     * Gets spt_threshold_group
     *
     * @return string|null
     */
    public function getSptThresholdGroup()
    {
        return $this->container['spt_threshold_group'];
    }

    /**
     * Sets spt_threshold_group
     *
     * @param string|null $spt_threshold_group Groups allowed to switch to source tree.
     *
     * @return self
     */
    public function setSptThresholdGroup($spt_threshold_group)
    {
        if (!is_null($spt_threshold_group) && (mb_strlen($spt_threshold_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $spt_threshold_group when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 35.');
        }

        $this->container['spt_threshold_group'] = $spt_threshold_group;

        return $this;
    }

    /**
     * Gets ssm
     *
     * @return string|null
     */
    public function getSsm()
    {
        return $this->container['ssm'];
    }

    /**
     * Sets ssm
     *
     * @param string|null $ssm Enable/disable source specific multicast.    enable:Allow source specific multicast.    disable:Do not allow source specific multicast.
     *
     * @return self
     */
    public function setSsm($ssm)
    {
        $allowedValues = $this->getSsmAllowableValues();
        if (!is_null($ssm) && !in_array($ssm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssm', must be one of '%s'",
                    $ssm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssm'] = $ssm;

        return $this;
    }

    /**
     * Gets ssm_range
     *
     * @return string|null
     */
    public function getSsmRange()
    {
        return $this->container['ssm_range'];
    }

    /**
     * Sets ssm_range
     *
     * @param string|null $ssm_range Groups allowed to source specific multicast.
     *
     * @return self
     */
    public function setSsmRange($ssm_range)
    {
        if (!is_null($ssm_range) && (mb_strlen($ssm_range) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssm_range when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 35.');
        }

        $this->container['ssm_range'] = $ssm_range;

        return $this;
    }

    /**
     * Gets register_rate_limit
     *
     * @return int|null
     */
    public function getRegisterRateLimit()
    {
        return $this->container['register_rate_limit'];
    }

    /**
     * Sets register_rate_limit
     *
     * @param int|null $register_rate_limit Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
     *
     * @return self
     */
    public function setRegisterRateLimit($register_rate_limit)
    {

        if (!is_null($register_rate_limit) && ($register_rate_limit > 65535)) {
            throw new \InvalidArgumentException('invalid value for $register_rate_limit when calling RouterMulticastPimSmGlobal., must be smaller than or equal to 65535.');
        }
        if (!is_null($register_rate_limit) && ($register_rate_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $register_rate_limit when calling RouterMulticastPimSmGlobal., must be bigger than or equal to 0.');
        }

        $this->container['register_rate_limit'] = $register_rate_limit;

        return $this;
    }

    /**
     * Gets rp_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterMulticastRpAddress[]|null
     */
    public function getRpAddress()
    {
        return $this->container['rp_address'];
    }

    /**
     * Sets rp_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterMulticastRpAddress[]|null $rp_address Statically configure RP addresses.
     *
     * @return self
     */
    public function setRpAddress($rp_address)
    {

        if (!is_null($rp_address) && (count($rp_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $rp_address when calling RouterMulticastPimSmGlobal., number of items must be less than or equal to 0.');
        }
        $this->container['rp_address'] = $rp_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


