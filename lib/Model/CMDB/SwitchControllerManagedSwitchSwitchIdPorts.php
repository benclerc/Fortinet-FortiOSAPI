<?php
/**
 * SwitchControllerManagedSwitchSwitchIdPorts
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchIdPorts Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchIdPorts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__ports';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'port_name' => 'string',
        'port_owner' => 'string',
        'switch_id' => 'string',
        'speed' => 'string',
        'status' => 'string',
        'poe_status' => 'string',
        'ip_source_guard' => 'string',
        'ptp_policy' => 'string',
        'aggregator_mode' => 'string',
        'rpvst_port' => 'string',
        'poe_pre_standard_detection' => 'string',
        'port_number' => 'int',
        'port_prefix_type' => 'int',
        'fortilink_port' => 'int',
        'poe_capable' => 'int',
        'stacking_port' => 'int',
        'p2p_port' => 'int',
        'mclag_icl_port' => 'int',
        'fiber_port' => 'int',
        'media_type' => 'string',
        'flags' => 'int',
        'isl_local_trunk_name' => 'string',
        'isl_peer_port_name' => 'string',
        'isl_peer_device_name' => 'string',
        'fgt_peer_port_name' => 'string',
        'fgt_peer_device_name' => 'string',
        'vlan' => 'string',
        'allowed_vlans_all' => 'string',
        'allowed_vlans' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]',
        'untagged_vlans' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]',
        'type' => 'string',
        'access_mode' => 'string',
        'dhcp_snooping' => 'string',
        'dhcp_snoop_option82_trust' => 'string',
        'arp_inspection_trust' => 'string',
        'igmps_flood_reports' => 'string',
        'igmps_flood_traffic' => 'string',
        'stp_state' => 'string',
        'stp_root_guard' => 'string',
        'stp_bpdu_guard' => 'string',
        'stp_bpdu_guard_timeout' => 'int',
        'edge_port' => 'string',
        'discard_mode' => 'string',
        'packet_sampler' => 'string',
        'packet_sample_rate' => 'int',
        'sflow_counter_interval' => 'int',
        'sample_direction' => 'string',
        'flow_control' => 'string',
        'pause_meter' => 'int',
        'pause_meter_resume' => 'string',
        'loop_guard' => 'string',
        'loop_guard_timeout' => 'int',
        'qos_policy' => 'string',
        'storm_control_policy' => 'string',
        'port_security_policy' => 'string',
        'export_to_pool' => 'string',
        'export_tags' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdExportTags[]',
        'learning_limit' => 'int',
        'sticky_mac' => 'string',
        'lldp_status' => 'string',
        'lldp_profile' => 'string',
        'export_to' => 'string',
        'mac_addr' => 'string',
        'port_selection_criteria' => 'string',
        'description' => 'string',
        'lacp_speed' => 'string',
        'mode' => 'string',
        'bundle' => 'string',
        'member_withdrawal_behavior' => 'string',
        'mclag' => 'string',
        'min_bundle' => 'int',
        'max_bundle' => 'int',
        'members' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMembers[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'port_name' => null,
        'port_owner' => null,
        'switch_id' => null,
        'speed' => null,
        'status' => null,
        'poe_status' => null,
        'ip_source_guard' => null,
        'ptp_policy' => null,
        'aggregator_mode' => null,
        'rpvst_port' => null,
        'poe_pre_standard_detection' => null,
        'port_number' => null,
        'port_prefix_type' => null,
        'fortilink_port' => null,
        'poe_capable' => null,
        'stacking_port' => null,
        'p2p_port' => null,
        'mclag_icl_port' => null,
        'fiber_port' => null,
        'media_type' => null,
        'flags' => null,
        'isl_local_trunk_name' => null,
        'isl_peer_port_name' => null,
        'isl_peer_device_name' => null,
        'fgt_peer_port_name' => null,
        'fgt_peer_device_name' => null,
        'vlan' => null,
        'allowed_vlans_all' => null,
        'allowed_vlans' => null,
        'untagged_vlans' => null,
        'type' => null,
        'access_mode' => null,
        'dhcp_snooping' => null,
        'dhcp_snoop_option82_trust' => null,
        'arp_inspection_trust' => null,
        'igmps_flood_reports' => null,
        'igmps_flood_traffic' => null,
        'stp_state' => null,
        'stp_root_guard' => null,
        'stp_bpdu_guard' => null,
        'stp_bpdu_guard_timeout' => null,
        'edge_port' => null,
        'discard_mode' => null,
        'packet_sampler' => null,
        'packet_sample_rate' => null,
        'sflow_counter_interval' => null,
        'sample_direction' => null,
        'flow_control' => null,
        'pause_meter' => null,
        'pause_meter_resume' => null,
        'loop_guard' => null,
        'loop_guard_timeout' => null,
        'qos_policy' => null,
        'storm_control_policy' => null,
        'port_security_policy' => null,
        'export_to_pool' => null,
        'export_tags' => null,
        'learning_limit' => null,
        'sticky_mac' => null,
        'lldp_status' => null,
        'lldp_profile' => null,
        'export_to' => null,
        'mac_addr' => 'mac-address',
        'port_selection_criteria' => null,
        'description' => null,
        'lacp_speed' => null,
        'mode' => null,
        'bundle' => null,
        'member_withdrawal_behavior' => null,
        'mclag' => null,
        'min_bundle' => null,
        'max_bundle' => null,
        'members' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port_name' => 'port-name',
        'port_owner' => 'port-owner',
        'switch_id' => 'switch-id',
        'speed' => 'speed',
        'status' => 'status',
        'poe_status' => 'poe-status',
        'ip_source_guard' => 'ip-source-guard',
        'ptp_policy' => 'ptp-policy',
        'aggregator_mode' => 'aggregator-mode',
        'rpvst_port' => 'rpvst-port',
        'poe_pre_standard_detection' => 'poe-pre-standard-detection',
        'port_number' => 'port-number',
        'port_prefix_type' => 'port-prefix-type',
        'fortilink_port' => 'fortilink-port',
        'poe_capable' => 'poe-capable',
        'stacking_port' => 'stacking-port',
        'p2p_port' => 'p2p-port',
        'mclag_icl_port' => 'mclag-icl-port',
        'fiber_port' => 'fiber-port',
        'media_type' => 'media-type',
        'flags' => 'flags',
        'isl_local_trunk_name' => 'isl-local-trunk-name',
        'isl_peer_port_name' => 'isl-peer-port-name',
        'isl_peer_device_name' => 'isl-peer-device-name',
        'fgt_peer_port_name' => 'fgt-peer-port-name',
        'fgt_peer_device_name' => 'fgt-peer-device-name',
        'vlan' => 'vlan',
        'allowed_vlans_all' => 'allowed-vlans-all',
        'allowed_vlans' => 'allowed-vlans',
        'untagged_vlans' => 'untagged-vlans',
        'type' => 'type',
        'access_mode' => 'access-mode',
        'dhcp_snooping' => 'dhcp-snooping',
        'dhcp_snoop_option82_trust' => 'dhcp-snoop-option82-trust',
        'arp_inspection_trust' => 'arp-inspection-trust',
        'igmps_flood_reports' => 'igmps-flood-reports',
        'igmps_flood_traffic' => 'igmps-flood-traffic',
        'stp_state' => 'stp-state',
        'stp_root_guard' => 'stp-root-guard',
        'stp_bpdu_guard' => 'stp-bpdu-guard',
        'stp_bpdu_guard_timeout' => 'stp-bpdu-guard-timeout',
        'edge_port' => 'edge-port',
        'discard_mode' => 'discard-mode',
        'packet_sampler' => 'packet-sampler',
        'packet_sample_rate' => 'packet-sample-rate',
        'sflow_counter_interval' => 'sflow-counter-interval',
        'sample_direction' => 'sample-direction',
        'flow_control' => 'flow-control',
        'pause_meter' => 'pause-meter',
        'pause_meter_resume' => 'pause-meter-resume',
        'loop_guard' => 'loop-guard',
        'loop_guard_timeout' => 'loop-guard-timeout',
        'qos_policy' => 'qos-policy',
        'storm_control_policy' => 'storm-control-policy',
        'port_security_policy' => 'port-security-policy',
        'export_to_pool' => 'export-to-pool',
        'export_tags' => 'export-tags',
        'learning_limit' => 'learning-limit',
        'sticky_mac' => 'sticky-mac',
        'lldp_status' => 'lldp-status',
        'lldp_profile' => 'lldp-profile',
        'export_to' => 'export-to',
        'mac_addr' => 'mac-addr',
        'port_selection_criteria' => 'port-selection-criteria',
        'description' => 'description',
        'lacp_speed' => 'lacp-speed',
        'mode' => 'mode',
        'bundle' => 'bundle',
        'member_withdrawal_behavior' => 'member-withdrawal-behavior',
        'mclag' => 'mclag',
        'min_bundle' => 'min-bundle',
        'max_bundle' => 'max-bundle',
        'members' => 'members'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port_name' => 'setPortName',
        'port_owner' => 'setPortOwner',
        'switch_id' => 'setSwitchId',
        'speed' => 'setSpeed',
        'status' => 'setStatus',
        'poe_status' => 'setPoeStatus',
        'ip_source_guard' => 'setIpSourceGuard',
        'ptp_policy' => 'setPtpPolicy',
        'aggregator_mode' => 'setAggregatorMode',
        'rpvst_port' => 'setRpvstPort',
        'poe_pre_standard_detection' => 'setPoePreStandardDetection',
        'port_number' => 'setPortNumber',
        'port_prefix_type' => 'setPortPrefixType',
        'fortilink_port' => 'setFortilinkPort',
        'poe_capable' => 'setPoeCapable',
        'stacking_port' => 'setStackingPort',
        'p2p_port' => 'setP2pPort',
        'mclag_icl_port' => 'setMclagIclPort',
        'fiber_port' => 'setFiberPort',
        'media_type' => 'setMediaType',
        'flags' => 'setFlags',
        'isl_local_trunk_name' => 'setIslLocalTrunkName',
        'isl_peer_port_name' => 'setIslPeerPortName',
        'isl_peer_device_name' => 'setIslPeerDeviceName',
        'fgt_peer_port_name' => 'setFgtPeerPortName',
        'fgt_peer_device_name' => 'setFgtPeerDeviceName',
        'vlan' => 'setVlan',
        'allowed_vlans_all' => 'setAllowedVlansAll',
        'allowed_vlans' => 'setAllowedVlans',
        'untagged_vlans' => 'setUntaggedVlans',
        'type' => 'setType',
        'access_mode' => 'setAccessMode',
        'dhcp_snooping' => 'setDhcpSnooping',
        'dhcp_snoop_option82_trust' => 'setDhcpSnoopOption82Trust',
        'arp_inspection_trust' => 'setArpInspectionTrust',
        'igmps_flood_reports' => 'setIgmpsFloodReports',
        'igmps_flood_traffic' => 'setIgmpsFloodTraffic',
        'stp_state' => 'setStpState',
        'stp_root_guard' => 'setStpRootGuard',
        'stp_bpdu_guard' => 'setStpBpduGuard',
        'stp_bpdu_guard_timeout' => 'setStpBpduGuardTimeout',
        'edge_port' => 'setEdgePort',
        'discard_mode' => 'setDiscardMode',
        'packet_sampler' => 'setPacketSampler',
        'packet_sample_rate' => 'setPacketSampleRate',
        'sflow_counter_interval' => 'setSflowCounterInterval',
        'sample_direction' => 'setSampleDirection',
        'flow_control' => 'setFlowControl',
        'pause_meter' => 'setPauseMeter',
        'pause_meter_resume' => 'setPauseMeterResume',
        'loop_guard' => 'setLoopGuard',
        'loop_guard_timeout' => 'setLoopGuardTimeout',
        'qos_policy' => 'setQosPolicy',
        'storm_control_policy' => 'setStormControlPolicy',
        'port_security_policy' => 'setPortSecurityPolicy',
        'export_to_pool' => 'setExportToPool',
        'export_tags' => 'setExportTags',
        'learning_limit' => 'setLearningLimit',
        'sticky_mac' => 'setStickyMac',
        'lldp_status' => 'setLldpStatus',
        'lldp_profile' => 'setLldpProfile',
        'export_to' => 'setExportTo',
        'mac_addr' => 'setMacAddr',
        'port_selection_criteria' => 'setPortSelectionCriteria',
        'description' => 'setDescription',
        'lacp_speed' => 'setLacpSpeed',
        'mode' => 'setMode',
        'bundle' => 'setBundle',
        'member_withdrawal_behavior' => 'setMemberWithdrawalBehavior',
        'mclag' => 'setMclag',
        'min_bundle' => 'setMinBundle',
        'max_bundle' => 'setMaxBundle',
        'members' => 'setMembers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port_name' => 'getPortName',
        'port_owner' => 'getPortOwner',
        'switch_id' => 'getSwitchId',
        'speed' => 'getSpeed',
        'status' => 'getStatus',
        'poe_status' => 'getPoeStatus',
        'ip_source_guard' => 'getIpSourceGuard',
        'ptp_policy' => 'getPtpPolicy',
        'aggregator_mode' => 'getAggregatorMode',
        'rpvst_port' => 'getRpvstPort',
        'poe_pre_standard_detection' => 'getPoePreStandardDetection',
        'port_number' => 'getPortNumber',
        'port_prefix_type' => 'getPortPrefixType',
        'fortilink_port' => 'getFortilinkPort',
        'poe_capable' => 'getPoeCapable',
        'stacking_port' => 'getStackingPort',
        'p2p_port' => 'getP2pPort',
        'mclag_icl_port' => 'getMclagIclPort',
        'fiber_port' => 'getFiberPort',
        'media_type' => 'getMediaType',
        'flags' => 'getFlags',
        'isl_local_trunk_name' => 'getIslLocalTrunkName',
        'isl_peer_port_name' => 'getIslPeerPortName',
        'isl_peer_device_name' => 'getIslPeerDeviceName',
        'fgt_peer_port_name' => 'getFgtPeerPortName',
        'fgt_peer_device_name' => 'getFgtPeerDeviceName',
        'vlan' => 'getVlan',
        'allowed_vlans_all' => 'getAllowedVlansAll',
        'allowed_vlans' => 'getAllowedVlans',
        'untagged_vlans' => 'getUntaggedVlans',
        'type' => 'getType',
        'access_mode' => 'getAccessMode',
        'dhcp_snooping' => 'getDhcpSnooping',
        'dhcp_snoop_option82_trust' => 'getDhcpSnoopOption82Trust',
        'arp_inspection_trust' => 'getArpInspectionTrust',
        'igmps_flood_reports' => 'getIgmpsFloodReports',
        'igmps_flood_traffic' => 'getIgmpsFloodTraffic',
        'stp_state' => 'getStpState',
        'stp_root_guard' => 'getStpRootGuard',
        'stp_bpdu_guard' => 'getStpBpduGuard',
        'stp_bpdu_guard_timeout' => 'getStpBpduGuardTimeout',
        'edge_port' => 'getEdgePort',
        'discard_mode' => 'getDiscardMode',
        'packet_sampler' => 'getPacketSampler',
        'packet_sample_rate' => 'getPacketSampleRate',
        'sflow_counter_interval' => 'getSflowCounterInterval',
        'sample_direction' => 'getSampleDirection',
        'flow_control' => 'getFlowControl',
        'pause_meter' => 'getPauseMeter',
        'pause_meter_resume' => 'getPauseMeterResume',
        'loop_guard' => 'getLoopGuard',
        'loop_guard_timeout' => 'getLoopGuardTimeout',
        'qos_policy' => 'getQosPolicy',
        'storm_control_policy' => 'getStormControlPolicy',
        'port_security_policy' => 'getPortSecurityPolicy',
        'export_to_pool' => 'getExportToPool',
        'export_tags' => 'getExportTags',
        'learning_limit' => 'getLearningLimit',
        'sticky_mac' => 'getStickyMac',
        'lldp_status' => 'getLldpStatus',
        'lldp_profile' => 'getLldpProfile',
        'export_to' => 'getExportTo',
        'mac_addr' => 'getMacAddr',
        'port_selection_criteria' => 'getPortSelectionCriteria',
        'description' => 'getDescription',
        'lacp_speed' => 'getLacpSpeed',
        'mode' => 'getMode',
        'bundle' => 'getBundle',
        'member_withdrawal_behavior' => 'getMemberWithdrawalBehavior',
        'mclag' => 'getMclag',
        'min_bundle' => 'getMinBundle',
        'max_bundle' => 'getMaxBundle',
        'members' => 'getMembers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SPEED__10HALF = '10half';
    const SPEED__10FULL = '10full';
    const SPEED__100HALF = '100half';
    const SPEED__100FULL = '100full';
    const SPEED__1000AUTO = '1000auto';
    const SPEED__1000FIBER = '1000fiber';
    const SPEED__1000FULL = '1000full';
    const SPEED__10000 = '10000';
    const SPEED__40000 = '40000';
    const SPEED_AUTO = 'auto';
    const SPEED_AUTO_MODULE = 'auto-module';
    const SPEED__100_FX_HALF = '100FX-half';
    const SPEED__100_FX_FULL = '100FX-full';
    const SPEED__100000FULL = '100000full';
    const SPEED__2500AUTO = '2500auto';
    const SPEED__25000FULL = '25000full';
    const SPEED__50000FULL = '50000full';
    const SPEED__10000CR = '10000cr';
    const SPEED__10000SR = '10000sr';
    const SPEED__100000SR4 = '100000sr4';
    const SPEED__100000CR4 = '100000cr4';
    const SPEED__25000CR4 = '25000cr4';
    const SPEED__25000SR4 = '25000sr4';
    const SPEED__5000FULL = '5000full';
    const STATUS_UP = 'up';
    const STATUS_DOWN = 'down';
    const POE_STATUS_ENABLE = 'enable';
    const POE_STATUS_DISABLE = 'disable';
    const IP_SOURCE_GUARD_DISABLE = 'disable';
    const IP_SOURCE_GUARD_ENABLE = 'enable';
    const AGGREGATOR_MODE_BANDWIDTH = 'bandwidth';
    const AGGREGATOR_MODE_COUNT = 'count';
    const RPVST_PORT_DISABLED = 'disabled';
    const RPVST_PORT_ENABLED = 'enabled';
    const POE_PRE_STANDARD_DETECTION_ENABLE = 'enable';
    const POE_PRE_STANDARD_DETECTION_DISABLE = 'disable';
    const ALLOWED_VLANS_ALL_ENABLE = 'enable';
    const ALLOWED_VLANS_ALL_DISABLE = 'disable';
    const TYPE_PHYSICAL = 'physical';
    const TYPE_TRUNK = 'trunk';
    const ACCESS_MODE_NORMAL = 'normal';
    const ACCESS_MODE_NAC = 'nac';
    const DHCP_SNOOPING_UNTRUSTED = 'untrusted';
    const DHCP_SNOOPING_TRUSTED = 'trusted';
    const DHCP_SNOOP_OPTION82_TRUST_ENABLE = 'enable';
    const DHCP_SNOOP_OPTION82_TRUST_DISABLE = 'disable';
    const ARP_INSPECTION_TRUST_UNTRUSTED = 'untrusted';
    const ARP_INSPECTION_TRUST_TRUSTED = 'trusted';
    const IGMPS_FLOOD_REPORTS_ENABLE = 'enable';
    const IGMPS_FLOOD_REPORTS_DISABLE = 'disable';
    const IGMPS_FLOOD_TRAFFIC_ENABLE = 'enable';
    const IGMPS_FLOOD_TRAFFIC_DISABLE = 'disable';
    const STP_STATE_ENABLED = 'enabled';
    const STP_STATE_DISABLED = 'disabled';
    const STP_ROOT_GUARD_ENABLED = 'enabled';
    const STP_ROOT_GUARD_DISABLED = 'disabled';
    const STP_BPDU_GUARD_ENABLED = 'enabled';
    const STP_BPDU_GUARD_DISABLED = 'disabled';
    const EDGE_PORT_ENABLE = 'enable';
    const EDGE_PORT_DISABLE = 'disable';
    const DISCARD_MODE_NONE = 'none';
    const DISCARD_MODE_ALL_UNTAGGED = 'all-untagged';
    const DISCARD_MODE_ALL_TAGGED = 'all-tagged';
    const PACKET_SAMPLER_ENABLED = 'enabled';
    const PACKET_SAMPLER_DISABLED = 'disabled';
    const SAMPLE_DIRECTION_TX = 'tx';
    const SAMPLE_DIRECTION_RX = 'rx';
    const SAMPLE_DIRECTION_BOTH = 'both';
    const FLOW_CONTROL_DISABLE = 'disable';
    const FLOW_CONTROL_TX = 'tx';
    const FLOW_CONTROL_RX = 'rx';
    const FLOW_CONTROL_BOTH = 'both';
    const PAUSE_METER_RESUME__75 = '75%';
    const PAUSE_METER_RESUME__50 = '50%';
    const PAUSE_METER_RESUME__25 = '25%';
    const LOOP_GUARD_ENABLED = 'enabled';
    const LOOP_GUARD_DISABLED = 'disabled';
    const STICKY_MAC_ENABLE = 'enable';
    const STICKY_MAC_DISABLE = 'disable';
    const LLDP_STATUS_DISABLE = 'disable';
    const LLDP_STATUS_RX_ONLY = 'rx-only';
    const LLDP_STATUS_TX_ONLY = 'tx-only';
    const LLDP_STATUS_TX_RX = 'tx-rx';
    const PORT_SELECTION_CRITERIA_SRC_MAC = 'src-mac';
    const PORT_SELECTION_CRITERIA_DST_MAC = 'dst-mac';
    const PORT_SELECTION_CRITERIA_SRC_DST_MAC = 'src-dst-mac';
    const PORT_SELECTION_CRITERIA_SRC_IP = 'src-ip';
    const PORT_SELECTION_CRITERIA_DST_IP = 'dst-ip';
    const PORT_SELECTION_CRITERIA_SRC_DST_IP = 'src-dst-ip';
    const LACP_SPEED_SLOW = 'slow';
    const LACP_SPEED_FAST = 'fast';
    const MODE__STATIC = 'static';
    const MODE_LACP_PASSIVE = 'lacp-passive';
    const MODE_LACP_ACTIVE = 'lacp-active';
    const BUNDLE_ENABLE = 'enable';
    const BUNDLE_DISABLE = 'disable';
    const MEMBER_WITHDRAWAL_BEHAVIOR_FORWARD = 'forward';
    const MEMBER_WITHDRAWAL_BEHAVIOR_BLOCK = 'block';
    const MCLAG_ENABLE = 'enable';
    const MCLAG_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpeedAllowableValues()
    {
        return [
            self::SPEED__10HALF,
            self::SPEED__10FULL,
            self::SPEED__100HALF,
            self::SPEED__100FULL,
            self::SPEED__1000AUTO,
            self::SPEED__1000FIBER,
            self::SPEED__1000FULL,
            self::SPEED__10000,
            self::SPEED__40000,
            self::SPEED_AUTO,
            self::SPEED_AUTO_MODULE,
            self::SPEED__100_FX_HALF,
            self::SPEED__100_FX_FULL,
            self::SPEED__100000FULL,
            self::SPEED__2500AUTO,
            self::SPEED__25000FULL,
            self::SPEED__50000FULL,
            self::SPEED__10000CR,
            self::SPEED__10000SR,
            self::SPEED__100000SR4,
            self::SPEED__100000CR4,
            self::SPEED__25000CR4,
            self::SPEED__25000SR4,
            self::SPEED__5000FULL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UP,
            self::STATUS_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoeStatusAllowableValues()
    {
        return [
            self::POE_STATUS_ENABLE,
            self::POE_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpSourceGuardAllowableValues()
    {
        return [
            self::IP_SOURCE_GUARD_DISABLE,
            self::IP_SOURCE_GUARD_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAggregatorModeAllowableValues()
    {
        return [
            self::AGGREGATOR_MODE_BANDWIDTH,
            self::AGGREGATOR_MODE_COUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRpvstPortAllowableValues()
    {
        return [
            self::RPVST_PORT_DISABLED,
            self::RPVST_PORT_ENABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoePreStandardDetectionAllowableValues()
    {
        return [
            self::POE_PRE_STANDARD_DETECTION_ENABLE,
            self::POE_PRE_STANDARD_DETECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowedVlansAllAllowableValues()
    {
        return [
            self::ALLOWED_VLANS_ALL_ENABLE,
            self::ALLOWED_VLANS_ALL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PHYSICAL,
            self::TYPE_TRUNK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessModeAllowableValues()
    {
        return [
            self::ACCESS_MODE_NORMAL,
            self::ACCESS_MODE_NAC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpSnoopingAllowableValues()
    {
        return [
            self::DHCP_SNOOPING_UNTRUSTED,
            self::DHCP_SNOOPING_TRUSTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpSnoopOption82TrustAllowableValues()
    {
        return [
            self::DHCP_SNOOP_OPTION82_TRUST_ENABLE,
            self::DHCP_SNOOP_OPTION82_TRUST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArpInspectionTrustAllowableValues()
    {
        return [
            self::ARP_INSPECTION_TRUST_UNTRUSTED,
            self::ARP_INSPECTION_TRUST_TRUSTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgmpsFloodReportsAllowableValues()
    {
        return [
            self::IGMPS_FLOOD_REPORTS_ENABLE,
            self::IGMPS_FLOOD_REPORTS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgmpsFloodTrafficAllowableValues()
    {
        return [
            self::IGMPS_FLOOD_TRAFFIC_ENABLE,
            self::IGMPS_FLOOD_TRAFFIC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpStateAllowableValues()
    {
        return [
            self::STP_STATE_ENABLED,
            self::STP_STATE_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpRootGuardAllowableValues()
    {
        return [
            self::STP_ROOT_GUARD_ENABLED,
            self::STP_ROOT_GUARD_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpBpduGuardAllowableValues()
    {
        return [
            self::STP_BPDU_GUARD_ENABLED,
            self::STP_BPDU_GUARD_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEdgePortAllowableValues()
    {
        return [
            self::EDGE_PORT_ENABLE,
            self::EDGE_PORT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscardModeAllowableValues()
    {
        return [
            self::DISCARD_MODE_NONE,
            self::DISCARD_MODE_ALL_UNTAGGED,
            self::DISCARD_MODE_ALL_TAGGED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPacketSamplerAllowableValues()
    {
        return [
            self::PACKET_SAMPLER_ENABLED,
            self::PACKET_SAMPLER_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSampleDirectionAllowableValues()
    {
        return [
            self::SAMPLE_DIRECTION_TX,
            self::SAMPLE_DIRECTION_RX,
            self::SAMPLE_DIRECTION_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlowControlAllowableValues()
    {
        return [
            self::FLOW_CONTROL_DISABLE,
            self::FLOW_CONTROL_TX,
            self::FLOW_CONTROL_RX,
            self::FLOW_CONTROL_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPauseMeterResumeAllowableValues()
    {
        return [
            self::PAUSE_METER_RESUME__75,
            self::PAUSE_METER_RESUME__50,
            self::PAUSE_METER_RESUME__25,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoopGuardAllowableValues()
    {
        return [
            self::LOOP_GUARD_ENABLED,
            self::LOOP_GUARD_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStickyMacAllowableValues()
    {
        return [
            self::STICKY_MAC_ENABLE,
            self::STICKY_MAC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpStatusAllowableValues()
    {
        return [
            self::LLDP_STATUS_DISABLE,
            self::LLDP_STATUS_RX_ONLY,
            self::LLDP_STATUS_TX_ONLY,
            self::LLDP_STATUS_TX_RX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortSelectionCriteriaAllowableValues()
    {
        return [
            self::PORT_SELECTION_CRITERIA_SRC_MAC,
            self::PORT_SELECTION_CRITERIA_DST_MAC,
            self::PORT_SELECTION_CRITERIA_SRC_DST_MAC,
            self::PORT_SELECTION_CRITERIA_SRC_IP,
            self::PORT_SELECTION_CRITERIA_DST_IP,
            self::PORT_SELECTION_CRITERIA_SRC_DST_IP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLacpSpeedAllowableValues()
    {
        return [
            self::LACP_SPEED_SLOW,
            self::LACP_SPEED_FAST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE__STATIC,
            self::MODE_LACP_PASSIVE,
            self::MODE_LACP_ACTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBundleAllowableValues()
    {
        return [
            self::BUNDLE_ENABLE,
            self::BUNDLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMemberWithdrawalBehaviorAllowableValues()
    {
        return [
            self::MEMBER_WITHDRAWAL_BEHAVIOR_FORWARD,
            self::MEMBER_WITHDRAWAL_BEHAVIOR_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMclagAllowableValues()
    {
        return [
            self::MCLAG_ENABLE,
            self::MCLAG_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['port_name'] = $data['port_name'] ?? null;
        $this->container['port_owner'] = $data['port_owner'] ?? null;
        $this->container['switch_id'] = $data['switch_id'] ?? null;
        $this->container['speed'] = $data['speed'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['poe_status'] = $data['poe_status'] ?? null;
        $this->container['ip_source_guard'] = $data['ip_source_guard'] ?? null;
        $this->container['ptp_policy'] = $data['ptp_policy'] ?? null;
        $this->container['aggregator_mode'] = $data['aggregator_mode'] ?? null;
        $this->container['rpvst_port'] = $data['rpvst_port'] ?? null;
        $this->container['poe_pre_standard_detection'] = $data['poe_pre_standard_detection'] ?? null;
        $this->container['port_number'] = $data['port_number'] ?? null;
        $this->container['port_prefix_type'] = $data['port_prefix_type'] ?? null;
        $this->container['fortilink_port'] = $data['fortilink_port'] ?? null;
        $this->container['poe_capable'] = $data['poe_capable'] ?? null;
        $this->container['stacking_port'] = $data['stacking_port'] ?? null;
        $this->container['p2p_port'] = $data['p2p_port'] ?? null;
        $this->container['mclag_icl_port'] = $data['mclag_icl_port'] ?? null;
        $this->container['fiber_port'] = $data['fiber_port'] ?? null;
        $this->container['media_type'] = $data['media_type'] ?? null;
        $this->container['flags'] = $data['flags'] ?? null;
        $this->container['isl_local_trunk_name'] = $data['isl_local_trunk_name'] ?? null;
        $this->container['isl_peer_port_name'] = $data['isl_peer_port_name'] ?? null;
        $this->container['isl_peer_device_name'] = $data['isl_peer_device_name'] ?? null;
        $this->container['fgt_peer_port_name'] = $data['fgt_peer_port_name'] ?? null;
        $this->container['fgt_peer_device_name'] = $data['fgt_peer_device_name'] ?? null;
        $this->container['vlan'] = $data['vlan'] ?? null;
        $this->container['allowed_vlans_all'] = $data['allowed_vlans_all'] ?? null;
        $this->container['allowed_vlans'] = $data['allowed_vlans'] ?? null;
        $this->container['untagged_vlans'] = $data['untagged_vlans'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['access_mode'] = $data['access_mode'] ?? null;
        $this->container['dhcp_snooping'] = $data['dhcp_snooping'] ?? null;
        $this->container['dhcp_snoop_option82_trust'] = $data['dhcp_snoop_option82_trust'] ?? null;
        $this->container['arp_inspection_trust'] = $data['arp_inspection_trust'] ?? null;
        $this->container['igmps_flood_reports'] = $data['igmps_flood_reports'] ?? null;
        $this->container['igmps_flood_traffic'] = $data['igmps_flood_traffic'] ?? null;
        $this->container['stp_state'] = $data['stp_state'] ?? null;
        $this->container['stp_root_guard'] = $data['stp_root_guard'] ?? null;
        $this->container['stp_bpdu_guard'] = $data['stp_bpdu_guard'] ?? null;
        $this->container['stp_bpdu_guard_timeout'] = $data['stp_bpdu_guard_timeout'] ?? null;
        $this->container['edge_port'] = $data['edge_port'] ?? null;
        $this->container['discard_mode'] = $data['discard_mode'] ?? null;
        $this->container['packet_sampler'] = $data['packet_sampler'] ?? null;
        $this->container['packet_sample_rate'] = $data['packet_sample_rate'] ?? null;
        $this->container['sflow_counter_interval'] = $data['sflow_counter_interval'] ?? null;
        $this->container['sample_direction'] = $data['sample_direction'] ?? null;
        $this->container['flow_control'] = $data['flow_control'] ?? null;
        $this->container['pause_meter'] = $data['pause_meter'] ?? null;
        $this->container['pause_meter_resume'] = $data['pause_meter_resume'] ?? null;
        $this->container['loop_guard'] = $data['loop_guard'] ?? null;
        $this->container['loop_guard_timeout'] = $data['loop_guard_timeout'] ?? null;
        $this->container['qos_policy'] = $data['qos_policy'] ?? null;
        $this->container['storm_control_policy'] = $data['storm_control_policy'] ?? null;
        $this->container['port_security_policy'] = $data['port_security_policy'] ?? null;
        $this->container['export_to_pool'] = $data['export_to_pool'] ?? null;
        $this->container['export_tags'] = $data['export_tags'] ?? null;
        $this->container['learning_limit'] = $data['learning_limit'] ?? null;
        $this->container['sticky_mac'] = $data['sticky_mac'] ?? null;
        $this->container['lldp_status'] = $data['lldp_status'] ?? null;
        $this->container['lldp_profile'] = $data['lldp_profile'] ?? null;
        $this->container['export_to'] = $data['export_to'] ?? null;
        $this->container['mac_addr'] = $data['mac_addr'] ?? null;
        $this->container['port_selection_criteria'] = $data['port_selection_criteria'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['lacp_speed'] = $data['lacp_speed'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['bundle'] = $data['bundle'] ?? null;
        $this->container['member_withdrawal_behavior'] = $data['member_withdrawal_behavior'] ?? null;
        $this->container['mclag'] = $data['mclag'] ?? null;
        $this->container['min_bundle'] = $data['min_bundle'] ?? null;
        $this->container['max_bundle'] = $data['max_bundle'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['port_name']) && (mb_strlen($this->container['port_name']) > 15)) {
            $invalidProperties[] = "invalid value for 'port_name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['port_owner']) && (mb_strlen($this->container['port_owner']) > 15)) {
            $invalidProperties[] = "invalid value for 'port_owner', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['switch_id']) && (mb_strlen($this->container['switch_id']) > 16)) {
            $invalidProperties[] = "invalid value for 'switch_id', the character length must be smaller than or equal to 16.";
        }

        $allowedValues = $this->getSpeedAllowableValues();
        if (!is_null($this->container['speed']) && !in_array($this->container['speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'speed', must be one of '%s'",
                $this->container['speed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoeStatusAllowableValues();
        if (!is_null($this->container['poe_status']) && !in_array($this->container['poe_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_status', must be one of '%s'",
                $this->container['poe_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpSourceGuardAllowableValues();
        if (!is_null($this->container['ip_source_guard']) && !in_array($this->container['ip_source_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_source_guard', must be one of '%s'",
                $this->container['ip_source_guard'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ptp_policy']) && (mb_strlen($this->container['ptp_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'ptp_policy', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getAggregatorModeAllowableValues();
        if (!is_null($this->container['aggregator_mode']) && !in_array($this->container['aggregator_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aggregator_mode', must be one of '%s'",
                $this->container['aggregator_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRpvstPortAllowableValues();
        if (!is_null($this->container['rpvst_port']) && !in_array($this->container['rpvst_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rpvst_port', must be one of '%s'",
                $this->container['rpvst_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoePreStandardDetectionAllowableValues();
        if (!is_null($this->container['poe_pre_standard_detection']) && !in_array($this->container['poe_pre_standard_detection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_pre_standard_detection', must be one of '%s'",
                $this->container['poe_pre_standard_detection'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port_number']) && ($this->container['port_number'] > 64)) {
            $invalidProperties[] = "invalid value for 'port_number', must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['port_number']) && ($this->container['port_number'] < 1)) {
            $invalidProperties[] = "invalid value for 'port_number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['port_prefix_type']) && ($this->container['port_prefix_type'] > 1)) {
            $invalidProperties[] = "invalid value for 'port_prefix_type', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['port_prefix_type']) && ($this->container['port_prefix_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'port_prefix_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fortilink_port']) && ($this->container['fortilink_port'] > 1)) {
            $invalidProperties[] = "invalid value for 'fortilink_port', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['fortilink_port']) && ($this->container['fortilink_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'fortilink_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['poe_capable']) && ($this->container['poe_capable'] > 1)) {
            $invalidProperties[] = "invalid value for 'poe_capable', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['poe_capable']) && ($this->container['poe_capable'] < 0)) {
            $invalidProperties[] = "invalid value for 'poe_capable', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['stacking_port']) && ($this->container['stacking_port'] > 1)) {
            $invalidProperties[] = "invalid value for 'stacking_port', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['stacking_port']) && ($this->container['stacking_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'stacking_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['p2p_port']) && ($this->container['p2p_port'] > 1)) {
            $invalidProperties[] = "invalid value for 'p2p_port', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['p2p_port']) && ($this->container['p2p_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'p2p_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mclag_icl_port']) && ($this->container['mclag_icl_port'] > 1)) {
            $invalidProperties[] = "invalid value for 'mclag_icl_port', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['mclag_icl_port']) && ($this->container['mclag_icl_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'mclag_icl_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fiber_port']) && ($this->container['fiber_port'] > 1)) {
            $invalidProperties[] = "invalid value for 'fiber_port', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['fiber_port']) && ($this->container['fiber_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'fiber_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['media_type']) && (mb_strlen($this->container['media_type']) > 31)) {
            $invalidProperties[] = "invalid value for 'media_type', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['flags']) && ($this->container['flags'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'flags', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['flags']) && ($this->container['flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'flags', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['isl_local_trunk_name']) && (mb_strlen($this->container['isl_local_trunk_name']) > 15)) {
            $invalidProperties[] = "invalid value for 'isl_local_trunk_name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['isl_peer_port_name']) && (mb_strlen($this->container['isl_peer_port_name']) > 15)) {
            $invalidProperties[] = "invalid value for 'isl_peer_port_name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['isl_peer_device_name']) && (mb_strlen($this->container['isl_peer_device_name']) > 16)) {
            $invalidProperties[] = "invalid value for 'isl_peer_device_name', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['fgt_peer_port_name']) && (mb_strlen($this->container['fgt_peer_port_name']) > 15)) {
            $invalidProperties[] = "invalid value for 'fgt_peer_port_name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['fgt_peer_device_name']) && (mb_strlen($this->container['fgt_peer_device_name']) > 16)) {
            $invalidProperties[] = "invalid value for 'fgt_peer_device_name', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['vlan']) && (mb_strlen($this->container['vlan']) > 15)) {
            $invalidProperties[] = "invalid value for 'vlan', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getAllowedVlansAllAllowableValues();
        if (!is_null($this->container['allowed_vlans_all']) && !in_array($this->container['allowed_vlans_all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowed_vlans_all', must be one of '%s'",
                $this->container['allowed_vlans_all'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['allowed_vlans']) && (count($this->container['allowed_vlans']) > 0)) {
            $invalidProperties[] = "invalid value for 'allowed_vlans', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['untagged_vlans']) && (count($this->container['untagged_vlans']) > 0)) {
            $invalidProperties[] = "invalid value for 'untagged_vlans', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessModeAllowableValues();
        if (!is_null($this->container['access_mode']) && !in_array($this->container['access_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_mode', must be one of '%s'",
                $this->container['access_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpSnoopingAllowableValues();
        if (!is_null($this->container['dhcp_snooping']) && !in_array($this->container['dhcp_snooping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_snooping', must be one of '%s'",
                $this->container['dhcp_snooping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpSnoopOption82TrustAllowableValues();
        if (!is_null($this->container['dhcp_snoop_option82_trust']) && !in_array($this->container['dhcp_snoop_option82_trust'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_snoop_option82_trust', must be one of '%s'",
                $this->container['dhcp_snoop_option82_trust'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getArpInspectionTrustAllowableValues();
        if (!is_null($this->container['arp_inspection_trust']) && !in_array($this->container['arp_inspection_trust'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'arp_inspection_trust', must be one of '%s'",
                $this->container['arp_inspection_trust'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgmpsFloodReportsAllowableValues();
        if (!is_null($this->container['igmps_flood_reports']) && !in_array($this->container['igmps_flood_reports'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'igmps_flood_reports', must be one of '%s'",
                $this->container['igmps_flood_reports'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgmpsFloodTrafficAllowableValues();
        if (!is_null($this->container['igmps_flood_traffic']) && !in_array($this->container['igmps_flood_traffic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'igmps_flood_traffic', must be one of '%s'",
                $this->container['igmps_flood_traffic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpStateAllowableValues();
        if (!is_null($this->container['stp_state']) && !in_array($this->container['stp_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp_state', must be one of '%s'",
                $this->container['stp_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpRootGuardAllowableValues();
        if (!is_null($this->container['stp_root_guard']) && !in_array($this->container['stp_root_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp_root_guard', must be one of '%s'",
                $this->container['stp_root_guard'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpBpduGuardAllowableValues();
        if (!is_null($this->container['stp_bpdu_guard']) && !in_array($this->container['stp_bpdu_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp_bpdu_guard', must be one of '%s'",
                $this->container['stp_bpdu_guard'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['stp_bpdu_guard_timeout']) && ($this->container['stp_bpdu_guard_timeout'] > 120)) {
            $invalidProperties[] = "invalid value for 'stp_bpdu_guard_timeout', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['stp_bpdu_guard_timeout']) && ($this->container['stp_bpdu_guard_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'stp_bpdu_guard_timeout', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getEdgePortAllowableValues();
        if (!is_null($this->container['edge_port']) && !in_array($this->container['edge_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'edge_port', must be one of '%s'",
                $this->container['edge_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscardModeAllowableValues();
        if (!is_null($this->container['discard_mode']) && !in_array($this->container['discard_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'discard_mode', must be one of '%s'",
                $this->container['discard_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPacketSamplerAllowableValues();
        if (!is_null($this->container['packet_sampler']) && !in_array($this->container['packet_sampler'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packet_sampler', must be one of '%s'",
                $this->container['packet_sampler'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['packet_sample_rate']) && ($this->container['packet_sample_rate'] > 99999)) {
            $invalidProperties[] = "invalid value for 'packet_sample_rate', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['packet_sample_rate']) && ($this->container['packet_sample_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'packet_sample_rate', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sflow_counter_interval']) && ($this->container['sflow_counter_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'sflow_counter_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sflow_counter_interval']) && ($this->container['sflow_counter_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'sflow_counter_interval', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSampleDirectionAllowableValues();
        if (!is_null($this->container['sample_direction']) && !in_array($this->container['sample_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sample_direction', must be one of '%s'",
                $this->container['sample_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFlowControlAllowableValues();
        if (!is_null($this->container['flow_control']) && !in_array($this->container['flow_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'flow_control', must be one of '%s'",
                $this->container['flow_control'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pause_meter']) && ($this->container['pause_meter'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'pause_meter', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['pause_meter']) && ($this->container['pause_meter'] < 128)) {
            $invalidProperties[] = "invalid value for 'pause_meter', must be bigger than or equal to 128.";
        }

        $allowedValues = $this->getPauseMeterResumeAllowableValues();
        if (!is_null($this->container['pause_meter_resume']) && !in_array($this->container['pause_meter_resume'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pause_meter_resume', must be one of '%s'",
                $this->container['pause_meter_resume'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoopGuardAllowableValues();
        if (!is_null($this->container['loop_guard']) && !in_array($this->container['loop_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'loop_guard', must be one of '%s'",
                $this->container['loop_guard'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['loop_guard_timeout']) && ($this->container['loop_guard_timeout'] > 120)) {
            $invalidProperties[] = "invalid value for 'loop_guard_timeout', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['loop_guard_timeout']) && ($this->container['loop_guard_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'loop_guard_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['qos_policy']) && (mb_strlen($this->container['qos_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'qos_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['storm_control_policy']) && (mb_strlen($this->container['storm_control_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'storm_control_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port_security_policy']) && (mb_strlen($this->container['port_security_policy']) > 31)) {
            $invalidProperties[] = "invalid value for 'port_security_policy', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['export_to_pool']) && (mb_strlen($this->container['export_to_pool']) > 35)) {
            $invalidProperties[] = "invalid value for 'export_to_pool', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['export_tags']) && (count($this->container['export_tags']) > 0)) {
            $invalidProperties[] = "invalid value for 'export_tags', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['learning_limit']) && ($this->container['learning_limit'] > 128)) {
            $invalidProperties[] = "invalid value for 'learning_limit', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['learning_limit']) && ($this->container['learning_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'learning_limit', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStickyMacAllowableValues();
        if (!is_null($this->container['sticky_mac']) && !in_array($this->container['sticky_mac'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sticky_mac', must be one of '%s'",
                $this->container['sticky_mac'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpStatusAllowableValues();
        if (!is_null($this->container['lldp_status']) && !in_array($this->container['lldp_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_status', must be one of '%s'",
                $this->container['lldp_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lldp_profile']) && (mb_strlen($this->container['lldp_profile']) > 63)) {
            $invalidProperties[] = "invalid value for 'lldp_profile', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['export_to']) && (mb_strlen($this->container['export_to']) > 31)) {
            $invalidProperties[] = "invalid value for 'export_to', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getPortSelectionCriteriaAllowableValues();
        if (!is_null($this->container['port_selection_criteria']) && !in_array($this->container['port_selection_criteria'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port_selection_criteria', must be one of '%s'",
                $this->container['port_selection_criteria'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getLacpSpeedAllowableValues();
        if (!is_null($this->container['lacp_speed']) && !in_array($this->container['lacp_speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lacp_speed', must be one of '%s'",
                $this->container['lacp_speed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBundleAllowableValues();
        if (!is_null($this->container['bundle']) && !in_array($this->container['bundle'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bundle', must be one of '%s'",
                $this->container['bundle'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMemberWithdrawalBehaviorAllowableValues();
        if (!is_null($this->container['member_withdrawal_behavior']) && !in_array($this->container['member_withdrawal_behavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'member_withdrawal_behavior', must be one of '%s'",
                $this->container['member_withdrawal_behavior'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMclagAllowableValues();
        if (!is_null($this->container['mclag']) && !in_array($this->container['mclag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mclag', must be one of '%s'",
                $this->container['mclag'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['min_bundle']) && ($this->container['min_bundle'] > 24)) {
            $invalidProperties[] = "invalid value for 'min_bundle', must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['min_bundle']) && ($this->container['min_bundle'] < 1)) {
            $invalidProperties[] = "invalid value for 'min_bundle', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_bundle']) && ($this->container['max_bundle'] > 24)) {
            $invalidProperties[] = "invalid value for 'max_bundle', must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['max_bundle']) && ($this->container['max_bundle'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_bundle', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['members']) && (count($this->container['members']) > 0)) {
            $invalidProperties[] = "invalid value for 'members', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port_name
     *
     * @return string|null
     */
    public function getPortName()
    {
        return $this->container['port_name'];
    }

    /**
     * Sets port_name
     *
     * @param string|null $port_name Switch port name.
     *
     * @return self
     */
    public function setPortName($port_name)
    {
        if (!is_null($port_name) && (mb_strlen($port_name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['port_name'] = $port_name;

        return $this;
    }

    /**
     * Gets port_owner
     *
     * @return string|null
     */
    public function getPortOwner()
    {
        return $this->container['port_owner'];
    }

    /**
     * Sets port_owner
     *
     * @param string|null $port_owner Switch port name.
     *
     * @return self
     */
    public function setPortOwner($port_owner)
    {
        if (!is_null($port_owner) && (mb_strlen($port_owner) > 15)) {
            throw new \InvalidArgumentException('invalid length for $port_owner when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['port_owner'] = $port_owner;

        return $this;
    }

    /**
     * Gets switch_id
     *
     * @return string|null
     */
    public function getSwitchId()
    {
        return $this->container['switch_id'];
    }

    /**
     * Sets switch_id
     *
     * @param string|null $switch_id Switch id.
     *
     * @return self
     */
    public function setSwitchId($switch_id)
    {
        if (!is_null($switch_id) && (mb_strlen($switch_id) > 16)) {
            throw new \InvalidArgumentException('invalid length for $switch_id when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 16.');
        }

        $this->container['switch_id'] = $switch_id;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return string|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param string|null $speed Switch port speed; default and available settings depend on hardware.    10half:10M half-duplex.    10full:10M full-duplex.    100half:100M half-duplex.    100full:100M full-duplex.    1000auto:Auto-negotiation (1G full-duplex only).    1000fiber:1G full-duplex (fiber SFPs only)    1000full:1G full-duplex    10000:10G full-duplex    40000:40G full-duplex    auto:Auto-negotiation.    auto-module:Auto Module.    100FX-half:100Mbps half-duplex.100Base-FX.    100FX-full:100Mbps full-duplex.100Base-FX.    100000full:100Gbps full-duplex.    2500auto:Auto-Negotiation (2.5Gbps Only).    25000full:25Gbps full-duplex.    50000full:50Gbps full-duplex.    10000cr:10Gbps copper interface.    10000sr:10Gbps SFI interface.    100000sr4:100Gbps SFI interface.    100000cr4:100Gbps copper interface.    25000cr4:25Gbps copper interface.    25000sr4:25Gbps SFI interface.    5000full:5Gbps full-duplex.
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        $allowedValues = $this->getSpeedAllowableValues();
        if (!is_null($speed) && !in_array($speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'speed', must be one of '%s'",
                    $speed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Switch port admin status: up or down.    up:Set admin status up.    down:Set admin status down.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets poe_status
     *
     * @return string|null
     */
    public function getPoeStatus()
    {
        return $this->container['poe_status'];
    }

    /**
     * Sets poe_status
     *
     * @param string|null $poe_status Enable/disable PoE status.    enable:Enable PoE status.    disable:Disable PoE status.
     *
     * @return self
     */
    public function setPoeStatus($poe_status)
    {
        $allowedValues = $this->getPoeStatusAllowableValues();
        if (!is_null($poe_status) && !in_array($poe_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_status', must be one of '%s'",
                    $poe_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_status'] = $poe_status;

        return $this;
    }

    /**
     * Gets ip_source_guard
     *
     * @return string|null
     */
    public function getIpSourceGuard()
    {
        return $this->container['ip_source_guard'];
    }

    /**
     * Sets ip_source_guard
     *
     * @param string|null $ip_source_guard Enable/disable IP source guard.    disable:Disable IP source guard.    enable:Enable IP source guard.
     *
     * @return self
     */
    public function setIpSourceGuard($ip_source_guard)
    {
        $allowedValues = $this->getIpSourceGuardAllowableValues();
        if (!is_null($ip_source_guard) && !in_array($ip_source_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_source_guard', must be one of '%s'",
                    $ip_source_guard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_source_guard'] = $ip_source_guard;

        return $this;
    }

    /**
     * Gets ptp_policy
     *
     * @return string|null
     */
    public function getPtpPolicy()
    {
        return $this->container['ptp_policy'];
    }

    /**
     * Sets ptp_policy
     *
     * @param string|null $ptp_policy PTP policy configuration.
     *
     * @return self
     */
    public function setPtpPolicy($ptp_policy)
    {
        if (!is_null($ptp_policy) && (mb_strlen($ptp_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $ptp_policy when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 63.');
        }

        $this->container['ptp_policy'] = $ptp_policy;

        return $this;
    }

    /**
     * Gets aggregator_mode
     *
     * @return string|null
     */
    public function getAggregatorMode()
    {
        return $this->container['aggregator_mode'];
    }

    /**
     * Sets aggregator_mode
     *
     * @param string|null $aggregator_mode LACP member select mode.    bandwidth:Member selection based on largest total bandwidth of links of similar speed.    count:Member selection based on largest count of similar link speed.
     *
     * @return self
     */
    public function setAggregatorMode($aggregator_mode)
    {
        $allowedValues = $this->getAggregatorModeAllowableValues();
        if (!is_null($aggregator_mode) && !in_array($aggregator_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aggregator_mode', must be one of '%s'",
                    $aggregator_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aggregator_mode'] = $aggregator_mode;

        return $this;
    }

    /**
     * Gets rpvst_port
     *
     * @return string|null
     */
    public function getRpvstPort()
    {
        return $this->container['rpvst_port'];
    }

    /**
     * Sets rpvst_port
     *
     * @param string|null $rpvst_port Enable/disable inter-operability with rapid PVST on this interface.    disabled:Disable inter-operability with rapid PVST on this interface.    enabled:Enable inter-operability with rapid PVST on this interface.
     *
     * @return self
     */
    public function setRpvstPort($rpvst_port)
    {
        $allowedValues = $this->getRpvstPortAllowableValues();
        if (!is_null($rpvst_port) && !in_array($rpvst_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rpvst_port', must be one of '%s'",
                    $rpvst_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rpvst_port'] = $rpvst_port;

        return $this;
    }

    /**
     * Gets poe_pre_standard_detection
     *
     * @return string|null
     */
    public function getPoePreStandardDetection()
    {
        return $this->container['poe_pre_standard_detection'];
    }

    /**
     * Sets poe_pre_standard_detection
     *
     * @param string|null $poe_pre_standard_detection Enable/disable PoE pre-standard detection.    enable:Enable PoE pre-standard detection.    disable:Disable PoE pre-standard detection.
     *
     * @return self
     */
    public function setPoePreStandardDetection($poe_pre_standard_detection)
    {
        $allowedValues = $this->getPoePreStandardDetectionAllowableValues();
        if (!is_null($poe_pre_standard_detection) && !in_array($poe_pre_standard_detection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_pre_standard_detection', must be one of '%s'",
                    $poe_pre_standard_detection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_pre_standard_detection'] = $poe_pre_standard_detection;

        return $this;
    }

    /**
     * Gets port_number
     *
     * @return int|null
     */
    public function getPortNumber()
    {
        return $this->container['port_number'];
    }

    /**
     * Sets port_number
     *
     * @param int|null $port_number Port number.
     *
     * @return self
     */
    public function setPortNumber($port_number)
    {

        if (!is_null($port_number) && ($port_number > 64)) {
            throw new \InvalidArgumentException('invalid value for $port_number when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 64.');
        }
        if (!is_null($port_number) && ($port_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $port_number when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 1.');
        }

        $this->container['port_number'] = $port_number;

        return $this;
    }

    /**
     * Gets port_prefix_type
     *
     * @return int|null
     */
    public function getPortPrefixType()
    {
        return $this->container['port_prefix_type'];
    }

    /**
     * Sets port_prefix_type
     *
     * @param int|null $port_prefix_type Port prefix type.
     *
     * @return self
     */
    public function setPortPrefixType($port_prefix_type)
    {

        if (!is_null($port_prefix_type) && ($port_prefix_type > 1)) {
            throw new \InvalidArgumentException('invalid value for $port_prefix_type when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($port_prefix_type) && ($port_prefix_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $port_prefix_type when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['port_prefix_type'] = $port_prefix_type;

        return $this;
    }

    /**
     * Gets fortilink_port
     *
     * @return int|null
     */
    public function getFortilinkPort()
    {
        return $this->container['fortilink_port'];
    }

    /**
     * Sets fortilink_port
     *
     * @param int|null $fortilink_port FortiLink uplink port.
     *
     * @return self
     */
    public function setFortilinkPort($fortilink_port)
    {

        if (!is_null($fortilink_port) && ($fortilink_port > 1)) {
            throw new \InvalidArgumentException('invalid value for $fortilink_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($fortilink_port) && ($fortilink_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $fortilink_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['fortilink_port'] = $fortilink_port;

        return $this;
    }

    /**
     * Gets poe_capable
     *
     * @return int|null
     */
    public function getPoeCapable()
    {
        return $this->container['poe_capable'];
    }

    /**
     * Sets poe_capable
     *
     * @param int|null $poe_capable PoE capable.
     *
     * @return self
     */
    public function setPoeCapable($poe_capable)
    {

        if (!is_null($poe_capable) && ($poe_capable > 1)) {
            throw new \InvalidArgumentException('invalid value for $poe_capable when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($poe_capable) && ($poe_capable < 0)) {
            throw new \InvalidArgumentException('invalid value for $poe_capable when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['poe_capable'] = $poe_capable;

        return $this;
    }

    /**
     * Gets stacking_port
     *
     * @return int|null
     */
    public function getStackingPort()
    {
        return $this->container['stacking_port'];
    }

    /**
     * Sets stacking_port
     *
     * @param int|null $stacking_port Stacking port.
     *
     * @return self
     */
    public function setStackingPort($stacking_port)
    {

        if (!is_null($stacking_port) && ($stacking_port > 1)) {
            throw new \InvalidArgumentException('invalid value for $stacking_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($stacking_port) && ($stacking_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $stacking_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['stacking_port'] = $stacking_port;

        return $this;
    }

    /**
     * Gets p2p_port
     *
     * @return int|null
     */
    public function getP2pPort()
    {
        return $this->container['p2p_port'];
    }

    /**
     * Sets p2p_port
     *
     * @param int|null $p2p_port General peer to peer tunnel port.
     *
     * @return self
     */
    public function setP2pPort($p2p_port)
    {

        if (!is_null($p2p_port) && ($p2p_port > 1)) {
            throw new \InvalidArgumentException('invalid value for $p2p_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($p2p_port) && ($p2p_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $p2p_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['p2p_port'] = $p2p_port;

        return $this;
    }

    /**
     * Gets mclag_icl_port
     *
     * @return int|null
     */
    public function getMclagIclPort()
    {
        return $this->container['mclag_icl_port'];
    }

    /**
     * Sets mclag_icl_port
     *
     * @param int|null $mclag_icl_port MCLAG-ICL port.
     *
     * @return self
     */
    public function setMclagIclPort($mclag_icl_port)
    {

        if (!is_null($mclag_icl_port) && ($mclag_icl_port > 1)) {
            throw new \InvalidArgumentException('invalid value for $mclag_icl_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($mclag_icl_port) && ($mclag_icl_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $mclag_icl_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['mclag_icl_port'] = $mclag_icl_port;

        return $this;
    }

    /**
     * Gets fiber_port
     *
     * @return int|null
     */
    public function getFiberPort()
    {
        return $this->container['fiber_port'];
    }

    /**
     * Sets fiber_port
     *
     * @param int|null $fiber_port Fiber-port.
     *
     * @return self
     */
    public function setFiberPort($fiber_port)
    {

        if (!is_null($fiber_port) && ($fiber_port > 1)) {
            throw new \InvalidArgumentException('invalid value for $fiber_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 1.');
        }
        if (!is_null($fiber_port) && ($fiber_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $fiber_port when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['fiber_port'] = $fiber_port;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type Media type.
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (!is_null($media_type) && (mb_strlen($media_type) > 31)) {
            throw new \InvalidArgumentException('invalid length for $media_type when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 31.');
        }

        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int|null $flags Port properties flags.
     *
     * @return self
     */
    public function setFlags($flags)
    {

        if (!is_null($flags) && ($flags > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($flags) && ($flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets isl_local_trunk_name
     *
     * @return string|null
     */
    public function getIslLocalTrunkName()
    {
        return $this->container['isl_local_trunk_name'];
    }

    /**
     * Sets isl_local_trunk_name
     *
     * @param string|null $isl_local_trunk_name ISL local trunk name.
     *
     * @return self
     */
    public function setIslLocalTrunkName($isl_local_trunk_name)
    {
        if (!is_null($isl_local_trunk_name) && (mb_strlen($isl_local_trunk_name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $isl_local_trunk_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['isl_local_trunk_name'] = $isl_local_trunk_name;

        return $this;
    }

    /**
     * Gets isl_peer_port_name
     *
     * @return string|null
     */
    public function getIslPeerPortName()
    {
        return $this->container['isl_peer_port_name'];
    }

    /**
     * Sets isl_peer_port_name
     *
     * @param string|null $isl_peer_port_name ISL peer port name.
     *
     * @return self
     */
    public function setIslPeerPortName($isl_peer_port_name)
    {
        if (!is_null($isl_peer_port_name) && (mb_strlen($isl_peer_port_name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $isl_peer_port_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['isl_peer_port_name'] = $isl_peer_port_name;

        return $this;
    }

    /**
     * Gets isl_peer_device_name
     *
     * @return string|null
     */
    public function getIslPeerDeviceName()
    {
        return $this->container['isl_peer_device_name'];
    }

    /**
     * Sets isl_peer_device_name
     *
     * @param string|null $isl_peer_device_name ISL peer device name.
     *
     * @return self
     */
    public function setIslPeerDeviceName($isl_peer_device_name)
    {
        if (!is_null($isl_peer_device_name) && (mb_strlen($isl_peer_device_name) > 16)) {
            throw new \InvalidArgumentException('invalid length for $isl_peer_device_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 16.');
        }

        $this->container['isl_peer_device_name'] = $isl_peer_device_name;

        return $this;
    }

    /**
     * Gets fgt_peer_port_name
     *
     * @return string|null
     */
    public function getFgtPeerPortName()
    {
        return $this->container['fgt_peer_port_name'];
    }

    /**
     * Sets fgt_peer_port_name
     *
     * @param string|null $fgt_peer_port_name FGT peer port name.
     *
     * @return self
     */
    public function setFgtPeerPortName($fgt_peer_port_name)
    {
        if (!is_null($fgt_peer_port_name) && (mb_strlen($fgt_peer_port_name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $fgt_peer_port_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['fgt_peer_port_name'] = $fgt_peer_port_name;

        return $this;
    }

    /**
     * Gets fgt_peer_device_name
     *
     * @return string|null
     */
    public function getFgtPeerDeviceName()
    {
        return $this->container['fgt_peer_device_name'];
    }

    /**
     * Sets fgt_peer_device_name
     *
     * @param string|null $fgt_peer_device_name FGT peer device name.
     *
     * @return self
     */
    public function setFgtPeerDeviceName($fgt_peer_device_name)
    {
        if (!is_null($fgt_peer_device_name) && (mb_strlen($fgt_peer_device_name) > 16)) {
            throw new \InvalidArgumentException('invalid length for $fgt_peer_device_name when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 16.');
        }

        $this->container['fgt_peer_device_name'] = $fgt_peer_device_name;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return string|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param string|null $vlan Assign switch ports to a VLAN.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (!is_null($vlan) && (mb_strlen($vlan) > 15)) {
            throw new \InvalidArgumentException('invalid length for $vlan when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 15.');
        }

        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets allowed_vlans_all
     *
     * @return string|null
     */
    public function getAllowedVlansAll()
    {
        return $this->container['allowed_vlans_all'];
    }

    /**
     * Sets allowed_vlans_all
     *
     * @param string|null $allowed_vlans_all Enable/disable all defined vlans on this port.    enable:Enable all defined VLANs on this port.    disable:Disable all defined VLANs on this port.
     *
     * @return self
     */
    public function setAllowedVlansAll($allowed_vlans_all)
    {
        $allowedValues = $this->getAllowedVlansAllAllowableValues();
        if (!is_null($allowed_vlans_all) && !in_array($allowed_vlans_all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowed_vlans_all', must be one of '%s'",
                    $allowed_vlans_all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowed_vlans_all'] = $allowed_vlans_all;

        return $this;
    }

    /**
     * Gets allowed_vlans
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null
     */
    public function getAllowedVlans()
    {
        return $this->container['allowed_vlans'];
    }

    /**
     * Sets allowed_vlans
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null $allowed_vlans Configure switch port tagged vlans
     *
     * @return self
     */
    public function setAllowedVlans($allowed_vlans)
    {

        if (!is_null($allowed_vlans) && (count($allowed_vlans) > 0)) {
            throw new \InvalidArgumentException('invalid value for $allowed_vlans when calling SwitchControllerManagedSwitchSwitchIdPorts., number of items must be less than or equal to 0.');
        }
        $this->container['allowed_vlans'] = $allowed_vlans;

        return $this;
    }

    /**
     * Gets untagged_vlans
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null
     */
    public function getUntaggedVlans()
    {
        return $this->container['untagged_vlans'];
    }

    /**
     * Sets untagged_vlans
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null $untagged_vlans Configure switch port untagged vlans
     *
     * @return self
     */
    public function setUntaggedVlans($untagged_vlans)
    {

        if (!is_null($untagged_vlans) && (count($untagged_vlans) > 0)) {
            throw new \InvalidArgumentException('invalid value for $untagged_vlans when calling SwitchControllerManagedSwitchSwitchIdPorts., number of items must be less than or equal to 0.');
        }
        $this->container['untagged_vlans'] = $untagged_vlans;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Interface type: physical or trunk port.    physical:Physical port.    trunk:Trunk port.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets access_mode
     *
     * @return string|null
     */
    public function getAccessMode()
    {
        return $this->container['access_mode'];
    }

    /**
     * Sets access_mode
     *
     * @param string|null $access_mode Access mode of the port.    normal:Normal mode.    nac:NAC mode.
     *
     * @return self
     */
    public function setAccessMode($access_mode)
    {
        $allowedValues = $this->getAccessModeAllowableValues();
        if (!is_null($access_mode) && !in_array($access_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_mode', must be one of '%s'",
                    $access_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_mode'] = $access_mode;

        return $this;
    }

    /**
     * Gets dhcp_snooping
     *
     * @return string|null
     */
    public function getDhcpSnooping()
    {
        return $this->container['dhcp_snooping'];
    }

    /**
     * Sets dhcp_snooping
     *
     * @param string|null $dhcp_snooping Trusted or untrusted DHCP-snooping interface.    untrusted:Untrusted DHCP snooping interface.    trusted:Trusted DHCP snooping interface.
     *
     * @return self
     */
    public function setDhcpSnooping($dhcp_snooping)
    {
        $allowedValues = $this->getDhcpSnoopingAllowableValues();
        if (!is_null($dhcp_snooping) && !in_array($dhcp_snooping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_snooping', must be one of '%s'",
                    $dhcp_snooping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_snooping'] = $dhcp_snooping;

        return $this;
    }

    /**
     * Gets dhcp_snoop_option82_trust
     *
     * @return string|null
     */
    public function getDhcpSnoopOption82Trust()
    {
        return $this->container['dhcp_snoop_option82_trust'];
    }

    /**
     * Sets dhcp_snoop_option82_trust
     *
     * @param string|null $dhcp_snoop_option82_trust Enable/disable allowance of DHCP with option-82 on untrusted interface.    enable:Enable allowance of DHCP with option-82 on untrusted interface.    disable:Disable allowance of DHCP with option-82 on untrusted interface.
     *
     * @return self
     */
    public function setDhcpSnoopOption82Trust($dhcp_snoop_option82_trust)
    {
        $allowedValues = $this->getDhcpSnoopOption82TrustAllowableValues();
        if (!is_null($dhcp_snoop_option82_trust) && !in_array($dhcp_snoop_option82_trust, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_snoop_option82_trust', must be one of '%s'",
                    $dhcp_snoop_option82_trust,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_snoop_option82_trust'] = $dhcp_snoop_option82_trust;

        return $this;
    }

    /**
     * Gets arp_inspection_trust
     *
     * @return string|null
     */
    public function getArpInspectionTrust()
    {
        return $this->container['arp_inspection_trust'];
    }

    /**
     * Sets arp_inspection_trust
     *
     * @param string|null $arp_inspection_trust Trusted or untrusted dynamic ARP inspection.    untrusted:Untrusted dynamic ARP inspection.    trusted:Trusted dynamic ARP inspection.
     *
     * @return self
     */
    public function setArpInspectionTrust($arp_inspection_trust)
    {
        $allowedValues = $this->getArpInspectionTrustAllowableValues();
        if (!is_null($arp_inspection_trust) && !in_array($arp_inspection_trust, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'arp_inspection_trust', must be one of '%s'",
                    $arp_inspection_trust,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['arp_inspection_trust'] = $arp_inspection_trust;

        return $this;
    }

    /**
     * Gets igmps_flood_reports
     *
     * @return string|null
     */
    public function getIgmpsFloodReports()
    {
        return $this->container['igmps_flood_reports'];
    }

    /**
     * Sets igmps_flood_reports
     *
     * @param string|null $igmps_flood_reports Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled.    enable:Enable flooding of IGMP snooping reports to this interface.    disable:Disable flooding of IGMP snooping reports to this interface.
     *
     * @return self
     */
    public function setIgmpsFloodReports($igmps_flood_reports)
    {
        $allowedValues = $this->getIgmpsFloodReportsAllowableValues();
        if (!is_null($igmps_flood_reports) && !in_array($igmps_flood_reports, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'igmps_flood_reports', must be one of '%s'",
                    $igmps_flood_reports,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['igmps_flood_reports'] = $igmps_flood_reports;

        return $this;
    }

    /**
     * Gets igmps_flood_traffic
     *
     * @return string|null
     */
    public function getIgmpsFloodTraffic()
    {
        return $this->container['igmps_flood_traffic'];
    }

    /**
     * Sets igmps_flood_traffic
     *
     * @param string|null $igmps_flood_traffic Enable/disable flooding of IGMP snooping traffic to this interface.    enable:Enable flooding of IGMP snooping traffic to this interface.    disable:Disable flooding of IGMP snooping traffic to this interface.
     *
     * @return self
     */
    public function setIgmpsFloodTraffic($igmps_flood_traffic)
    {
        $allowedValues = $this->getIgmpsFloodTrafficAllowableValues();
        if (!is_null($igmps_flood_traffic) && !in_array($igmps_flood_traffic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'igmps_flood_traffic', must be one of '%s'",
                    $igmps_flood_traffic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['igmps_flood_traffic'] = $igmps_flood_traffic;

        return $this;
    }

    /**
     * Gets stp_state
     *
     * @return string|null
     */
    public function getStpState()
    {
        return $this->container['stp_state'];
    }

    /**
     * Sets stp_state
     *
     * @param string|null $stp_state Enable/disable Spanning Tree Protocol (STP) on this interface.    enabled:Enable STP on this interface.    disabled:Disable STP on this interface.
     *
     * @return self
     */
    public function setStpState($stp_state)
    {
        $allowedValues = $this->getStpStateAllowableValues();
        if (!is_null($stp_state) && !in_array($stp_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp_state', must be one of '%s'",
                    $stp_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_state'] = $stp_state;

        return $this;
    }

    /**
     * Gets stp_root_guard
     *
     * @return string|null
     */
    public function getStpRootGuard()
    {
        return $this->container['stp_root_guard'];
    }

    /**
     * Sets stp_root_guard
     *
     * @param string|null $stp_root_guard Enable/disable STP root guard on this interface.    enabled:Enable STP root-guard on this interface.    disabled:Disable STP root-guard on this interface.
     *
     * @return self
     */
    public function setStpRootGuard($stp_root_guard)
    {
        $allowedValues = $this->getStpRootGuardAllowableValues();
        if (!is_null($stp_root_guard) && !in_array($stp_root_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp_root_guard', must be one of '%s'",
                    $stp_root_guard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_root_guard'] = $stp_root_guard;

        return $this;
    }

    /**
     * Gets stp_bpdu_guard
     *
     * @return string|null
     */
    public function getStpBpduGuard()
    {
        return $this->container['stp_bpdu_guard'];
    }

    /**
     * Sets stp_bpdu_guard
     *
     * @param string|null $stp_bpdu_guard Enable/disable STP BPDU guard on this interface.    enabled:Enable STP BPDU guard on this interface.    disabled:Disable STP BPDU guard on this interface.
     *
     * @return self
     */
    public function setStpBpduGuard($stp_bpdu_guard)
    {
        $allowedValues = $this->getStpBpduGuardAllowableValues();
        if (!is_null($stp_bpdu_guard) && !in_array($stp_bpdu_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp_bpdu_guard', must be one of '%s'",
                    $stp_bpdu_guard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_bpdu_guard'] = $stp_bpdu_guard;

        return $this;
    }

    /**
     * Gets stp_bpdu_guard_timeout
     *
     * @return int|null
     */
    public function getStpBpduGuardTimeout()
    {
        return $this->container['stp_bpdu_guard_timeout'];
    }

    /**
     * Sets stp_bpdu_guard_timeout
     *
     * @param int|null $stp_bpdu_guard_timeout BPDU Guard disabling protection (0 - 120 min).
     *
     * @return self
     */
    public function setStpBpduGuardTimeout($stp_bpdu_guard_timeout)
    {

        if (!is_null($stp_bpdu_guard_timeout) && ($stp_bpdu_guard_timeout > 120)) {
            throw new \InvalidArgumentException('invalid value for $stp_bpdu_guard_timeout when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 120.');
        }
        if (!is_null($stp_bpdu_guard_timeout) && ($stp_bpdu_guard_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $stp_bpdu_guard_timeout when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['stp_bpdu_guard_timeout'] = $stp_bpdu_guard_timeout;

        return $this;
    }

    /**
     * Gets edge_port
     *
     * @return string|null
     */
    public function getEdgePort()
    {
        return $this->container['edge_port'];
    }

    /**
     * Sets edge_port
     *
     * @param string|null $edge_port Enable/disable this interface as an edge port, bridging connections between workstations and/or computers.    enable:Enable this interface as an edge port.    disable:Disable this interface as an edge port.
     *
     * @return self
     */
    public function setEdgePort($edge_port)
    {
        $allowedValues = $this->getEdgePortAllowableValues();
        if (!is_null($edge_port) && !in_array($edge_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'edge_port', must be one of '%s'",
                    $edge_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edge_port'] = $edge_port;

        return $this;
    }

    /**
     * Gets discard_mode
     *
     * @return string|null
     */
    public function getDiscardMode()
    {
        return $this->container['discard_mode'];
    }

    /**
     * Sets discard_mode
     *
     * @param string|null $discard_mode Configure discard mode for port.    none:Discard disabled.    all-untagged:Discard all frames that are untagged.    all-tagged:Discard all frames that are tagged.
     *
     * @return self
     */
    public function setDiscardMode($discard_mode)
    {
        $allowedValues = $this->getDiscardModeAllowableValues();
        if (!is_null($discard_mode) && !in_array($discard_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'discard_mode', must be one of '%s'",
                    $discard_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discard_mode'] = $discard_mode;

        return $this;
    }

    /**
     * Gets packet_sampler
     *
     * @return string|null
     */
    public function getPacketSampler()
    {
        return $this->container['packet_sampler'];
    }

    /**
     * Sets packet_sampler
     *
     * @param string|null $packet_sampler Enable/disable packet sampling on this interface.    enabled:Enable packet sampling on this interface.    disabled:Disable packet sampling on this interface.
     *
     * @return self
     */
    public function setPacketSampler($packet_sampler)
    {
        $allowedValues = $this->getPacketSamplerAllowableValues();
        if (!is_null($packet_sampler) && !in_array($packet_sampler, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packet_sampler', must be one of '%s'",
                    $packet_sampler,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packet_sampler'] = $packet_sampler;

        return $this;
    }

    /**
     * Gets packet_sample_rate
     *
     * @return int|null
     */
    public function getPacketSampleRate()
    {
        return $this->container['packet_sample_rate'];
    }

    /**
     * Sets packet_sample_rate
     *
     * @param int|null $packet_sample_rate Packet sampling rate (0 - 99999 p/sec).
     *
     * @return self
     */
    public function setPacketSampleRate($packet_sample_rate)
    {

        if (!is_null($packet_sample_rate) && ($packet_sample_rate > 99999)) {
            throw new \InvalidArgumentException('invalid value for $packet_sample_rate when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 99999.');
        }
        if (!is_null($packet_sample_rate) && ($packet_sample_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $packet_sample_rate when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['packet_sample_rate'] = $packet_sample_rate;

        return $this;
    }

    /**
     * Gets sflow_counter_interval
     *
     * @return int|null
     */
    public function getSflowCounterInterval()
    {
        return $this->container['sflow_counter_interval'];
    }

    /**
     * Sets sflow_counter_interval
     *
     * @param int|null $sflow_counter_interval sFlow sampling counter polling interval (0 - 255 sec).
     *
     * @return self
     */
    public function setSflowCounterInterval($sflow_counter_interval)
    {

        if (!is_null($sflow_counter_interval) && ($sflow_counter_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $sflow_counter_interval when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 255.');
        }
        if (!is_null($sflow_counter_interval) && ($sflow_counter_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $sflow_counter_interval when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['sflow_counter_interval'] = $sflow_counter_interval;

        return $this;
    }

    /**
     * Gets sample_direction
     *
     * @return string|null
     */
    public function getSampleDirection()
    {
        return $this->container['sample_direction'];
    }

    /**
     * Sets sample_direction
     *
     * @param string|null $sample_direction Packet sampling direction.    tx:Monitor transmitted traffic.    rx:Monitor received traffic.    both:Monitor transmitted and received traffic.
     *
     * @return self
     */
    public function setSampleDirection($sample_direction)
    {
        $allowedValues = $this->getSampleDirectionAllowableValues();
        if (!is_null($sample_direction) && !in_array($sample_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sample_direction', must be one of '%s'",
                    $sample_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sample_direction'] = $sample_direction;

        return $this;
    }

    /**
     * Gets flow_control
     *
     * @return string|null
     */
    public function getFlowControl()
    {
        return $this->container['flow_control'];
    }

    /**
     * Sets flow_control
     *
     * @param string|null $flow_control Flow control direction.    disable:Disable flow control.    tx:Enable flow control for transmission pause control frames.    rx:Enable flow control for receive pause control frames.    both:Enable flow control for both transmission and receive pause control frames.
     *
     * @return self
     */
    public function setFlowControl($flow_control)
    {
        $allowedValues = $this->getFlowControlAllowableValues();
        if (!is_null($flow_control) && !in_array($flow_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'flow_control', must be one of '%s'",
                    $flow_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flow_control'] = $flow_control;

        return $this;
    }

    /**
     * Gets pause_meter
     *
     * @return int|null
     */
    public function getPauseMeter()
    {
        return $this->container['pause_meter'];
    }

    /**
     * Sets pause_meter
     *
     * @param int|null $pause_meter Configure ingress pause metering rate, in kbps (default = 0, disabled).
     *
     * @return self
     */
    public function setPauseMeter($pause_meter)
    {

        if (!is_null($pause_meter) && ($pause_meter > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $pause_meter when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($pause_meter) && ($pause_meter < 128)) {
            throw new \InvalidArgumentException('invalid value for $pause_meter when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 128.');
        }

        $this->container['pause_meter'] = $pause_meter;

        return $this;
    }

    /**
     * Gets pause_meter_resume
     *
     * @return string|null
     */
    public function getPauseMeterResume()
    {
        return $this->container['pause_meter_resume'];
    }

    /**
     * Sets pause_meter_resume
     *
     * @param string|null $pause_meter_resume Resume threshold for resuming traffic on ingress port.    75%:Back pressure state won't be cleared until bucket count falls below 75% of pause threshold.    50%:Back pressure state won't be cleared until bucket count falls below 50% of pause threshold.    25%:Back pressure state won't be cleared until bucket count falls below 25% of pause threshold.
     *
     * @return self
     */
    public function setPauseMeterResume($pause_meter_resume)
    {
        $allowedValues = $this->getPauseMeterResumeAllowableValues();
        if (!is_null($pause_meter_resume) && !in_array($pause_meter_resume, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pause_meter_resume', must be one of '%s'",
                    $pause_meter_resume,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pause_meter_resume'] = $pause_meter_resume;

        return $this;
    }

    /**
     * Gets loop_guard
     *
     * @return string|null
     */
    public function getLoopGuard()
    {
        return $this->container['loop_guard'];
    }

    /**
     * Sets loop_guard
     *
     * @param string|null $loop_guard Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops.    enabled:Enable loop-guard on this interface.    disabled:Disable loop-guard on this interface.
     *
     * @return self
     */
    public function setLoopGuard($loop_guard)
    {
        $allowedValues = $this->getLoopGuardAllowableValues();
        if (!is_null($loop_guard) && !in_array($loop_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'loop_guard', must be one of '%s'",
                    $loop_guard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loop_guard'] = $loop_guard;

        return $this;
    }

    /**
     * Gets loop_guard_timeout
     *
     * @return int|null
     */
    public function getLoopGuardTimeout()
    {
        return $this->container['loop_guard_timeout'];
    }

    /**
     * Sets loop_guard_timeout
     *
     * @param int|null $loop_guard_timeout Loop-guard timeout (0 - 120 min, default = 45).
     *
     * @return self
     */
    public function setLoopGuardTimeout($loop_guard_timeout)
    {

        if (!is_null($loop_guard_timeout) && ($loop_guard_timeout > 120)) {
            throw new \InvalidArgumentException('invalid value for $loop_guard_timeout when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 120.');
        }
        if (!is_null($loop_guard_timeout) && ($loop_guard_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $loop_guard_timeout when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['loop_guard_timeout'] = $loop_guard_timeout;

        return $this;
    }

    /**
     * Gets qos_policy
     *
     * @return string|null
     */
    public function getQosPolicy()
    {
        return $this->container['qos_policy'];
    }

    /**
     * Sets qos_policy
     *
     * @param string|null $qos_policy Switch controller QoS policy from available options.
     *
     * @return self
     */
    public function setQosPolicy($qos_policy)
    {
        if (!is_null($qos_policy) && (mb_strlen($qos_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $qos_policy when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 63.');
        }

        $this->container['qos_policy'] = $qos_policy;

        return $this;
    }

    /**
     * Gets storm_control_policy
     *
     * @return string|null
     */
    public function getStormControlPolicy()
    {
        return $this->container['storm_control_policy'];
    }

    /**
     * Sets storm_control_policy
     *
     * @param string|null $storm_control_policy Switch controller storm control policy from available options.
     *
     * @return self
     */
    public function setStormControlPolicy($storm_control_policy)
    {
        if (!is_null($storm_control_policy) && (mb_strlen($storm_control_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $storm_control_policy when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 63.');
        }

        $this->container['storm_control_policy'] = $storm_control_policy;

        return $this;
    }

    /**
     * Gets port_security_policy
     *
     * @return string|null
     */
    public function getPortSecurityPolicy()
    {
        return $this->container['port_security_policy'];
    }

    /**
     * Sets port_security_policy
     *
     * @param string|null $port_security_policy Switch controller authentication policy to apply to this managed switch from available options.
     *
     * @return self
     */
    public function setPortSecurityPolicy($port_security_policy)
    {
        if (!is_null($port_security_policy) && (mb_strlen($port_security_policy) > 31)) {
            throw new \InvalidArgumentException('invalid length for $port_security_policy when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 31.');
        }

        $this->container['port_security_policy'] = $port_security_policy;

        return $this;
    }

    /**
     * Gets export_to_pool
     *
     * @return string|null
     */
    public function getExportToPool()
    {
        return $this->container['export_to_pool'];
    }

    /**
     * Sets export_to_pool
     *
     * @param string|null $export_to_pool Switch controller export port to pool-list.
     *
     * @return self
     */
    public function setExportToPool($export_to_pool)
    {
        if (!is_null($export_to_pool) && (mb_strlen($export_to_pool) > 35)) {
            throw new \InvalidArgumentException('invalid length for $export_to_pool when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 35.');
        }

        $this->container['export_to_pool'] = $export_to_pool;

        return $this;
    }

    /**
     * Gets export_tags
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdExportTags[]|null
     */
    public function getExportTags()
    {
        return $this->container['export_tags'];
    }

    /**
     * Sets export_tags
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdExportTags[]|null $export_tags Configure export tag(s) for FortiSwitch port when exported to a virtual port pool.
     *
     * @return self
     */
    public function setExportTags($export_tags)
    {

        if (!is_null($export_tags) && (count($export_tags) > 0)) {
            throw new \InvalidArgumentException('invalid value for $export_tags when calling SwitchControllerManagedSwitchSwitchIdPorts., number of items must be less than or equal to 0.');
        }
        $this->container['export_tags'] = $export_tags;

        return $this;
    }

    /**
     * Gets learning_limit
     *
     * @return int|null
     */
    public function getLearningLimit()
    {
        return $this->container['learning_limit'];
    }

    /**
     * Sets learning_limit
     *
     * @param int|null $learning_limit Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
     *
     * @return self
     */
    public function setLearningLimit($learning_limit)
    {

        if (!is_null($learning_limit) && ($learning_limit > 128)) {
            throw new \InvalidArgumentException('invalid value for $learning_limit when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 128.');
        }
        if (!is_null($learning_limit) && ($learning_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $learning_limit when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 0.');
        }

        $this->container['learning_limit'] = $learning_limit;

        return $this;
    }

    /**
     * Gets sticky_mac
     *
     * @return string|null
     */
    public function getStickyMac()
    {
        return $this->container['sticky_mac'];
    }

    /**
     * Sets sticky_mac
     *
     * @param string|null $sticky_mac Enable or disable sticky-mac on the interface.    enable:Enable sticky mac on the interface.    disable:Disable sticky mac on the interface.
     *
     * @return self
     */
    public function setStickyMac($sticky_mac)
    {
        $allowedValues = $this->getStickyMacAllowableValues();
        if (!is_null($sticky_mac) && !in_array($sticky_mac, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sticky_mac', must be one of '%s'",
                    $sticky_mac,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sticky_mac'] = $sticky_mac;

        return $this;
    }

    /**
     * Gets lldp_status
     *
     * @return string|null
     */
    public function getLldpStatus()
    {
        return $this->container['lldp_status'];
    }

    /**
     * Sets lldp_status
     *
     * @param string|null $lldp_status LLDP transmit and receive status.    disable:Disable LLDP TX and RX.    rx-only:Enable LLDP as RX only.    tx-only:Enable LLDP as TX only.    tx-rx:Enable LLDP TX and RX.
     *
     * @return self
     */
    public function setLldpStatus($lldp_status)
    {
        $allowedValues = $this->getLldpStatusAllowableValues();
        if (!is_null($lldp_status) && !in_array($lldp_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_status', must be one of '%s'",
                    $lldp_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_status'] = $lldp_status;

        return $this;
    }

    /**
     * Gets lldp_profile
     *
     * @return string|null
     */
    public function getLldpProfile()
    {
        return $this->container['lldp_profile'];
    }

    /**
     * Sets lldp_profile
     *
     * @param string|null $lldp_profile LLDP port TLV profile.
     *
     * @return self
     */
    public function setLldpProfile($lldp_profile)
    {
        if (!is_null($lldp_profile) && (mb_strlen($lldp_profile) > 63)) {
            throw new \InvalidArgumentException('invalid length for $lldp_profile when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 63.');
        }

        $this->container['lldp_profile'] = $lldp_profile;

        return $this;
    }

    /**
     * Gets export_to
     *
     * @return string|null
     */
    public function getExportTo()
    {
        return $this->container['export_to'];
    }

    /**
     * Sets export_to
     *
     * @param string|null $export_to Export managed-switch port to a tenant VDOM.
     *
     * @return self
     */
    public function setExportTo($export_to)
    {
        if (!is_null($export_to) && (mb_strlen($export_to) > 31)) {
            throw new \InvalidArgumentException('invalid length for $export_to when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 31.');
        }

        $this->container['export_to'] = $export_to;

        return $this;
    }

    /**
     * Gets mac_addr
     *
     * @return string|null
     */
    public function getMacAddr()
    {
        return $this->container['mac_addr'];
    }

    /**
     * Sets mac_addr
     *
     * @param string|null $mac_addr Port/Trunk MAC.
     *
     * @return self
     */
    public function setMacAddr($mac_addr)
    {
        $this->container['mac_addr'] = $mac_addr;

        return $this;
    }

    /**
     * Gets port_selection_criteria
     *
     * @return string|null
     */
    public function getPortSelectionCriteria()
    {
        return $this->container['port_selection_criteria'];
    }

    /**
     * Sets port_selection_criteria
     *
     * @param string|null $port_selection_criteria Algorithm for aggregate port selection.    src-mac:Source MAC address.    dst-mac:Destination MAC address.    src-dst-mac:Source and destination MAC address.    src-ip:Source IP address.    dst-ip:Destination IP address.    src-dst-ip:Source and destination IP address.
     *
     * @return self
     */
    public function setPortSelectionCriteria($port_selection_criteria)
    {
        $allowedValues = $this->getPortSelectionCriteriaAllowableValues();
        if (!is_null($port_selection_criteria) && !in_array($port_selection_criteria, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port_selection_criteria', must be one of '%s'",
                    $port_selection_criteria,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port_selection_criteria'] = $port_selection_criteria;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for port.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets lacp_speed
     *
     * @return string|null
     */
    public function getLacpSpeed()
    {
        return $this->container['lacp_speed'];
    }

    /**
     * Sets lacp_speed
     *
     * @param string|null $lacp_speed end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast).    slow:Send LACP message every 30 seconds.    fast:Send LACP message every second.
     *
     * @return self
     */
    public function setLacpSpeed($lacp_speed)
    {
        $allowedValues = $this->getLacpSpeedAllowableValues();
        if (!is_null($lacp_speed) && !in_array($lacp_speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lacp_speed', must be one of '%s'",
                    $lacp_speed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lacp_speed'] = $lacp_speed;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively.    static:Static aggregation, do not send and ignore any control messages.    lacp-passive:Passively use LACP to negotiate 802.3ad aggregation.    lacp-active:Actively use LACP to negotiate 802.3ad aggregation.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets bundle
     *
     * @return string|null
     */
    public function getBundle()
    {
        return $this->container['bundle'];
    }

    /**
     * Sets bundle
     *
     * @param string|null $bundle Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces.    enable:Enable bundling.    disable:Disable bundling.
     *
     * @return self
     */
    public function setBundle($bundle)
    {
        $allowedValues = $this->getBundleAllowableValues();
        if (!is_null($bundle) && !in_array($bundle, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bundle', must be one of '%s'",
                    $bundle,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bundle'] = $bundle;

        return $this;
    }

    /**
     * Gets member_withdrawal_behavior
     *
     * @return string|null
     */
    public function getMemberWithdrawalBehavior()
    {
        return $this->container['member_withdrawal_behavior'];
    }

    /**
     * Sets member_withdrawal_behavior
     *
     * @param string|null $member_withdrawal_behavior Port behavior after it withdraws because of loss of control packets.    forward:Forward traffic.    block:Block traffic.
     *
     * @return self
     */
    public function setMemberWithdrawalBehavior($member_withdrawal_behavior)
    {
        $allowedValues = $this->getMemberWithdrawalBehaviorAllowableValues();
        if (!is_null($member_withdrawal_behavior) && !in_array($member_withdrawal_behavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'member_withdrawal_behavior', must be one of '%s'",
                    $member_withdrawal_behavior,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['member_withdrawal_behavior'] = $member_withdrawal_behavior;

        return $this;
    }

    /**
     * Gets mclag
     *
     * @return string|null
     */
    public function getMclag()
    {
        return $this->container['mclag'];
    }

    /**
     * Sets mclag
     *
     * @param string|null $mclag Enable/disable multi-chassis link aggregation (MCLAG).    enable:Enable MCLAG.    disable:Disable MCLAG.
     *
     * @return self
     */
    public function setMclag($mclag)
    {
        $allowedValues = $this->getMclagAllowableValues();
        if (!is_null($mclag) && !in_array($mclag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mclag', must be one of '%s'",
                    $mclag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mclag'] = $mclag;

        return $this;
    }

    /**
     * Gets min_bundle
     *
     * @return int|null
     */
    public function getMinBundle()
    {
        return $this->container['min_bundle'];
    }

    /**
     * Sets min_bundle
     *
     * @param int|null $min_bundle Minimum size of LAG bundle (1 - 24, default = 1)
     *
     * @return self
     */
    public function setMinBundle($min_bundle)
    {

        if (!is_null($min_bundle) && ($min_bundle > 24)) {
            throw new \InvalidArgumentException('invalid value for $min_bundle when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 24.');
        }
        if (!is_null($min_bundle) && ($min_bundle < 1)) {
            throw new \InvalidArgumentException('invalid value for $min_bundle when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 1.');
        }

        $this->container['min_bundle'] = $min_bundle;

        return $this;
    }

    /**
     * Gets max_bundle
     *
     * @return int|null
     */
    public function getMaxBundle()
    {
        return $this->container['max_bundle'];
    }

    /**
     * Sets max_bundle
     *
     * @param int|null $max_bundle Maximum size of LAG bundle (1 - 24, default = 24)
     *
     * @return self
     */
    public function setMaxBundle($max_bundle)
    {

        if (!is_null($max_bundle) && ($max_bundle > 24)) {
            throw new \InvalidArgumentException('invalid value for $max_bundle when calling SwitchControllerManagedSwitchSwitchIdPorts., must be smaller than or equal to 24.');
        }
        if (!is_null($max_bundle) && ($max_bundle < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_bundle when calling SwitchControllerManagedSwitchSwitchIdPorts., must be bigger than or equal to 1.');
        }

        $this->container['max_bundle'] = $max_bundle;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMembers[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdMembers[]|null $members Aggregated LAG bundle interfaces.
     *
     * @return self
     */
    public function setMembers($members)
    {

        if (!is_null($members) && (count($members) > 0)) {
            throw new \InvalidArgumentException('invalid value for $members when calling SwitchControllerManagedSwitchSwitchIdPorts., number of items must be less than or equal to 0.');
        }
        $this->container['members'] = $members;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


