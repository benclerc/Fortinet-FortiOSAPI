<?php
/**
 * InlineObject86
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject86 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject86 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_86';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'ips_archive' => 'string',
        'max_log_file_size' => 'int',
        'max_policy_packet_capture_size' => 'int',
        'roll_schedule' => 'string',
        'roll_day' => 'string',
        'roll_time' => 'string',
        'diskfull' => 'string',
        'log_quota' => 'int',
        'dlp_archive_quota' => 'int',
        'report_quota' => 'int',
        'maximum_log_age' => 'int',
        'upload' => 'string',
        'upload_destination' => 'string',
        'uploadip' => 'string',
        'uploadport' => 'int',
        'source_ip' => 'string',
        'uploaduser' => 'string',
        'uploadpass' => 'string',
        'uploaddir' => 'string',
        'uploadtype' => 'string',
        'uploadsched' => 'string',
        'uploadtime' => 'string',
        'upload_delete_files' => 'string',
        'upload_ssl_conn' => 'string',
        'full_first_warning_threshold' => 'int',
        'full_second_warning_threshold' => 'int',
        'full_final_warning_threshold' => 'int',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'ips_archive' => null,
        'max_log_file_size' => null,
        'max_policy_packet_capture_size' => null,
        'roll_schedule' => null,
        'roll_day' => null,
        'roll_time' => null,
        'diskfull' => null,
        'log_quota' => null,
        'dlp_archive_quota' => null,
        'report_quota' => null,
        'maximum_log_age' => null,
        'upload' => null,
        'upload_destination' => null,
        'uploadip' => 'ipv4',
        'uploadport' => null,
        'source_ip' => 'ipv4',
        'uploaduser' => null,
        'uploadpass' => 'password',
        'uploaddir' => null,
        'uploadtype' => null,
        'uploadsched' => null,
        'uploadtime' => null,
        'upload_delete_files' => null,
        'upload_ssl_conn' => null,
        'full_first_warning_threshold' => null,
        'full_second_warning_threshold' => null,
        'full_final_warning_threshold' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'ips_archive' => 'ips-archive',
        'max_log_file_size' => 'max-log-file-size',
        'max_policy_packet_capture_size' => 'max-policy-packet-capture-size',
        'roll_schedule' => 'roll-schedule',
        'roll_day' => 'roll-day',
        'roll_time' => 'roll-time',
        'diskfull' => 'diskfull',
        'log_quota' => 'log-quota',
        'dlp_archive_quota' => 'dlp-archive-quota',
        'report_quota' => 'report-quota',
        'maximum_log_age' => 'maximum-log-age',
        'upload' => 'upload',
        'upload_destination' => 'upload-destination',
        'uploadip' => 'uploadip',
        'uploadport' => 'uploadport',
        'source_ip' => 'source-ip',
        'uploaduser' => 'uploaduser',
        'uploadpass' => 'uploadpass',
        'uploaddir' => 'uploaddir',
        'uploadtype' => 'uploadtype',
        'uploadsched' => 'uploadsched',
        'uploadtime' => 'uploadtime',
        'upload_delete_files' => 'upload-delete-files',
        'upload_ssl_conn' => 'upload-ssl-conn',
        'full_first_warning_threshold' => 'full-first-warning-threshold',
        'full_second_warning_threshold' => 'full-second-warning-threshold',
        'full_final_warning_threshold' => 'full-final-warning-threshold',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'ips_archive' => 'setIpsArchive',
        'max_log_file_size' => 'setMaxLogFileSize',
        'max_policy_packet_capture_size' => 'setMaxPolicyPacketCaptureSize',
        'roll_schedule' => 'setRollSchedule',
        'roll_day' => 'setRollDay',
        'roll_time' => 'setRollTime',
        'diskfull' => 'setDiskfull',
        'log_quota' => 'setLogQuota',
        'dlp_archive_quota' => 'setDlpArchiveQuota',
        'report_quota' => 'setReportQuota',
        'maximum_log_age' => 'setMaximumLogAge',
        'upload' => 'setUpload',
        'upload_destination' => 'setUploadDestination',
        'uploadip' => 'setUploadip',
        'uploadport' => 'setUploadport',
        'source_ip' => 'setSourceIp',
        'uploaduser' => 'setUploaduser',
        'uploadpass' => 'setUploadpass',
        'uploaddir' => 'setUploaddir',
        'uploadtype' => 'setUploadtype',
        'uploadsched' => 'setUploadsched',
        'uploadtime' => 'setUploadtime',
        'upload_delete_files' => 'setUploadDeleteFiles',
        'upload_ssl_conn' => 'setUploadSslConn',
        'full_first_warning_threshold' => 'setFullFirstWarningThreshold',
        'full_second_warning_threshold' => 'setFullSecondWarningThreshold',
        'full_final_warning_threshold' => 'setFullFinalWarningThreshold',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'ips_archive' => 'getIpsArchive',
        'max_log_file_size' => 'getMaxLogFileSize',
        'max_policy_packet_capture_size' => 'getMaxPolicyPacketCaptureSize',
        'roll_schedule' => 'getRollSchedule',
        'roll_day' => 'getRollDay',
        'roll_time' => 'getRollTime',
        'diskfull' => 'getDiskfull',
        'log_quota' => 'getLogQuota',
        'dlp_archive_quota' => 'getDlpArchiveQuota',
        'report_quota' => 'getReportQuota',
        'maximum_log_age' => 'getMaximumLogAge',
        'upload' => 'getUpload',
        'upload_destination' => 'getUploadDestination',
        'uploadip' => 'getUploadip',
        'uploadport' => 'getUploadport',
        'source_ip' => 'getSourceIp',
        'uploaduser' => 'getUploaduser',
        'uploadpass' => 'getUploadpass',
        'uploaddir' => 'getUploaddir',
        'uploadtype' => 'getUploadtype',
        'uploadsched' => 'getUploadsched',
        'uploadtime' => 'getUploadtime',
        'upload_delete_files' => 'getUploadDeleteFiles',
        'upload_ssl_conn' => 'getUploadSslConn',
        'full_first_warning_threshold' => 'getFullFirstWarningThreshold',
        'full_second_warning_threshold' => 'getFullSecondWarningThreshold',
        'full_final_warning_threshold' => 'getFullFinalWarningThreshold',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const IPS_ARCHIVE_ENABLE = 'enable';
    const IPS_ARCHIVE_DISABLE = 'disable';
    const ROLL_SCHEDULE_DAILY = 'daily';
    const ROLL_SCHEDULE_WEEKLY = 'weekly';
    const ROLL_DAY_SUNDAY = 'sunday';
    const ROLL_DAY_MONDAY = 'monday';
    const ROLL_DAY_TUESDAY = 'tuesday';
    const ROLL_DAY_WEDNESDAY = 'wednesday';
    const ROLL_DAY_THURSDAY = 'thursday';
    const ROLL_DAY_FRIDAY = 'friday';
    const ROLL_DAY_SATURDAY = 'saturday';
    const DISKFULL_OVERWRITE = 'overwrite';
    const DISKFULL_NOLOG = 'nolog';
    const UPLOAD_ENABLE = 'enable';
    const UPLOAD_DISABLE = 'disable';
    const UPLOAD_DESTINATION_FTP_SERVER = 'ftp-server';
    const UPLOADTYPE_TRAFFIC = 'traffic';
    const UPLOADTYPE_EVENT = 'event';
    const UPLOADTYPE_VIRUS = 'virus';
    const UPLOADTYPE_WEBFILTER = 'webfilter';
    const UPLOADTYPE_IPS = 'IPS';
    const UPLOADTYPE_EMAILFILTER = 'emailfilter';
    const UPLOADTYPE_DLP_ARCHIVE = 'dlp-archive';
    const UPLOADTYPE_ANOMALY = 'anomaly';
    const UPLOADTYPE_VOIP = 'voip';
    const UPLOADTYPE_DLP = 'dlp';
    const UPLOADTYPE_APP_CTRL = 'app-ctrl';
    const UPLOADTYPE_WAF = 'waf';
    const UPLOADTYPE_DNS = 'dns';
    const UPLOADTYPE_SSH = 'ssh';
    const UPLOADTYPE_SSL = 'ssl';
    const UPLOADTYPE_CIFS = 'cifs';
    const UPLOADTYPE_FILE_FILTER = 'file-filter';
    const UPLOADTYPE_ICAP = 'icap';
    const UPLOADSCHED_DISABLE = 'disable';
    const UPLOADSCHED_ENABLE = 'enable';
    const UPLOAD_DELETE_FILES_ENABLE = 'enable';
    const UPLOAD_DELETE_FILES_DISABLE = 'disable';
    const UPLOAD_SSL_CONN__DEFAULT = 'default';
    const UPLOAD_SSL_CONN_HIGH = 'high';
    const UPLOAD_SSL_CONN_LOW = 'low';
    const UPLOAD_SSL_CONN_DISABLE = 'disable';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsArchiveAllowableValues()
    {
        return [
            self::IPS_ARCHIVE_ENABLE,
            self::IPS_ARCHIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRollScheduleAllowableValues()
    {
        return [
            self::ROLL_SCHEDULE_DAILY,
            self::ROLL_SCHEDULE_WEEKLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRollDayAllowableValues()
    {
        return [
            self::ROLL_DAY_SUNDAY,
            self::ROLL_DAY_MONDAY,
            self::ROLL_DAY_TUESDAY,
            self::ROLL_DAY_WEDNESDAY,
            self::ROLL_DAY_THURSDAY,
            self::ROLL_DAY_FRIDAY,
            self::ROLL_DAY_SATURDAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiskfullAllowableValues()
    {
        return [
            self::DISKFULL_OVERWRITE,
            self::DISKFULL_NOLOG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadAllowableValues()
    {
        return [
            self::UPLOAD_ENABLE,
            self::UPLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadDestinationAllowableValues()
    {
        return [
            self::UPLOAD_DESTINATION_FTP_SERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadtypeAllowableValues()
    {
        return [
            self::UPLOADTYPE_TRAFFIC,
            self::UPLOADTYPE_EVENT,
            self::UPLOADTYPE_VIRUS,
            self::UPLOADTYPE_WEBFILTER,
            self::UPLOADTYPE_IPS,
            self::UPLOADTYPE_EMAILFILTER,
            self::UPLOADTYPE_DLP_ARCHIVE,
            self::UPLOADTYPE_ANOMALY,
            self::UPLOADTYPE_VOIP,
            self::UPLOADTYPE_DLP,
            self::UPLOADTYPE_APP_CTRL,
            self::UPLOADTYPE_WAF,
            self::UPLOADTYPE_DNS,
            self::UPLOADTYPE_SSH,
            self::UPLOADTYPE_SSL,
            self::UPLOADTYPE_CIFS,
            self::UPLOADTYPE_FILE_FILTER,
            self::UPLOADTYPE_ICAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadschedAllowableValues()
    {
        return [
            self::UPLOADSCHED_DISABLE,
            self::UPLOADSCHED_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadDeleteFilesAllowableValues()
    {
        return [
            self::UPLOAD_DELETE_FILES_ENABLE,
            self::UPLOAD_DELETE_FILES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadSslConnAllowableValues()
    {
        return [
            self::UPLOAD_SSL_CONN__DEFAULT,
            self::UPLOAD_SSL_CONN_HIGH,
            self::UPLOAD_SSL_CONN_LOW,
            self::UPLOAD_SSL_CONN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['ips_archive'] = $data['ips_archive'] ?? null;
        $this->container['max_log_file_size'] = $data['max_log_file_size'] ?? null;
        $this->container['max_policy_packet_capture_size'] = $data['max_policy_packet_capture_size'] ?? null;
        $this->container['roll_schedule'] = $data['roll_schedule'] ?? null;
        $this->container['roll_day'] = $data['roll_day'] ?? null;
        $this->container['roll_time'] = $data['roll_time'] ?? null;
        $this->container['diskfull'] = $data['diskfull'] ?? null;
        $this->container['log_quota'] = $data['log_quota'] ?? null;
        $this->container['dlp_archive_quota'] = $data['dlp_archive_quota'] ?? null;
        $this->container['report_quota'] = $data['report_quota'] ?? null;
        $this->container['maximum_log_age'] = $data['maximum_log_age'] ?? null;
        $this->container['upload'] = $data['upload'] ?? null;
        $this->container['upload_destination'] = $data['upload_destination'] ?? null;
        $this->container['uploadip'] = $data['uploadip'] ?? null;
        $this->container['uploadport'] = $data['uploadport'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['uploaduser'] = $data['uploaduser'] ?? null;
        $this->container['uploadpass'] = $data['uploadpass'] ?? null;
        $this->container['uploaddir'] = $data['uploaddir'] ?? null;
        $this->container['uploadtype'] = $data['uploadtype'] ?? null;
        $this->container['uploadsched'] = $data['uploadsched'] ?? null;
        $this->container['uploadtime'] = $data['uploadtime'] ?? null;
        $this->container['upload_delete_files'] = $data['upload_delete_files'] ?? null;
        $this->container['upload_ssl_conn'] = $data['upload_ssl_conn'] ?? null;
        $this->container['full_first_warning_threshold'] = $data['full_first_warning_threshold'] ?? null;
        $this->container['full_second_warning_threshold'] = $data['full_second_warning_threshold'] ?? null;
        $this->container['full_final_warning_threshold'] = $data['full_final_warning_threshold'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsArchiveAllowableValues();
        if (!is_null($this->container['ips_archive']) && !in_array($this->container['ips_archive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ips_archive', must be one of '%s'",
                $this->container['ips_archive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_log_file_size']) && ($this->container['max_log_file_size'] > 100)) {
            $invalidProperties[] = "invalid value for 'max_log_file_size', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['max_log_file_size']) && ($this->container['max_log_file_size'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_log_file_size', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_policy_packet_capture_size']) && ($this->container['max_policy_packet_capture_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_policy_packet_capture_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_policy_packet_capture_size']) && ($this->container['max_policy_packet_capture_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_policy_packet_capture_size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRollScheduleAllowableValues();
        if (!is_null($this->container['roll_schedule']) && !in_array($this->container['roll_schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'roll_schedule', must be one of '%s'",
                $this->container['roll_schedule'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRollDayAllowableValues();
        if (!is_null($this->container['roll_day']) && !in_array($this->container['roll_day'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'roll_day', must be one of '%s'",
                $this->container['roll_day'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiskfullAllowableValues();
        if (!is_null($this->container['diskfull']) && !in_array($this->container['diskfull'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'diskfull', must be one of '%s'",
                $this->container['diskfull'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['log_quota']) && ($this->container['log_quota'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'log_quota', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['log_quota']) && ($this->container['log_quota'] < 0)) {
            $invalidProperties[] = "invalid value for 'log_quota', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dlp_archive_quota']) && ($this->container['dlp_archive_quota'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'dlp_archive_quota', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['dlp_archive_quota']) && ($this->container['dlp_archive_quota'] < 0)) {
            $invalidProperties[] = "invalid value for 'dlp_archive_quota', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['report_quota']) && ($this->container['report_quota'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'report_quota', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['report_quota']) && ($this->container['report_quota'] < 0)) {
            $invalidProperties[] = "invalid value for 'report_quota', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maximum_log_age']) && ($this->container['maximum_log_age'] > 3650)) {
            $invalidProperties[] = "invalid value for 'maximum_log_age', must be smaller than or equal to 3650.";
        }

        if (!is_null($this->container['maximum_log_age']) && ($this->container['maximum_log_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'maximum_log_age', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getUploadAllowableValues();
        if (!is_null($this->container['upload']) && !in_array($this->container['upload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload', must be one of '%s'",
                $this->container['upload'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadDestinationAllowableValues();
        if (!is_null($this->container['upload_destination']) && !in_array($this->container['upload_destination'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_destination', must be one of '%s'",
                $this->container['upload_destination'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uploadport']) && ($this->container['uploadport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'uploadport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['uploadport']) && ($this->container['uploadport'] < 0)) {
            $invalidProperties[] = "invalid value for 'uploadport', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['uploaduser']) && (mb_strlen($this->container['uploaduser']) > 35)) {
            $invalidProperties[] = "invalid value for 'uploaduser', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['uploaddir']) && (mb_strlen($this->container['uploaddir']) > 63)) {
            $invalidProperties[] = "invalid value for 'uploaddir', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getUploadtypeAllowableValues();
        if (!is_null($this->container['uploadtype']) && !in_array($this->container['uploadtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'uploadtype', must be one of '%s'",
                $this->container['uploadtype'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadschedAllowableValues();
        if (!is_null($this->container['uploadsched']) && !in_array($this->container['uploadsched'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'uploadsched', must be one of '%s'",
                $this->container['uploadsched'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadDeleteFilesAllowableValues();
        if (!is_null($this->container['upload_delete_files']) && !in_array($this->container['upload_delete_files'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_delete_files', must be one of '%s'",
                $this->container['upload_delete_files'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadSslConnAllowableValues();
        if (!is_null($this->container['upload_ssl_conn']) && !in_array($this->container['upload_ssl_conn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_ssl_conn', must be one of '%s'",
                $this->container['upload_ssl_conn'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['full_first_warning_threshold']) && ($this->container['full_first_warning_threshold'] > 98)) {
            $invalidProperties[] = "invalid value for 'full_first_warning_threshold', must be smaller than or equal to 98.";
        }

        if (!is_null($this->container['full_first_warning_threshold']) && ($this->container['full_first_warning_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'full_first_warning_threshold', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['full_second_warning_threshold']) && ($this->container['full_second_warning_threshold'] > 99)) {
            $invalidProperties[] = "invalid value for 'full_second_warning_threshold', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['full_second_warning_threshold']) && ($this->container['full_second_warning_threshold'] < 2)) {
            $invalidProperties[] = "invalid value for 'full_second_warning_threshold', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['full_final_warning_threshold']) && ($this->container['full_final_warning_threshold'] > 100)) {
            $invalidProperties[] = "invalid value for 'full_final_warning_threshold', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['full_final_warning_threshold']) && ($this->container['full_final_warning_threshold'] < 3)) {
            $invalidProperties[] = "invalid value for 'full_final_warning_threshold', must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable local disk logging.    enable:Log to local disk.    disable:Do not log to local disk.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ips_archive
     *
     * @return string|null
     */
    public function getIpsArchive()
    {
        return $this->container['ips_archive'];
    }

    /**
     * Sets ips_archive
     *
     * @param string|null $ips_archive Enable/disable IPS packet archiving to the local disk.    enable:Enable IPS packet archiving.    disable:Disable IPS packet archiving.
     *
     * @return self
     */
    public function setIpsArchive($ips_archive)
    {
        $allowedValues = $this->getIpsArchiveAllowableValues();
        if (!is_null($ips_archive) && !in_array($ips_archive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ips_archive', must be one of '%s'",
                    $ips_archive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ips_archive'] = $ips_archive;

        return $this;
    }

    /**
     * Gets max_log_file_size
     *
     * @return int|null
     */
    public function getMaxLogFileSize()
    {
        return $this->container['max_log_file_size'];
    }

    /**
     * Sets max_log_file_size
     *
     * @param int|null $max_log_file_size Maximum log file size before rolling (1 - 100 Mbytes).
     *
     * @return self
     */
    public function setMaxLogFileSize($max_log_file_size)
    {

        if (!is_null($max_log_file_size) && ($max_log_file_size > 100)) {
            throw new \InvalidArgumentException('invalid value for $max_log_file_size when calling InlineObject86., must be smaller than or equal to 100.');
        }
        if (!is_null($max_log_file_size) && ($max_log_file_size < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_log_file_size when calling InlineObject86., must be bigger than or equal to 1.');
        }

        $this->container['max_log_file_size'] = $max_log_file_size;

        return $this;
    }

    /**
     * Gets max_policy_packet_capture_size
     *
     * @return int|null
     */
    public function getMaxPolicyPacketCaptureSize()
    {
        return $this->container['max_policy_packet_capture_size'];
    }

    /**
     * Sets max_policy_packet_capture_size
     *
     * @param int|null $max_policy_packet_capture_size Maximum size of policy sniffer in MB (0 means unlimited).
     *
     * @return self
     */
    public function setMaxPolicyPacketCaptureSize($max_policy_packet_capture_size)
    {

        if (!is_null($max_policy_packet_capture_size) && ($max_policy_packet_capture_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_policy_packet_capture_size when calling InlineObject86., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_policy_packet_capture_size) && ($max_policy_packet_capture_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_policy_packet_capture_size when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['max_policy_packet_capture_size'] = $max_policy_packet_capture_size;

        return $this;
    }

    /**
     * Gets roll_schedule
     *
     * @return string|null
     */
    public function getRollSchedule()
    {
        return $this->container['roll_schedule'];
    }

    /**
     * Sets roll_schedule
     *
     * @param string|null $roll_schedule Frequency to check log file for rolling.    daily:Check the log file once a day.    weekly:Check the log file once a week.
     *
     * @return self
     */
    public function setRollSchedule($roll_schedule)
    {
        $allowedValues = $this->getRollScheduleAllowableValues();
        if (!is_null($roll_schedule) && !in_array($roll_schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'roll_schedule', must be one of '%s'",
                    $roll_schedule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roll_schedule'] = $roll_schedule;

        return $this;
    }

    /**
     * Gets roll_day
     *
     * @return string|null
     */
    public function getRollDay()
    {
        return $this->container['roll_day'];
    }

    /**
     * Sets roll_day
     *
     * @param string|null $roll_day Day of week on which to roll log file.    sunday:Sunday    monday:Monday    tuesday:Tuesday    wednesday:Wednesday    thursday:Thursday    friday:Friday    saturday:Saturday
     *
     * @return self
     */
    public function setRollDay($roll_day)
    {
        $allowedValues = $this->getRollDayAllowableValues();
        if (!is_null($roll_day) && !in_array($roll_day, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'roll_day', must be one of '%s'",
                    $roll_day,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roll_day'] = $roll_day;

        return $this;
    }

    /**
     * Gets roll_time
     *
     * @return string|null
     */
    public function getRollTime()
    {
        return $this->container['roll_time'];
    }

    /**
     * Sets roll_time
     *
     * @param string|null $roll_time Time of day to roll the log file (hh:mm).
     *
     * @return self
     */
    public function setRollTime($roll_time)
    {
        $this->container['roll_time'] = $roll_time;

        return $this;
    }

    /**
     * Gets diskfull
     *
     * @return string|null
     */
    public function getDiskfull()
    {
        return $this->container['diskfull'];
    }

    /**
     * Sets diskfull
     *
     * @param string|null $diskfull Action to take when disk is full. The system can overwrite the oldest log messages or stop logging when the disk is full (default = overwrite).    overwrite:Overwrite the oldest logs when the log disk is full.    nolog:Stop logging when the log disk is full.
     *
     * @return self
     */
    public function setDiskfull($diskfull)
    {
        $allowedValues = $this->getDiskfullAllowableValues();
        if (!is_null($diskfull) && !in_array($diskfull, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'diskfull', must be one of '%s'",
                    $diskfull,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['diskfull'] = $diskfull;

        return $this;
    }

    /**
     * Gets log_quota
     *
     * @return int|null
     */
    public function getLogQuota()
    {
        return $this->container['log_quota'];
    }

    /**
     * Sets log_quota
     *
     * @param int|null $log_quota Disk log quota (MB).
     *
     * @return self
     */
    public function setLogQuota($log_quota)
    {

        if (!is_null($log_quota) && ($log_quota > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $log_quota when calling InlineObject86., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($log_quota) && ($log_quota < 0)) {
            throw new \InvalidArgumentException('invalid value for $log_quota when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['log_quota'] = $log_quota;

        return $this;
    }

    /**
     * Gets dlp_archive_quota
     *
     * @return int|null
     */
    public function getDlpArchiveQuota()
    {
        return $this->container['dlp_archive_quota'];
    }

    /**
     * Sets dlp_archive_quota
     *
     * @param int|null $dlp_archive_quota DLP archive quota (MB).
     *
     * @return self
     */
    public function setDlpArchiveQuota($dlp_archive_quota)
    {

        if (!is_null($dlp_archive_quota) && ($dlp_archive_quota > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $dlp_archive_quota when calling InlineObject86., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($dlp_archive_quota) && ($dlp_archive_quota < 0)) {
            throw new \InvalidArgumentException('invalid value for $dlp_archive_quota when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['dlp_archive_quota'] = $dlp_archive_quota;

        return $this;
    }

    /**
     * Gets report_quota
     *
     * @return int|null
     */
    public function getReportQuota()
    {
        return $this->container['report_quota'];
    }

    /**
     * Sets report_quota
     *
     * @param int|null $report_quota Report quota (MB).
     *
     * @return self
     */
    public function setReportQuota($report_quota)
    {

        if (!is_null($report_quota) && ($report_quota > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $report_quota when calling InlineObject86., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($report_quota) && ($report_quota < 0)) {
            throw new \InvalidArgumentException('invalid value for $report_quota when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['report_quota'] = $report_quota;

        return $this;
    }

    /**
     * Gets maximum_log_age
     *
     * @return int|null
     */
    public function getMaximumLogAge()
    {
        return $this->container['maximum_log_age'];
    }

    /**
     * Sets maximum_log_age
     *
     * @param int|null $maximum_log_age Delete log files older than (days).
     *
     * @return self
     */
    public function setMaximumLogAge($maximum_log_age)
    {

        if (!is_null($maximum_log_age) && ($maximum_log_age > 3650)) {
            throw new \InvalidArgumentException('invalid value for $maximum_log_age when calling InlineObject86., must be smaller than or equal to 3650.');
        }
        if (!is_null($maximum_log_age) && ($maximum_log_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $maximum_log_age when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['maximum_log_age'] = $maximum_log_age;

        return $this;
    }

    /**
     * Gets upload
     *
     * @return string|null
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param string|null $upload Enable/disable uploading log files when they are rolled.    enable:Enable uploading log files when they are rolled.    disable:Disable uploading log files when they are rolled.
     *
     * @return self
     */
    public function setUpload($upload)
    {
        $allowedValues = $this->getUploadAllowableValues();
        if (!is_null($upload) && !in_array($upload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload', must be one of '%s'",
                    $upload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload'] = $upload;

        return $this;
    }

    /**
     * Gets upload_destination
     *
     * @return string|null
     */
    public function getUploadDestination()
    {
        return $this->container['upload_destination'];
    }

    /**
     * Sets upload_destination
     *
     * @param string|null $upload_destination The type of server to upload log files to. Only FTP is currently supported.    ftp-server:Upload rolled log files to an FTP server.
     *
     * @return self
     */
    public function setUploadDestination($upload_destination)
    {
        $allowedValues = $this->getUploadDestinationAllowableValues();
        if (!is_null($upload_destination) && !in_array($upload_destination, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_destination', must be one of '%s'",
                    $upload_destination,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_destination'] = $upload_destination;

        return $this;
    }

    /**
     * Gets uploadip
     *
     * @return string|null
     */
    public function getUploadip()
    {
        return $this->container['uploadip'];
    }

    /**
     * Sets uploadip
     *
     * @param string|null $uploadip IP address of the FTP server to upload log files to.
     *
     * @return self
     */
    public function setUploadip($uploadip)
    {
        $this->container['uploadip'] = $uploadip;

        return $this;
    }

    /**
     * Gets uploadport
     *
     * @return int|null
     */
    public function getUploadport()
    {
        return $this->container['uploadport'];
    }

    /**
     * Sets uploadport
     *
     * @param int|null $uploadport TCP port to use for communicating with the FTP server (default = 21).
     *
     * @return self
     */
    public function setUploadport($uploadport)
    {

        if (!is_null($uploadport) && ($uploadport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $uploadport when calling InlineObject86., must be smaller than or equal to 65535.');
        }
        if (!is_null($uploadport) && ($uploadport < 0)) {
            throw new \InvalidArgumentException('invalid value for $uploadport when calling InlineObject86., must be bigger than or equal to 0.');
        }

        $this->container['uploadport'] = $uploadport;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address to use for uploading disk log files.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets uploaduser
     *
     * @return string|null
     */
    public function getUploaduser()
    {
        return $this->container['uploaduser'];
    }

    /**
     * Sets uploaduser
     *
     * @param string|null $uploaduser Username required to log into the FTP server to upload disk log files.
     *
     * @return self
     */
    public function setUploaduser($uploaduser)
    {
        if (!is_null($uploaduser) && (mb_strlen($uploaduser) > 35)) {
            throw new \InvalidArgumentException('invalid length for $uploaduser when calling InlineObject86., must be smaller than or equal to 35.');
        }

        $this->container['uploaduser'] = $uploaduser;

        return $this;
    }

    /**
     * Gets uploadpass
     *
     * @return string|null
     */
    public function getUploadpass()
    {
        return $this->container['uploadpass'];
    }

    /**
     * Sets uploadpass
     *
     * @param string|null $uploadpass Password required to log into the FTP server to upload disk log files.
     *
     * @return self
     */
    public function setUploadpass($uploadpass)
    {
        $this->container['uploadpass'] = $uploadpass;

        return $this;
    }

    /**
     * Gets uploaddir
     *
     * @return string|null
     */
    public function getUploaddir()
    {
        return $this->container['uploaddir'];
    }

    /**
     * Sets uploaddir
     *
     * @param string|null $uploaddir The remote directory on the FTP server to upload log files to.
     *
     * @return self
     */
    public function setUploaddir($uploaddir)
    {
        if (!is_null($uploaddir) && (mb_strlen($uploaddir) > 63)) {
            throw new \InvalidArgumentException('invalid length for $uploaddir when calling InlineObject86., must be smaller than or equal to 63.');
        }

        $this->container['uploaddir'] = $uploaddir;

        return $this;
    }

    /**
     * Gets uploadtype
     *
     * @return string|null
     */
    public function getUploadtype()
    {
        return $this->container['uploadtype'];
    }

    /**
     * Sets uploadtype
     *
     * @param string|null $uploadtype Types of log files to upload. Separate multiple entries with a space.    traffic:Upload traffic log.    event:Upload event log.    virus:Upload anti-virus log.    webfilter:Upload web filter log.    IPS:Upload IPS log.    emailfilter:Upload spam filter log.    dlp-archive:Upload DLP archive.    anomaly:Upload anomaly log.    voip:Upload VoIP log.    dlp:Upload DLP log.    app-ctrl:Upload application control log.    waf:Upload web application firewall log.    dns:Upload DNS log.    ssh:Upload SSH log.    ssl:Upload SSL log.    cifs:Upload CIFS log.    file-filter:Upload file-filter log.    icap:Upload ICAP log.
     *
     * @return self
     */
    public function setUploadtype($uploadtype)
    {
        $allowedValues = $this->getUploadtypeAllowableValues();
        if (!is_null($uploadtype) && !in_array($uploadtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'uploadtype', must be one of '%s'",
                    $uploadtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uploadtype'] = $uploadtype;

        return $this;
    }

    /**
     * Gets uploadsched
     *
     * @return string|null
     */
    public function getUploadsched()
    {
        return $this->container['uploadsched'];
    }

    /**
     * Sets uploadsched
     *
     * @param string|null $uploadsched Set the schedule for uploading log files to the FTP server (default = disable = upload when rolling).    disable:Upload when rolling.    enable:Scheduled upload.
     *
     * @return self
     */
    public function setUploadsched($uploadsched)
    {
        $allowedValues = $this->getUploadschedAllowableValues();
        if (!is_null($uploadsched) && !in_array($uploadsched, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'uploadsched', must be one of '%s'",
                    $uploadsched,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uploadsched'] = $uploadsched;

        return $this;
    }

    /**
     * Gets uploadtime
     *
     * @return string|null
     */
    public function getUploadtime()
    {
        return $this->container['uploadtime'];
    }

    /**
     * Sets uploadtime
     *
     * @param string|null $uploadtime Time of day at which log files are uploaded if uploadsched is enabled (hh:mm or hh).
     *
     * @return self
     */
    public function setUploadtime($uploadtime)
    {
        $this->container['uploadtime'] = $uploadtime;

        return $this;
    }

    /**
     * Gets upload_delete_files
     *
     * @return string|null
     */
    public function getUploadDeleteFiles()
    {
        return $this->container['upload_delete_files'];
    }

    /**
     * Sets upload_delete_files
     *
     * @param string|null $upload_delete_files Delete log files after uploading (default = enable).    enable:Delete log files after uploading.    disable:Do not delete log files after uploading.
     *
     * @return self
     */
    public function setUploadDeleteFiles($upload_delete_files)
    {
        $allowedValues = $this->getUploadDeleteFilesAllowableValues();
        if (!is_null($upload_delete_files) && !in_array($upload_delete_files, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_delete_files', must be one of '%s'",
                    $upload_delete_files,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_delete_files'] = $upload_delete_files;

        return $this;
    }

    /**
     * Gets upload_ssl_conn
     *
     * @return string|null
     */
    public function getUploadSslConn()
    {
        return $this->container['upload_ssl_conn'];
    }

    /**
     * Sets upload_ssl_conn
     *
     * @param string|null $upload_ssl_conn Enable/disable encrypted FTPS communication to upload log files.    default:FTPS with high and medium encryption algorithms.    high:FTPS with high encryption algorithms.    low:FTPS with low encryption algorithms.    disable:Disable FTPS communication.
     *
     * @return self
     */
    public function setUploadSslConn($upload_ssl_conn)
    {
        $allowedValues = $this->getUploadSslConnAllowableValues();
        if (!is_null($upload_ssl_conn) && !in_array($upload_ssl_conn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_ssl_conn', must be one of '%s'",
                    $upload_ssl_conn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_ssl_conn'] = $upload_ssl_conn;

        return $this;
    }

    /**
     * Gets full_first_warning_threshold
     *
     * @return int|null
     */
    public function getFullFirstWarningThreshold()
    {
        return $this->container['full_first_warning_threshold'];
    }

    /**
     * Sets full_first_warning_threshold
     *
     * @param int|null $full_first_warning_threshold Log full first warning threshold as a percent (1 - 98, default = 75).
     *
     * @return self
     */
    public function setFullFirstWarningThreshold($full_first_warning_threshold)
    {

        if (!is_null($full_first_warning_threshold) && ($full_first_warning_threshold > 98)) {
            throw new \InvalidArgumentException('invalid value for $full_first_warning_threshold when calling InlineObject86., must be smaller than or equal to 98.');
        }
        if (!is_null($full_first_warning_threshold) && ($full_first_warning_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $full_first_warning_threshold when calling InlineObject86., must be bigger than or equal to 1.');
        }

        $this->container['full_first_warning_threshold'] = $full_first_warning_threshold;

        return $this;
    }

    /**
     * Gets full_second_warning_threshold
     *
     * @return int|null
     */
    public function getFullSecondWarningThreshold()
    {
        return $this->container['full_second_warning_threshold'];
    }

    /**
     * Sets full_second_warning_threshold
     *
     * @param int|null $full_second_warning_threshold Log full second warning threshold as a percent (2 - 99, default = 90).
     *
     * @return self
     */
    public function setFullSecondWarningThreshold($full_second_warning_threshold)
    {

        if (!is_null($full_second_warning_threshold) && ($full_second_warning_threshold > 99)) {
            throw new \InvalidArgumentException('invalid value for $full_second_warning_threshold when calling InlineObject86., must be smaller than or equal to 99.');
        }
        if (!is_null($full_second_warning_threshold) && ($full_second_warning_threshold < 2)) {
            throw new \InvalidArgumentException('invalid value for $full_second_warning_threshold when calling InlineObject86., must be bigger than or equal to 2.');
        }

        $this->container['full_second_warning_threshold'] = $full_second_warning_threshold;

        return $this;
    }

    /**
     * Gets full_final_warning_threshold
     *
     * @return int|null
     */
    public function getFullFinalWarningThreshold()
    {
        return $this->container['full_final_warning_threshold'];
    }

    /**
     * Sets full_final_warning_threshold
     *
     * @param int|null $full_final_warning_threshold Log full final warning threshold as a percent (3 - 100, default = 95).
     *
     * @return self
     */
    public function setFullFinalWarningThreshold($full_final_warning_threshold)
    {

        if (!is_null($full_final_warning_threshold) && ($full_final_warning_threshold > 100)) {
            throw new \InvalidArgumentException('invalid value for $full_final_warning_threshold when calling InlineObject86., must be smaller than or equal to 100.');
        }
        if (!is_null($full_final_warning_threshold) && ($full_final_warning_threshold < 3)) {
            throw new \InvalidArgumentException('invalid value for $full_final_warning_threshold when calling InlineObject86., must be bigger than or equal to 3.');
        }

        $this->container['full_final_warning_threshold'] = $full_final_warning_threshold;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject86., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


