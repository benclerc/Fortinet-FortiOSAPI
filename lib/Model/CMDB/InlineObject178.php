<?php
/**
 * InlineObject178
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject178 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject178 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_178';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_information_originate' => 'string',
        'default_metric' => 'int',
        'max_out_metric' => 'int',
        'distance' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngDistance[]',
        'distribute_list' => '\Fortigate\FortiOS\Model\CMDB\RouterRipDistributeList[]',
        'neighbor' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngNeighbor[]',
        'network' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngNetwork[]',
        'aggregate_address' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngAggregateAddress[]',
        'offset_list' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngOffsetList[]',
        'passive_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]',
        'redistribute' => '\Fortigate\FortiOS\Model\CMDB\RouterRipRedistribute[]',
        'update_timer' => 'int',
        'timeout_timer' => 'int',
        'garbage_timer' => 'int',
        'interface' => '\Fortigate\FortiOS\Model\CMDB\RouterRipngInterface[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_information_originate' => null,
        'default_metric' => null,
        'max_out_metric' => null,
        'distance' => null,
        'distribute_list' => null,
        'neighbor' => null,
        'network' => null,
        'aggregate_address' => null,
        'offset_list' => null,
        'passive_interface' => null,
        'redistribute' => null,
        'update_timer' => null,
        'timeout_timer' => null,
        'garbage_timer' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_information_originate' => 'default-information-originate',
        'default_metric' => 'default-metric',
        'max_out_metric' => 'max-out-metric',
        'distance' => 'distance',
        'distribute_list' => 'distribute-list',
        'neighbor' => 'neighbor',
        'network' => 'network',
        'aggregate_address' => 'aggregate-address',
        'offset_list' => 'offset-list',
        'passive_interface' => 'passive-interface',
        'redistribute' => 'redistribute',
        'update_timer' => 'update-timer',
        'timeout_timer' => 'timeout-timer',
        'garbage_timer' => 'garbage-timer',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_information_originate' => 'setDefaultInformationOriginate',
        'default_metric' => 'setDefaultMetric',
        'max_out_metric' => 'setMaxOutMetric',
        'distance' => 'setDistance',
        'distribute_list' => 'setDistributeList',
        'neighbor' => 'setNeighbor',
        'network' => 'setNetwork',
        'aggregate_address' => 'setAggregateAddress',
        'offset_list' => 'setOffsetList',
        'passive_interface' => 'setPassiveInterface',
        'redistribute' => 'setRedistribute',
        'update_timer' => 'setUpdateTimer',
        'timeout_timer' => 'setTimeoutTimer',
        'garbage_timer' => 'setGarbageTimer',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_information_originate' => 'getDefaultInformationOriginate',
        'default_metric' => 'getDefaultMetric',
        'max_out_metric' => 'getMaxOutMetric',
        'distance' => 'getDistance',
        'distribute_list' => 'getDistributeList',
        'neighbor' => 'getNeighbor',
        'network' => 'getNetwork',
        'aggregate_address' => 'getAggregateAddress',
        'offset_list' => 'getOffsetList',
        'passive_interface' => 'getPassiveInterface',
        'redistribute' => 'getRedistribute',
        'update_timer' => 'getUpdateTimer',
        'timeout_timer' => 'getTimeoutTimer',
        'garbage_timer' => 'getGarbageTimer',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEFAULT_INFORMATION_ORIGINATE_ENABLE = 'enable';
    const DEFAULT_INFORMATION_ORIGINATE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultInformationOriginateAllowableValues()
    {
        return [
            self::DEFAULT_INFORMATION_ORIGINATE_ENABLE,
            self::DEFAULT_INFORMATION_ORIGINATE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_information_originate'] = $data['default_information_originate'] ?? null;
        $this->container['default_metric'] = $data['default_metric'] ?? null;
        $this->container['max_out_metric'] = $data['max_out_metric'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['distribute_list'] = $data['distribute_list'] ?? null;
        $this->container['neighbor'] = $data['neighbor'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['aggregate_address'] = $data['aggregate_address'] ?? null;
        $this->container['offset_list'] = $data['offset_list'] ?? null;
        $this->container['passive_interface'] = $data['passive_interface'] ?? null;
        $this->container['redistribute'] = $data['redistribute'] ?? null;
        $this->container['update_timer'] = $data['update_timer'] ?? null;
        $this->container['timeout_timer'] = $data['timeout_timer'] ?? null;
        $this->container['garbage_timer'] = $data['garbage_timer'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($this->container['default_information_originate']) && !in_array($this->container['default_information_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_information_originate', must be one of '%s'",
                $this->container['default_information_originate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] > 16)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['default_metric']) && ($this->container['default_metric'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_metric', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_out_metric']) && ($this->container['max_out_metric'] > 15)) {
            $invalidProperties[] = "invalid value for 'max_out_metric', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['max_out_metric']) && ($this->container['max_out_metric'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_out_metric', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['distance']) && (count($this->container['distance']) > 0)) {
            $invalidProperties[] = "invalid value for 'distance', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['distribute_list']) && (count($this->container['distribute_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'distribute_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor']) && (count($this->container['neighbor']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['network']) && (count($this->container['network']) > 0)) {
            $invalidProperties[] = "invalid value for 'network', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['aggregate_address']) && (count($this->container['aggregate_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'aggregate_address', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['offset_list']) && (count($this->container['offset_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'offset_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['passive_interface']) && (count($this->container['passive_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'passive_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute']) && (count($this->container['redistribute']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['update_timer']) && ($this->container['update_timer'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'update_timer', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['update_timer']) && ($this->container['update_timer'] < 5)) {
            $invalidProperties[] = "invalid value for 'update_timer', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['timeout_timer']) && ($this->container['timeout_timer'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'timeout_timer', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['timeout_timer']) && ($this->container['timeout_timer'] < 5)) {
            $invalidProperties[] = "invalid value for 'timeout_timer', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['garbage_timer']) && ($this->container['garbage_timer'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'garbage_timer', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['garbage_timer']) && ($this->container['garbage_timer'] < 5)) {
            $invalidProperties[] = "invalid value for 'garbage_timer', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['interface']) && (count($this->container['interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'interface', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_information_originate
     *
     * @return string|null
     */
    public function getDefaultInformationOriginate()
    {
        return $this->container['default_information_originate'];
    }

    /**
     * Sets default_information_originate
     *
     * @param string|null $default_information_originate Enable/disable generation of default route.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDefaultInformationOriginate($default_information_originate)
    {
        $allowedValues = $this->getDefaultInformationOriginateAllowableValues();
        if (!is_null($default_information_originate) && !in_array($default_information_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_information_originate', must be one of '%s'",
                    $default_information_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_information_originate'] = $default_information_originate;

        return $this;
    }

    /**
     * Gets default_metric
     *
     * @return int|null
     */
    public function getDefaultMetric()
    {
        return $this->container['default_metric'];
    }

    /**
     * Sets default_metric
     *
     * @param int|null $default_metric Default metric.
     *
     * @return self
     */
    public function setDefaultMetric($default_metric)
    {

        if (!is_null($default_metric) && ($default_metric > 16)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject178., must be smaller than or equal to 16.');
        }
        if (!is_null($default_metric) && ($default_metric < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_metric when calling InlineObject178., must be bigger than or equal to 1.');
        }

        $this->container['default_metric'] = $default_metric;

        return $this;
    }

    /**
     * Gets max_out_metric
     *
     * @return int|null
     */
    public function getMaxOutMetric()
    {
        return $this->container['max_out_metric'];
    }

    /**
     * Sets max_out_metric
     *
     * @param int|null $max_out_metric Maximum metric allowed to output(0 means 'not set').
     *
     * @return self
     */
    public function setMaxOutMetric($max_out_metric)
    {

        if (!is_null($max_out_metric) && ($max_out_metric > 15)) {
            throw new \InvalidArgumentException('invalid value for $max_out_metric when calling InlineObject178., must be smaller than or equal to 15.');
        }
        if (!is_null($max_out_metric) && ($max_out_metric < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_out_metric when calling InlineObject178., must be bigger than or equal to 0.');
        }

        $this->container['max_out_metric'] = $max_out_metric;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngDistance[]|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngDistance[]|null $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && (count($distance) > 0)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets distribute_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipDistributeList[]|null
     */
    public function getDistributeList()
    {
        return $this->container['distribute_list'];
    }

    /**
     * Sets distribute_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipDistributeList[]|null $distribute_list Distribute list.
     *
     * @return self
     */
    public function setDistributeList($distribute_list)
    {

        if (!is_null($distribute_list) && (count($distribute_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $distribute_list when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['distribute_list'] = $distribute_list;

        return $this;
    }

    /**
     * Gets neighbor
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngNeighbor[]|null
     */
    public function getNeighbor()
    {
        return $this->container['neighbor'];
    }

    /**
     * Sets neighbor
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngNeighbor[]|null $neighbor neighbor
     *
     * @return self
     */
    public function setNeighbor($neighbor)
    {

        if (!is_null($neighbor) && (count($neighbor) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor'] = $neighbor;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngNetwork[]|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngNetwork[]|null $network Network.
     *
     * @return self
     */
    public function setNetwork($network)
    {

        if (!is_null($network) && (count($network) > 0)) {
            throw new \InvalidArgumentException('invalid value for $network when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets aggregate_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngAggregateAddress[]|null
     */
    public function getAggregateAddress()
    {
        return $this->container['aggregate_address'];
    }

    /**
     * Sets aggregate_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngAggregateAddress[]|null $aggregate_address Aggregate address.
     *
     * @return self
     */
    public function setAggregateAddress($aggregate_address)
    {

        if (!is_null($aggregate_address) && (count($aggregate_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $aggregate_address when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['aggregate_address'] = $aggregate_address;

        return $this;
    }

    /**
     * Gets offset_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngOffsetList[]|null
     */
    public function getOffsetList()
    {
        return $this->container['offset_list'];
    }

    /**
     * Sets offset_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngOffsetList[]|null $offset_list Offset list.
     *
     * @return self
     */
    public function setOffsetList($offset_list)
    {

        if (!is_null($offset_list) && (count($offset_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $offset_list when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['offset_list'] = $offset_list;

        return $this;
    }

    /**
     * Gets passive_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null
     */
    public function getPassiveInterface()
    {
        return $this->container['passive_interface'];
    }

    /**
     * Sets passive_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterOspfPassiveInterface[]|null $passive_interface Passive interface configuration.
     *
     * @return self
     */
    public function setPassiveInterface($passive_interface)
    {

        if (!is_null($passive_interface) && (count($passive_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $passive_interface when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['passive_interface'] = $passive_interface;

        return $this;
    }

    /**
     * Gets redistribute
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipRedistribute[]|null
     */
    public function getRedistribute()
    {
        return $this->container['redistribute'];
    }

    /**
     * Sets redistribute
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipRedistribute[]|null $redistribute Redistribute configuration.
     *
     * @return self
     */
    public function setRedistribute($redistribute)
    {

        if (!is_null($redistribute) && (count($redistribute) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute'] = $redistribute;

        return $this;
    }

    /**
     * Gets update_timer
     *
     * @return int|null
     */
    public function getUpdateTimer()
    {
        return $this->container['update_timer'];
    }

    /**
     * Sets update_timer
     *
     * @param int|null $update_timer Update timer.
     *
     * @return self
     */
    public function setUpdateTimer($update_timer)
    {

        if (!is_null($update_timer) && ($update_timer > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $update_timer when calling InlineObject178., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($update_timer) && ($update_timer < 5)) {
            throw new \InvalidArgumentException('invalid value for $update_timer when calling InlineObject178., must be bigger than or equal to 5.');
        }

        $this->container['update_timer'] = $update_timer;

        return $this;
    }

    /**
     * Gets timeout_timer
     *
     * @return int|null
     */
    public function getTimeoutTimer()
    {
        return $this->container['timeout_timer'];
    }

    /**
     * Sets timeout_timer
     *
     * @param int|null $timeout_timer Timeout timer.
     *
     * @return self
     */
    public function setTimeoutTimer($timeout_timer)
    {

        if (!is_null($timeout_timer) && ($timeout_timer > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $timeout_timer when calling InlineObject178., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($timeout_timer) && ($timeout_timer < 5)) {
            throw new \InvalidArgumentException('invalid value for $timeout_timer when calling InlineObject178., must be bigger than or equal to 5.');
        }

        $this->container['timeout_timer'] = $timeout_timer;

        return $this;
    }

    /**
     * Gets garbage_timer
     *
     * @return int|null
     */
    public function getGarbageTimer()
    {
        return $this->container['garbage_timer'];
    }

    /**
     * Sets garbage_timer
     *
     * @param int|null $garbage_timer Garbage timer.
     *
     * @return self
     */
    public function setGarbageTimer($garbage_timer)
    {

        if (!is_null($garbage_timer) && ($garbage_timer > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $garbage_timer when calling InlineObject178., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($garbage_timer) && ($garbage_timer < 5)) {
            throw new \InvalidArgumentException('invalid value for $garbage_timer when calling InlineObject178., must be bigger than or equal to 5.');
        }

        $this->container['garbage_timer'] = $garbage_timer;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRipngInterface[]|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRipngInterface[]|null $interface RIPng interface configuration.
     *
     * @return self
     */
    public function setInterface($interface)
    {

        if (!is_null($interface) && (count($interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $interface when calling InlineObject178., number of items must be less than or equal to 0.');
        }
        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


