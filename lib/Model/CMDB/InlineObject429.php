<?php
/**
 * InlineObject429
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject429 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject429 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_429';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'int',
        'group_type' => 'string',
        'authtimeout' => 'int',
        'auth_concurrent_override' => 'string',
        'auth_concurrent_value' => 'int',
        'http_digest_realm' => 'string',
        'sso_attribute_value' => 'string',
        'member' => '\Fortigate\FortiOS\Model\CMDB\UserGroupNameMember[]',
        'match' => '\Fortigate\FortiOS\Model\CMDB\UserGroupNameMatch[]',
        'user_id' => 'string',
        'password' => 'string',
        'user_name' => 'string',
        'sponsor' => 'string',
        'company' => 'string',
        'email' => 'string',
        'mobile_phone' => 'string',
        'sms_server' => 'string',
        'sms_custom_server' => 'string',
        'expire_type' => 'string',
        'expire' => 'int',
        'max_accounts' => 'int',
        'multiple_guest_add' => 'string',
        'guest' => '\Fortigate\FortiOS\Model\CMDB\UserGroupNameGuest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'group_type' => null,
        'authtimeout' => null,
        'auth_concurrent_override' => null,
        'auth_concurrent_value' => null,
        'http_digest_realm' => null,
        'sso_attribute_value' => null,
        'member' => null,
        'match' => null,
        'user_id' => null,
        'password' => null,
        'user_name' => null,
        'sponsor' => null,
        'company' => null,
        'email' => null,
        'mobile_phone' => null,
        'sms_server' => null,
        'sms_custom_server' => null,
        'expire_type' => null,
        'expire' => null,
        'max_accounts' => null,
        'multiple_guest_add' => null,
        'guest' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'group_type' => 'group-type',
        'authtimeout' => 'authtimeout',
        'auth_concurrent_override' => 'auth-concurrent-override',
        'auth_concurrent_value' => 'auth-concurrent-value',
        'http_digest_realm' => 'http-digest-realm',
        'sso_attribute_value' => 'sso-attribute-value',
        'member' => 'member',
        'match' => 'match',
        'user_id' => 'user-id',
        'password' => 'password',
        'user_name' => 'user-name',
        'sponsor' => 'sponsor',
        'company' => 'company',
        'email' => 'email',
        'mobile_phone' => 'mobile-phone',
        'sms_server' => 'sms-server',
        'sms_custom_server' => 'sms-custom-server',
        'expire_type' => 'expire-type',
        'expire' => 'expire',
        'max_accounts' => 'max-accounts',
        'multiple_guest_add' => 'multiple-guest-add',
        'guest' => 'guest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'group_type' => 'setGroupType',
        'authtimeout' => 'setAuthtimeout',
        'auth_concurrent_override' => 'setAuthConcurrentOverride',
        'auth_concurrent_value' => 'setAuthConcurrentValue',
        'http_digest_realm' => 'setHttpDigestRealm',
        'sso_attribute_value' => 'setSsoAttributeValue',
        'member' => 'setMember',
        'match' => 'setMatch',
        'user_id' => 'setUserId',
        'password' => 'setPassword',
        'user_name' => 'setUserName',
        'sponsor' => 'setSponsor',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'mobile_phone' => 'setMobilePhone',
        'sms_server' => 'setSmsServer',
        'sms_custom_server' => 'setSmsCustomServer',
        'expire_type' => 'setExpireType',
        'expire' => 'setExpire',
        'max_accounts' => 'setMaxAccounts',
        'multiple_guest_add' => 'setMultipleGuestAdd',
        'guest' => 'setGuest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'group_type' => 'getGroupType',
        'authtimeout' => 'getAuthtimeout',
        'auth_concurrent_override' => 'getAuthConcurrentOverride',
        'auth_concurrent_value' => 'getAuthConcurrentValue',
        'http_digest_realm' => 'getHttpDigestRealm',
        'sso_attribute_value' => 'getSsoAttributeValue',
        'member' => 'getMember',
        'match' => 'getMatch',
        'user_id' => 'getUserId',
        'password' => 'getPassword',
        'user_name' => 'getUserName',
        'sponsor' => 'getSponsor',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'mobile_phone' => 'getMobilePhone',
        'sms_server' => 'getSmsServer',
        'sms_custom_server' => 'getSmsCustomServer',
        'expire_type' => 'getExpireType',
        'expire' => 'getExpire',
        'max_accounts' => 'getMaxAccounts',
        'multiple_guest_add' => 'getMultipleGuestAdd',
        'guest' => 'getGuest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GROUP_TYPE_FIREWALL = 'firewall';
    const GROUP_TYPE_FSSO_SERVICE = 'fsso-service';
    const GROUP_TYPE_RSSO = 'rsso';
    const GROUP_TYPE_GUEST = 'guest';
    const AUTH_CONCURRENT_OVERRIDE_ENABLE = 'enable';
    const AUTH_CONCURRENT_OVERRIDE_DISABLE = 'disable';
    const USER_ID_EMAIL = 'email';
    const USER_ID_AUTO_GENERATE = 'auto-generate';
    const USER_ID_SPECIFY = 'specify';
    const PASSWORD_AUTO_GENERATE = 'auto-generate';
    const PASSWORD_SPECIFY = 'specify';
    const PASSWORD_DISABLE = 'disable';
    const USER_NAME_DISABLE = 'disable';
    const USER_NAME_ENABLE = 'enable';
    const SPONSOR_OPTIONAL = 'optional';
    const SPONSOR_MANDATORY = 'mandatory';
    const SPONSOR_DISABLED = 'disabled';
    const COMPANY_OPTIONAL = 'optional';
    const COMPANY_MANDATORY = 'mandatory';
    const COMPANY_DISABLED = 'disabled';
    const EMAIL_DISABLE = 'disable';
    const EMAIL_ENABLE = 'enable';
    const MOBILE_PHONE_DISABLE = 'disable';
    const MOBILE_PHONE_ENABLE = 'enable';
    const SMS_SERVER_FORTIGUARD = 'fortiguard';
    const SMS_SERVER_CUSTOM = 'custom';
    const EXPIRE_TYPE_IMMEDIATELY = 'immediately';
    const EXPIRE_TYPE_FIRST_SUCCESSFUL_LOGIN = 'first-successful-login';
    const MULTIPLE_GUEST_ADD_DISABLE = 'disable';
    const MULTIPLE_GUEST_ADD_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupTypeAllowableValues()
    {
        return [
            self::GROUP_TYPE_FIREWALL,
            self::GROUP_TYPE_FSSO_SERVICE,
            self::GROUP_TYPE_RSSO,
            self::GROUP_TYPE_GUEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthConcurrentOverrideAllowableValues()
    {
        return [
            self::AUTH_CONCURRENT_OVERRIDE_ENABLE,
            self::AUTH_CONCURRENT_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserIdAllowableValues()
    {
        return [
            self::USER_ID_EMAIL,
            self::USER_ID_AUTO_GENERATE,
            self::USER_ID_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordAllowableValues()
    {
        return [
            self::PASSWORD_AUTO_GENERATE,
            self::PASSWORD_SPECIFY,
            self::PASSWORD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserNameAllowableValues()
    {
        return [
            self::USER_NAME_DISABLE,
            self::USER_NAME_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSponsorAllowableValues()
    {
        return [
            self::SPONSOR_OPTIONAL,
            self::SPONSOR_MANDATORY,
            self::SPONSOR_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompanyAllowableValues()
    {
        return [
            self::COMPANY_OPTIONAL,
            self::COMPANY_MANDATORY,
            self::COMPANY_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailAllowableValues()
    {
        return [
            self::EMAIL_DISABLE,
            self::EMAIL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMobilePhoneAllowableValues()
    {
        return [
            self::MOBILE_PHONE_DISABLE,
            self::MOBILE_PHONE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsServerAllowableValues()
    {
        return [
            self::SMS_SERVER_FORTIGUARD,
            self::SMS_SERVER_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpireTypeAllowableValues()
    {
        return [
            self::EXPIRE_TYPE_IMMEDIATELY,
            self::EXPIRE_TYPE_FIRST_SUCCESSFUL_LOGIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultipleGuestAddAllowableValues()
    {
        return [
            self::MULTIPLE_GUEST_ADD_DISABLE,
            self::MULTIPLE_GUEST_ADD_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['group_type'] = $data['group_type'] ?? null;
        $this->container['authtimeout'] = $data['authtimeout'] ?? null;
        $this->container['auth_concurrent_override'] = $data['auth_concurrent_override'] ?? null;
        $this->container['auth_concurrent_value'] = $data['auth_concurrent_value'] ?? null;
        $this->container['http_digest_realm'] = $data['http_digest_realm'] ?? null;
        $this->container['sso_attribute_value'] = $data['sso_attribute_value'] ?? null;
        $this->container['member'] = $data['member'] ?? null;
        $this->container['match'] = $data['match'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['sponsor'] = $data['sponsor'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['mobile_phone'] = $data['mobile_phone'] ?? null;
        $this->container['sms_server'] = $data['sms_server'] ?? null;
        $this->container['sms_custom_server'] = $data['sms_custom_server'] ?? null;
        $this->container['expire_type'] = $data['expire_type'] ?? null;
        $this->container['expire'] = $data['expire'] ?? null;
        $this->container['max_accounts'] = $data['max_accounts'] ?? null;
        $this->container['multiple_guest_add'] = $data['multiple_guest_add'] ?? null;
        $this->container['guest'] = $data['guest'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($this->container['group_type']) && !in_array($this->container['group_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_type', must be one of '%s'",
                $this->container['group_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authtimeout']) && ($this->container['authtimeout'] > 43200)) {
            $invalidProperties[] = "invalid value for 'authtimeout', must be smaller than or equal to 43200.";
        }

        if (!is_null($this->container['authtimeout']) && ($this->container['authtimeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'authtimeout', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAuthConcurrentOverrideAllowableValues();
        if (!is_null($this->container['auth_concurrent_override']) && !in_array($this->container['auth_concurrent_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_concurrent_override', must be one of '%s'",
                $this->container['auth_concurrent_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_concurrent_value']) && ($this->container['auth_concurrent_value'] > 100)) {
            $invalidProperties[] = "invalid value for 'auth_concurrent_value', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['auth_concurrent_value']) && ($this->container['auth_concurrent_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'auth_concurrent_value', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['http_digest_realm']) && (mb_strlen($this->container['http_digest_realm']) > 35)) {
            $invalidProperties[] = "invalid value for 'http_digest_realm', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sso_attribute_value']) && (mb_strlen($this->container['sso_attribute_value']) > 511)) {
            $invalidProperties[] = "invalid value for 'sso_attribute_value', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['member']) && (count($this->container['member']) > 3000)) {
            $invalidProperties[] = "invalid value for 'member', number of items must be less than or equal to 3000.";
        }

        if (!is_null($this->container['match']) && (count($this->container['match']) > 0)) {
            $invalidProperties[] = "invalid value for 'match', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getUserIdAllowableValues();
        if (!is_null($this->container['user_id']) && !in_array($this->container['user_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_id', must be one of '%s'",
                $this->container['user_id'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPasswordAllowableValues();
        if (!is_null($this->container['password']) && !in_array($this->container['password'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password', must be one of '%s'",
                $this->container['password'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserNameAllowableValues();
        if (!is_null($this->container['user_name']) && !in_array($this->container['user_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_name', must be one of '%s'",
                $this->container['user_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSponsorAllowableValues();
        if (!is_null($this->container['sponsor']) && !in_array($this->container['sponsor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sponsor', must be one of '%s'",
                $this->container['sponsor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompanyAllowableValues();
        if (!is_null($this->container['company']) && !in_array($this->container['company'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'company', must be one of '%s'",
                $this->container['company'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmailAllowableValues();
        if (!is_null($this->container['email']) && !in_array($this->container['email'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email', must be one of '%s'",
                $this->container['email'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMobilePhoneAllowableValues();
        if (!is_null($this->container['mobile_phone']) && !in_array($this->container['mobile_phone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mobile_phone', must be one of '%s'",
                $this->container['mobile_phone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($this->container['sms_server']) && !in_array($this->container['sms_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sms_server', must be one of '%s'",
                $this->container['sms_server'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sms_custom_server']) && (mb_strlen($this->container['sms_custom_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'sms_custom_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getExpireTypeAllowableValues();
        if (!is_null($this->container['expire_type']) && !in_array($this->container['expire_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expire_type', must be one of '%s'",
                $this->container['expire_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['expire']) && ($this->container['expire'] > 31536000)) {
            $invalidProperties[] = "invalid value for 'expire', must be smaller than or equal to 31536000.";
        }

        if (!is_null($this->container['expire']) && ($this->container['expire'] < 1)) {
            $invalidProperties[] = "invalid value for 'expire', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_accounts']) && ($this->container['max_accounts'] > 500)) {
            $invalidProperties[] = "invalid value for 'max_accounts', must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['max_accounts']) && ($this->container['max_accounts'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_accounts', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMultipleGuestAddAllowableValues();
        if (!is_null($this->container['multiple_guest_add']) && !in_array($this->container['multiple_guest_add'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multiple_guest_add', must be one of '%s'",
                $this->container['multiple_guest_add'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['guest']) && (count($this->container['guest']) > 500)) {
            $invalidProperties[] = "invalid value for 'guest', number of items must be less than or equal to 500.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Group name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject429., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Group ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject429., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject429., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return string|null
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param string|null $group_type Set the group to be for firewall authentication, FSSO, RSSO, or guest users.    firewall:Firewall.    fsso-service:Fortinet Single Sign-On Service.    rsso:RADIUS based Single Sign-On Service.    guest:Guest.
     *
     * @return self
     */
    public function setGroupType($group_type)
    {
        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($group_type) && !in_array($group_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_type', must be one of '%s'",
                    $group_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets authtimeout
     *
     * @return int|null
     */
    public function getAuthtimeout()
    {
        return $this->container['authtimeout'];
    }

    /**
     * Sets authtimeout
     *
     * @param int|null $authtimeout Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
     *
     * @return self
     */
    public function setAuthtimeout($authtimeout)
    {

        if (!is_null($authtimeout) && ($authtimeout > 43200)) {
            throw new \InvalidArgumentException('invalid value for $authtimeout when calling InlineObject429., must be smaller than or equal to 43200.');
        }
        if (!is_null($authtimeout) && ($authtimeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $authtimeout when calling InlineObject429., must be bigger than or equal to 0.');
        }

        $this->container['authtimeout'] = $authtimeout;

        return $this;
    }

    /**
     * Gets auth_concurrent_override
     *
     * @return string|null
     */
    public function getAuthConcurrentOverride()
    {
        return $this->container['auth_concurrent_override'];
    }

    /**
     * Sets auth_concurrent_override
     *
     * @param string|null $auth_concurrent_override Enable/disable overriding the global number of concurrent authentication sessions for this user group.    enable:Enable auth-concurrent-override.    disable:Disable auth-concurrent-override.
     *
     * @return self
     */
    public function setAuthConcurrentOverride($auth_concurrent_override)
    {
        $allowedValues = $this->getAuthConcurrentOverrideAllowableValues();
        if (!is_null($auth_concurrent_override) && !in_array($auth_concurrent_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_concurrent_override', must be one of '%s'",
                    $auth_concurrent_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_concurrent_override'] = $auth_concurrent_override;

        return $this;
    }

    /**
     * Gets auth_concurrent_value
     *
     * @return int|null
     */
    public function getAuthConcurrentValue()
    {
        return $this->container['auth_concurrent_value'];
    }

    /**
     * Sets auth_concurrent_value
     *
     * @param int|null $auth_concurrent_value Maximum number of concurrent authenticated connections per user (0 - 100).
     *
     * @return self
     */
    public function setAuthConcurrentValue($auth_concurrent_value)
    {

        if (!is_null($auth_concurrent_value) && ($auth_concurrent_value > 100)) {
            throw new \InvalidArgumentException('invalid value for $auth_concurrent_value when calling InlineObject429., must be smaller than or equal to 100.');
        }
        if (!is_null($auth_concurrent_value) && ($auth_concurrent_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $auth_concurrent_value when calling InlineObject429., must be bigger than or equal to 0.');
        }

        $this->container['auth_concurrent_value'] = $auth_concurrent_value;

        return $this;
    }

    /**
     * Gets http_digest_realm
     *
     * @return string|null
     */
    public function getHttpDigestRealm()
    {
        return $this->container['http_digest_realm'];
    }

    /**
     * Sets http_digest_realm
     *
     * @param string|null $http_digest_realm Realm attribute for MD5-digest authentication.
     *
     * @return self
     */
    public function setHttpDigestRealm($http_digest_realm)
    {
        if (!is_null($http_digest_realm) && (mb_strlen($http_digest_realm) > 35)) {
            throw new \InvalidArgumentException('invalid length for $http_digest_realm when calling InlineObject429., must be smaller than or equal to 35.');
        }

        $this->container['http_digest_realm'] = $http_digest_realm;

        return $this;
    }

    /**
     * Gets sso_attribute_value
     *
     * @return string|null
     */
    public function getSsoAttributeValue()
    {
        return $this->container['sso_attribute_value'];
    }

    /**
     * Sets sso_attribute_value
     *
     * @param string|null $sso_attribute_value Name of the RADIUS user group that this local user group represents.
     *
     * @return self
     */
    public function setSsoAttributeValue($sso_attribute_value)
    {
        if (!is_null($sso_attribute_value) && (mb_strlen($sso_attribute_value) > 511)) {
            throw new \InvalidArgumentException('invalid length for $sso_attribute_value when calling InlineObject429., must be smaller than or equal to 511.');
        }

        $this->container['sso_attribute_value'] = $sso_attribute_value;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserGroupNameMember[]|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserGroupNameMember[]|null $member Names of users, peers, LDAP severs, or RADIUS servers to add to the user group.
     *
     * @return self
     */
    public function setMember($member)
    {

        if (!is_null($member) && (count($member) > 3000)) {
            throw new \InvalidArgumentException('invalid value for $member when calling InlineObject429., number of items must be less than or equal to 3000.');
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets match
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserGroupNameMatch[]|null
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserGroupNameMatch[]|null $match Group matches.
     *
     * @return self
     */
    public function setMatch($match)
    {

        if (!is_null($match) && (count($match) > 0)) {
            throw new \InvalidArgumentException('invalid value for $match when calling InlineObject429., number of items must be less than or equal to 0.');
        }
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id Guest user ID type.    email:Email address.    auto-generate:Automatically generate.    specify:Specify.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $allowedValues = $this->getUserIdAllowableValues();
        if (!is_null($user_id) && !in_array($user_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_id', must be one of '%s'",
                    $user_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Guest user password type.    auto-generate:Automatically generate.    specify:Specify.    disable:Disable.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $allowedValues = $this->getPasswordAllowableValues();
        if (!is_null($password) && !in_array($password, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password', must be one of '%s'",
                    $password,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name Enable/disable the guest user name entry.    disable:Enable setting.    enable:Disable setting.
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $allowedValues = $this->getUserNameAllowableValues();
        if (!is_null($user_name) && !in_array($user_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_name', must be one of '%s'",
                    $user_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets sponsor
     *
     * @return string|null
     */
    public function getSponsor()
    {
        return $this->container['sponsor'];
    }

    /**
     * Sets sponsor
     *
     * @param string|null $sponsor Set the action for the sponsor guest user field.    optional:Optional.    mandatory:Mandatory.    disabled:Disabled.
     *
     * @return self
     */
    public function setSponsor($sponsor)
    {
        $allowedValues = $this->getSponsorAllowableValues();
        if (!is_null($sponsor) && !in_array($sponsor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sponsor', must be one of '%s'",
                    $sponsor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sponsor'] = $sponsor;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Set the action for the company guest user field.    optional:Optional.    mandatory:Mandatory.    disabled:Disabled.
     *
     * @return self
     */
    public function setCompany($company)
    {
        $allowedValues = $this->getCompanyAllowableValues();
        if (!is_null($company) && !in_array($company, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'company', must be one of '%s'",
                    $company,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Enable/disable the guest user email address field.    disable:Enable setting.    enable:Disable setting.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $allowedValues = $this->getEmailAllowableValues();
        if (!is_null($email) && !in_array($email, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email', must be one of '%s'",
                    $email,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Enable/disable the guest user mobile phone number field.    disable:Enable setting.    enable:Disable setting.
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        $allowedValues = $this->getMobilePhoneAllowableValues();
        if (!is_null($mobile_phone) && !in_array($mobile_phone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mobile_phone', must be one of '%s'",
                    $mobile_phone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets sms_server
     *
     * @return string|null
     */
    public function getSmsServer()
    {
        return $this->container['sms_server'];
    }

    /**
     * Sets sms_server
     *
     * @param string|null $sms_server Send SMS through FortiGuard or other external server.    fortiguard:Send SMS by FortiGuard.    custom:Send SMS by custom server.
     *
     * @return self
     */
    public function setSmsServer($sms_server)
    {
        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($sms_server) && !in_array($sms_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sms_server', must be one of '%s'",
                    $sms_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_server'] = $sms_server;

        return $this;
    }

    /**
     * Gets sms_custom_server
     *
     * @return string|null
     */
    public function getSmsCustomServer()
    {
        return $this->container['sms_custom_server'];
    }

    /**
     * Sets sms_custom_server
     *
     * @param string|null $sms_custom_server SMS server.
     *
     * @return self
     */
    public function setSmsCustomServer($sms_custom_server)
    {
        if (!is_null($sms_custom_server) && (mb_strlen($sms_custom_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sms_custom_server when calling InlineObject429., must be smaller than or equal to 35.');
        }

        $this->container['sms_custom_server'] = $sms_custom_server;

        return $this;
    }

    /**
     * Gets expire_type
     *
     * @return string|null
     */
    public function getExpireType()
    {
        return $this->container['expire_type'];
    }

    /**
     * Sets expire_type
     *
     * @param string|null $expire_type Determine when the expiration countdown begins.    immediately:Immediately.    first-successful-login:First successful login.
     *
     * @return self
     */
    public function setExpireType($expire_type)
    {
        $allowedValues = $this->getExpireTypeAllowableValues();
        if (!is_null($expire_type) && !in_array($expire_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expire_type', must be one of '%s'",
                    $expire_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expire_type'] = $expire_type;

        return $this;
    }

    /**
     * Gets expire
     *
     * @return int|null
     */
    public function getExpire()
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire
     *
     * @param int|null $expire Time in seconds before guest user accounts expire. (1 - 31536000 sec)
     *
     * @return self
     */
    public function setExpire($expire)
    {

        if (!is_null($expire) && ($expire > 31536000)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling InlineObject429., must be smaller than or equal to 31536000.');
        }
        if (!is_null($expire) && ($expire < 1)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling InlineObject429., must be bigger than or equal to 1.');
        }

        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets max_accounts
     *
     * @return int|null
     */
    public function getMaxAccounts()
    {
        return $this->container['max_accounts'];
    }

    /**
     * Sets max_accounts
     *
     * @param int|null $max_accounts Maximum number of guest accounts that can be created for this group (0 means unlimited).
     *
     * @return self
     */
    public function setMaxAccounts($max_accounts)
    {

        if (!is_null($max_accounts) && ($max_accounts > 500)) {
            throw new \InvalidArgumentException('invalid value for $max_accounts when calling InlineObject429., must be smaller than or equal to 500.');
        }
        if (!is_null($max_accounts) && ($max_accounts < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_accounts when calling InlineObject429., must be bigger than or equal to 0.');
        }

        $this->container['max_accounts'] = $max_accounts;

        return $this;
    }

    /**
     * Gets multiple_guest_add
     *
     * @return string|null
     */
    public function getMultipleGuestAdd()
    {
        return $this->container['multiple_guest_add'];
    }

    /**
     * Sets multiple_guest_add
     *
     * @param string|null $multiple_guest_add Enable/disable addition of multiple guests.    disable:Enable setting.    enable:Disable setting.
     *
     * @return self
     */
    public function setMultipleGuestAdd($multiple_guest_add)
    {
        $allowedValues = $this->getMultipleGuestAddAllowableValues();
        if (!is_null($multiple_guest_add) && !in_array($multiple_guest_add, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multiple_guest_add', must be one of '%s'",
                    $multiple_guest_add,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multiple_guest_add'] = $multiple_guest_add;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserGroupNameGuest[]|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserGroupNameGuest[]|null $guest Guest User.
     *
     * @return self
     */
    public function setGuest($guest)
    {

        if (!is_null($guest) && (count($guest) > 500)) {
            throw new \InvalidArgumentException('invalid value for $guest when calling InlineObject429., number of items must be less than or equal to 500.');
        }
        $this->container['guest'] = $guest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


