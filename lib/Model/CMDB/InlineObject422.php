<?php
/**
 * InlineObject422
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject422 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject422 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_422';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'serial_number' => 'string',
        'status' => 'string',
        'comments' => 'string',
        'license' => 'string',
        'activation_code' => 'string',
        'activation_expire' => 'int',
        'reg_id' => 'string',
        'os_ver' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'serial_number' => null,
        'status' => null,
        'comments' => null,
        'license' => null,
        'activation_code' => null,
        'activation_expire' => null,
        'reg_id' => null,
        'os_ver' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serial_number' => 'serial-number',
        'status' => 'status',
        'comments' => 'comments',
        'license' => 'license',
        'activation_code' => 'activation-code',
        'activation_expire' => 'activation-expire',
        'reg_id' => 'reg-id',
        'os_ver' => 'os-ver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serial_number' => 'setSerialNumber',
        'status' => 'setStatus',
        'comments' => 'setComments',
        'license' => 'setLicense',
        'activation_code' => 'setActivationCode',
        'activation_expire' => 'setActivationExpire',
        'reg_id' => 'setRegId',
        'os_ver' => 'setOsVer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serial_number' => 'getSerialNumber',
        'status' => 'getStatus',
        'comments' => 'getComments',
        'license' => 'getLicense',
        'activation_code' => 'getActivationCode',
        'activation_expire' => 'getActivationExpire',
        'reg_id' => 'getRegId',
        'os_ver' => 'getOsVer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE = 'active';
    const STATUS_LOCK = 'lock';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_LOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['serial_number'] = $data['serial_number'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['license'] = $data['license'] ?? null;
        $this->container['activation_code'] = $data['activation_code'] ?? null;
        $this->container['activation_expire'] = $data['activation_expire'] ?? null;
        $this->container['reg_id'] = $data['reg_id'] ?? null;
        $this->container['os_ver'] = $data['os_ver'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 16.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['license']) && (mb_strlen($this->container['license']) > 31)) {
            $invalidProperties[] = "invalid value for 'license', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['activation_code']) && (mb_strlen($this->container['activation_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'activation_code', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['activation_expire']) && ($this->container['activation_expire'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'activation_expire', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['activation_expire']) && ($this->container['activation_expire'] < 0)) {
            $invalidProperties[] = "invalid value for 'activation_expire', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reg_id']) && (mb_strlen($this->container['reg_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'reg_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['os_ver']) && (mb_strlen($this->container['os_ver']) > 15)) {
            $invalidProperties[] = "invalid value for 'os_ver', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Serial number.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (!is_null($serial_number) && (mb_strlen($serial_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling InlineObject422., must be smaller than or equal to 16.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status    active:Activate FortiToken.    lock:Lock FortiToken.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject422., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license Mobile token license.
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (!is_null($license) && (mb_strlen($license) > 31)) {
            throw new \InvalidArgumentException('invalid length for $license when calling InlineObject422., must be smaller than or equal to 31.');
        }

        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets activation_code
     *
     * @return string|null
     */
    public function getActivationCode()
    {
        return $this->container['activation_code'];
    }

    /**
     * Sets activation_code
     *
     * @param string|null $activation_code Mobile token user activation-code.
     *
     * @return self
     */
    public function setActivationCode($activation_code)
    {
        if (!is_null($activation_code) && (mb_strlen($activation_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $activation_code when calling InlineObject422., must be smaller than or equal to 32.');
        }

        $this->container['activation_code'] = $activation_code;

        return $this;
    }

    /**
     * Gets activation_expire
     *
     * @return int|null
     */
    public function getActivationExpire()
    {
        return $this->container['activation_expire'];
    }

    /**
     * Sets activation_expire
     *
     * @param int|null $activation_expire Mobile token user activation-code expire time.
     *
     * @return self
     */
    public function setActivationExpire($activation_expire)
    {

        if (!is_null($activation_expire) && ($activation_expire > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $activation_expire when calling InlineObject422., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($activation_expire) && ($activation_expire < 0)) {
            throw new \InvalidArgumentException('invalid value for $activation_expire when calling InlineObject422., must be bigger than or equal to 0.');
        }

        $this->container['activation_expire'] = $activation_expire;

        return $this;
    }

    /**
     * Gets reg_id
     *
     * @return string|null
     */
    public function getRegId()
    {
        return $this->container['reg_id'];
    }

    /**
     * Sets reg_id
     *
     * @param string|null $reg_id Device Reg ID.
     *
     * @return self
     */
    public function setRegId($reg_id)
    {
        if (!is_null($reg_id) && (mb_strlen($reg_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reg_id when calling InlineObject422., must be smaller than or equal to 256.');
        }

        $this->container['reg_id'] = $reg_id;

        return $this;
    }

    /**
     * Gets os_ver
     *
     * @return string|null
     */
    public function getOsVer()
    {
        return $this->container['os_ver'];
    }

    /**
     * Sets os_ver
     *
     * @param string|null $os_ver Device Mobile Version.
     *
     * @return self
     */
    public function setOsVer($os_ver)
    {
        if (!is_null($os_ver) && (mb_strlen($os_ver) > 15)) {
            throw new \InvalidArgumentException('invalid length for $os_ver when calling InlineObject422., must be smaller than or equal to 15.');
        }

        $this->container['os_ver'] = $os_ver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


