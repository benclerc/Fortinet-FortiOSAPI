<?php
/**
 * InlineObject474
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject474 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject474 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_474';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'interface' => 'string',
        'remote_gw' => 'string',
        'local_gw' => 'string',
        'authentication' => 'string',
        'encryption' => 'string',
        'authkey' => 'string',
        'enckey' => 'string',
        'localspi' => 'string',
        'remotespi' => 'string',
        'npu_offload' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'interface' => null,
        'remote_gw' => 'ipv4',
        'local_gw' => 'ipv4',
        'authentication' => null,
        'encryption' => null,
        'authkey' => null,
        'enckey' => null,
        'localspi' => null,
        'remotespi' => null,
        'npu_offload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'interface' => 'interface',
        'remote_gw' => 'remote-gw',
        'local_gw' => 'local-gw',
        'authentication' => 'authentication',
        'encryption' => 'encryption',
        'authkey' => 'authkey',
        'enckey' => 'enckey',
        'localspi' => 'localspi',
        'remotespi' => 'remotespi',
        'npu_offload' => 'npu-offload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'interface' => 'setInterface',
        'remote_gw' => 'setRemoteGw',
        'local_gw' => 'setLocalGw',
        'authentication' => 'setAuthentication',
        'encryption' => 'setEncryption',
        'authkey' => 'setAuthkey',
        'enckey' => 'setEnckey',
        'localspi' => 'setLocalspi',
        'remotespi' => 'setRemotespi',
        'npu_offload' => 'setNpuOffload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'interface' => 'getInterface',
        'remote_gw' => 'getRemoteGw',
        'local_gw' => 'getLocalGw',
        'authentication' => 'getAuthentication',
        'encryption' => 'getEncryption',
        'authkey' => 'getAuthkey',
        'enckey' => 'getEnckey',
        'localspi' => 'getLocalspi',
        'remotespi' => 'getRemotespi',
        'npu_offload' => 'getNpuOffload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHENTICATION_NULL = 'null';
    const AUTHENTICATION_MD5 = 'md5';
    const AUTHENTICATION_SHA1 = 'sha1';
    const AUTHENTICATION_SHA256 = 'sha256';
    const AUTHENTICATION_SHA384 = 'sha384';
    const AUTHENTICATION_SHA512 = 'sha512';
    const ENCRYPTION_NULL = 'null';
    const ENCRYPTION_DES = 'des';
    const ENCRYPTION__3DES = '3des';
    const ENCRYPTION_AES128 = 'aes128';
    const ENCRYPTION_AES192 = 'aes192';
    const ENCRYPTION_AES256 = 'aes256';
    const ENCRYPTION_ARIA128 = 'aria128';
    const ENCRYPTION_ARIA192 = 'aria192';
    const ENCRYPTION_ARIA256 = 'aria256';
    const ENCRYPTION_SEED = 'seed';
    const NPU_OFFLOAD_ENABLE = 'enable';
    const NPU_OFFLOAD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_NULL,
            self::AUTHENTICATION_MD5,
            self::AUTHENTICATION_SHA1,
            self::AUTHENTICATION_SHA256,
            self::AUTHENTICATION_SHA384,
            self::AUTHENTICATION_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionAllowableValues()
    {
        return [
            self::ENCRYPTION_NULL,
            self::ENCRYPTION_DES,
            self::ENCRYPTION__3DES,
            self::ENCRYPTION_AES128,
            self::ENCRYPTION_AES192,
            self::ENCRYPTION_AES256,
            self::ENCRYPTION_ARIA128,
            self::ENCRYPTION_ARIA192,
            self::ENCRYPTION_ARIA256,
            self::ENCRYPTION_SEED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNpuOffloadAllowableValues()
    {
        return [
            self::NPU_OFFLOAD_ENABLE,
            self::NPU_OFFLOAD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['remote_gw'] = $data['remote_gw'] ?? null;
        $this->container['local_gw'] = $data['local_gw'] ?? null;
        $this->container['authentication'] = $data['authentication'] ?? null;
        $this->container['encryption'] = $data['encryption'] ?? null;
        $this->container['authkey'] = $data['authkey'] ?? null;
        $this->container['enckey'] = $data['enckey'] ?? null;
        $this->container['localspi'] = $data['localspi'] ?? null;
        $this->container['remotespi'] = $data['remotespi'] ?? null;
        $this->container['npu_offload'] = $data['npu_offload'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($this->container['authentication']) && !in_array($this->container['authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication', must be one of '%s'",
                $this->container['authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptionAllowableValues();
        if (!is_null($this->container['encryption']) && !in_array($this->container['encryption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encryption', must be one of '%s'",
                $this->container['encryption'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($this->container['npu_offload']) && !in_array($this->container['npu_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'npu_offload', must be one of '%s'",
                $this->container['npu_offload'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IPsec tunnel name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject474., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Name of the physical, aggregate, or VLAN interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject474., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets remote_gw
     *
     * @return string|null
     */
    public function getRemoteGw()
    {
        return $this->container['remote_gw'];
    }

    /**
     * Sets remote_gw
     *
     * @param string|null $remote_gw Peer gateway.
     *
     * @return self
     */
    public function setRemoteGw($remote_gw)
    {
        $this->container['remote_gw'] = $remote_gw;

        return $this;
    }

    /**
     * Gets local_gw
     *
     * @return string|null
     */
    public function getLocalGw()
    {
        return $this->container['local_gw'];
    }

    /**
     * Sets local_gw
     *
     * @param string|null $local_gw Local gateway.
     *
     * @return self
     */
    public function setLocalGw($local_gw)
    {
        $this->container['local_gw'] = $local_gw;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication Authentication algorithm. Must be the same for both ends of the tunnel.    null:Null.    md5:MD5.    sha1:SHA1.    sha256:SHA256.    sha384:SHA384.    sha512:SHA512.
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication', must be one of '%s'",
                    $authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return string|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param string|null $encryption Encryption algorithm. Must be the same for both ends of the tunnel.    null:Null.    des:DES.    3des:3DES.    aes128:AES128.    aes192:AES192.    aes256:AES256.    aria128:ARIA128.    aria192:ARIA192.    aria256:ARIA256.    seed:Seed.
     *
     * @return self
     */
    public function setEncryption($encryption)
    {
        $allowedValues = $this->getEncryptionAllowableValues();
        if (!is_null($encryption) && !in_array($encryption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encryption', must be one of '%s'",
                    $encryption,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets authkey
     *
     * @return string|null
     */
    public function getAuthkey()
    {
        return $this->container['authkey'];
    }

    /**
     * Sets authkey
     *
     * @param string|null $authkey Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
     *
     * @return self
     */
    public function setAuthkey($authkey)
    {
        $this->container['authkey'] = $authkey;

        return $this;
    }

    /**
     * Gets enckey
     *
     * @return string|null
     */
    public function getEnckey()
    {
        return $this->container['enckey'];
    }

    /**
     * Sets enckey
     *
     * @param string|null $enckey Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
     *
     * @return self
     */
    public function setEnckey($enckey)
    {
        $this->container['enckey'] = $enckey;

        return $this;
    }

    /**
     * Gets localspi
     *
     * @return string|null
     */
    public function getLocalspi()
    {
        return $this->container['localspi'];
    }

    /**
     * Sets localspi
     *
     * @param string|null $localspi Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     *
     * @return self
     */
    public function setLocalspi($localspi)
    {
        $this->container['localspi'] = $localspi;

        return $this;
    }

    /**
     * Gets remotespi
     *
     * @return string|null
     */
    public function getRemotespi()
    {
        return $this->container['remotespi'];
    }

    /**
     * Sets remotespi
     *
     * @param string|null $remotespi Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     *
     * @return self
     */
    public function setRemotespi($remotespi)
    {
        $this->container['remotespi'] = $remotespi;

        return $this;
    }

    /**
     * Gets npu_offload
     *
     * @return string|null
     */
    public function getNpuOffload()
    {
        return $this->container['npu_offload'];
    }

    /**
     * Sets npu_offload
     *
     * @param string|null $npu_offload Enable/disable NPU offloading.    enable:Enable NPU offloading.    disable:Disable NPU offloading.
     *
     * @return self
     */
    public function setNpuOffload($npu_offload)
    {
        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($npu_offload) && !in_array($npu_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'npu_offload', must be one of '%s'",
                    $npu_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['npu_offload'] = $npu_offload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


