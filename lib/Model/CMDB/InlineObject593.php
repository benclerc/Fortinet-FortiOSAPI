<?php
/**
 * InlineObject593
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject593 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject593 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_593';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'location' => 'string',
        'image_download' => 'string',
        'max_retransmit' => 'int',
        'control_message_offload' => 'string',
        'data_ethernet_ii' => 'string',
        'link_aggregation' => 'string',
        'mesh_eth_type' => 'int',
        'fiapp_eth_type' => 'int',
        'discovery_mc_addr' => 'string',
        'max_clients' => 'int',
        'rogue_scan_mac_adjacency' => 'int',
        'ipsec_base_ip' => 'string',
        'wtp_share' => 'string',
        'ap_log_server' => 'string',
        'ap_log_server_ip' => 'string',
        'ap_log_server_port' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'location' => null,
        'image_download' => null,
        'max_retransmit' => null,
        'control_message_offload' => null,
        'data_ethernet_ii' => null,
        'link_aggregation' => null,
        'mesh_eth_type' => null,
        'fiapp_eth_type' => null,
        'discovery_mc_addr' => null,
        'max_clients' => null,
        'rogue_scan_mac_adjacency' => null,
        'ipsec_base_ip' => 'ipv4',
        'wtp_share' => null,
        'ap_log_server' => null,
        'ap_log_server_ip' => 'ipv4',
        'ap_log_server_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'location' => 'location',
        'image_download' => 'image-download',
        'max_retransmit' => 'max-retransmit',
        'control_message_offload' => 'control-message-offload',
        'data_ethernet_ii' => 'data-ethernet-II',
        'link_aggregation' => 'link-aggregation',
        'mesh_eth_type' => 'mesh-eth-type',
        'fiapp_eth_type' => 'fiapp-eth-type',
        'discovery_mc_addr' => 'discovery-mc-addr',
        'max_clients' => 'max-clients',
        'rogue_scan_mac_adjacency' => 'rogue-scan-mac-adjacency',
        'ipsec_base_ip' => 'ipsec-base-ip',
        'wtp_share' => 'wtp-share',
        'ap_log_server' => 'ap-log-server',
        'ap_log_server_ip' => 'ap-log-server-ip',
        'ap_log_server_port' => 'ap-log-server-port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'location' => 'setLocation',
        'image_download' => 'setImageDownload',
        'max_retransmit' => 'setMaxRetransmit',
        'control_message_offload' => 'setControlMessageOffload',
        'data_ethernet_ii' => 'setDataEthernetIi',
        'link_aggregation' => 'setLinkAggregation',
        'mesh_eth_type' => 'setMeshEthType',
        'fiapp_eth_type' => 'setFiappEthType',
        'discovery_mc_addr' => 'setDiscoveryMcAddr',
        'max_clients' => 'setMaxClients',
        'rogue_scan_mac_adjacency' => 'setRogueScanMacAdjacency',
        'ipsec_base_ip' => 'setIpsecBaseIp',
        'wtp_share' => 'setWtpShare',
        'ap_log_server' => 'setApLogServer',
        'ap_log_server_ip' => 'setApLogServerIp',
        'ap_log_server_port' => 'setApLogServerPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'location' => 'getLocation',
        'image_download' => 'getImageDownload',
        'max_retransmit' => 'getMaxRetransmit',
        'control_message_offload' => 'getControlMessageOffload',
        'data_ethernet_ii' => 'getDataEthernetIi',
        'link_aggregation' => 'getLinkAggregation',
        'mesh_eth_type' => 'getMeshEthType',
        'fiapp_eth_type' => 'getFiappEthType',
        'discovery_mc_addr' => 'getDiscoveryMcAddr',
        'max_clients' => 'getMaxClients',
        'rogue_scan_mac_adjacency' => 'getRogueScanMacAdjacency',
        'ipsec_base_ip' => 'getIpsecBaseIp',
        'wtp_share' => 'getWtpShare',
        'ap_log_server' => 'getApLogServer',
        'ap_log_server_ip' => 'getApLogServerIp',
        'ap_log_server_port' => 'getApLogServerPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IMAGE_DOWNLOAD_ENABLE = 'enable';
    const IMAGE_DOWNLOAD_DISABLE = 'disable';
    const CONTROL_MESSAGE_OFFLOAD_EBP_FRAME = 'ebp-frame';
    const CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_TAG = 'aeroscout-tag';
    const CONTROL_MESSAGE_OFFLOAD_AP_LIST = 'ap-list';
    const CONTROL_MESSAGE_OFFLOAD_STA_LIST = 'sta-list';
    const CONTROL_MESSAGE_OFFLOAD_STA_CAP_LIST = 'sta-cap-list';
    const CONTROL_MESSAGE_OFFLOAD_STATS = 'stats';
    const CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_MU = 'aeroscout-mu';
    const CONTROL_MESSAGE_OFFLOAD_STA_HEALTH = 'sta-health';
    const CONTROL_MESSAGE_OFFLOAD_SPECTRAL_ANALYSIS = 'spectral-analysis';
    const DATA_ETHERNET_II_ENABLE = 'enable';
    const DATA_ETHERNET_II_DISABLE = 'disable';
    const LINK_AGGREGATION_ENABLE = 'enable';
    const LINK_AGGREGATION_DISABLE = 'disable';
    const WTP_SHARE_ENABLE = 'enable';
    const WTP_SHARE_DISABLE = 'disable';
    const AP_LOG_SERVER_ENABLE = 'enable';
    const AP_LOG_SERVER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageDownloadAllowableValues()
    {
        return [
            self::IMAGE_DOWNLOAD_ENABLE,
            self::IMAGE_DOWNLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getControlMessageOffloadAllowableValues()
    {
        return [
            self::CONTROL_MESSAGE_OFFLOAD_EBP_FRAME,
            self::CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_TAG,
            self::CONTROL_MESSAGE_OFFLOAD_AP_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STA_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STA_CAP_LIST,
            self::CONTROL_MESSAGE_OFFLOAD_STATS,
            self::CONTROL_MESSAGE_OFFLOAD_AEROSCOUT_MU,
            self::CONTROL_MESSAGE_OFFLOAD_STA_HEALTH,
            self::CONTROL_MESSAGE_OFFLOAD_SPECTRAL_ANALYSIS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataEthernetIiAllowableValues()
    {
        return [
            self::DATA_ETHERNET_II_ENABLE,
            self::DATA_ETHERNET_II_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkAggregationAllowableValues()
    {
        return [
            self::LINK_AGGREGATION_ENABLE,
            self::LINK_AGGREGATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWtpShareAllowableValues()
    {
        return [
            self::WTP_SHARE_ENABLE,
            self::WTP_SHARE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApLogServerAllowableValues()
    {
        return [
            self::AP_LOG_SERVER_ENABLE,
            self::AP_LOG_SERVER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['image_download'] = $data['image_download'] ?? null;
        $this->container['max_retransmit'] = $data['max_retransmit'] ?? null;
        $this->container['control_message_offload'] = $data['control_message_offload'] ?? null;
        $this->container['data_ethernet_ii'] = $data['data_ethernet_ii'] ?? null;
        $this->container['link_aggregation'] = $data['link_aggregation'] ?? null;
        $this->container['mesh_eth_type'] = $data['mesh_eth_type'] ?? null;
        $this->container['fiapp_eth_type'] = $data['fiapp_eth_type'] ?? null;
        $this->container['discovery_mc_addr'] = $data['discovery_mc_addr'] ?? null;
        $this->container['max_clients'] = $data['max_clients'] ?? null;
        $this->container['rogue_scan_mac_adjacency'] = $data['rogue_scan_mac_adjacency'] ?? null;
        $this->container['ipsec_base_ip'] = $data['ipsec_base_ip'] ?? null;
        $this->container['wtp_share'] = $data['wtp_share'] ?? null;
        $this->container['ap_log_server'] = $data['ap_log_server'] ?? null;
        $this->container['ap_log_server_ip'] = $data['ap_log_server_ip'] ?? null;
        $this->container['ap_log_server_port'] = $data['ap_log_server_port'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 35)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getImageDownloadAllowableValues();
        if (!is_null($this->container['image_download']) && !in_array($this->container['image_download'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'image_download', must be one of '%s'",
                $this->container['image_download'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_retransmit']) && ($this->container['max_retransmit'] > 64)) {
            $invalidProperties[] = "invalid value for 'max_retransmit', must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['max_retransmit']) && ($this->container['max_retransmit'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_retransmit', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getControlMessageOffloadAllowableValues();
        if (!is_null($this->container['control_message_offload']) && !in_array($this->container['control_message_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'control_message_offload', must be one of '%s'",
                $this->container['control_message_offload'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataEthernetIiAllowableValues();
        if (!is_null($this->container['data_ethernet_ii']) && !in_array($this->container['data_ethernet_ii'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'data_ethernet_ii', must be one of '%s'",
                $this->container['data_ethernet_ii'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkAggregationAllowableValues();
        if (!is_null($this->container['link_aggregation']) && !in_array($this->container['link_aggregation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_aggregation', must be one of '%s'",
                $this->container['link_aggregation'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mesh_eth_type']) && ($this->container['mesh_eth_type'] > 65535)) {
            $invalidProperties[] = "invalid value for 'mesh_eth_type', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['mesh_eth_type']) && ($this->container['mesh_eth_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'mesh_eth_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fiapp_eth_type']) && ($this->container['fiapp_eth_type'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fiapp_eth_type', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fiapp_eth_type']) && ($this->container['fiapp_eth_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'fiapp_eth_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rogue_scan_mac_adjacency']) && ($this->container['rogue_scan_mac_adjacency'] > 31)) {
            $invalidProperties[] = "invalid value for 'rogue_scan_mac_adjacency', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['rogue_scan_mac_adjacency']) && ($this->container['rogue_scan_mac_adjacency'] < 0)) {
            $invalidProperties[] = "invalid value for 'rogue_scan_mac_adjacency', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWtpShareAllowableValues();
        if (!is_null($this->container['wtp_share']) && !in_array($this->container['wtp_share'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wtp_share', must be one of '%s'",
                $this->container['wtp_share'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApLogServerAllowableValues();
        if (!is_null($this->container['ap_log_server']) && !in_array($this->container['ap_log_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_log_server', must be one of '%s'",
                $this->container['ap_log_server'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ap_log_server_port']) && ($this->container['ap_log_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ap_log_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ap_log_server_port']) && ($this->container['ap_log_server_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'ap_log_server_port', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the wireless controller.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject593., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Description of the location of the wireless controller.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (mb_strlen($location) > 35)) {
            throw new \InvalidArgumentException('invalid length for $location when calling InlineObject593., must be smaller than or equal to 35.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets image_download
     *
     * @return string|null
     */
    public function getImageDownload()
    {
        return $this->container['image_download'];
    }

    /**
     * Sets image_download
     *
     * @param string|null $image_download Enable/disable WTP image download at join time.    enable:Enable WTP image download at join time.    disable:Disable WTP image download at join time.
     *
     * @return self
     */
    public function setImageDownload($image_download)
    {
        $allowedValues = $this->getImageDownloadAllowableValues();
        if (!is_null($image_download) && !in_array($image_download, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'image_download', must be one of '%s'",
                    $image_download,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_download'] = $image_download;

        return $this;
    }

    /**
     * Gets max_retransmit
     *
     * @return int|null
     */
    public function getMaxRetransmit()
    {
        return $this->container['max_retransmit'];
    }

    /**
     * Sets max_retransmit
     *
     * @param int|null $max_retransmit Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
     *
     * @return self
     */
    public function setMaxRetransmit($max_retransmit)
    {

        if (!is_null($max_retransmit) && ($max_retransmit > 64)) {
            throw new \InvalidArgumentException('invalid value for $max_retransmit when calling InlineObject593., must be smaller than or equal to 64.');
        }
        if (!is_null($max_retransmit) && ($max_retransmit < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_retransmit when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['max_retransmit'] = $max_retransmit;

        return $this;
    }

    /**
     * Gets control_message_offload
     *
     * @return string|null
     */
    public function getControlMessageOffload()
    {
        return $this->container['control_message_offload'];
    }

    /**
     * Sets control_message_offload
     *
     * @param string|null $control_message_offload Configure CAPWAP control message data channel offload.    ebp-frame:Ekahau blink protocol (EBP) frames.    aeroscout-tag:AeroScout tag.    ap-list:Rogue AP list.    sta-list:Rogue STA list.    sta-cap-list:STA capability list.    stats:WTP, radio, VAP, and STA statistics.    aeroscout-mu:AeroScout Mobile Unit (MU) report.    sta-health:STA health log.    spectral-analysis:Spectral analysis report.
     *
     * @return self
     */
    public function setControlMessageOffload($control_message_offload)
    {
        $allowedValues = $this->getControlMessageOffloadAllowableValues();
        if (!is_null($control_message_offload) && !in_array($control_message_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'control_message_offload', must be one of '%s'",
                    $control_message_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['control_message_offload'] = $control_message_offload;

        return $this;
    }

    /**
     * Gets data_ethernet_ii
     *
     * @return string|null
     */
    public function getDataEthernetIi()
    {
        return $this->container['data_ethernet_ii'];
    }

    /**
     * Sets data_ethernet_ii
     *
     * @param string|null $data_ethernet_ii Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = enable).    enable:Use Ethernet II frames with 802.3 data tunnel mode.    disable:Use 802.3 Ethernet frames with 802.3 data tunnel mode.
     *
     * @return self
     */
    public function setDataEthernetIi($data_ethernet_ii)
    {
        $allowedValues = $this->getDataEthernetIiAllowableValues();
        if (!is_null($data_ethernet_ii) && !in_array($data_ethernet_ii, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'data_ethernet_ii', must be one of '%s'",
                    $data_ethernet_ii,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_ethernet_ii'] = $data_ethernet_ii;

        return $this;
    }

    /**
     * Gets link_aggregation
     *
     * @return string|null
     */
    public function getLinkAggregation()
    {
        return $this->container['link_aggregation'];
    }

    /**
     * Sets link_aggregation
     *
     * @param string|null $link_aggregation Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable).    enable:Enable calculating the CAPWAP transmit hash.    disable:Disable calculating the CAPWAP transmit hash.
     *
     * @return self
     */
    public function setLinkAggregation($link_aggregation)
    {
        $allowedValues = $this->getLinkAggregationAllowableValues();
        if (!is_null($link_aggregation) && !in_array($link_aggregation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_aggregation', must be one of '%s'",
                    $link_aggregation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_aggregation'] = $link_aggregation;

        return $this;
    }

    /**
     * Gets mesh_eth_type
     *
     * @return int|null
     */
    public function getMeshEthType()
    {
        return $this->container['mesh_eth_type'];
    }

    /**
     * Sets mesh_eth_type
     *
     * @param int|null $mesh_eth_type Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
     *
     * @return self
     */
    public function setMeshEthType($mesh_eth_type)
    {

        if (!is_null($mesh_eth_type) && ($mesh_eth_type > 65535)) {
            throw new \InvalidArgumentException('invalid value for $mesh_eth_type when calling InlineObject593., must be smaller than or equal to 65535.');
        }
        if (!is_null($mesh_eth_type) && ($mesh_eth_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $mesh_eth_type when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['mesh_eth_type'] = $mesh_eth_type;

        return $this;
    }

    /**
     * Gets fiapp_eth_type
     *
     * @return int|null
     */
    public function getFiappEthType()
    {
        return $this->container['fiapp_eth_type'];
    }

    /**
     * Sets fiapp_eth_type
     *
     * @param int|null $fiapp_eth_type Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
     *
     * @return self
     */
    public function setFiappEthType($fiapp_eth_type)
    {

        if (!is_null($fiapp_eth_type) && ($fiapp_eth_type > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fiapp_eth_type when calling InlineObject593., must be smaller than or equal to 65535.');
        }
        if (!is_null($fiapp_eth_type) && ($fiapp_eth_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $fiapp_eth_type when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['fiapp_eth_type'] = $fiapp_eth_type;

        return $this;
    }

    /**
     * Gets discovery_mc_addr
     *
     * @return string|null
     */
    public function getDiscoveryMcAddr()
    {
        return $this->container['discovery_mc_addr'];
    }

    /**
     * Sets discovery_mc_addr
     *
     * @param string|null $discovery_mc_addr Multicast IP address for AP discovery (default = 244.0.1.140).
     *
     * @return self
     */
    public function setDiscoveryMcAddr($discovery_mc_addr)
    {
        $this->container['discovery_mc_addr'] = $discovery_mc_addr;

        return $this;
    }

    /**
     * Gets max_clients
     *
     * @return int|null
     */
    public function getMaxClients()
    {
        return $this->container['max_clients'];
    }

    /**
     * Sets max_clients
     *
     * @param int|null $max_clients Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
     *
     * @return self
     */
    public function setMaxClients($max_clients)
    {

        if (!is_null($max_clients) && ($max_clients > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject593., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_clients) && ($max_clients < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['max_clients'] = $max_clients;

        return $this;
    }

    /**
     * Gets rogue_scan_mac_adjacency
     *
     * @return int|null
     */
    public function getRogueScanMacAdjacency()
    {
        return $this->container['rogue_scan_mac_adjacency'];
    }

    /**
     * Sets rogue_scan_mac_adjacency
     *
     * @param int|null $rogue_scan_mac_adjacency Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
     *
     * @return self
     */
    public function setRogueScanMacAdjacency($rogue_scan_mac_adjacency)
    {

        if (!is_null($rogue_scan_mac_adjacency) && ($rogue_scan_mac_adjacency > 31)) {
            throw new \InvalidArgumentException('invalid value for $rogue_scan_mac_adjacency when calling InlineObject593., must be smaller than or equal to 31.');
        }
        if (!is_null($rogue_scan_mac_adjacency) && ($rogue_scan_mac_adjacency < 0)) {
            throw new \InvalidArgumentException('invalid value for $rogue_scan_mac_adjacency when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['rogue_scan_mac_adjacency'] = $rogue_scan_mac_adjacency;

        return $this;
    }

    /**
     * Gets ipsec_base_ip
     *
     * @return string|null
     */
    public function getIpsecBaseIp()
    {
        return $this->container['ipsec_base_ip'];
    }

    /**
     * Sets ipsec_base_ip
     *
     * @param string|null $ipsec_base_ip Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
     *
     * @return self
     */
    public function setIpsecBaseIp($ipsec_base_ip)
    {
        $this->container['ipsec_base_ip'] = $ipsec_base_ip;

        return $this;
    }

    /**
     * Gets wtp_share
     *
     * @return string|null
     */
    public function getWtpShare()
    {
        return $this->container['wtp_share'];
    }

    /**
     * Sets wtp_share
     *
     * @param string|null $wtp_share Enable/disable sharing of WTPs between VDOMs.    enable:WTP can be shared between all VDOMs.    disable:WTP can be used only in its own VDOM.
     *
     * @return self
     */
    public function setWtpShare($wtp_share)
    {
        $allowedValues = $this->getWtpShareAllowableValues();
        if (!is_null($wtp_share) && !in_array($wtp_share, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wtp_share', must be one of '%s'",
                    $wtp_share,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wtp_share'] = $wtp_share;

        return $this;
    }

    /**
     * Gets ap_log_server
     *
     * @return string|null
     */
    public function getApLogServer()
    {
        return $this->container['ap_log_server'];
    }

    /**
     * Sets ap_log_server
     *
     * @param string|null $ap_log_server Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable).    enable:Enable AP log server.    disable:Disable AP log server.
     *
     * @return self
     */
    public function setApLogServer($ap_log_server)
    {
        $allowedValues = $this->getApLogServerAllowableValues();
        if (!is_null($ap_log_server) && !in_array($ap_log_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_log_server', must be one of '%s'",
                    $ap_log_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_log_server'] = $ap_log_server;

        return $this;
    }

    /**
     * Gets ap_log_server_ip
     *
     * @return string|null
     */
    public function getApLogServerIp()
    {
        return $this->container['ap_log_server_ip'];
    }

    /**
     * Sets ap_log_server_ip
     *
     * @param string|null $ap_log_server_ip IP address that APs or FortiAPs send log messages to.
     *
     * @return self
     */
    public function setApLogServerIp($ap_log_server_ip)
    {
        $this->container['ap_log_server_ip'] = $ap_log_server_ip;

        return $this;
    }

    /**
     * Gets ap_log_server_port
     *
     * @return int|null
     */
    public function getApLogServerPort()
    {
        return $this->container['ap_log_server_port'];
    }

    /**
     * Sets ap_log_server_port
     *
     * @param int|null $ap_log_server_port Port that APs or FortiAPs send log messages to.
     *
     * @return self
     */
    public function setApLogServerPort($ap_log_server_port)
    {

        if (!is_null($ap_log_server_port) && ($ap_log_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ap_log_server_port when calling InlineObject593., must be smaller than or equal to 65535.');
        }
        if (!is_null($ap_log_server_port) && ($ap_log_server_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $ap_log_server_port when calling InlineObject593., must be bigger than or equal to 0.');
        }

        $this->container['ap_log_server_port'] = $ap_log_server_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


