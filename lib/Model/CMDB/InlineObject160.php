<?php
/**
 * InlineObject160
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject160 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject160 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_160';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_type' => 'string',
        'adv_passive_only' => 'string',
        'adv_passive_only6' => 'string',
        'auth_mode_l1' => 'string',
        'auth_mode_l2' => 'string',
        'auth_password_l1' => 'string',
        'auth_password_l2' => 'string',
        'auth_keychain_l1' => 'string',
        'auth_keychain_l2' => 'string',
        'auth_sendonly_l1' => 'string',
        'auth_sendonly_l2' => 'string',
        'ignore_lsp_errors' => 'string',
        'lsp_gen_interval_l1' => 'int',
        'lsp_gen_interval_l2' => 'int',
        'lsp_refresh_interval' => 'int',
        'max_lsp_lifetime' => 'int',
        'spf_interval_exp_l1' => 'string',
        'spf_interval_exp_l2' => 'string',
        'dynamic_hostname' => 'string',
        'adjacency_check' => 'string',
        'adjacency_check6' => 'string',
        'overload_bit' => 'string',
        'overload_bit_suppress' => 'string',
        'overload_bit_on_startup' => 'int',
        'default_originate' => 'string',
        'default_originate6' => 'string',
        'metric_style' => 'string',
        'redistribute_l1' => 'string',
        'redistribute_l1_list' => 'string',
        'redistribute_l2' => 'string',
        'redistribute_l2_list' => 'string',
        'redistribute6_l1' => 'string',
        'redistribute6_l1_list' => 'string',
        'redistribute6_l2' => 'string',
        'redistribute6_l2_list' => 'string',
        'isis_net' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisIsisNet[]',
        'isis_interface' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisIsisInterface[]',
        'summary_address' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress[]',
        'summary_address6' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress6[]',
        'redistribute' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute[]',
        'redistribute6' => '\Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute6[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_type' => null,
        'adv_passive_only' => null,
        'adv_passive_only6' => null,
        'auth_mode_l1' => null,
        'auth_mode_l2' => null,
        'auth_password_l1' => 'password',
        'auth_password_l2' => 'password',
        'auth_keychain_l1' => null,
        'auth_keychain_l2' => null,
        'auth_sendonly_l1' => null,
        'auth_sendonly_l2' => null,
        'ignore_lsp_errors' => null,
        'lsp_gen_interval_l1' => null,
        'lsp_gen_interval_l2' => null,
        'lsp_refresh_interval' => null,
        'max_lsp_lifetime' => null,
        'spf_interval_exp_l1' => null,
        'spf_interval_exp_l2' => null,
        'dynamic_hostname' => null,
        'adjacency_check' => null,
        'adjacency_check6' => null,
        'overload_bit' => null,
        'overload_bit_suppress' => null,
        'overload_bit_on_startup' => null,
        'default_originate' => null,
        'default_originate6' => null,
        'metric_style' => null,
        'redistribute_l1' => null,
        'redistribute_l1_list' => null,
        'redistribute_l2' => null,
        'redistribute_l2_list' => null,
        'redistribute6_l1' => null,
        'redistribute6_l1_list' => null,
        'redistribute6_l2' => null,
        'redistribute6_l2_list' => null,
        'isis_net' => null,
        'isis_interface' => null,
        'summary_address' => null,
        'summary_address6' => null,
        'redistribute' => null,
        'redistribute6' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_type' => 'is-type',
        'adv_passive_only' => 'adv-passive-only',
        'adv_passive_only6' => 'adv-passive-only6',
        'auth_mode_l1' => 'auth-mode-l1',
        'auth_mode_l2' => 'auth-mode-l2',
        'auth_password_l1' => 'auth-password-l1',
        'auth_password_l2' => 'auth-password-l2',
        'auth_keychain_l1' => 'auth-keychain-l1',
        'auth_keychain_l2' => 'auth-keychain-l2',
        'auth_sendonly_l1' => 'auth-sendonly-l1',
        'auth_sendonly_l2' => 'auth-sendonly-l2',
        'ignore_lsp_errors' => 'ignore-lsp-errors',
        'lsp_gen_interval_l1' => 'lsp-gen-interval-l1',
        'lsp_gen_interval_l2' => 'lsp-gen-interval-l2',
        'lsp_refresh_interval' => 'lsp-refresh-interval',
        'max_lsp_lifetime' => 'max-lsp-lifetime',
        'spf_interval_exp_l1' => 'spf-interval-exp-l1',
        'spf_interval_exp_l2' => 'spf-interval-exp-l2',
        'dynamic_hostname' => 'dynamic-hostname',
        'adjacency_check' => 'adjacency-check',
        'adjacency_check6' => 'adjacency-check6',
        'overload_bit' => 'overload-bit',
        'overload_bit_suppress' => 'overload-bit-suppress',
        'overload_bit_on_startup' => 'overload-bit-on-startup',
        'default_originate' => 'default-originate',
        'default_originate6' => 'default-originate6',
        'metric_style' => 'metric-style',
        'redistribute_l1' => 'redistribute-l1',
        'redistribute_l1_list' => 'redistribute-l1-list',
        'redistribute_l2' => 'redistribute-l2',
        'redistribute_l2_list' => 'redistribute-l2-list',
        'redistribute6_l1' => 'redistribute6-l1',
        'redistribute6_l1_list' => 'redistribute6-l1-list',
        'redistribute6_l2' => 'redistribute6-l2',
        'redistribute6_l2_list' => 'redistribute6-l2-list',
        'isis_net' => 'isis-net',
        'isis_interface' => 'isis-interface',
        'summary_address' => 'summary-address',
        'summary_address6' => 'summary-address6',
        'redistribute' => 'redistribute',
        'redistribute6' => 'redistribute6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_type' => 'setIsType',
        'adv_passive_only' => 'setAdvPassiveOnly',
        'adv_passive_only6' => 'setAdvPassiveOnly6',
        'auth_mode_l1' => 'setAuthModeL1',
        'auth_mode_l2' => 'setAuthModeL2',
        'auth_password_l1' => 'setAuthPasswordL1',
        'auth_password_l2' => 'setAuthPasswordL2',
        'auth_keychain_l1' => 'setAuthKeychainL1',
        'auth_keychain_l2' => 'setAuthKeychainL2',
        'auth_sendonly_l1' => 'setAuthSendonlyL1',
        'auth_sendonly_l2' => 'setAuthSendonlyL2',
        'ignore_lsp_errors' => 'setIgnoreLspErrors',
        'lsp_gen_interval_l1' => 'setLspGenIntervalL1',
        'lsp_gen_interval_l2' => 'setLspGenIntervalL2',
        'lsp_refresh_interval' => 'setLspRefreshInterval',
        'max_lsp_lifetime' => 'setMaxLspLifetime',
        'spf_interval_exp_l1' => 'setSpfIntervalExpL1',
        'spf_interval_exp_l2' => 'setSpfIntervalExpL2',
        'dynamic_hostname' => 'setDynamicHostname',
        'adjacency_check' => 'setAdjacencyCheck',
        'adjacency_check6' => 'setAdjacencyCheck6',
        'overload_bit' => 'setOverloadBit',
        'overload_bit_suppress' => 'setOverloadBitSuppress',
        'overload_bit_on_startup' => 'setOverloadBitOnStartup',
        'default_originate' => 'setDefaultOriginate',
        'default_originate6' => 'setDefaultOriginate6',
        'metric_style' => 'setMetricStyle',
        'redistribute_l1' => 'setRedistributeL1',
        'redistribute_l1_list' => 'setRedistributeL1List',
        'redistribute_l2' => 'setRedistributeL2',
        'redistribute_l2_list' => 'setRedistributeL2List',
        'redistribute6_l1' => 'setRedistribute6L1',
        'redistribute6_l1_list' => 'setRedistribute6L1List',
        'redistribute6_l2' => 'setRedistribute6L2',
        'redistribute6_l2_list' => 'setRedistribute6L2List',
        'isis_net' => 'setIsisNet',
        'isis_interface' => 'setIsisInterface',
        'summary_address' => 'setSummaryAddress',
        'summary_address6' => 'setSummaryAddress6',
        'redistribute' => 'setRedistribute',
        'redistribute6' => 'setRedistribute6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_type' => 'getIsType',
        'adv_passive_only' => 'getAdvPassiveOnly',
        'adv_passive_only6' => 'getAdvPassiveOnly6',
        'auth_mode_l1' => 'getAuthModeL1',
        'auth_mode_l2' => 'getAuthModeL2',
        'auth_password_l1' => 'getAuthPasswordL1',
        'auth_password_l2' => 'getAuthPasswordL2',
        'auth_keychain_l1' => 'getAuthKeychainL1',
        'auth_keychain_l2' => 'getAuthKeychainL2',
        'auth_sendonly_l1' => 'getAuthSendonlyL1',
        'auth_sendonly_l2' => 'getAuthSendonlyL2',
        'ignore_lsp_errors' => 'getIgnoreLspErrors',
        'lsp_gen_interval_l1' => 'getLspGenIntervalL1',
        'lsp_gen_interval_l2' => 'getLspGenIntervalL2',
        'lsp_refresh_interval' => 'getLspRefreshInterval',
        'max_lsp_lifetime' => 'getMaxLspLifetime',
        'spf_interval_exp_l1' => 'getSpfIntervalExpL1',
        'spf_interval_exp_l2' => 'getSpfIntervalExpL2',
        'dynamic_hostname' => 'getDynamicHostname',
        'adjacency_check' => 'getAdjacencyCheck',
        'adjacency_check6' => 'getAdjacencyCheck6',
        'overload_bit' => 'getOverloadBit',
        'overload_bit_suppress' => 'getOverloadBitSuppress',
        'overload_bit_on_startup' => 'getOverloadBitOnStartup',
        'default_originate' => 'getDefaultOriginate',
        'default_originate6' => 'getDefaultOriginate6',
        'metric_style' => 'getMetricStyle',
        'redistribute_l1' => 'getRedistributeL1',
        'redistribute_l1_list' => 'getRedistributeL1List',
        'redistribute_l2' => 'getRedistributeL2',
        'redistribute_l2_list' => 'getRedistributeL2List',
        'redistribute6_l1' => 'getRedistribute6L1',
        'redistribute6_l1_list' => 'getRedistribute6L1List',
        'redistribute6_l2' => 'getRedistribute6L2',
        'redistribute6_l2_list' => 'getRedistribute6L2List',
        'isis_net' => 'getIsisNet',
        'isis_interface' => 'getIsisInterface',
        'summary_address' => 'getSummaryAddress',
        'summary_address6' => 'getSummaryAddress6',
        'redistribute' => 'getRedistribute',
        'redistribute6' => 'getRedistribute6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IS_TYPE__1_2 = 'level-1-2';
    const IS_TYPE__1 = 'level-1';
    const IS_TYPE__2_ONLY = 'level-2-only';
    const ADV_PASSIVE_ONLY_ENABLE = 'enable';
    const ADV_PASSIVE_ONLY_DISABLE = 'disable';
    const ADV_PASSIVE_ONLY6_ENABLE = 'enable';
    const ADV_PASSIVE_ONLY6_DISABLE = 'disable';
    const AUTH_MODE_L1_PASSWORD = 'password';
    const AUTH_MODE_L1_MD5 = 'md5';
    const AUTH_MODE_L2_PASSWORD = 'password';
    const AUTH_MODE_L2_MD5 = 'md5';
    const AUTH_SENDONLY_L1_ENABLE = 'enable';
    const AUTH_SENDONLY_L1_DISABLE = 'disable';
    const AUTH_SENDONLY_L2_ENABLE = 'enable';
    const AUTH_SENDONLY_L2_DISABLE = 'disable';
    const IGNORE_LSP_ERRORS_ENABLE = 'enable';
    const IGNORE_LSP_ERRORS_DISABLE = 'disable';
    const DYNAMIC_HOSTNAME_ENABLE = 'enable';
    const DYNAMIC_HOSTNAME_DISABLE = 'disable';
    const ADJACENCY_CHECK_ENABLE = 'enable';
    const ADJACENCY_CHECK_DISABLE = 'disable';
    const ADJACENCY_CHECK6_ENABLE = 'enable';
    const ADJACENCY_CHECK6_DISABLE = 'disable';
    const OVERLOAD_BIT_ENABLE = 'enable';
    const OVERLOAD_BIT_DISABLE = 'disable';
    const OVERLOAD_BIT_SUPPRESS_EXTERNAL = 'external';
    const OVERLOAD_BIT_SUPPRESS_INTERLEVEL = 'interlevel';
    const DEFAULT_ORIGINATE_ENABLE = 'enable';
    const DEFAULT_ORIGINATE_DISABLE = 'disable';
    const DEFAULT_ORIGINATE6_ENABLE = 'enable';
    const DEFAULT_ORIGINATE6_DISABLE = 'disable';
    const METRIC_STYLE_NARROW = 'narrow';
    const METRIC_STYLE_WIDE = 'wide';
    const METRIC_STYLE_TRANSITION = 'transition';
    const METRIC_STYLE_NARROW_TRANSITION = 'narrow-transition';
    const METRIC_STYLE_NARROW_TRANSITION_L1 = 'narrow-transition-l1';
    const METRIC_STYLE_NARROW_TRANSITION_L2 = 'narrow-transition-l2';
    const METRIC_STYLE_WIDE_L1 = 'wide-l1';
    const METRIC_STYLE_WIDE_L2 = 'wide-l2';
    const METRIC_STYLE_WIDE_TRANSITION = 'wide-transition';
    const METRIC_STYLE_WIDE_TRANSITION_L1 = 'wide-transition-l1';
    const METRIC_STYLE_WIDE_TRANSITION_L2 = 'wide-transition-l2';
    const METRIC_STYLE_TRANSITION_L1 = 'transition-l1';
    const METRIC_STYLE_TRANSITION_L2 = 'transition-l2';
    const REDISTRIBUTE_L1_ENABLE = 'enable';
    const REDISTRIBUTE_L1_DISABLE = 'disable';
    const REDISTRIBUTE_L2_ENABLE = 'enable';
    const REDISTRIBUTE_L2_DISABLE = 'disable';
    const REDISTRIBUTE6_L1_ENABLE = 'enable';
    const REDISTRIBUTE6_L1_DISABLE = 'disable';
    const REDISTRIBUTE6_L2_ENABLE = 'enable';
    const REDISTRIBUTE6_L2_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsTypeAllowableValues()
    {
        return [
            self::IS_TYPE__1_2,
            self::IS_TYPE__1,
            self::IS_TYPE__2_ONLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdvPassiveOnlyAllowableValues()
    {
        return [
            self::ADV_PASSIVE_ONLY_ENABLE,
            self::ADV_PASSIVE_ONLY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdvPassiveOnly6AllowableValues()
    {
        return [
            self::ADV_PASSIVE_ONLY6_ENABLE,
            self::ADV_PASSIVE_ONLY6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeL1AllowableValues()
    {
        return [
            self::AUTH_MODE_L1_PASSWORD,
            self::AUTH_MODE_L1_MD5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeL2AllowableValues()
    {
        return [
            self::AUTH_MODE_L2_PASSWORD,
            self::AUTH_MODE_L2_MD5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthSendonlyL1AllowableValues()
    {
        return [
            self::AUTH_SENDONLY_L1_ENABLE,
            self::AUTH_SENDONLY_L1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthSendonlyL2AllowableValues()
    {
        return [
            self::AUTH_SENDONLY_L2_ENABLE,
            self::AUTH_SENDONLY_L2_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoreLspErrorsAllowableValues()
    {
        return [
            self::IGNORE_LSP_ERRORS_ENABLE,
            self::IGNORE_LSP_ERRORS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDynamicHostnameAllowableValues()
    {
        return [
            self::DYNAMIC_HOSTNAME_ENABLE,
            self::DYNAMIC_HOSTNAME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdjacencyCheckAllowableValues()
    {
        return [
            self::ADJACENCY_CHECK_ENABLE,
            self::ADJACENCY_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdjacencyCheck6AllowableValues()
    {
        return [
            self::ADJACENCY_CHECK6_ENABLE,
            self::ADJACENCY_CHECK6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverloadBitAllowableValues()
    {
        return [
            self::OVERLOAD_BIT_ENABLE,
            self::OVERLOAD_BIT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverloadBitSuppressAllowableValues()
    {
        return [
            self::OVERLOAD_BIT_SUPPRESS_EXTERNAL,
            self::OVERLOAD_BIT_SUPPRESS_INTERLEVEL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultOriginateAllowableValues()
    {
        return [
            self::DEFAULT_ORIGINATE_ENABLE,
            self::DEFAULT_ORIGINATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultOriginate6AllowableValues()
    {
        return [
            self::DEFAULT_ORIGINATE6_ENABLE,
            self::DEFAULT_ORIGINATE6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMetricStyleAllowableValues()
    {
        return [
            self::METRIC_STYLE_NARROW,
            self::METRIC_STYLE_WIDE,
            self::METRIC_STYLE_TRANSITION,
            self::METRIC_STYLE_NARROW_TRANSITION,
            self::METRIC_STYLE_NARROW_TRANSITION_L1,
            self::METRIC_STYLE_NARROW_TRANSITION_L2,
            self::METRIC_STYLE_WIDE_L1,
            self::METRIC_STYLE_WIDE_L2,
            self::METRIC_STYLE_WIDE_TRANSITION,
            self::METRIC_STYLE_WIDE_TRANSITION_L1,
            self::METRIC_STYLE_WIDE_TRANSITION_L2,
            self::METRIC_STYLE_TRANSITION_L1,
            self::METRIC_STYLE_TRANSITION_L2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedistributeL1AllowableValues()
    {
        return [
            self::REDISTRIBUTE_L1_ENABLE,
            self::REDISTRIBUTE_L1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedistributeL2AllowableValues()
    {
        return [
            self::REDISTRIBUTE_L2_ENABLE,
            self::REDISTRIBUTE_L2_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedistribute6L1AllowableValues()
    {
        return [
            self::REDISTRIBUTE6_L1_ENABLE,
            self::REDISTRIBUTE6_L1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedistribute6L2AllowableValues()
    {
        return [
            self::REDISTRIBUTE6_L2_ENABLE,
            self::REDISTRIBUTE6_L2_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_type'] = $data['is_type'] ?? null;
        $this->container['adv_passive_only'] = $data['adv_passive_only'] ?? null;
        $this->container['adv_passive_only6'] = $data['adv_passive_only6'] ?? null;
        $this->container['auth_mode_l1'] = $data['auth_mode_l1'] ?? null;
        $this->container['auth_mode_l2'] = $data['auth_mode_l2'] ?? null;
        $this->container['auth_password_l1'] = $data['auth_password_l1'] ?? null;
        $this->container['auth_password_l2'] = $data['auth_password_l2'] ?? null;
        $this->container['auth_keychain_l1'] = $data['auth_keychain_l1'] ?? null;
        $this->container['auth_keychain_l2'] = $data['auth_keychain_l2'] ?? null;
        $this->container['auth_sendonly_l1'] = $data['auth_sendonly_l1'] ?? null;
        $this->container['auth_sendonly_l2'] = $data['auth_sendonly_l2'] ?? null;
        $this->container['ignore_lsp_errors'] = $data['ignore_lsp_errors'] ?? null;
        $this->container['lsp_gen_interval_l1'] = $data['lsp_gen_interval_l1'] ?? null;
        $this->container['lsp_gen_interval_l2'] = $data['lsp_gen_interval_l2'] ?? null;
        $this->container['lsp_refresh_interval'] = $data['lsp_refresh_interval'] ?? null;
        $this->container['max_lsp_lifetime'] = $data['max_lsp_lifetime'] ?? null;
        $this->container['spf_interval_exp_l1'] = $data['spf_interval_exp_l1'] ?? null;
        $this->container['spf_interval_exp_l2'] = $data['spf_interval_exp_l2'] ?? null;
        $this->container['dynamic_hostname'] = $data['dynamic_hostname'] ?? null;
        $this->container['adjacency_check'] = $data['adjacency_check'] ?? null;
        $this->container['adjacency_check6'] = $data['adjacency_check6'] ?? null;
        $this->container['overload_bit'] = $data['overload_bit'] ?? null;
        $this->container['overload_bit_suppress'] = $data['overload_bit_suppress'] ?? null;
        $this->container['overload_bit_on_startup'] = $data['overload_bit_on_startup'] ?? null;
        $this->container['default_originate'] = $data['default_originate'] ?? null;
        $this->container['default_originate6'] = $data['default_originate6'] ?? null;
        $this->container['metric_style'] = $data['metric_style'] ?? null;
        $this->container['redistribute_l1'] = $data['redistribute_l1'] ?? null;
        $this->container['redistribute_l1_list'] = $data['redistribute_l1_list'] ?? null;
        $this->container['redistribute_l2'] = $data['redistribute_l2'] ?? null;
        $this->container['redistribute_l2_list'] = $data['redistribute_l2_list'] ?? null;
        $this->container['redistribute6_l1'] = $data['redistribute6_l1'] ?? null;
        $this->container['redistribute6_l1_list'] = $data['redistribute6_l1_list'] ?? null;
        $this->container['redistribute6_l2'] = $data['redistribute6_l2'] ?? null;
        $this->container['redistribute6_l2_list'] = $data['redistribute6_l2_list'] ?? null;
        $this->container['isis_net'] = $data['isis_net'] ?? null;
        $this->container['isis_interface'] = $data['isis_interface'] ?? null;
        $this->container['summary_address'] = $data['summary_address'] ?? null;
        $this->container['summary_address6'] = $data['summary_address6'] ?? null;
        $this->container['redistribute'] = $data['redistribute'] ?? null;
        $this->container['redistribute6'] = $data['redistribute6'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsTypeAllowableValues();
        if (!is_null($this->container['is_type']) && !in_array($this->container['is_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_type', must be one of '%s'",
                $this->container['is_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdvPassiveOnlyAllowableValues();
        if (!is_null($this->container['adv_passive_only']) && !in_array($this->container['adv_passive_only'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adv_passive_only', must be one of '%s'",
                $this->container['adv_passive_only'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdvPassiveOnly6AllowableValues();
        if (!is_null($this->container['adv_passive_only6']) && !in_array($this->container['adv_passive_only6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adv_passive_only6', must be one of '%s'",
                $this->container['adv_passive_only6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthModeL1AllowableValues();
        if (!is_null($this->container['auth_mode_l1']) && !in_array($this->container['auth_mode_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode_l1', must be one of '%s'",
                $this->container['auth_mode_l1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthModeL2AllowableValues();
        if (!is_null($this->container['auth_mode_l2']) && !in_array($this->container['auth_mode_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode_l2', must be one of '%s'",
                $this->container['auth_mode_l2'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_keychain_l1']) && (mb_strlen($this->container['auth_keychain_l1']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_keychain_l1', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['auth_keychain_l2']) && (mb_strlen($this->container['auth_keychain_l2']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_keychain_l2', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthSendonlyL1AllowableValues();
        if (!is_null($this->container['auth_sendonly_l1']) && !in_array($this->container['auth_sendonly_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_sendonly_l1', must be one of '%s'",
                $this->container['auth_sendonly_l1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthSendonlyL2AllowableValues();
        if (!is_null($this->container['auth_sendonly_l2']) && !in_array($this->container['auth_sendonly_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_sendonly_l2', must be one of '%s'",
                $this->container['auth_sendonly_l2'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgnoreLspErrorsAllowableValues();
        if (!is_null($this->container['ignore_lsp_errors']) && !in_array($this->container['ignore_lsp_errors'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_lsp_errors', must be one of '%s'",
                $this->container['ignore_lsp_errors'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lsp_gen_interval_l1']) && ($this->container['lsp_gen_interval_l1'] > 120)) {
            $invalidProperties[] = "invalid value for 'lsp_gen_interval_l1', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['lsp_gen_interval_l1']) && ($this->container['lsp_gen_interval_l1'] < 1)) {
            $invalidProperties[] = "invalid value for 'lsp_gen_interval_l1', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['lsp_gen_interval_l2']) && ($this->container['lsp_gen_interval_l2'] > 120)) {
            $invalidProperties[] = "invalid value for 'lsp_gen_interval_l2', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['lsp_gen_interval_l2']) && ($this->container['lsp_gen_interval_l2'] < 1)) {
            $invalidProperties[] = "invalid value for 'lsp_gen_interval_l2', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['lsp_refresh_interval']) && ($this->container['lsp_refresh_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'lsp_refresh_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['lsp_refresh_interval']) && ($this->container['lsp_refresh_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'lsp_refresh_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_lsp_lifetime']) && ($this->container['max_lsp_lifetime'] > 65535)) {
            $invalidProperties[] = "invalid value for 'max_lsp_lifetime', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['max_lsp_lifetime']) && ($this->container['max_lsp_lifetime'] < 350)) {
            $invalidProperties[] = "invalid value for 'max_lsp_lifetime', must be bigger than or equal to 350.";
        }

        $allowedValues = $this->getDynamicHostnameAllowableValues();
        if (!is_null($this->container['dynamic_hostname']) && !in_array($this->container['dynamic_hostname'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dynamic_hostname', must be one of '%s'",
                $this->container['dynamic_hostname'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdjacencyCheckAllowableValues();
        if (!is_null($this->container['adjacency_check']) && !in_array($this->container['adjacency_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adjacency_check', must be one of '%s'",
                $this->container['adjacency_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdjacencyCheck6AllowableValues();
        if (!is_null($this->container['adjacency_check6']) && !in_array($this->container['adjacency_check6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adjacency_check6', must be one of '%s'",
                $this->container['adjacency_check6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverloadBitAllowableValues();
        if (!is_null($this->container['overload_bit']) && !in_array($this->container['overload_bit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'overload_bit', must be one of '%s'",
                $this->container['overload_bit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverloadBitSuppressAllowableValues();
        if (!is_null($this->container['overload_bit_suppress']) && !in_array($this->container['overload_bit_suppress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'overload_bit_suppress', must be one of '%s'",
                $this->container['overload_bit_suppress'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['overload_bit_on_startup']) && ($this->container['overload_bit_on_startup'] > 86400)) {
            $invalidProperties[] = "invalid value for 'overload_bit_on_startup', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['overload_bit_on_startup']) && ($this->container['overload_bit_on_startup'] < 5)) {
            $invalidProperties[] = "invalid value for 'overload_bit_on_startup', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getDefaultOriginateAllowableValues();
        if (!is_null($this->container['default_originate']) && !in_array($this->container['default_originate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_originate', must be one of '%s'",
                $this->container['default_originate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultOriginate6AllowableValues();
        if (!is_null($this->container['default_originate6']) && !in_array($this->container['default_originate6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_originate6', must be one of '%s'",
                $this->container['default_originate6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMetricStyleAllowableValues();
        if (!is_null($this->container['metric_style']) && !in_array($this->container['metric_style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'metric_style', must be one of '%s'",
                $this->container['metric_style'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedistributeL1AllowableValues();
        if (!is_null($this->container['redistribute_l1']) && !in_array($this->container['redistribute_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redistribute_l1', must be one of '%s'",
                $this->container['redistribute_l1'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['redistribute_l1_list']) && (mb_strlen($this->container['redistribute_l1_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'redistribute_l1_list', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRedistributeL2AllowableValues();
        if (!is_null($this->container['redistribute_l2']) && !in_array($this->container['redistribute_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redistribute_l2', must be one of '%s'",
                $this->container['redistribute_l2'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['redistribute_l2_list']) && (mb_strlen($this->container['redistribute_l2_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'redistribute_l2_list', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRedistribute6L1AllowableValues();
        if (!is_null($this->container['redistribute6_l1']) && !in_array($this->container['redistribute6_l1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redistribute6_l1', must be one of '%s'",
                $this->container['redistribute6_l1'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['redistribute6_l1_list']) && (mb_strlen($this->container['redistribute6_l1_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'redistribute6_l1_list', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRedistribute6L2AllowableValues();
        if (!is_null($this->container['redistribute6_l2']) && !in_array($this->container['redistribute6_l2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redistribute6_l2', must be one of '%s'",
                $this->container['redistribute6_l2'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['redistribute6_l2_list']) && (mb_strlen($this->container['redistribute6_l2_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'redistribute6_l2_list', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['isis_net']) && (count($this->container['isis_net']) > 0)) {
            $invalidProperties[] = "invalid value for 'isis_net', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['isis_interface']) && (count($this->container['isis_interface']) > 0)) {
            $invalidProperties[] = "invalid value for 'isis_interface', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['summary_address']) && (count($this->container['summary_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'summary_address', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['summary_address6']) && (count($this->container['summary_address6']) > 0)) {
            $invalidProperties[] = "invalid value for 'summary_address6', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute']) && (count($this->container['redistribute']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['redistribute6']) && (count($this->container['redistribute6']) > 0)) {
            $invalidProperties[] = "invalid value for 'redistribute6', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_type
     *
     * @return string|null
     */
    public function getIsType()
    {
        return $this->container['is_type'];
    }

    /**
     * Sets is_type
     *
     * @param string|null $is_type IS type.    level-1-2:Level 1 and 2.    level-1:Level 1 only.    level-2-only:Level 2 only.
     *
     * @return self
     */
    public function setIsType($is_type)
    {
        $allowedValues = $this->getIsTypeAllowableValues();
        if (!is_null($is_type) && !in_array($is_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_type', must be one of '%s'",
                    $is_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_type'] = $is_type;

        return $this;
    }

    /**
     * Gets adv_passive_only
     *
     * @return string|null
     */
    public function getAdvPassiveOnly()
    {
        return $this->container['adv_passive_only'];
    }

    /**
     * Sets adv_passive_only
     *
     * @param string|null $adv_passive_only Enable/disable IS-IS advertisement of passive interfaces only.    enable:Advertise passive interfaces only.    disable:Advertise all IS-IS enabled interfaces.
     *
     * @return self
     */
    public function setAdvPassiveOnly($adv_passive_only)
    {
        $allowedValues = $this->getAdvPassiveOnlyAllowableValues();
        if (!is_null($adv_passive_only) && !in_array($adv_passive_only, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adv_passive_only', must be one of '%s'",
                    $adv_passive_only,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adv_passive_only'] = $adv_passive_only;

        return $this;
    }

    /**
     * Gets adv_passive_only6
     *
     * @return string|null
     */
    public function getAdvPassiveOnly6()
    {
        return $this->container['adv_passive_only6'];
    }

    /**
     * Sets adv_passive_only6
     *
     * @param string|null $adv_passive_only6 Enable/disable IPv6 IS-IS advertisement of passive interfaces only.    enable:Advertise passive interfaces only.    disable:Advertise all IS-IS enabled interfaces.
     *
     * @return self
     */
    public function setAdvPassiveOnly6($adv_passive_only6)
    {
        $allowedValues = $this->getAdvPassiveOnly6AllowableValues();
        if (!is_null($adv_passive_only6) && !in_array($adv_passive_only6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adv_passive_only6', must be one of '%s'",
                    $adv_passive_only6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adv_passive_only6'] = $adv_passive_only6;

        return $this;
    }

    /**
     * Gets auth_mode_l1
     *
     * @return string|null
     */
    public function getAuthModeL1()
    {
        return $this->container['auth_mode_l1'];
    }

    /**
     * Sets auth_mode_l1
     *
     * @param string|null $auth_mode_l1 Level 1 authentication mode.    password:Password.    md5:MD5.
     *
     * @return self
     */
    public function setAuthModeL1($auth_mode_l1)
    {
        $allowedValues = $this->getAuthModeL1AllowableValues();
        if (!is_null($auth_mode_l1) && !in_array($auth_mode_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode_l1', must be one of '%s'",
                    $auth_mode_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode_l1'] = $auth_mode_l1;

        return $this;
    }

    /**
     * Gets auth_mode_l2
     *
     * @return string|null
     */
    public function getAuthModeL2()
    {
        return $this->container['auth_mode_l2'];
    }

    /**
     * Sets auth_mode_l2
     *
     * @param string|null $auth_mode_l2 Level 2 authentication mode.    password:Password.    md5:MD5.
     *
     * @return self
     */
    public function setAuthModeL2($auth_mode_l2)
    {
        $allowedValues = $this->getAuthModeL2AllowableValues();
        if (!is_null($auth_mode_l2) && !in_array($auth_mode_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode_l2', must be one of '%s'",
                    $auth_mode_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode_l2'] = $auth_mode_l2;

        return $this;
    }

    /**
     * Gets auth_password_l1
     *
     * @return string|null
     */
    public function getAuthPasswordL1()
    {
        return $this->container['auth_password_l1'];
    }

    /**
     * Sets auth_password_l1
     *
     * @param string|null $auth_password_l1 Authentication password for level 1 PDUs.
     *
     * @return self
     */
    public function setAuthPasswordL1($auth_password_l1)
    {
        $this->container['auth_password_l1'] = $auth_password_l1;

        return $this;
    }

    /**
     * Gets auth_password_l2
     *
     * @return string|null
     */
    public function getAuthPasswordL2()
    {
        return $this->container['auth_password_l2'];
    }

    /**
     * Sets auth_password_l2
     *
     * @param string|null $auth_password_l2 Authentication password for level 2 PDUs.
     *
     * @return self
     */
    public function setAuthPasswordL2($auth_password_l2)
    {
        $this->container['auth_password_l2'] = $auth_password_l2;

        return $this;
    }

    /**
     * Gets auth_keychain_l1
     *
     * @return string|null
     */
    public function getAuthKeychainL1()
    {
        return $this->container['auth_keychain_l1'];
    }

    /**
     * Sets auth_keychain_l1
     *
     * @param string|null $auth_keychain_l1 Authentication key-chain for level 1 PDUs.
     *
     * @return self
     */
    public function setAuthKeychainL1($auth_keychain_l1)
    {
        if (!is_null($auth_keychain_l1) && (mb_strlen($auth_keychain_l1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_keychain_l1 when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['auth_keychain_l1'] = $auth_keychain_l1;

        return $this;
    }

    /**
     * Gets auth_keychain_l2
     *
     * @return string|null
     */
    public function getAuthKeychainL2()
    {
        return $this->container['auth_keychain_l2'];
    }

    /**
     * Sets auth_keychain_l2
     *
     * @param string|null $auth_keychain_l2 Authentication key-chain for level 2 PDUs.
     *
     * @return self
     */
    public function setAuthKeychainL2($auth_keychain_l2)
    {
        if (!is_null($auth_keychain_l2) && (mb_strlen($auth_keychain_l2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_keychain_l2 when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['auth_keychain_l2'] = $auth_keychain_l2;

        return $this;
    }

    /**
     * Gets auth_sendonly_l1
     *
     * @return string|null
     */
    public function getAuthSendonlyL1()
    {
        return $this->container['auth_sendonly_l1'];
    }

    /**
     * Sets auth_sendonly_l1
     *
     * @param string|null $auth_sendonly_l1 Enable/disable level 1 authentication send-only.    enable:Enable level 1 authentication send-only.    disable:Disable level 1 authentication send-only.
     *
     * @return self
     */
    public function setAuthSendonlyL1($auth_sendonly_l1)
    {
        $allowedValues = $this->getAuthSendonlyL1AllowableValues();
        if (!is_null($auth_sendonly_l1) && !in_array($auth_sendonly_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_sendonly_l1', must be one of '%s'",
                    $auth_sendonly_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_sendonly_l1'] = $auth_sendonly_l1;

        return $this;
    }

    /**
     * Gets auth_sendonly_l2
     *
     * @return string|null
     */
    public function getAuthSendonlyL2()
    {
        return $this->container['auth_sendonly_l2'];
    }

    /**
     * Sets auth_sendonly_l2
     *
     * @param string|null $auth_sendonly_l2 Enable/disable level 2 authentication send-only.    enable:Enable level 2 authentication send-only.    disable:Disable level 2 authentication send-only.
     *
     * @return self
     */
    public function setAuthSendonlyL2($auth_sendonly_l2)
    {
        $allowedValues = $this->getAuthSendonlyL2AllowableValues();
        if (!is_null($auth_sendonly_l2) && !in_array($auth_sendonly_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_sendonly_l2', must be one of '%s'",
                    $auth_sendonly_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_sendonly_l2'] = $auth_sendonly_l2;

        return $this;
    }

    /**
     * Gets ignore_lsp_errors
     *
     * @return string|null
     */
    public function getIgnoreLspErrors()
    {
        return $this->container['ignore_lsp_errors'];
    }

    /**
     * Sets ignore_lsp_errors
     *
     * @param string|null $ignore_lsp_errors Enable/disable ignoring of LSP errors with bad checksums.    enable:Enable ignoring of LSP errors with bad checksums.    disable:Disable ignoring of LSP errors with bad checksums.
     *
     * @return self
     */
    public function setIgnoreLspErrors($ignore_lsp_errors)
    {
        $allowedValues = $this->getIgnoreLspErrorsAllowableValues();
        if (!is_null($ignore_lsp_errors) && !in_array($ignore_lsp_errors, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_lsp_errors', must be one of '%s'",
                    $ignore_lsp_errors,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_lsp_errors'] = $ignore_lsp_errors;

        return $this;
    }

    /**
     * Gets lsp_gen_interval_l1
     *
     * @return int|null
     */
    public function getLspGenIntervalL1()
    {
        return $this->container['lsp_gen_interval_l1'];
    }

    /**
     * Sets lsp_gen_interval_l1
     *
     * @param int|null $lsp_gen_interval_l1 Minimum interval for level 1 LSP regenerating.
     *
     * @return self
     */
    public function setLspGenIntervalL1($lsp_gen_interval_l1)
    {

        if (!is_null($lsp_gen_interval_l1) && ($lsp_gen_interval_l1 > 120)) {
            throw new \InvalidArgumentException('invalid value for $lsp_gen_interval_l1 when calling InlineObject160., must be smaller than or equal to 120.');
        }
        if (!is_null($lsp_gen_interval_l1) && ($lsp_gen_interval_l1 < 1)) {
            throw new \InvalidArgumentException('invalid value for $lsp_gen_interval_l1 when calling InlineObject160., must be bigger than or equal to 1.');
        }

        $this->container['lsp_gen_interval_l1'] = $lsp_gen_interval_l1;

        return $this;
    }

    /**
     * Gets lsp_gen_interval_l2
     *
     * @return int|null
     */
    public function getLspGenIntervalL2()
    {
        return $this->container['lsp_gen_interval_l2'];
    }

    /**
     * Sets lsp_gen_interval_l2
     *
     * @param int|null $lsp_gen_interval_l2 Minimum interval for level 2 LSP regenerating.
     *
     * @return self
     */
    public function setLspGenIntervalL2($lsp_gen_interval_l2)
    {

        if (!is_null($lsp_gen_interval_l2) && ($lsp_gen_interval_l2 > 120)) {
            throw new \InvalidArgumentException('invalid value for $lsp_gen_interval_l2 when calling InlineObject160., must be smaller than or equal to 120.');
        }
        if (!is_null($lsp_gen_interval_l2) && ($lsp_gen_interval_l2 < 1)) {
            throw new \InvalidArgumentException('invalid value for $lsp_gen_interval_l2 when calling InlineObject160., must be bigger than or equal to 1.');
        }

        $this->container['lsp_gen_interval_l2'] = $lsp_gen_interval_l2;

        return $this;
    }

    /**
     * Gets lsp_refresh_interval
     *
     * @return int|null
     */
    public function getLspRefreshInterval()
    {
        return $this->container['lsp_refresh_interval'];
    }

    /**
     * Sets lsp_refresh_interval
     *
     * @param int|null $lsp_refresh_interval LSP refresh time in seconds.
     *
     * @return self
     */
    public function setLspRefreshInterval($lsp_refresh_interval)
    {

        if (!is_null($lsp_refresh_interval) && ($lsp_refresh_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $lsp_refresh_interval when calling InlineObject160., must be smaller than or equal to 65535.');
        }
        if (!is_null($lsp_refresh_interval) && ($lsp_refresh_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $lsp_refresh_interval when calling InlineObject160., must be bigger than or equal to 1.');
        }

        $this->container['lsp_refresh_interval'] = $lsp_refresh_interval;

        return $this;
    }

    /**
     * Gets max_lsp_lifetime
     *
     * @return int|null
     */
    public function getMaxLspLifetime()
    {
        return $this->container['max_lsp_lifetime'];
    }

    /**
     * Sets max_lsp_lifetime
     *
     * @param int|null $max_lsp_lifetime Maximum LSP lifetime in seconds.
     *
     * @return self
     */
    public function setMaxLspLifetime($max_lsp_lifetime)
    {

        if (!is_null($max_lsp_lifetime) && ($max_lsp_lifetime > 65535)) {
            throw new \InvalidArgumentException('invalid value for $max_lsp_lifetime when calling InlineObject160., must be smaller than or equal to 65535.');
        }
        if (!is_null($max_lsp_lifetime) && ($max_lsp_lifetime < 350)) {
            throw new \InvalidArgumentException('invalid value for $max_lsp_lifetime when calling InlineObject160., must be bigger than or equal to 350.');
        }

        $this->container['max_lsp_lifetime'] = $max_lsp_lifetime;

        return $this;
    }

    /**
     * Gets spf_interval_exp_l1
     *
     * @return string|null
     */
    public function getSpfIntervalExpL1()
    {
        return $this->container['spf_interval_exp_l1'];
    }

    /**
     * Sets spf_interval_exp_l1
     *
     * @param string|null $spf_interval_exp_l1 Level 1 SPF calculation delay.
     *
     * @return self
     */
    public function setSpfIntervalExpL1($spf_interval_exp_l1)
    {
        $this->container['spf_interval_exp_l1'] = $spf_interval_exp_l1;

        return $this;
    }

    /**
     * Gets spf_interval_exp_l2
     *
     * @return string|null
     */
    public function getSpfIntervalExpL2()
    {
        return $this->container['spf_interval_exp_l2'];
    }

    /**
     * Sets spf_interval_exp_l2
     *
     * @param string|null $spf_interval_exp_l2 Level 2 SPF calculation delay.
     *
     * @return self
     */
    public function setSpfIntervalExpL2($spf_interval_exp_l2)
    {
        $this->container['spf_interval_exp_l2'] = $spf_interval_exp_l2;

        return $this;
    }

    /**
     * Gets dynamic_hostname
     *
     * @return string|null
     */
    public function getDynamicHostname()
    {
        return $this->container['dynamic_hostname'];
    }

    /**
     * Sets dynamic_hostname
     *
     * @param string|null $dynamic_hostname Enable/disable dynamic hostname.    enable:Enable dynamic hostname.    disable:Disable dynamic hostname.
     *
     * @return self
     */
    public function setDynamicHostname($dynamic_hostname)
    {
        $allowedValues = $this->getDynamicHostnameAllowableValues();
        if (!is_null($dynamic_hostname) && !in_array($dynamic_hostname, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dynamic_hostname', must be one of '%s'",
                    $dynamic_hostname,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dynamic_hostname'] = $dynamic_hostname;

        return $this;
    }

    /**
     * Gets adjacency_check
     *
     * @return string|null
     */
    public function getAdjacencyCheck()
    {
        return $this->container['adjacency_check'];
    }

    /**
     * Sets adjacency_check
     *
     * @param string|null $adjacency_check Enable/disable adjacency check.    enable:Enable adjacency check.    disable:Disable adjacency check.
     *
     * @return self
     */
    public function setAdjacencyCheck($adjacency_check)
    {
        $allowedValues = $this->getAdjacencyCheckAllowableValues();
        if (!is_null($adjacency_check) && !in_array($adjacency_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adjacency_check', must be one of '%s'",
                    $adjacency_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adjacency_check'] = $adjacency_check;

        return $this;
    }

    /**
     * Gets adjacency_check6
     *
     * @return string|null
     */
    public function getAdjacencyCheck6()
    {
        return $this->container['adjacency_check6'];
    }

    /**
     * Sets adjacency_check6
     *
     * @param string|null $adjacency_check6 Enable/disable IPv6 adjacency check.    enable:Enable IPv6 adjacency check.    disable:Disable IPv6 adjacency check.
     *
     * @return self
     */
    public function setAdjacencyCheck6($adjacency_check6)
    {
        $allowedValues = $this->getAdjacencyCheck6AllowableValues();
        if (!is_null($adjacency_check6) && !in_array($adjacency_check6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adjacency_check6', must be one of '%s'",
                    $adjacency_check6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adjacency_check6'] = $adjacency_check6;

        return $this;
    }

    /**
     * Gets overload_bit
     *
     * @return string|null
     */
    public function getOverloadBit()
    {
        return $this->container['overload_bit'];
    }

    /**
     * Sets overload_bit
     *
     * @param string|null $overload_bit Enable/disable signal other routers not to use us in SPF.    enable:Enable overload bit.    disable:Disable overload bit.
     *
     * @return self
     */
    public function setOverloadBit($overload_bit)
    {
        $allowedValues = $this->getOverloadBitAllowableValues();
        if (!is_null($overload_bit) && !in_array($overload_bit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'overload_bit', must be one of '%s'",
                    $overload_bit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overload_bit'] = $overload_bit;

        return $this;
    }

    /**
     * Gets overload_bit_suppress
     *
     * @return string|null
     */
    public function getOverloadBitSuppress()
    {
        return $this->container['overload_bit_suppress'];
    }

    /**
     * Sets overload_bit_suppress
     *
     * @param string|null $overload_bit_suppress Suppress overload-bit for the specific prefixes.    external:External.    interlevel:Inter-level.
     *
     * @return self
     */
    public function setOverloadBitSuppress($overload_bit_suppress)
    {
        $allowedValues = $this->getOverloadBitSuppressAllowableValues();
        if (!is_null($overload_bit_suppress) && !in_array($overload_bit_suppress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'overload_bit_suppress', must be one of '%s'",
                    $overload_bit_suppress,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overload_bit_suppress'] = $overload_bit_suppress;

        return $this;
    }

    /**
     * Gets overload_bit_on_startup
     *
     * @return int|null
     */
    public function getOverloadBitOnStartup()
    {
        return $this->container['overload_bit_on_startup'];
    }

    /**
     * Sets overload_bit_on_startup
     *
     * @param int|null $overload_bit_on_startup Overload-bit only temporarily after reboot.
     *
     * @return self
     */
    public function setOverloadBitOnStartup($overload_bit_on_startup)
    {

        if (!is_null($overload_bit_on_startup) && ($overload_bit_on_startup > 86400)) {
            throw new \InvalidArgumentException('invalid value for $overload_bit_on_startup when calling InlineObject160., must be smaller than or equal to 86400.');
        }
        if (!is_null($overload_bit_on_startup) && ($overload_bit_on_startup < 5)) {
            throw new \InvalidArgumentException('invalid value for $overload_bit_on_startup when calling InlineObject160., must be bigger than or equal to 5.');
        }

        $this->container['overload_bit_on_startup'] = $overload_bit_on_startup;

        return $this;
    }

    /**
     * Gets default_originate
     *
     * @return string|null
     */
    public function getDefaultOriginate()
    {
        return $this->container['default_originate'];
    }

    /**
     * Sets default_originate
     *
     * @param string|null $default_originate Enable/disable distribution of default route information.    enable:Enable distribution of default route information.    disable:Disable distribution of default route information.
     *
     * @return self
     */
    public function setDefaultOriginate($default_originate)
    {
        $allowedValues = $this->getDefaultOriginateAllowableValues();
        if (!is_null($default_originate) && !in_array($default_originate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_originate', must be one of '%s'",
                    $default_originate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_originate'] = $default_originate;

        return $this;
    }

    /**
     * Gets default_originate6
     *
     * @return string|null
     */
    public function getDefaultOriginate6()
    {
        return $this->container['default_originate6'];
    }

    /**
     * Sets default_originate6
     *
     * @param string|null $default_originate6 Enable/disable distribution of default IPv6 route information.    enable:Enable distribution of default IPv6 route information.    disable:Disable distribution of default IPv6 route information.
     *
     * @return self
     */
    public function setDefaultOriginate6($default_originate6)
    {
        $allowedValues = $this->getDefaultOriginate6AllowableValues();
        if (!is_null($default_originate6) && !in_array($default_originate6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_originate6', must be one of '%s'",
                    $default_originate6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_originate6'] = $default_originate6;

        return $this;
    }

    /**
     * Gets metric_style
     *
     * @return string|null
     */
    public function getMetricStyle()
    {
        return $this->container['metric_style'];
    }

    /**
     * Sets metric_style
     *
     * @param string|null $metric_style Use old-style (ISO 10589) or new-style packet formats    narrow:Use old style of TLVs with narrow metric.    wide:Use new style of TLVs to carry wider metric.    transition:Send and accept both styles of TLVs during transition.    narrow-transition:Narrow and accept both styles of TLVs during transition.    narrow-transition-l1:Narrow-transition level-1 only.    narrow-transition-l2:Narrow-transition level-2 only.    wide-l1:Wide level-1 only.    wide-l2:Wide level-2 only.    wide-transition:Wide and accept both styles of TLVs during transition.    wide-transition-l1:Wide-transition level-1 only.    wide-transition-l2:Wide-transition level-2 only.    transition-l1:Transition level-1 only.    transition-l2:Transition level-2 only.
     *
     * @return self
     */
    public function setMetricStyle($metric_style)
    {
        $allowedValues = $this->getMetricStyleAllowableValues();
        if (!is_null($metric_style) && !in_array($metric_style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'metric_style', must be one of '%s'",
                    $metric_style,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['metric_style'] = $metric_style;

        return $this;
    }

    /**
     * Gets redistribute_l1
     *
     * @return string|null
     */
    public function getRedistributeL1()
    {
        return $this->container['redistribute_l1'];
    }

    /**
     * Sets redistribute_l1
     *
     * @param string|null $redistribute_l1 Enable/disable redistribution of level 1 routes into level 2.    enable:Enable redistribution of level 1 routes into level 2.    disable:Disable redistribution of level 1 routes into level 2.
     *
     * @return self
     */
    public function setRedistributeL1($redistribute_l1)
    {
        $allowedValues = $this->getRedistributeL1AllowableValues();
        if (!is_null($redistribute_l1) && !in_array($redistribute_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redistribute_l1', must be one of '%s'",
                    $redistribute_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redistribute_l1'] = $redistribute_l1;

        return $this;
    }

    /**
     * Gets redistribute_l1_list
     *
     * @return string|null
     */
    public function getRedistributeL1List()
    {
        return $this->container['redistribute_l1_list'];
    }

    /**
     * Sets redistribute_l1_list
     *
     * @param string|null $redistribute_l1_list Access-list for route redistribution from l1 to l2.
     *
     * @return self
     */
    public function setRedistributeL1List($redistribute_l1_list)
    {
        if (!is_null($redistribute_l1_list) && (mb_strlen($redistribute_l1_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $redistribute_l1_list when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['redistribute_l1_list'] = $redistribute_l1_list;

        return $this;
    }

    /**
     * Gets redistribute_l2
     *
     * @return string|null
     */
    public function getRedistributeL2()
    {
        return $this->container['redistribute_l2'];
    }

    /**
     * Sets redistribute_l2
     *
     * @param string|null $redistribute_l2 Enable/disable redistribution of level 2 routes into level 1.    enable:Enable redistribution of level 2 routes into level 1.    disable:Disable redistribution of  level 2 routes into level 1.
     *
     * @return self
     */
    public function setRedistributeL2($redistribute_l2)
    {
        $allowedValues = $this->getRedistributeL2AllowableValues();
        if (!is_null($redistribute_l2) && !in_array($redistribute_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redistribute_l2', must be one of '%s'",
                    $redistribute_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redistribute_l2'] = $redistribute_l2;

        return $this;
    }

    /**
     * Gets redistribute_l2_list
     *
     * @return string|null
     */
    public function getRedistributeL2List()
    {
        return $this->container['redistribute_l2_list'];
    }

    /**
     * Sets redistribute_l2_list
     *
     * @param string|null $redistribute_l2_list Access-list for route redistribution from l2 to l1.
     *
     * @return self
     */
    public function setRedistributeL2List($redistribute_l2_list)
    {
        if (!is_null($redistribute_l2_list) && (mb_strlen($redistribute_l2_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $redistribute_l2_list when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['redistribute_l2_list'] = $redistribute_l2_list;

        return $this;
    }

    /**
     * Gets redistribute6_l1
     *
     * @return string|null
     */
    public function getRedistribute6L1()
    {
        return $this->container['redistribute6_l1'];
    }

    /**
     * Sets redistribute6_l1
     *
     * @param string|null $redistribute6_l1 Enable/disable redistribution of level 1 IPv6 routes into level 2.    enable:Enable redistribution of level 1 IPv6 routes into level 2.    disable:Disable redistribution of level 1 IPv6 routes into level 2.
     *
     * @return self
     */
    public function setRedistribute6L1($redistribute6_l1)
    {
        $allowedValues = $this->getRedistribute6L1AllowableValues();
        if (!is_null($redistribute6_l1) && !in_array($redistribute6_l1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redistribute6_l1', must be one of '%s'",
                    $redistribute6_l1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redistribute6_l1'] = $redistribute6_l1;

        return $this;
    }

    /**
     * Gets redistribute6_l1_list
     *
     * @return string|null
     */
    public function getRedistribute6L1List()
    {
        return $this->container['redistribute6_l1_list'];
    }

    /**
     * Sets redistribute6_l1_list
     *
     * @param string|null $redistribute6_l1_list Access-list for IPv6 route redistribution from l1 to l2.
     *
     * @return self
     */
    public function setRedistribute6L1List($redistribute6_l1_list)
    {
        if (!is_null($redistribute6_l1_list) && (mb_strlen($redistribute6_l1_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $redistribute6_l1_list when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['redistribute6_l1_list'] = $redistribute6_l1_list;

        return $this;
    }

    /**
     * Gets redistribute6_l2
     *
     * @return string|null
     */
    public function getRedistribute6L2()
    {
        return $this->container['redistribute6_l2'];
    }

    /**
     * Sets redistribute6_l2
     *
     * @param string|null $redistribute6_l2 Enable/disable redistribution of level 2 IPv6 routes into level 1.    enable:Enable redistribution of level 2 IPv6 routes into level 1.    disable:Disable redistribution of level 2 IPv6 routes into level 1.
     *
     * @return self
     */
    public function setRedistribute6L2($redistribute6_l2)
    {
        $allowedValues = $this->getRedistribute6L2AllowableValues();
        if (!is_null($redistribute6_l2) && !in_array($redistribute6_l2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redistribute6_l2', must be one of '%s'",
                    $redistribute6_l2,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redistribute6_l2'] = $redistribute6_l2;

        return $this;
    }

    /**
     * Gets redistribute6_l2_list
     *
     * @return string|null
     */
    public function getRedistribute6L2List()
    {
        return $this->container['redistribute6_l2_list'];
    }

    /**
     * Sets redistribute6_l2_list
     *
     * @param string|null $redistribute6_l2_list Access-list for IPv6 route redistribution from l2 to l1.
     *
     * @return self
     */
    public function setRedistribute6L2List($redistribute6_l2_list)
    {
        if (!is_null($redistribute6_l2_list) && (mb_strlen($redistribute6_l2_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $redistribute6_l2_list when calling InlineObject160., must be smaller than or equal to 35.');
        }

        $this->container['redistribute6_l2_list'] = $redistribute6_l2_list;

        return $this;
    }

    /**
     * Gets isis_net
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisIsisNet[]|null
     */
    public function getIsisNet()
    {
        return $this->container['isis_net'];
    }

    /**
     * Sets isis_net
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisIsisNet[]|null $isis_net IS-IS net configuration.
     *
     * @return self
     */
    public function setIsisNet($isis_net)
    {

        if (!is_null($isis_net) && (count($isis_net) > 0)) {
            throw new \InvalidArgumentException('invalid value for $isis_net when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['isis_net'] = $isis_net;

        return $this;
    }

    /**
     * Gets isis_interface
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisIsisInterface[]|null
     */
    public function getIsisInterface()
    {
        return $this->container['isis_interface'];
    }

    /**
     * Sets isis_interface
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisIsisInterface[]|null $isis_interface IS-IS interface configuration.
     *
     * @return self
     */
    public function setIsisInterface($isis_interface)
    {

        if (!is_null($isis_interface) && (count($isis_interface) > 0)) {
            throw new \InvalidArgumentException('invalid value for $isis_interface when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['isis_interface'] = $isis_interface;

        return $this;
    }

    /**
     * Gets summary_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress[]|null
     */
    public function getSummaryAddress()
    {
        return $this->container['summary_address'];
    }

    /**
     * Sets summary_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress[]|null $summary_address IS-IS summary addresses.
     *
     * @return self
     */
    public function setSummaryAddress($summary_address)
    {

        if (!is_null($summary_address) && (count($summary_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $summary_address when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['summary_address'] = $summary_address;

        return $this;
    }

    /**
     * Gets summary_address6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress6[]|null
     */
    public function getSummaryAddress6()
    {
        return $this->container['summary_address6'];
    }

    /**
     * Sets summary_address6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisSummaryAddress6[]|null $summary_address6 IS-IS IPv6 summary address.
     *
     * @return self
     */
    public function setSummaryAddress6($summary_address6)
    {

        if (!is_null($summary_address6) && (count($summary_address6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $summary_address6 when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['summary_address6'] = $summary_address6;

        return $this;
    }

    /**
     * Gets redistribute
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute[]|null
     */
    public function getRedistribute()
    {
        return $this->container['redistribute'];
    }

    /**
     * Sets redistribute
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute[]|null $redistribute IS-IS redistribute protocols.
     *
     * @return self
     */
    public function setRedistribute($redistribute)
    {

        if (!is_null($redistribute) && (count($redistribute) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute'] = $redistribute;

        return $this;
    }

    /**
     * Gets redistribute6
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute6[]|null
     */
    public function getRedistribute6()
    {
        return $this->container['redistribute6'];
    }

    /**
     * Sets redistribute6
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterIsisRedistribute6[]|null $redistribute6 IS-IS IPv6 redistribution for routing protocols.
     *
     * @return self
     */
    public function setRedistribute6($redistribute6)
    {

        if (!is_null($redistribute6) && (count($redistribute6) > 0)) {
            throw new \InvalidArgumentException('invalid value for $redistribute6 when calling InlineObject160., number of items must be less than or equal to 0.');
        }
        $this->container['redistribute6'] = $redistribute6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


