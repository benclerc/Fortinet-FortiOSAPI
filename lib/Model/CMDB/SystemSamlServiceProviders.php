<?php
/**
 * SystemSamlServiceProviders
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSamlServiceProviders Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSamlServiceProviders implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_saml_service_providers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'prefix' => 'string',
        'sp_cert' => 'string',
        'sp_entity_id' => 'string',
        'sp_single_sign_on_url' => 'string',
        'sp_single_logout_url' => 'string',
        'sp_portal_url' => 'string',
        'idp_entity_id' => 'string',
        'idp_single_sign_on_url' => 'string',
        'idp_single_logout_url' => 'string',
        'assertion_attributes' => '\Fortigate\FortiOS\Model\CMDB\SystemSamlAssertionAttributes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'prefix' => null,
        'sp_cert' => null,
        'sp_entity_id' => null,
        'sp_single_sign_on_url' => null,
        'sp_single_logout_url' => null,
        'sp_portal_url' => null,
        'idp_entity_id' => null,
        'idp_single_sign_on_url' => null,
        'idp_single_logout_url' => null,
        'assertion_attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'prefix' => 'prefix',
        'sp_cert' => 'sp-cert',
        'sp_entity_id' => 'sp-entity-id',
        'sp_single_sign_on_url' => 'sp-single-sign-on-url',
        'sp_single_logout_url' => 'sp-single-logout-url',
        'sp_portal_url' => 'sp-portal-url',
        'idp_entity_id' => 'idp-entity-id',
        'idp_single_sign_on_url' => 'idp-single-sign-on-url',
        'idp_single_logout_url' => 'idp-single-logout-url',
        'assertion_attributes' => 'assertion-attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'prefix' => 'setPrefix',
        'sp_cert' => 'setSpCert',
        'sp_entity_id' => 'setSpEntityId',
        'sp_single_sign_on_url' => 'setSpSingleSignOnUrl',
        'sp_single_logout_url' => 'setSpSingleLogoutUrl',
        'sp_portal_url' => 'setSpPortalUrl',
        'idp_entity_id' => 'setIdpEntityId',
        'idp_single_sign_on_url' => 'setIdpSingleSignOnUrl',
        'idp_single_logout_url' => 'setIdpSingleLogoutUrl',
        'assertion_attributes' => 'setAssertionAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'prefix' => 'getPrefix',
        'sp_cert' => 'getSpCert',
        'sp_entity_id' => 'getSpEntityId',
        'sp_single_sign_on_url' => 'getSpSingleSignOnUrl',
        'sp_single_logout_url' => 'getSpSingleLogoutUrl',
        'sp_portal_url' => 'getSpPortalUrl',
        'idp_entity_id' => 'getIdpEntityId',
        'idp_single_sign_on_url' => 'getIdpSingleSignOnUrl',
        'idp_single_logout_url' => 'getIdpSingleLogoutUrl',
        'assertion_attributes' => 'getAssertionAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['prefix'] = $data['prefix'] ?? null;
        $this->container['sp_cert'] = $data['sp_cert'] ?? null;
        $this->container['sp_entity_id'] = $data['sp_entity_id'] ?? null;
        $this->container['sp_single_sign_on_url'] = $data['sp_single_sign_on_url'] ?? null;
        $this->container['sp_single_logout_url'] = $data['sp_single_logout_url'] ?? null;
        $this->container['sp_portal_url'] = $data['sp_portal_url'] ?? null;
        $this->container['idp_entity_id'] = $data['idp_entity_id'] ?? null;
        $this->container['idp_single_sign_on_url'] = $data['idp_single_sign_on_url'] ?? null;
        $this->container['idp_single_logout_url'] = $data['idp_single_logout_url'] ?? null;
        $this->container['assertion_attributes'] = $data['assertion_attributes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['prefix']) && (mb_strlen($this->container['prefix']) > 35)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sp_cert']) && (mb_strlen($this->container['sp_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'sp_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sp_entity_id']) && (mb_strlen($this->container['sp_entity_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'sp_entity_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sp_single_sign_on_url']) && (mb_strlen($this->container['sp_single_sign_on_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'sp_single_sign_on_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sp_single_logout_url']) && (mb_strlen($this->container['sp_single_logout_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'sp_single_logout_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sp_portal_url']) && (mb_strlen($this->container['sp_portal_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'sp_portal_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_entity_id']) && (mb_strlen($this->container['idp_entity_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_entity_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_single_sign_on_url']) && (mb_strlen($this->container['idp_single_sign_on_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_single_sign_on_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_single_logout_url']) && (mb_strlen($this->container['idp_single_logout_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_single_logout_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['assertion_attributes']) && (count($this->container['assertion_attributes']) > 4)) {
            $invalidProperties[] = "invalid value for 'assertion_attributes', number of items must be less than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SystemSamlServiceProviders., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Prefix.
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (!is_null($prefix) && (mb_strlen($prefix) > 35)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling SystemSamlServiceProviders., must be smaller than or equal to 35.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets sp_cert
     *
     * @return string|null
     */
    public function getSpCert()
    {
        return $this->container['sp_cert'];
    }

    /**
     * Sets sp_cert
     *
     * @param string|null $sp_cert SP certificate name.
     *
     * @return self
     */
    public function setSpCert($sp_cert)
    {
        if (!is_null($sp_cert) && (mb_strlen($sp_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sp_cert when calling SystemSamlServiceProviders., must be smaller than or equal to 35.');
        }

        $this->container['sp_cert'] = $sp_cert;

        return $this;
    }

    /**
     * Gets sp_entity_id
     *
     * @return string|null
     */
    public function getSpEntityId()
    {
        return $this->container['sp_entity_id'];
    }

    /**
     * Sets sp_entity_id
     *
     * @param string|null $sp_entity_id SP entity ID.
     *
     * @return self
     */
    public function setSpEntityId($sp_entity_id)
    {
        if (!is_null($sp_entity_id) && (mb_strlen($sp_entity_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sp_entity_id when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['sp_entity_id'] = $sp_entity_id;

        return $this;
    }

    /**
     * Gets sp_single_sign_on_url
     *
     * @return string|null
     */
    public function getSpSingleSignOnUrl()
    {
        return $this->container['sp_single_sign_on_url'];
    }

    /**
     * Sets sp_single_sign_on_url
     *
     * @param string|null $sp_single_sign_on_url SP single sign-on URL.
     *
     * @return self
     */
    public function setSpSingleSignOnUrl($sp_single_sign_on_url)
    {
        if (!is_null($sp_single_sign_on_url) && (mb_strlen($sp_single_sign_on_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sp_single_sign_on_url when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['sp_single_sign_on_url'] = $sp_single_sign_on_url;

        return $this;
    }

    /**
     * Gets sp_single_logout_url
     *
     * @return string|null
     */
    public function getSpSingleLogoutUrl()
    {
        return $this->container['sp_single_logout_url'];
    }

    /**
     * Sets sp_single_logout_url
     *
     * @param string|null $sp_single_logout_url SP single logout URL.
     *
     * @return self
     */
    public function setSpSingleLogoutUrl($sp_single_logout_url)
    {
        if (!is_null($sp_single_logout_url) && (mb_strlen($sp_single_logout_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sp_single_logout_url when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['sp_single_logout_url'] = $sp_single_logout_url;

        return $this;
    }

    /**
     * Gets sp_portal_url
     *
     * @return string|null
     */
    public function getSpPortalUrl()
    {
        return $this->container['sp_portal_url'];
    }

    /**
     * Sets sp_portal_url
     *
     * @param string|null $sp_portal_url SP portal URL.
     *
     * @return self
     */
    public function setSpPortalUrl($sp_portal_url)
    {
        if (!is_null($sp_portal_url) && (mb_strlen($sp_portal_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sp_portal_url when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['sp_portal_url'] = $sp_portal_url;

        return $this;
    }

    /**
     * Gets idp_entity_id
     *
     * @return string|null
     */
    public function getIdpEntityId()
    {
        return $this->container['idp_entity_id'];
    }

    /**
     * Sets idp_entity_id
     *
     * @param string|null $idp_entity_id IDP entity ID.
     *
     * @return self
     */
    public function setIdpEntityId($idp_entity_id)
    {
        if (!is_null($idp_entity_id) && (mb_strlen($idp_entity_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_entity_id when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['idp_entity_id'] = $idp_entity_id;

        return $this;
    }

    /**
     * Gets idp_single_sign_on_url
     *
     * @return string|null
     */
    public function getIdpSingleSignOnUrl()
    {
        return $this->container['idp_single_sign_on_url'];
    }

    /**
     * Sets idp_single_sign_on_url
     *
     * @param string|null $idp_single_sign_on_url IDP single sign-on URL.
     *
     * @return self
     */
    public function setIdpSingleSignOnUrl($idp_single_sign_on_url)
    {
        if (!is_null($idp_single_sign_on_url) && (mb_strlen($idp_single_sign_on_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_single_sign_on_url when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['idp_single_sign_on_url'] = $idp_single_sign_on_url;

        return $this;
    }

    /**
     * Gets idp_single_logout_url
     *
     * @return string|null
     */
    public function getIdpSingleLogoutUrl()
    {
        return $this->container['idp_single_logout_url'];
    }

    /**
     * Sets idp_single_logout_url
     *
     * @param string|null $idp_single_logout_url IDP single logout URL.
     *
     * @return self
     */
    public function setIdpSingleLogoutUrl($idp_single_logout_url)
    {
        if (!is_null($idp_single_logout_url) && (mb_strlen($idp_single_logout_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_single_logout_url when calling SystemSamlServiceProviders., must be smaller than or equal to 255.');
        }

        $this->container['idp_single_logout_url'] = $idp_single_logout_url;

        return $this;
    }

    /**
     * Gets assertion_attributes
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSamlAssertionAttributes[]|null
     */
    public function getAssertionAttributes()
    {
        return $this->container['assertion_attributes'];
    }

    /**
     * Sets assertion_attributes
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSamlAssertionAttributes[]|null $assertion_attributes Customized SAML attributes to send along with assertion.
     *
     * @return self
     */
    public function setAssertionAttributes($assertion_attributes)
    {

        if (!is_null($assertion_attributes) && (count($assertion_attributes) > 4)) {
            throw new \InvalidArgumentException('invalid value for $assertion_attributes when calling SystemSamlServiceProviders., number of items must be less than or equal to 4.');
        }
        $this->container['assertion_attributes'] = $assertion_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


