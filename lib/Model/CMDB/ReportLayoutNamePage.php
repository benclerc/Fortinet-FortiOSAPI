<?php
/**
 * ReportLayoutNamePage
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportLayoutNamePage Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportLayoutNamePage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_layout__name__page';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paper' => 'string',
        'column_break_before' => 'string',
        'page_break_before' => 'string',
        'options' => 'string',
        'header' => '\Fortigate\FortiOS\Model\CMDB\ReportLayoutNameHeader[]',
        'footer' => '\Fortigate\FortiOS\Model\CMDB\ReportLayoutNameFooter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paper' => null,
        'column_break_before' => null,
        'page_break_before' => null,
        'options' => null,
        'header' => null,
        'footer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paper' => 'paper',
        'column_break_before' => 'column-break-before',
        'page_break_before' => 'page-break-before',
        'options' => 'options',
        'header' => 'header',
        'footer' => 'footer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paper' => 'setPaper',
        'column_break_before' => 'setColumnBreakBefore',
        'page_break_before' => 'setPageBreakBefore',
        'options' => 'setOptions',
        'header' => 'setHeader',
        'footer' => 'setFooter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paper' => 'getPaper',
        'column_break_before' => 'getColumnBreakBefore',
        'page_break_before' => 'getPageBreakBefore',
        'options' => 'getOptions',
        'header' => 'getHeader',
        'footer' => 'getFooter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAPER_A4 = 'a4';
    const PAPER_LETTER = 'letter';
    const COLUMN_BREAK_BEFORE_HEADING1 = 'heading1';
    const COLUMN_BREAK_BEFORE_HEADING2 = 'heading2';
    const COLUMN_BREAK_BEFORE_HEADING3 = 'heading3';
    const PAGE_BREAK_BEFORE_HEADING1 = 'heading1';
    const PAGE_BREAK_BEFORE_HEADING2 = 'heading2';
    const PAGE_BREAK_BEFORE_HEADING3 = 'heading3';
    const OPTIONS_HEADER_ON_FIRST_PAGE = 'header-on-first-page';
    const OPTIONS_FOOTER_ON_FIRST_PAGE = 'footer-on-first-page';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaperAllowableValues()
    {
        return [
            self::PAPER_A4,
            self::PAPER_LETTER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColumnBreakBeforeAllowableValues()
    {
        return [
            self::COLUMN_BREAK_BEFORE_HEADING1,
            self::COLUMN_BREAK_BEFORE_HEADING2,
            self::COLUMN_BREAK_BEFORE_HEADING3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageBreakBeforeAllowableValues()
    {
        return [
            self::PAGE_BREAK_BEFORE_HEADING1,
            self::PAGE_BREAK_BEFORE_HEADING2,
            self::PAGE_BREAK_BEFORE_HEADING3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_HEADER_ON_FIRST_PAGE,
            self::OPTIONS_FOOTER_ON_FIRST_PAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paper'] = $data['paper'] ?? null;
        $this->container['column_break_before'] = $data['column_break_before'] ?? null;
        $this->container['page_break_before'] = $data['page_break_before'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['header'] = $data['header'] ?? null;
        $this->container['footer'] = $data['footer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaperAllowableValues();
        if (!is_null($this->container['paper']) && !in_array($this->container['paper'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paper', must be one of '%s'",
                $this->container['paper'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getColumnBreakBeforeAllowableValues();
        if (!is_null($this->container['column_break_before']) && !in_array($this->container['column_break_before'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'column_break_before', must be one of '%s'",
                $this->container['column_break_before'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPageBreakBeforeAllowableValues();
        if (!is_null($this->container['page_break_before']) && !in_array($this->container['page_break_before'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'page_break_before', must be one of '%s'",
                $this->container['page_break_before'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['header']) && (count($this->container['header']) > 0)) {
            $invalidProperties[] = "invalid value for 'header', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['footer']) && (count($this->container['footer']) > 0)) {
            $invalidProperties[] = "invalid value for 'footer', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paper
     *
     * @return string|null
     */
    public function getPaper()
    {
        return $this->container['paper'];
    }

    /**
     * Sets paper
     *
     * @param string|null $paper Report page paper.    a4:A4 paper.    letter:Letter paper.
     *
     * @return self
     */
    public function setPaper($paper)
    {
        $allowedValues = $this->getPaperAllowableValues();
        if (!is_null($paper) && !in_array($paper, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paper', must be one of '%s'",
                    $paper,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paper'] = $paper;

        return $this;
    }

    /**
     * Gets column_break_before
     *
     * @return string|null
     */
    public function getColumnBreakBefore()
    {
        return $this->container['column_break_before'];
    }

    /**
     * Sets column_break_before
     *
     * @param string|null $column_break_before Report page auto column break before heading.    heading1:Column break before heading 1.    heading2:Column break before heading 2.    heading3:Column break before heading 3.
     *
     * @return self
     */
    public function setColumnBreakBefore($column_break_before)
    {
        $allowedValues = $this->getColumnBreakBeforeAllowableValues();
        if (!is_null($column_break_before) && !in_array($column_break_before, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'column_break_before', must be one of '%s'",
                    $column_break_before,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['column_break_before'] = $column_break_before;

        return $this;
    }

    /**
     * Gets page_break_before
     *
     * @return string|null
     */
    public function getPageBreakBefore()
    {
        return $this->container['page_break_before'];
    }

    /**
     * Sets page_break_before
     *
     * @param string|null $page_break_before Report page auto page break before heading.    heading1:Page break before heading 1.    heading2:Page break before heading 2.    heading3:Page break before heading 3.
     *
     * @return self
     */
    public function setPageBreakBefore($page_break_before)
    {
        $allowedValues = $this->getPageBreakBeforeAllowableValues();
        if (!is_null($page_break_before) && !in_array($page_break_before, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'page_break_before', must be one of '%s'",
                    $page_break_before,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['page_break_before'] = $page_break_before;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Report page options.    header-on-first-page:Show header on first page.    footer-on-first-page:Show footer on first page.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameHeader[]|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameHeader[]|null $header Configure report page header.
     *
     * @return self
     */
    public function setHeader($header)
    {

        if (!is_null($header) && (count($header) > 0)) {
            throw new \InvalidArgumentException('invalid value for $header when calling ReportLayoutNamePage., number of items must be less than or equal to 0.');
        }
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameFooter[]|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameFooter[]|null $footer Configure report page footer.
     *
     * @return self
     */
    public function setFooter($footer)
    {

        if (!is_null($footer) && (count($footer) > 0)) {
            throw new \InvalidArgumentException('invalid value for $footer when calling ReportLayoutNamePage., number of items must be less than or equal to 0.');
        }
        $this->container['footer'] = $footer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


