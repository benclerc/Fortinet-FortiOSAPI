<?php
/**
 * RouterRouteMapNameRule
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterRouteMapNameRule Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterRouteMapNameRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_route_map__name__rule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'action' => 'string',
        'match_as_path' => 'string',
        'match_community' => 'string',
        'match_community_exact' => 'string',
        'match_origin' => 'string',
        'match_interface' => 'string',
        'match_ip_address' => 'string',
        'match_ip6_address' => 'string',
        'match_ip_nexthop' => 'string',
        'match_ip6_nexthop' => 'string',
        'match_metric' => 'int',
        'match_route_type' => 'string',
        'match_tag' => 'int',
        'match_vrf' => 'int',
        'set_aggregator_as' => 'int',
        'set_aggregator_ip' => 'string',
        'set_aspath_action' => 'string',
        'set_aspath' => '\Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetAspath[]',
        'set_atomic_aggregate' => 'string',
        'set_community_delete' => 'string',
        'set_community' => '\Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetCommunity[]',
        'set_community_additive' => 'string',
        'set_dampening_reachability_half_life' => 'int',
        'set_dampening_reuse' => 'int',
        'set_dampening_suppress' => 'int',
        'set_dampening_max_suppress' => 'int',
        'set_dampening_unreachability_half_life' => 'int',
        'set_extcommunity_rt' => '\Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunityRt[]',
        'set_extcommunity_soo' => '\Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunitySoo[]',
        'set_ip_nexthop' => 'string',
        'set_ip6_nexthop' => 'string',
        'set_ip6_nexthop_local' => 'string',
        'set_local_preference' => 'int',
        'set_metric' => 'int',
        'set_metric_type' => 'string',
        'set_originator_id' => 'string',
        'set_origin' => 'string',
        'set_tag' => 'int',
        'set_weight' => 'int',
        'set_flags' => 'int',
        'match_flags' => 'int',
        'set_route_tag' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'action' => null,
        'match_as_path' => null,
        'match_community' => null,
        'match_community_exact' => null,
        'match_origin' => null,
        'match_interface' => null,
        'match_ip_address' => null,
        'match_ip6_address' => null,
        'match_ip_nexthop' => null,
        'match_ip6_nexthop' => null,
        'match_metric' => null,
        'match_route_type' => null,
        'match_tag' => null,
        'match_vrf' => null,
        'set_aggregator_as' => null,
        'set_aggregator_ip' => 'ipv4',
        'set_aspath_action' => null,
        'set_aspath' => null,
        'set_atomic_aggregate' => null,
        'set_community_delete' => null,
        'set_community' => null,
        'set_community_additive' => null,
        'set_dampening_reachability_half_life' => null,
        'set_dampening_reuse' => null,
        'set_dampening_suppress' => null,
        'set_dampening_max_suppress' => null,
        'set_dampening_unreachability_half_life' => null,
        'set_extcommunity_rt' => null,
        'set_extcommunity_soo' => null,
        'set_ip_nexthop' => 'ipv4',
        'set_ip6_nexthop' => 'ipv6',
        'set_ip6_nexthop_local' => 'ipv6',
        'set_local_preference' => null,
        'set_metric' => null,
        'set_metric_type' => null,
        'set_originator_id' => 'ipv4',
        'set_origin' => null,
        'set_tag' => null,
        'set_weight' => null,
        'set_flags' => null,
        'match_flags' => null,
        'set_route_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'action' => 'action',
        'match_as_path' => 'match-as-path',
        'match_community' => 'match-community',
        'match_community_exact' => 'match-community-exact',
        'match_origin' => 'match-origin',
        'match_interface' => 'match-interface',
        'match_ip_address' => 'match-ip-address',
        'match_ip6_address' => 'match-ip6-address',
        'match_ip_nexthop' => 'match-ip-nexthop',
        'match_ip6_nexthop' => 'match-ip6-nexthop',
        'match_metric' => 'match-metric',
        'match_route_type' => 'match-route-type',
        'match_tag' => 'match-tag',
        'match_vrf' => 'match-vrf',
        'set_aggregator_as' => 'set-aggregator-as',
        'set_aggregator_ip' => 'set-aggregator-ip',
        'set_aspath_action' => 'set-aspath-action',
        'set_aspath' => 'set-aspath',
        'set_atomic_aggregate' => 'set-atomic-aggregate',
        'set_community_delete' => 'set-community-delete',
        'set_community' => 'set-community',
        'set_community_additive' => 'set-community-additive',
        'set_dampening_reachability_half_life' => 'set-dampening-reachability-half-life',
        'set_dampening_reuse' => 'set-dampening-reuse',
        'set_dampening_suppress' => 'set-dampening-suppress',
        'set_dampening_max_suppress' => 'set-dampening-max-suppress',
        'set_dampening_unreachability_half_life' => 'set-dampening-unreachability-half-life',
        'set_extcommunity_rt' => 'set-extcommunity-rt',
        'set_extcommunity_soo' => 'set-extcommunity-soo',
        'set_ip_nexthop' => 'set-ip-nexthop',
        'set_ip6_nexthop' => 'set-ip6-nexthop',
        'set_ip6_nexthop_local' => 'set-ip6-nexthop-local',
        'set_local_preference' => 'set-local-preference',
        'set_metric' => 'set-metric',
        'set_metric_type' => 'set-metric-type',
        'set_originator_id' => 'set-originator-id',
        'set_origin' => 'set-origin',
        'set_tag' => 'set-tag',
        'set_weight' => 'set-weight',
        'set_flags' => 'set-flags',
        'match_flags' => 'match-flags',
        'set_route_tag' => 'set-route-tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'action' => 'setAction',
        'match_as_path' => 'setMatchAsPath',
        'match_community' => 'setMatchCommunity',
        'match_community_exact' => 'setMatchCommunityExact',
        'match_origin' => 'setMatchOrigin',
        'match_interface' => 'setMatchInterface',
        'match_ip_address' => 'setMatchIpAddress',
        'match_ip6_address' => 'setMatchIp6Address',
        'match_ip_nexthop' => 'setMatchIpNexthop',
        'match_ip6_nexthop' => 'setMatchIp6Nexthop',
        'match_metric' => 'setMatchMetric',
        'match_route_type' => 'setMatchRouteType',
        'match_tag' => 'setMatchTag',
        'match_vrf' => 'setMatchVrf',
        'set_aggregator_as' => 'setSetAggregatorAs',
        'set_aggregator_ip' => 'setSetAggregatorIp',
        'set_aspath_action' => 'setSetAspathAction',
        'set_aspath' => 'setSetAspath',
        'set_atomic_aggregate' => 'setSetAtomicAggregate',
        'set_community_delete' => 'setSetCommunityDelete',
        'set_community' => 'setSetCommunity',
        'set_community_additive' => 'setSetCommunityAdditive',
        'set_dampening_reachability_half_life' => 'setSetDampeningReachabilityHalfLife',
        'set_dampening_reuse' => 'setSetDampeningReuse',
        'set_dampening_suppress' => 'setSetDampeningSuppress',
        'set_dampening_max_suppress' => 'setSetDampeningMaxSuppress',
        'set_dampening_unreachability_half_life' => 'setSetDampeningUnreachabilityHalfLife',
        'set_extcommunity_rt' => 'setSetExtcommunityRt',
        'set_extcommunity_soo' => 'setSetExtcommunitySoo',
        'set_ip_nexthop' => 'setSetIpNexthop',
        'set_ip6_nexthop' => 'setSetIp6Nexthop',
        'set_ip6_nexthop_local' => 'setSetIp6NexthopLocal',
        'set_local_preference' => 'setSetLocalPreference',
        'set_metric' => 'setSetMetric',
        'set_metric_type' => 'setSetMetricType',
        'set_originator_id' => 'setSetOriginatorId',
        'set_origin' => 'setSetOrigin',
        'set_tag' => 'setSetTag',
        'set_weight' => 'setSetWeight',
        'set_flags' => 'setSetFlags',
        'match_flags' => 'setMatchFlags',
        'set_route_tag' => 'setSetRouteTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'action' => 'getAction',
        'match_as_path' => 'getMatchAsPath',
        'match_community' => 'getMatchCommunity',
        'match_community_exact' => 'getMatchCommunityExact',
        'match_origin' => 'getMatchOrigin',
        'match_interface' => 'getMatchInterface',
        'match_ip_address' => 'getMatchIpAddress',
        'match_ip6_address' => 'getMatchIp6Address',
        'match_ip_nexthop' => 'getMatchIpNexthop',
        'match_ip6_nexthop' => 'getMatchIp6Nexthop',
        'match_metric' => 'getMatchMetric',
        'match_route_type' => 'getMatchRouteType',
        'match_tag' => 'getMatchTag',
        'match_vrf' => 'getMatchVrf',
        'set_aggregator_as' => 'getSetAggregatorAs',
        'set_aggregator_ip' => 'getSetAggregatorIp',
        'set_aspath_action' => 'getSetAspathAction',
        'set_aspath' => 'getSetAspath',
        'set_atomic_aggregate' => 'getSetAtomicAggregate',
        'set_community_delete' => 'getSetCommunityDelete',
        'set_community' => 'getSetCommunity',
        'set_community_additive' => 'getSetCommunityAdditive',
        'set_dampening_reachability_half_life' => 'getSetDampeningReachabilityHalfLife',
        'set_dampening_reuse' => 'getSetDampeningReuse',
        'set_dampening_suppress' => 'getSetDampeningSuppress',
        'set_dampening_max_suppress' => 'getSetDampeningMaxSuppress',
        'set_dampening_unreachability_half_life' => 'getSetDampeningUnreachabilityHalfLife',
        'set_extcommunity_rt' => 'getSetExtcommunityRt',
        'set_extcommunity_soo' => 'getSetExtcommunitySoo',
        'set_ip_nexthop' => 'getSetIpNexthop',
        'set_ip6_nexthop' => 'getSetIp6Nexthop',
        'set_ip6_nexthop_local' => 'getSetIp6NexthopLocal',
        'set_local_preference' => 'getSetLocalPreference',
        'set_metric' => 'getSetMetric',
        'set_metric_type' => 'getSetMetricType',
        'set_originator_id' => 'getSetOriginatorId',
        'set_origin' => 'getSetOrigin',
        'set_tag' => 'getSetTag',
        'set_weight' => 'getSetWeight',
        'set_flags' => 'getSetFlags',
        'match_flags' => 'getMatchFlags',
        'set_route_tag' => 'getSetRouteTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTION_PERMIT = 'permit';
    const ACTION_DENY = 'deny';
    const MATCH_COMMUNITY_EXACT_ENABLE = 'enable';
    const MATCH_COMMUNITY_EXACT_DISABLE = 'disable';
    const MATCH_ORIGIN_NONE = 'none';
    const MATCH_ORIGIN_EGP = 'egp';
    const MATCH_ORIGIN_IGP = 'igp';
    const MATCH_ORIGIN_INCOMPLETE = 'incomplete';
    const MATCH_ROUTE_TYPE__1 = '1';
    const MATCH_ROUTE_TYPE__2 = '2';
    const MATCH_ROUTE_TYPE_NONE = 'none';
    const SET_ASPATH_ACTION_PREPEND = 'prepend';
    const SET_ASPATH_ACTION_REPLACE = 'replace';
    const SET_ATOMIC_AGGREGATE_ENABLE = 'enable';
    const SET_ATOMIC_AGGREGATE_DISABLE = 'disable';
    const SET_COMMUNITY_ADDITIVE_ENABLE = 'enable';
    const SET_COMMUNITY_ADDITIVE_DISABLE = 'disable';
    const SET_METRIC_TYPE__1 = '1';
    const SET_METRIC_TYPE__2 = '2';
    const SET_METRIC_TYPE_NONE = 'none';
    const SET_ORIGIN_NONE = 'none';
    const SET_ORIGIN_EGP = 'egp';
    const SET_ORIGIN_IGP = 'igp';
    const SET_ORIGIN_INCOMPLETE = 'incomplete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_PERMIT,
            self::ACTION_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchCommunityExactAllowableValues()
    {
        return [
            self::MATCH_COMMUNITY_EXACT_ENABLE,
            self::MATCH_COMMUNITY_EXACT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchOriginAllowableValues()
    {
        return [
            self::MATCH_ORIGIN_NONE,
            self::MATCH_ORIGIN_EGP,
            self::MATCH_ORIGIN_IGP,
            self::MATCH_ORIGIN_INCOMPLETE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchRouteTypeAllowableValues()
    {
        return [
            self::MATCH_ROUTE_TYPE__1,
            self::MATCH_ROUTE_TYPE__2,
            self::MATCH_ROUTE_TYPE_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSetAspathActionAllowableValues()
    {
        return [
            self::SET_ASPATH_ACTION_PREPEND,
            self::SET_ASPATH_ACTION_REPLACE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSetAtomicAggregateAllowableValues()
    {
        return [
            self::SET_ATOMIC_AGGREGATE_ENABLE,
            self::SET_ATOMIC_AGGREGATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSetCommunityAdditiveAllowableValues()
    {
        return [
            self::SET_COMMUNITY_ADDITIVE_ENABLE,
            self::SET_COMMUNITY_ADDITIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSetMetricTypeAllowableValues()
    {
        return [
            self::SET_METRIC_TYPE__1,
            self::SET_METRIC_TYPE__2,
            self::SET_METRIC_TYPE_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSetOriginAllowableValues()
    {
        return [
            self::SET_ORIGIN_NONE,
            self::SET_ORIGIN_EGP,
            self::SET_ORIGIN_IGP,
            self::SET_ORIGIN_INCOMPLETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['match_as_path'] = $data['match_as_path'] ?? null;
        $this->container['match_community'] = $data['match_community'] ?? null;
        $this->container['match_community_exact'] = $data['match_community_exact'] ?? null;
        $this->container['match_origin'] = $data['match_origin'] ?? null;
        $this->container['match_interface'] = $data['match_interface'] ?? null;
        $this->container['match_ip_address'] = $data['match_ip_address'] ?? null;
        $this->container['match_ip6_address'] = $data['match_ip6_address'] ?? null;
        $this->container['match_ip_nexthop'] = $data['match_ip_nexthop'] ?? null;
        $this->container['match_ip6_nexthop'] = $data['match_ip6_nexthop'] ?? null;
        $this->container['match_metric'] = $data['match_metric'] ?? null;
        $this->container['match_route_type'] = $data['match_route_type'] ?? null;
        $this->container['match_tag'] = $data['match_tag'] ?? null;
        $this->container['match_vrf'] = $data['match_vrf'] ?? null;
        $this->container['set_aggregator_as'] = $data['set_aggregator_as'] ?? null;
        $this->container['set_aggregator_ip'] = $data['set_aggregator_ip'] ?? null;
        $this->container['set_aspath_action'] = $data['set_aspath_action'] ?? null;
        $this->container['set_aspath'] = $data['set_aspath'] ?? null;
        $this->container['set_atomic_aggregate'] = $data['set_atomic_aggregate'] ?? null;
        $this->container['set_community_delete'] = $data['set_community_delete'] ?? null;
        $this->container['set_community'] = $data['set_community'] ?? null;
        $this->container['set_community_additive'] = $data['set_community_additive'] ?? null;
        $this->container['set_dampening_reachability_half_life'] = $data['set_dampening_reachability_half_life'] ?? null;
        $this->container['set_dampening_reuse'] = $data['set_dampening_reuse'] ?? null;
        $this->container['set_dampening_suppress'] = $data['set_dampening_suppress'] ?? null;
        $this->container['set_dampening_max_suppress'] = $data['set_dampening_max_suppress'] ?? null;
        $this->container['set_dampening_unreachability_half_life'] = $data['set_dampening_unreachability_half_life'] ?? null;
        $this->container['set_extcommunity_rt'] = $data['set_extcommunity_rt'] ?? null;
        $this->container['set_extcommunity_soo'] = $data['set_extcommunity_soo'] ?? null;
        $this->container['set_ip_nexthop'] = $data['set_ip_nexthop'] ?? null;
        $this->container['set_ip6_nexthop'] = $data['set_ip6_nexthop'] ?? null;
        $this->container['set_ip6_nexthop_local'] = $data['set_ip6_nexthop_local'] ?? null;
        $this->container['set_local_preference'] = $data['set_local_preference'] ?? null;
        $this->container['set_metric'] = $data['set_metric'] ?? null;
        $this->container['set_metric_type'] = $data['set_metric_type'] ?? null;
        $this->container['set_originator_id'] = $data['set_originator_id'] ?? null;
        $this->container['set_origin'] = $data['set_origin'] ?? null;
        $this->container['set_tag'] = $data['set_tag'] ?? null;
        $this->container['set_weight'] = $data['set_weight'] ?? null;
        $this->container['set_flags'] = $data['set_flags'] ?? null;
        $this->container['match_flags'] = $data['match_flags'] ?? null;
        $this->container['set_route_tag'] = $data['set_route_tag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['match_as_path']) && (mb_strlen($this->container['match_as_path']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_as_path', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['match_community']) && (mb_strlen($this->container['match_community']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_community', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getMatchCommunityExactAllowableValues();
        if (!is_null($this->container['match_community_exact']) && !in_array($this->container['match_community_exact'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'match_community_exact', must be one of '%s'",
                $this->container['match_community_exact'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMatchOriginAllowableValues();
        if (!is_null($this->container['match_origin']) && !in_array($this->container['match_origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'match_origin', must be one of '%s'",
                $this->container['match_origin'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['match_interface']) && (mb_strlen($this->container['match_interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'match_interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['match_ip_address']) && (mb_strlen($this->container['match_ip_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_ip_address', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['match_ip6_address']) && (mb_strlen($this->container['match_ip6_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_ip6_address', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['match_ip_nexthop']) && (mb_strlen($this->container['match_ip_nexthop']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_ip_nexthop', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['match_ip6_nexthop']) && (mb_strlen($this->container['match_ip6_nexthop']) > 35)) {
            $invalidProperties[] = "invalid value for 'match_ip6_nexthop', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['match_metric']) && ($this->container['match_metric'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'match_metric', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['match_metric']) && ($this->container['match_metric'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_metric', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMatchRouteTypeAllowableValues();
        if (!is_null($this->container['match_route_type']) && !in_array($this->container['match_route_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'match_route_type', must be one of '%s'",
                $this->container['match_route_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['match_tag']) && ($this->container['match_tag'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'match_tag', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['match_tag']) && ($this->container['match_tag'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_tag', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['match_vrf']) && ($this->container['match_vrf'] > 31)) {
            $invalidProperties[] = "invalid value for 'match_vrf', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['match_vrf']) && ($this->container['match_vrf'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_vrf', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_aggregator_as']) && ($this->container['set_aggregator_as'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_aggregator_as', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_aggregator_as']) && ($this->container['set_aggregator_as'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_aggregator_as', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSetAspathActionAllowableValues();
        if (!is_null($this->container['set_aspath_action']) && !in_array($this->container['set_aspath_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'set_aspath_action', must be one of '%s'",
                $this->container['set_aspath_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['set_aspath']) && (count($this->container['set_aspath']) > 0)) {
            $invalidProperties[] = "invalid value for 'set_aspath', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSetAtomicAggregateAllowableValues();
        if (!is_null($this->container['set_atomic_aggregate']) && !in_array($this->container['set_atomic_aggregate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'set_atomic_aggregate', must be one of '%s'",
                $this->container['set_atomic_aggregate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['set_community_delete']) && (mb_strlen($this->container['set_community_delete']) > 35)) {
            $invalidProperties[] = "invalid value for 'set_community_delete', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['set_community']) && (count($this->container['set_community']) > 0)) {
            $invalidProperties[] = "invalid value for 'set_community', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSetCommunityAdditiveAllowableValues();
        if (!is_null($this->container['set_community_additive']) && !in_array($this->container['set_community_additive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'set_community_additive', must be one of '%s'",
                $this->container['set_community_additive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['set_dampening_reachability_half_life']) && ($this->container['set_dampening_reachability_half_life'] > 45)) {
            $invalidProperties[] = "invalid value for 'set_dampening_reachability_half_life', must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['set_dampening_reachability_half_life']) && ($this->container['set_dampening_reachability_half_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_dampening_reachability_half_life', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_dampening_reuse']) && ($this->container['set_dampening_reuse'] > 20000)) {
            $invalidProperties[] = "invalid value for 'set_dampening_reuse', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['set_dampening_reuse']) && ($this->container['set_dampening_reuse'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_dampening_reuse', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_dampening_suppress']) && ($this->container['set_dampening_suppress'] > 20000)) {
            $invalidProperties[] = "invalid value for 'set_dampening_suppress', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['set_dampening_suppress']) && ($this->container['set_dampening_suppress'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_dampening_suppress', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_dampening_max_suppress']) && ($this->container['set_dampening_max_suppress'] > 255)) {
            $invalidProperties[] = "invalid value for 'set_dampening_max_suppress', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['set_dampening_max_suppress']) && ($this->container['set_dampening_max_suppress'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_dampening_max_suppress', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_dampening_unreachability_half_life']) && ($this->container['set_dampening_unreachability_half_life'] > 45)) {
            $invalidProperties[] = "invalid value for 'set_dampening_unreachability_half_life', must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['set_dampening_unreachability_half_life']) && ($this->container['set_dampening_unreachability_half_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_dampening_unreachability_half_life', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_extcommunity_rt']) && (count($this->container['set_extcommunity_rt']) > 0)) {
            $invalidProperties[] = "invalid value for 'set_extcommunity_rt', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['set_extcommunity_soo']) && (count($this->container['set_extcommunity_soo']) > 0)) {
            $invalidProperties[] = "invalid value for 'set_extcommunity_soo', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['set_local_preference']) && ($this->container['set_local_preference'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_local_preference', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_local_preference']) && ($this->container['set_local_preference'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_local_preference', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_metric']) && ($this->container['set_metric'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_metric', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_metric']) && ($this->container['set_metric'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_metric', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSetMetricTypeAllowableValues();
        if (!is_null($this->container['set_metric_type']) && !in_array($this->container['set_metric_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'set_metric_type', must be one of '%s'",
                $this->container['set_metric_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSetOriginAllowableValues();
        if (!is_null($this->container['set_origin']) && !in_array($this->container['set_origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'set_origin', must be one of '%s'",
                $this->container['set_origin'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['set_tag']) && ($this->container['set_tag'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_tag', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_tag']) && ($this->container['set_tag'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_tag', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_weight']) && ($this->container['set_weight'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_weight', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_weight']) && ($this->container['set_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_flags']) && ($this->container['set_flags'] > 65535)) {
            $invalidProperties[] = "invalid value for 'set_flags', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['set_flags']) && ($this->container['set_flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_flags', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['match_flags']) && ($this->container['match_flags'] > 65535)) {
            $invalidProperties[] = "invalid value for 'match_flags', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['match_flags']) && ($this->container['match_flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'match_flags', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['set_route_tag']) && ($this->container['set_route_tag'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'set_route_tag', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['set_route_tag']) && ($this->container['set_route_tag'] < 0)) {
            $invalidProperties[] = "invalid value for 'set_route_tag', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Rule ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action.    permit:Permit.    deny:Deny.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets match_as_path
     *
     * @return string|null
     */
    public function getMatchAsPath()
    {
        return $this->container['match_as_path'];
    }

    /**
     * Sets match_as_path
     *
     * @param string|null $match_as_path Match BGP AS path list.
     *
     * @return self
     */
    public function setMatchAsPath($match_as_path)
    {
        if (!is_null($match_as_path) && (mb_strlen($match_as_path) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_as_path when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_as_path'] = $match_as_path;

        return $this;
    }

    /**
     * Gets match_community
     *
     * @return string|null
     */
    public function getMatchCommunity()
    {
        return $this->container['match_community'];
    }

    /**
     * Sets match_community
     *
     * @param string|null $match_community Match BGP community list.
     *
     * @return self
     */
    public function setMatchCommunity($match_community)
    {
        if (!is_null($match_community) && (mb_strlen($match_community) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_community when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_community'] = $match_community;

        return $this;
    }

    /**
     * Gets match_community_exact
     *
     * @return string|null
     */
    public function getMatchCommunityExact()
    {
        return $this->container['match_community_exact'];
    }

    /**
     * Sets match_community_exact
     *
     * @param string|null $match_community_exact Enable/disable exact matching of communities.    enable:Enable exact matching of communities.    disable:Disable exact matching of communities.
     *
     * @return self
     */
    public function setMatchCommunityExact($match_community_exact)
    {
        $allowedValues = $this->getMatchCommunityExactAllowableValues();
        if (!is_null($match_community_exact) && !in_array($match_community_exact, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'match_community_exact', must be one of '%s'",
                    $match_community_exact,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['match_community_exact'] = $match_community_exact;

        return $this;
    }

    /**
     * Gets match_origin
     *
     * @return string|null
     */
    public function getMatchOrigin()
    {
        return $this->container['match_origin'];
    }

    /**
     * Sets match_origin
     *
     * @param string|null $match_origin Match BGP origin code.    none:None.    egp:Remote EGP.    igp:Local IGP.    incomplete:Unknown heritage.
     *
     * @return self
     */
    public function setMatchOrigin($match_origin)
    {
        $allowedValues = $this->getMatchOriginAllowableValues();
        if (!is_null($match_origin) && !in_array($match_origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'match_origin', must be one of '%s'",
                    $match_origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['match_origin'] = $match_origin;

        return $this;
    }

    /**
     * Gets match_interface
     *
     * @return string|null
     */
    public function getMatchInterface()
    {
        return $this->container['match_interface'];
    }

    /**
     * Sets match_interface
     *
     * @param string|null $match_interface Match interface configuration.
     *
     * @return self
     */
    public function setMatchInterface($match_interface)
    {
        if (!is_null($match_interface) && (mb_strlen($match_interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $match_interface when calling RouterRouteMapNameRule., must be smaller than or equal to 15.');
        }

        $this->container['match_interface'] = $match_interface;

        return $this;
    }

    /**
     * Gets match_ip_address
     *
     * @return string|null
     */
    public function getMatchIpAddress()
    {
        return $this->container['match_ip_address'];
    }

    /**
     * Sets match_ip_address
     *
     * @param string|null $match_ip_address Match IP address permitted by access-list or prefix-list.
     *
     * @return self
     */
    public function setMatchIpAddress($match_ip_address)
    {
        if (!is_null($match_ip_address) && (mb_strlen($match_ip_address) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_ip_address when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_ip_address'] = $match_ip_address;

        return $this;
    }

    /**
     * Gets match_ip6_address
     *
     * @return string|null
     */
    public function getMatchIp6Address()
    {
        return $this->container['match_ip6_address'];
    }

    /**
     * Sets match_ip6_address
     *
     * @param string|null $match_ip6_address Match IPv6 address permitted by access-list6 or prefix-list6.
     *
     * @return self
     */
    public function setMatchIp6Address($match_ip6_address)
    {
        if (!is_null($match_ip6_address) && (mb_strlen($match_ip6_address) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_ip6_address when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_ip6_address'] = $match_ip6_address;

        return $this;
    }

    /**
     * Gets match_ip_nexthop
     *
     * @return string|null
     */
    public function getMatchIpNexthop()
    {
        return $this->container['match_ip_nexthop'];
    }

    /**
     * Sets match_ip_nexthop
     *
     * @param string|null $match_ip_nexthop Match next hop IP address passed by access-list or prefix-list.
     *
     * @return self
     */
    public function setMatchIpNexthop($match_ip_nexthop)
    {
        if (!is_null($match_ip_nexthop) && (mb_strlen($match_ip_nexthop) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_ip_nexthop when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_ip_nexthop'] = $match_ip_nexthop;

        return $this;
    }

    /**
     * Gets match_ip6_nexthop
     *
     * @return string|null
     */
    public function getMatchIp6Nexthop()
    {
        return $this->container['match_ip6_nexthop'];
    }

    /**
     * Sets match_ip6_nexthop
     *
     * @param string|null $match_ip6_nexthop Match next hop IPv6 address passed by access-list6 or prefix-list6.
     *
     * @return self
     */
    public function setMatchIp6Nexthop($match_ip6_nexthop)
    {
        if (!is_null($match_ip6_nexthop) && (mb_strlen($match_ip6_nexthop) > 35)) {
            throw new \InvalidArgumentException('invalid length for $match_ip6_nexthop when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['match_ip6_nexthop'] = $match_ip6_nexthop;

        return $this;
    }

    /**
     * Gets match_metric
     *
     * @return int|null
     */
    public function getMatchMetric()
    {
        return $this->container['match_metric'];
    }

    /**
     * Sets match_metric
     *
     * @param int|null $match_metric Match metric for redistribute routes.
     *
     * @return self
     */
    public function setMatchMetric($match_metric)
    {

        if (!is_null($match_metric) && ($match_metric > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $match_metric when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($match_metric) && ($match_metric < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_metric when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['match_metric'] = $match_metric;

        return $this;
    }

    /**
     * Gets match_route_type
     *
     * @return string|null
     */
    public function getMatchRouteType()
    {
        return $this->container['match_route_type'];
    }

    /**
     * Sets match_route_type
     *
     * @param string|null $match_route_type Match route type.    1:External type 1.    2:External type 2.    none:No type specified.
     *
     * @return self
     */
    public function setMatchRouteType($match_route_type)
    {
        $allowedValues = $this->getMatchRouteTypeAllowableValues();
        if (!is_null($match_route_type) && !in_array($match_route_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'match_route_type', must be one of '%s'",
                    $match_route_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['match_route_type'] = $match_route_type;

        return $this;
    }

    /**
     * Gets match_tag
     *
     * @return int|null
     */
    public function getMatchTag()
    {
        return $this->container['match_tag'];
    }

    /**
     * Sets match_tag
     *
     * @param int|null $match_tag Match tag.
     *
     * @return self
     */
    public function setMatchTag($match_tag)
    {

        if (!is_null($match_tag) && ($match_tag > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $match_tag when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($match_tag) && ($match_tag < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_tag when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['match_tag'] = $match_tag;

        return $this;
    }

    /**
     * Gets match_vrf
     *
     * @return int|null
     */
    public function getMatchVrf()
    {
        return $this->container['match_vrf'];
    }

    /**
     * Sets match_vrf
     *
     * @param int|null $match_vrf Match VRF ID.
     *
     * @return self
     */
    public function setMatchVrf($match_vrf)
    {

        if (!is_null($match_vrf) && ($match_vrf > 31)) {
            throw new \InvalidArgumentException('invalid value for $match_vrf when calling RouterRouteMapNameRule., must be smaller than or equal to 31.');
        }
        if (!is_null($match_vrf) && ($match_vrf < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_vrf when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['match_vrf'] = $match_vrf;

        return $this;
    }

    /**
     * Gets set_aggregator_as
     *
     * @return int|null
     */
    public function getSetAggregatorAs()
    {
        return $this->container['set_aggregator_as'];
    }

    /**
     * Sets set_aggregator_as
     *
     * @param int|null $set_aggregator_as BGP aggregator AS.
     *
     * @return self
     */
    public function setSetAggregatorAs($set_aggregator_as)
    {

        if (!is_null($set_aggregator_as) && ($set_aggregator_as > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_aggregator_as when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_aggregator_as) && ($set_aggregator_as < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_aggregator_as when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_aggregator_as'] = $set_aggregator_as;

        return $this;
    }

    /**
     * Gets set_aggregator_ip
     *
     * @return string|null
     */
    public function getSetAggregatorIp()
    {
        return $this->container['set_aggregator_ip'];
    }

    /**
     * Sets set_aggregator_ip
     *
     * @param string|null $set_aggregator_ip BGP aggregator IP.
     *
     * @return self
     */
    public function setSetAggregatorIp($set_aggregator_ip)
    {
        $this->container['set_aggregator_ip'] = $set_aggregator_ip;

        return $this;
    }

    /**
     * Gets set_aspath_action
     *
     * @return string|null
     */
    public function getSetAspathAction()
    {
        return $this->container['set_aspath_action'];
    }

    /**
     * Sets set_aspath_action
     *
     * @param string|null $set_aspath_action Specify preferred action of set-aspath.    prepend:Prepend.    replace:Replace.
     *
     * @return self
     */
    public function setSetAspathAction($set_aspath_action)
    {
        $allowedValues = $this->getSetAspathActionAllowableValues();
        if (!is_null($set_aspath_action) && !in_array($set_aspath_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'set_aspath_action', must be one of '%s'",
                    $set_aspath_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['set_aspath_action'] = $set_aspath_action;

        return $this;
    }

    /**
     * Gets set_aspath
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetAspath[]|null
     */
    public function getSetAspath()
    {
        return $this->container['set_aspath'];
    }

    /**
     * Sets set_aspath
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetAspath[]|null $set_aspath Prepend BGP AS path attribute.
     *
     * @return self
     */
    public function setSetAspath($set_aspath)
    {

        if (!is_null($set_aspath) && (count($set_aspath) > 0)) {
            throw new \InvalidArgumentException('invalid value for $set_aspath when calling RouterRouteMapNameRule., number of items must be less than or equal to 0.');
        }
        $this->container['set_aspath'] = $set_aspath;

        return $this;
    }

    /**
     * Gets set_atomic_aggregate
     *
     * @return string|null
     */
    public function getSetAtomicAggregate()
    {
        return $this->container['set_atomic_aggregate'];
    }

    /**
     * Sets set_atomic_aggregate
     *
     * @param string|null $set_atomic_aggregate Enable/disable BGP atomic aggregate attribute.    enable:Enable BGP atomic aggregate attribute.    disable:Disable BGP atomic aggregate attribute.
     *
     * @return self
     */
    public function setSetAtomicAggregate($set_atomic_aggregate)
    {
        $allowedValues = $this->getSetAtomicAggregateAllowableValues();
        if (!is_null($set_atomic_aggregate) && !in_array($set_atomic_aggregate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'set_atomic_aggregate', must be one of '%s'",
                    $set_atomic_aggregate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['set_atomic_aggregate'] = $set_atomic_aggregate;

        return $this;
    }

    /**
     * Gets set_community_delete
     *
     * @return string|null
     */
    public function getSetCommunityDelete()
    {
        return $this->container['set_community_delete'];
    }

    /**
     * Sets set_community_delete
     *
     * @param string|null $set_community_delete Delete communities matching community list.
     *
     * @return self
     */
    public function setSetCommunityDelete($set_community_delete)
    {
        if (!is_null($set_community_delete) && (mb_strlen($set_community_delete) > 35)) {
            throw new \InvalidArgumentException('invalid length for $set_community_delete when calling RouterRouteMapNameRule., must be smaller than or equal to 35.');
        }

        $this->container['set_community_delete'] = $set_community_delete;

        return $this;
    }

    /**
     * Gets set_community
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetCommunity[]|null
     */
    public function getSetCommunity()
    {
        return $this->container['set_community'];
    }

    /**
     * Sets set_community
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetCommunity[]|null $set_community BGP community attribute.
     *
     * @return self
     */
    public function setSetCommunity($set_community)
    {

        if (!is_null($set_community) && (count($set_community) > 0)) {
            throw new \InvalidArgumentException('invalid value for $set_community when calling RouterRouteMapNameRule., number of items must be less than or equal to 0.');
        }
        $this->container['set_community'] = $set_community;

        return $this;
    }

    /**
     * Gets set_community_additive
     *
     * @return string|null
     */
    public function getSetCommunityAdditive()
    {
        return $this->container['set_community_additive'];
    }

    /**
     * Sets set_community_additive
     *
     * @param string|null $set_community_additive Enable/disable adding set-community to existing community.    enable:Enable adding set-community to existing community.    disable:Disable adding set-community to existing community.
     *
     * @return self
     */
    public function setSetCommunityAdditive($set_community_additive)
    {
        $allowedValues = $this->getSetCommunityAdditiveAllowableValues();
        if (!is_null($set_community_additive) && !in_array($set_community_additive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'set_community_additive', must be one of '%s'",
                    $set_community_additive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['set_community_additive'] = $set_community_additive;

        return $this;
    }

    /**
     * Gets set_dampening_reachability_half_life
     *
     * @return int|null
     */
    public function getSetDampeningReachabilityHalfLife()
    {
        return $this->container['set_dampening_reachability_half_life'];
    }

    /**
     * Sets set_dampening_reachability_half_life
     *
     * @param int|null $set_dampening_reachability_half_life Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
     *
     * @return self
     */
    public function setSetDampeningReachabilityHalfLife($set_dampening_reachability_half_life)
    {

        if (!is_null($set_dampening_reachability_half_life) && ($set_dampening_reachability_half_life > 45)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_reachability_half_life when calling RouterRouteMapNameRule., must be smaller than or equal to 45.');
        }
        if (!is_null($set_dampening_reachability_half_life) && ($set_dampening_reachability_half_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_reachability_half_life when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_dampening_reachability_half_life'] = $set_dampening_reachability_half_life;

        return $this;
    }

    /**
     * Gets set_dampening_reuse
     *
     * @return int|null
     */
    public function getSetDampeningReuse()
    {
        return $this->container['set_dampening_reuse'];
    }

    /**
     * Sets set_dampening_reuse
     *
     * @param int|null $set_dampening_reuse Value to start reusing a route (1 - 20000, 0 = unset).
     *
     * @return self
     */
    public function setSetDampeningReuse($set_dampening_reuse)
    {

        if (!is_null($set_dampening_reuse) && ($set_dampening_reuse > 20000)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_reuse when calling RouterRouteMapNameRule., must be smaller than or equal to 20000.');
        }
        if (!is_null($set_dampening_reuse) && ($set_dampening_reuse < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_reuse when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_dampening_reuse'] = $set_dampening_reuse;

        return $this;
    }

    /**
     * Gets set_dampening_suppress
     *
     * @return int|null
     */
    public function getSetDampeningSuppress()
    {
        return $this->container['set_dampening_suppress'];
    }

    /**
     * Sets set_dampening_suppress
     *
     * @param int|null $set_dampening_suppress Value to start suppressing a route (1 - 20000, 0 = unset).
     *
     * @return self
     */
    public function setSetDampeningSuppress($set_dampening_suppress)
    {

        if (!is_null($set_dampening_suppress) && ($set_dampening_suppress > 20000)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_suppress when calling RouterRouteMapNameRule., must be smaller than or equal to 20000.');
        }
        if (!is_null($set_dampening_suppress) && ($set_dampening_suppress < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_suppress when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_dampening_suppress'] = $set_dampening_suppress;

        return $this;
    }

    /**
     * Gets set_dampening_max_suppress
     *
     * @return int|null
     */
    public function getSetDampeningMaxSuppress()
    {
        return $this->container['set_dampening_max_suppress'];
    }

    /**
     * Sets set_dampening_max_suppress
     *
     * @param int|null $set_dampening_max_suppress Maximum duration to suppress a route (1 - 255 min, 0 = unset).
     *
     * @return self
     */
    public function setSetDampeningMaxSuppress($set_dampening_max_suppress)
    {

        if (!is_null($set_dampening_max_suppress) && ($set_dampening_max_suppress > 255)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_max_suppress when calling RouterRouteMapNameRule., must be smaller than or equal to 255.');
        }
        if (!is_null($set_dampening_max_suppress) && ($set_dampening_max_suppress < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_max_suppress when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_dampening_max_suppress'] = $set_dampening_max_suppress;

        return $this;
    }

    /**
     * Gets set_dampening_unreachability_half_life
     *
     * @return int|null
     */
    public function getSetDampeningUnreachabilityHalfLife()
    {
        return $this->container['set_dampening_unreachability_half_life'];
    }

    /**
     * Sets set_dampening_unreachability_half_life
     *
     * @param int|null $set_dampening_unreachability_half_life Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
     *
     * @return self
     */
    public function setSetDampeningUnreachabilityHalfLife($set_dampening_unreachability_half_life)
    {

        if (!is_null($set_dampening_unreachability_half_life) && ($set_dampening_unreachability_half_life > 45)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_unreachability_half_life when calling RouterRouteMapNameRule., must be smaller than or equal to 45.');
        }
        if (!is_null($set_dampening_unreachability_half_life) && ($set_dampening_unreachability_half_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_dampening_unreachability_half_life when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_dampening_unreachability_half_life'] = $set_dampening_unreachability_half_life;

        return $this;
    }

    /**
     * Gets set_extcommunity_rt
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunityRt[]|null
     */
    public function getSetExtcommunityRt()
    {
        return $this->container['set_extcommunity_rt'];
    }

    /**
     * Sets set_extcommunity_rt
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunityRt[]|null $set_extcommunity_rt Route Target extended community.
     *
     * @return self
     */
    public function setSetExtcommunityRt($set_extcommunity_rt)
    {

        if (!is_null($set_extcommunity_rt) && (count($set_extcommunity_rt) > 0)) {
            throw new \InvalidArgumentException('invalid value for $set_extcommunity_rt when calling RouterRouteMapNameRule., number of items must be less than or equal to 0.');
        }
        $this->container['set_extcommunity_rt'] = $set_extcommunity_rt;

        return $this;
    }

    /**
     * Gets set_extcommunity_soo
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunitySoo[]|null
     */
    public function getSetExtcommunitySoo()
    {
        return $this->container['set_extcommunity_soo'];
    }

    /**
     * Sets set_extcommunity_soo
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterRouteMapNameSetExtcommunitySoo[]|null $set_extcommunity_soo Site-of-Origin extended community.
     *
     * @return self
     */
    public function setSetExtcommunitySoo($set_extcommunity_soo)
    {

        if (!is_null($set_extcommunity_soo) && (count($set_extcommunity_soo) > 0)) {
            throw new \InvalidArgumentException('invalid value for $set_extcommunity_soo when calling RouterRouteMapNameRule., number of items must be less than or equal to 0.');
        }
        $this->container['set_extcommunity_soo'] = $set_extcommunity_soo;

        return $this;
    }

    /**
     * Gets set_ip_nexthop
     *
     * @return string|null
     */
    public function getSetIpNexthop()
    {
        return $this->container['set_ip_nexthop'];
    }

    /**
     * Sets set_ip_nexthop
     *
     * @param string|null $set_ip_nexthop IP address of next hop.
     *
     * @return self
     */
    public function setSetIpNexthop($set_ip_nexthop)
    {
        $this->container['set_ip_nexthop'] = $set_ip_nexthop;

        return $this;
    }

    /**
     * Gets set_ip6_nexthop
     *
     * @return string|null
     */
    public function getSetIp6Nexthop()
    {
        return $this->container['set_ip6_nexthop'];
    }

    /**
     * Sets set_ip6_nexthop
     *
     * @param string|null $set_ip6_nexthop IPv6 global address of next hop.
     *
     * @return self
     */
    public function setSetIp6Nexthop($set_ip6_nexthop)
    {
        $this->container['set_ip6_nexthop'] = $set_ip6_nexthop;

        return $this;
    }

    /**
     * Gets set_ip6_nexthop_local
     *
     * @return string|null
     */
    public function getSetIp6NexthopLocal()
    {
        return $this->container['set_ip6_nexthop_local'];
    }

    /**
     * Sets set_ip6_nexthop_local
     *
     * @param string|null $set_ip6_nexthop_local IPv6 local address of next hop.
     *
     * @return self
     */
    public function setSetIp6NexthopLocal($set_ip6_nexthop_local)
    {
        $this->container['set_ip6_nexthop_local'] = $set_ip6_nexthop_local;

        return $this;
    }

    /**
     * Gets set_local_preference
     *
     * @return int|null
     */
    public function getSetLocalPreference()
    {
        return $this->container['set_local_preference'];
    }

    /**
     * Sets set_local_preference
     *
     * @param int|null $set_local_preference BGP local preference path attribute.
     *
     * @return self
     */
    public function setSetLocalPreference($set_local_preference)
    {

        if (!is_null($set_local_preference) && ($set_local_preference > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_local_preference when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_local_preference) && ($set_local_preference < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_local_preference when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_local_preference'] = $set_local_preference;

        return $this;
    }

    /**
     * Gets set_metric
     *
     * @return int|null
     */
    public function getSetMetric()
    {
        return $this->container['set_metric'];
    }

    /**
     * Sets set_metric
     *
     * @param int|null $set_metric Metric value.
     *
     * @return self
     */
    public function setSetMetric($set_metric)
    {

        if (!is_null($set_metric) && ($set_metric > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_metric when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_metric) && ($set_metric < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_metric when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_metric'] = $set_metric;

        return $this;
    }

    /**
     * Gets set_metric_type
     *
     * @return string|null
     */
    public function getSetMetricType()
    {
        return $this->container['set_metric_type'];
    }

    /**
     * Sets set_metric_type
     *
     * @param string|null $set_metric_type Metric type.    1:External type 1.    2:External type 2.    none:No type specified.
     *
     * @return self
     */
    public function setSetMetricType($set_metric_type)
    {
        $allowedValues = $this->getSetMetricTypeAllowableValues();
        if (!is_null($set_metric_type) && !in_array($set_metric_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'set_metric_type', must be one of '%s'",
                    $set_metric_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['set_metric_type'] = $set_metric_type;

        return $this;
    }

    /**
     * Gets set_originator_id
     *
     * @return string|null
     */
    public function getSetOriginatorId()
    {
        return $this->container['set_originator_id'];
    }

    /**
     * Sets set_originator_id
     *
     * @param string|null $set_originator_id BGP originator ID attribute.
     *
     * @return self
     */
    public function setSetOriginatorId($set_originator_id)
    {
        $this->container['set_originator_id'] = $set_originator_id;

        return $this;
    }

    /**
     * Gets set_origin
     *
     * @return string|null
     */
    public function getSetOrigin()
    {
        return $this->container['set_origin'];
    }

    /**
     * Sets set_origin
     *
     * @param string|null $set_origin BGP origin code.    none:None.    egp:Remote EGP.    igp:Local IGP.    incomplete:Unknown heritage.
     *
     * @return self
     */
    public function setSetOrigin($set_origin)
    {
        $allowedValues = $this->getSetOriginAllowableValues();
        if (!is_null($set_origin) && !in_array($set_origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'set_origin', must be one of '%s'",
                    $set_origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['set_origin'] = $set_origin;

        return $this;
    }

    /**
     * Gets set_tag
     *
     * @return int|null
     */
    public function getSetTag()
    {
        return $this->container['set_tag'];
    }

    /**
     * Sets set_tag
     *
     * @param int|null $set_tag Tag value.
     *
     * @return self
     */
    public function setSetTag($set_tag)
    {

        if (!is_null($set_tag) && ($set_tag > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_tag when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_tag) && ($set_tag < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_tag when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_tag'] = $set_tag;

        return $this;
    }

    /**
     * Gets set_weight
     *
     * @return int|null
     */
    public function getSetWeight()
    {
        return $this->container['set_weight'];
    }

    /**
     * Sets set_weight
     *
     * @param int|null $set_weight BGP weight for routing table.
     *
     * @return self
     */
    public function setSetWeight($set_weight)
    {

        if (!is_null($set_weight) && ($set_weight > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_weight when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_weight) && ($set_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_weight when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_weight'] = $set_weight;

        return $this;
    }

    /**
     * Gets set_flags
     *
     * @return int|null
     */
    public function getSetFlags()
    {
        return $this->container['set_flags'];
    }

    /**
     * Sets set_flags
     *
     * @param int|null $set_flags BGP flags value (0 - 65535)
     *
     * @return self
     */
    public function setSetFlags($set_flags)
    {

        if (!is_null($set_flags) && ($set_flags > 65535)) {
            throw new \InvalidArgumentException('invalid value for $set_flags when calling RouterRouteMapNameRule., must be smaller than or equal to 65535.');
        }
        if (!is_null($set_flags) && ($set_flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_flags when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_flags'] = $set_flags;

        return $this;
    }

    /**
     * Gets match_flags
     *
     * @return int|null
     */
    public function getMatchFlags()
    {
        return $this->container['match_flags'];
    }

    /**
     * Sets match_flags
     *
     * @param int|null $match_flags BGP flag value to match (0 - 65535)
     *
     * @return self
     */
    public function setMatchFlags($match_flags)
    {

        if (!is_null($match_flags) && ($match_flags > 65535)) {
            throw new \InvalidArgumentException('invalid value for $match_flags when calling RouterRouteMapNameRule., must be smaller than or equal to 65535.');
        }
        if (!is_null($match_flags) && ($match_flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $match_flags when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['match_flags'] = $match_flags;

        return $this;
    }

    /**
     * Gets set_route_tag
     *
     * @return int|null
     */
    public function getSetRouteTag()
    {
        return $this->container['set_route_tag'];
    }

    /**
     * Sets set_route_tag
     *
     * @param int|null $set_route_tag Route tag for routing table.
     *
     * @return self
     */
    public function setSetRouteTag($set_route_tag)
    {

        if (!is_null($set_route_tag) && ($set_route_tag > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $set_route_tag when calling RouterRouteMapNameRule., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($set_route_tag) && ($set_route_tag < 0)) {
            throw new \InvalidArgumentException('invalid value for $set_route_tag when calling RouterRouteMapNameRule., must be bigger than or equal to 0.');
        }

        $this->container['set_route_tag'] = $set_route_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


