<?php
/**
 * WebfilterProfileNameAntiphish
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WebfilterProfileNameAntiphish Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WebfilterProfileNameAntiphish implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_webfilter_profile__name__antiphish';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'domain_controller' => 'string',
        'default_action' => 'string',
        'check_uri' => 'string',
        'check_basic_auth' => 'string',
        'check_username_only' => 'string',
        'max_body_len' => 'int',
        'inspection_entries' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameInspectionEntries[]',
        'custom_patterns' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameCustomPatterns[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'domain_controller' => null,
        'default_action' => null,
        'check_uri' => null,
        'check_basic_auth' => null,
        'check_username_only' => null,
        'max_body_len' => null,
        'inspection_entries' => null,
        'custom_patterns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'domain_controller' => 'domain-controller',
        'default_action' => 'default-action',
        'check_uri' => 'check-uri',
        'check_basic_auth' => 'check-basic-auth',
        'check_username_only' => 'check-username-only',
        'max_body_len' => 'max-body-len',
        'inspection_entries' => 'inspection-entries',
        'custom_patterns' => 'custom-patterns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'domain_controller' => 'setDomainController',
        'default_action' => 'setDefaultAction',
        'check_uri' => 'setCheckUri',
        'check_basic_auth' => 'setCheckBasicAuth',
        'check_username_only' => 'setCheckUsernameOnly',
        'max_body_len' => 'setMaxBodyLen',
        'inspection_entries' => 'setInspectionEntries',
        'custom_patterns' => 'setCustomPatterns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'domain_controller' => 'getDomainController',
        'default_action' => 'getDefaultAction',
        'check_uri' => 'getCheckUri',
        'check_basic_auth' => 'getCheckBasicAuth',
        'check_username_only' => 'getCheckUsernameOnly',
        'max_body_len' => 'getMaxBodyLen',
        'inspection_entries' => 'getInspectionEntries',
        'custom_patterns' => 'getCustomPatterns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const DEFAULT_ACTION_EXEMPT = 'exempt';
    const DEFAULT_ACTION_LOG = 'log';
    const DEFAULT_ACTION_BLOCK = 'block';
    const CHECK_URI_ENABLE = 'enable';
    const CHECK_URI_DISABLE = 'disable';
    const CHECK_BASIC_AUTH_ENABLE = 'enable';
    const CHECK_BASIC_AUTH_DISABLE = 'disable';
    const CHECK_USERNAME_ONLY_ENABLE = 'enable';
    const CHECK_USERNAME_ONLY_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultActionAllowableValues()
    {
        return [
            self::DEFAULT_ACTION_EXEMPT,
            self::DEFAULT_ACTION_LOG,
            self::DEFAULT_ACTION_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckUriAllowableValues()
    {
        return [
            self::CHECK_URI_ENABLE,
            self::CHECK_URI_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckBasicAuthAllowableValues()
    {
        return [
            self::CHECK_BASIC_AUTH_ENABLE,
            self::CHECK_BASIC_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckUsernameOnlyAllowableValues()
    {
        return [
            self::CHECK_USERNAME_ONLY_ENABLE,
            self::CHECK_USERNAME_ONLY_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['domain_controller'] = $data['domain_controller'] ?? null;
        $this->container['default_action'] = $data['default_action'] ?? null;
        $this->container['check_uri'] = $data['check_uri'] ?? null;
        $this->container['check_basic_auth'] = $data['check_basic_auth'] ?? null;
        $this->container['check_username_only'] = $data['check_username_only'] ?? null;
        $this->container['max_body_len'] = $data['max_body_len'] ?? null;
        $this->container['inspection_entries'] = $data['inspection_entries'] ?? null;
        $this->container['custom_patterns'] = $data['custom_patterns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['domain_controller']) && (mb_strlen($this->container['domain_controller']) > 63)) {
            $invalidProperties[] = "invalid value for 'domain_controller', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getDefaultActionAllowableValues();
        if (!is_null($this->container['default_action']) && !in_array($this->container['default_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_action', must be one of '%s'",
                $this->container['default_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckUriAllowableValues();
        if (!is_null($this->container['check_uri']) && !in_array($this->container['check_uri'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_uri', must be one of '%s'",
                $this->container['check_uri'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckBasicAuthAllowableValues();
        if (!is_null($this->container['check_basic_auth']) && !in_array($this->container['check_basic_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_basic_auth', must be one of '%s'",
                $this->container['check_basic_auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckUsernameOnlyAllowableValues();
        if (!is_null($this->container['check_username_only']) && !in_array($this->container['check_username_only'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_username_only', must be one of '%s'",
                $this->container['check_username_only'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_body_len']) && ($this->container['max_body_len'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_body_len', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_body_len']) && ($this->container['max_body_len'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_body_len', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['inspection_entries']) && (count($this->container['inspection_entries']) > 0)) {
            $invalidProperties[] = "invalid value for 'inspection_entries', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['custom_patterns']) && (count($this->container['custom_patterns']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_patterns', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Toggle AntiPhishing functionality.    enable:Enable AntiPhishing functionality.    disable:Disable AntiPhishing functionality.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets domain_controller
     *
     * @return string|null
     */
    public function getDomainController()
    {
        return $this->container['domain_controller'];
    }

    /**
     * Sets domain_controller
     *
     * @param string|null $domain_controller Domain for which to verify received credentials against.
     *
     * @return self
     */
    public function setDomainController($domain_controller)
    {
        if (!is_null($domain_controller) && (mb_strlen($domain_controller) > 63)) {
            throw new \InvalidArgumentException('invalid length for $domain_controller when calling WebfilterProfileNameAntiphish., must be smaller than or equal to 63.');
        }

        $this->container['domain_controller'] = $domain_controller;

        return $this;
    }

    /**
     * Gets default_action
     *
     * @return string|null
     */
    public function getDefaultAction()
    {
        return $this->container['default_action'];
    }

    /**
     * Sets default_action
     *
     * @param string|null $default_action Action to be taken when there is no matching rule.    exempt:Exempt requests from matching.    log:Log all matched requests.    block:Block all matched requests.
     *
     * @return self
     */
    public function setDefaultAction($default_action)
    {
        $allowedValues = $this->getDefaultActionAllowableValues();
        if (!is_null($default_action) && !in_array($default_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_action', must be one of '%s'",
                    $default_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_action'] = $default_action;

        return $this;
    }

    /**
     * Gets check_uri
     *
     * @return string|null
     */
    public function getCheckUri()
    {
        return $this->container['check_uri'];
    }

    /**
     * Sets check_uri
     *
     * @param string|null $check_uri Enable/disable checking of GET URI parameters for known credentials.    enable:Enable checking of GET URI for username and password fields.    disable:Disable checking of GET URI for username and password fields.
     *
     * @return self
     */
    public function setCheckUri($check_uri)
    {
        $allowedValues = $this->getCheckUriAllowableValues();
        if (!is_null($check_uri) && !in_array($check_uri, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_uri', must be one of '%s'",
                    $check_uri,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_uri'] = $check_uri;

        return $this;
    }

    /**
     * Gets check_basic_auth
     *
     * @return string|null
     */
    public function getCheckBasicAuth()
    {
        return $this->container['check_basic_auth'];
    }

    /**
     * Sets check_basic_auth
     *
     * @param string|null $check_basic_auth Enable/disable checking of HTTP Basic Auth field for known credentials.    enable:Enable checking of HTTP Basic Auth field for known credentials.    disable:Disable checking of HTTP Basic Auth field for known credentials.
     *
     * @return self
     */
    public function setCheckBasicAuth($check_basic_auth)
    {
        $allowedValues = $this->getCheckBasicAuthAllowableValues();
        if (!is_null($check_basic_auth) && !in_array($check_basic_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_basic_auth', must be one of '%s'",
                    $check_basic_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_basic_auth'] = $check_basic_auth;

        return $this;
    }

    /**
     * Gets check_username_only
     *
     * @return string|null
     */
    public function getCheckUsernameOnly()
    {
        return $this->container['check_username_only'];
    }

    /**
     * Sets check_username_only
     *
     * @param string|null $check_username_only Enable/disable acting only on valid username credentials. Action will be taken for valid usernames regardless of password validity.    enable:Enable acting only on valid username credentials.    disable:Disable acting only on valid username credentials.
     *
     * @return self
     */
    public function setCheckUsernameOnly($check_username_only)
    {
        $allowedValues = $this->getCheckUsernameOnlyAllowableValues();
        if (!is_null($check_username_only) && !in_array($check_username_only, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_username_only', must be one of '%s'",
                    $check_username_only,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_username_only'] = $check_username_only;

        return $this;
    }

    /**
     * Gets max_body_len
     *
     * @return int|null
     */
    public function getMaxBodyLen()
    {
        return $this->container['max_body_len'];
    }

    /**
     * Sets max_body_len
     *
     * @param int|null $max_body_len Maximum size of a POST body to check for credentials.
     *
     * @return self
     */
    public function setMaxBodyLen($max_body_len)
    {

        if (!is_null($max_body_len) && ($max_body_len > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_body_len when calling WebfilterProfileNameAntiphish., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_body_len) && ($max_body_len < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_body_len when calling WebfilterProfileNameAntiphish., must be bigger than or equal to 0.');
        }

        $this->container['max_body_len'] = $max_body_len;

        return $this;
    }

    /**
     * Gets inspection_entries
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameInspectionEntries[]|null
     */
    public function getInspectionEntries()
    {
        return $this->container['inspection_entries'];
    }

    /**
     * Sets inspection_entries
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameInspectionEntries[]|null $inspection_entries AntiPhishing entries.
     *
     * @return self
     */
    public function setInspectionEntries($inspection_entries)
    {

        if (!is_null($inspection_entries) && (count($inspection_entries) > 0)) {
            throw new \InvalidArgumentException('invalid value for $inspection_entries when calling WebfilterProfileNameAntiphish., number of items must be less than or equal to 0.');
        }
        $this->container['inspection_entries'] = $inspection_entries;

        return $this;
    }

    /**
     * Gets custom_patterns
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameCustomPatterns[]|null
     */
    public function getCustomPatterns()
    {
        return $this->container['custom_patterns'];
    }

    /**
     * Sets custom_patterns
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameCustomPatterns[]|null $custom_patterns Custom username and password regex patterns.
     *
     * @return self
     */
    public function setCustomPatterns($custom_patterns)
    {

        if (!is_null($custom_patterns) && (count($custom_patterns) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_patterns when calling WebfilterProfileNameAntiphish., number of items must be less than or equal to 0.');
        }
        $this->container['custom_patterns'] = $custom_patterns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


