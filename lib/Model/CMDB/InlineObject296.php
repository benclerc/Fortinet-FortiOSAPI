<?php
/**
 * InlineObject296
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject296 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject296 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_296';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'domain' => 'string',
        'allow_transfer' => 'string',
        'type' => 'string',
        'view' => 'string',
        'ip_master' => 'string',
        'primary_name' => 'string',
        'contact' => 'string',
        'ttl' => 'int',
        'authoritative' => 'string',
        'forwarder' => 'string',
        'source_ip' => 'string',
        'rr_max' => 'int',
        'dns_entry' => '\Fortigate\FortiOS\Model\CMDB\SystemDnsDatabaseNameDnsEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'domain' => null,
        'allow_transfer' => null,
        'type' => null,
        'view' => null,
        'ip_master' => 'ipv4',
        'primary_name' => null,
        'contact' => null,
        'ttl' => null,
        'authoritative' => null,
        'forwarder' => null,
        'source_ip' => 'ipv4',
        'rr_max' => null,
        'dns_entry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'domain' => 'domain',
        'allow_transfer' => 'allow-transfer',
        'type' => 'type',
        'view' => 'view',
        'ip_master' => 'ip-master',
        'primary_name' => 'primary-name',
        'contact' => 'contact',
        'ttl' => 'ttl',
        'authoritative' => 'authoritative',
        'forwarder' => 'forwarder',
        'source_ip' => 'source-ip',
        'rr_max' => 'rr-max',
        'dns_entry' => 'dns-entry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'domain' => 'setDomain',
        'allow_transfer' => 'setAllowTransfer',
        'type' => 'setType',
        'view' => 'setView',
        'ip_master' => 'setIpMaster',
        'primary_name' => 'setPrimaryName',
        'contact' => 'setContact',
        'ttl' => 'setTtl',
        'authoritative' => 'setAuthoritative',
        'forwarder' => 'setForwarder',
        'source_ip' => 'setSourceIp',
        'rr_max' => 'setRrMax',
        'dns_entry' => 'setDnsEntry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'domain' => 'getDomain',
        'allow_transfer' => 'getAllowTransfer',
        'type' => 'getType',
        'view' => 'getView',
        'ip_master' => 'getIpMaster',
        'primary_name' => 'getPrimaryName',
        'contact' => 'getContact',
        'ttl' => 'getTtl',
        'authoritative' => 'getAuthoritative',
        'forwarder' => 'getForwarder',
        'source_ip' => 'getSourceIp',
        'rr_max' => 'getRrMax',
        'dns_entry' => 'getDnsEntry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const TYPE_MASTER = 'master';
    const TYPE_SLAVE = 'slave';
    const VIEW_SHADOW = 'shadow';
    const VIEW__PUBLIC = 'public';
    const AUTHORITATIVE_ENABLE = 'enable';
    const AUTHORITATIVE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MASTER,
            self::TYPE_SLAVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewAllowableValues()
    {
        return [
            self::VIEW_SHADOW,
            self::VIEW__PUBLIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthoritativeAllowableValues()
    {
        return [
            self::AUTHORITATIVE_ENABLE,
            self::AUTHORITATIVE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['allow_transfer'] = $data['allow_transfer'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['view'] = $data['view'] ?? null;
        $this->container['ip_master'] = $data['ip_master'] ?? null;
        $this->container['primary_name'] = $data['primary_name'] ?? null;
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['ttl'] = $data['ttl'] ?? null;
        $this->container['authoritative'] = $data['authoritative'] ?? null;
        $this->container['forwarder'] = $data['forwarder'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['rr_max'] = $data['rr_max'] ?? null;
        $this->container['dns_entry'] = $data['dns_entry'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 255)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewAllowableValues();
        if (!is_null($this->container['view']) && !in_array($this->container['view'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view', must be one of '%s'",
                $this->container['view'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['primary_name']) && (mb_strlen($this->container['primary_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'primary_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact']) && (mb_strlen($this->container['contact']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ttl']) && ($this->container['ttl'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ttl', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ttl']) && ($this->container['ttl'] < 0)) {
            $invalidProperties[] = "invalid value for 'ttl', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAuthoritativeAllowableValues();
        if (!is_null($this->container['authoritative']) && !in_array($this->container['authoritative'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authoritative', must be one of '%s'",
                $this->container['authoritative'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rr_max']) && ($this->container['rr_max'] > 65536)) {
            $invalidProperties[] = "invalid value for 'rr_max', must be smaller than or equal to 65536.";
        }

        if (!is_null($this->container['rr_max']) && ($this->container['rr_max'] < 10)) {
            $invalidProperties[] = "invalid value for 'rr_max', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['dns_entry']) && (count($this->container['dns_entry']) > 0)) {
            $invalidProperties[] = "invalid value for 'dns_entry', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Zone name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject296., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this DNS zone.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain name.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 255)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling InlineObject296., must be smaller than or equal to 255.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets allow_transfer
     *
     * @return string|null
     */
    public function getAllowTransfer()
    {
        return $this->container['allow_transfer'];
    }

    /**
     * Sets allow_transfer
     *
     * @param string|null $allow_transfer DNS zone transfer IP address list.
     *
     * @return self
     */
    public function setAllowTransfer($allow_transfer)
    {
        $this->container['allow_transfer'] = $allow_transfer;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Zone type (master to manage entries directly, slave to import entries from other zones).    master:Master DNS zone, to manage entries directly.    slave:Slave DNS zone, to import entries from other DNS zones.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string|null $view Zone view (public to serve public clients, shadow to serve internal clients).    shadow:Shadow DNS zone to serve internal clients.    public:Public DNS zone to serve public clients.
     *
     * @return self
     */
    public function setView($view)
    {
        $allowedValues = $this->getViewAllowableValues();
        if (!is_null($view) && !in_array($view, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view', must be one of '%s'",
                    $view,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets ip_master
     *
     * @return string|null
     */
    public function getIpMaster()
    {
        return $this->container['ip_master'];
    }

    /**
     * Sets ip_master
     *
     * @param string|null $ip_master IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
     *
     * @return self
     */
    public function setIpMaster($ip_master)
    {
        $this->container['ip_master'] = $ip_master;

        return $this;
    }

    /**
     * Gets primary_name
     *
     * @return string|null
     */
    public function getPrimaryName()
    {
        return $this->container['primary_name'];
    }

    /**
     * Sets primary_name
     *
     * @param string|null $primary_name Domain name of the default DNS server for this zone.
     *
     * @return self
     */
    public function setPrimaryName($primary_name)
    {
        if (!is_null($primary_name) && (mb_strlen($primary_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $primary_name when calling InlineObject296., must be smaller than or equal to 255.');
        }

        $this->container['primary_name'] = $primary_name;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string|null $contact Email address of the administrator for this zone.   You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)    When using a simple username, the domain of the email will be this zone.
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (!is_null($contact) && (mb_strlen($contact) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact when calling InlineObject296., must be smaller than or equal to 255.');
        }

        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int|null
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int|null $ttl Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
     *
     * @return self
     */
    public function setTtl($ttl)
    {

        if (!is_null($ttl) && ($ttl > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $ttl when calling InlineObject296., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ttl) && ($ttl < 0)) {
            throw new \InvalidArgumentException('invalid value for $ttl when calling InlineObject296., must be bigger than or equal to 0.');
        }

        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets authoritative
     *
     * @return string|null
     */
    public function getAuthoritative()
    {
        return $this->container['authoritative'];
    }

    /**
     * Sets authoritative
     *
     * @param string|null $authoritative Enable/disable authoritative zone.    enable:Enable authoritative zone.    disable:Disable authoritative zone.
     *
     * @return self
     */
    public function setAuthoritative($authoritative)
    {
        $allowedValues = $this->getAuthoritativeAllowableValues();
        if (!is_null($authoritative) && !in_array($authoritative, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authoritative', must be one of '%s'",
                    $authoritative,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authoritative'] = $authoritative;

        return $this;
    }

    /**
     * Gets forwarder
     *
     * @return string|null
     */
    public function getForwarder()
    {
        return $this->container['forwarder'];
    }

    /**
     * Sets forwarder
     *
     * @param string|null $forwarder DNS zone forwarder IP address list.
     *
     * @return self
     */
    public function setForwarder($forwarder)
    {
        $this->container['forwarder'] = $forwarder;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP for forwarding to DNS server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets rr_max
     *
     * @return int|null
     */
    public function getRrMax()
    {
        return $this->container['rr_max'];
    }

    /**
     * Sets rr_max
     *
     * @param int|null $rr_max Maximum number of resource records (10 - 65536, 0 means infinite).
     *
     * @return self
     */
    public function setRrMax($rr_max)
    {

        if (!is_null($rr_max) && ($rr_max > 65536)) {
            throw new \InvalidArgumentException('invalid value for $rr_max when calling InlineObject296., must be smaller than or equal to 65536.');
        }
        if (!is_null($rr_max) && ($rr_max < 10)) {
            throw new \InvalidArgumentException('invalid value for $rr_max when calling InlineObject296., must be bigger than or equal to 10.');
        }

        $this->container['rr_max'] = $rr_max;

        return $this;
    }

    /**
     * Gets dns_entry
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDnsDatabaseNameDnsEntry[]|null
     */
    public function getDnsEntry()
    {
        return $this->container['dns_entry'];
    }

    /**
     * Sets dns_entry
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDnsDatabaseNameDnsEntry[]|null $dns_entry DNS entry.
     *
     * @return self
     */
    public function setDnsEntry($dns_entry)
    {

        if (!is_null($dns_entry) && (count($dns_entry) > 0)) {
            throw new \InvalidArgumentException('invalid value for $dns_entry when calling InlineObject296., number of items must be less than or equal to 0.');
        }
        $this->container['dns_entry'] = $dns_entry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


