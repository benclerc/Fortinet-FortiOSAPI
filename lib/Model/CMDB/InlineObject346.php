<?php
/**
 * InlineObject346
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject346 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject346 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_346';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collector_ip' => 'string',
        'collector_port' => 'int',
        'source_ip' => 'string',
        'active_flow_timeout' => 'int',
        'inactive_flow_timeout' => 'int',
        'template_tx_timeout' => 'int',
        'template_tx_counter' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'collector_ip' => 'ipv4',
        'collector_port' => null,
        'source_ip' => 'ipv4',
        'active_flow_timeout' => null,
        'inactive_flow_timeout' => null,
        'template_tx_timeout' => null,
        'template_tx_counter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collector_ip' => 'collector-ip',
        'collector_port' => 'collector-port',
        'source_ip' => 'source-ip',
        'active_flow_timeout' => 'active-flow-timeout',
        'inactive_flow_timeout' => 'inactive-flow-timeout',
        'template_tx_timeout' => 'template-tx-timeout',
        'template_tx_counter' => 'template-tx-counter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collector_ip' => 'setCollectorIp',
        'collector_port' => 'setCollectorPort',
        'source_ip' => 'setSourceIp',
        'active_flow_timeout' => 'setActiveFlowTimeout',
        'inactive_flow_timeout' => 'setInactiveFlowTimeout',
        'template_tx_timeout' => 'setTemplateTxTimeout',
        'template_tx_counter' => 'setTemplateTxCounter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collector_ip' => 'getCollectorIp',
        'collector_port' => 'getCollectorPort',
        'source_ip' => 'getSourceIp',
        'active_flow_timeout' => 'getActiveFlowTimeout',
        'inactive_flow_timeout' => 'getInactiveFlowTimeout',
        'template_tx_timeout' => 'getTemplateTxTimeout',
        'template_tx_counter' => 'getTemplateTxCounter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collector_ip'] = $data['collector_ip'] ?? null;
        $this->container['collector_port'] = $data['collector_port'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['active_flow_timeout'] = $data['active_flow_timeout'] ?? null;
        $this->container['inactive_flow_timeout'] = $data['inactive_flow_timeout'] ?? null;
        $this->container['template_tx_timeout'] = $data['template_tx_timeout'] ?? null;
        $this->container['template_tx_counter'] = $data['template_tx_counter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['collector_port']) && ($this->container['collector_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'collector_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['collector_port']) && ($this->container['collector_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'collector_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['active_flow_timeout']) && ($this->container['active_flow_timeout'] > 60)) {
            $invalidProperties[] = "invalid value for 'active_flow_timeout', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['active_flow_timeout']) && ($this->container['active_flow_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'active_flow_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inactive_flow_timeout']) && ($this->container['inactive_flow_timeout'] > 600)) {
            $invalidProperties[] = "invalid value for 'inactive_flow_timeout', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['inactive_flow_timeout']) && ($this->container['inactive_flow_timeout'] < 10)) {
            $invalidProperties[] = "invalid value for 'inactive_flow_timeout', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['template_tx_timeout']) && ($this->container['template_tx_timeout'] > 1440)) {
            $invalidProperties[] = "invalid value for 'template_tx_timeout', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['template_tx_timeout']) && ($this->container['template_tx_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'template_tx_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['template_tx_counter']) && ($this->container['template_tx_counter'] > 6000)) {
            $invalidProperties[] = "invalid value for 'template_tx_counter', must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['template_tx_counter']) && ($this->container['template_tx_counter'] < 10)) {
            $invalidProperties[] = "invalid value for 'template_tx_counter', must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collector_ip
     *
     * @return string|null
     */
    public function getCollectorIp()
    {
        return $this->container['collector_ip'];
    }

    /**
     * Sets collector_ip
     *
     * @param string|null $collector_ip Collector IP.
     *
     * @return self
     */
    public function setCollectorIp($collector_ip)
    {
        $this->container['collector_ip'] = $collector_ip;

        return $this;
    }

    /**
     * Gets collector_port
     *
     * @return int|null
     */
    public function getCollectorPort()
    {
        return $this->container['collector_port'];
    }

    /**
     * Sets collector_port
     *
     * @param int|null $collector_port NetFlow collector port number.
     *
     * @return self
     */
    public function setCollectorPort($collector_port)
    {

        if (!is_null($collector_port) && ($collector_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $collector_port when calling InlineObject346., must be smaller than or equal to 65535.');
        }
        if (!is_null($collector_port) && ($collector_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $collector_port when calling InlineObject346., must be bigger than or equal to 0.');
        }

        $this->container['collector_port'] = $collector_port;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address for communication with the NetFlow agent.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets active_flow_timeout
     *
     * @return int|null
     */
    public function getActiveFlowTimeout()
    {
        return $this->container['active_flow_timeout'];
    }

    /**
     * Sets active_flow_timeout
     *
     * @param int|null $active_flow_timeout Timeout to report active flows (1 - 60 min, default = 30).
     *
     * @return self
     */
    public function setActiveFlowTimeout($active_flow_timeout)
    {

        if (!is_null($active_flow_timeout) && ($active_flow_timeout > 60)) {
            throw new \InvalidArgumentException('invalid value for $active_flow_timeout when calling InlineObject346., must be smaller than or equal to 60.');
        }
        if (!is_null($active_flow_timeout) && ($active_flow_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $active_flow_timeout when calling InlineObject346., must be bigger than or equal to 1.');
        }

        $this->container['active_flow_timeout'] = $active_flow_timeout;

        return $this;
    }

    /**
     * Gets inactive_flow_timeout
     *
     * @return int|null
     */
    public function getInactiveFlowTimeout()
    {
        return $this->container['inactive_flow_timeout'];
    }

    /**
     * Sets inactive_flow_timeout
     *
     * @param int|null $inactive_flow_timeout Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
     *
     * @return self
     */
    public function setInactiveFlowTimeout($inactive_flow_timeout)
    {

        if (!is_null($inactive_flow_timeout) && ($inactive_flow_timeout > 600)) {
            throw new \InvalidArgumentException('invalid value for $inactive_flow_timeout when calling InlineObject346., must be smaller than or equal to 600.');
        }
        if (!is_null($inactive_flow_timeout) && ($inactive_flow_timeout < 10)) {
            throw new \InvalidArgumentException('invalid value for $inactive_flow_timeout when calling InlineObject346., must be bigger than or equal to 10.');
        }

        $this->container['inactive_flow_timeout'] = $inactive_flow_timeout;

        return $this;
    }

    /**
     * Gets template_tx_timeout
     *
     * @return int|null
     */
    public function getTemplateTxTimeout()
    {
        return $this->container['template_tx_timeout'];
    }

    /**
     * Sets template_tx_timeout
     *
     * @param int|null $template_tx_timeout Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
     *
     * @return self
     */
    public function setTemplateTxTimeout($template_tx_timeout)
    {

        if (!is_null($template_tx_timeout) && ($template_tx_timeout > 1440)) {
            throw new \InvalidArgumentException('invalid value for $template_tx_timeout when calling InlineObject346., must be smaller than or equal to 1440.');
        }
        if (!is_null($template_tx_timeout) && ($template_tx_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $template_tx_timeout when calling InlineObject346., must be bigger than or equal to 1.');
        }

        $this->container['template_tx_timeout'] = $template_tx_timeout;

        return $this;
    }

    /**
     * Gets template_tx_counter
     *
     * @return int|null
     */
    public function getTemplateTxCounter()
    {
        return $this->container['template_tx_counter'];
    }

    /**
     * Sets template_tx_counter
     *
     * @param int|null $template_tx_counter Counter of flowset records before resending a template flowset record.
     *
     * @return self
     */
    public function setTemplateTxCounter($template_tx_counter)
    {

        if (!is_null($template_tx_counter) && ($template_tx_counter > 6000)) {
            throw new \InvalidArgumentException('invalid value for $template_tx_counter when calling InlineObject346., must be smaller than or equal to 6000.');
        }
        if (!is_null($template_tx_counter) && ($template_tx_counter < 10)) {
            throw new \InvalidArgumentException('invalid value for $template_tx_counter when calling InlineObject346., must be bigger than or equal to 10.');
        }

        $this->container['template_tx_counter'] = $template_tx_counter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


