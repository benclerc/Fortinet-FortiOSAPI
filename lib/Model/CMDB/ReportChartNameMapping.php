<?php
/**
 * ReportChartNameMapping
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportChartNameMapping Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportChartNameMapping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_chart__name__mapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'op' => 'string',
        'value_type' => 'string',
        'value1' => 'string',
        'value2' => 'string',
        'displayname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'op' => null,
        'value_type' => null,
        'value1' => null,
        'value2' => null,
        'displayname' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'op' => 'op',
        'value_type' => 'value-type',
        'value1' => 'value1',
        'value2' => 'value2',
        'displayname' => 'displayname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'op' => 'setOp',
        'value_type' => 'setValueType',
        'value1' => 'setValue1',
        'value2' => 'setValue2',
        'displayname' => 'setDisplayname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'op' => 'getOp',
        'value_type' => 'getValueType',
        'value1' => 'getValue1',
        'value2' => 'getValue2',
        'displayname' => 'getDisplayname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OP_NONE = 'none';
    const OP_GREATER = 'greater';
    const OP_GREATER_EQUAL = 'greater-equal';
    const OP_LESS = 'less';
    const OP_LESS_EQUAL = 'less-equal';
    const OP_EQUAL = 'equal';
    const OP_BETWEEN = 'between';
    const VALUE_TYPE_INTEGER = 'integer';
    const VALUE_TYPE_STRING = 'string';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpAllowableValues()
    {
        return [
            self::OP_NONE,
            self::OP_GREATER,
            self::OP_GREATER_EQUAL,
            self::OP_LESS,
            self::OP_LESS_EQUAL,
            self::OP_EQUAL,
            self::OP_BETWEEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueTypeAllowableValues()
    {
        return [
            self::VALUE_TYPE_INTEGER,
            self::VALUE_TYPE_STRING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['op'] = $data['op'] ?? null;
        $this->container['value_type'] = $data['value_type'] ?? null;
        $this->container['value1'] = $data['value1'] ?? null;
        $this->container['value2'] = $data['value2'] ?? null;
        $this->container['displayname'] = $data['displayname'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOpAllowableValues();
        if (!is_null($this->container['op']) && !in_array($this->container['op'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'op', must be one of '%s'",
                $this->container['op'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($this->container['value_type']) && !in_array($this->container['value_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'value_type', must be one of '%s'",
                $this->container['value_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['value1']) && (mb_strlen($this->container['value1']) > 127)) {
            $invalidProperties[] = "invalid value for 'value1', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['value2']) && (mb_strlen($this->container['value2']) > 127)) {
            $invalidProperties[] = "invalid value for 'value2', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['displayname']) && (mb_strlen($this->container['displayname']) > 127)) {
            $invalidProperties[] = "invalid value for 'displayname', the character length must be smaller than or equal to 127.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportChartNameMapping., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportChartNameMapping., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets op
     *
     * @return string|null
     */
    public function getOp()
    {
        return $this->container['op'];
    }

    /**
     * Sets op
     *
     * @param string|null $op Comparision operater.    none:None.    greater:Greater than.    greater-equal:Greater than or equal to.    less:Less than.    less-equal:Less than or equal to.    equal:Equal to.    between:Between value 1 and value 2.
     *
     * @return self
     */
    public function setOp($op)
    {
        $allowedValues = $this->getOpAllowableValues();
        if (!is_null($op) && !in_array($op, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'op', must be one of '%s'",
                    $op,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['op'] = $op;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string|null
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string|null $value_type Value type.    integer:Integer.    string:String.
     *
     * @return self
     */
    public function setValueType($value_type)
    {
        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($value_type) && !in_array($value_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'value_type', must be one of '%s'",
                    $value_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets value1
     *
     * @return string|null
     */
    public function getValue1()
    {
        return $this->container['value1'];
    }

    /**
     * Sets value1
     *
     * @param string|null $value1 Value 1.
     *
     * @return self
     */
    public function setValue1($value1)
    {
        if (!is_null($value1) && (mb_strlen($value1) > 127)) {
            throw new \InvalidArgumentException('invalid length for $value1 when calling ReportChartNameMapping., must be smaller than or equal to 127.');
        }

        $this->container['value1'] = $value1;

        return $this;
    }

    /**
     * Gets value2
     *
     * @return string|null
     */
    public function getValue2()
    {
        return $this->container['value2'];
    }

    /**
     * Sets value2
     *
     * @param string|null $value2 Value 2.
     *
     * @return self
     */
    public function setValue2($value2)
    {
        if (!is_null($value2) && (mb_strlen($value2) > 127)) {
            throw new \InvalidArgumentException('invalid length for $value2 when calling ReportChartNameMapping., must be smaller than or equal to 127.');
        }

        $this->container['value2'] = $value2;

        return $this;
    }

    /**
     * Gets displayname
     *
     * @return string|null
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     *
     * @param string|null $displayname Display name.
     *
     * @return self
     */
    public function setDisplayname($displayname)
    {
        if (!is_null($displayname) && (mb_strlen($displayname) > 127)) {
            throw new \InvalidArgumentException('invalid length for $displayname when calling ReportChartNameMapping., must be smaller than or equal to 127.');
        }

        $this->container['displayname'] = $displayname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


