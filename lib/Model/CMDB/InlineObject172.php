<?php
/**
 * InlineObject172
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject172 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject172 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_172';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'seq_num' => 'int',
        'input_device' => '\Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]',
        'src' => 'string',
        'dst' => 'string',
        'protocol' => 'int',
        'start_port' => 'int',
        'end_port' => 'int',
        'gateway' => 'string',
        'output_device' => 'string',
        'tos' => 'string',
        'tos_mask' => 'string',
        'status' => 'string',
        'comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'seq_num' => null,
        'input_device' => null,
        'src' => null,
        'dst' => null,
        'protocol' => null,
        'start_port' => null,
        'end_port' => null,
        'gateway' => 'ipv6',
        'output_device' => null,
        'tos' => null,
        'tos_mask' => null,
        'status' => null,
        'comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seq_num' => 'seq-num',
        'input_device' => 'input-device',
        'src' => 'src',
        'dst' => 'dst',
        'protocol' => 'protocol',
        'start_port' => 'start-port',
        'end_port' => 'end-port',
        'gateway' => 'gateway',
        'output_device' => 'output-device',
        'tos' => 'tos',
        'tos_mask' => 'tos-mask',
        'status' => 'status',
        'comments' => 'comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seq_num' => 'setSeqNum',
        'input_device' => 'setInputDevice',
        'src' => 'setSrc',
        'dst' => 'setDst',
        'protocol' => 'setProtocol',
        'start_port' => 'setStartPort',
        'end_port' => 'setEndPort',
        'gateway' => 'setGateway',
        'output_device' => 'setOutputDevice',
        'tos' => 'setTos',
        'tos_mask' => 'setTosMask',
        'status' => 'setStatus',
        'comments' => 'setComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seq_num' => 'getSeqNum',
        'input_device' => 'getInputDevice',
        'src' => 'getSrc',
        'dst' => 'getDst',
        'protocol' => 'getProtocol',
        'start_port' => 'getStartPort',
        'end_port' => 'getEndPort',
        'gateway' => 'getGateway',
        'output_device' => 'getOutputDevice',
        'tos' => 'getTos',
        'tos_mask' => 'getTosMask',
        'status' => 'getStatus',
        'comments' => 'getComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seq_num'] = $data['seq_num'] ?? null;
        $this->container['input_device'] = $data['input_device'] ?? null;
        $this->container['src'] = $data['src'] ?? null;
        $this->container['dst'] = $data['dst'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['start_port'] = $data['start_port'] ?? null;
        $this->container['end_port'] = $data['end_port'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['output_device'] = $data['output_device'] ?? null;
        $this->container['tos'] = $data['tos'] ?? null;
        $this->container['tos_mask'] = $data['tos_mask'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] > 65535)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] < 1)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['input_device']) && (count($this->container['input_device']) > 0)) {
            $invalidProperties[] = "invalid value for 'input_device', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] > 255)) {
            $invalidProperties[] = "invalid value for 'protocol', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] < 0)) {
            $invalidProperties[] = "invalid value for 'protocol', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['start_port']) && ($this->container['start_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'start_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['start_port']) && ($this->container['start_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'start_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['end_port']) && ($this->container['end_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'end_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['end_port']) && ($this->container['end_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'end_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['output_device']) && (mb_strlen($this->container['output_device']) > 35)) {
            $invalidProperties[] = "invalid value for 'output_device', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seq_num
     *
     * @return int|null
     */
    public function getSeqNum()
    {
        return $this->container['seq_num'];
    }

    /**
     * Sets seq_num
     *
     * @param int|null $seq_num Sequence number(1-65535).
     *
     * @return self
     */
    public function setSeqNum($seq_num)
    {

        if (!is_null($seq_num) && ($seq_num > 65535)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling InlineObject172., must be smaller than or equal to 65535.');
        }
        if (!is_null($seq_num) && ($seq_num < 1)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling InlineObject172., must be bigger than or equal to 1.');
        }

        $this->container['seq_num'] = $seq_num;

        return $this;
    }

    /**
     * Gets input_device
     *
     * @return \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null
     */
    public function getInputDevice()
    {
        return $this->container['input_device'];
    }

    /**
     * Sets input_device
     *
     * @param \Fortigate\FortiOS\Model\CMDB\RouterPolicySeqNumInputDevice[]|null $input_device Incoming interface name.
     *
     * @return self
     */
    public function setInputDevice($input_device)
    {

        if (!is_null($input_device) && (count($input_device) > 0)) {
            throw new \InvalidArgumentException('invalid value for $input_device when calling InlineObject172., number of items must be less than or equal to 0.');
        }
        $this->container['input_device'] = $input_device;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string|null
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string|null $src Source IPv6 prefix.
     *
     * @return self
     */
    public function setSrc($src)
    {
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string|null $dst Destination IPv6 prefix.
     *
     * @return self
     */
    public function setDst($dst)
    {
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return int|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param int|null $protocol Protocol number (0 - 255).
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if (!is_null($protocol) && ($protocol > 255)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling InlineObject172., must be smaller than or equal to 255.');
        }
        if (!is_null($protocol) && ($protocol < 0)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling InlineObject172., must be bigger than or equal to 0.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets start_port
     *
     * @return int|null
     */
    public function getStartPort()
    {
        return $this->container['start_port'];
    }

    /**
     * Sets start_port
     *
     * @param int|null $start_port Start destination port number (1 - 65535).
     *
     * @return self
     */
    public function setStartPort($start_port)
    {

        if (!is_null($start_port) && ($start_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $start_port when calling InlineObject172., must be smaller than or equal to 65535.');
        }
        if (!is_null($start_port) && ($start_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $start_port when calling InlineObject172., must be bigger than or equal to 1.');
        }

        $this->container['start_port'] = $start_port;

        return $this;
    }

    /**
     * Gets end_port
     *
     * @return int|null
     */
    public function getEndPort()
    {
        return $this->container['end_port'];
    }

    /**
     * Sets end_port
     *
     * @param int|null $end_port End destination port number (1 - 65535).
     *
     * @return self
     */
    public function setEndPort($end_port)
    {

        if (!is_null($end_port) && ($end_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $end_port when calling InlineObject172., must be smaller than or equal to 65535.');
        }
        if (!is_null($end_port) && ($end_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $end_port when calling InlineObject172., must be bigger than or equal to 1.');
        }

        $this->container['end_port'] = $end_port;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway IPv6 address of the gateway.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets output_device
     *
     * @return string|null
     */
    public function getOutputDevice()
    {
        return $this->container['output_device'];
    }

    /**
     * Sets output_device
     *
     * @param string|null $output_device Outgoing interface name.
     *
     * @return self
     */
    public function setOutputDevice($output_device)
    {
        if (!is_null($output_device) && (mb_strlen($output_device) > 35)) {
            throw new \InvalidArgumentException('invalid length for $output_device when calling InlineObject172., must be smaller than or equal to 35.');
        }

        $this->container['output_device'] = $output_device;

        return $this;
    }

    /**
     * Gets tos
     *
     * @return string|null
     */
    public function getTos()
    {
        return $this->container['tos'];
    }

    /**
     * Sets tos
     *
     * @param string|null $tos Type of service bit pattern.
     *
     * @return self
     */
    public function setTos($tos)
    {
        $this->container['tos'] = $tos;

        return $this;
    }

    /**
     * Gets tos_mask
     *
     * @return string|null
     */
    public function getTosMask()
    {
        return $this->container['tos_mask'];
    }

    /**
     * Sets tos_mask
     *
     * @param string|null $tos_mask Type of service evaluated bits.
     *
     * @return self
     */
    public function setTosMask($tos_mask)
    {
        $this->container['tos_mask'] = $tos_mask;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this policy route.    enable:Enable this policy route.    disable:Disable this policy route.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Optional comments.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject172., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


