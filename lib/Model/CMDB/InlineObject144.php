<?php
/**
 * InlineObject144
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject144 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject144 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_144';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'options' => 'string',
        'font_family' => 'string',
        'font_style' => 'string',
        'font_weight' => 'string',
        'font_size' => 'string',
        'line_height' => 'string',
        'fg_color' => 'string',
        'bg_color' => 'string',
        'align' => 'string',
        'width' => 'string',
        'height' => 'string',
        'margin_top' => 'string',
        'margin_right' => 'string',
        'margin_bottom' => 'string',
        'margin_left' => 'string',
        'border_top' => 'string',
        'border_right' => 'string',
        'border_bottom' => 'string',
        'border_left' => 'string',
        'padding_top' => 'string',
        'padding_right' => 'string',
        'padding_bottom' => 'string',
        'padding_left' => 'string',
        'column_span' => 'string',
        'column_gap' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'options' => null,
        'font_family' => null,
        'font_style' => null,
        'font_weight' => null,
        'font_size' => null,
        'line_height' => null,
        'fg_color' => null,
        'bg_color' => null,
        'align' => null,
        'width' => null,
        'height' => null,
        'margin_top' => null,
        'margin_right' => null,
        'margin_bottom' => null,
        'margin_left' => null,
        'border_top' => null,
        'border_right' => null,
        'border_bottom' => null,
        'border_left' => null,
        'padding_top' => null,
        'padding_right' => null,
        'padding_bottom' => null,
        'padding_left' => null,
        'column_span' => null,
        'column_gap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'options' => 'options',
        'font_family' => 'font-family',
        'font_style' => 'font-style',
        'font_weight' => 'font-weight',
        'font_size' => 'font-size',
        'line_height' => 'line-height',
        'fg_color' => 'fg-color',
        'bg_color' => 'bg-color',
        'align' => 'align',
        'width' => 'width',
        'height' => 'height',
        'margin_top' => 'margin-top',
        'margin_right' => 'margin-right',
        'margin_bottom' => 'margin-bottom',
        'margin_left' => 'margin-left',
        'border_top' => 'border-top',
        'border_right' => 'border-right',
        'border_bottom' => 'border-bottom',
        'border_left' => 'border-left',
        'padding_top' => 'padding-top',
        'padding_right' => 'padding-right',
        'padding_bottom' => 'padding-bottom',
        'padding_left' => 'padding-left',
        'column_span' => 'column-span',
        'column_gap' => 'column-gap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'options' => 'setOptions',
        'font_family' => 'setFontFamily',
        'font_style' => 'setFontStyle',
        'font_weight' => 'setFontWeight',
        'font_size' => 'setFontSize',
        'line_height' => 'setLineHeight',
        'fg_color' => 'setFgColor',
        'bg_color' => 'setBgColor',
        'align' => 'setAlign',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'margin_top' => 'setMarginTop',
        'margin_right' => 'setMarginRight',
        'margin_bottom' => 'setMarginBottom',
        'margin_left' => 'setMarginLeft',
        'border_top' => 'setBorderTop',
        'border_right' => 'setBorderRight',
        'border_bottom' => 'setBorderBottom',
        'border_left' => 'setBorderLeft',
        'padding_top' => 'setPaddingTop',
        'padding_right' => 'setPaddingRight',
        'padding_bottom' => 'setPaddingBottom',
        'padding_left' => 'setPaddingLeft',
        'column_span' => 'setColumnSpan',
        'column_gap' => 'setColumnGap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'options' => 'getOptions',
        'font_family' => 'getFontFamily',
        'font_style' => 'getFontStyle',
        'font_weight' => 'getFontWeight',
        'font_size' => 'getFontSize',
        'line_height' => 'getLineHeight',
        'fg_color' => 'getFgColor',
        'bg_color' => 'getBgColor',
        'align' => 'getAlign',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'margin_top' => 'getMarginTop',
        'margin_right' => 'getMarginRight',
        'margin_bottom' => 'getMarginBottom',
        'margin_left' => 'getMarginLeft',
        'border_top' => 'getBorderTop',
        'border_right' => 'getBorderRight',
        'border_bottom' => 'getBorderBottom',
        'border_left' => 'getBorderLeft',
        'padding_top' => 'getPaddingTop',
        'padding_right' => 'getPaddingRight',
        'padding_bottom' => 'getPaddingBottom',
        'padding_left' => 'getPaddingLeft',
        'column_span' => 'getColumnSpan',
        'column_gap' => 'getColumnGap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OPTIONS_FONT = 'font';
    const OPTIONS_TEXT = 'text';
    const OPTIONS_COLOR = 'color';
    const OPTIONS_ALIGN = 'align';
    const OPTIONS_SIZE = 'size';
    const OPTIONS_MARGIN = 'margin';
    const OPTIONS_BORDER = 'border';
    const OPTIONS_PADDING = 'padding';
    const OPTIONS_COLUMN = 'column';
    const FONT_FAMILY_VERDANA = 'Verdana';
    const FONT_FAMILY_ARIAL = 'Arial';
    const FONT_FAMILY_HELVETICA = 'Helvetica';
    const FONT_FAMILY_COURIER = 'Courier';
    const FONT_FAMILY_TIMES = 'Times';
    const FONT_STYLE_NORMAL = 'normal';
    const FONT_STYLE_ITALIC = 'italic';
    const FONT_WEIGHT_NORMAL = 'normal';
    const FONT_WEIGHT_BOLD = 'bold';
    const ALIGN_LEFT = 'left';
    const ALIGN_CENTER = 'center';
    const ALIGN_RIGHT = 'right';
    const ALIGN_JUSTIFY = 'justify';
    const COLUMN_SPAN_NONE = 'none';
    const COLUMN_SPAN_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_FONT,
            self::OPTIONS_TEXT,
            self::OPTIONS_COLOR,
            self::OPTIONS_ALIGN,
            self::OPTIONS_SIZE,
            self::OPTIONS_MARGIN,
            self::OPTIONS_BORDER,
            self::OPTIONS_PADDING,
            self::OPTIONS_COLUMN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFontFamilyAllowableValues()
    {
        return [
            self::FONT_FAMILY_VERDANA,
            self::FONT_FAMILY_ARIAL,
            self::FONT_FAMILY_HELVETICA,
            self::FONT_FAMILY_COURIER,
            self::FONT_FAMILY_TIMES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFontStyleAllowableValues()
    {
        return [
            self::FONT_STYLE_NORMAL,
            self::FONT_STYLE_ITALIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFontWeightAllowableValues()
    {
        return [
            self::FONT_WEIGHT_NORMAL,
            self::FONT_WEIGHT_BOLD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlignAllowableValues()
    {
        return [
            self::ALIGN_LEFT,
            self::ALIGN_CENTER,
            self::ALIGN_RIGHT,
            self::ALIGN_JUSTIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColumnSpanAllowableValues()
    {
        return [
            self::COLUMN_SPAN_NONE,
            self::COLUMN_SPAN_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['font_family'] = $data['font_family'] ?? null;
        $this->container['font_style'] = $data['font_style'] ?? null;
        $this->container['font_weight'] = $data['font_weight'] ?? null;
        $this->container['font_size'] = $data['font_size'] ?? null;
        $this->container['line_height'] = $data['line_height'] ?? null;
        $this->container['fg_color'] = $data['fg_color'] ?? null;
        $this->container['bg_color'] = $data['bg_color'] ?? null;
        $this->container['align'] = $data['align'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['margin_top'] = $data['margin_top'] ?? null;
        $this->container['margin_right'] = $data['margin_right'] ?? null;
        $this->container['margin_bottom'] = $data['margin_bottom'] ?? null;
        $this->container['margin_left'] = $data['margin_left'] ?? null;
        $this->container['border_top'] = $data['border_top'] ?? null;
        $this->container['border_right'] = $data['border_right'] ?? null;
        $this->container['border_bottom'] = $data['border_bottom'] ?? null;
        $this->container['border_left'] = $data['border_left'] ?? null;
        $this->container['padding_top'] = $data['padding_top'] ?? null;
        $this->container['padding_right'] = $data['padding_right'] ?? null;
        $this->container['padding_bottom'] = $data['padding_bottom'] ?? null;
        $this->container['padding_left'] = $data['padding_left'] ?? null;
        $this->container['column_span'] = $data['column_span'] ?? null;
        $this->container['column_gap'] = $data['column_gap'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 71)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 71.";
        }

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFontFamilyAllowableValues();
        if (!is_null($this->container['font_family']) && !in_array($this->container['font_family'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'font_family', must be one of '%s'",
                $this->container['font_family'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFontStyleAllowableValues();
        if (!is_null($this->container['font_style']) && !in_array($this->container['font_style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'font_style', must be one of '%s'",
                $this->container['font_style'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFontWeightAllowableValues();
        if (!is_null($this->container['font_weight']) && !in_array($this->container['font_weight'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'font_weight', must be one of '%s'",
                $this->container['font_weight'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['font_size']) && (mb_strlen($this->container['font_size']) > 15)) {
            $invalidProperties[] = "invalid value for 'font_size', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['line_height']) && (mb_strlen($this->container['line_height']) > 15)) {
            $invalidProperties[] = "invalid value for 'line_height', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['fg_color']) && (mb_strlen($this->container['fg_color']) > 15)) {
            $invalidProperties[] = "invalid value for 'fg_color', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['bg_color']) && (mb_strlen($this->container['bg_color']) > 15)) {
            $invalidProperties[] = "invalid value for 'bg_color', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getAlignAllowableValues();
        if (!is_null($this->container['align']) && !in_array($this->container['align'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'align', must be one of '%s'",
                $this->container['align'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['width']) && (mb_strlen($this->container['width']) > 15)) {
            $invalidProperties[] = "invalid value for 'width', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['height']) && (mb_strlen($this->container['height']) > 15)) {
            $invalidProperties[] = "invalid value for 'height', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['margin_top']) && (mb_strlen($this->container['margin_top']) > 15)) {
            $invalidProperties[] = "invalid value for 'margin_top', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['margin_right']) && (mb_strlen($this->container['margin_right']) > 15)) {
            $invalidProperties[] = "invalid value for 'margin_right', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['margin_bottom']) && (mb_strlen($this->container['margin_bottom']) > 15)) {
            $invalidProperties[] = "invalid value for 'margin_bottom', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['margin_left']) && (mb_strlen($this->container['margin_left']) > 15)) {
            $invalidProperties[] = "invalid value for 'margin_left', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['padding_top']) && (mb_strlen($this->container['padding_top']) > 15)) {
            $invalidProperties[] = "invalid value for 'padding_top', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['padding_right']) && (mb_strlen($this->container['padding_right']) > 15)) {
            $invalidProperties[] = "invalid value for 'padding_right', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['padding_bottom']) && (mb_strlen($this->container['padding_bottom']) > 15)) {
            $invalidProperties[] = "invalid value for 'padding_bottom', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['padding_left']) && (mb_strlen($this->container['padding_left']) > 15)) {
            $invalidProperties[] = "invalid value for 'padding_left', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getColumnSpanAllowableValues();
        if (!is_null($this->container['column_span']) && !in_array($this->container['column_span'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'column_span', must be one of '%s'",
                $this->container['column_span'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['column_gap']) && (mb_strlen($this->container['column_gap']) > 15)) {
            $invalidProperties[] = "invalid value for 'column_gap', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Report style name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 71)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject144., must be smaller than or equal to 71.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Report style options.    font:Font.    text:Text.    color:Color.    align:Align.    size:Size.    margin:Margin.    border:Border.    padding:Padding.    column:Column.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return string|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string|null $font_family Font family.    Verdana:Verdana.    Arial:Arial.    Helvetica:Helvetica.    Courier:Courier.    Times:Times Roman.
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        $allowedValues = $this->getFontFamilyAllowableValues();
        if (!is_null($font_family) && !in_array($font_family, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'font_family', must be one of '%s'",
                    $font_family,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return string|null
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param string|null $font_style Font style.    normal:Normal.    italic:Italic.
     *
     * @return self
     */
    public function setFontStyle($font_style)
    {
        $allowedValues = $this->getFontStyleAllowableValues();
        if (!is_null($font_style) && !in_array($font_style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'font_style', must be one of '%s'",
                    $font_style,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return string|null
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param string|null $font_weight Font weight.    normal:Normal.    bold:Bold.
     *
     * @return self
     */
    public function setFontWeight($font_weight)
    {
        $allowedValues = $this->getFontWeightAllowableValues();
        if (!is_null($font_weight) && !in_array($font_weight, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'font_weight', must be one of '%s'",
                    $font_weight,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return string|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param string|null $font_size Font size.
     *
     * @return self
     */
    public function setFontSize($font_size)
    {
        if (!is_null($font_size) && (mb_strlen($font_size) > 15)) {
            throw new \InvalidArgumentException('invalid length for $font_size when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets line_height
     *
     * @return string|null
     */
    public function getLineHeight()
    {
        return $this->container['line_height'];
    }

    /**
     * Sets line_height
     *
     * @param string|null $line_height Text line height.
     *
     * @return self
     */
    public function setLineHeight($line_height)
    {
        if (!is_null($line_height) && (mb_strlen($line_height) > 15)) {
            throw new \InvalidArgumentException('invalid length for $line_height when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['line_height'] = $line_height;

        return $this;
    }

    /**
     * Gets fg_color
     *
     * @return string|null
     */
    public function getFgColor()
    {
        return $this->container['fg_color'];
    }

    /**
     * Sets fg_color
     *
     * @param string|null $fg_color Foreground color.
     *
     * @return self
     */
    public function setFgColor($fg_color)
    {
        if (!is_null($fg_color) && (mb_strlen($fg_color) > 15)) {
            throw new \InvalidArgumentException('invalid length for $fg_color when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['fg_color'] = $fg_color;

        return $this;
    }

    /**
     * Gets bg_color
     *
     * @return string|null
     */
    public function getBgColor()
    {
        return $this->container['bg_color'];
    }

    /**
     * Sets bg_color
     *
     * @param string|null $bg_color Background color.
     *
     * @return self
     */
    public function setBgColor($bg_color)
    {
        if (!is_null($bg_color) && (mb_strlen($bg_color) > 15)) {
            throw new \InvalidArgumentException('invalid length for $bg_color when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['bg_color'] = $bg_color;

        return $this;
    }

    /**
     * Gets align
     *
     * @return string|null
     */
    public function getAlign()
    {
        return $this->container['align'];
    }

    /**
     * Sets align
     *
     * @param string|null $align Alignment.    left:Align left.    center:Align center.    right:Align right.    justify:Align justify.
     *
     * @return self
     */
    public function setAlign($align)
    {
        $allowedValues = $this->getAlignAllowableValues();
        if (!is_null($align) && !in_array($align, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'align', must be one of '%s'",
                    $align,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['align'] = $align;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width Width.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (!is_null($width) && (mb_strlen($width) > 15)) {
            throw new \InvalidArgumentException('invalid length for $width when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height Height.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (!is_null($height) && (mb_strlen($height) > 15)) {
            throw new \InvalidArgumentException('invalid length for $height when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets margin_top
     *
     * @return string|null
     */
    public function getMarginTop()
    {
        return $this->container['margin_top'];
    }

    /**
     * Sets margin_top
     *
     * @param string|null $margin_top Margin top.
     *
     * @return self
     */
    public function setMarginTop($margin_top)
    {
        if (!is_null($margin_top) && (mb_strlen($margin_top) > 15)) {
            throw new \InvalidArgumentException('invalid length for $margin_top when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['margin_top'] = $margin_top;

        return $this;
    }

    /**
     * Gets margin_right
     *
     * @return string|null
     */
    public function getMarginRight()
    {
        return $this->container['margin_right'];
    }

    /**
     * Sets margin_right
     *
     * @param string|null $margin_right Margin right.
     *
     * @return self
     */
    public function setMarginRight($margin_right)
    {
        if (!is_null($margin_right) && (mb_strlen($margin_right) > 15)) {
            throw new \InvalidArgumentException('invalid length for $margin_right when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['margin_right'] = $margin_right;

        return $this;
    }

    /**
     * Gets margin_bottom
     *
     * @return string|null
     */
    public function getMarginBottom()
    {
        return $this->container['margin_bottom'];
    }

    /**
     * Sets margin_bottom
     *
     * @param string|null $margin_bottom Margin bottom.
     *
     * @return self
     */
    public function setMarginBottom($margin_bottom)
    {
        if (!is_null($margin_bottom) && (mb_strlen($margin_bottom) > 15)) {
            throw new \InvalidArgumentException('invalid length for $margin_bottom when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['margin_bottom'] = $margin_bottom;

        return $this;
    }

    /**
     * Gets margin_left
     *
     * @return string|null
     */
    public function getMarginLeft()
    {
        return $this->container['margin_left'];
    }

    /**
     * Sets margin_left
     *
     * @param string|null $margin_left Margin left.
     *
     * @return self
     */
    public function setMarginLeft($margin_left)
    {
        if (!is_null($margin_left) && (mb_strlen($margin_left) > 15)) {
            throw new \InvalidArgumentException('invalid length for $margin_left when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['margin_left'] = $margin_left;

        return $this;
    }

    /**
     * Gets border_top
     *
     * @return string|null
     */
    public function getBorderTop()
    {
        return $this->container['border_top'];
    }

    /**
     * Sets border_top
     *
     * @param string|null $border_top Border top.
     *
     * @return self
     */
    public function setBorderTop($border_top)
    {
        $this->container['border_top'] = $border_top;

        return $this;
    }

    /**
     * Gets border_right
     *
     * @return string|null
     */
    public function getBorderRight()
    {
        return $this->container['border_right'];
    }

    /**
     * Sets border_right
     *
     * @param string|null $border_right Border right.
     *
     * @return self
     */
    public function setBorderRight($border_right)
    {
        $this->container['border_right'] = $border_right;

        return $this;
    }

    /**
     * Gets border_bottom
     *
     * @return string|null
     */
    public function getBorderBottom()
    {
        return $this->container['border_bottom'];
    }

    /**
     * Sets border_bottom
     *
     * @param string|null $border_bottom Border bottom.
     *
     * @return self
     */
    public function setBorderBottom($border_bottom)
    {
        $this->container['border_bottom'] = $border_bottom;

        return $this;
    }

    /**
     * Gets border_left
     *
     * @return string|null
     */
    public function getBorderLeft()
    {
        return $this->container['border_left'];
    }

    /**
     * Sets border_left
     *
     * @param string|null $border_left Border left.
     *
     * @return self
     */
    public function setBorderLeft($border_left)
    {
        $this->container['border_left'] = $border_left;

        return $this;
    }

    /**
     * Gets padding_top
     *
     * @return string|null
     */
    public function getPaddingTop()
    {
        return $this->container['padding_top'];
    }

    /**
     * Sets padding_top
     *
     * @param string|null $padding_top Padding top.
     *
     * @return self
     */
    public function setPaddingTop($padding_top)
    {
        if (!is_null($padding_top) && (mb_strlen($padding_top) > 15)) {
            throw new \InvalidArgumentException('invalid length for $padding_top when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['padding_top'] = $padding_top;

        return $this;
    }

    /**
     * Gets padding_right
     *
     * @return string|null
     */
    public function getPaddingRight()
    {
        return $this->container['padding_right'];
    }

    /**
     * Sets padding_right
     *
     * @param string|null $padding_right Padding right.
     *
     * @return self
     */
    public function setPaddingRight($padding_right)
    {
        if (!is_null($padding_right) && (mb_strlen($padding_right) > 15)) {
            throw new \InvalidArgumentException('invalid length for $padding_right when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['padding_right'] = $padding_right;

        return $this;
    }

    /**
     * Gets padding_bottom
     *
     * @return string|null
     */
    public function getPaddingBottom()
    {
        return $this->container['padding_bottom'];
    }

    /**
     * Sets padding_bottom
     *
     * @param string|null $padding_bottom Padding bottom.
     *
     * @return self
     */
    public function setPaddingBottom($padding_bottom)
    {
        if (!is_null($padding_bottom) && (mb_strlen($padding_bottom) > 15)) {
            throw new \InvalidArgumentException('invalid length for $padding_bottom when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['padding_bottom'] = $padding_bottom;

        return $this;
    }

    /**
     * Gets padding_left
     *
     * @return string|null
     */
    public function getPaddingLeft()
    {
        return $this->container['padding_left'];
    }

    /**
     * Sets padding_left
     *
     * @param string|null $padding_left Padding left.
     *
     * @return self
     */
    public function setPaddingLeft($padding_left)
    {
        if (!is_null($padding_left) && (mb_strlen($padding_left) > 15)) {
            throw new \InvalidArgumentException('invalid length for $padding_left when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['padding_left'] = $padding_left;

        return $this;
    }

    /**
     * Gets column_span
     *
     * @return string|null
     */
    public function getColumnSpan()
    {
        return $this->container['column_span'];
    }

    /**
     * Sets column_span
     *
     * @param string|null $column_span Column span.    none:Does not span.    all:Span across all columns.
     *
     * @return self
     */
    public function setColumnSpan($column_span)
    {
        $allowedValues = $this->getColumnSpanAllowableValues();
        if (!is_null($column_span) && !in_array($column_span, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'column_span', must be one of '%s'",
                    $column_span,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['column_span'] = $column_span;

        return $this;
    }

    /**
     * Gets column_gap
     *
     * @return string|null
     */
    public function getColumnGap()
    {
        return $this->container['column_gap'];
    }

    /**
     * Sets column_gap
     *
     * @param string|null $column_gap Column gap.
     *
     * @return self
     */
    public function setColumnGap($column_gap)
    {
        if (!is_null($column_gap) && (mb_strlen($column_gap) > 15)) {
            throw new \InvalidArgumentException('invalid length for $column_gap when calling InlineObject144., must be smaller than or equal to 15.');
        }

        $this->container['column_gap'] = $column_gap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


