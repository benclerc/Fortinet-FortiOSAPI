<?php
/**
 * ExtenderControllerExtenderNameModem1
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ExtenderControllerExtenderNameModem1 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ExtenderControllerExtenderNameModem1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_extender_controller_extender__name__modem1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ifname' => 'string',
        'redundant_mode' => 'string',
        'redundant_intf' => 'string',
        'conn_status' => 'int',
        'default_sim' => 'string',
        'gps' => 'string',
        'sim1_pin' => 'string',
        'sim2_pin' => 'string',
        'sim1_pin_code' => 'string',
        'sim2_pin_code' => 'string',
        'preferred_carrier' => 'string',
        'auto_switch' => '\Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameAutoSwitch[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ifname' => null,
        'redundant_mode' => null,
        'redundant_intf' => null,
        'conn_status' => null,
        'default_sim' => null,
        'gps' => null,
        'sim1_pin' => null,
        'sim2_pin' => null,
        'sim1_pin_code' => 'password',
        'sim2_pin_code' => 'password',
        'preferred_carrier' => null,
        'auto_switch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ifname' => 'ifname',
        'redundant_mode' => 'redundant-mode',
        'redundant_intf' => 'redundant-intf',
        'conn_status' => 'conn-status',
        'default_sim' => 'default-sim',
        'gps' => 'gps',
        'sim1_pin' => 'sim1-pin',
        'sim2_pin' => 'sim2-pin',
        'sim1_pin_code' => 'sim1-pin-code',
        'sim2_pin_code' => 'sim2-pin-code',
        'preferred_carrier' => 'preferred-carrier',
        'auto_switch' => 'auto-switch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ifname' => 'setIfname',
        'redundant_mode' => 'setRedundantMode',
        'redundant_intf' => 'setRedundantIntf',
        'conn_status' => 'setConnStatus',
        'default_sim' => 'setDefaultSim',
        'gps' => 'setGps',
        'sim1_pin' => 'setSim1Pin',
        'sim2_pin' => 'setSim2Pin',
        'sim1_pin_code' => 'setSim1PinCode',
        'sim2_pin_code' => 'setSim2PinCode',
        'preferred_carrier' => 'setPreferredCarrier',
        'auto_switch' => 'setAutoSwitch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ifname' => 'getIfname',
        'redundant_mode' => 'getRedundantMode',
        'redundant_intf' => 'getRedundantIntf',
        'conn_status' => 'getConnStatus',
        'default_sim' => 'getDefaultSim',
        'gps' => 'getGps',
        'sim1_pin' => 'getSim1Pin',
        'sim2_pin' => 'getSim2Pin',
        'sim1_pin_code' => 'getSim1PinCode',
        'sim2_pin_code' => 'getSim2PinCode',
        'preferred_carrier' => 'getPreferredCarrier',
        'auto_switch' => 'getAutoSwitch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REDUNDANT_MODE_DISABLE = 'disable';
    const REDUNDANT_MODE_ENABLE = 'enable';
    const DEFAULT_SIM_SIM1 = 'sim1';
    const DEFAULT_SIM_SIM2 = 'sim2';
    const DEFAULT_SIM_CARRIER = 'carrier';
    const DEFAULT_SIM_COST = 'cost';
    const GPS_DISABLE = 'disable';
    const GPS_ENABLE = 'enable';
    const SIM1_PIN_DISABLE = 'disable';
    const SIM1_PIN_ENABLE = 'enable';
    const SIM2_PIN_DISABLE = 'disable';
    const SIM2_PIN_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedundantModeAllowableValues()
    {
        return [
            self::REDUNDANT_MODE_DISABLE,
            self::REDUNDANT_MODE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultSimAllowableValues()
    {
        return [
            self::DEFAULT_SIM_SIM1,
            self::DEFAULT_SIM_SIM2,
            self::DEFAULT_SIM_CARRIER,
            self::DEFAULT_SIM_COST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGpsAllowableValues()
    {
        return [
            self::GPS_DISABLE,
            self::GPS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSim1PinAllowableValues()
    {
        return [
            self::SIM1_PIN_DISABLE,
            self::SIM1_PIN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSim2PinAllowableValues()
    {
        return [
            self::SIM2_PIN_DISABLE,
            self::SIM2_PIN_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ifname'] = $data['ifname'] ?? null;
        $this->container['redundant_mode'] = $data['redundant_mode'] ?? null;
        $this->container['redundant_intf'] = $data['redundant_intf'] ?? null;
        $this->container['conn_status'] = $data['conn_status'] ?? null;
        $this->container['default_sim'] = $data['default_sim'] ?? null;
        $this->container['gps'] = $data['gps'] ?? null;
        $this->container['sim1_pin'] = $data['sim1_pin'] ?? null;
        $this->container['sim2_pin'] = $data['sim2_pin'] ?? null;
        $this->container['sim1_pin_code'] = $data['sim1_pin_code'] ?? null;
        $this->container['sim2_pin_code'] = $data['sim2_pin_code'] ?? null;
        $this->container['preferred_carrier'] = $data['preferred_carrier'] ?? null;
        $this->container['auto_switch'] = $data['auto_switch'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ifname']) && (mb_strlen($this->container['ifname']) > 15)) {
            $invalidProperties[] = "invalid value for 'ifname', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getRedundantModeAllowableValues();
        if (!is_null($this->container['redundant_mode']) && !in_array($this->container['redundant_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redundant_mode', must be one of '%s'",
                $this->container['redundant_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['redundant_intf']) && (mb_strlen($this->container['redundant_intf']) > 15)) {
            $invalidProperties[] = "invalid value for 'redundant_intf', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['conn_status']) && ($this->container['conn_status'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'conn_status', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['conn_status']) && ($this->container['conn_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'conn_status', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDefaultSimAllowableValues();
        if (!is_null($this->container['default_sim']) && !in_array($this->container['default_sim'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_sim', must be one of '%s'",
                $this->container['default_sim'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGpsAllowableValues();
        if (!is_null($this->container['gps']) && !in_array($this->container['gps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gps', must be one of '%s'",
                $this->container['gps'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSim1PinAllowableValues();
        if (!is_null($this->container['sim1_pin']) && !in_array($this->container['sim1_pin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sim1_pin', must be one of '%s'",
                $this->container['sim1_pin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSim2PinAllowableValues();
        if (!is_null($this->container['sim2_pin']) && !in_array($this->container['sim2_pin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sim2_pin', must be one of '%s'",
                $this->container['sim2_pin'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['preferred_carrier']) && (mb_strlen($this->container['preferred_carrier']) > 31)) {
            $invalidProperties[] = "invalid value for 'preferred_carrier', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['auto_switch']) && (count($this->container['auto_switch']) > 0)) {
            $invalidProperties[] = "invalid value for 'auto_switch', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ifname
     *
     * @return string|null
     */
    public function getIfname()
    {
        return $this->container['ifname'];
    }

    /**
     * Sets ifname
     *
     * @param string|null $ifname FortiExtender interface name.
     *
     * @return self
     */
    public function setIfname($ifname)
    {
        if (!is_null($ifname) && (mb_strlen($ifname) > 15)) {
            throw new \InvalidArgumentException('invalid length for $ifname when calling ExtenderControllerExtenderNameModem1., must be smaller than or equal to 15.');
        }

        $this->container['ifname'] = $ifname;

        return $this;
    }

    /**
     * Gets redundant_mode
     *
     * @return string|null
     */
    public function getRedundantMode()
    {
        return $this->container['redundant_mode'];
    }

    /**
     * Sets redundant_mode
     *
     * @param string|null $redundant_mode FortiExtender mode.    disable:Disable interface redundancy.    enable:Enable interface redundancy.
     *
     * @return self
     */
    public function setRedundantMode($redundant_mode)
    {
        $allowedValues = $this->getRedundantModeAllowableValues();
        if (!is_null($redundant_mode) && !in_array($redundant_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redundant_mode', must be one of '%s'",
                    $redundant_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redundant_mode'] = $redundant_mode;

        return $this;
    }

    /**
     * Gets redundant_intf
     *
     * @return string|null
     */
    public function getRedundantIntf()
    {
        return $this->container['redundant_intf'];
    }

    /**
     * Sets redundant_intf
     *
     * @param string|null $redundant_intf Redundant interface.
     *
     * @return self
     */
    public function setRedundantIntf($redundant_intf)
    {
        if (!is_null($redundant_intf) && (mb_strlen($redundant_intf) > 15)) {
            throw new \InvalidArgumentException('invalid length for $redundant_intf when calling ExtenderControllerExtenderNameModem1., must be smaller than or equal to 15.');
        }

        $this->container['redundant_intf'] = $redundant_intf;

        return $this;
    }

    /**
     * Gets conn_status
     *
     * @return int|null
     */
    public function getConnStatus()
    {
        return $this->container['conn_status'];
    }

    /**
     * Sets conn_status
     *
     * @param int|null $conn_status Connection status.
     *
     * @return self
     */
    public function setConnStatus($conn_status)
    {

        if (!is_null($conn_status) && ($conn_status > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $conn_status when calling ExtenderControllerExtenderNameModem1., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($conn_status) && ($conn_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $conn_status when calling ExtenderControllerExtenderNameModem1., must be bigger than or equal to 0.');
        }

        $this->container['conn_status'] = $conn_status;

        return $this;
    }

    /**
     * Gets default_sim
     *
     * @return string|null
     */
    public function getDefaultSim()
    {
        return $this->container['default_sim'];
    }

    /**
     * Sets default_sim
     *
     * @param string|null $default_sim Default SIM selection.    sim1:Use SIM #1 by default.    sim2:Use SIM #2 by default.    carrier:Assign default SIM based on carrier.    cost:Assign default SIM based on cost.
     *
     * @return self
     */
    public function setDefaultSim($default_sim)
    {
        $allowedValues = $this->getDefaultSimAllowableValues();
        if (!is_null($default_sim) && !in_array($default_sim, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_sim', must be one of '%s'",
                    $default_sim,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_sim'] = $default_sim;

        return $this;
    }

    /**
     * Gets gps
     *
     * @return string|null
     */
    public function getGps()
    {
        return $this->container['gps'];
    }

    /**
     * Sets gps
     *
     * @param string|null $gps FortiExtender GPS enable/disable.    disable:Disable GPS.    enable:Enable GPS.
     *
     * @return self
     */
    public function setGps($gps)
    {
        $allowedValues = $this->getGpsAllowableValues();
        if (!is_null($gps) && !in_array($gps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gps', must be one of '%s'",
                    $gps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gps'] = $gps;

        return $this;
    }

    /**
     * Gets sim1_pin
     *
     * @return string|null
     */
    public function getSim1Pin()
    {
        return $this->container['sim1_pin'];
    }

    /**
     * Sets sim1_pin
     *
     * @param string|null $sim1_pin SIM #1 PIN status.    disable:Disable SIM #1 pin.    enable:Enable SIM #1 pin.
     *
     * @return self
     */
    public function setSim1Pin($sim1_pin)
    {
        $allowedValues = $this->getSim1PinAllowableValues();
        if (!is_null($sim1_pin) && !in_array($sim1_pin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sim1_pin', must be one of '%s'",
                    $sim1_pin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sim1_pin'] = $sim1_pin;

        return $this;
    }

    /**
     * Gets sim2_pin
     *
     * @return string|null
     */
    public function getSim2Pin()
    {
        return $this->container['sim2_pin'];
    }

    /**
     * Sets sim2_pin
     *
     * @param string|null $sim2_pin SIM #2 PIN status.    disable:Disable SIM #2 pin.    enable:Enable SIM #2 pin.
     *
     * @return self
     */
    public function setSim2Pin($sim2_pin)
    {
        $allowedValues = $this->getSim2PinAllowableValues();
        if (!is_null($sim2_pin) && !in_array($sim2_pin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sim2_pin', must be one of '%s'",
                    $sim2_pin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sim2_pin'] = $sim2_pin;

        return $this;
    }

    /**
     * Gets sim1_pin_code
     *
     * @return string|null
     */
    public function getSim1PinCode()
    {
        return $this->container['sim1_pin_code'];
    }

    /**
     * Sets sim1_pin_code
     *
     * @param string|null $sim1_pin_code SIM #1 PIN password.
     *
     * @return self
     */
    public function setSim1PinCode($sim1_pin_code)
    {
        $this->container['sim1_pin_code'] = $sim1_pin_code;

        return $this;
    }

    /**
     * Gets sim2_pin_code
     *
     * @return string|null
     */
    public function getSim2PinCode()
    {
        return $this->container['sim2_pin_code'];
    }

    /**
     * Sets sim2_pin_code
     *
     * @param string|null $sim2_pin_code SIM #2 PIN password.
     *
     * @return self
     */
    public function setSim2PinCode($sim2_pin_code)
    {
        $this->container['sim2_pin_code'] = $sim2_pin_code;

        return $this;
    }

    /**
     * Gets preferred_carrier
     *
     * @return string|null
     */
    public function getPreferredCarrier()
    {
        return $this->container['preferred_carrier'];
    }

    /**
     * Sets preferred_carrier
     *
     * @param string|null $preferred_carrier Preferred carrier.
     *
     * @return self
     */
    public function setPreferredCarrier($preferred_carrier)
    {
        if (!is_null($preferred_carrier) && (mb_strlen($preferred_carrier) > 31)) {
            throw new \InvalidArgumentException('invalid length for $preferred_carrier when calling ExtenderControllerExtenderNameModem1., must be smaller than or equal to 31.');
        }

        $this->container['preferred_carrier'] = $preferred_carrier;

        return $this;
    }

    /**
     * Gets auto_switch
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameAutoSwitch[]|null
     */
    public function getAutoSwitch()
    {
        return $this->container['auto_switch'];
    }

    /**
     * Sets auto_switch
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ExtenderControllerExtenderNameAutoSwitch[]|null $auto_switch FortiExtender auto switch configuration.
     *
     * @return self
     */
    public function setAutoSwitch($auto_switch)
    {

        if (!is_null($auto_switch) && (count($auto_switch) > 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_switch when calling ExtenderControllerExtenderNameModem1., number of items must be less than or equal to 0.');
        }
        $this->container['auto_switch'] = $auto_switch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


