<?php
/**
 * InlineObject347
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject347 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject347 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_347';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destination_visibility' => 'string',
        'source_location' => 'string',
        'destination_hostname_visibility' => 'string',
        'hostname_ttl' => 'int',
        'hostname_limit' => 'int',
        'destination_location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destination_visibility' => null,
        'source_location' => null,
        'destination_hostname_visibility' => null,
        'hostname_ttl' => null,
        'hostname_limit' => null,
        'destination_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destination_visibility' => 'destination-visibility',
        'source_location' => 'source-location',
        'destination_hostname_visibility' => 'destination-hostname-visibility',
        'hostname_ttl' => 'hostname-ttl',
        'hostname_limit' => 'hostname-limit',
        'destination_location' => 'destination-location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destination_visibility' => 'setDestinationVisibility',
        'source_location' => 'setSourceLocation',
        'destination_hostname_visibility' => 'setDestinationHostnameVisibility',
        'hostname_ttl' => 'setHostnameTtl',
        'hostname_limit' => 'setHostnameLimit',
        'destination_location' => 'setDestinationLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destination_visibility' => 'getDestinationVisibility',
        'source_location' => 'getSourceLocation',
        'destination_hostname_visibility' => 'getDestinationHostnameVisibility',
        'hostname_ttl' => 'getHostnameTtl',
        'hostname_limit' => 'getHostnameLimit',
        'destination_location' => 'getDestinationLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DESTINATION_VISIBILITY_DISABLE = 'disable';
    const DESTINATION_VISIBILITY_ENABLE = 'enable';
    const SOURCE_LOCATION_DISABLE = 'disable';
    const SOURCE_LOCATION_ENABLE = 'enable';
    const DESTINATION_HOSTNAME_VISIBILITY_DISABLE = 'disable';
    const DESTINATION_HOSTNAME_VISIBILITY_ENABLE = 'enable';
    const DESTINATION_LOCATION_DISABLE = 'disable';
    const DESTINATION_LOCATION_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationVisibilityAllowableValues()
    {
        return [
            self::DESTINATION_VISIBILITY_DISABLE,
            self::DESTINATION_VISIBILITY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceLocationAllowableValues()
    {
        return [
            self::SOURCE_LOCATION_DISABLE,
            self::SOURCE_LOCATION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationHostnameVisibilityAllowableValues()
    {
        return [
            self::DESTINATION_HOSTNAME_VISIBILITY_DISABLE,
            self::DESTINATION_HOSTNAME_VISIBILITY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationLocationAllowableValues()
    {
        return [
            self::DESTINATION_LOCATION_DISABLE,
            self::DESTINATION_LOCATION_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['destination_visibility'] = $data['destination_visibility'] ?? null;
        $this->container['source_location'] = $data['source_location'] ?? null;
        $this->container['destination_hostname_visibility'] = $data['destination_hostname_visibility'] ?? null;
        $this->container['hostname_ttl'] = $data['hostname_ttl'] ?? null;
        $this->container['hostname_limit'] = $data['hostname_limit'] ?? null;
        $this->container['destination_location'] = $data['destination_location'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDestinationVisibilityAllowableValues();
        if (!is_null($this->container['destination_visibility']) && !in_array($this->container['destination_visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destination_visibility', must be one of '%s'",
                $this->container['destination_visibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceLocationAllowableValues();
        if (!is_null($this->container['source_location']) && !in_array($this->container['source_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_location', must be one of '%s'",
                $this->container['source_location'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDestinationHostnameVisibilityAllowableValues();
        if (!is_null($this->container['destination_hostname_visibility']) && !in_array($this->container['destination_hostname_visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destination_hostname_visibility', must be one of '%s'",
                $this->container['destination_hostname_visibility'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['hostname_ttl']) && ($this->container['hostname_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'hostname_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['hostname_ttl']) && ($this->container['hostname_ttl'] < 60)) {
            $invalidProperties[] = "invalid value for 'hostname_ttl', must be bigger than or equal to 60.";
        }

        if (!is_null($this->container['hostname_limit']) && ($this->container['hostname_limit'] > 50000)) {
            $invalidProperties[] = "invalid value for 'hostname_limit', must be smaller than or equal to 50000.";
        }

        if (!is_null($this->container['hostname_limit']) && ($this->container['hostname_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'hostname_limit', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDestinationLocationAllowableValues();
        if (!is_null($this->container['destination_location']) && !in_array($this->container['destination_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destination_location', must be one of '%s'",
                $this->container['destination_location'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destination_visibility
     *
     * @return string|null
     */
    public function getDestinationVisibility()
    {
        return $this->container['destination_visibility'];
    }

    /**
     * Sets destination_visibility
     *
     * @param string|null $destination_visibility Enable/disable logging of destination visibility.    disable:Disable logging of destination visibility.    enable:Enable logging of destination visibility.
     *
     * @return self
     */
    public function setDestinationVisibility($destination_visibility)
    {
        $allowedValues = $this->getDestinationVisibilityAllowableValues();
        if (!is_null($destination_visibility) && !in_array($destination_visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destination_visibility', must be one of '%s'",
                    $destination_visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destination_visibility'] = $destination_visibility;

        return $this;
    }

    /**
     * Gets source_location
     *
     * @return string|null
     */
    public function getSourceLocation()
    {
        return $this->container['source_location'];
    }

    /**
     * Sets source_location
     *
     * @param string|null $source_location Enable/disable logging of source geographical location visibility.    disable:Disable logging of source geographical location visibility.    enable:Enable logging of source geographical location visibility.
     *
     * @return self
     */
    public function setSourceLocation($source_location)
    {
        $allowedValues = $this->getSourceLocationAllowableValues();
        if (!is_null($source_location) && !in_array($source_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_location', must be one of '%s'",
                    $source_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_location'] = $source_location;

        return $this;
    }

    /**
     * Gets destination_hostname_visibility
     *
     * @return string|null
     */
    public function getDestinationHostnameVisibility()
    {
        return $this->container['destination_hostname_visibility'];
    }

    /**
     * Sets destination_hostname_visibility
     *
     * @param string|null $destination_hostname_visibility Enable/disable logging of destination hostname visibility.    disable:Disable logging of destination hostname visibility.    enable:Enable logging of destination hostname visibility.
     *
     * @return self
     */
    public function setDestinationHostnameVisibility($destination_hostname_visibility)
    {
        $allowedValues = $this->getDestinationHostnameVisibilityAllowableValues();
        if (!is_null($destination_hostname_visibility) && !in_array($destination_hostname_visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destination_hostname_visibility', must be one of '%s'",
                    $destination_hostname_visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destination_hostname_visibility'] = $destination_hostname_visibility;

        return $this;
    }

    /**
     * Gets hostname_ttl
     *
     * @return int|null
     */
    public function getHostnameTtl()
    {
        return $this->container['hostname_ttl'];
    }

    /**
     * Sets hostname_ttl
     *
     * @param int|null $hostname_ttl TTL of hostname table entries (60 - 86400).
     *
     * @return self
     */
    public function setHostnameTtl($hostname_ttl)
    {

        if (!is_null($hostname_ttl) && ($hostname_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $hostname_ttl when calling InlineObject347., must be smaller than or equal to 86400.');
        }
        if (!is_null($hostname_ttl) && ($hostname_ttl < 60)) {
            throw new \InvalidArgumentException('invalid value for $hostname_ttl when calling InlineObject347., must be bigger than or equal to 60.');
        }

        $this->container['hostname_ttl'] = $hostname_ttl;

        return $this;
    }

    /**
     * Gets hostname_limit
     *
     * @return int|null
     */
    public function getHostnameLimit()
    {
        return $this->container['hostname_limit'];
    }

    /**
     * Sets hostname_limit
     *
     * @param int|null $hostname_limit Limit of the number of hostname table entries (0 - 50000).
     *
     * @return self
     */
    public function setHostnameLimit($hostname_limit)
    {

        if (!is_null($hostname_limit) && ($hostname_limit > 50000)) {
            throw new \InvalidArgumentException('invalid value for $hostname_limit when calling InlineObject347., must be smaller than or equal to 50000.');
        }
        if (!is_null($hostname_limit) && ($hostname_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $hostname_limit when calling InlineObject347., must be bigger than or equal to 0.');
        }

        $this->container['hostname_limit'] = $hostname_limit;

        return $this;
    }

    /**
     * Gets destination_location
     *
     * @return string|null
     */
    public function getDestinationLocation()
    {
        return $this->container['destination_location'];
    }

    /**
     * Sets destination_location
     *
     * @param string|null $destination_location Enable/disable logging of destination geographical location visibility.    disable:Disable logging of destination geographical location visibility.    enable:Enable logging of destination geographical location visibility.
     *
     * @return self
     */
    public function setDestinationLocation($destination_location)
    {
        $allowedValues = $this->getDestinationLocationAllowableValues();
        if (!is_null($destination_location) && !in_array($destination_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destination_location', must be one of '%s'",
                    $destination_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destination_location'] = $destination_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


