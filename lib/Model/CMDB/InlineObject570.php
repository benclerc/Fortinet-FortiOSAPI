<?php
/**
 * InlineObject570
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject570 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject570 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_570';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'link_status' => 'string',
        'symmetric_wan_link' => 'string',
        'link_at_capacity' => 'string',
        'uplink_speed' => 'int',
        'downlink_speed' => 'int',
        'uplink_load' => 'int',
        'downlink_load' => 'int',
        'load_measurement_duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'link_status' => null,
        'symmetric_wan_link' => null,
        'link_at_capacity' => null,
        'uplink_speed' => null,
        'downlink_speed' => null,
        'uplink_load' => null,
        'downlink_load' => null,
        'load_measurement_duration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'link_status' => 'link-status',
        'symmetric_wan_link' => 'symmetric-wan-link',
        'link_at_capacity' => 'link-at-capacity',
        'uplink_speed' => 'uplink-speed',
        'downlink_speed' => 'downlink-speed',
        'uplink_load' => 'uplink-load',
        'downlink_load' => 'downlink-load',
        'load_measurement_duration' => 'load-measurement-duration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'link_status' => 'setLinkStatus',
        'symmetric_wan_link' => 'setSymmetricWanLink',
        'link_at_capacity' => 'setLinkAtCapacity',
        'uplink_speed' => 'setUplinkSpeed',
        'downlink_speed' => 'setDownlinkSpeed',
        'uplink_load' => 'setUplinkLoad',
        'downlink_load' => 'setDownlinkLoad',
        'load_measurement_duration' => 'setLoadMeasurementDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'link_status' => 'getLinkStatus',
        'symmetric_wan_link' => 'getSymmetricWanLink',
        'link_at_capacity' => 'getLinkAtCapacity',
        'uplink_speed' => 'getUplinkSpeed',
        'downlink_speed' => 'getDownlinkSpeed',
        'uplink_load' => 'getUplinkLoad',
        'downlink_load' => 'getDownlinkLoad',
        'load_measurement_duration' => 'getLoadMeasurementDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LINK_STATUS_UP = 'up';
    const LINK_STATUS_DOWN = 'down';
    const LINK_STATUS_IN_TEST = 'in-test';
    const SYMMETRIC_WAN_LINK_SYMMETRIC = 'symmetric';
    const SYMMETRIC_WAN_LINK_ASYMMETRIC = 'asymmetric';
    const LINK_AT_CAPACITY_ENABLE = 'enable';
    const LINK_AT_CAPACITY_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkStatusAllowableValues()
    {
        return [
            self::LINK_STATUS_UP,
            self::LINK_STATUS_DOWN,
            self::LINK_STATUS_IN_TEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSymmetricWanLinkAllowableValues()
    {
        return [
            self::SYMMETRIC_WAN_LINK_SYMMETRIC,
            self::SYMMETRIC_WAN_LINK_ASYMMETRIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkAtCapacityAllowableValues()
    {
        return [
            self::LINK_AT_CAPACITY_ENABLE,
            self::LINK_AT_CAPACITY_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['link_status'] = $data['link_status'] ?? null;
        $this->container['symmetric_wan_link'] = $data['symmetric_wan_link'] ?? null;
        $this->container['link_at_capacity'] = $data['link_at_capacity'] ?? null;
        $this->container['uplink_speed'] = $data['uplink_speed'] ?? null;
        $this->container['downlink_speed'] = $data['downlink_speed'] ?? null;
        $this->container['uplink_load'] = $data['uplink_load'] ?? null;
        $this->container['downlink_load'] = $data['downlink_load'] ?? null;
        $this->container['load_measurement_duration'] = $data['load_measurement_duration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getLinkStatusAllowableValues();
        if (!is_null($this->container['link_status']) && !in_array($this->container['link_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_status', must be one of '%s'",
                $this->container['link_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSymmetricWanLinkAllowableValues();
        if (!is_null($this->container['symmetric_wan_link']) && !in_array($this->container['symmetric_wan_link'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'symmetric_wan_link', must be one of '%s'",
                $this->container['symmetric_wan_link'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkAtCapacityAllowableValues();
        if (!is_null($this->container['link_at_capacity']) && !in_array($this->container['link_at_capacity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_at_capacity', must be one of '%s'",
                $this->container['link_at_capacity'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uplink_speed']) && ($this->container['uplink_speed'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'uplink_speed', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['uplink_speed']) && ($this->container['uplink_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'uplink_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['downlink_speed']) && ($this->container['downlink_speed'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'downlink_speed', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['downlink_speed']) && ($this->container['downlink_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'downlink_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['uplink_load']) && ($this->container['uplink_load'] > 255)) {
            $invalidProperties[] = "invalid value for 'uplink_load', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['uplink_load']) && ($this->container['uplink_load'] < 0)) {
            $invalidProperties[] = "invalid value for 'uplink_load', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['downlink_load']) && ($this->container['downlink_load'] > 255)) {
            $invalidProperties[] = "invalid value for 'downlink_load', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['downlink_load']) && ($this->container['downlink_load'] < 0)) {
            $invalidProperties[] = "invalid value for 'downlink_load', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['load_measurement_duration']) && ($this->container['load_measurement_duration'] > 65535)) {
            $invalidProperties[] = "invalid value for 'load_measurement_duration', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['load_measurement_duration']) && ($this->container['load_measurement_duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'load_measurement_duration', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WAN metric name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject570., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets link_status
     *
     * @return string|null
     */
    public function getLinkStatus()
    {
        return $this->container['link_status'];
    }

    /**
     * Sets link_status
     *
     * @param string|null $link_status Link status.    up:Link up.    down:Link down.    in-test:Link in test state.
     *
     * @return self
     */
    public function setLinkStatus($link_status)
    {
        $allowedValues = $this->getLinkStatusAllowableValues();
        if (!is_null($link_status) && !in_array($link_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_status', must be one of '%s'",
                    $link_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_status'] = $link_status;

        return $this;
    }

    /**
     * Gets symmetric_wan_link
     *
     * @return string|null
     */
    public function getSymmetricWanLink()
    {
        return $this->container['symmetric_wan_link'];
    }

    /**
     * Sets symmetric_wan_link
     *
     * @param string|null $symmetric_wan_link WAN link symmetry.    symmetric:Symmetric WAN link (uplink and downlink speeds are the same).    asymmetric:Asymmetric WAN link (uplink and downlink speeds are not the same).
     *
     * @return self
     */
    public function setSymmetricWanLink($symmetric_wan_link)
    {
        $allowedValues = $this->getSymmetricWanLinkAllowableValues();
        if (!is_null($symmetric_wan_link) && !in_array($symmetric_wan_link, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'symmetric_wan_link', must be one of '%s'",
                    $symmetric_wan_link,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['symmetric_wan_link'] = $symmetric_wan_link;

        return $this;
    }

    /**
     * Gets link_at_capacity
     *
     * @return string|null
     */
    public function getLinkAtCapacity()
    {
        return $this->container['link_at_capacity'];
    }

    /**
     * Sets link_at_capacity
     *
     * @param string|null $link_at_capacity Link at capacity.    enable:Link at capacity (not allow additional mobile devices to associate).    disable:Link not at capacity (allow additional mobile devices to associate).
     *
     * @return self
     */
    public function setLinkAtCapacity($link_at_capacity)
    {
        $allowedValues = $this->getLinkAtCapacityAllowableValues();
        if (!is_null($link_at_capacity) && !in_array($link_at_capacity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_at_capacity', must be one of '%s'",
                    $link_at_capacity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_at_capacity'] = $link_at_capacity;

        return $this;
    }

    /**
     * Gets uplink_speed
     *
     * @return int|null
     */
    public function getUplinkSpeed()
    {
        return $this->container['uplink_speed'];
    }

    /**
     * Sets uplink_speed
     *
     * @param int|null $uplink_speed Uplink speed (in kilobits/s).
     *
     * @return self
     */
    public function setUplinkSpeed($uplink_speed)
    {

        if (!is_null($uplink_speed) && ($uplink_speed > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $uplink_speed when calling InlineObject570., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($uplink_speed) && ($uplink_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $uplink_speed when calling InlineObject570., must be bigger than or equal to 0.');
        }

        $this->container['uplink_speed'] = $uplink_speed;

        return $this;
    }

    /**
     * Gets downlink_speed
     *
     * @return int|null
     */
    public function getDownlinkSpeed()
    {
        return $this->container['downlink_speed'];
    }

    /**
     * Sets downlink_speed
     *
     * @param int|null $downlink_speed Downlink speed (in kilobits/s).
     *
     * @return self
     */
    public function setDownlinkSpeed($downlink_speed)
    {

        if (!is_null($downlink_speed) && ($downlink_speed > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $downlink_speed when calling InlineObject570., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($downlink_speed) && ($downlink_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $downlink_speed when calling InlineObject570., must be bigger than or equal to 0.');
        }

        $this->container['downlink_speed'] = $downlink_speed;

        return $this;
    }

    /**
     * Gets uplink_load
     *
     * @return int|null
     */
    public function getUplinkLoad()
    {
        return $this->container['uplink_load'];
    }

    /**
     * Sets uplink_load
     *
     * @param int|null $uplink_load Uplink load.
     *
     * @return self
     */
    public function setUplinkLoad($uplink_load)
    {

        if (!is_null($uplink_load) && ($uplink_load > 255)) {
            throw new \InvalidArgumentException('invalid value for $uplink_load when calling InlineObject570., must be smaller than or equal to 255.');
        }
        if (!is_null($uplink_load) && ($uplink_load < 0)) {
            throw new \InvalidArgumentException('invalid value for $uplink_load when calling InlineObject570., must be bigger than or equal to 0.');
        }

        $this->container['uplink_load'] = $uplink_load;

        return $this;
    }

    /**
     * Gets downlink_load
     *
     * @return int|null
     */
    public function getDownlinkLoad()
    {
        return $this->container['downlink_load'];
    }

    /**
     * Sets downlink_load
     *
     * @param int|null $downlink_load Downlink load.
     *
     * @return self
     */
    public function setDownlinkLoad($downlink_load)
    {

        if (!is_null($downlink_load) && ($downlink_load > 255)) {
            throw new \InvalidArgumentException('invalid value for $downlink_load when calling InlineObject570., must be smaller than or equal to 255.');
        }
        if (!is_null($downlink_load) && ($downlink_load < 0)) {
            throw new \InvalidArgumentException('invalid value for $downlink_load when calling InlineObject570., must be bigger than or equal to 0.');
        }

        $this->container['downlink_load'] = $downlink_load;

        return $this;
    }

    /**
     * Gets load_measurement_duration
     *
     * @return int|null
     */
    public function getLoadMeasurementDuration()
    {
        return $this->container['load_measurement_duration'];
    }

    /**
     * Sets load_measurement_duration
     *
     * @param int|null $load_measurement_duration Load measurement duration (in tenths of a second).
     *
     * @return self
     */
    public function setLoadMeasurementDuration($load_measurement_duration)
    {

        if (!is_null($load_measurement_duration) && ($load_measurement_duration > 65535)) {
            throw new \InvalidArgumentException('invalid value for $load_measurement_duration when calling InlineObject570., must be smaller than or equal to 65535.');
        }
        if (!is_null($load_measurement_duration) && ($load_measurement_duration < 0)) {
            throw new \InvalidArgumentException('invalid value for $load_measurement_duration when calling InlineObject570., must be bigger than or equal to 0.');
        }

        $this->container['load_measurement_duration'] = $load_measurement_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


