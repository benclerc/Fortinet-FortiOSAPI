<?php
/**
 * InlineObject38
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject38 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject38 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_38';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'feature_set' => 'string',
        'replacemsg_group' => 'string',
        'filter' => '\Fortigate\FortiOS\Model\CMDB\DlpSensorNameFilter[]',
        'dlp_log' => 'string',
        'extended_log' => 'string',
        'nac_quar_log' => 'string',
        'full_archive_proto' => 'string',
        'summary_proto' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'feature_set' => null,
        'replacemsg_group' => null,
        'filter' => null,
        'dlp_log' => null,
        'extended_log' => null,
        'nac_quar_log' => null,
        'full_archive_proto' => null,
        'summary_proto' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'feature_set' => 'feature-set',
        'replacemsg_group' => 'replacemsg-group',
        'filter' => 'filter',
        'dlp_log' => 'dlp-log',
        'extended_log' => 'extended-log',
        'nac_quar_log' => 'nac-quar-log',
        'full_archive_proto' => 'full-archive-proto',
        'summary_proto' => 'summary-proto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'feature_set' => 'setFeatureSet',
        'replacemsg_group' => 'setReplacemsgGroup',
        'filter' => 'setFilter',
        'dlp_log' => 'setDlpLog',
        'extended_log' => 'setExtendedLog',
        'nac_quar_log' => 'setNacQuarLog',
        'full_archive_proto' => 'setFullArchiveProto',
        'summary_proto' => 'setSummaryProto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'feature_set' => 'getFeatureSet',
        'replacemsg_group' => 'getReplacemsgGroup',
        'filter' => 'getFilter',
        'dlp_log' => 'getDlpLog',
        'extended_log' => 'getExtendedLog',
        'nac_quar_log' => 'getNacQuarLog',
        'full_archive_proto' => 'getFullArchiveProto',
        'summary_proto' => 'getSummaryProto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FEATURE_SET_FLOW = 'flow';
    const FEATURE_SET_PROXY = 'proxy';
    const DLP_LOG_ENABLE = 'enable';
    const DLP_LOG_DISABLE = 'disable';
    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    const NAC_QUAR_LOG_ENABLE = 'enable';
    const NAC_QUAR_LOG_DISABLE = 'disable';
    const FULL_ARCHIVE_PROTO_SMTP = 'smtp';
    const FULL_ARCHIVE_PROTO_POP3 = 'pop3';
    const FULL_ARCHIVE_PROTO_IMAP = 'imap';
    const FULL_ARCHIVE_PROTO_HTTP_GET = 'http-get';
    const FULL_ARCHIVE_PROTO_HTTP_POST = 'http-post';
    const FULL_ARCHIVE_PROTO_FTP = 'ftp';
    const FULL_ARCHIVE_PROTO_NNTP = 'nntp';
    const FULL_ARCHIVE_PROTO_MAPI = 'mapi';
    const FULL_ARCHIVE_PROTO_SSH = 'ssh';
    const FULL_ARCHIVE_PROTO_CIFS = 'cifs';
    const SUMMARY_PROTO_SMTP = 'smtp';
    const SUMMARY_PROTO_POP3 = 'pop3';
    const SUMMARY_PROTO_IMAP = 'imap';
    const SUMMARY_PROTO_HTTP_GET = 'http-get';
    const SUMMARY_PROTO_HTTP_POST = 'http-post';
    const SUMMARY_PROTO_FTP = 'ftp';
    const SUMMARY_PROTO_NNTP = 'nntp';
    const SUMMARY_PROTO_MAPI = 'mapi';
    const SUMMARY_PROTO_SSH = 'ssh';
    const SUMMARY_PROTO_CIFS = 'cifs';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureSetAllowableValues()
    {
        return [
            self::FEATURE_SET_FLOW,
            self::FEATURE_SET_PROXY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDlpLogAllowableValues()
    {
        return [
            self::DLP_LOG_ENABLE,
            self::DLP_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNacQuarLogAllowableValues()
    {
        return [
            self::NAC_QUAR_LOG_ENABLE,
            self::NAC_QUAR_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFullArchiveProtoAllowableValues()
    {
        return [
            self::FULL_ARCHIVE_PROTO_SMTP,
            self::FULL_ARCHIVE_PROTO_POP3,
            self::FULL_ARCHIVE_PROTO_IMAP,
            self::FULL_ARCHIVE_PROTO_HTTP_GET,
            self::FULL_ARCHIVE_PROTO_HTTP_POST,
            self::FULL_ARCHIVE_PROTO_FTP,
            self::FULL_ARCHIVE_PROTO_NNTP,
            self::FULL_ARCHIVE_PROTO_MAPI,
            self::FULL_ARCHIVE_PROTO_SSH,
            self::FULL_ARCHIVE_PROTO_CIFS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSummaryProtoAllowableValues()
    {
        return [
            self::SUMMARY_PROTO_SMTP,
            self::SUMMARY_PROTO_POP3,
            self::SUMMARY_PROTO_IMAP,
            self::SUMMARY_PROTO_HTTP_GET,
            self::SUMMARY_PROTO_HTTP_POST,
            self::SUMMARY_PROTO_FTP,
            self::SUMMARY_PROTO_NNTP,
            self::SUMMARY_PROTO_MAPI,
            self::SUMMARY_PROTO_SSH,
            self::SUMMARY_PROTO_CIFS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['feature_set'] = $data['feature_set'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['filter'] = $data['filter'] ?? null;
        $this->container['dlp_log'] = $data['dlp_log'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['nac_quar_log'] = $data['nac_quar_log'] ?? null;
        $this->container['full_archive_proto'] = $data['full_archive_proto'] ?? null;
        $this->container['summary_proto'] = $data['summary_proto'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($this->container['feature_set']) && !in_array($this->container['feature_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature_set', must be one of '%s'",
                $this->container['feature_set'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['filter']) && (count($this->container['filter']) > 2000)) {
            $invalidProperties[] = "invalid value for 'filter', number of items must be less than or equal to 2000.";
        }

        $allowedValues = $this->getDlpLogAllowableValues();
        if (!is_null($this->container['dlp_log']) && !in_array($this->container['dlp_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dlp_log', must be one of '%s'",
                $this->container['dlp_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNacQuarLogAllowableValues();
        if (!is_null($this->container['nac_quar_log']) && !in_array($this->container['nac_quar_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nac_quar_log', must be one of '%s'",
                $this->container['nac_quar_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFullArchiveProtoAllowableValues();
        if (!is_null($this->container['full_archive_proto']) && !in_array($this->container['full_archive_proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'full_archive_proto', must be one of '%s'",
                $this->container['full_archive_proto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSummaryProtoAllowableValues();
        if (!is_null($this->container['summary_proto']) && !in_array($this->container['summary_proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'summary_proto', must be one of '%s'",
                $this->container['summary_proto'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the DLP sensor.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject38., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject38., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets feature_set
     *
     * @return string|null
     */
    public function getFeatureSet()
    {
        return $this->container['feature_set'];
    }

    /**
     * Sets feature_set
     *
     * @param string|null $feature_set Flow/proxy feature set.    flow:Flow feature set.    proxy:Proxy feature set.
     *
     * @return self
     */
    public function setFeatureSet($feature_set)
    {
        $allowedValues = $this->getFeatureSetAllowableValues();
        if (!is_null($feature_set) && !in_array($feature_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature_set', must be one of '%s'",
                    $feature_set,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_set'] = $feature_set;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group used by this DLP sensor.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject38., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DlpSensorNameFilter[]|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DlpSensorNameFilter[]|null $filter Set up DLP filters for this sensor.
     *
     * @return self
     */
    public function setFilter($filter)
    {

        if (!is_null($filter) && (count($filter) > 2000)) {
            throw new \InvalidArgumentException('invalid value for $filter when calling InlineObject38., number of items must be less than or equal to 2000.');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets dlp_log
     *
     * @return string|null
     */
    public function getDlpLog()
    {
        return $this->container['dlp_log'];
    }

    /**
     * Sets dlp_log
     *
     * @param string|null $dlp_log Enable/disable DLP logging.    enable:Enable DLP logging.    disable:Disable DLP logging.
     *
     * @return self
     */
    public function setDlpLog($dlp_log)
    {
        $allowedValues = $this->getDlpLogAllowableValues();
        if (!is_null($dlp_log) && !in_array($dlp_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dlp_log', must be one of '%s'",
                    $dlp_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dlp_log'] = $dlp_log;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging for data leak prevention.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets nac_quar_log
     *
     * @return string|null
     */
    public function getNacQuarLog()
    {
        return $this->container['nac_quar_log'];
    }

    /**
     * Sets nac_quar_log
     *
     * @param string|null $nac_quar_log Enable/disable NAC quarantine logging.    enable:Enable NAC quarantine logging.    disable:Disable NAC quarantine logging.
     *
     * @return self
     */
    public function setNacQuarLog($nac_quar_log)
    {
        $allowedValues = $this->getNacQuarLogAllowableValues();
        if (!is_null($nac_quar_log) && !in_array($nac_quar_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nac_quar_log', must be one of '%s'",
                    $nac_quar_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nac_quar_log'] = $nac_quar_log;

        return $this;
    }

    /**
     * Gets full_archive_proto
     *
     * @return string|null
     */
    public function getFullArchiveProto()
    {
        return $this->container['full_archive_proto'];
    }

    /**
     * Sets full_archive_proto
     *
     * @param string|null $full_archive_proto Protocols to always content archive.    smtp:SMTP.    pop3:POP3.    imap:IMAP.    http-get:HTTP GET.    http-post:HTTP POST.    ftp:FTP.    nntp:NNTP.    mapi:MAPI.    ssh:SFTP and SCP.    cifs:CIFS.
     *
     * @return self
     */
    public function setFullArchiveProto($full_archive_proto)
    {
        $allowedValues = $this->getFullArchiveProtoAllowableValues();
        if (!is_null($full_archive_proto) && !in_array($full_archive_proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'full_archive_proto', must be one of '%s'",
                    $full_archive_proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['full_archive_proto'] = $full_archive_proto;

        return $this;
    }

    /**
     * Gets summary_proto
     *
     * @return string|null
     */
    public function getSummaryProto()
    {
        return $this->container['summary_proto'];
    }

    /**
     * Sets summary_proto
     *
     * @param string|null $summary_proto Protocols to always log summary.    smtp:SMTP.    pop3:POP3.    imap:IMAP.    http-get:HTTP GET.    http-post:HTTP POST.    ftp:FTP.    nntp:NNTP.    mapi:MAPI.    ssh:SFTP and SCP.    cifs:CIFS.
     *
     * @return self
     */
    public function setSummaryProto($summary_proto)
    {
        $allowedValues = $this->getSummaryProtoAllowableValues();
        if (!is_null($summary_proto) && !in_array($summary_proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'summary_proto', must be one of '%s'",
                    $summary_proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['summary_proto'] = $summary_proto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


