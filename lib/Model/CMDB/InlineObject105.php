<?php
/**
 * InlineObject105
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject105 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject105 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_105';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'override' => 'string',
        'status' => 'string',
        'upload_option' => 'string',
        'upload_interval' => 'string',
        'upload_day' => 'string',
        'upload_time' => 'string',
        'priority' => 'string',
        'max_log_rate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'override' => null,
        'status' => null,
        'upload_option' => null,
        'upload_interval' => null,
        'upload_day' => null,
        'upload_time' => null,
        'priority' => null,
        'max_log_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'override' => 'override',
        'status' => 'status',
        'upload_option' => 'upload-option',
        'upload_interval' => 'upload-interval',
        'upload_day' => 'upload-day',
        'upload_time' => 'upload-time',
        'priority' => 'priority',
        'max_log_rate' => 'max-log-rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'override' => 'setOverride',
        'status' => 'setStatus',
        'upload_option' => 'setUploadOption',
        'upload_interval' => 'setUploadInterval',
        'upload_day' => 'setUploadDay',
        'upload_time' => 'setUploadTime',
        'priority' => 'setPriority',
        'max_log_rate' => 'setMaxLogRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'override' => 'getOverride',
        'status' => 'getStatus',
        'upload_option' => 'getUploadOption',
        'upload_interval' => 'getUploadInterval',
        'upload_day' => 'getUploadDay',
        'upload_time' => 'getUploadTime',
        'priority' => 'getPriority',
        'max_log_rate' => 'getMaxLogRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OVERRIDE_ENABLE = 'enable';
    const OVERRIDE_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const UPLOAD_OPTION_STORE_AND_UPLOAD = 'store-and-upload';
    const UPLOAD_OPTION_REALTIME = 'realtime';
    const UPLOAD_OPTION__1_MINUTE = '1-minute';
    const UPLOAD_OPTION__5_MINUTE = '5-minute';
    const UPLOAD_INTERVAL_DAILY = 'daily';
    const UPLOAD_INTERVAL_WEEKLY = 'weekly';
    const UPLOAD_INTERVAL_MONTHLY = 'monthly';
    const PRIORITY__DEFAULT = 'default';
    const PRIORITY_LOW = 'low';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverrideAllowableValues()
    {
        return [
            self::OVERRIDE_ENABLE,
            self::OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadOptionAllowableValues()
    {
        return [
            self::UPLOAD_OPTION_STORE_AND_UPLOAD,
            self::UPLOAD_OPTION_REALTIME,
            self::UPLOAD_OPTION__1_MINUTE,
            self::UPLOAD_OPTION__5_MINUTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadIntervalAllowableValues()
    {
        return [
            self::UPLOAD_INTERVAL_DAILY,
            self::UPLOAD_INTERVAL_WEEKLY,
            self::UPLOAD_INTERVAL_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY__DEFAULT,
            self::PRIORITY_LOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['override'] = $data['override'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['upload_option'] = $data['upload_option'] ?? null;
        $this->container['upload_interval'] = $data['upload_interval'] ?? null;
        $this->container['upload_day'] = $data['upload_day'] ?? null;
        $this->container['upload_time'] = $data['upload_time'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['max_log_rate'] = $data['max_log_rate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOverrideAllowableValues();
        if (!is_null($this->container['override']) && !in_array($this->container['override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'override', must be one of '%s'",
                $this->container['override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadOptionAllowableValues();
        if (!is_null($this->container['upload_option']) && !in_array($this->container['upload_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_option', must be one of '%s'",
                $this->container['upload_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadIntervalAllowableValues();
        if (!is_null($this->container['upload_interval']) && !in_array($this->container['upload_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_interval', must be one of '%s'",
                $this->container['upload_interval'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_log_rate']) && ($this->container['max_log_rate'] > 100000)) {
            $invalidProperties[] = "invalid value for 'max_log_rate', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['max_log_rate']) && ($this->container['max_log_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_log_rate', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets override
     *
     * @return string|null
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param string|null $override Overriding FortiCloud settings for this VDOM or use global settings.    enable:Override FortiCloud logging settings.    disable:Use global FortiCloud logging settings.
     *
     * @return self
     */
    public function setOverride($override)
    {
        $allowedValues = $this->getOverrideAllowableValues();
        if (!is_null($override) && !in_array($override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'override', must be one of '%s'",
                    $override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable logging to FortiCloud.    enable:Enable logging to FortiCloud.    disable:Disable logging to FortiCloud.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets upload_option
     *
     * @return string|null
     */
    public function getUploadOption()
    {
        return $this->container['upload_option'];
    }

    /**
     * Sets upload_option
     *
     * @param string|null $upload_option Configure how log messages are sent to FortiCloud.    store-and-upload:Log to the hard disk and then upload logs to FortiCloud.    realtime:Log directly to FortiCloud in real time.    1-minute:Log directly to FortiCloud at 1-minute intervals.    5-minute:Log directly to FortiCloud at 5-minute intervals.
     *
     * @return self
     */
    public function setUploadOption($upload_option)
    {
        $allowedValues = $this->getUploadOptionAllowableValues();
        if (!is_null($upload_option) && !in_array($upload_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_option', must be one of '%s'",
                    $upload_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_option'] = $upload_option;

        return $this;
    }

    /**
     * Gets upload_interval
     *
     * @return string|null
     */
    public function getUploadInterval()
    {
        return $this->container['upload_interval'];
    }

    /**
     * Sets upload_interval
     *
     * @param string|null $upload_interval Frequency of uploading log files to FortiCloud.    daily:Upload log files to FortiCloud once a day.    weekly:Upload log files to FortiCloud once a week.    monthly:Upload log files to FortiCloud once a month.
     *
     * @return self
     */
    public function setUploadInterval($upload_interval)
    {
        $allowedValues = $this->getUploadIntervalAllowableValues();
        if (!is_null($upload_interval) && !in_array($upload_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_interval', must be one of '%s'",
                    $upload_interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_interval'] = $upload_interval;

        return $this;
    }

    /**
     * Gets upload_day
     *
     * @return string|null
     */
    public function getUploadDay()
    {
        return $this->container['upload_day'];
    }

    /**
     * Sets upload_day
     *
     * @param string|null $upload_day Day of week to roll logs.
     *
     * @return self
     */
    public function setUploadDay($upload_day)
    {
        $this->container['upload_day'] = $upload_day;

        return $this;
    }

    /**
     * Gets upload_time
     *
     * @return string|null
     */
    public function getUploadTime()
    {
        return $this->container['upload_time'];
    }

    /**
     * Sets upload_time
     *
     * @param string|null $upload_time Time of day to roll logs (hh:mm).
     *
     * @return self
     */
    public function setUploadTime($upload_time)
    {
        $this->container['upload_time'] = $upload_time;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority Set log transmission priority.    default:Set FortiCloud log transmission priority to default.    low:Set FortiCloud log transmission priority to low.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets max_log_rate
     *
     * @return int|null
     */
    public function getMaxLogRate()
    {
        return $this->container['max_log_rate'];
    }

    /**
     * Sets max_log_rate
     *
     * @param int|null $max_log_rate FortiCloud maximum log rate in MBps (0 = unlimited).
     *
     * @return self
     */
    public function setMaxLogRate($max_log_rate)
    {

        if (!is_null($max_log_rate) && ($max_log_rate > 100000)) {
            throw new \InvalidArgumentException('invalid value for $max_log_rate when calling InlineObject105., must be smaller than or equal to 100000.');
        }
        if (!is_null($max_log_rate) && ($max_log_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_log_rate when calling InlineObject105., must be bigger than or equal to 0.');
        }

        $this->container['max_log_rate'] = $max_log_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


