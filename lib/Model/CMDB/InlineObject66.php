<?php
/**
 * InlineObject66
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject66 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject66 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_66';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'incoming_port' => 'string',
        'incoming_ip' => 'string',
        'outgoing_ip' => 'string',
        'sec_default_action' => 'string',
        'ssl' => 'string',
        'ssl_cert' => 'string',
        'ssl_dh_bits' => 'string',
        'ssl_algorithm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'incoming_port' => null,
        'incoming_ip' => 'ipv4',
        'outgoing_ip' => 'ipv4',
        'sec_default_action' => null,
        'ssl' => null,
        'ssl_cert' => null,
        'ssl_dh_bits' => null,
        'ssl_algorithm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'incoming_port' => 'incoming-port',
        'incoming_ip' => 'incoming-ip',
        'outgoing_ip' => 'outgoing-ip',
        'sec_default_action' => 'sec-default-action',
        'ssl' => 'ssl',
        'ssl_cert' => 'ssl-cert',
        'ssl_dh_bits' => 'ssl-dh-bits',
        'ssl_algorithm' => 'ssl-algorithm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'incoming_port' => 'setIncomingPort',
        'incoming_ip' => 'setIncomingIp',
        'outgoing_ip' => 'setOutgoingIp',
        'sec_default_action' => 'setSecDefaultAction',
        'ssl' => 'setSsl',
        'ssl_cert' => 'setSslCert',
        'ssl_dh_bits' => 'setSslDhBits',
        'ssl_algorithm' => 'setSslAlgorithm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'incoming_port' => 'getIncomingPort',
        'incoming_ip' => 'getIncomingIp',
        'outgoing_ip' => 'getOutgoingIp',
        'sec_default_action' => 'getSecDefaultAction',
        'ssl' => 'getSsl',
        'ssl_cert' => 'getSslCert',
        'ssl_dh_bits' => 'getSslDhBits',
        'ssl_algorithm' => 'getSslAlgorithm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SEC_DEFAULT_ACTION_ACCEPT = 'accept';
    const SEC_DEFAULT_ACTION_DENY = 'deny';
    const SSL_ENABLE = 'enable';
    const SSL_DISABLE = 'disable';
    const SSL_DH_BITS__768 = '768';
    const SSL_DH_BITS__1024 = '1024';
    const SSL_DH_BITS__1536 = '1536';
    const SSL_DH_BITS__2048 = '2048';
    const SSL_ALGORITHM_HIGH = 'high';
    const SSL_ALGORITHM_MEDIUM = 'medium';
    const SSL_ALGORITHM_LOW = 'low';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecDefaultActionAllowableValues()
    {
        return [
            self::SEC_DEFAULT_ACTION_ACCEPT,
            self::SEC_DEFAULT_ACTION_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_ENABLE,
            self::SSL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslDhBitsAllowableValues()
    {
        return [
            self::SSL_DH_BITS__768,
            self::SSL_DH_BITS__1024,
            self::SSL_DH_BITS__1536,
            self::SSL_DH_BITS__2048,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAlgorithmAllowableValues()
    {
        return [
            self::SSL_ALGORITHM_HIGH,
            self::SSL_ALGORITHM_MEDIUM,
            self::SSL_ALGORITHM_LOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['incoming_port'] = $data['incoming_port'] ?? null;
        $this->container['incoming_ip'] = $data['incoming_ip'] ?? null;
        $this->container['outgoing_ip'] = $data['outgoing_ip'] ?? null;
        $this->container['sec_default_action'] = $data['sec_default_action'] ?? null;
        $this->container['ssl'] = $data['ssl'] ?? null;
        $this->container['ssl_cert'] = $data['ssl_cert'] ?? null;
        $this->container['ssl_dh_bits'] = $data['ssl_dh_bits'] ?? null;
        $this->container['ssl_algorithm'] = $data['ssl_algorithm'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecDefaultActionAllowableValues();
        if (!is_null($this->container['sec_default_action']) && !in_array($this->container['sec_default_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sec_default_action', must be one of '%s'",
                $this->container['sec_default_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl', must be one of '%s'",
                $this->container['ssl'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssl_cert']) && (mb_strlen($this->container['ssl_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssl_cert', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSslDhBitsAllowableValues();
        if (!is_null($this->container['ssl_dh_bits']) && !in_array($this->container['ssl_dh_bits'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_dh_bits', must be one of '%s'",
                $this->container['ssl_dh_bits'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($this->container['ssl_algorithm']) && !in_array($this->container['ssl_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                $this->container['ssl_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable the explicit FTP proxy.    enable:Enable the explicit FTP proxy.    disable:Disable the explicit FTP proxy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets incoming_port
     *
     * @return string|null
     */
    public function getIncomingPort()
    {
        return $this->container['incoming_port'];
    }

    /**
     * Sets incoming_port
     *
     * @param string|null $incoming_port Accept incoming FTP requests on one or more ports.
     *
     * @return self
     */
    public function setIncomingPort($incoming_port)
    {
        $this->container['incoming_port'] = $incoming_port;

        return $this;
    }

    /**
     * Gets incoming_ip
     *
     * @return string|null
     */
    public function getIncomingIp()
    {
        return $this->container['incoming_ip'];
    }

    /**
     * Sets incoming_ip
     *
     * @param string|null $incoming_ip Accept incoming FTP requests from this IP address. An interface must have this IP address.
     *
     * @return self
     */
    public function setIncomingIp($incoming_ip)
    {
        $this->container['incoming_ip'] = $incoming_ip;

        return $this;
    }

    /**
     * Gets outgoing_ip
     *
     * @return string|null
     */
    public function getOutgoingIp()
    {
        return $this->container['outgoing_ip'];
    }

    /**
     * Sets outgoing_ip
     *
     * @param string|null $outgoing_ip Outgoing FTP requests will leave from this IP address. An interface must have this IP address.
     *
     * @return self
     */
    public function setOutgoingIp($outgoing_ip)
    {
        $this->container['outgoing_ip'] = $outgoing_ip;

        return $this;
    }

    /**
     * Gets sec_default_action
     *
     * @return string|null
     */
    public function getSecDefaultAction()
    {
        return $this->container['sec_default_action'];
    }

    /**
     * Sets sec_default_action
     *
     * @param string|null $sec_default_action Accept or deny explicit FTP proxy sessions when no FTP proxy firewall policy exists.    accept:Accept requests. All explicit FTP proxy traffic is accepted whether there is an explicit FTP proxy policy or not    deny:Deny requests unless there is a matching explicit FTP proxy policy.
     *
     * @return self
     */
    public function setSecDefaultAction($sec_default_action)
    {
        $allowedValues = $this->getSecDefaultActionAllowableValues();
        if (!is_null($sec_default_action) && !in_array($sec_default_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sec_default_action', must be one of '%s'",
                    $sec_default_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sec_default_action'] = $sec_default_action;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string|null $ssl Enable/disable the explicit FTPS proxy.    enable:Enable the explicit FTPS proxy.    disable:Disable the explicit FTPS proxy.
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl', must be one of '%s'",
                    $ssl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ssl_cert
     *
     * @return string|null
     */
    public function getSslCert()
    {
        return $this->container['ssl_cert'];
    }

    /**
     * Sets ssl_cert
     *
     * @param string|null $ssl_cert Name of certificate for SSL connections to this server (default = \"Fortinet_CA_SSL\").
     *
     * @return self
     */
    public function setSslCert($ssl_cert)
    {
        if (!is_null($ssl_cert) && (mb_strlen($ssl_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssl_cert when calling InlineObject66., must be smaller than or equal to 35.');
        }

        $this->container['ssl_cert'] = $ssl_cert;

        return $this;
    }

    /**
     * Gets ssl_dh_bits
     *
     * @return string|null
     */
    public function getSslDhBits()
    {
        return $this->container['ssl_dh_bits'];
    }

    /**
     * Sets ssl_dh_bits
     *
     * @param string|null $ssl_dh_bits Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048).    768:768-bit Diffie-Hellman prime.    1024:1024-bit Diffie-Hellman prime.    1536:1536-bit Diffie-Hellman prime.    2048:2048-bit Diffie-Hellman prime.
     *
     * @return self
     */
    public function setSslDhBits($ssl_dh_bits)
    {
        $allowedValues = $this->getSslDhBitsAllowableValues();
        if (!is_null($ssl_dh_bits) && !in_array($ssl_dh_bits, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_dh_bits', must be one of '%s'",
                    $ssl_dh_bits,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_dh_bits'] = $ssl_dh_bits;

        return $this;
    }

    /**
     * Gets ssl_algorithm
     *
     * @return string|null
     */
    public function getSslAlgorithm()
    {
        return $this->container['ssl_algorithm'];
    }

    /**
     * Sets ssl_algorithm
     *
     * @param string|null $ssl_algorithm Relative strength of encryption algorithms accepted in negotiation.    high:High encryption. Allow only AES and ChaCha    medium:Medium encryption. Allow AES, ChaCha, 3DES, and RC4.    low:Low encryption. Allow AES, ChaCha, 3DES, RC4, and DES.
     *
     * @return self
     */
    public function setSslAlgorithm($ssl_algorithm)
    {
        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($ssl_algorithm) && !in_array($ssl_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                    $ssl_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_algorithm'] = $ssl_algorithm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


