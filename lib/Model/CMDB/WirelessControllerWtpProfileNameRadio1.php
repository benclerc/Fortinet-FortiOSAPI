<?php
/**
 * WirelessControllerWtpProfileNameRadio1
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerWtpProfileNameRadio1 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerWtpProfileNameRadio1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_wtp_profile__name__radio_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mode' => 'string',
        'band' => 'string',
        'band_5g_type' => 'string',
        'drma' => 'string',
        'drma_sensitivity' => 'string',
        'airtime_fairness' => 'string',
        'protection_mode' => 'string',
        'powersave_optimize' => 'string',
        'transmit_optimize' => 'string',
        'amsdu' => 'string',
        'coexistence' => 'string',
        'zero_wait_dfs' => 'string',
        'bss_color' => 'int',
        'short_guard_interval' => 'string',
        'channel_bonding' => 'string',
        'auto_power_level' => 'string',
        'auto_power_high' => 'int',
        'auto_power_low' => 'int',
        'auto_power_target' => 'string',
        'power_level' => 'int',
        'dtim' => 'int',
        'beacon_interval' => 'int',
        'rts_threshold' => 'int',
        'frag_threshold' => 'int',
        'ap_sniffer_bufsize' => 'int',
        'ap_sniffer_chan' => 'int',
        'ap_sniffer_addr' => 'string',
        'ap_sniffer_mgmt_beacon' => 'string',
        'ap_sniffer_mgmt_probe' => 'string',
        'ap_sniffer_mgmt_other' => 'string',
        'ap_sniffer_ctl' => 'string',
        'ap_sniffer_data' => 'string',
        'channel_utilization' => 'string',
        'wids_profile' => 'string',
        'darrp' => 'string',
        'max_clients' => 'int',
        'max_distance' => 'int',
        'vap_all' => 'string',
        'vaps' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]',
        'channel' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]',
        'call_admission_control' => 'string',
        'call_capacity' => 'int',
        'bandwidth_admission_control' => 'string',
        'bandwidth_capacity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mode' => null,
        'band' => null,
        'band_5g_type' => null,
        'drma' => null,
        'drma_sensitivity' => null,
        'airtime_fairness' => null,
        'protection_mode' => null,
        'powersave_optimize' => null,
        'transmit_optimize' => null,
        'amsdu' => null,
        'coexistence' => null,
        'zero_wait_dfs' => null,
        'bss_color' => null,
        'short_guard_interval' => null,
        'channel_bonding' => null,
        'auto_power_level' => null,
        'auto_power_high' => null,
        'auto_power_low' => null,
        'auto_power_target' => null,
        'power_level' => null,
        'dtim' => null,
        'beacon_interval' => null,
        'rts_threshold' => null,
        'frag_threshold' => null,
        'ap_sniffer_bufsize' => null,
        'ap_sniffer_chan' => null,
        'ap_sniffer_addr' => 'mac-address',
        'ap_sniffer_mgmt_beacon' => null,
        'ap_sniffer_mgmt_probe' => null,
        'ap_sniffer_mgmt_other' => null,
        'ap_sniffer_ctl' => null,
        'ap_sniffer_data' => null,
        'channel_utilization' => null,
        'wids_profile' => null,
        'darrp' => null,
        'max_clients' => null,
        'max_distance' => null,
        'vap_all' => null,
        'vaps' => null,
        'channel' => null,
        'call_admission_control' => null,
        'call_capacity' => null,
        'bandwidth_admission_control' => null,
        'bandwidth_capacity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'band' => 'band',
        'band_5g_type' => 'band-5g-type',
        'drma' => 'drma',
        'drma_sensitivity' => 'drma-sensitivity',
        'airtime_fairness' => 'airtime-fairness',
        'protection_mode' => 'protection-mode',
        'powersave_optimize' => 'powersave-optimize',
        'transmit_optimize' => 'transmit-optimize',
        'amsdu' => 'amsdu',
        'coexistence' => 'coexistence',
        'zero_wait_dfs' => 'zero-wait-dfs',
        'bss_color' => 'bss-color',
        'short_guard_interval' => 'short-guard-interval',
        'channel_bonding' => 'channel-bonding',
        'auto_power_level' => 'auto-power-level',
        'auto_power_high' => 'auto-power-high',
        'auto_power_low' => 'auto-power-low',
        'auto_power_target' => 'auto-power-target',
        'power_level' => 'power-level',
        'dtim' => 'dtim',
        'beacon_interval' => 'beacon-interval',
        'rts_threshold' => 'rts-threshold',
        'frag_threshold' => 'frag-threshold',
        'ap_sniffer_bufsize' => 'ap-sniffer-bufsize',
        'ap_sniffer_chan' => 'ap-sniffer-chan',
        'ap_sniffer_addr' => 'ap-sniffer-addr',
        'ap_sniffer_mgmt_beacon' => 'ap-sniffer-mgmt-beacon',
        'ap_sniffer_mgmt_probe' => 'ap-sniffer-mgmt-probe',
        'ap_sniffer_mgmt_other' => 'ap-sniffer-mgmt-other',
        'ap_sniffer_ctl' => 'ap-sniffer-ctl',
        'ap_sniffer_data' => 'ap-sniffer-data',
        'channel_utilization' => 'channel-utilization',
        'wids_profile' => 'wids-profile',
        'darrp' => 'darrp',
        'max_clients' => 'max-clients',
        'max_distance' => 'max-distance',
        'vap_all' => 'vap-all',
        'vaps' => 'vaps',
        'channel' => 'channel',
        'call_admission_control' => 'call-admission-control',
        'call_capacity' => 'call-capacity',
        'bandwidth_admission_control' => 'bandwidth-admission-control',
        'bandwidth_capacity' => 'bandwidth-capacity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'band' => 'setBand',
        'band_5g_type' => 'setBand5gType',
        'drma' => 'setDrma',
        'drma_sensitivity' => 'setDrmaSensitivity',
        'airtime_fairness' => 'setAirtimeFairness',
        'protection_mode' => 'setProtectionMode',
        'powersave_optimize' => 'setPowersaveOptimize',
        'transmit_optimize' => 'setTransmitOptimize',
        'amsdu' => 'setAmsdu',
        'coexistence' => 'setCoexistence',
        'zero_wait_dfs' => 'setZeroWaitDfs',
        'bss_color' => 'setBssColor',
        'short_guard_interval' => 'setShortGuardInterval',
        'channel_bonding' => 'setChannelBonding',
        'auto_power_level' => 'setAutoPowerLevel',
        'auto_power_high' => 'setAutoPowerHigh',
        'auto_power_low' => 'setAutoPowerLow',
        'auto_power_target' => 'setAutoPowerTarget',
        'power_level' => 'setPowerLevel',
        'dtim' => 'setDtim',
        'beacon_interval' => 'setBeaconInterval',
        'rts_threshold' => 'setRtsThreshold',
        'frag_threshold' => 'setFragThreshold',
        'ap_sniffer_bufsize' => 'setApSnifferBufsize',
        'ap_sniffer_chan' => 'setApSnifferChan',
        'ap_sniffer_addr' => 'setApSnifferAddr',
        'ap_sniffer_mgmt_beacon' => 'setApSnifferMgmtBeacon',
        'ap_sniffer_mgmt_probe' => 'setApSnifferMgmtProbe',
        'ap_sniffer_mgmt_other' => 'setApSnifferMgmtOther',
        'ap_sniffer_ctl' => 'setApSnifferCtl',
        'ap_sniffer_data' => 'setApSnifferData',
        'channel_utilization' => 'setChannelUtilization',
        'wids_profile' => 'setWidsProfile',
        'darrp' => 'setDarrp',
        'max_clients' => 'setMaxClients',
        'max_distance' => 'setMaxDistance',
        'vap_all' => 'setVapAll',
        'vaps' => 'setVaps',
        'channel' => 'setChannel',
        'call_admission_control' => 'setCallAdmissionControl',
        'call_capacity' => 'setCallCapacity',
        'bandwidth_admission_control' => 'setBandwidthAdmissionControl',
        'bandwidth_capacity' => 'setBandwidthCapacity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'band' => 'getBand',
        'band_5g_type' => 'getBand5gType',
        'drma' => 'getDrma',
        'drma_sensitivity' => 'getDrmaSensitivity',
        'airtime_fairness' => 'getAirtimeFairness',
        'protection_mode' => 'getProtectionMode',
        'powersave_optimize' => 'getPowersaveOptimize',
        'transmit_optimize' => 'getTransmitOptimize',
        'amsdu' => 'getAmsdu',
        'coexistence' => 'getCoexistence',
        'zero_wait_dfs' => 'getZeroWaitDfs',
        'bss_color' => 'getBssColor',
        'short_guard_interval' => 'getShortGuardInterval',
        'channel_bonding' => 'getChannelBonding',
        'auto_power_level' => 'getAutoPowerLevel',
        'auto_power_high' => 'getAutoPowerHigh',
        'auto_power_low' => 'getAutoPowerLow',
        'auto_power_target' => 'getAutoPowerTarget',
        'power_level' => 'getPowerLevel',
        'dtim' => 'getDtim',
        'beacon_interval' => 'getBeaconInterval',
        'rts_threshold' => 'getRtsThreshold',
        'frag_threshold' => 'getFragThreshold',
        'ap_sniffer_bufsize' => 'getApSnifferBufsize',
        'ap_sniffer_chan' => 'getApSnifferChan',
        'ap_sniffer_addr' => 'getApSnifferAddr',
        'ap_sniffer_mgmt_beacon' => 'getApSnifferMgmtBeacon',
        'ap_sniffer_mgmt_probe' => 'getApSnifferMgmtProbe',
        'ap_sniffer_mgmt_other' => 'getApSnifferMgmtOther',
        'ap_sniffer_ctl' => 'getApSnifferCtl',
        'ap_sniffer_data' => 'getApSnifferData',
        'channel_utilization' => 'getChannelUtilization',
        'wids_profile' => 'getWidsProfile',
        'darrp' => 'getDarrp',
        'max_clients' => 'getMaxClients',
        'max_distance' => 'getMaxDistance',
        'vap_all' => 'getVapAll',
        'vaps' => 'getVaps',
        'channel' => 'getChannel',
        'call_admission_control' => 'getCallAdmissionControl',
        'call_capacity' => 'getCallCapacity',
        'bandwidth_admission_control' => 'getBandwidthAdmissionControl',
        'bandwidth_capacity' => 'getBandwidthCapacity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODE_DISABLED = 'disabled';
    const MODE_AP = 'ap';
    const MODE_MONITOR = 'monitor';
    const MODE_SNIFFER = 'sniffer';
    const BAND__11A = '802.11a';
    const BAND__11B = '802.11b';
    const BAND__11G = '802.11g';
    const BAND__11N = '802.11n';
    const BAND__11N_5_G = '802.11n-5G';
    const BAND__11AC = '802.11ac';
    const BAND__11AX_5_G = '802.11ax-5G';
    const BAND__11AX = '802.11ax';
    const BAND__11AC_2_G = '802.11ac-2G';
    const BAND__11NG_ONLY = '802.11n,g-only';
    const BAND__11G_ONLY = '802.11g-only';
    const BAND__11N_ONLY = '802.11n-only';
    const BAND__11N_5_G_ONLY = '802.11n-5G-only';
    const BAND__11ACN_ONLY = '802.11ac,n-only';
    const BAND__11AC_ONLY = '802.11ac-only';
    const BAND__11AXAC_ONLY = '802.11ax,ac-only';
    const BAND__11AXACN_ONLY = '802.11ax,ac,n-only';
    const BAND__11AX_5_G_ONLY = '802.11ax-5G-only';
    const BAND__11AXN_ONLY = '802.11ax,n-only';
    const BAND__11AXNG_ONLY = '802.11ax,n,g-only';
    const BAND__11AX_ONLY = '802.11ax-only';
    const BAND_5G_TYPE_FULL = '5g-full';
    const BAND_5G_TYPE_HIGH = '5g-high';
    const BAND_5G_TYPE_LOW = '5g-low';
    const DRMA_DISABLE = 'disable';
    const DRMA_ENABLE = 'enable';
    const DRMA_SENSITIVITY_LOW = 'low';
    const DRMA_SENSITIVITY_MEDIUM = 'medium';
    const DRMA_SENSITIVITY_HIGH = 'high';
    const AIRTIME_FAIRNESS_ENABLE = 'enable';
    const AIRTIME_FAIRNESS_DISABLE = 'disable';
    const PROTECTION_MODE_RTSCTS = 'rtscts';
    const PROTECTION_MODE_CTSONLY = 'ctsonly';
    const PROTECTION_MODE_DISABLE = 'disable';
    const POWERSAVE_OPTIMIZE_TIM = 'tim';
    const POWERSAVE_OPTIMIZE_AC_VO = 'ac-vo';
    const POWERSAVE_OPTIMIZE_NO_OBSS_SCAN = 'no-obss-scan';
    const POWERSAVE_OPTIMIZE_NO_11B_RATE = 'no-11b-rate';
    const POWERSAVE_OPTIMIZE_CLIENT_RATE_FOLLOW = 'client-rate-follow';
    const TRANSMIT_OPTIMIZE_DISABLE = 'disable';
    const TRANSMIT_OPTIMIZE_POWER_SAVE = 'power-save';
    const TRANSMIT_OPTIMIZE_AGGR_LIMIT = 'aggr-limit';
    const TRANSMIT_OPTIMIZE_RETRY_LIMIT = 'retry-limit';
    const TRANSMIT_OPTIMIZE_SEND_BAR = 'send-bar';
    const AMSDU_ENABLE = 'enable';
    const AMSDU_DISABLE = 'disable';
    const COEXISTENCE_ENABLE = 'enable';
    const COEXISTENCE_DISABLE = 'disable';
    const ZERO_WAIT_DFS_ENABLE = 'enable';
    const ZERO_WAIT_DFS_DISABLE = 'disable';
    const SHORT_GUARD_INTERVAL_ENABLE = 'enable';
    const SHORT_GUARD_INTERVAL_DISABLE = 'disable';
    const CHANNEL_BONDING__160_MHZ = '160MHz';
    const CHANNEL_BONDING__80_MHZ = '80MHz';
    const CHANNEL_BONDING__40_MHZ = '40MHz';
    const CHANNEL_BONDING__20_MHZ = '20MHz';
    const AUTO_POWER_LEVEL_ENABLE = 'enable';
    const AUTO_POWER_LEVEL_DISABLE = 'disable';
    const AP_SNIFFER_MGMT_BEACON_ENABLE = 'enable';
    const AP_SNIFFER_MGMT_BEACON_DISABLE = 'disable';
    const AP_SNIFFER_MGMT_PROBE_ENABLE = 'enable';
    const AP_SNIFFER_MGMT_PROBE_DISABLE = 'disable';
    const AP_SNIFFER_MGMT_OTHER_ENABLE = 'enable';
    const AP_SNIFFER_MGMT_OTHER_DISABLE = 'disable';
    const AP_SNIFFER_CTL_ENABLE = 'enable';
    const AP_SNIFFER_CTL_DISABLE = 'disable';
    const AP_SNIFFER_DATA_ENABLE = 'enable';
    const AP_SNIFFER_DATA_DISABLE = 'disable';
    const CHANNEL_UTILIZATION_ENABLE = 'enable';
    const CHANNEL_UTILIZATION_DISABLE = 'disable';
    const DARRP_ENABLE = 'enable';
    const DARRP_DISABLE = 'disable';
    const VAP_ALL_TUNNEL = 'tunnel';
    const VAP_ALL_BRIDGE = 'bridge';
    const VAP_ALL_MANUAL = 'manual';
    const CALL_ADMISSION_CONTROL_ENABLE = 'enable';
    const CALL_ADMISSION_CONTROL_DISABLE = 'disable';
    const BANDWIDTH_ADMISSION_CONTROL_ENABLE = 'enable';
    const BANDWIDTH_ADMISSION_CONTROL_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_DISABLED,
            self::MODE_AP,
            self::MODE_MONITOR,
            self::MODE_SNIFFER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandAllowableValues()
    {
        return [
            self::BAND__11A,
            self::BAND__11B,
            self::BAND__11G,
            self::BAND__11N,
            self::BAND__11N_5_G,
            self::BAND__11AC,
            self::BAND__11AX_5_G,
            self::BAND__11AX,
            self::BAND__11AC_2_G,
            self::BAND__11NG_ONLY,
            self::BAND__11G_ONLY,
            self::BAND__11N_ONLY,
            self::BAND__11N_5_G_ONLY,
            self::BAND__11ACN_ONLY,
            self::BAND__11AC_ONLY,
            self::BAND__11AXAC_ONLY,
            self::BAND__11AXACN_ONLY,
            self::BAND__11AX_5_G_ONLY,
            self::BAND__11AXN_ONLY,
            self::BAND__11AXNG_ONLY,
            self::BAND__11AX_ONLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBand5gTypeAllowableValues()
    {
        return [
            self::BAND_5G_TYPE_FULL,
            self::BAND_5G_TYPE_HIGH,
            self::BAND_5G_TYPE_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDrmaAllowableValues()
    {
        return [
            self::DRMA_DISABLE,
            self::DRMA_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDrmaSensitivityAllowableValues()
    {
        return [
            self::DRMA_SENSITIVITY_LOW,
            self::DRMA_SENSITIVITY_MEDIUM,
            self::DRMA_SENSITIVITY_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAirtimeFairnessAllowableValues()
    {
        return [
            self::AIRTIME_FAIRNESS_ENABLE,
            self::AIRTIME_FAIRNESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtectionModeAllowableValues()
    {
        return [
            self::PROTECTION_MODE_RTSCTS,
            self::PROTECTION_MODE_CTSONLY,
            self::PROTECTION_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPowersaveOptimizeAllowableValues()
    {
        return [
            self::POWERSAVE_OPTIMIZE_TIM,
            self::POWERSAVE_OPTIMIZE_AC_VO,
            self::POWERSAVE_OPTIMIZE_NO_OBSS_SCAN,
            self::POWERSAVE_OPTIMIZE_NO_11B_RATE,
            self::POWERSAVE_OPTIMIZE_CLIENT_RATE_FOLLOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmitOptimizeAllowableValues()
    {
        return [
            self::TRANSMIT_OPTIMIZE_DISABLE,
            self::TRANSMIT_OPTIMIZE_POWER_SAVE,
            self::TRANSMIT_OPTIMIZE_AGGR_LIMIT,
            self::TRANSMIT_OPTIMIZE_RETRY_LIMIT,
            self::TRANSMIT_OPTIMIZE_SEND_BAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmsduAllowableValues()
    {
        return [
            self::AMSDU_ENABLE,
            self::AMSDU_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCoexistenceAllowableValues()
    {
        return [
            self::COEXISTENCE_ENABLE,
            self::COEXISTENCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getZeroWaitDfsAllowableValues()
    {
        return [
            self::ZERO_WAIT_DFS_ENABLE,
            self::ZERO_WAIT_DFS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShortGuardIntervalAllowableValues()
    {
        return [
            self::SHORT_GUARD_INTERVAL_ENABLE,
            self::SHORT_GUARD_INTERVAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelBondingAllowableValues()
    {
        return [
            self::CHANNEL_BONDING__160_MHZ,
            self::CHANNEL_BONDING__80_MHZ,
            self::CHANNEL_BONDING__40_MHZ,
            self::CHANNEL_BONDING__20_MHZ,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoPowerLevelAllowableValues()
    {
        return [
            self::AUTO_POWER_LEVEL_ENABLE,
            self::AUTO_POWER_LEVEL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApSnifferMgmtBeaconAllowableValues()
    {
        return [
            self::AP_SNIFFER_MGMT_BEACON_ENABLE,
            self::AP_SNIFFER_MGMT_BEACON_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApSnifferMgmtProbeAllowableValues()
    {
        return [
            self::AP_SNIFFER_MGMT_PROBE_ENABLE,
            self::AP_SNIFFER_MGMT_PROBE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApSnifferMgmtOtherAllowableValues()
    {
        return [
            self::AP_SNIFFER_MGMT_OTHER_ENABLE,
            self::AP_SNIFFER_MGMT_OTHER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApSnifferCtlAllowableValues()
    {
        return [
            self::AP_SNIFFER_CTL_ENABLE,
            self::AP_SNIFFER_CTL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApSnifferDataAllowableValues()
    {
        return [
            self::AP_SNIFFER_DATA_ENABLE,
            self::AP_SNIFFER_DATA_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelUtilizationAllowableValues()
    {
        return [
            self::CHANNEL_UTILIZATION_ENABLE,
            self::CHANNEL_UTILIZATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDarrpAllowableValues()
    {
        return [
            self::DARRP_ENABLE,
            self::DARRP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVapAllAllowableValues()
    {
        return [
            self::VAP_ALL_TUNNEL,
            self::VAP_ALL_BRIDGE,
            self::VAP_ALL_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallAdmissionControlAllowableValues()
    {
        return [
            self::CALL_ADMISSION_CONTROL_ENABLE,
            self::CALL_ADMISSION_CONTROL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandwidthAdmissionControlAllowableValues()
    {
        return [
            self::BANDWIDTH_ADMISSION_CONTROL_ENABLE,
            self::BANDWIDTH_ADMISSION_CONTROL_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['band'] = $data['band'] ?? null;
        $this->container['band_5g_type'] = $data['band_5g_type'] ?? null;
        $this->container['drma'] = $data['drma'] ?? null;
        $this->container['drma_sensitivity'] = $data['drma_sensitivity'] ?? null;
        $this->container['airtime_fairness'] = $data['airtime_fairness'] ?? null;
        $this->container['protection_mode'] = $data['protection_mode'] ?? null;
        $this->container['powersave_optimize'] = $data['powersave_optimize'] ?? null;
        $this->container['transmit_optimize'] = $data['transmit_optimize'] ?? null;
        $this->container['amsdu'] = $data['amsdu'] ?? null;
        $this->container['coexistence'] = $data['coexistence'] ?? null;
        $this->container['zero_wait_dfs'] = $data['zero_wait_dfs'] ?? null;
        $this->container['bss_color'] = $data['bss_color'] ?? null;
        $this->container['short_guard_interval'] = $data['short_guard_interval'] ?? null;
        $this->container['channel_bonding'] = $data['channel_bonding'] ?? null;
        $this->container['auto_power_level'] = $data['auto_power_level'] ?? null;
        $this->container['auto_power_high'] = $data['auto_power_high'] ?? null;
        $this->container['auto_power_low'] = $data['auto_power_low'] ?? null;
        $this->container['auto_power_target'] = $data['auto_power_target'] ?? null;
        $this->container['power_level'] = $data['power_level'] ?? null;
        $this->container['dtim'] = $data['dtim'] ?? null;
        $this->container['beacon_interval'] = $data['beacon_interval'] ?? null;
        $this->container['rts_threshold'] = $data['rts_threshold'] ?? null;
        $this->container['frag_threshold'] = $data['frag_threshold'] ?? null;
        $this->container['ap_sniffer_bufsize'] = $data['ap_sniffer_bufsize'] ?? null;
        $this->container['ap_sniffer_chan'] = $data['ap_sniffer_chan'] ?? null;
        $this->container['ap_sniffer_addr'] = $data['ap_sniffer_addr'] ?? null;
        $this->container['ap_sniffer_mgmt_beacon'] = $data['ap_sniffer_mgmt_beacon'] ?? null;
        $this->container['ap_sniffer_mgmt_probe'] = $data['ap_sniffer_mgmt_probe'] ?? null;
        $this->container['ap_sniffer_mgmt_other'] = $data['ap_sniffer_mgmt_other'] ?? null;
        $this->container['ap_sniffer_ctl'] = $data['ap_sniffer_ctl'] ?? null;
        $this->container['ap_sniffer_data'] = $data['ap_sniffer_data'] ?? null;
        $this->container['channel_utilization'] = $data['channel_utilization'] ?? null;
        $this->container['wids_profile'] = $data['wids_profile'] ?? null;
        $this->container['darrp'] = $data['darrp'] ?? null;
        $this->container['max_clients'] = $data['max_clients'] ?? null;
        $this->container['max_distance'] = $data['max_distance'] ?? null;
        $this->container['vap_all'] = $data['vap_all'] ?? null;
        $this->container['vaps'] = $data['vaps'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['call_admission_control'] = $data['call_admission_control'] ?? null;
        $this->container['call_capacity'] = $data['call_capacity'] ?? null;
        $this->container['bandwidth_admission_control'] = $data['bandwidth_admission_control'] ?? null;
        $this->container['bandwidth_capacity'] = $data['bandwidth_capacity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBandAllowableValues();
        if (!is_null($this->container['band']) && !in_array($this->container['band'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'band', must be one of '%s'",
                $this->container['band'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBand5gTypeAllowableValues();
        if (!is_null($this->container['band_5g_type']) && !in_array($this->container['band_5g_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'band_5g_type', must be one of '%s'",
                $this->container['band_5g_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDrmaAllowableValues();
        if (!is_null($this->container['drma']) && !in_array($this->container['drma'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drma', must be one of '%s'",
                $this->container['drma'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDrmaSensitivityAllowableValues();
        if (!is_null($this->container['drma_sensitivity']) && !in_array($this->container['drma_sensitivity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drma_sensitivity', must be one of '%s'",
                $this->container['drma_sensitivity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAirtimeFairnessAllowableValues();
        if (!is_null($this->container['airtime_fairness']) && !in_array($this->container['airtime_fairness'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'airtime_fairness', must be one of '%s'",
                $this->container['airtime_fairness'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtectionModeAllowableValues();
        if (!is_null($this->container['protection_mode']) && !in_array($this->container['protection_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protection_mode', must be one of '%s'",
                $this->container['protection_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPowersaveOptimizeAllowableValues();
        if (!is_null($this->container['powersave_optimize']) && !in_array($this->container['powersave_optimize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'powersave_optimize', must be one of '%s'",
                $this->container['powersave_optimize'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransmitOptimizeAllowableValues();
        if (!is_null($this->container['transmit_optimize']) && !in_array($this->container['transmit_optimize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transmit_optimize', must be one of '%s'",
                $this->container['transmit_optimize'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAmsduAllowableValues();
        if (!is_null($this->container['amsdu']) && !in_array($this->container['amsdu'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'amsdu', must be one of '%s'",
                $this->container['amsdu'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCoexistenceAllowableValues();
        if (!is_null($this->container['coexistence']) && !in_array($this->container['coexistence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'coexistence', must be one of '%s'",
                $this->container['coexistence'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getZeroWaitDfsAllowableValues();
        if (!is_null($this->container['zero_wait_dfs']) && !in_array($this->container['zero_wait_dfs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'zero_wait_dfs', must be one of '%s'",
                $this->container['zero_wait_dfs'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bss_color']) && ($this->container['bss_color'] > 63)) {
            $invalidProperties[] = "invalid value for 'bss_color', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['bss_color']) && ($this->container['bss_color'] < 0)) {
            $invalidProperties[] = "invalid value for 'bss_color', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShortGuardIntervalAllowableValues();
        if (!is_null($this->container['short_guard_interval']) && !in_array($this->container['short_guard_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'short_guard_interval', must be one of '%s'",
                $this->container['short_guard_interval'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelBondingAllowableValues();
        if (!is_null($this->container['channel_bonding']) && !in_array($this->container['channel_bonding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_bonding', must be one of '%s'",
                $this->container['channel_bonding'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoPowerLevelAllowableValues();
        if (!is_null($this->container['auto_power_level']) && !in_array($this->container['auto_power_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_power_level', must be one of '%s'",
                $this->container['auto_power_level'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auto_power_high']) && ($this->container['auto_power_high'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_power_high', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_power_high']) && ($this->container['auto_power_high'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_power_high', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_power_low']) && ($this->container['auto_power_low'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_power_low', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_power_low']) && ($this->container['auto_power_low'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_power_low', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_power_target']) && (mb_strlen($this->container['auto_power_target']) > 7)) {
            $invalidProperties[] = "invalid value for 'auto_power_target', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['power_level']) && ($this->container['power_level'] > 100)) {
            $invalidProperties[] = "invalid value for 'power_level', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['power_level']) && ($this->container['power_level'] < 0)) {
            $invalidProperties[] = "invalid value for 'power_level', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dtim']) && ($this->container['dtim'] > 255)) {
            $invalidProperties[] = "invalid value for 'dtim', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['dtim']) && ($this->container['dtim'] < 1)) {
            $invalidProperties[] = "invalid value for 'dtim', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['beacon_interval']) && ($this->container['beacon_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'beacon_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['beacon_interval']) && ($this->container['beacon_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'beacon_interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rts_threshold']) && ($this->container['rts_threshold'] > 2346)) {
            $invalidProperties[] = "invalid value for 'rts_threshold', must be smaller than or equal to 2346.";
        }

        if (!is_null($this->container['rts_threshold']) && ($this->container['rts_threshold'] < 256)) {
            $invalidProperties[] = "invalid value for 'rts_threshold', must be bigger than or equal to 256.";
        }

        if (!is_null($this->container['frag_threshold']) && ($this->container['frag_threshold'] > 2346)) {
            $invalidProperties[] = "invalid value for 'frag_threshold', must be smaller than or equal to 2346.";
        }

        if (!is_null($this->container['frag_threshold']) && ($this->container['frag_threshold'] < 800)) {
            $invalidProperties[] = "invalid value for 'frag_threshold', must be bigger than or equal to 800.";
        }

        if (!is_null($this->container['ap_sniffer_bufsize']) && ($this->container['ap_sniffer_bufsize'] > 32)) {
            $invalidProperties[] = "invalid value for 'ap_sniffer_bufsize', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['ap_sniffer_bufsize']) && ($this->container['ap_sniffer_bufsize'] < 1)) {
            $invalidProperties[] = "invalid value for 'ap_sniffer_bufsize', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ap_sniffer_chan']) && ($this->container['ap_sniffer_chan'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'ap_sniffer_chan', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['ap_sniffer_chan']) && ($this->container['ap_sniffer_chan'] < 0)) {
            $invalidProperties[] = "invalid value for 'ap_sniffer_chan', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getApSnifferMgmtBeaconAllowableValues();
        if (!is_null($this->container['ap_sniffer_mgmt_beacon']) && !in_array($this->container['ap_sniffer_mgmt_beacon'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_sniffer_mgmt_beacon', must be one of '%s'",
                $this->container['ap_sniffer_mgmt_beacon'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApSnifferMgmtProbeAllowableValues();
        if (!is_null($this->container['ap_sniffer_mgmt_probe']) && !in_array($this->container['ap_sniffer_mgmt_probe'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_sniffer_mgmt_probe', must be one of '%s'",
                $this->container['ap_sniffer_mgmt_probe'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApSnifferMgmtOtherAllowableValues();
        if (!is_null($this->container['ap_sniffer_mgmt_other']) && !in_array($this->container['ap_sniffer_mgmt_other'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_sniffer_mgmt_other', must be one of '%s'",
                $this->container['ap_sniffer_mgmt_other'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApSnifferCtlAllowableValues();
        if (!is_null($this->container['ap_sniffer_ctl']) && !in_array($this->container['ap_sniffer_ctl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_sniffer_ctl', must be one of '%s'",
                $this->container['ap_sniffer_ctl'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApSnifferDataAllowableValues();
        if (!is_null($this->container['ap_sniffer_data']) && !in_array($this->container['ap_sniffer_data'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ap_sniffer_data', must be one of '%s'",
                $this->container['ap_sniffer_data'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelUtilizationAllowableValues();
        if (!is_null($this->container['channel_utilization']) && !in_array($this->container['channel_utilization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_utilization', must be one of '%s'",
                $this->container['channel_utilization'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wids_profile']) && (mb_strlen($this->container['wids_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'wids_profile', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getDarrpAllowableValues();
        if (!is_null($this->container['darrp']) && !in_array($this->container['darrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'darrp', must be one of '%s'",
                $this->container['darrp'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_distance']) && ($this->container['max_distance'] > 54000)) {
            $invalidProperties[] = "invalid value for 'max_distance', must be smaller than or equal to 54000.";
        }

        if (!is_null($this->container['max_distance']) && ($this->container['max_distance'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_distance', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getVapAllAllowableValues();
        if (!is_null($this->container['vap_all']) && !in_array($this->container['vap_all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vap_all', must be one of '%s'",
                $this->container['vap_all'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vaps']) && (count($this->container['vaps']) > 0)) {
            $invalidProperties[] = "invalid value for 'vaps', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['channel']) && (count($this->container['channel']) > 0)) {
            $invalidProperties[] = "invalid value for 'channel', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getCallAdmissionControlAllowableValues();
        if (!is_null($this->container['call_admission_control']) && !in_array($this->container['call_admission_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'call_admission_control', must be one of '%s'",
                $this->container['call_admission_control'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['call_capacity']) && ($this->container['call_capacity'] > 60)) {
            $invalidProperties[] = "invalid value for 'call_capacity', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['call_capacity']) && ($this->container['call_capacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'call_capacity', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBandwidthAdmissionControlAllowableValues();
        if (!is_null($this->container['bandwidth_admission_control']) && !in_array($this->container['bandwidth_admission_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bandwidth_admission_control', must be one of '%s'",
                $this->container['bandwidth_admission_control'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bandwidth_capacity']) && ($this->container['bandwidth_capacity'] > 600000)) {
            $invalidProperties[] = "invalid value for 'bandwidth_capacity', must be smaller than or equal to 600000.";
        }

        if (!is_null($this->container['bandwidth_capacity']) && ($this->container['bandwidth_capacity'] < 1)) {
            $invalidProperties[] = "invalid value for 'bandwidth_capacity', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Mode of radio 1. Radio 1 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.    disabled:Radio 1 is disabled.    ap:Radio 1 operates as an access point that allows WiFi clients to connect to your network.    monitor:Radio 1 operates as a dedicated monitor. As a monitor, the radio scans for other WiFi access points and adds them to the Rogue AP monitor list.    sniffer:Radio 1 operates as a sniffer capturing WiFi frames on air.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets band
     *
     * @return string|null
     */
    public function getBand()
    {
        return $this->container['band'];
    }

    /**
     * Sets band
     *
     * @param string|null $band WiFi band that Radio 1 operates on.    802.11a:802.11a.    802.11b:802.11b.    802.11g:802.11g/b.    802.11n:802.11n/g/b at 2.4GHz.    802.11n-5G:802.11n/a at 5GHz.    802.11ac:802.11ac/n/a.    802.11ax-5G:802.11ax/ac/n/a at 5GHz.    802.11ax:802.11ax/n/g/b at 2.4GHz.    802.11ac-2G:802.11ac at 2.4GHz.    802.11n,g-only:802.11n/g at 2.4GHz.    802.11g-only:802.11g.    802.11n-only:802.11n at 2.4GHz.    802.11n-5G-only:802.11n at 5GHz.    802.11ac,n-only:802.11ac/n.    802.11ac-only:802.11ac.    802.11ax,ac-only:802.11ax/ac at 5GHz.    802.11ax,ac,n-only:802.11ax/ac/n at 5GHz.    802.11ax-5G-only:802.11ax at 5GHz.    802.11ax,n-only:802.11ax/n at 2.4GHz.    802.11ax,n,g-only:802.11ax/n/g at 2.4GHz.    802.11ax-only:802.11ax at 2.4GHz.
     *
     * @return self
     */
    public function setBand($band)
    {
        $allowedValues = $this->getBandAllowableValues();
        if (!is_null($band) && !in_array($band, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'band', must be one of '%s'",
                    $band,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band'] = $band;

        return $this;
    }

    /**
     * Gets band_5g_type
     *
     * @return string|null
     */
    public function getBand5gType()
    {
        return $this->container['band_5g_type'];
    }

    /**
     * Sets band_5g_type
     *
     * @param string|null $band_5g_type WiFi 5G band type.    5g-full:Full 5G band.    5g-high:High 5G band.    5g-low:Low 5G band.
     *
     * @return self
     */
    public function setBand5gType($band_5g_type)
    {
        $allowedValues = $this->getBand5gTypeAllowableValues();
        if (!is_null($band_5g_type) && !in_array($band_5g_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'band_5g_type', must be one of '%s'",
                    $band_5g_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band_5g_type'] = $band_5g_type;

        return $this;
    }

    /**
     * Gets drma
     *
     * @return string|null
     */
    public function getDrma()
    {
        return $this->container['drma'];
    }

    /**
     * Sets drma
     *
     * @param string|null $drma Enable/disable dynamic radio mode assignment (DRMA) (default = disable).    disable:Disable dynamic radio mode assignment (DRMA).    enable:Enable dynamic radio mode assignment (DRMA).
     *
     * @return self
     */
    public function setDrma($drma)
    {
        $allowedValues = $this->getDrmaAllowableValues();
        if (!is_null($drma) && !in_array($drma, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drma', must be one of '%s'",
                    $drma,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drma'] = $drma;

        return $this;
    }

    /**
     * Gets drma_sensitivity
     *
     * @return string|null
     */
    public function getDrmaSensitivity()
    {
        return $this->container['drma_sensitivity'];
    }

    /**
     * Sets drma_sensitivity
     *
     * @param string|null $drma_sensitivity Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low).    low:Consider a radio as redundant when its NCF is 100%.    medium:Consider a radio as redundant when its NCF is 95%.    high:Consider a radio as redundant when its NCF is 90%.
     *
     * @return self
     */
    public function setDrmaSensitivity($drma_sensitivity)
    {
        $allowedValues = $this->getDrmaSensitivityAllowableValues();
        if (!is_null($drma_sensitivity) && !in_array($drma_sensitivity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drma_sensitivity', must be one of '%s'",
                    $drma_sensitivity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drma_sensitivity'] = $drma_sensitivity;

        return $this;
    }

    /**
     * Gets airtime_fairness
     *
     * @return string|null
     */
    public function getAirtimeFairness()
    {
        return $this->container['airtime_fairness'];
    }

    /**
     * Sets airtime_fairness
     *
     * @param string|null $airtime_fairness Enable/disable airtime fairness (default = disable).    enable:Enable airtime fairness (ATF) support.    disable:Disable airtime fairness (ATF) support.
     *
     * @return self
     */
    public function setAirtimeFairness($airtime_fairness)
    {
        $allowedValues = $this->getAirtimeFairnessAllowableValues();
        if (!is_null($airtime_fairness) && !in_array($airtime_fairness, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'airtime_fairness', must be one of '%s'",
                    $airtime_fairness,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['airtime_fairness'] = $airtime_fairness;

        return $this;
    }

    /**
     * Gets protection_mode
     *
     * @return string|null
     */
    public function getProtectionMode()
    {
        return $this->container['protection_mode'];
    }

    /**
     * Sets protection_mode
     *
     * @param string|null $protection_mode Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable).    rtscts:Enable 802.11g protection RTS/CTS mode.    ctsonly:Enable 802.11g protection CTS only mode.    disable:Disable 802.11g protection mode.
     *
     * @return self
     */
    public function setProtectionMode($protection_mode)
    {
        $allowedValues = $this->getProtectionModeAllowableValues();
        if (!is_null($protection_mode) && !in_array($protection_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protection_mode', must be one of '%s'",
                    $protection_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protection_mode'] = $protection_mode;

        return $this;
    }

    /**
     * Gets powersave_optimize
     *
     * @return string|null
     */
    public function getPowersaveOptimize()
    {
        return $this->container['powersave_optimize'];
    }

    /**
     * Sets powersave_optimize
     *
     * @param string|null $powersave_optimize Enable client power-saving features such as TIM, AC VO, and OBSS etc.    tim:TIM bit for client in power save mode.    ac-vo:Use AC VO priority to send out packets in the power save queue.    no-obss-scan:Do not put OBSS scan IE into beacon and probe response frames.    no-11b-rate:Do not send frame using 11b data rate.    client-rate-follow:Adapt transmitting PHY rate with receiving PHY rate from a client.
     *
     * @return self
     */
    public function setPowersaveOptimize($powersave_optimize)
    {
        $allowedValues = $this->getPowersaveOptimizeAllowableValues();
        if (!is_null($powersave_optimize) && !in_array($powersave_optimize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'powersave_optimize', must be one of '%s'",
                    $powersave_optimize,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['powersave_optimize'] = $powersave_optimize;

        return $this;
    }

    /**
     * Gets transmit_optimize
     *
     * @return string|null
     */
    public function getTransmitOptimize()
    {
        return $this->container['transmit_optimize'];
    }

    /**
     * Sets transmit_optimize
     *
     * @param string|null $transmit_optimize Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default.    disable:Disable packet transmission optimization.    power-save:Tag client as operating in power save mode if excessive transmit retries occur.    aggr-limit:Set aggregation limit to a lower value when data rate is low.    retry-limit:Set software retry limit to a lower value when data rate is low.    send-bar:Limit transmission of BAR frames.
     *
     * @return self
     */
    public function setTransmitOptimize($transmit_optimize)
    {
        $allowedValues = $this->getTransmitOptimizeAllowableValues();
        if (!is_null($transmit_optimize) && !in_array($transmit_optimize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transmit_optimize', must be one of '%s'",
                    $transmit_optimize,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmit_optimize'] = $transmit_optimize;

        return $this;
    }

    /**
     * Gets amsdu
     *
     * @return string|null
     */
    public function getAmsdu()
    {
        return $this->container['amsdu'];
    }

    /**
     * Sets amsdu
     *
     * @param string|null $amsdu Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable).    enable:Enable AMSDU support.    disable:Disable AMSDU support.
     *
     * @return self
     */
    public function setAmsdu($amsdu)
    {
        $allowedValues = $this->getAmsduAllowableValues();
        if (!is_null($amsdu) && !in_array($amsdu, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'amsdu', must be one of '%s'",
                    $amsdu,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amsdu'] = $amsdu;

        return $this;
    }

    /**
     * Gets coexistence
     *
     * @return string|null
     */
    public function getCoexistence()
    {
        return $this->container['coexistence'];
    }

    /**
     * Sets coexistence
     *
     * @param string|null $coexistence Enable/disable allowing both HT20 and HT40 on the same radio (default = enable).    enable:Enable support for both HT20 and HT40 on the same radio.    disable:Disable support for both HT20 and HT40 on the same radio.
     *
     * @return self
     */
    public function setCoexistence($coexistence)
    {
        $allowedValues = $this->getCoexistenceAllowableValues();
        if (!is_null($coexistence) && !in_array($coexistence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'coexistence', must be one of '%s'",
                    $coexistence,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['coexistence'] = $coexistence;

        return $this;
    }

    /**
     * Gets zero_wait_dfs
     *
     * @return string|null
     */
    public function getZeroWaitDfs()
    {
        return $this->container['zero_wait_dfs'];
    }

    /**
     * Sets zero_wait_dfs
     *
     * @param string|null $zero_wait_dfs Enable/disable zero wait DFS on radio (default = enable).    enable:Enable zero wait DFS    disable:Disable zero wait DFS
     *
     * @return self
     */
    public function setZeroWaitDfs($zero_wait_dfs)
    {
        $allowedValues = $this->getZeroWaitDfsAllowableValues();
        if (!is_null($zero_wait_dfs) && !in_array($zero_wait_dfs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'zero_wait_dfs', must be one of '%s'",
                    $zero_wait_dfs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['zero_wait_dfs'] = $zero_wait_dfs;

        return $this;
    }

    /**
     * Gets bss_color
     *
     * @return int|null
     */
    public function getBssColor()
    {
        return $this->container['bss_color'];
    }

    /**
     * Sets bss_color
     *
     * @param int|null $bss_color BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
     *
     * @return self
     */
    public function setBssColor($bss_color)
    {

        if (!is_null($bss_color) && ($bss_color > 63)) {
            throw new \InvalidArgumentException('invalid value for $bss_color when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 63.');
        }
        if (!is_null($bss_color) && ($bss_color < 0)) {
            throw new \InvalidArgumentException('invalid value for $bss_color when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['bss_color'] = $bss_color;

        return $this;
    }

    /**
     * Gets short_guard_interval
     *
     * @return string|null
     */
    public function getShortGuardInterval()
    {
        return $this->container['short_guard_interval'];
    }

    /**
     * Sets short_guard_interval
     *
     * @param string|null $short_guard_interval Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns.    enable:Select the 400 ns short guard interval (Short GI).    disable:Select the 800 ns long guard interval (Long GI).
     *
     * @return self
     */
    public function setShortGuardInterval($short_guard_interval)
    {
        $allowedValues = $this->getShortGuardIntervalAllowableValues();
        if (!is_null($short_guard_interval) && !in_array($short_guard_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'short_guard_interval', must be one of '%s'",
                    $short_guard_interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['short_guard_interval'] = $short_guard_interval;

        return $this;
    }

    /**
     * Gets channel_bonding
     *
     * @return string|null
     */
    public function getChannelBonding()
    {
        return $this->container['channel_bonding'];
    }

    /**
     * Sets channel_bonding
     *
     * @param string|null $channel_bonding Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence.    160MHz:160 MHz channel width.    80MHz:80 MHz channel width.    40MHz:40 MHz channel width.    20MHz:20 MHz channel width.
     *
     * @return self
     */
    public function setChannelBonding($channel_bonding)
    {
        $allowedValues = $this->getChannelBondingAllowableValues();
        if (!is_null($channel_bonding) && !in_array($channel_bonding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_bonding', must be one of '%s'",
                    $channel_bonding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_bonding'] = $channel_bonding;

        return $this;
    }

    /**
     * Gets auto_power_level
     *
     * @return string|null
     */
    public function getAutoPowerLevel()
    {
        return $this->container['auto_power_level'];
    }

    /**
     * Sets auto_power_level
     *
     * @param string|null $auto_power_level Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable).    enable:Enable automatic transmit power adjustment.    disable:Disable automatic transmit power adjustment.
     *
     * @return self
     */
    public function setAutoPowerLevel($auto_power_level)
    {
        $allowedValues = $this->getAutoPowerLevelAllowableValues();
        if (!is_null($auto_power_level) && !in_array($auto_power_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_power_level', must be one of '%s'",
                    $auto_power_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_power_level'] = $auto_power_level;

        return $this;
    }

    /**
     * Gets auto_power_high
     *
     * @return int|null
     */
    public function getAutoPowerHigh()
    {
        return $this->container['auto_power_high'];
    }

    /**
     * Sets auto_power_high
     *
     * @param int|null $auto_power_high The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     *
     * @return self
     */
    public function setAutoPowerHigh($auto_power_high)
    {

        if (!is_null($auto_power_high) && ($auto_power_high > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_high when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_power_high) && ($auto_power_high < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_high when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['auto_power_high'] = $auto_power_high;

        return $this;
    }

    /**
     * Gets auto_power_low
     *
     * @return int|null
     */
    public function getAutoPowerLow()
    {
        return $this->container['auto_power_low'];
    }

    /**
     * Sets auto_power_low
     *
     * @param int|null $auto_power_low The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
     *
     * @return self
     */
    public function setAutoPowerLow($auto_power_low)
    {

        if (!is_null($auto_power_low) && ($auto_power_low > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_low when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_power_low) && ($auto_power_low < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_power_low when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['auto_power_low'] = $auto_power_low;

        return $this;
    }

    /**
     * Gets auto_power_target
     *
     * @return string|null
     */
    public function getAutoPowerTarget()
    {
        return $this->container['auto_power_target'];
    }

    /**
     * Sets auto_power_target
     *
     * @param string|null $auto_power_target The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
     *
     * @return self
     */
    public function setAutoPowerTarget($auto_power_target)
    {
        if (!is_null($auto_power_target) && (mb_strlen($auto_power_target) > 7)) {
            throw new \InvalidArgumentException('invalid length for $auto_power_target when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 7.');
        }

        $this->container['auto_power_target'] = $auto_power_target;

        return $this;
    }

    /**
     * Gets power_level
     *
     * @return int|null
     */
    public function getPowerLevel()
    {
        return $this->container['power_level'];
    }

    /**
     * Sets power_level
     *
     * @param int|null $power_level Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
     *
     * @return self
     */
    public function setPowerLevel($power_level)
    {

        if (!is_null($power_level) && ($power_level > 100)) {
            throw new \InvalidArgumentException('invalid value for $power_level when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 100.');
        }
        if (!is_null($power_level) && ($power_level < 0)) {
            throw new \InvalidArgumentException('invalid value for $power_level when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['power_level'] = $power_level;

        return $this;
    }

    /**
     * Gets dtim
     *
     * @return int|null
     */
    public function getDtim()
    {
        return $this->container['dtim'];
    }

    /**
     * Sets dtim
     *
     * @param int|null $dtim Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
     *
     * @return self
     */
    public function setDtim($dtim)
    {

        if (!is_null($dtim) && ($dtim > 255)) {
            throw new \InvalidArgumentException('invalid value for $dtim when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 255.');
        }
        if (!is_null($dtim) && ($dtim < 1)) {
            throw new \InvalidArgumentException('invalid value for $dtim when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 1.');
        }

        $this->container['dtim'] = $dtim;

        return $this;
    }

    /**
     * Gets beacon_interval
     *
     * @return int|null
     */
    public function getBeaconInterval()
    {
        return $this->container['beacon_interval'];
    }

    /**
     * Sets beacon_interval
     *
     * @param int|null $beacon_interval Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
     *
     * @return self
     */
    public function setBeaconInterval($beacon_interval)
    {

        if (!is_null($beacon_interval) && ($beacon_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $beacon_interval when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 65535.');
        }
        if (!is_null($beacon_interval) && ($beacon_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $beacon_interval when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['beacon_interval'] = $beacon_interval;

        return $this;
    }

    /**
     * Gets rts_threshold
     *
     * @return int|null
     */
    public function getRtsThreshold()
    {
        return $this->container['rts_threshold'];
    }

    /**
     * Sets rts_threshold
     *
     * @param int|null $rts_threshold Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
     *
     * @return self
     */
    public function setRtsThreshold($rts_threshold)
    {

        if (!is_null($rts_threshold) && ($rts_threshold > 2346)) {
            throw new \InvalidArgumentException('invalid value for $rts_threshold when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 2346.');
        }
        if (!is_null($rts_threshold) && ($rts_threshold < 256)) {
            throw new \InvalidArgumentException('invalid value for $rts_threshold when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 256.');
        }

        $this->container['rts_threshold'] = $rts_threshold;

        return $this;
    }

    /**
     * Gets frag_threshold
     *
     * @return int|null
     */
    public function getFragThreshold()
    {
        return $this->container['frag_threshold'];
    }

    /**
     * Sets frag_threshold
     *
     * @param int|null $frag_threshold Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
     *
     * @return self
     */
    public function setFragThreshold($frag_threshold)
    {

        if (!is_null($frag_threshold) && ($frag_threshold > 2346)) {
            throw new \InvalidArgumentException('invalid value for $frag_threshold when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 2346.');
        }
        if (!is_null($frag_threshold) && ($frag_threshold < 800)) {
            throw new \InvalidArgumentException('invalid value for $frag_threshold when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 800.');
        }

        $this->container['frag_threshold'] = $frag_threshold;

        return $this;
    }

    /**
     * Gets ap_sniffer_bufsize
     *
     * @return int|null
     */
    public function getApSnifferBufsize()
    {
        return $this->container['ap_sniffer_bufsize'];
    }

    /**
     * Sets ap_sniffer_bufsize
     *
     * @param int|null $ap_sniffer_bufsize Sniffer buffer size (1 - 32 MB, default = 16).
     *
     * @return self
     */
    public function setApSnifferBufsize($ap_sniffer_bufsize)
    {

        if (!is_null($ap_sniffer_bufsize) && ($ap_sniffer_bufsize > 32)) {
            throw new \InvalidArgumentException('invalid value for $ap_sniffer_bufsize when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 32.');
        }
        if (!is_null($ap_sniffer_bufsize) && ($ap_sniffer_bufsize < 1)) {
            throw new \InvalidArgumentException('invalid value for $ap_sniffer_bufsize when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 1.');
        }

        $this->container['ap_sniffer_bufsize'] = $ap_sniffer_bufsize;

        return $this;
    }

    /**
     * Gets ap_sniffer_chan
     *
     * @return int|null
     */
    public function getApSnifferChan()
    {
        return $this->container['ap_sniffer_chan'];
    }

    /**
     * Sets ap_sniffer_chan
     *
     * @param int|null $ap_sniffer_chan Channel on which to operate the sniffer (default = 6).
     *
     * @return self
     */
    public function setApSnifferChan($ap_sniffer_chan)
    {

        if (!is_null($ap_sniffer_chan) && ($ap_sniffer_chan > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $ap_sniffer_chan when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($ap_sniffer_chan) && ($ap_sniffer_chan < 0)) {
            throw new \InvalidArgumentException('invalid value for $ap_sniffer_chan when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['ap_sniffer_chan'] = $ap_sniffer_chan;

        return $this;
    }

    /**
     * Gets ap_sniffer_addr
     *
     * @return string|null
     */
    public function getApSnifferAddr()
    {
        return $this->container['ap_sniffer_addr'];
    }

    /**
     * Sets ap_sniffer_addr
     *
     * @param string|null $ap_sniffer_addr MAC address to monitor.
     *
     * @return self
     */
    public function setApSnifferAddr($ap_sniffer_addr)
    {
        $this->container['ap_sniffer_addr'] = $ap_sniffer_addr;

        return $this;
    }

    /**
     * Gets ap_sniffer_mgmt_beacon
     *
     * @return string|null
     */
    public function getApSnifferMgmtBeacon()
    {
        return $this->container['ap_sniffer_mgmt_beacon'];
    }

    /**
     * Sets ap_sniffer_mgmt_beacon
     *
     * @param string|null $ap_sniffer_mgmt_beacon Enable/disable sniffer on WiFi management Beacon frames (default = enable).    enable:Enable sniffer on WiFi management beacon frame.    disable:Disable sniffer on WiFi management beacon frame.
     *
     * @return self
     */
    public function setApSnifferMgmtBeacon($ap_sniffer_mgmt_beacon)
    {
        $allowedValues = $this->getApSnifferMgmtBeaconAllowableValues();
        if (!is_null($ap_sniffer_mgmt_beacon) && !in_array($ap_sniffer_mgmt_beacon, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_sniffer_mgmt_beacon', must be one of '%s'",
                    $ap_sniffer_mgmt_beacon,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_sniffer_mgmt_beacon'] = $ap_sniffer_mgmt_beacon;

        return $this;
    }

    /**
     * Gets ap_sniffer_mgmt_probe
     *
     * @return string|null
     */
    public function getApSnifferMgmtProbe()
    {
        return $this->container['ap_sniffer_mgmt_probe'];
    }

    /**
     * Sets ap_sniffer_mgmt_probe
     *
     * @param string|null $ap_sniffer_mgmt_probe Enable/disable sniffer on WiFi management probe frames (default = enable).    enable:Enable sniffer on WiFi management probe frame.    disable:Enable sniffer on WiFi management probe frame.
     *
     * @return self
     */
    public function setApSnifferMgmtProbe($ap_sniffer_mgmt_probe)
    {
        $allowedValues = $this->getApSnifferMgmtProbeAllowableValues();
        if (!is_null($ap_sniffer_mgmt_probe) && !in_array($ap_sniffer_mgmt_probe, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_sniffer_mgmt_probe', must be one of '%s'",
                    $ap_sniffer_mgmt_probe,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_sniffer_mgmt_probe'] = $ap_sniffer_mgmt_probe;

        return $this;
    }

    /**
     * Gets ap_sniffer_mgmt_other
     *
     * @return string|null
     */
    public function getApSnifferMgmtOther()
    {
        return $this->container['ap_sniffer_mgmt_other'];
    }

    /**
     * Sets ap_sniffer_mgmt_other
     *
     * @param string|null $ap_sniffer_mgmt_other Enable/disable sniffer on WiFi management other frames  (default = enable).    enable:Enable sniffer on WiFi management other frame.    disable:Disable sniffer on WiFi management other frame.
     *
     * @return self
     */
    public function setApSnifferMgmtOther($ap_sniffer_mgmt_other)
    {
        $allowedValues = $this->getApSnifferMgmtOtherAllowableValues();
        if (!is_null($ap_sniffer_mgmt_other) && !in_array($ap_sniffer_mgmt_other, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_sniffer_mgmt_other', must be one of '%s'",
                    $ap_sniffer_mgmt_other,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_sniffer_mgmt_other'] = $ap_sniffer_mgmt_other;

        return $this;
    }

    /**
     * Gets ap_sniffer_ctl
     *
     * @return string|null
     */
    public function getApSnifferCtl()
    {
        return $this->container['ap_sniffer_ctl'];
    }

    /**
     * Sets ap_sniffer_ctl
     *
     * @param string|null $ap_sniffer_ctl Enable/disable sniffer on WiFi control frame (default = enable).    enable:Enable sniffer on WiFi control frame.    disable:Disable sniffer on WiFi control frame.
     *
     * @return self
     */
    public function setApSnifferCtl($ap_sniffer_ctl)
    {
        $allowedValues = $this->getApSnifferCtlAllowableValues();
        if (!is_null($ap_sniffer_ctl) && !in_array($ap_sniffer_ctl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_sniffer_ctl', must be one of '%s'",
                    $ap_sniffer_ctl,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_sniffer_ctl'] = $ap_sniffer_ctl;

        return $this;
    }

    /**
     * Gets ap_sniffer_data
     *
     * @return string|null
     */
    public function getApSnifferData()
    {
        return $this->container['ap_sniffer_data'];
    }

    /**
     * Sets ap_sniffer_data
     *
     * @param string|null $ap_sniffer_data Enable/disable sniffer on WiFi data frame (default = enable).    enable:Enable sniffer on WiFi data frame    disable:Disable sniffer on WiFi data frame
     *
     * @return self
     */
    public function setApSnifferData($ap_sniffer_data)
    {
        $allowedValues = $this->getApSnifferDataAllowableValues();
        if (!is_null($ap_sniffer_data) && !in_array($ap_sniffer_data, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ap_sniffer_data', must be one of '%s'",
                    $ap_sniffer_data,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ap_sniffer_data'] = $ap_sniffer_data;

        return $this;
    }

    /**
     * Gets channel_utilization
     *
     * @return string|null
     */
    public function getChannelUtilization()
    {
        return $this->container['channel_utilization'];
    }

    /**
     * Sets channel_utilization
     *
     * @param string|null $channel_utilization Enable/disable measuring channel utilization.    enable:Enable measuring channel utilization.    disable:Disable measuring channel utilization.
     *
     * @return self
     */
    public function setChannelUtilization($channel_utilization)
    {
        $allowedValues = $this->getChannelUtilizationAllowableValues();
        if (!is_null($channel_utilization) && !in_array($channel_utilization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_utilization', must be one of '%s'",
                    $channel_utilization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_utilization'] = $channel_utilization;

        return $this;
    }

    /**
     * Gets wids_profile
     *
     * @return string|null
     */
    public function getWidsProfile()
    {
        return $this->container['wids_profile'];
    }

    /**
     * Sets wids_profile
     *
     * @param string|null $wids_profile Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
     *
     * @return self
     */
    public function setWidsProfile($wids_profile)
    {
        if (!is_null($wids_profile) && (mb_strlen($wids_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $wids_profile when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 35.');
        }

        $this->container['wids_profile'] = $wids_profile;

        return $this;
    }

    /**
     * Gets darrp
     *
     * @return string|null
     */
    public function getDarrp()
    {
        return $this->container['darrp'];
    }

    /**
     * Sets darrp
     *
     * @param string|null $darrp Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable).    enable:Enable distributed automatic radio resource provisioning.    disable:Disable distributed automatic radio resource provisioning.
     *
     * @return self
     */
    public function setDarrp($darrp)
    {
        $allowedValues = $this->getDarrpAllowableValues();
        if (!is_null($darrp) && !in_array($darrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'darrp', must be one of '%s'",
                    $darrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['darrp'] = $darrp;

        return $this;
    }

    /**
     * Gets max_clients
     *
     * @return int|null
     */
    public function getMaxClients()
    {
        return $this->container['max_clients'];
    }

    /**
     * Sets max_clients
     *
     * @param int|null $max_clients Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
     *
     * @return self
     */
    public function setMaxClients($max_clients)
    {

        if (!is_null($max_clients) && ($max_clients > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_clients) && ($max_clients < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['max_clients'] = $max_clients;

        return $this;
    }

    /**
     * Gets max_distance
     *
     * @return int|null
     */
    public function getMaxDistance()
    {
        return $this->container['max_distance'];
    }

    /**
     * Sets max_distance
     *
     * @param int|null $max_distance Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
     *
     * @return self
     */
    public function setMaxDistance($max_distance)
    {

        if (!is_null($max_distance) && ($max_distance > 54000)) {
            throw new \InvalidArgumentException('invalid value for $max_distance when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 54000.');
        }
        if (!is_null($max_distance) && ($max_distance < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_distance when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['max_distance'] = $max_distance;

        return $this;
    }

    /**
     * Gets vap_all
     *
     * @return string|null
     */
    public function getVapAll()
    {
        return $this->container['vap_all'];
    }

    /**
     * Sets vap_all
     *
     * @param string|null $vap_all Configure method for assigning SSIDs to this FortiAP (default = automatically assign tunnel SSIDs).    tunnel:Automatically select tunnel SSIDs.    bridge:Automatically select local-bridging SSIDs.    manual:Manually select SSIDs.
     *
     * @return self
     */
    public function setVapAll($vap_all)
    {
        $allowedValues = $this->getVapAllAllowableValues();
        if (!is_null($vap_all) && !in_array($vap_all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vap_all', must be one of '%s'",
                    $vap_all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vap_all'] = $vap_all;

        return $this;
    }

    /**
     * Gets vaps
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]|null
     */
    public function getVaps()
    {
        return $this->container['vaps'];
    }

    /**
     * Sets vaps
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdVaps[]|null $vaps Manually selected list of Virtual Access Points (VAPs).
     *
     * @return self
     */
    public function setVaps($vaps)
    {

        if (!is_null($vaps) && (count($vaps) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vaps when calling WirelessControllerWtpProfileNameRadio1., number of items must be less than or equal to 0.');
        }
        $this->container['vaps'] = $vaps;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerWtpWtpIdChannel[]|null $channel Selected list of wireless radio channels.
     *
     * @return self
     */
    public function setChannel($channel)
    {

        if (!is_null($channel) && (count($channel) > 0)) {
            throw new \InvalidArgumentException('invalid value for $channel when calling WirelessControllerWtpProfileNameRadio1., number of items must be less than or equal to 0.');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets call_admission_control
     *
     * @return string|null
     */
    public function getCallAdmissionControl()
    {
        return $this->container['call_admission_control'];
    }

    /**
     * Sets call_admission_control
     *
     * @param string|null $call_admission_control Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them.    enable:Enable WMM call admission control.    disable:Disable WMM call admission control.
     *
     * @return self
     */
    public function setCallAdmissionControl($call_admission_control)
    {
        $allowedValues = $this->getCallAdmissionControlAllowableValues();
        if (!is_null($call_admission_control) && !in_array($call_admission_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'call_admission_control', must be one of '%s'",
                    $call_admission_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['call_admission_control'] = $call_admission_control;

        return $this;
    }

    /**
     * Gets call_capacity
     *
     * @return int|null
     */
    public function getCallCapacity()
    {
        return $this->container['call_capacity'];
    }

    /**
     * Sets call_capacity
     *
     * @param int|null $call_capacity Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
     *
     * @return self
     */
    public function setCallCapacity($call_capacity)
    {

        if (!is_null($call_capacity) && ($call_capacity > 60)) {
            throw new \InvalidArgumentException('invalid value for $call_capacity when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 60.');
        }
        if (!is_null($call_capacity) && ($call_capacity < 0)) {
            throw new \InvalidArgumentException('invalid value for $call_capacity when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 0.');
        }

        $this->container['call_capacity'] = $call_capacity;

        return $this;
    }

    /**
     * Gets bandwidth_admission_control
     *
     * @return string|null
     */
    public function getBandwidthAdmissionControl()
    {
        return $this->container['bandwidth_admission_control'];
    }

    /**
     * Sets bandwidth_admission_control
     *
     * @param string|null $bandwidth_admission_control Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it.    enable:Enable WMM bandwidth admission control.    disable:Disable WMM bandwidth admission control.
     *
     * @return self
     */
    public function setBandwidthAdmissionControl($bandwidth_admission_control)
    {
        $allowedValues = $this->getBandwidthAdmissionControlAllowableValues();
        if (!is_null($bandwidth_admission_control) && !in_array($bandwidth_admission_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bandwidth_admission_control', must be one of '%s'",
                    $bandwidth_admission_control,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bandwidth_admission_control'] = $bandwidth_admission_control;

        return $this;
    }

    /**
     * Gets bandwidth_capacity
     *
     * @return int|null
     */
    public function getBandwidthCapacity()
    {
        return $this->container['bandwidth_capacity'];
    }

    /**
     * Sets bandwidth_capacity
     *
     * @param int|null $bandwidth_capacity Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
     *
     * @return self
     */
    public function setBandwidthCapacity($bandwidth_capacity)
    {

        if (!is_null($bandwidth_capacity) && ($bandwidth_capacity > 600000)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_capacity when calling WirelessControllerWtpProfileNameRadio1., must be smaller than or equal to 600000.');
        }
        if (!is_null($bandwidth_capacity) && ($bandwidth_capacity < 1)) {
            throw new \InvalidArgumentException('invalid value for $bandwidth_capacity when calling WirelessControllerWtpProfileNameRadio1., must be bigger than or equal to 1.');
        }

        $this->container['bandwidth_capacity'] = $bandwidth_capacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


