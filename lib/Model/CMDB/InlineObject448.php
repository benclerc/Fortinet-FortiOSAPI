<?php
/**
 * InlineObject448
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject448 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject448 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_448';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'server' => 'string',
        'secret' => 'string',
        'secondary_server' => 'string',
        'secondary_secret' => 'string',
        'tertiary_server' => 'string',
        'tertiary_secret' => 'string',
        'timeout' => 'int',
        'all_usergroup' => 'string',
        'use_management_vdom' => 'string',
        'nas_ip' => 'string',
        'acct_interim_interval' => 'int',
        'radius_coa' => 'string',
        'radius_port' => 'int',
        'h3c_compatibility' => 'string',
        'auth_type' => 'string',
        'source_ip' => 'string',
        'username_case_sensitive' => 'string',
        'group_override_attr_type' => 'string',
        'class' => '\Fortigate\FortiOS\Model\CMDB\UserRadiusNameClass[]',
        'password_renewal' => 'string',
        'password_encoding' => 'string',
        'acct_all_servers' => 'string',
        'switch_controller_acct_fast_framedip_detect' => 'int',
        'interface_select_method' => 'string',
        'interface' => 'string',
        'switch_controller_service_type' => 'string',
        'rsso' => 'string',
        'rsso_radius_server_port' => 'int',
        'rsso_radius_response' => 'string',
        'rsso_validate_request_secret' => 'string',
        'rsso_secret' => 'string',
        'rsso_endpoint_attribute' => 'string',
        'rsso_endpoint_block_attribute' => 'string',
        'sso_attribute' => 'string',
        'sso_attribute_key' => 'string',
        'sso_attribute_value_override' => 'string',
        'rsso_context_timeout' => 'int',
        'rsso_log_period' => 'int',
        'rsso_log_flags' => 'string',
        'rsso_flush_ip_session' => 'string',
        'rsso_ep_one_ip_only' => 'string',
        'accounting_server' => '\Fortigate\FortiOS\Model\CMDB\UserRadiusNameAccountingServer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'server' => null,
        'secret' => 'password',
        'secondary_server' => null,
        'secondary_secret' => 'password',
        'tertiary_server' => null,
        'tertiary_secret' => 'password',
        'timeout' => null,
        'all_usergroup' => null,
        'use_management_vdom' => null,
        'nas_ip' => 'ipv4',
        'acct_interim_interval' => null,
        'radius_coa' => null,
        'radius_port' => null,
        'h3c_compatibility' => null,
        'auth_type' => null,
        'source_ip' => null,
        'username_case_sensitive' => null,
        'group_override_attr_type' => null,
        'class' => null,
        'password_renewal' => null,
        'password_encoding' => null,
        'acct_all_servers' => null,
        'switch_controller_acct_fast_framedip_detect' => null,
        'interface_select_method' => null,
        'interface' => null,
        'switch_controller_service_type' => null,
        'rsso' => null,
        'rsso_radius_server_port' => null,
        'rsso_radius_response' => null,
        'rsso_validate_request_secret' => null,
        'rsso_secret' => 'password',
        'rsso_endpoint_attribute' => null,
        'rsso_endpoint_block_attribute' => null,
        'sso_attribute' => null,
        'sso_attribute_key' => null,
        'sso_attribute_value_override' => null,
        'rsso_context_timeout' => null,
        'rsso_log_period' => null,
        'rsso_log_flags' => null,
        'rsso_flush_ip_session' => null,
        'rsso_ep_one_ip_only' => null,
        'accounting_server' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'server' => 'server',
        'secret' => 'secret',
        'secondary_server' => 'secondary-server',
        'secondary_secret' => 'secondary-secret',
        'tertiary_server' => 'tertiary-server',
        'tertiary_secret' => 'tertiary-secret',
        'timeout' => 'timeout',
        'all_usergroup' => 'all-usergroup',
        'use_management_vdom' => 'use-management-vdom',
        'nas_ip' => 'nas-ip',
        'acct_interim_interval' => 'acct-interim-interval',
        'radius_coa' => 'radius-coa',
        'radius_port' => 'radius-port',
        'h3c_compatibility' => 'h3c-compatibility',
        'auth_type' => 'auth-type',
        'source_ip' => 'source-ip',
        'username_case_sensitive' => 'username-case-sensitive',
        'group_override_attr_type' => 'group-override-attr-type',
        'class' => 'class',
        'password_renewal' => 'password-renewal',
        'password_encoding' => 'password-encoding',
        'acct_all_servers' => 'acct-all-servers',
        'switch_controller_acct_fast_framedip_detect' => 'switch-controller-acct-fast-framedip-detect',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface',
        'switch_controller_service_type' => 'switch-controller-service-type',
        'rsso' => 'rsso',
        'rsso_radius_server_port' => 'rsso-radius-server-port',
        'rsso_radius_response' => 'rsso-radius-response',
        'rsso_validate_request_secret' => 'rsso-validate-request-secret',
        'rsso_secret' => 'rsso-secret',
        'rsso_endpoint_attribute' => 'rsso-endpoint-attribute',
        'rsso_endpoint_block_attribute' => 'rsso-endpoint-block-attribute',
        'sso_attribute' => 'sso-attribute',
        'sso_attribute_key' => 'sso-attribute-key',
        'sso_attribute_value_override' => 'sso-attribute-value-override',
        'rsso_context_timeout' => 'rsso-context-timeout',
        'rsso_log_period' => 'rsso-log-period',
        'rsso_log_flags' => 'rsso-log-flags',
        'rsso_flush_ip_session' => 'rsso-flush-ip-session',
        'rsso_ep_one_ip_only' => 'rsso-ep-one-ip-only',
        'accounting_server' => 'accounting-server'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'server' => 'setServer',
        'secret' => 'setSecret',
        'secondary_server' => 'setSecondaryServer',
        'secondary_secret' => 'setSecondarySecret',
        'tertiary_server' => 'setTertiaryServer',
        'tertiary_secret' => 'setTertiarySecret',
        'timeout' => 'setTimeout',
        'all_usergroup' => 'setAllUsergroup',
        'use_management_vdom' => 'setUseManagementVdom',
        'nas_ip' => 'setNasIp',
        'acct_interim_interval' => 'setAcctInterimInterval',
        'radius_coa' => 'setRadiusCoa',
        'radius_port' => 'setRadiusPort',
        'h3c_compatibility' => 'setH3cCompatibility',
        'auth_type' => 'setAuthType',
        'source_ip' => 'setSourceIp',
        'username_case_sensitive' => 'setUsernameCaseSensitive',
        'group_override_attr_type' => 'setGroupOverrideAttrType',
        'class' => 'setClass',
        'password_renewal' => 'setPasswordRenewal',
        'password_encoding' => 'setPasswordEncoding',
        'acct_all_servers' => 'setAcctAllServers',
        'switch_controller_acct_fast_framedip_detect' => 'setSwitchControllerAcctFastFramedipDetect',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface',
        'switch_controller_service_type' => 'setSwitchControllerServiceType',
        'rsso' => 'setRsso',
        'rsso_radius_server_port' => 'setRssoRadiusServerPort',
        'rsso_radius_response' => 'setRssoRadiusResponse',
        'rsso_validate_request_secret' => 'setRssoValidateRequestSecret',
        'rsso_secret' => 'setRssoSecret',
        'rsso_endpoint_attribute' => 'setRssoEndpointAttribute',
        'rsso_endpoint_block_attribute' => 'setRssoEndpointBlockAttribute',
        'sso_attribute' => 'setSsoAttribute',
        'sso_attribute_key' => 'setSsoAttributeKey',
        'sso_attribute_value_override' => 'setSsoAttributeValueOverride',
        'rsso_context_timeout' => 'setRssoContextTimeout',
        'rsso_log_period' => 'setRssoLogPeriod',
        'rsso_log_flags' => 'setRssoLogFlags',
        'rsso_flush_ip_session' => 'setRssoFlushIpSession',
        'rsso_ep_one_ip_only' => 'setRssoEpOneIpOnly',
        'accounting_server' => 'setAccountingServer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'server' => 'getServer',
        'secret' => 'getSecret',
        'secondary_server' => 'getSecondaryServer',
        'secondary_secret' => 'getSecondarySecret',
        'tertiary_server' => 'getTertiaryServer',
        'tertiary_secret' => 'getTertiarySecret',
        'timeout' => 'getTimeout',
        'all_usergroup' => 'getAllUsergroup',
        'use_management_vdom' => 'getUseManagementVdom',
        'nas_ip' => 'getNasIp',
        'acct_interim_interval' => 'getAcctInterimInterval',
        'radius_coa' => 'getRadiusCoa',
        'radius_port' => 'getRadiusPort',
        'h3c_compatibility' => 'getH3cCompatibility',
        'auth_type' => 'getAuthType',
        'source_ip' => 'getSourceIp',
        'username_case_sensitive' => 'getUsernameCaseSensitive',
        'group_override_attr_type' => 'getGroupOverrideAttrType',
        'class' => 'getClass',
        'password_renewal' => 'getPasswordRenewal',
        'password_encoding' => 'getPasswordEncoding',
        'acct_all_servers' => 'getAcctAllServers',
        'switch_controller_acct_fast_framedip_detect' => 'getSwitchControllerAcctFastFramedipDetect',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface',
        'switch_controller_service_type' => 'getSwitchControllerServiceType',
        'rsso' => 'getRsso',
        'rsso_radius_server_port' => 'getRssoRadiusServerPort',
        'rsso_radius_response' => 'getRssoRadiusResponse',
        'rsso_validate_request_secret' => 'getRssoValidateRequestSecret',
        'rsso_secret' => 'getRssoSecret',
        'rsso_endpoint_attribute' => 'getRssoEndpointAttribute',
        'rsso_endpoint_block_attribute' => 'getRssoEndpointBlockAttribute',
        'sso_attribute' => 'getSsoAttribute',
        'sso_attribute_key' => 'getSsoAttributeKey',
        'sso_attribute_value_override' => 'getSsoAttributeValueOverride',
        'rsso_context_timeout' => 'getRssoContextTimeout',
        'rsso_log_period' => 'getRssoLogPeriod',
        'rsso_log_flags' => 'getRssoLogFlags',
        'rsso_flush_ip_session' => 'getRssoFlushIpSession',
        'rsso_ep_one_ip_only' => 'getRssoEpOneIpOnly',
        'accounting_server' => 'getAccountingServer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALL_USERGROUP_DISABLE = 'disable';
    const ALL_USERGROUP_ENABLE = 'enable';
    const USE_MANAGEMENT_VDOM_ENABLE = 'enable';
    const USE_MANAGEMENT_VDOM_DISABLE = 'disable';
    const RADIUS_COA_ENABLE = 'enable';
    const RADIUS_COA_DISABLE = 'disable';
    const H3C_COMPATIBILITY_ENABLE = 'enable';
    const H3C_COMPATIBILITY_DISABLE = 'disable';
    const AUTH_TYPE_AUTO = 'auto';
    const AUTH_TYPE_MS_CHAP_V2 = 'ms_chap_v2';
    const AUTH_TYPE_MS_CHAP = 'ms_chap';
    const AUTH_TYPE_CHAP = 'chap';
    const AUTH_TYPE_PAP = 'pap';
    const USERNAME_CASE_SENSITIVE_ENABLE = 'enable';
    const USERNAME_CASE_SENSITIVE_DISABLE = 'disable';
    const GROUP_OVERRIDE_ATTR_TYPE_FILTER_ID = 'filter-Id';
    const GROUP_OVERRIDE_ATTR_TYPE__CLASS = 'class';
    const PASSWORD_RENEWAL_ENABLE = 'enable';
    const PASSWORD_RENEWAL_DISABLE = 'disable';
    const PASSWORD_ENCODING_AUTO = 'auto';
    const PASSWORD_ENCODING_ISO_8859_1 = 'ISO-8859-1';
    const ACCT_ALL_SERVERS_ENABLE = 'enable';
    const ACCT_ALL_SERVERS_DISABLE = 'disable';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    const SWITCH_CONTROLLER_SERVICE_TYPE_LOGIN = 'login';
    const SWITCH_CONTROLLER_SERVICE_TYPE_FRAMED = 'framed';
    const SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_LOGIN = 'callback-login';
    const SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_FRAMED = 'callback-framed';
    const SWITCH_CONTROLLER_SERVICE_TYPE_OUTBOUND = 'outbound';
    const SWITCH_CONTROLLER_SERVICE_TYPE_ADMINISTRATIVE = 'administrative';
    const SWITCH_CONTROLLER_SERVICE_TYPE_NAS_PROMPT = 'nas-prompt';
    const SWITCH_CONTROLLER_SERVICE_TYPE_AUTHENTICATE_ONLY = 'authenticate-only';
    const SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_NAS_PROMPT = 'callback-nas-prompt';
    const SWITCH_CONTROLLER_SERVICE_TYPE_CALL_CHECK = 'call-check';
    const SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_ADMINISTRATIVE = 'callback-administrative';
    const RSSO_ENABLE = 'enable';
    const RSSO_DISABLE = 'disable';
    const RSSO_RADIUS_RESPONSE_ENABLE = 'enable';
    const RSSO_RADIUS_RESPONSE_DISABLE = 'disable';
    const RSSO_VALIDATE_REQUEST_SECRET_ENABLE = 'enable';
    const RSSO_VALIDATE_REQUEST_SECRET_DISABLE = 'disable';
    const RSSO_ENDPOINT_ATTRIBUTE_USER_NAME = 'User-Name';
    const RSSO_ENDPOINT_ATTRIBUTE_NAS_IP_ADDRESS = 'NAS-IP-Address';
    const RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IP_ADDRESS = 'Framed-IP-Address';
    const RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IP_NETMASK = 'Framed-IP-Netmask';
    const RSSO_ENDPOINT_ATTRIBUTE_FILTER_ID = 'Filter-Id';
    const RSSO_ENDPOINT_ATTRIBUTE_LOGIN_IP_HOST = 'Login-IP-Host';
    const RSSO_ENDPOINT_ATTRIBUTE_REPLY_MESSAGE = 'Reply-Message';
    const RSSO_ENDPOINT_ATTRIBUTE_CALLBACK_NUMBER = 'Callback-Number';
    const RSSO_ENDPOINT_ATTRIBUTE_CALLBACK_ID = 'Callback-Id';
    const RSSO_ENDPOINT_ATTRIBUTE_FRAMED_ROUTE = 'Framed-Route';
    const RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IPX_NETWORK = 'Framed-IPX-Network';
    const RSSO_ENDPOINT_ATTRIBUTE__CLASS = 'Class';
    const RSSO_ENDPOINT_ATTRIBUTE_CALLED_STATION_ID = 'Called-Station-Id';
    const RSSO_ENDPOINT_ATTRIBUTE_CALLING_STATION_ID = 'Calling-Station-Id';
    const RSSO_ENDPOINT_ATTRIBUTE_NAS_IDENTIFIER = 'NAS-Identifier';
    const RSSO_ENDPOINT_ATTRIBUTE_PROXY_STATE = 'Proxy-State';
    const RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_SERVICE = 'Login-LAT-Service';
    const RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_NODE = 'Login-LAT-Node';
    const RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_GROUP = 'Login-LAT-Group';
    const RSSO_ENDPOINT_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE = 'Framed-AppleTalk-Zone';
    const RSSO_ENDPOINT_ATTRIBUTE_ACCT_SESSION_ID = 'Acct-Session-Id';
    const RSSO_ENDPOINT_ATTRIBUTE_ACCT_MULTI_SESSION_ID = 'Acct-Multi-Session-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_USER_NAME = 'User-Name';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_NAS_IP_ADDRESS = 'NAS-IP-Address';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IP_ADDRESS = 'Framed-IP-Address';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IP_NETMASK = 'Framed-IP-Netmask';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FILTER_ID = 'Filter-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_IP_HOST = 'Login-IP-Host';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_REPLY_MESSAGE = 'Reply-Message';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLBACK_NUMBER = 'Callback-Number';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLBACK_ID = 'Callback-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_ROUTE = 'Framed-Route';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IPX_NETWORK = 'Framed-IPX-Network';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE__CLASS = 'Class';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLED_STATION_ID = 'Called-Station-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLING_STATION_ID = 'Calling-Station-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_NAS_IDENTIFIER = 'NAS-Identifier';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_PROXY_STATE = 'Proxy-State';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_SERVICE = 'Login-LAT-Service';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_NODE = 'Login-LAT-Node';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_GROUP = 'Login-LAT-Group';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE = 'Framed-AppleTalk-Zone';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_ACCT_SESSION_ID = 'Acct-Session-Id';
    const RSSO_ENDPOINT_BLOCK_ATTRIBUTE_ACCT_MULTI_SESSION_ID = 'Acct-Multi-Session-Id';
    const SSO_ATTRIBUTE_USER_NAME = 'User-Name';
    const SSO_ATTRIBUTE_NAS_IP_ADDRESS = 'NAS-IP-Address';
    const SSO_ATTRIBUTE_FRAMED_IP_ADDRESS = 'Framed-IP-Address';
    const SSO_ATTRIBUTE_FRAMED_IP_NETMASK = 'Framed-IP-Netmask';
    const SSO_ATTRIBUTE_FILTER_ID = 'Filter-Id';
    const SSO_ATTRIBUTE_LOGIN_IP_HOST = 'Login-IP-Host';
    const SSO_ATTRIBUTE_REPLY_MESSAGE = 'Reply-Message';
    const SSO_ATTRIBUTE_CALLBACK_NUMBER = 'Callback-Number';
    const SSO_ATTRIBUTE_CALLBACK_ID = 'Callback-Id';
    const SSO_ATTRIBUTE_FRAMED_ROUTE = 'Framed-Route';
    const SSO_ATTRIBUTE_FRAMED_IPX_NETWORK = 'Framed-IPX-Network';
    const SSO_ATTRIBUTE__CLASS = 'Class';
    const SSO_ATTRIBUTE_CALLED_STATION_ID = 'Called-Station-Id';
    const SSO_ATTRIBUTE_CALLING_STATION_ID = 'Calling-Station-Id';
    const SSO_ATTRIBUTE_NAS_IDENTIFIER = 'NAS-Identifier';
    const SSO_ATTRIBUTE_PROXY_STATE = 'Proxy-State';
    const SSO_ATTRIBUTE_LOGIN_LAT_SERVICE = 'Login-LAT-Service';
    const SSO_ATTRIBUTE_LOGIN_LAT_NODE = 'Login-LAT-Node';
    const SSO_ATTRIBUTE_LOGIN_LAT_GROUP = 'Login-LAT-Group';
    const SSO_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE = 'Framed-AppleTalk-Zone';
    const SSO_ATTRIBUTE_ACCT_SESSION_ID = 'Acct-Session-Id';
    const SSO_ATTRIBUTE_ACCT_MULTI_SESSION_ID = 'Acct-Multi-Session-Id';
    const SSO_ATTRIBUTE_VALUE_OVERRIDE_ENABLE = 'enable';
    const SSO_ATTRIBUTE_VALUE_OVERRIDE_DISABLE = 'disable';
    const RSSO_LOG_FLAGS_PROTOCOL_ERROR = 'protocol-error';
    const RSSO_LOG_FLAGS_PROFILE_MISSING = 'profile-missing';
    const RSSO_LOG_FLAGS_ACCOUNTING_STOP_MISSED = 'accounting-stop-missed';
    const RSSO_LOG_FLAGS_ACCOUNTING_EVENT = 'accounting-event';
    const RSSO_LOG_FLAGS_ENDPOINT_BLOCK = 'endpoint-block';
    const RSSO_LOG_FLAGS_RADIUSD_OTHER = 'radiusd-other';
    const RSSO_LOG_FLAGS_NONE = 'none';
    const RSSO_FLUSH_IP_SESSION_ENABLE = 'enable';
    const RSSO_FLUSH_IP_SESSION_DISABLE = 'disable';
    const RSSO_EP_ONE_IP_ONLY_ENABLE = 'enable';
    const RSSO_EP_ONE_IP_ONLY_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllUsergroupAllowableValues()
    {
        return [
            self::ALL_USERGROUP_DISABLE,
            self::ALL_USERGROUP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseManagementVdomAllowableValues()
    {
        return [
            self::USE_MANAGEMENT_VDOM_ENABLE,
            self::USE_MANAGEMENT_VDOM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadiusCoaAllowableValues()
    {
        return [
            self::RADIUS_COA_ENABLE,
            self::RADIUS_COA_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getH3cCompatibilityAllowableValues()
    {
        return [
            self::H3C_COMPATIBILITY_ENABLE,
            self::H3C_COMPATIBILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_AUTO,
            self::AUTH_TYPE_MS_CHAP_V2,
            self::AUTH_TYPE_MS_CHAP,
            self::AUTH_TYPE_CHAP,
            self::AUTH_TYPE_PAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsernameCaseSensitiveAllowableValues()
    {
        return [
            self::USERNAME_CASE_SENSITIVE_ENABLE,
            self::USERNAME_CASE_SENSITIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupOverrideAttrTypeAllowableValues()
    {
        return [
            self::GROUP_OVERRIDE_ATTR_TYPE_FILTER_ID,
            self::GROUP_OVERRIDE_ATTR_TYPE__CLASS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordRenewalAllowableValues()
    {
        return [
            self::PASSWORD_RENEWAL_ENABLE,
            self::PASSWORD_RENEWAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordEncodingAllowableValues()
    {
        return [
            self::PASSWORD_ENCODING_AUTO,
            self::PASSWORD_ENCODING_ISO_8859_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcctAllServersAllowableValues()
    {
        return [
            self::ACCT_ALL_SERVERS_ENABLE,
            self::ACCT_ALL_SERVERS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerServiceTypeAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_SERVICE_TYPE_LOGIN,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_FRAMED,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_LOGIN,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_FRAMED,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_OUTBOUND,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_ADMINISTRATIVE,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_NAS_PROMPT,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_AUTHENTICATE_ONLY,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_NAS_PROMPT,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_CALL_CHECK,
            self::SWITCH_CONTROLLER_SERVICE_TYPE_CALLBACK_ADMINISTRATIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoAllowableValues()
    {
        return [
            self::RSSO_ENABLE,
            self::RSSO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoRadiusResponseAllowableValues()
    {
        return [
            self::RSSO_RADIUS_RESPONSE_ENABLE,
            self::RSSO_RADIUS_RESPONSE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoValidateRequestSecretAllowableValues()
    {
        return [
            self::RSSO_VALIDATE_REQUEST_SECRET_ENABLE,
            self::RSSO_VALIDATE_REQUEST_SECRET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoEndpointAttributeAllowableValues()
    {
        return [
            self::RSSO_ENDPOINT_ATTRIBUTE_USER_NAME,
            self::RSSO_ENDPOINT_ATTRIBUTE_NAS_IP_ADDRESS,
            self::RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IP_ADDRESS,
            self::RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IP_NETMASK,
            self::RSSO_ENDPOINT_ATTRIBUTE_FILTER_ID,
            self::RSSO_ENDPOINT_ATTRIBUTE_LOGIN_IP_HOST,
            self::RSSO_ENDPOINT_ATTRIBUTE_REPLY_MESSAGE,
            self::RSSO_ENDPOINT_ATTRIBUTE_CALLBACK_NUMBER,
            self::RSSO_ENDPOINT_ATTRIBUTE_CALLBACK_ID,
            self::RSSO_ENDPOINT_ATTRIBUTE_FRAMED_ROUTE,
            self::RSSO_ENDPOINT_ATTRIBUTE_FRAMED_IPX_NETWORK,
            self::RSSO_ENDPOINT_ATTRIBUTE__CLASS,
            self::RSSO_ENDPOINT_ATTRIBUTE_CALLED_STATION_ID,
            self::RSSO_ENDPOINT_ATTRIBUTE_CALLING_STATION_ID,
            self::RSSO_ENDPOINT_ATTRIBUTE_NAS_IDENTIFIER,
            self::RSSO_ENDPOINT_ATTRIBUTE_PROXY_STATE,
            self::RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_SERVICE,
            self::RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_NODE,
            self::RSSO_ENDPOINT_ATTRIBUTE_LOGIN_LAT_GROUP,
            self::RSSO_ENDPOINT_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE,
            self::RSSO_ENDPOINT_ATTRIBUTE_ACCT_SESSION_ID,
            self::RSSO_ENDPOINT_ATTRIBUTE_ACCT_MULTI_SESSION_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoEndpointBlockAttributeAllowableValues()
    {
        return [
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_USER_NAME,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_NAS_IP_ADDRESS,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IP_ADDRESS,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IP_NETMASK,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FILTER_ID,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_IP_HOST,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_REPLY_MESSAGE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLBACK_NUMBER,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLBACK_ID,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_ROUTE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_IPX_NETWORK,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE__CLASS,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLED_STATION_ID,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_CALLING_STATION_ID,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_NAS_IDENTIFIER,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_PROXY_STATE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_SERVICE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_NODE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_LOGIN_LAT_GROUP,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_ACCT_SESSION_ID,
            self::RSSO_ENDPOINT_BLOCK_ATTRIBUTE_ACCT_MULTI_SESSION_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoAttributeAllowableValues()
    {
        return [
            self::SSO_ATTRIBUTE_USER_NAME,
            self::SSO_ATTRIBUTE_NAS_IP_ADDRESS,
            self::SSO_ATTRIBUTE_FRAMED_IP_ADDRESS,
            self::SSO_ATTRIBUTE_FRAMED_IP_NETMASK,
            self::SSO_ATTRIBUTE_FILTER_ID,
            self::SSO_ATTRIBUTE_LOGIN_IP_HOST,
            self::SSO_ATTRIBUTE_REPLY_MESSAGE,
            self::SSO_ATTRIBUTE_CALLBACK_NUMBER,
            self::SSO_ATTRIBUTE_CALLBACK_ID,
            self::SSO_ATTRIBUTE_FRAMED_ROUTE,
            self::SSO_ATTRIBUTE_FRAMED_IPX_NETWORK,
            self::SSO_ATTRIBUTE__CLASS,
            self::SSO_ATTRIBUTE_CALLED_STATION_ID,
            self::SSO_ATTRIBUTE_CALLING_STATION_ID,
            self::SSO_ATTRIBUTE_NAS_IDENTIFIER,
            self::SSO_ATTRIBUTE_PROXY_STATE,
            self::SSO_ATTRIBUTE_LOGIN_LAT_SERVICE,
            self::SSO_ATTRIBUTE_LOGIN_LAT_NODE,
            self::SSO_ATTRIBUTE_LOGIN_LAT_GROUP,
            self::SSO_ATTRIBUTE_FRAMED_APPLE_TALK_ZONE,
            self::SSO_ATTRIBUTE_ACCT_SESSION_ID,
            self::SSO_ATTRIBUTE_ACCT_MULTI_SESSION_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoAttributeValueOverrideAllowableValues()
    {
        return [
            self::SSO_ATTRIBUTE_VALUE_OVERRIDE_ENABLE,
            self::SSO_ATTRIBUTE_VALUE_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoLogFlagsAllowableValues()
    {
        return [
            self::RSSO_LOG_FLAGS_PROTOCOL_ERROR,
            self::RSSO_LOG_FLAGS_PROFILE_MISSING,
            self::RSSO_LOG_FLAGS_ACCOUNTING_STOP_MISSED,
            self::RSSO_LOG_FLAGS_ACCOUNTING_EVENT,
            self::RSSO_LOG_FLAGS_ENDPOINT_BLOCK,
            self::RSSO_LOG_FLAGS_RADIUSD_OTHER,
            self::RSSO_LOG_FLAGS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoFlushIpSessionAllowableValues()
    {
        return [
            self::RSSO_FLUSH_IP_SESSION_ENABLE,
            self::RSSO_FLUSH_IP_SESSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRssoEpOneIpOnlyAllowableValues()
    {
        return [
            self::RSSO_EP_ONE_IP_ONLY_ENABLE,
            self::RSSO_EP_ONE_IP_ONLY_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['secret'] = $data['secret'] ?? null;
        $this->container['secondary_server'] = $data['secondary_server'] ?? null;
        $this->container['secondary_secret'] = $data['secondary_secret'] ?? null;
        $this->container['tertiary_server'] = $data['tertiary_server'] ?? null;
        $this->container['tertiary_secret'] = $data['tertiary_secret'] ?? null;
        $this->container['timeout'] = $data['timeout'] ?? null;
        $this->container['all_usergroup'] = $data['all_usergroup'] ?? null;
        $this->container['use_management_vdom'] = $data['use_management_vdom'] ?? null;
        $this->container['nas_ip'] = $data['nas_ip'] ?? null;
        $this->container['acct_interim_interval'] = $data['acct_interim_interval'] ?? null;
        $this->container['radius_coa'] = $data['radius_coa'] ?? null;
        $this->container['radius_port'] = $data['radius_port'] ?? null;
        $this->container['h3c_compatibility'] = $data['h3c_compatibility'] ?? null;
        $this->container['auth_type'] = $data['auth_type'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['username_case_sensitive'] = $data['username_case_sensitive'] ?? null;
        $this->container['group_override_attr_type'] = $data['group_override_attr_type'] ?? null;
        $this->container['class'] = $data['class'] ?? null;
        $this->container['password_renewal'] = $data['password_renewal'] ?? null;
        $this->container['password_encoding'] = $data['password_encoding'] ?? null;
        $this->container['acct_all_servers'] = $data['acct_all_servers'] ?? null;
        $this->container['switch_controller_acct_fast_framedip_detect'] = $data['switch_controller_acct_fast_framedip_detect'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['switch_controller_service_type'] = $data['switch_controller_service_type'] ?? null;
        $this->container['rsso'] = $data['rsso'] ?? null;
        $this->container['rsso_radius_server_port'] = $data['rsso_radius_server_port'] ?? null;
        $this->container['rsso_radius_response'] = $data['rsso_radius_response'] ?? null;
        $this->container['rsso_validate_request_secret'] = $data['rsso_validate_request_secret'] ?? null;
        $this->container['rsso_secret'] = $data['rsso_secret'] ?? null;
        $this->container['rsso_endpoint_attribute'] = $data['rsso_endpoint_attribute'] ?? null;
        $this->container['rsso_endpoint_block_attribute'] = $data['rsso_endpoint_block_attribute'] ?? null;
        $this->container['sso_attribute'] = $data['sso_attribute'] ?? null;
        $this->container['sso_attribute_key'] = $data['sso_attribute_key'] ?? null;
        $this->container['sso_attribute_value_override'] = $data['sso_attribute_value_override'] ?? null;
        $this->container['rsso_context_timeout'] = $data['rsso_context_timeout'] ?? null;
        $this->container['rsso_log_period'] = $data['rsso_log_period'] ?? null;
        $this->container['rsso_log_flags'] = $data['rsso_log_flags'] ?? null;
        $this->container['rsso_flush_ip_session'] = $data['rsso_flush_ip_session'] ?? null;
        $this->container['rsso_ep_one_ip_only'] = $data['rsso_ep_one_ip_only'] ?? null;
        $this->container['accounting_server'] = $data['accounting_server'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['secondary_server']) && (mb_strlen($this->container['secondary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'secondary_server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['tertiary_server']) && (mb_strlen($this->container['tertiary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'tertiary_server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'timeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['timeout']) && ($this->container['timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAllUsergroupAllowableValues();
        if (!is_null($this->container['all_usergroup']) && !in_array($this->container['all_usergroup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'all_usergroup', must be one of '%s'",
                $this->container['all_usergroup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseManagementVdomAllowableValues();
        if (!is_null($this->container['use_management_vdom']) && !in_array($this->container['use_management_vdom'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_management_vdom', must be one of '%s'",
                $this->container['use_management_vdom'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['acct_interim_interval']) && ($this->container['acct_interim_interval'] > 86400)) {
            $invalidProperties[] = "invalid value for 'acct_interim_interval', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['acct_interim_interval']) && ($this->container['acct_interim_interval'] < 60)) {
            $invalidProperties[] = "invalid value for 'acct_interim_interval', must be bigger than or equal to 60.";
        }

        $allowedValues = $this->getRadiusCoaAllowableValues();
        if (!is_null($this->container['radius_coa']) && !in_array($this->container['radius_coa'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'radius_coa', must be one of '%s'",
                $this->container['radius_coa'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radius_port']) && ($this->container['radius_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'radius_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['radius_port']) && ($this->container['radius_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'radius_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getH3cCompatibilityAllowableValues();
        if (!is_null($this->container['h3c_compatibility']) && !in_array($this->container['h3c_compatibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'h3c_compatibility', must be one of '%s'",
                $this->container['h3c_compatibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['auth_type']) && !in_array($this->container['auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_type', must be one of '%s'",
                $this->container['auth_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['source_ip']) && (mb_strlen($this->container['source_ip']) > 63)) {
            $invalidProperties[] = "invalid value for 'source_ip', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getUsernameCaseSensitiveAllowableValues();
        if (!is_null($this->container['username_case_sensitive']) && !in_array($this->container['username_case_sensitive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'username_case_sensitive', must be one of '%s'",
                $this->container['username_case_sensitive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGroupOverrideAttrTypeAllowableValues();
        if (!is_null($this->container['group_override_attr_type']) && !in_array($this->container['group_override_attr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_override_attr_type', must be one of '%s'",
                $this->container['group_override_attr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['class']) && (count($this->container['class']) > 0)) {
            $invalidProperties[] = "invalid value for 'class', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getPasswordRenewalAllowableValues();
        if (!is_null($this->container['password_renewal']) && !in_array($this->container['password_renewal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password_renewal', must be one of '%s'",
                $this->container['password_renewal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPasswordEncodingAllowableValues();
        if (!is_null($this->container['password_encoding']) && !in_array($this->container['password_encoding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password_encoding', must be one of '%s'",
                $this->container['password_encoding'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAcctAllServersAllowableValues();
        if (!is_null($this->container['acct_all_servers']) && !in_array($this->container['acct_all_servers'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'acct_all_servers', must be one of '%s'",
                $this->container['acct_all_servers'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_controller_acct_fast_framedip_detect']) && ($this->container['switch_controller_acct_fast_framedip_detect'] > 600)) {
            $invalidProperties[] = "invalid value for 'switch_controller_acct_fast_framedip_detect', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['switch_controller_acct_fast_framedip_detect']) && ($this->container['switch_controller_acct_fast_framedip_detect'] < 2)) {
            $invalidProperties[] = "invalid value for 'switch_controller_acct_fast_framedip_detect', must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getSwitchControllerServiceTypeAllowableValues();
        if (!is_null($this->container['switch_controller_service_type']) && !in_array($this->container['switch_controller_service_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller_service_type', must be one of '%s'",
                $this->container['switch_controller_service_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoAllowableValues();
        if (!is_null($this->container['rsso']) && !in_array($this->container['rsso'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso', must be one of '%s'",
                $this->container['rsso'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rsso_radius_server_port']) && ($this->container['rsso_radius_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'rsso_radius_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['rsso_radius_server_port']) && ($this->container['rsso_radius_server_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'rsso_radius_server_port', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRssoRadiusResponseAllowableValues();
        if (!is_null($this->container['rsso_radius_response']) && !in_array($this->container['rsso_radius_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_radius_response', must be one of '%s'",
                $this->container['rsso_radius_response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoValidateRequestSecretAllowableValues();
        if (!is_null($this->container['rsso_validate_request_secret']) && !in_array($this->container['rsso_validate_request_secret'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_validate_request_secret', must be one of '%s'",
                $this->container['rsso_validate_request_secret'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoEndpointAttributeAllowableValues();
        if (!is_null($this->container['rsso_endpoint_attribute']) && !in_array($this->container['rsso_endpoint_attribute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_endpoint_attribute', must be one of '%s'",
                $this->container['rsso_endpoint_attribute'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoEndpointBlockAttributeAllowableValues();
        if (!is_null($this->container['rsso_endpoint_block_attribute']) && !in_array($this->container['rsso_endpoint_block_attribute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_endpoint_block_attribute', must be one of '%s'",
                $this->container['rsso_endpoint_block_attribute'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSsoAttributeAllowableValues();
        if (!is_null($this->container['sso_attribute']) && !in_array($this->container['sso_attribute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso_attribute', must be one of '%s'",
                $this->container['sso_attribute'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sso_attribute_key']) && (mb_strlen($this->container['sso_attribute_key']) > 35)) {
            $invalidProperties[] = "invalid value for 'sso_attribute_key', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSsoAttributeValueOverrideAllowableValues();
        if (!is_null($this->container['sso_attribute_value_override']) && !in_array($this->container['sso_attribute_value_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso_attribute_value_override', must be one of '%s'",
                $this->container['sso_attribute_value_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rsso_context_timeout']) && ($this->container['rsso_context_timeout'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'rsso_context_timeout', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['rsso_context_timeout']) && ($this->container['rsso_context_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'rsso_context_timeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rsso_log_period']) && ($this->container['rsso_log_period'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'rsso_log_period', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['rsso_log_period']) && ($this->container['rsso_log_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'rsso_log_period', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRssoLogFlagsAllowableValues();
        if (!is_null($this->container['rsso_log_flags']) && !in_array($this->container['rsso_log_flags'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_log_flags', must be one of '%s'",
                $this->container['rsso_log_flags'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoFlushIpSessionAllowableValues();
        if (!is_null($this->container['rsso_flush_ip_session']) && !in_array($this->container['rsso_flush_ip_session'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_flush_ip_session', must be one of '%s'",
                $this->container['rsso_flush_ip_session'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRssoEpOneIpOnlyAllowableValues();
        if (!is_null($this->container['rsso_ep_one_ip_only']) && !in_array($this->container['rsso_ep_one_ip_only'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsso_ep_one_ip_only', must be one of '%s'",
                $this->container['rsso_ep_one_ip_only'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['accounting_server']) && (count($this->container['accounting_server']) > 4)) {
            $invalidProperties[] = "invalid value for 'accounting_server', number of items must be less than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name RADIUS server entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject448., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server Primary RADIUS server CN domain name or IP address.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject448., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret Pre-shared secret key used to access the primary RADIUS server.
     *
     * @return self
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets secondary_server
     *
     * @return string|null
     */
    public function getSecondaryServer()
    {
        return $this->container['secondary_server'];
    }

    /**
     * Sets secondary_server
     *
     * @param string|null $secondary_server {<name_str|ip_str>} secondary RADIUS CN domain name or IP.
     *
     * @return self
     */
    public function setSecondaryServer($secondary_server)
    {
        if (!is_null($secondary_server) && (mb_strlen($secondary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $secondary_server when calling InlineObject448., must be smaller than or equal to 63.');
        }

        $this->container['secondary_server'] = $secondary_server;

        return $this;
    }

    /**
     * Gets secondary_secret
     *
     * @return string|null
     */
    public function getSecondarySecret()
    {
        return $this->container['secondary_secret'];
    }

    /**
     * Sets secondary_secret
     *
     * @param string|null $secondary_secret Secret key to access the secondary server.
     *
     * @return self
     */
    public function setSecondarySecret($secondary_secret)
    {
        $this->container['secondary_secret'] = $secondary_secret;

        return $this;
    }

    /**
     * Gets tertiary_server
     *
     * @return string|null
     */
    public function getTertiaryServer()
    {
        return $this->container['tertiary_server'];
    }

    /**
     * Sets tertiary_server
     *
     * @param string|null $tertiary_server {<name_str|ip_str>} tertiary RADIUS CN domain name or IP.
     *
     * @return self
     */
    public function setTertiaryServer($tertiary_server)
    {
        if (!is_null($tertiary_server) && (mb_strlen($tertiary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $tertiary_server when calling InlineObject448., must be smaller than or equal to 63.');
        }

        $this->container['tertiary_server'] = $tertiary_server;

        return $this;
    }

    /**
     * Gets tertiary_secret
     *
     * @return string|null
     */
    public function getTertiarySecret()
    {
        return $this->container['tertiary_secret'];
    }

    /**
     * Sets tertiary_secret
     *
     * @param string|null $tertiary_secret Secret key to access the tertiary server.
     *
     * @return self
     */
    public function setTertiarySecret($tertiary_secret)
    {
        $this->container['tertiary_secret'] = $tertiary_secret;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int|null $timeout Time in seconds between re-sending authentication requests.
     *
     * @return self
     */
    public function setTimeout($timeout)
    {

        if (!is_null($timeout) && ($timeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject448., must be smaller than or equal to 300.');
        }
        if (!is_null($timeout) && ($timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $timeout when calling InlineObject448., must be bigger than or equal to 1.');
        }

        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets all_usergroup
     *
     * @return string|null
     */
    public function getAllUsergroup()
    {
        return $this->container['all_usergroup'];
    }

    /**
     * Sets all_usergroup
     *
     * @param string|null $all_usergroup Enable/disable automatically including this RADIUS server in all user groups.    disable:Do not automatically include this server in a user group.    enable:Include this RADIUS server in every user group.
     *
     * @return self
     */
    public function setAllUsergroup($all_usergroup)
    {
        $allowedValues = $this->getAllUsergroupAllowableValues();
        if (!is_null($all_usergroup) && !in_array($all_usergroup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'all_usergroup', must be one of '%s'",
                    $all_usergroup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['all_usergroup'] = $all_usergroup;

        return $this;
    }

    /**
     * Gets use_management_vdom
     *
     * @return string|null
     */
    public function getUseManagementVdom()
    {
        return $this->container['use_management_vdom'];
    }

    /**
     * Sets use_management_vdom
     *
     * @param string|null $use_management_vdom Enable/disable using management VDOM to send requests.    enable:Send requests using the management VDOM.    disable:Send requests using the current VDOM.
     *
     * @return self
     */
    public function setUseManagementVdom($use_management_vdom)
    {
        $allowedValues = $this->getUseManagementVdomAllowableValues();
        if (!is_null($use_management_vdom) && !in_array($use_management_vdom, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_management_vdom', must be one of '%s'",
                    $use_management_vdom,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_management_vdom'] = $use_management_vdom;

        return $this;
    }

    /**
     * Gets nas_ip
     *
     * @return string|null
     */
    public function getNasIp()
    {
        return $this->container['nas_ip'];
    }

    /**
     * Sets nas_ip
     *
     * @param string|null $nas_ip IP address used to communicate with the RADIUS server and used as NAS-IP-Address and Called-Station-ID attributes.
     *
     * @return self
     */
    public function setNasIp($nas_ip)
    {
        $this->container['nas_ip'] = $nas_ip;

        return $this;
    }

    /**
     * Gets acct_interim_interval
     *
     * @return int|null
     */
    public function getAcctInterimInterval()
    {
        return $this->container['acct_interim_interval'];
    }

    /**
     * Sets acct_interim_interval
     *
     * @param int|null $acct_interim_interval Time in seconds between each accounting interim update message.
     *
     * @return self
     */
    public function setAcctInterimInterval($acct_interim_interval)
    {

        if (!is_null($acct_interim_interval) && ($acct_interim_interval > 86400)) {
            throw new \InvalidArgumentException('invalid value for $acct_interim_interval when calling InlineObject448., must be smaller than or equal to 86400.');
        }
        if (!is_null($acct_interim_interval) && ($acct_interim_interval < 60)) {
            throw new \InvalidArgumentException('invalid value for $acct_interim_interval when calling InlineObject448., must be bigger than or equal to 60.');
        }

        $this->container['acct_interim_interval'] = $acct_interim_interval;

        return $this;
    }

    /**
     * Gets radius_coa
     *
     * @return string|null
     */
    public function getRadiusCoa()
    {
        return $this->container['radius_coa'];
    }

    /**
     * Sets radius_coa
     *
     * @param string|null $radius_coa Enable to allow a mechanism to change the attributes of an authentication, authorization, and accounting session after it is authenticated.    enable:Enable RADIUS CoA.    disable:Disable RADIUS CoA.
     *
     * @return self
     */
    public function setRadiusCoa($radius_coa)
    {
        $allowedValues = $this->getRadiusCoaAllowableValues();
        if (!is_null($radius_coa) && !in_array($radius_coa, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'radius_coa', must be one of '%s'",
                    $radius_coa,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radius_coa'] = $radius_coa;

        return $this;
    }

    /**
     * Gets radius_port
     *
     * @return int|null
     */
    public function getRadiusPort()
    {
        return $this->container['radius_port'];
    }

    /**
     * Sets radius_port
     *
     * @param int|null $radius_port RADIUS service port number.
     *
     * @return self
     */
    public function setRadiusPort($radius_port)
    {

        if (!is_null($radius_port) && ($radius_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $radius_port when calling InlineObject448., must be smaller than or equal to 65535.');
        }
        if (!is_null($radius_port) && ($radius_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $radius_port when calling InlineObject448., must be bigger than or equal to 0.');
        }

        $this->container['radius_port'] = $radius_port;

        return $this;
    }

    /**
     * Gets h3c_compatibility
     *
     * @return string|null
     */
    public function getH3cCompatibility()
    {
        return $this->container['h3c_compatibility'];
    }

    /**
     * Sets h3c_compatibility
     *
     * @param string|null $h3c_compatibility Enable/disable compatibility with the H3C, a mechanism that performs security checking for authentication.    enable:Enable H3C compatibility.    disable:Disable H3C compatibility.
     *
     * @return self
     */
    public function setH3cCompatibility($h3c_compatibility)
    {
        $allowedValues = $this->getH3cCompatibilityAllowableValues();
        if (!is_null($h3c_compatibility) && !in_array($h3c_compatibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'h3c_compatibility', must be one of '%s'",
                    $h3c_compatibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['h3c_compatibility'] = $h3c_compatibility;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string|null $auth_type Authentication methods/protocols permitted for this RADIUS server.    auto:Use PAP, MSCHAP_v2, and CHAP (in that order).    ms_chap_v2:Microsoft Challenge Handshake Authentication Protocol version 2.    ms_chap:Microsoft Challenge Handshake Authentication Protocol.    chap:Challenge Handshake Authentication Protocol.    pap:Password Authentication Protocol.
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && !in_array($auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_type', must be one of '%s'",
                    $auth_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address for communications to the RADIUS server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        if (!is_null($source_ip) && (mb_strlen($source_ip) > 63)) {
            throw new \InvalidArgumentException('invalid length for $source_ip when calling InlineObject448., must be smaller than or equal to 63.');
        }

        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets username_case_sensitive
     *
     * @return string|null
     */
    public function getUsernameCaseSensitive()
    {
        return $this->container['username_case_sensitive'];
    }

    /**
     * Sets username_case_sensitive
     *
     * @param string|null $username_case_sensitive Enable/disable case sensitive user names.    enable:Enable username case-sensitive.    disable:Disable username case-sensitive.
     *
     * @return self
     */
    public function setUsernameCaseSensitive($username_case_sensitive)
    {
        $allowedValues = $this->getUsernameCaseSensitiveAllowableValues();
        if (!is_null($username_case_sensitive) && !in_array($username_case_sensitive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'username_case_sensitive', must be one of '%s'",
                    $username_case_sensitive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['username_case_sensitive'] = $username_case_sensitive;

        return $this;
    }

    /**
     * Gets group_override_attr_type
     *
     * @return string|null
     */
    public function getGroupOverrideAttrType()
    {
        return $this->container['group_override_attr_type'];
    }

    /**
     * Sets group_override_attr_type
     *
     * @param string|null $group_override_attr_type RADIUS attribute type to override user group information.    filter-Id:Filter-Id    class:Class
     *
     * @return self
     */
    public function setGroupOverrideAttrType($group_override_attr_type)
    {
        $allowedValues = $this->getGroupOverrideAttrTypeAllowableValues();
        if (!is_null($group_override_attr_type) && !in_array($group_override_attr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_override_attr_type', must be one of '%s'",
                    $group_override_attr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_override_attr_type'] = $group_override_attr_type;

        return $this;
    }

    /**
     * Gets class
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserRadiusNameClass[]|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserRadiusNameClass[]|null $class Class attribute name(s).
     *
     * @return self
     */
    public function setClass($class)
    {

        if (!is_null($class) && (count($class) > 0)) {
            throw new \InvalidArgumentException('invalid value for $class when calling InlineObject448., number of items must be less than or equal to 0.');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets password_renewal
     *
     * @return string|null
     */
    public function getPasswordRenewal()
    {
        return $this->container['password_renewal'];
    }

    /**
     * Sets password_renewal
     *
     * @param string|null $password_renewal Enable/disable password renewal.    enable:Enable password renewal.    disable:Disable password renewal.
     *
     * @return self
     */
    public function setPasswordRenewal($password_renewal)
    {
        $allowedValues = $this->getPasswordRenewalAllowableValues();
        if (!is_null($password_renewal) && !in_array($password_renewal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password_renewal', must be one of '%s'",
                    $password_renewal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_renewal'] = $password_renewal;

        return $this;
    }

    /**
     * Gets password_encoding
     *
     * @return string|null
     */
    public function getPasswordEncoding()
    {
        return $this->container['password_encoding'];
    }

    /**
     * Sets password_encoding
     *
     * @param string|null $password_encoding Password encoding.    auto:Use original password encoding.    ISO-8859-1:Use ISO-8859-1 password encoding.
     *
     * @return self
     */
    public function setPasswordEncoding($password_encoding)
    {
        $allowedValues = $this->getPasswordEncodingAllowableValues();
        if (!is_null($password_encoding) && !in_array($password_encoding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password_encoding', must be one of '%s'",
                    $password_encoding,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_encoding'] = $password_encoding;

        return $this;
    }

    /**
     * Gets acct_all_servers
     *
     * @return string|null
     */
    public function getAcctAllServers()
    {
        return $this->container['acct_all_servers'];
    }

    /**
     * Sets acct_all_servers
     *
     * @param string|null $acct_all_servers Enable/disable sending of accounting messages to all configured servers (default = disable).    enable:Send accounting messages to all configured servers.    disable:Send accounting message only to servers that are confirmed to be reachable.
     *
     * @return self
     */
    public function setAcctAllServers($acct_all_servers)
    {
        $allowedValues = $this->getAcctAllServersAllowableValues();
        if (!is_null($acct_all_servers) && !in_array($acct_all_servers, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'acct_all_servers', must be one of '%s'",
                    $acct_all_servers,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acct_all_servers'] = $acct_all_servers;

        return $this;
    }

    /**
     * Gets switch_controller_acct_fast_framedip_detect
     *
     * @return int|null
     */
    public function getSwitchControllerAcctFastFramedipDetect()
    {
        return $this->container['switch_controller_acct_fast_framedip_detect'];
    }

    /**
     * Sets switch_controller_acct_fast_framedip_detect
     *
     * @param int|null $switch_controller_acct_fast_framedip_detect Switch controller accounting message Framed-IP detection from DHCP snooping (seconds, default=2).
     *
     * @return self
     */
    public function setSwitchControllerAcctFastFramedipDetect($switch_controller_acct_fast_framedip_detect)
    {

        if (!is_null($switch_controller_acct_fast_framedip_detect) && ($switch_controller_acct_fast_framedip_detect > 600)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_acct_fast_framedip_detect when calling InlineObject448., must be smaller than or equal to 600.');
        }
        if (!is_null($switch_controller_acct_fast_framedip_detect) && ($switch_controller_acct_fast_framedip_detect < 2)) {
            throw new \InvalidArgumentException('invalid value for $switch_controller_acct_fast_framedip_detect when calling InlineObject448., must be bigger than or equal to 2.');
        }

        $this->container['switch_controller_acct_fast_framedip_detect'] = $switch_controller_acct_fast_framedip_detect;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject448., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets switch_controller_service_type
     *
     * @return string|null
     */
    public function getSwitchControllerServiceType()
    {
        return $this->container['switch_controller_service_type'];
    }

    /**
     * Sets switch_controller_service_type
     *
     * @param string|null $switch_controller_service_type RADIUS service type.    login:User should be connected to a host.    framed:User use Framed Protocol.    callback-login:User disconnected and called back.    callback-framed:User disconnected and called back, then a Framed Protocol.    outbound:User granted access to outgoing devices.    administrative:User granted access to the administrative unsigned interface.    nas-prompt:User provided a command prompt on the NAS.    authenticate-only:Authentication requested, and no auth info needs to be returned.    callback-nas-prompt:User disconnected and called back, then provided a command prompt.    call-check:Used by the NAS in an Access-Request packet, Access-Accept to answer the call.    callback-administrative:User disconnected and called back, granted access to the admin unsigned interface.
     *
     * @return self
     */
    public function setSwitchControllerServiceType($switch_controller_service_type)
    {
        $allowedValues = $this->getSwitchControllerServiceTypeAllowableValues();
        if (!is_null($switch_controller_service_type) && !in_array($switch_controller_service_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller_service_type', must be one of '%s'",
                    $switch_controller_service_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller_service_type'] = $switch_controller_service_type;

        return $this;
    }

    /**
     * Gets rsso
     *
     * @return string|null
     */
    public function getRsso()
    {
        return $this->container['rsso'];
    }

    /**
     * Sets rsso
     *
     * @param string|null $rsso Enable/disable RADIUS based single sign on feature.    enable:Enable RADIUS based single sign on feature.    disable:Disable RADIUS based single sign on feature.
     *
     * @return self
     */
    public function setRsso($rsso)
    {
        $allowedValues = $this->getRssoAllowableValues();
        if (!is_null($rsso) && !in_array($rsso, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso', must be one of '%s'",
                    $rsso,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso'] = $rsso;

        return $this;
    }

    /**
     * Gets rsso_radius_server_port
     *
     * @return int|null
     */
    public function getRssoRadiusServerPort()
    {
        return $this->container['rsso_radius_server_port'];
    }

    /**
     * Sets rsso_radius_server_port
     *
     * @param int|null $rsso_radius_server_port UDP port to listen on for RADIUS Start and Stop records.
     *
     * @return self
     */
    public function setRssoRadiusServerPort($rsso_radius_server_port)
    {

        if (!is_null($rsso_radius_server_port) && ($rsso_radius_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $rsso_radius_server_port when calling InlineObject448., must be smaller than or equal to 65535.');
        }
        if (!is_null($rsso_radius_server_port) && ($rsso_radius_server_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $rsso_radius_server_port when calling InlineObject448., must be bigger than or equal to 0.');
        }

        $this->container['rsso_radius_server_port'] = $rsso_radius_server_port;

        return $this;
    }

    /**
     * Gets rsso_radius_response
     *
     * @return string|null
     */
    public function getRssoRadiusResponse()
    {
        return $this->container['rsso_radius_response'];
    }

    /**
     * Sets rsso_radius_response
     *
     * @param string|null $rsso_radius_response Enable/disable sending RADIUS response packets after receiving Start and Stop records.    enable:Enable sending RADIUS response packets.    disable:Disable sending RADIUS response packets.
     *
     * @return self
     */
    public function setRssoRadiusResponse($rsso_radius_response)
    {
        $allowedValues = $this->getRssoRadiusResponseAllowableValues();
        if (!is_null($rsso_radius_response) && !in_array($rsso_radius_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_radius_response', must be one of '%s'",
                    $rsso_radius_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_radius_response'] = $rsso_radius_response;

        return $this;
    }

    /**
     * Gets rsso_validate_request_secret
     *
     * @return string|null
     */
    public function getRssoValidateRequestSecret()
    {
        return $this->container['rsso_validate_request_secret'];
    }

    /**
     * Sets rsso_validate_request_secret
     *
     * @param string|null $rsso_validate_request_secret Enable/disable validating the RADIUS request shared secret in the Start or End record.    enable:Enable validating RADIUS request shared secret.    disable:Disable validating RADIUS request shared secret.
     *
     * @return self
     */
    public function setRssoValidateRequestSecret($rsso_validate_request_secret)
    {
        $allowedValues = $this->getRssoValidateRequestSecretAllowableValues();
        if (!is_null($rsso_validate_request_secret) && !in_array($rsso_validate_request_secret, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_validate_request_secret', must be one of '%s'",
                    $rsso_validate_request_secret,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_validate_request_secret'] = $rsso_validate_request_secret;

        return $this;
    }

    /**
     * Gets rsso_secret
     *
     * @return string|null
     */
    public function getRssoSecret()
    {
        return $this->container['rsso_secret'];
    }

    /**
     * Sets rsso_secret
     *
     * @param string|null $rsso_secret RADIUS secret used by the RADIUS accounting server.
     *
     * @return self
     */
    public function setRssoSecret($rsso_secret)
    {
        $this->container['rsso_secret'] = $rsso_secret;

        return $this;
    }

    /**
     * Gets rsso_endpoint_attribute
     *
     * @return string|null
     */
    public function getRssoEndpointAttribute()
    {
        return $this->container['rsso_endpoint_attribute'];
    }

    /**
     * Sets rsso_endpoint_attribute
     *
     * @param string|null $rsso_endpoint_attribute RADIUS attributes used to extract the user end point identifer from the RADIUS Start record.    User-Name:Use this attribute.    NAS-IP-Address:Use this attribute.    Framed-IP-Address:Use this attribute.    Framed-IP-Netmask:Use this attribute.    Filter-Id:Use this attribute.    Login-IP-Host:Use this attribute.    Reply-Message:Use this attribute.    Callback-Number:Use this attribute.    Callback-Id:Use this attribute.    Framed-Route:Use this attribute.    Framed-IPX-Network:Use this attribute.    Class:Use this attribute.    Called-Station-Id:Use this attribute.    Calling-Station-Id:Use this attribute.    NAS-Identifier:Use this attribute.    Proxy-State:Use this attribute.    Login-LAT-Service:Use this attribute.    Login-LAT-Node:Use this attribute.    Login-LAT-Group:Use this attribute.    Framed-AppleTalk-Zone:Use this attribute.    Acct-Session-Id:Use this attribute.    Acct-Multi-Session-Id:Use this attribute.
     *
     * @return self
     */
    public function setRssoEndpointAttribute($rsso_endpoint_attribute)
    {
        $allowedValues = $this->getRssoEndpointAttributeAllowableValues();
        if (!is_null($rsso_endpoint_attribute) && !in_array($rsso_endpoint_attribute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_endpoint_attribute', must be one of '%s'",
                    $rsso_endpoint_attribute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_endpoint_attribute'] = $rsso_endpoint_attribute;

        return $this;
    }

    /**
     * Gets rsso_endpoint_block_attribute
     *
     * @return string|null
     */
    public function getRssoEndpointBlockAttribute()
    {
        return $this->container['rsso_endpoint_block_attribute'];
    }

    /**
     * Sets rsso_endpoint_block_attribute
     *
     * @param string|null $rsso_endpoint_block_attribute RADIUS attributes used to block a user.    User-Name:Use this attribute.    NAS-IP-Address:Use this attribute.    Framed-IP-Address:Use this attribute.    Framed-IP-Netmask:Use this attribute.    Filter-Id:Use this attribute.    Login-IP-Host:Use this attribute.    Reply-Message:Use this attribute.    Callback-Number:Use this attribute.    Callback-Id:Use this attribute.    Framed-Route:Use this attribute.    Framed-IPX-Network:Use this attribute.    Class:Use this attribute.    Called-Station-Id:Use this attribute.    Calling-Station-Id:Use this attribute.    NAS-Identifier:Use this attribute.    Proxy-State:Use this attribute.    Login-LAT-Service:Use this attribute.    Login-LAT-Node:Use this attribute.    Login-LAT-Group:Use this attribute.    Framed-AppleTalk-Zone:Use this attribute.    Acct-Session-Id:Use this attribute.    Acct-Multi-Session-Id:Use this attribute.
     *
     * @return self
     */
    public function setRssoEndpointBlockAttribute($rsso_endpoint_block_attribute)
    {
        $allowedValues = $this->getRssoEndpointBlockAttributeAllowableValues();
        if (!is_null($rsso_endpoint_block_attribute) && !in_array($rsso_endpoint_block_attribute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_endpoint_block_attribute', must be one of '%s'",
                    $rsso_endpoint_block_attribute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_endpoint_block_attribute'] = $rsso_endpoint_block_attribute;

        return $this;
    }

    /**
     * Gets sso_attribute
     *
     * @return string|null
     */
    public function getSsoAttribute()
    {
        return $this->container['sso_attribute'];
    }

    /**
     * Sets sso_attribute
     *
     * @param string|null $sso_attribute RADIUS attribute that contains the profile group name to be extracted from the RADIUS Start record.    User-Name:Use this attribute.    NAS-IP-Address:Use this attribute.    Framed-IP-Address:Use this attribute.    Framed-IP-Netmask:Use this attribute.    Filter-Id:Use this attribute.    Login-IP-Host:Use this attribute.    Reply-Message:Use this attribute.    Callback-Number:Use this attribute.    Callback-Id:Use this attribute.    Framed-Route:Use this attribute.    Framed-IPX-Network:Use this attribute.    Class:Use this attribute.    Called-Station-Id:Use this attribute.    Calling-Station-Id:Use this attribute.    NAS-Identifier:Use this attribute.    Proxy-State:Use this attribute.    Login-LAT-Service:Use this attribute.    Login-LAT-Node:Use this attribute.    Login-LAT-Group:Use this attribute.    Framed-AppleTalk-Zone:Use this attribute.    Acct-Session-Id:Use this attribute.    Acct-Multi-Session-Id:Use this attribute.
     *
     * @return self
     */
    public function setSsoAttribute($sso_attribute)
    {
        $allowedValues = $this->getSsoAttributeAllowableValues();
        if (!is_null($sso_attribute) && !in_array($sso_attribute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso_attribute', must be one of '%s'",
                    $sso_attribute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso_attribute'] = $sso_attribute;

        return $this;
    }

    /**
     * Gets sso_attribute_key
     *
     * @return string|null
     */
    public function getSsoAttributeKey()
    {
        return $this->container['sso_attribute_key'];
    }

    /**
     * Sets sso_attribute_key
     *
     * @param string|null $sso_attribute_key Key prefix for SSO group value in the SSO attribute.
     *
     * @return self
     */
    public function setSsoAttributeKey($sso_attribute_key)
    {
        if (!is_null($sso_attribute_key) && (mb_strlen($sso_attribute_key) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sso_attribute_key when calling InlineObject448., must be smaller than or equal to 35.');
        }

        $this->container['sso_attribute_key'] = $sso_attribute_key;

        return $this;
    }

    /**
     * Gets sso_attribute_value_override
     *
     * @return string|null
     */
    public function getSsoAttributeValueOverride()
    {
        return $this->container['sso_attribute_value_override'];
    }

    /**
     * Sets sso_attribute_value_override
     *
     * @param string|null $sso_attribute_value_override Enable/disable override old attribute value with new value for the same endpoint.    enable:Enable override old attribute value with new value for the same endpoint.    disable:Disable override old attribute value with new value for the same endpoint.
     *
     * @return self
     */
    public function setSsoAttributeValueOverride($sso_attribute_value_override)
    {
        $allowedValues = $this->getSsoAttributeValueOverrideAllowableValues();
        if (!is_null($sso_attribute_value_override) && !in_array($sso_attribute_value_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso_attribute_value_override', must be one of '%s'",
                    $sso_attribute_value_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso_attribute_value_override'] = $sso_attribute_value_override;

        return $this;
    }

    /**
     * Gets rsso_context_timeout
     *
     * @return int|null
     */
    public function getRssoContextTimeout()
    {
        return $this->container['rsso_context_timeout'];
    }

    /**
     * Sets rsso_context_timeout
     *
     * @param int|null $rsso_context_timeout Time in seconds before the logged out user is removed from the \"user context list\" of logged on users.
     *
     * @return self
     */
    public function setRssoContextTimeout($rsso_context_timeout)
    {

        if (!is_null($rsso_context_timeout) && ($rsso_context_timeout > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $rsso_context_timeout when calling InlineObject448., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($rsso_context_timeout) && ($rsso_context_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $rsso_context_timeout when calling InlineObject448., must be bigger than or equal to 0.');
        }

        $this->container['rsso_context_timeout'] = $rsso_context_timeout;

        return $this;
    }

    /**
     * Gets rsso_log_period
     *
     * @return int|null
     */
    public function getRssoLogPeriod()
    {
        return $this->container['rsso_log_period'];
    }

    /**
     * Sets rsso_log_period
     *
     * @param int|null $rsso_log_period Time interval in seconds that group event log messages will be generated for dynamic profile events.
     *
     * @return self
     */
    public function setRssoLogPeriod($rsso_log_period)
    {

        if (!is_null($rsso_log_period) && ($rsso_log_period > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $rsso_log_period when calling InlineObject448., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($rsso_log_period) && ($rsso_log_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $rsso_log_period when calling InlineObject448., must be bigger than or equal to 0.');
        }

        $this->container['rsso_log_period'] = $rsso_log_period;

        return $this;
    }

    /**
     * Gets rsso_log_flags
     *
     * @return string|null
     */
    public function getRssoLogFlags()
    {
        return $this->container['rsso_log_flags'];
    }

    /**
     * Sets rsso_log_flags
     *
     * @param string|null $rsso_log_flags Events to log.    protocol-error:Enable this log type.    profile-missing:Enable this log type.    accounting-stop-missed:Enable this log type.    accounting-event:Enable this log type.    endpoint-block:Enable this log type.    radiusd-other:Enable this log type.    none:Disable all logging.
     *
     * @return self
     */
    public function setRssoLogFlags($rsso_log_flags)
    {
        $allowedValues = $this->getRssoLogFlagsAllowableValues();
        if (!is_null($rsso_log_flags) && !in_array($rsso_log_flags, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_log_flags', must be one of '%s'",
                    $rsso_log_flags,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_log_flags'] = $rsso_log_flags;

        return $this;
    }

    /**
     * Gets rsso_flush_ip_session
     *
     * @return string|null
     */
    public function getRssoFlushIpSession()
    {
        return $this->container['rsso_flush_ip_session'];
    }

    /**
     * Sets rsso_flush_ip_session
     *
     * @param string|null $rsso_flush_ip_session Enable/disable flushing user IP sessions on RADIUS accounting Stop messages.    enable:Enable flush user IP sessions on RADIUS accounting stop.    disable:Disable flush user IP sessions on RADIUS accounting stop.
     *
     * @return self
     */
    public function setRssoFlushIpSession($rsso_flush_ip_session)
    {
        $allowedValues = $this->getRssoFlushIpSessionAllowableValues();
        if (!is_null($rsso_flush_ip_session) && !in_array($rsso_flush_ip_session, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_flush_ip_session', must be one of '%s'",
                    $rsso_flush_ip_session,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_flush_ip_session'] = $rsso_flush_ip_session;

        return $this;
    }

    /**
     * Gets rsso_ep_one_ip_only
     *
     * @return string|null
     */
    public function getRssoEpOneIpOnly()
    {
        return $this->container['rsso_ep_one_ip_only'];
    }

    /**
     * Sets rsso_ep_one_ip_only
     *
     * @param string|null $rsso_ep_one_ip_only Enable/disable the replacement of old IP addresses with new ones for the same endpoint on RADIUS accounting Start messages.    enable:Enable replacement of old IP address with new IP address for the same endpoint on RADIUS accounting start.    disable:Disable replacement of old IP address with new IP address for the same endpoint on RADIUS accounting start.
     *
     * @return self
     */
    public function setRssoEpOneIpOnly($rsso_ep_one_ip_only)
    {
        $allowedValues = $this->getRssoEpOneIpOnlyAllowableValues();
        if (!is_null($rsso_ep_one_ip_only) && !in_array($rsso_ep_one_ip_only, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsso_ep_one_ip_only', must be one of '%s'",
                    $rsso_ep_one_ip_only,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsso_ep_one_ip_only'] = $rsso_ep_one_ip_only;

        return $this;
    }

    /**
     * Gets accounting_server
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserRadiusNameAccountingServer[]|null
     */
    public function getAccountingServer()
    {
        return $this->container['accounting_server'];
    }

    /**
     * Sets accounting_server
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserRadiusNameAccountingServer[]|null $accounting_server Additional accounting servers.
     *
     * @return self
     */
    public function setAccountingServer($accounting_server)
    {

        if (!is_null($accounting_server) && (count($accounting_server) > 4)) {
            throw new \InvalidArgumentException('invalid value for $accounting_server when calling InlineObject448., number of items must be less than or equal to 4.');
        }
        $this->container['accounting_server'] = $accounting_server;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


