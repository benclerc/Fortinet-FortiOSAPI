<?php
/**
 * InlineObject363
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject363 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject363 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_363';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'group_type' => 'string',
        'mail' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'http' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'webproxy' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'ftp' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'fortiguard_wf' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'spam' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'alertmail' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'admin' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'auth' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'sslvpn' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'nac_quar' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'traffic_quota' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'utm' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'custom_message' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]',
        'icap' => '\Fortigate\FortiOS\Model\CMDB\InlineObject258[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'group_type' => null,
        'mail' => null,
        'http' => null,
        'webproxy' => null,
        'ftp' => null,
        'fortiguard_wf' => null,
        'spam' => null,
        'alertmail' => null,
        'admin' => null,
        'auth' => null,
        'sslvpn' => null,
        'nac_quar' => null,
        'traffic_quota' => null,
        'utm' => null,
        'custom_message' => null,
        'icap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'group_type' => 'group-type',
        'mail' => 'mail',
        'http' => 'http',
        'webproxy' => 'webproxy',
        'ftp' => 'ftp',
        'fortiguard_wf' => 'fortiguard-wf',
        'spam' => 'spam',
        'alertmail' => 'alertmail',
        'admin' => 'admin',
        'auth' => 'auth',
        'sslvpn' => 'sslvpn',
        'nac_quar' => 'nac-quar',
        'traffic_quota' => 'traffic-quota',
        'utm' => 'utm',
        'custom_message' => 'custom-message',
        'icap' => 'icap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'group_type' => 'setGroupType',
        'mail' => 'setMail',
        'http' => 'setHttp',
        'webproxy' => 'setWebproxy',
        'ftp' => 'setFtp',
        'fortiguard_wf' => 'setFortiguardWf',
        'spam' => 'setSpam',
        'alertmail' => 'setAlertmail',
        'admin' => 'setAdmin',
        'auth' => 'setAuth',
        'sslvpn' => 'setSslvpn',
        'nac_quar' => 'setNacQuar',
        'traffic_quota' => 'setTrafficQuota',
        'utm' => 'setUtm',
        'custom_message' => 'setCustomMessage',
        'icap' => 'setIcap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'group_type' => 'getGroupType',
        'mail' => 'getMail',
        'http' => 'getHttp',
        'webproxy' => 'getWebproxy',
        'ftp' => 'getFtp',
        'fortiguard_wf' => 'getFortiguardWf',
        'spam' => 'getSpam',
        'alertmail' => 'getAlertmail',
        'admin' => 'getAdmin',
        'auth' => 'getAuth',
        'sslvpn' => 'getSslvpn',
        'nac_quar' => 'getNacQuar',
        'traffic_quota' => 'getTrafficQuota',
        'utm' => 'getUtm',
        'custom_message' => 'getCustomMessage',
        'icap' => 'getIcap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GROUP_TYPE__DEFAULT = 'default';
    const GROUP_TYPE_UTM = 'utm';
    const GROUP_TYPE_AUTH = 'auth';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupTypeAllowableValues()
    {
        return [
            self::GROUP_TYPE__DEFAULT,
            self::GROUP_TYPE_UTM,
            self::GROUP_TYPE_AUTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['group_type'] = $data['group_type'] ?? null;
        $this->container['mail'] = $data['mail'] ?? null;
        $this->container['http'] = $data['http'] ?? null;
        $this->container['webproxy'] = $data['webproxy'] ?? null;
        $this->container['ftp'] = $data['ftp'] ?? null;
        $this->container['fortiguard_wf'] = $data['fortiguard_wf'] ?? null;
        $this->container['spam'] = $data['spam'] ?? null;
        $this->container['alertmail'] = $data['alertmail'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['auth'] = $data['auth'] ?? null;
        $this->container['sslvpn'] = $data['sslvpn'] ?? null;
        $this->container['nac_quar'] = $data['nac_quar'] ?? null;
        $this->container['traffic_quota'] = $data['traffic_quota'] ?? null;
        $this->container['utm'] = $data['utm'] ?? null;
        $this->container['custom_message'] = $data['custom_message'] ?? null;
        $this->container['icap'] = $data['icap'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($this->container['group_type']) && !in_array($this->container['group_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_type', must be one of '%s'",
                $this->container['group_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mail']) && (count($this->container['mail']) > 0)) {
            $invalidProperties[] = "invalid value for 'mail', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['http']) && (count($this->container['http']) > 0)) {
            $invalidProperties[] = "invalid value for 'http', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['webproxy']) && (count($this->container['webproxy']) > 0)) {
            $invalidProperties[] = "invalid value for 'webproxy', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ftp']) && (count($this->container['ftp']) > 0)) {
            $invalidProperties[] = "invalid value for 'ftp', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['fortiguard_wf']) && (count($this->container['fortiguard_wf']) > 0)) {
            $invalidProperties[] = "invalid value for 'fortiguard_wf', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['spam']) && (count($this->container['spam']) > 0)) {
            $invalidProperties[] = "invalid value for 'spam', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['alertmail']) && (count($this->container['alertmail']) > 0)) {
            $invalidProperties[] = "invalid value for 'alertmail', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['admin']) && (count($this->container['admin']) > 0)) {
            $invalidProperties[] = "invalid value for 'admin', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['auth']) && (count($this->container['auth']) > 0)) {
            $invalidProperties[] = "invalid value for 'auth', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['sslvpn']) && (count($this->container['sslvpn']) > 0)) {
            $invalidProperties[] = "invalid value for 'sslvpn', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['nac_quar']) && (count($this->container['nac_quar']) > 0)) {
            $invalidProperties[] = "invalid value for 'nac_quar', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['traffic_quota']) && (count($this->container['traffic_quota']) > 0)) {
            $invalidProperties[] = "invalid value for 'traffic_quota', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['utm']) && (count($this->container['utm']) > 0)) {
            $invalidProperties[] = "invalid value for 'utm', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['custom_message']) && (count($this->container['custom_message']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_message', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['icap']) && (count($this->container['icap']) > 0)) {
            $invalidProperties[] = "invalid value for 'icap', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Group name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject363., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject363., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return string|null
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param string|null $group_type Group type.    default:Per-vdom replacement messages.    utm:For use with UTM settings in firewall policies.    auth:For use with authentication pages in firewall policies.
     *
     * @return self
     */
    public function setGroupType($group_type)
    {
        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($group_type) && !in_array($group_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_type', must be one of '%s'",
                    $group_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $mail Replacement message table entries.
     *
     * @return self
     */
    public function setMail($mail)
    {

        if (!is_null($mail) && (count($mail) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mail when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets http
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getHttp()
    {
        return $this->container['http'];
    }

    /**
     * Sets http
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $http Replacement message table entries.
     *
     * @return self
     */
    public function setHttp($http)
    {

        if (!is_null($http) && (count($http) > 0)) {
            throw new \InvalidArgumentException('invalid value for $http when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['http'] = $http;

        return $this;
    }

    /**
     * Gets webproxy
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getWebproxy()
    {
        return $this->container['webproxy'];
    }

    /**
     * Sets webproxy
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $webproxy Replacement message table entries.
     *
     * @return self
     */
    public function setWebproxy($webproxy)
    {

        if (!is_null($webproxy) && (count($webproxy) > 0)) {
            throw new \InvalidArgumentException('invalid value for $webproxy when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['webproxy'] = $webproxy;

        return $this;
    }

    /**
     * Gets ftp
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getFtp()
    {
        return $this->container['ftp'];
    }

    /**
     * Sets ftp
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $ftp Replacement message table entries.
     *
     * @return self
     */
    public function setFtp($ftp)
    {

        if (!is_null($ftp) && (count($ftp) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ftp when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['ftp'] = $ftp;

        return $this;
    }

    /**
     * Gets fortiguard_wf
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getFortiguardWf()
    {
        return $this->container['fortiguard_wf'];
    }

    /**
     * Sets fortiguard_wf
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $fortiguard_wf Replacement message table entries.
     *
     * @return self
     */
    public function setFortiguardWf($fortiguard_wf)
    {

        if (!is_null($fortiguard_wf) && (count($fortiguard_wf) > 0)) {
            throw new \InvalidArgumentException('invalid value for $fortiguard_wf when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['fortiguard_wf'] = $fortiguard_wf;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $spam Replacement message table entries.
     *
     * @return self
     */
    public function setSpam($spam)
    {

        if (!is_null($spam) && (count($spam) > 0)) {
            throw new \InvalidArgumentException('invalid value for $spam when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets alertmail
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getAlertmail()
    {
        return $this->container['alertmail'];
    }

    /**
     * Sets alertmail
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $alertmail Replacement message table entries.
     *
     * @return self
     */
    public function setAlertmail($alertmail)
    {

        if (!is_null($alertmail) && (count($alertmail) > 0)) {
            throw new \InvalidArgumentException('invalid value for $alertmail when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['alertmail'] = $alertmail;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $admin Replacement message table entries.
     *
     * @return self
     */
    public function setAdmin($admin)
    {

        if (!is_null($admin) && (count($admin) > 0)) {
            throw new \InvalidArgumentException('invalid value for $admin when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $auth Replacement message table entries.
     *
     * @return self
     */
    public function setAuth($auth)
    {

        if (!is_null($auth) && (count($auth) > 0)) {
            throw new \InvalidArgumentException('invalid value for $auth when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets sslvpn
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getSslvpn()
    {
        return $this->container['sslvpn'];
    }

    /**
     * Sets sslvpn
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $sslvpn Replacement message table entries.
     *
     * @return self
     */
    public function setSslvpn($sslvpn)
    {

        if (!is_null($sslvpn) && (count($sslvpn) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sslvpn when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['sslvpn'] = $sslvpn;

        return $this;
    }

    /**
     * Gets nac_quar
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getNacQuar()
    {
        return $this->container['nac_quar'];
    }

    /**
     * Sets nac_quar
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $nac_quar Replacement message table entries.
     *
     * @return self
     */
    public function setNacQuar($nac_quar)
    {

        if (!is_null($nac_quar) && (count($nac_quar) > 0)) {
            throw new \InvalidArgumentException('invalid value for $nac_quar when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['nac_quar'] = $nac_quar;

        return $this;
    }

    /**
     * Gets traffic_quota
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getTrafficQuota()
    {
        return $this->container['traffic_quota'];
    }

    /**
     * Sets traffic_quota
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $traffic_quota Replacement message table entries.
     *
     * @return self
     */
    public function setTrafficQuota($traffic_quota)
    {

        if (!is_null($traffic_quota) && (count($traffic_quota) > 0)) {
            throw new \InvalidArgumentException('invalid value for $traffic_quota when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['traffic_quota'] = $traffic_quota;

        return $this;
    }

    /**
     * Gets utm
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getUtm()
    {
        return $this->container['utm'];
    }

    /**
     * Sets utm
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $utm Replacement message table entries.
     *
     * @return self
     */
    public function setUtm($utm)
    {

        if (!is_null($utm) && (count($utm) > 0)) {
            throw new \InvalidArgumentException('invalid value for $utm when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['utm'] = $utm;

        return $this;
    }

    /**
     * Gets custom_message
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getCustomMessage()
    {
        return $this->container['custom_message'];
    }

    /**
     * Sets custom_message
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $custom_message Replacement message table entries.
     *
     * @return self
     */
    public function setCustomMessage($custom_message)
    {

        if (!is_null($custom_message) && (count($custom_message) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_message when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['custom_message'] = $custom_message;

        return $this;
    }

    /**
     * Gets icap
     *
     * @return \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null
     */
    public function getIcap()
    {
        return $this->container['icap'];
    }

    /**
     * Sets icap
     *
     * @param \Fortigate\FortiOS\Model\CMDB\InlineObject258[]|null $icap Replacement message table entries.
     *
     * @return self
     */
    public function setIcap($icap)
    {

        if (!is_null($icap) && (count($icap) > 0)) {
            throw new \InvalidArgumentException('invalid value for $icap when calling InlineObject363., number of items must be less than or equal to 0.');
        }
        $this->container['icap'] = $icap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


