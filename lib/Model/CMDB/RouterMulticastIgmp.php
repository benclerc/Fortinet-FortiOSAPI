<?php
/**
 * RouterMulticastIgmp
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * RouterMulticastIgmp Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RouterMulticastIgmp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_router_multicast_igmp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_group' => 'string',
        'version' => 'string',
        'immediate_leave_group' => 'string',
        'last_member_query_interval' => 'int',
        'last_member_query_count' => 'int',
        'query_max_response_time' => 'int',
        'query_interval' => 'int',
        'query_timeout' => 'int',
        'router_alert_check' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_group' => null,
        'version' => null,
        'immediate_leave_group' => null,
        'last_member_query_interval' => null,
        'last_member_query_count' => null,
        'query_max_response_time' => null,
        'query_interval' => null,
        'query_timeout' => null,
        'router_alert_check' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_group' => 'access-group',
        'version' => 'version',
        'immediate_leave_group' => 'immediate-leave-group',
        'last_member_query_interval' => 'last-member-query-interval',
        'last_member_query_count' => 'last-member-query-count',
        'query_max_response_time' => 'query-max-response-time',
        'query_interval' => 'query-interval',
        'query_timeout' => 'query-timeout',
        'router_alert_check' => 'router-alert-check'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_group' => 'setAccessGroup',
        'version' => 'setVersion',
        'immediate_leave_group' => 'setImmediateLeaveGroup',
        'last_member_query_interval' => 'setLastMemberQueryInterval',
        'last_member_query_count' => 'setLastMemberQueryCount',
        'query_max_response_time' => 'setQueryMaxResponseTime',
        'query_interval' => 'setQueryInterval',
        'query_timeout' => 'setQueryTimeout',
        'router_alert_check' => 'setRouterAlertCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_group' => 'getAccessGroup',
        'version' => 'getVersion',
        'immediate_leave_group' => 'getImmediateLeaveGroup',
        'last_member_query_interval' => 'getLastMemberQueryInterval',
        'last_member_query_count' => 'getLastMemberQueryCount',
        'query_max_response_time' => 'getQueryMaxResponseTime',
        'query_interval' => 'getQueryInterval',
        'query_timeout' => 'getQueryTimeout',
        'router_alert_check' => 'getRouterAlertCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERSION__3 = '3';
    const VERSION__2 = '2';
    const VERSION__1 = '1';
    const ROUTER_ALERT_CHECK_ENABLE = 'enable';
    const ROUTER_ALERT_CHECK_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION__3,
            self::VERSION__2,
            self::VERSION__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouterAlertCheckAllowableValues()
    {
        return [
            self::ROUTER_ALERT_CHECK_ENABLE,
            self::ROUTER_ALERT_CHECK_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_group'] = $data['access_group'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['immediate_leave_group'] = $data['immediate_leave_group'] ?? null;
        $this->container['last_member_query_interval'] = $data['last_member_query_interval'] ?? null;
        $this->container['last_member_query_count'] = $data['last_member_query_count'] ?? null;
        $this->container['query_max_response_time'] = $data['query_max_response_time'] ?? null;
        $this->container['query_interval'] = $data['query_interval'] ?? null;
        $this->container['query_timeout'] = $data['query_timeout'] ?? null;
        $this->container['router_alert_check'] = $data['router_alert_check'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['access_group']) && (mb_strlen($this->container['access_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'access_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($this->container['version']) && !in_array($this->container['version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'version', must be one of '%s'",
                $this->container['version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['immediate_leave_group']) && (mb_strlen($this->container['immediate_leave_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'immediate_leave_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['last_member_query_interval']) && ($this->container['last_member_query_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'last_member_query_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['last_member_query_interval']) && ($this->container['last_member_query_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'last_member_query_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_member_query_count']) && ($this->container['last_member_query_count'] > 7)) {
            $invalidProperties[] = "invalid value for 'last_member_query_count', must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['last_member_query_count']) && ($this->container['last_member_query_count'] < 2)) {
            $invalidProperties[] = "invalid value for 'last_member_query_count', must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['query_max_response_time']) && ($this->container['query_max_response_time'] > 25)) {
            $invalidProperties[] = "invalid value for 'query_max_response_time', must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['query_max_response_time']) && ($this->container['query_max_response_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'query_max_response_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['query_interval']) && ($this->container['query_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'query_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['query_interval']) && ($this->container['query_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'query_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['query_timeout']) && ($this->container['query_timeout'] > 900)) {
            $invalidProperties[] = "invalid value for 'query_timeout', must be smaller than or equal to 900.";
        }

        if (!is_null($this->container['query_timeout']) && ($this->container['query_timeout'] < 60)) {
            $invalidProperties[] = "invalid value for 'query_timeout', must be bigger than or equal to 60.";
        }

        $allowedValues = $this->getRouterAlertCheckAllowableValues();
        if (!is_null($this->container['router_alert_check']) && !in_array($this->container['router_alert_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'router_alert_check', must be one of '%s'",
                $this->container['router_alert_check'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_group
     *
     * @return string|null
     */
    public function getAccessGroup()
    {
        return $this->container['access_group'];
    }

    /**
     * Sets access_group
     *
     * @param string|null $access_group Groups IGMP hosts are allowed to join.
     *
     * @return self
     */
    public function setAccessGroup($access_group)
    {
        if (!is_null($access_group) && (mb_strlen($access_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $access_group when calling RouterMulticastIgmp., must be smaller than or equal to 35.');
        }

        $this->container['access_group'] = $access_group;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Maximum version of IGMP to support.    3:Version 3 and lower.    2:Version 2 and lower.    1:Version 1.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($version) && !in_array($version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'version', must be one of '%s'",
                    $version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets immediate_leave_group
     *
     * @return string|null
     */
    public function getImmediateLeaveGroup()
    {
        return $this->container['immediate_leave_group'];
    }

    /**
     * Sets immediate_leave_group
     *
     * @param string|null $immediate_leave_group Groups to drop membership for immediately after receiving IGMPv2 leave.
     *
     * @return self
     */
    public function setImmediateLeaveGroup($immediate_leave_group)
    {
        if (!is_null($immediate_leave_group) && (mb_strlen($immediate_leave_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $immediate_leave_group when calling RouterMulticastIgmp., must be smaller than or equal to 35.');
        }

        $this->container['immediate_leave_group'] = $immediate_leave_group;

        return $this;
    }

    /**
     * Gets last_member_query_interval
     *
     * @return int|null
     */
    public function getLastMemberQueryInterval()
    {
        return $this->container['last_member_query_interval'];
    }

    /**
     * Sets last_member_query_interval
     *
     * @param int|null $last_member_query_interval Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
     *
     * @return self
     */
    public function setLastMemberQueryInterval($last_member_query_interval)
    {

        if (!is_null($last_member_query_interval) && ($last_member_query_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $last_member_query_interval when calling RouterMulticastIgmp., must be smaller than or equal to 65535.');
        }
        if (!is_null($last_member_query_interval) && ($last_member_query_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $last_member_query_interval when calling RouterMulticastIgmp., must be bigger than or equal to 1.');
        }

        $this->container['last_member_query_interval'] = $last_member_query_interval;

        return $this;
    }

    /**
     * Gets last_member_query_count
     *
     * @return int|null
     */
    public function getLastMemberQueryCount()
    {
        return $this->container['last_member_query_count'];
    }

    /**
     * Sets last_member_query_count
     *
     * @param int|null $last_member_query_count Number of group specific queries before removing group (2 - 7, default = 2).
     *
     * @return self
     */
    public function setLastMemberQueryCount($last_member_query_count)
    {

        if (!is_null($last_member_query_count) && ($last_member_query_count > 7)) {
            throw new \InvalidArgumentException('invalid value for $last_member_query_count when calling RouterMulticastIgmp., must be smaller than or equal to 7.');
        }
        if (!is_null($last_member_query_count) && ($last_member_query_count < 2)) {
            throw new \InvalidArgumentException('invalid value for $last_member_query_count when calling RouterMulticastIgmp., must be bigger than or equal to 2.');
        }

        $this->container['last_member_query_count'] = $last_member_query_count;

        return $this;
    }

    /**
     * Gets query_max_response_time
     *
     * @return int|null
     */
    public function getQueryMaxResponseTime()
    {
        return $this->container['query_max_response_time'];
    }

    /**
     * Sets query_max_response_time
     *
     * @param int|null $query_max_response_time Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
     *
     * @return self
     */
    public function setQueryMaxResponseTime($query_max_response_time)
    {

        if (!is_null($query_max_response_time) && ($query_max_response_time > 25)) {
            throw new \InvalidArgumentException('invalid value for $query_max_response_time when calling RouterMulticastIgmp., must be smaller than or equal to 25.');
        }
        if (!is_null($query_max_response_time) && ($query_max_response_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $query_max_response_time when calling RouterMulticastIgmp., must be bigger than or equal to 1.');
        }

        $this->container['query_max_response_time'] = $query_max_response_time;

        return $this;
    }

    /**
     * Gets query_interval
     *
     * @return int|null
     */
    public function getQueryInterval()
    {
        return $this->container['query_interval'];
    }

    /**
     * Sets query_interval
     *
     * @param int|null $query_interval Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
     *
     * @return self
     */
    public function setQueryInterval($query_interval)
    {

        if (!is_null($query_interval) && ($query_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $query_interval when calling RouterMulticastIgmp., must be smaller than or equal to 65535.');
        }
        if (!is_null($query_interval) && ($query_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $query_interval when calling RouterMulticastIgmp., must be bigger than or equal to 1.');
        }

        $this->container['query_interval'] = $query_interval;

        return $this;
    }

    /**
     * Gets query_timeout
     *
     * @return int|null
     */
    public function getQueryTimeout()
    {
        return $this->container['query_timeout'];
    }

    /**
     * Sets query_timeout
     *
     * @param int|null $query_timeout Timeout between queries before becoming querier for network (60 - 900, default = 255).
     *
     * @return self
     */
    public function setQueryTimeout($query_timeout)
    {

        if (!is_null($query_timeout) && ($query_timeout > 900)) {
            throw new \InvalidArgumentException('invalid value for $query_timeout when calling RouterMulticastIgmp., must be smaller than or equal to 900.');
        }
        if (!is_null($query_timeout) && ($query_timeout < 60)) {
            throw new \InvalidArgumentException('invalid value for $query_timeout when calling RouterMulticastIgmp., must be bigger than or equal to 60.');
        }

        $this->container['query_timeout'] = $query_timeout;

        return $this;
    }

    /**
     * Gets router_alert_check
     *
     * @return string|null
     */
    public function getRouterAlertCheck()
    {
        return $this->container['router_alert_check'];
    }

    /**
     * Sets router_alert_check
     *
     * @param string|null $router_alert_check Enable/disable require IGMP packets contain router alert option.    enable:Require Router Alert option in IGMP packets.    disable:don't require Router Alert option in IGMP packets
     *
     * @return self
     */
    public function setRouterAlertCheck($router_alert_check)
    {
        $allowedValues = $this->getRouterAlertCheckAllowableValues();
        if (!is_null($router_alert_check) && !in_array($router_alert_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'router_alert_check', must be one of '%s'",
                    $router_alert_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['router_alert_check'] = $router_alert_check;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


