<?php
/**
 * InlineObject602
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject602 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject602 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_602';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'country' => 'string',
        'duplicate_ssid' => 'string',
        'fapc_compatibility' => 'string',
        'wfa_compatibility' => 'string',
        'phishing_ssid_detect' => 'string',
        'fake_ssid_action' => 'string',
        'offending_ssid' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerSettingOffendingSsid[]',
        'device_weight' => 'int',
        'device_holdoff' => 'int',
        'device_idle' => 'int',
        'darrp_optimize' => 'int',
        'darrp_optimize_schedules' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'country' => null,
        'duplicate_ssid' => null,
        'fapc_compatibility' => null,
        'wfa_compatibility' => null,
        'phishing_ssid_detect' => null,
        'fake_ssid_action' => null,
        'offending_ssid' => null,
        'device_weight' => null,
        'device_holdoff' => null,
        'device_idle' => null,
        'darrp_optimize' => null,
        'darrp_optimize_schedules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account-id',
        'country' => 'country',
        'duplicate_ssid' => 'duplicate-ssid',
        'fapc_compatibility' => 'fapc-compatibility',
        'wfa_compatibility' => 'wfa-compatibility',
        'phishing_ssid_detect' => 'phishing-ssid-detect',
        'fake_ssid_action' => 'fake-ssid-action',
        'offending_ssid' => 'offending-ssid',
        'device_weight' => 'device-weight',
        'device_holdoff' => 'device-holdoff',
        'device_idle' => 'device-idle',
        'darrp_optimize' => 'darrp-optimize',
        'darrp_optimize_schedules' => 'darrp-optimize-schedules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'country' => 'setCountry',
        'duplicate_ssid' => 'setDuplicateSsid',
        'fapc_compatibility' => 'setFapcCompatibility',
        'wfa_compatibility' => 'setWfaCompatibility',
        'phishing_ssid_detect' => 'setPhishingSsidDetect',
        'fake_ssid_action' => 'setFakeSsidAction',
        'offending_ssid' => 'setOffendingSsid',
        'device_weight' => 'setDeviceWeight',
        'device_holdoff' => 'setDeviceHoldoff',
        'device_idle' => 'setDeviceIdle',
        'darrp_optimize' => 'setDarrpOptimize',
        'darrp_optimize_schedules' => 'setDarrpOptimizeSchedules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'country' => 'getCountry',
        'duplicate_ssid' => 'getDuplicateSsid',
        'fapc_compatibility' => 'getFapcCompatibility',
        'wfa_compatibility' => 'getWfaCompatibility',
        'phishing_ssid_detect' => 'getPhishingSsidDetect',
        'fake_ssid_action' => 'getFakeSsidAction',
        'offending_ssid' => 'getOffendingSsid',
        'device_weight' => 'getDeviceWeight',
        'device_holdoff' => 'getDeviceHoldoff',
        'device_idle' => 'getDeviceIdle',
        'darrp_optimize' => 'getDarrpOptimize',
        'darrp_optimize_schedules' => 'getDarrpOptimizeSchedules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COUNTRY_NA = 'NA';
    const COUNTRY_AF = 'AF';
    const COUNTRY_AL = 'AL';
    const COUNTRY_DZ = 'DZ';
    const COUNTRY__AS = 'AS';
    const COUNTRY_AO = 'AO';
    const COUNTRY_AR = 'AR';
    const COUNTRY_AM = 'AM';
    const COUNTRY_AU = 'AU';
    const COUNTRY_AT = 'AT';
    const COUNTRY_AZ = 'AZ';
    const COUNTRY_BS = 'BS';
    const COUNTRY_BH = 'BH';
    const COUNTRY_BD = 'BD';
    const COUNTRY_BB = 'BB';
    const COUNTRY_BY = 'BY';
    const COUNTRY_BE = 'BE';
    const COUNTRY_BZ = 'BZ';
    const COUNTRY_BJ = 'BJ';
    const COUNTRY_BM = 'BM';
    const COUNTRY_BT = 'BT';
    const COUNTRY_BO = 'BO';
    const COUNTRY_BA = 'BA';
    const COUNTRY_BW = 'BW';
    const COUNTRY_BR = 'BR';
    const COUNTRY_BN = 'BN';
    const COUNTRY_BG = 'BG';
    const COUNTRY_BF = 'BF';
    const COUNTRY_KH = 'KH';
    const COUNTRY_CM = 'CM';
    const COUNTRY_KY = 'KY';
    const COUNTRY_CF = 'CF';
    const COUNTRY_TD = 'TD';
    const COUNTRY_CL = 'CL';
    const COUNTRY_CN = 'CN';
    const COUNTRY_CX = 'CX';
    const COUNTRY_CO = 'CO';
    const COUNTRY_CR = 'CR';
    const COUNTRY_HR = 'HR';
    const COUNTRY_CY = 'CY';
    const COUNTRY_CZ = 'CZ';
    const COUNTRY_DK = 'DK';
    const COUNTRY_DM = 'DM';
    const COUNTRY__DO = 'DO';
    const COUNTRY_EC = 'EC';
    const COUNTRY_EG = 'EG';
    const COUNTRY_SV = 'SV';
    const COUNTRY_ET = 'ET';
    const COUNTRY_EE = 'EE';
    const COUNTRY_GF = 'GF';
    const COUNTRY_PF = 'PF';
    const COUNTRY_FO = 'FO';
    const COUNTRY_FI = 'FI';
    const COUNTRY_FR = 'FR';
    const COUNTRY_GE = 'GE';
    const COUNTRY_DE = 'DE';
    const COUNTRY_GH = 'GH';
    const COUNTRY_GI = 'GI';
    const COUNTRY_GR = 'GR';
    const COUNTRY_GL = 'GL';
    const COUNTRY_GD = 'GD';
    const COUNTRY_GP = 'GP';
    const COUNTRY_GU = 'GU';
    const COUNTRY_GT = 'GT';
    const COUNTRY_GY = 'GY';
    const COUNTRY_HT = 'HT';
    const COUNTRY_HN = 'HN';
    const COUNTRY_HK = 'HK';
    const COUNTRY_HU = 'HU';
    const COUNTRY_IS = 'IS';
    const COUNTRY_IN = 'IN';
    const COUNTRY_ID = 'ID';
    const COUNTRY_IR = 'IR';
    const COUNTRY_IE = 'IE';
    const COUNTRY_IM = 'IM';
    const COUNTRY_IL = 'IL';
    const COUNTRY_IT = 'IT';
    const COUNTRY_CI = 'CI';
    const COUNTRY_JM = 'JM';
    const COUNTRY_JO = 'JO';
    const COUNTRY_KZ = 'KZ';
    const COUNTRY_KE = 'KE';
    const COUNTRY_KP = 'KP';
    const COUNTRY_KR = 'KR';
    const COUNTRY_KW = 'KW';
    const COUNTRY_LA = 'LA';
    const COUNTRY_LV = 'LV';
    const COUNTRY_LB = 'LB';
    const COUNTRY_LS = 'LS';
    const COUNTRY_LY = 'LY';
    const COUNTRY_LI = 'LI';
    const COUNTRY_LT = 'LT';
    const COUNTRY_LU = 'LU';
    const COUNTRY_MO = 'MO';
    const COUNTRY_MK = 'MK';
    const COUNTRY_MG = 'MG';
    const COUNTRY_MW = 'MW';
    const COUNTRY_MY = 'MY';
    const COUNTRY_MV = 'MV';
    const COUNTRY_ML = 'ML';
    const COUNTRY_MT = 'MT';
    const COUNTRY_MH = 'MH';
    const COUNTRY_MQ = 'MQ';
    const COUNTRY_MU = 'MU';
    const COUNTRY_YT = 'YT';
    const COUNTRY_MX = 'MX';
    const COUNTRY_FM = 'FM';
    const COUNTRY_MD = 'MD';
    const COUNTRY_MC = 'MC';
    const COUNTRY_MA = 'MA';
    const COUNTRY_MZ = 'MZ';
    const COUNTRY_MM = 'MM';
    const COUNTRY_NP = 'NP';
    const COUNTRY_NL = 'NL';
    const COUNTRY_AN = 'AN';
    const COUNTRY_AW = 'AW';
    const COUNTRY_NZ = 'NZ';
    const COUNTRY_NI = 'NI';
    const COUNTRY_NE = 'NE';
    const COUNTRY_NO = 'NO';
    const COUNTRY_MP = 'MP';
    const COUNTRY_OM = 'OM';
    const COUNTRY_PK = 'PK';
    const COUNTRY_PW = 'PW';
    const COUNTRY_PA = 'PA';
    const COUNTRY_PG = 'PG';
    const COUNTRY_PY = 'PY';
    const COUNTRY_PE = 'PE';
    const COUNTRY_PH = 'PH';
    const COUNTRY_PL = 'PL';
    const COUNTRY_PT = 'PT';
    const COUNTRY_PR = 'PR';
    const COUNTRY_QA = 'QA';
    const COUNTRY_RE = 'RE';
    const COUNTRY_RO = 'RO';
    const COUNTRY_RU = 'RU';
    const COUNTRY_RW = 'RW';
    const COUNTRY_BL = 'BL';
    const COUNTRY_KN = 'KN';
    const COUNTRY_LC = 'LC';
    const COUNTRY_MF = 'MF';
    const COUNTRY_PM = 'PM';
    const COUNTRY_VC = 'VC';
    const COUNTRY_SA = 'SA';
    const COUNTRY_SN = 'SN';
    const COUNTRY_RS = 'RS';
    const COUNTRY_ME = 'ME';
    const COUNTRY_SL = 'SL';
    const COUNTRY_SG = 'SG';
    const COUNTRY_SK = 'SK';
    const COUNTRY_SI = 'SI';
    const COUNTRY_ZA = 'ZA';
    const COUNTRY_ES = 'ES';
    const COUNTRY_LK = 'LK';
    const COUNTRY_SE = 'SE';
    const COUNTRY_SD = 'SD';
    const COUNTRY_SR = 'SR';
    const COUNTRY_CH = 'CH';
    const COUNTRY_SY = 'SY';
    const COUNTRY_TW = 'TW';
    const COUNTRY_TZ = 'TZ';
    const COUNTRY_TH = 'TH';
    const COUNTRY_TG = 'TG';
    const COUNTRY_TT = 'TT';
    const COUNTRY_TN = 'TN';
    const COUNTRY_TR = 'TR';
    const COUNTRY_TM = 'TM';
    const COUNTRY_AE = 'AE';
    const COUNTRY_TC = 'TC';
    const COUNTRY_UG = 'UG';
    const COUNTRY_UA = 'UA';
    const COUNTRY_GB = 'GB';
    const COUNTRY_US = 'US';
    const COUNTRY_PS = 'PS';
    const COUNTRY_UY = 'UY';
    const COUNTRY_UZ = 'UZ';
    const COUNTRY_VU = 'VU';
    const COUNTRY_VE = 'VE';
    const COUNTRY_VN = 'VN';
    const COUNTRY_VI = 'VI';
    const COUNTRY_WF = 'WF';
    const COUNTRY_YE = 'YE';
    const COUNTRY_ZB = 'ZB';
    const COUNTRY_ZW = 'ZW';
    const COUNTRY_JP = 'JP';
    const COUNTRY_CA = 'CA';
    const DUPLICATE_SSID_ENABLE = 'enable';
    const DUPLICATE_SSID_DISABLE = 'disable';
    const FAPC_COMPATIBILITY_ENABLE = 'enable';
    const FAPC_COMPATIBILITY_DISABLE = 'disable';
    const WFA_COMPATIBILITY_ENABLE = 'enable';
    const WFA_COMPATIBILITY_DISABLE = 'disable';
    const PHISHING_SSID_DETECT_ENABLE = 'enable';
    const PHISHING_SSID_DETECT_DISABLE = 'disable';
    const FAKE_SSID_ACTION_LOG = 'log';
    const FAKE_SSID_ACTION_SUPPRESS = 'suppress';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_NA,
            self::COUNTRY_AF,
            self::COUNTRY_AL,
            self::COUNTRY_DZ,
            self::COUNTRY__AS,
            self::COUNTRY_AO,
            self::COUNTRY_AR,
            self::COUNTRY_AM,
            self::COUNTRY_AU,
            self::COUNTRY_AT,
            self::COUNTRY_AZ,
            self::COUNTRY_BS,
            self::COUNTRY_BH,
            self::COUNTRY_BD,
            self::COUNTRY_BB,
            self::COUNTRY_BY,
            self::COUNTRY_BE,
            self::COUNTRY_BZ,
            self::COUNTRY_BJ,
            self::COUNTRY_BM,
            self::COUNTRY_BT,
            self::COUNTRY_BO,
            self::COUNTRY_BA,
            self::COUNTRY_BW,
            self::COUNTRY_BR,
            self::COUNTRY_BN,
            self::COUNTRY_BG,
            self::COUNTRY_BF,
            self::COUNTRY_KH,
            self::COUNTRY_CM,
            self::COUNTRY_KY,
            self::COUNTRY_CF,
            self::COUNTRY_TD,
            self::COUNTRY_CL,
            self::COUNTRY_CN,
            self::COUNTRY_CX,
            self::COUNTRY_CO,
            self::COUNTRY_CR,
            self::COUNTRY_HR,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DK,
            self::COUNTRY_DM,
            self::COUNTRY__DO,
            self::COUNTRY_EC,
            self::COUNTRY_EG,
            self::COUNTRY_SV,
            self::COUNTRY_ET,
            self::COUNTRY_EE,
            self::COUNTRY_GF,
            self::COUNTRY_PF,
            self::COUNTRY_FO,
            self::COUNTRY_FI,
            self::COUNTRY_FR,
            self::COUNTRY_GE,
            self::COUNTRY_DE,
            self::COUNTRY_GH,
            self::COUNTRY_GI,
            self::COUNTRY_GR,
            self::COUNTRY_GL,
            self::COUNTRY_GD,
            self::COUNTRY_GP,
            self::COUNTRY_GU,
            self::COUNTRY_GT,
            self::COUNTRY_GY,
            self::COUNTRY_HT,
            self::COUNTRY_HN,
            self::COUNTRY_HK,
            self::COUNTRY_HU,
            self::COUNTRY_IS,
            self::COUNTRY_IN,
            self::COUNTRY_ID,
            self::COUNTRY_IR,
            self::COUNTRY_IE,
            self::COUNTRY_IM,
            self::COUNTRY_IL,
            self::COUNTRY_IT,
            self::COUNTRY_CI,
            self::COUNTRY_JM,
            self::COUNTRY_JO,
            self::COUNTRY_KZ,
            self::COUNTRY_KE,
            self::COUNTRY_KP,
            self::COUNTRY_KR,
            self::COUNTRY_KW,
            self::COUNTRY_LA,
            self::COUNTRY_LV,
            self::COUNTRY_LB,
            self::COUNTRY_LS,
            self::COUNTRY_LY,
            self::COUNTRY_LI,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_MO,
            self::COUNTRY_MK,
            self::COUNTRY_MG,
            self::COUNTRY_MW,
            self::COUNTRY_MY,
            self::COUNTRY_MV,
            self::COUNTRY_ML,
            self::COUNTRY_MT,
            self::COUNTRY_MH,
            self::COUNTRY_MQ,
            self::COUNTRY_MU,
            self::COUNTRY_YT,
            self::COUNTRY_MX,
            self::COUNTRY_FM,
            self::COUNTRY_MD,
            self::COUNTRY_MC,
            self::COUNTRY_MA,
            self::COUNTRY_MZ,
            self::COUNTRY_MM,
            self::COUNTRY_NP,
            self::COUNTRY_NL,
            self::COUNTRY_AN,
            self::COUNTRY_AW,
            self::COUNTRY_NZ,
            self::COUNTRY_NI,
            self::COUNTRY_NE,
            self::COUNTRY_NO,
            self::COUNTRY_MP,
            self::COUNTRY_OM,
            self::COUNTRY_PK,
            self::COUNTRY_PW,
            self::COUNTRY_PA,
            self::COUNTRY_PG,
            self::COUNTRY_PY,
            self::COUNTRY_PE,
            self::COUNTRY_PH,
            self::COUNTRY_PL,
            self::COUNTRY_PT,
            self::COUNTRY_PR,
            self::COUNTRY_QA,
            self::COUNTRY_RE,
            self::COUNTRY_RO,
            self::COUNTRY_RU,
            self::COUNTRY_RW,
            self::COUNTRY_BL,
            self::COUNTRY_KN,
            self::COUNTRY_LC,
            self::COUNTRY_MF,
            self::COUNTRY_PM,
            self::COUNTRY_VC,
            self::COUNTRY_SA,
            self::COUNTRY_SN,
            self::COUNTRY_RS,
            self::COUNTRY_ME,
            self::COUNTRY_SL,
            self::COUNTRY_SG,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_ZA,
            self::COUNTRY_ES,
            self::COUNTRY_LK,
            self::COUNTRY_SE,
            self::COUNTRY_SD,
            self::COUNTRY_SR,
            self::COUNTRY_CH,
            self::COUNTRY_SY,
            self::COUNTRY_TW,
            self::COUNTRY_TZ,
            self::COUNTRY_TH,
            self::COUNTRY_TG,
            self::COUNTRY_TT,
            self::COUNTRY_TN,
            self::COUNTRY_TR,
            self::COUNTRY_TM,
            self::COUNTRY_AE,
            self::COUNTRY_TC,
            self::COUNTRY_UG,
            self::COUNTRY_UA,
            self::COUNTRY_GB,
            self::COUNTRY_US,
            self::COUNTRY_PS,
            self::COUNTRY_UY,
            self::COUNTRY_UZ,
            self::COUNTRY_VU,
            self::COUNTRY_VE,
            self::COUNTRY_VN,
            self::COUNTRY_VI,
            self::COUNTRY_WF,
            self::COUNTRY_YE,
            self::COUNTRY_ZB,
            self::COUNTRY_ZW,
            self::COUNTRY_JP,
            self::COUNTRY_CA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDuplicateSsidAllowableValues()
    {
        return [
            self::DUPLICATE_SSID_ENABLE,
            self::DUPLICATE_SSID_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFapcCompatibilityAllowableValues()
    {
        return [
            self::FAPC_COMPATIBILITY_ENABLE,
            self::FAPC_COMPATIBILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWfaCompatibilityAllowableValues()
    {
        return [
            self::WFA_COMPATIBILITY_ENABLE,
            self::WFA_COMPATIBILITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhishingSsidDetectAllowableValues()
    {
        return [
            self::PHISHING_SSID_DETECT_ENABLE,
            self::PHISHING_SSID_DETECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFakeSsidActionAllowableValues()
    {
        return [
            self::FAKE_SSID_ACTION_LOG,
            self::FAKE_SSID_ACTION_SUPPRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['duplicate_ssid'] = $data['duplicate_ssid'] ?? null;
        $this->container['fapc_compatibility'] = $data['fapc_compatibility'] ?? null;
        $this->container['wfa_compatibility'] = $data['wfa_compatibility'] ?? null;
        $this->container['phishing_ssid_detect'] = $data['phishing_ssid_detect'] ?? null;
        $this->container['fake_ssid_action'] = $data['fake_ssid_action'] ?? null;
        $this->container['offending_ssid'] = $data['offending_ssid'] ?? null;
        $this->container['device_weight'] = $data['device_weight'] ?? null;
        $this->container['device_holdoff'] = $data['device_holdoff'] ?? null;
        $this->container['device_idle'] = $data['device_idle'] ?? null;
        $this->container['darrp_optimize'] = $data['darrp_optimize'] ?? null;
        $this->container['darrp_optimize_schedules'] = $data['darrp_optimize_schedules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) > 63)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country', must be one of '%s'",
                $this->container['country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDuplicateSsidAllowableValues();
        if (!is_null($this->container['duplicate_ssid']) && !in_array($this->container['duplicate_ssid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duplicate_ssid', must be one of '%s'",
                $this->container['duplicate_ssid'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFapcCompatibilityAllowableValues();
        if (!is_null($this->container['fapc_compatibility']) && !in_array($this->container['fapc_compatibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fapc_compatibility', must be one of '%s'",
                $this->container['fapc_compatibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWfaCompatibilityAllowableValues();
        if (!is_null($this->container['wfa_compatibility']) && !in_array($this->container['wfa_compatibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wfa_compatibility', must be one of '%s'",
                $this->container['wfa_compatibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhishingSsidDetectAllowableValues();
        if (!is_null($this->container['phishing_ssid_detect']) && !in_array($this->container['phishing_ssid_detect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phishing_ssid_detect', must be one of '%s'",
                $this->container['phishing_ssid_detect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFakeSsidActionAllowableValues();
        if (!is_null($this->container['fake_ssid_action']) && !in_array($this->container['fake_ssid_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fake_ssid_action', must be one of '%s'",
                $this->container['fake_ssid_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['offending_ssid']) && (count($this->container['offending_ssid']) > 0)) {
            $invalidProperties[] = "invalid value for 'offending_ssid', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['device_weight']) && ($this->container['device_weight'] > 255)) {
            $invalidProperties[] = "invalid value for 'device_weight', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['device_weight']) && ($this->container['device_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'device_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['device_holdoff']) && ($this->container['device_holdoff'] > 60)) {
            $invalidProperties[] = "invalid value for 'device_holdoff', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['device_holdoff']) && ($this->container['device_holdoff'] < 0)) {
            $invalidProperties[] = "invalid value for 'device_holdoff', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['device_idle']) && ($this->container['device_idle'] > 14400)) {
            $invalidProperties[] = "invalid value for 'device_idle', must be smaller than or equal to 14400.";
        }

        if (!is_null($this->container['device_idle']) && ($this->container['device_idle'] < 0)) {
            $invalidProperties[] = "invalid value for 'device_idle', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['darrp_optimize']) && ($this->container['darrp_optimize'] > 86400)) {
            $invalidProperties[] = "invalid value for 'darrp_optimize', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['darrp_optimize']) && ($this->container['darrp_optimize'] < 0)) {
            $invalidProperties[] = "invalid value for 'darrp_optimize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['darrp_optimize_schedules']) && (count($this->container['darrp_optimize_schedules']) > 16)) {
            $invalidProperties[] = "invalid value for 'darrp_optimize_schedules', number of items must be less than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id FortiCloud customer account ID.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (!is_null($account_id) && (mb_strlen($account_id) > 63)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling InlineObject602., must be smaller than or equal to 63.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.    NA:NO_COUNTRY_SET    AF:AFGHANISTAN    AL:ALBANIA    DZ:ALGERIA    AS:AMERICAN SAMOA    AO:ANGOLA    AR:ARGENTINA    AM:ARMENIA    AU:AUSTRALIA    AT:AUSTRIA    AZ:AZERBAIJAN    BS:BAHAMAS    BH:BAHRAIN    BD:BANGLADESH    BB:BARBADOS    BY:BELARUS    BE:BELGIUM    BZ:BELIZE    BJ:BENIN    BM:BERMUDA    BT:BHUTAN    BO:BOLIVIA    BA:BOSNIA AND HERZEGOVINA    BW:BOTSWANA    BR:BRAZIL    BN:BRUNEI DARUSSALAM    BG:BULGARIA    BF:BURKINA-FASO    KH:CAMBODIA    CM:CAMEROON    KY:CAYMAN ISLANDS    CF:CENTRAL AFRICA REPUBLIC    TD:CHAD      CL:CHILE    CN:CHINA    CX:CHRISTMAS ISLAND    CO:COLOMBIA    CR:COSTA RICA    HR:CROATIA    CY:CYPRUS    CZ:CZECH REPUBLIC    DK:DENMARK    DM:DOMINICA    DO:DOMINICAN REPUBLIC    EC:ECUADOR    EG:EGYPT    SV:EL SALVADOR    ET:ETHIOPIA    EE:ESTONIA    GF:FRENCH GUIANA    PF:FRENCH POLYNESIA    FO:FAEROE ISLANDS    FI:FINLAND    FR:FRANCE    GE:GEORGIA    DE:GERMANY    GH:GHANA    GI:GIBRALTAR    GR:GREECE    GL:GREENLAND    GD:GRENADA    GP:GUADELOUPE    GU:GUAM    GT:GUATEMALA    GY:GUYANA    HT:HAITI    HN:HONDURAS    HK:HONG KONG    HU:HUNGARY    IS:ICELAND    IN:INDIA    ID:INDONESIA    IR:IRAN    IE:IRELAND    IM:ISLE OF MAN    IL:ISRAEL    IT:ITALY    CI:COTE_D_IVOIRE    JM:JAMAICA    JO:JORDAN    KZ:KAZAKHSTAN    KE:KENYA    KP:NORTH KOREA    KR:KOREA REPUBLIC    KW:KUWAIT    LA:LAOS    LV:LATVIA    LB:LEBANON    LS:LESOTHO    LY:LIBYA    LI:LIECHTENSTEIN    LT:LITHUANIA    LU:LUXEMBOURG    MO:MACAU SAR    MK:MACEDONIA, FYRO    MG:MADAGASCAR    MW:MALAWI    MY:MALAYSIA    MV:MALDIVES    ML:MALI    MT:MALTA    MH:MARSHALL ISLANDS    MQ:MARTINIQUE    MU:MAURITIUS    YT:MAYOTTE    MX:MEXICO    FM:MICRONESIA    MD:REPUBLIC OF MOLDOVA    MC:MONACO    MA:MOROCCO    MZ:MOZAMBIQUE    MM:MYANMAR    NP:NEPAL    NL:NETHERLANDS    AN:NETHERLANDS ANTILLES    AW:ARUBA    NZ:NEW ZEALAND    NI:NICARAGUA    NE:NIGER    NO:NORWAY    MP:NORTHERN MARIANA ISLANDS    OM:OMAN    PK:PAKISTAN    PW:PALAU    PA:PANAMA    PG:PAPUA NEW GUINEA    PY:PARAGUAY    PE:PERU    PH:PHILIPPINES    PL:POLAND    PT:PORTUGAL    PR:PUERTO RICO    QA:QATAR    RE:REUNION    RO:ROMANIA    RU:RUSSIA    RW:RWANDA    BL:SAINT BARTHELEMY    KN:SAINT KITTS AND NEVIS    LC:SAINT LUCIA    MF:SAINT MARTIN    PM:SAINT PIERRE AND MIQUELON    VC:SAINT VINCENT AND GRENADIENS    SA:SAUDI ARABIA    SN:SENEGAL    RS:REPUBLIC OF SERBIA    ME:MONTENEGRO    SL:SIERRA LEONE    SG:SINGAPORE    SK:SLOVAKIA    SI:SLOVENIA    ZA:SOUTH AFRICA    ES:SPAIN    LK:SRI LANKA    SE:SWEDEN    SD:SUDAN    SR:SURINAME    CH:SWITZERLAND    SY:SYRIAN ARAB REPUBLIC    TW:TAIWAN    TZ:TANZANIA    TH:THAILAND    TG:TOGO    TT:TRINIDAD AND TOBAGO    TN:TUNISIA    TR:TURKEY    TM:TURKMENISTAN    AE:UNITED ARAB EMIRATES    TC:TURKS AND CAICOS    UG:UGANDA    UA:UKRAINE    GB:UNITED KINGDOM    US:UNITED STATES2    PS:UNITED STATES (PUBLIC SAFETY)    UY:URUGUAY    UZ:UZBEKISTAN    VU:VANUATU    VE:VENEZUELA    VN:VIET NAM    VI:VIRGIN ISLANDS    WF:WALLIS AND FUTUNA    YE:YEMEN    ZB:ZAMBIA    ZW:ZIMBABWE    JP:JAPAN14    CA:CANADA2
     *
     * @return self
     */
    public function setCountry($country)
    {
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($country) && !in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country', must be one of '%s'",
                    $country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets duplicate_ssid
     *
     * @return string|null
     */
    public function getDuplicateSsid()
    {
        return $this->container['duplicate_ssid'];
    }

    /**
     * Sets duplicate_ssid
     *
     * @param string|null $duplicate_ssid Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM.    enable:Allow VAPs to use the same SSID name in the same VDOM.    disable:Do not allow VAPs to use the same SSID name in the same VDOM.
     *
     * @return self
     */
    public function setDuplicateSsid($duplicate_ssid)
    {
        $allowedValues = $this->getDuplicateSsidAllowableValues();
        if (!is_null($duplicate_ssid) && !in_array($duplicate_ssid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duplicate_ssid', must be one of '%s'",
                    $duplicate_ssid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duplicate_ssid'] = $duplicate_ssid;

        return $this;
    }

    /**
     * Gets fapc_compatibility
     *
     * @return string|null
     */
    public function getFapcCompatibility()
    {
        return $this->container['fapc_compatibility'];
    }

    /**
     * Sets fapc_compatibility
     *
     * @param string|null $fapc_compatibility Enable/disable FAP-C series compatibility.    enable:Enable FAP-C series compatibility.    disable:Disable FAP-C series compatibility.
     *
     * @return self
     */
    public function setFapcCompatibility($fapc_compatibility)
    {
        $allowedValues = $this->getFapcCompatibilityAllowableValues();
        if (!is_null($fapc_compatibility) && !in_array($fapc_compatibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fapc_compatibility', must be one of '%s'",
                    $fapc_compatibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fapc_compatibility'] = $fapc_compatibility;

        return $this;
    }

    /**
     * Gets wfa_compatibility
     *
     * @return string|null
     */
    public function getWfaCompatibility()
    {
        return $this->container['wfa_compatibility'];
    }

    /**
     * Sets wfa_compatibility
     *
     * @param string|null $wfa_compatibility Enable/disable WFA compatibility.    enable:Enable Wi-Fi Alliance Certification compatibility.    disable:Disable Wi-Fi Alliance Certification compatibility.
     *
     * @return self
     */
    public function setWfaCompatibility($wfa_compatibility)
    {
        $allowedValues = $this->getWfaCompatibilityAllowableValues();
        if (!is_null($wfa_compatibility) && !in_array($wfa_compatibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wfa_compatibility', must be one of '%s'",
                    $wfa_compatibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wfa_compatibility'] = $wfa_compatibility;

        return $this;
    }

    /**
     * Gets phishing_ssid_detect
     *
     * @return string|null
     */
    public function getPhishingSsidDetect()
    {
        return $this->container['phishing_ssid_detect'];
    }

    /**
     * Sets phishing_ssid_detect
     *
     * @param string|null $phishing_ssid_detect Enable/disable phishing SSID detection.    enable:Enable phishing SSID detection.    disable:Disable phishing SSID detection.
     *
     * @return self
     */
    public function setPhishingSsidDetect($phishing_ssid_detect)
    {
        $allowedValues = $this->getPhishingSsidDetectAllowableValues();
        if (!is_null($phishing_ssid_detect) && !in_array($phishing_ssid_detect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phishing_ssid_detect', must be one of '%s'",
                    $phishing_ssid_detect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phishing_ssid_detect'] = $phishing_ssid_detect;

        return $this;
    }

    /**
     * Gets fake_ssid_action
     *
     * @return string|null
     */
    public function getFakeSsidAction()
    {
        return $this->container['fake_ssid_action'];
    }

    /**
     * Sets fake_ssid_action
     *
     * @param string|null $fake_ssid_action Actions taken for detected fake SSID.    log:Write logs for detected fake SSID.    suppress:Suppress detected fake SSID.
     *
     * @return self
     */
    public function setFakeSsidAction($fake_ssid_action)
    {
        $allowedValues = $this->getFakeSsidActionAllowableValues();
        if (!is_null($fake_ssid_action) && !in_array($fake_ssid_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fake_ssid_action', must be one of '%s'",
                    $fake_ssid_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fake_ssid_action'] = $fake_ssid_action;

        return $this;
    }

    /**
     * Gets offending_ssid
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerSettingOffendingSsid[]|null
     */
    public function getOffendingSsid()
    {
        return $this->container['offending_ssid'];
    }

    /**
     * Sets offending_ssid
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerSettingOffendingSsid[]|null $offending_ssid Configure offending SSID.
     *
     * @return self
     */
    public function setOffendingSsid($offending_ssid)
    {

        if (!is_null($offending_ssid) && (count($offending_ssid) > 0)) {
            throw new \InvalidArgumentException('invalid value for $offending_ssid when calling InlineObject602., number of items must be less than or equal to 0.');
        }
        $this->container['offending_ssid'] = $offending_ssid;

        return $this;
    }

    /**
     * Gets device_weight
     *
     * @return int|null
     */
    public function getDeviceWeight()
    {
        return $this->container['device_weight'];
    }

    /**
     * Sets device_weight
     *
     * @param int|null $device_weight Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
     *
     * @return self
     */
    public function setDeviceWeight($device_weight)
    {

        if (!is_null($device_weight) && ($device_weight > 255)) {
            throw new \InvalidArgumentException('invalid value for $device_weight when calling InlineObject602., must be smaller than or equal to 255.');
        }
        if (!is_null($device_weight) && ($device_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $device_weight when calling InlineObject602., must be bigger than or equal to 0.');
        }

        $this->container['device_weight'] = $device_weight;

        return $this;
    }

    /**
     * Gets device_holdoff
     *
     * @return int|null
     */
    public function getDeviceHoldoff()
    {
        return $this->container['device_holdoff'];
    }

    /**
     * Sets device_holdoff
     *
     * @param int|null $device_holdoff Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
     *
     * @return self
     */
    public function setDeviceHoldoff($device_holdoff)
    {

        if (!is_null($device_holdoff) && ($device_holdoff > 60)) {
            throw new \InvalidArgumentException('invalid value for $device_holdoff when calling InlineObject602., must be smaller than or equal to 60.');
        }
        if (!is_null($device_holdoff) && ($device_holdoff < 0)) {
            throw new \InvalidArgumentException('invalid value for $device_holdoff when calling InlineObject602., must be bigger than or equal to 0.');
        }

        $this->container['device_holdoff'] = $device_holdoff;

        return $this;
    }

    /**
     * Gets device_idle
     *
     * @return int|null
     */
    public function getDeviceIdle()
    {
        return $this->container['device_idle'];
    }

    /**
     * Sets device_idle
     *
     * @param int|null $device_idle Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
     *
     * @return self
     */
    public function setDeviceIdle($device_idle)
    {

        if (!is_null($device_idle) && ($device_idle > 14400)) {
            throw new \InvalidArgumentException('invalid value for $device_idle when calling InlineObject602., must be smaller than or equal to 14400.');
        }
        if (!is_null($device_idle) && ($device_idle < 0)) {
            throw new \InvalidArgumentException('invalid value for $device_idle when calling InlineObject602., must be bigger than or equal to 0.');
        }

        $this->container['device_idle'] = $device_idle;

        return $this;
    }

    /**
     * Gets darrp_optimize
     *
     * @return int|null
     */
    public function getDarrpOptimize()
    {
        return $this->container['darrp_optimize'];
    }

    /**
     * Sets darrp_optimize
     *
     * @param int|null $darrp_optimize Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
     *
     * @return self
     */
    public function setDarrpOptimize($darrp_optimize)
    {

        if (!is_null($darrp_optimize) && ($darrp_optimize > 86400)) {
            throw new \InvalidArgumentException('invalid value for $darrp_optimize when calling InlineObject602., must be smaller than or equal to 86400.');
        }
        if (!is_null($darrp_optimize) && ($darrp_optimize < 0)) {
            throw new \InvalidArgumentException('invalid value for $darrp_optimize when calling InlineObject602., must be bigger than or equal to 0.');
        }

        $this->container['darrp_optimize'] = $darrp_optimize;

        return $this;
    }

    /**
     * Gets darrp_optimize_schedules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null
     */
    public function getDarrpOptimizeSchedules()
    {
        return $this->container['darrp_optimize_schedules'];
    }

    /**
     * Sets darrp_optimize_schedules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null $darrp_optimize_schedules Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space.
     *
     * @return self
     */
    public function setDarrpOptimizeSchedules($darrp_optimize_schedules)
    {

        if (!is_null($darrp_optimize_schedules) && (count($darrp_optimize_schedules) > 16)) {
            throw new \InvalidArgumentException('invalid value for $darrp_optimize_schedules when calling InlineObject602., number of items must be less than or equal to 16.');
        }
        $this->container['darrp_optimize_schedules'] = $darrp_optimize_schedules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


