<?php
/**
 * SystemInterfaceNameSecondaryip
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemInterfaceNameSecondaryip Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemInterfaceNameSecondaryip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_interface__name__secondaryip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'ip' => 'string',
        'allowaccess' => 'string',
        'gwdetect' => 'string',
        'ping_serv_status' => 'int',
        'detectserver' => 'string',
        'detectprotocol' => 'string',
        'ha_priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ip' => 'ipv4',
        'allowaccess' => null,
        'gwdetect' => null,
        'ping_serv_status' => null,
        'detectserver' => null,
        'detectprotocol' => null,
        'ha_priority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ip' => 'ip',
        'allowaccess' => 'allowaccess',
        'gwdetect' => 'gwdetect',
        'ping_serv_status' => 'ping-serv-status',
        'detectserver' => 'detectserver',
        'detectprotocol' => 'detectprotocol',
        'ha_priority' => 'ha-priority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ip' => 'setIp',
        'allowaccess' => 'setAllowaccess',
        'gwdetect' => 'setGwdetect',
        'ping_serv_status' => 'setPingServStatus',
        'detectserver' => 'setDetectserver',
        'detectprotocol' => 'setDetectprotocol',
        'ha_priority' => 'setHaPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ip' => 'getIp',
        'allowaccess' => 'getAllowaccess',
        'gwdetect' => 'getGwdetect',
        'ping_serv_status' => 'getPingServStatus',
        'detectserver' => 'getDetectserver',
        'detectprotocol' => 'getDetectprotocol',
        'ha_priority' => 'getHaPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALLOWACCESS_PING = 'ping';
    const ALLOWACCESS_HTTPS = 'https';
    const ALLOWACCESS_SSH = 'ssh';
    const ALLOWACCESS_SNMP = 'snmp';
    const ALLOWACCESS_HTTP = 'http';
    const ALLOWACCESS_TELNET = 'telnet';
    const ALLOWACCESS_FGFM = 'fgfm';
    const ALLOWACCESS_RADIUS_ACCT = 'radius-acct';
    const ALLOWACCESS_PROBE_RESPONSE = 'probe-response';
    const ALLOWACCESS_FABRIC = 'fabric';
    const ALLOWACCESS_FTM = 'ftm';
    const GWDETECT_ENABLE = 'enable';
    const GWDETECT_DISABLE = 'disable';
    const DETECTPROTOCOL_PING = 'ping';
    const DETECTPROTOCOL_TCP_ECHO = 'tcp-echo';
    const DETECTPROTOCOL_UDP_ECHO = 'udp-echo';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowaccessAllowableValues()
    {
        return [
            self::ALLOWACCESS_PING,
            self::ALLOWACCESS_HTTPS,
            self::ALLOWACCESS_SSH,
            self::ALLOWACCESS_SNMP,
            self::ALLOWACCESS_HTTP,
            self::ALLOWACCESS_TELNET,
            self::ALLOWACCESS_FGFM,
            self::ALLOWACCESS_RADIUS_ACCT,
            self::ALLOWACCESS_PROBE_RESPONSE,
            self::ALLOWACCESS_FABRIC,
            self::ALLOWACCESS_FTM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGwdetectAllowableValues()
    {
        return [
            self::GWDETECT_ENABLE,
            self::GWDETECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDetectprotocolAllowableValues()
    {
        return [
            self::DETECTPROTOCOL_PING,
            self::DETECTPROTOCOL_TCP_ECHO,
            self::DETECTPROTOCOL_UDP_ECHO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['allowaccess'] = $data['allowaccess'] ?? null;
        $this->container['gwdetect'] = $data['gwdetect'] ?? null;
        $this->container['ping_serv_status'] = $data['ping_serv_status'] ?? null;
        $this->container['detectserver'] = $data['detectserver'] ?? null;
        $this->container['detectprotocol'] = $data['detectprotocol'] ?? null;
        $this->container['ha_priority'] = $data['ha_priority'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($this->container['allowaccess']) && !in_array($this->container['allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowaccess', must be one of '%s'",
                $this->container['allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGwdetectAllowableValues();
        if (!is_null($this->container['gwdetect']) && !in_array($this->container['gwdetect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gwdetect', must be one of '%s'",
                $this->container['gwdetect'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ping_serv_status']) && ($this->container['ping_serv_status'] > 255)) {
            $invalidProperties[] = "invalid value for 'ping_serv_status', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ping_serv_status']) && ($this->container['ping_serv_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'ping_serv_status', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDetectprotocolAllowableValues();
        if (!is_null($this->container['detectprotocol']) && !in_array($this->container['detectprotocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'detectprotocol', must be one of '%s'",
                $this->container['detectprotocol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] > 50)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemInterfaceNameSecondaryip., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemInterfaceNameSecondaryip., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Secondary IP address of the interface.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets allowaccess
     *
     * @return string|null
     */
    public function getAllowaccess()
    {
        return $this->container['allowaccess'];
    }

    /**
     * Sets allowaccess
     *
     * @param string|null $allowaccess Management access settings for the secondary IP address.    ping:PING access.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.    http:HTTP access.    telnet:TELNET access.    fgfm:FortiManager access.    radius-acct:RADIUS accounting access.    probe-response:Probe access.    fabric:Security Fabric access.    ftm:FTM access.
     *
     * @return self
     */
    public function setAllowaccess($allowaccess)
    {
        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($allowaccess) && !in_array($allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowaccess', must be one of '%s'",
                    $allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowaccess'] = $allowaccess;

        return $this;
    }

    /**
     * Gets gwdetect
     *
     * @return string|null
     */
    public function getGwdetect()
    {
        return $this->container['gwdetect'];
    }

    /**
     * Sets gwdetect
     *
     * @param string|null $gwdetect Enable/disable detect gateway alive for first.    enable:Enable detect gateway alive for first.    disable:Disable detect gateway alive for first.
     *
     * @return self
     */
    public function setGwdetect($gwdetect)
    {
        $allowedValues = $this->getGwdetectAllowableValues();
        if (!is_null($gwdetect) && !in_array($gwdetect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gwdetect', must be one of '%s'",
                    $gwdetect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gwdetect'] = $gwdetect;

        return $this;
    }

    /**
     * Gets ping_serv_status
     *
     * @return int|null
     */
    public function getPingServStatus()
    {
        return $this->container['ping_serv_status'];
    }

    /**
     * Sets ping_serv_status
     *
     * @param int|null $ping_serv_status PING server status.
     *
     * @return self
     */
    public function setPingServStatus($ping_serv_status)
    {

        if (!is_null($ping_serv_status) && ($ping_serv_status > 255)) {
            throw new \InvalidArgumentException('invalid value for $ping_serv_status when calling SystemInterfaceNameSecondaryip., must be smaller than or equal to 255.');
        }
        if (!is_null($ping_serv_status) && ($ping_serv_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $ping_serv_status when calling SystemInterfaceNameSecondaryip., must be bigger than or equal to 0.');
        }

        $this->container['ping_serv_status'] = $ping_serv_status;

        return $this;
    }

    /**
     * Gets detectserver
     *
     * @return string|null
     */
    public function getDetectserver()
    {
        return $this->container['detectserver'];
    }

    /**
     * Sets detectserver
     *
     * @param string|null $detectserver Gateway's ping server for this IP.
     *
     * @return self
     */
    public function setDetectserver($detectserver)
    {
        $this->container['detectserver'] = $detectserver;

        return $this;
    }

    /**
     * Gets detectprotocol
     *
     * @return string|null
     */
    public function getDetectprotocol()
    {
        return $this->container['detectprotocol'];
    }

    /**
     * Sets detectprotocol
     *
     * @param string|null $detectprotocol Protocols used to detect the server.    ping:PING.    tcp-echo:TCP echo.    udp-echo:UDP echo.
     *
     * @return self
     */
    public function setDetectprotocol($detectprotocol)
    {
        $allowedValues = $this->getDetectprotocolAllowableValues();
        if (!is_null($detectprotocol) && !in_array($detectprotocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'detectprotocol', must be one of '%s'",
                    $detectprotocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['detectprotocol'] = $detectprotocol;

        return $this;
    }

    /**
     * Gets ha_priority
     *
     * @return int|null
     */
    public function getHaPriority()
    {
        return $this->container['ha_priority'];
    }

    /**
     * Sets ha_priority
     *
     * @param int|null $ha_priority HA election priority for the PING server.
     *
     * @return self
     */
    public function setHaPriority($ha_priority)
    {

        if (!is_null($ha_priority) && ($ha_priority > 50)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling SystemInterfaceNameSecondaryip., must be smaller than or equal to 50.');
        }
        if (!is_null($ha_priority) && ($ha_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling SystemInterfaceNameSecondaryip., must be bigger than or equal to 1.');
        }

        $this->container['ha_priority'] = $ha_priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


