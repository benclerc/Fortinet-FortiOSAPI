<?php
/**
 * InlineObject301
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject301 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject301 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_301';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'reply_to' => 'string',
        'server' => 'string',
        'port' => 'int',
        'source_ip' => 'string',
        'source_ip6' => 'string',
        'authenticate' => 'string',
        'validate_server' => 'string',
        'username' => 'string',
        'password' => 'string',
        'security' => 'string',
        'ssl_min_proto_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'reply_to' => null,
        'server' => null,
        'port' => null,
        'source_ip' => 'ipv4',
        'source_ip6' => 'ipv6',
        'authenticate' => null,
        'validate_server' => null,
        'username' => null,
        'password' => 'password',
        'security' => null,
        'ssl_min_proto_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'reply_to' => 'reply-to',
        'server' => 'server',
        'port' => 'port',
        'source_ip' => 'source-ip',
        'source_ip6' => 'source-ip6',
        'authenticate' => 'authenticate',
        'validate_server' => 'validate-server',
        'username' => 'username',
        'password' => 'password',
        'security' => 'security',
        'ssl_min_proto_version' => 'ssl-min-proto-version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'reply_to' => 'setReplyTo',
        'server' => 'setServer',
        'port' => 'setPort',
        'source_ip' => 'setSourceIp',
        'source_ip6' => 'setSourceIp6',
        'authenticate' => 'setAuthenticate',
        'validate_server' => 'setValidateServer',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'security' => 'setSecurity',
        'ssl_min_proto_version' => 'setSslMinProtoVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'reply_to' => 'getReplyTo',
        'server' => 'getServer',
        'port' => 'getPort',
        'source_ip' => 'getSourceIp',
        'source_ip6' => 'getSourceIp6',
        'authenticate' => 'getAuthenticate',
        'validate_server' => 'getValidateServer',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'security' => 'getSecurity',
        'ssl_min_proto_version' => 'getSslMinProtoVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CUSTOM = 'custom';
    const AUTHENTICATE_ENABLE = 'enable';
    const AUTHENTICATE_DISABLE = 'disable';
    const VALIDATE_SERVER_ENABLE = 'enable';
    const VALIDATE_SERVER_DISABLE = 'disable';
    const SECURITY_NONE = 'none';
    const SECURITY_STARTTLS = 'starttls';
    const SECURITY_SMTPS = 'smtps';
    const SSL_MIN_PROTO_VERSION__DEFAULT = 'default';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticateAllowableValues()
    {
        return [
            self::AUTHENTICATE_ENABLE,
            self::AUTHENTICATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidateServerAllowableValues()
    {
        return [
            self::VALIDATE_SERVER_ENABLE,
            self::VALIDATE_SERVER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityAllowableValues()
    {
        return [
            self::SECURITY_NONE,
            self::SECURITY_STARTTLS,
            self::SECURITY_SMTPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION__DEFAULT,
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['reply_to'] = $data['reply_to'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['source_ip6'] = $data['source_ip6'] ?? null;
        $this->container['authenticate'] = $data['authenticate'] ?? null;
        $this->container['validate_server'] = $data['validate_server'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['security'] = $data['security'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reply_to']) && (mb_strlen($this->container['reply_to']) > 63)) {
            $invalidProperties[] = "invalid value for 'reply_to', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthenticateAllowableValues();
        if (!is_null($this->container['authenticate']) && !in_array($this->container['authenticate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authenticate', must be one of '%s'",
                $this->container['authenticate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValidateServerAllowableValues();
        if (!is_null($this->container['validate_server']) && !in_array($this->container['validate_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'validate_server', must be one of '%s'",
                $this->container['validate_server'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 63)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($this->container['security']) && !in_array($this->container['security'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security', must be one of '%s'",
                $this->container['security'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Use FortiGuard Message service or custom email server.    custom:Use custom email server.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return string|null
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param string|null $reply_to Reply-To email address.
     *
     * @return self
     */
    public function setReplyTo($reply_to)
    {
        if (!is_null($reply_to) && (mb_strlen($reply_to) > 63)) {
            throw new \InvalidArgumentException('invalid length for $reply_to when calling InlineObject301., must be smaller than or equal to 63.');
        }

        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server SMTP server IP address or hostname.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject301., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port SMTP server port.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject301., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject301., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip SMTP server IPv4 source IP.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip6
     *
     * @return string|null
     */
    public function getSourceIp6()
    {
        return $this->container['source_ip6'];
    }

    /**
     * Sets source_ip6
     *
     * @param string|null $source_ip6 SMTP server IPv6 source IP.
     *
     * @return self
     */
    public function setSourceIp6($source_ip6)
    {
        $this->container['source_ip6'] = $source_ip6;

        return $this;
    }

    /**
     * Gets authenticate
     *
     * @return string|null
     */
    public function getAuthenticate()
    {
        return $this->container['authenticate'];
    }

    /**
     * Sets authenticate
     *
     * @param string|null $authenticate Enable/disable authentication.    enable:Enable authentication.    disable:Disable authentication.
     *
     * @return self
     */
    public function setAuthenticate($authenticate)
    {
        $allowedValues = $this->getAuthenticateAllowableValues();
        if (!is_null($authenticate) && !in_array($authenticate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authenticate', must be one of '%s'",
                    $authenticate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authenticate'] = $authenticate;

        return $this;
    }

    /**
     * Gets validate_server
     *
     * @return string|null
     */
    public function getValidateServer()
    {
        return $this->container['validate_server'];
    }

    /**
     * Sets validate_server
     *
     * @param string|null $validate_server Enable/disable validation of server certificate.    enable:Enable validation of server certificate.    disable:Disable validation of server certificate.
     *
     * @return self
     */
    public function setValidateServer($validate_server)
    {
        $allowedValues = $this->getValidateServerAllowableValues();
        if (!is_null($validate_server) && !in_array($validate_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'validate_server', must be one of '%s'",
                    $validate_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['validate_server'] = $validate_server;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username SMTP server user name for authentication.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject301., must be smaller than or equal to 63.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password SMTP server user password for authentication.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string|null $security Connection security used by the email server.    none:None.    starttls:STARTTLS.    smtps:SSL/TLS.
     *
     * @return self
     */
    public function setSecurity($security)
    {
        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($security) && !in_array($security, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security', must be one of '%s'",
                    $security,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).    default:Follow system global setting.    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


