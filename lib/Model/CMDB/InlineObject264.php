<?php
/**
 * InlineObject264
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject264 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject264 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_264';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'scope' => 'string',
        'comments' => 'string',
        'secfabgrp' => 'string',
        'ftviewgrp' => 'string',
        'authgrp' => 'string',
        'sysgrp' => 'string',
        'netgrp' => 'string',
        'loggrp' => 'string',
        'fwgrp' => 'string',
        'vpngrp' => 'string',
        'utmgrp' => 'string',
        'wanoptgrp' => 'string',
        'wifi' => 'string',
        'netgrp_permission' => '\Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameNetgrpPermission[]',
        'sysgrp_permission' => '\Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameSysgrpPermission[]',
        'fwgrp_permission' => '\Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameFwgrpPermission[]',
        'loggrp_permission' => '\Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameLoggrpPermission[]',
        'utmgrp_permission' => '\Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameUtmgrpPermission[]',
        'admintimeout_override' => 'string',
        'admintimeout' => 'int',
        'system_diagnostics' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'scope' => null,
        'comments' => null,
        'secfabgrp' => null,
        'ftviewgrp' => null,
        'authgrp' => null,
        'sysgrp' => null,
        'netgrp' => null,
        'loggrp' => null,
        'fwgrp' => null,
        'vpngrp' => null,
        'utmgrp' => null,
        'wanoptgrp' => null,
        'wifi' => null,
        'netgrp_permission' => null,
        'sysgrp_permission' => null,
        'fwgrp_permission' => null,
        'loggrp_permission' => null,
        'utmgrp_permission' => null,
        'admintimeout_override' => null,
        'admintimeout' => null,
        'system_diagnostics' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'scope' => 'scope',
        'comments' => 'comments',
        'secfabgrp' => 'secfabgrp',
        'ftviewgrp' => 'ftviewgrp',
        'authgrp' => 'authgrp',
        'sysgrp' => 'sysgrp',
        'netgrp' => 'netgrp',
        'loggrp' => 'loggrp',
        'fwgrp' => 'fwgrp',
        'vpngrp' => 'vpngrp',
        'utmgrp' => 'utmgrp',
        'wanoptgrp' => 'wanoptgrp',
        'wifi' => 'wifi',
        'netgrp_permission' => 'netgrp-permission',
        'sysgrp_permission' => 'sysgrp-permission',
        'fwgrp_permission' => 'fwgrp-permission',
        'loggrp_permission' => 'loggrp-permission',
        'utmgrp_permission' => 'utmgrp-permission',
        'admintimeout_override' => 'admintimeout-override',
        'admintimeout' => 'admintimeout',
        'system_diagnostics' => 'system-diagnostics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'scope' => 'setScope',
        'comments' => 'setComments',
        'secfabgrp' => 'setSecfabgrp',
        'ftviewgrp' => 'setFtviewgrp',
        'authgrp' => 'setAuthgrp',
        'sysgrp' => 'setSysgrp',
        'netgrp' => 'setNetgrp',
        'loggrp' => 'setLoggrp',
        'fwgrp' => 'setFwgrp',
        'vpngrp' => 'setVpngrp',
        'utmgrp' => 'setUtmgrp',
        'wanoptgrp' => 'setWanoptgrp',
        'wifi' => 'setWifi',
        'netgrp_permission' => 'setNetgrpPermission',
        'sysgrp_permission' => 'setSysgrpPermission',
        'fwgrp_permission' => 'setFwgrpPermission',
        'loggrp_permission' => 'setLoggrpPermission',
        'utmgrp_permission' => 'setUtmgrpPermission',
        'admintimeout_override' => 'setAdmintimeoutOverride',
        'admintimeout' => 'setAdmintimeout',
        'system_diagnostics' => 'setSystemDiagnostics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'scope' => 'getScope',
        'comments' => 'getComments',
        'secfabgrp' => 'getSecfabgrp',
        'ftviewgrp' => 'getFtviewgrp',
        'authgrp' => 'getAuthgrp',
        'sysgrp' => 'getSysgrp',
        'netgrp' => 'getNetgrp',
        'loggrp' => 'getLoggrp',
        'fwgrp' => 'getFwgrp',
        'vpngrp' => 'getVpngrp',
        'utmgrp' => 'getUtmgrp',
        'wanoptgrp' => 'getWanoptgrp',
        'wifi' => 'getWifi',
        'netgrp_permission' => 'getNetgrpPermission',
        'sysgrp_permission' => 'getSysgrpPermission',
        'fwgrp_permission' => 'getFwgrpPermission',
        'loggrp_permission' => 'getLoggrpPermission',
        'utmgrp_permission' => 'getUtmgrpPermission',
        'admintimeout_override' => 'getAdmintimeoutOverride',
        'admintimeout' => 'getAdmintimeout',
        'system_diagnostics' => 'getSystemDiagnostics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SCOPE_VDOM = 'vdom';
    const SCOPE__GLOBAL = 'global';
    const SECFABGRP_NONE = 'none';
    const SECFABGRP_READ = 'read';
    const SECFABGRP_READ_WRITE = 'read-write';
    const FTVIEWGRP_NONE = 'none';
    const FTVIEWGRP_READ = 'read';
    const FTVIEWGRP_READ_WRITE = 'read-write';
    const AUTHGRP_NONE = 'none';
    const AUTHGRP_READ = 'read';
    const AUTHGRP_READ_WRITE = 'read-write';
    const SYSGRP_NONE = 'none';
    const SYSGRP_READ = 'read';
    const SYSGRP_READ_WRITE = 'read-write';
    const SYSGRP_CUSTOM = 'custom';
    const NETGRP_NONE = 'none';
    const NETGRP_READ = 'read';
    const NETGRP_READ_WRITE = 'read-write';
    const NETGRP_CUSTOM = 'custom';
    const LOGGRP_NONE = 'none';
    const LOGGRP_READ = 'read';
    const LOGGRP_READ_WRITE = 'read-write';
    const LOGGRP_CUSTOM = 'custom';
    const FWGRP_NONE = 'none';
    const FWGRP_READ = 'read';
    const FWGRP_READ_WRITE = 'read-write';
    const FWGRP_CUSTOM = 'custom';
    const VPNGRP_NONE = 'none';
    const VPNGRP_READ = 'read';
    const VPNGRP_READ_WRITE = 'read-write';
    const UTMGRP_NONE = 'none';
    const UTMGRP_READ = 'read';
    const UTMGRP_READ_WRITE = 'read-write';
    const UTMGRP_CUSTOM = 'custom';
    const WANOPTGRP_NONE = 'none';
    const WANOPTGRP_READ = 'read';
    const WANOPTGRP_READ_WRITE = 'read-write';
    const WIFI_NONE = 'none';
    const WIFI_READ = 'read';
    const WIFI_READ_WRITE = 'read-write';
    const ADMINTIMEOUT_OVERRIDE_ENABLE = 'enable';
    const ADMINTIMEOUT_OVERRIDE_DISABLE = 'disable';
    const SYSTEM_DIAGNOSTICS_ENABLE = 'enable';
    const SYSTEM_DIAGNOSTICS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_VDOM,
            self::SCOPE__GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecfabgrpAllowableValues()
    {
        return [
            self::SECFABGRP_NONE,
            self::SECFABGRP_READ,
            self::SECFABGRP_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtviewgrpAllowableValues()
    {
        return [
            self::FTVIEWGRP_NONE,
            self::FTVIEWGRP_READ,
            self::FTVIEWGRP_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthgrpAllowableValues()
    {
        return [
            self::AUTHGRP_NONE,
            self::AUTHGRP_READ,
            self::AUTHGRP_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSysgrpAllowableValues()
    {
        return [
            self::SYSGRP_NONE,
            self::SYSGRP_READ,
            self::SYSGRP_READ_WRITE,
            self::SYSGRP_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetgrpAllowableValues()
    {
        return [
            self::NETGRP_NONE,
            self::NETGRP_READ,
            self::NETGRP_READ_WRITE,
            self::NETGRP_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoggrpAllowableValues()
    {
        return [
            self::LOGGRP_NONE,
            self::LOGGRP_READ,
            self::LOGGRP_READ_WRITE,
            self::LOGGRP_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFwgrpAllowableValues()
    {
        return [
            self::FWGRP_NONE,
            self::FWGRP_READ,
            self::FWGRP_READ_WRITE,
            self::FWGRP_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVpngrpAllowableValues()
    {
        return [
            self::VPNGRP_NONE,
            self::VPNGRP_READ,
            self::VPNGRP_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUtmgrpAllowableValues()
    {
        return [
            self::UTMGRP_NONE,
            self::UTMGRP_READ,
            self::UTMGRP_READ_WRITE,
            self::UTMGRP_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWanoptgrpAllowableValues()
    {
        return [
            self::WANOPTGRP_NONE,
            self::WANOPTGRP_READ,
            self::WANOPTGRP_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWifiAllowableValues()
    {
        return [
            self::WIFI_NONE,
            self::WIFI_READ,
            self::WIFI_READ_WRITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdmintimeoutOverrideAllowableValues()
    {
        return [
            self::ADMINTIMEOUT_OVERRIDE_ENABLE,
            self::ADMINTIMEOUT_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemDiagnosticsAllowableValues()
    {
        return [
            self::SYSTEM_DIAGNOSTICS_ENABLE,
            self::SYSTEM_DIAGNOSTICS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['scope'] = $data['scope'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['secfabgrp'] = $data['secfabgrp'] ?? null;
        $this->container['ftviewgrp'] = $data['ftviewgrp'] ?? null;
        $this->container['authgrp'] = $data['authgrp'] ?? null;
        $this->container['sysgrp'] = $data['sysgrp'] ?? null;
        $this->container['netgrp'] = $data['netgrp'] ?? null;
        $this->container['loggrp'] = $data['loggrp'] ?? null;
        $this->container['fwgrp'] = $data['fwgrp'] ?? null;
        $this->container['vpngrp'] = $data['vpngrp'] ?? null;
        $this->container['utmgrp'] = $data['utmgrp'] ?? null;
        $this->container['wanoptgrp'] = $data['wanoptgrp'] ?? null;
        $this->container['wifi'] = $data['wifi'] ?? null;
        $this->container['netgrp_permission'] = $data['netgrp_permission'] ?? null;
        $this->container['sysgrp_permission'] = $data['sysgrp_permission'] ?? null;
        $this->container['fwgrp_permission'] = $data['fwgrp_permission'] ?? null;
        $this->container['loggrp_permission'] = $data['loggrp_permission'] ?? null;
        $this->container['utmgrp_permission'] = $data['utmgrp_permission'] ?? null;
        $this->container['admintimeout_override'] = $data['admintimeout_override'] ?? null;
        $this->container['admintimeout'] = $data['admintimeout'] ?? null;
        $this->container['system_diagnostics'] = $data['system_diagnostics'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scope', must be one of '%s'",
                $this->container['scope'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getSecfabgrpAllowableValues();
        if (!is_null($this->container['secfabgrp']) && !in_array($this->container['secfabgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'secfabgrp', must be one of '%s'",
                $this->container['secfabgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFtviewgrpAllowableValues();
        if (!is_null($this->container['ftviewgrp']) && !in_array($this->container['ftviewgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ftviewgrp', must be one of '%s'",
                $this->container['ftviewgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthgrpAllowableValues();
        if (!is_null($this->container['authgrp']) && !in_array($this->container['authgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authgrp', must be one of '%s'",
                $this->container['authgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSysgrpAllowableValues();
        if (!is_null($this->container['sysgrp']) && !in_array($this->container['sysgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sysgrp', must be one of '%s'",
                $this->container['sysgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetgrpAllowableValues();
        if (!is_null($this->container['netgrp']) && !in_array($this->container['netgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'netgrp', must be one of '%s'",
                $this->container['netgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoggrpAllowableValues();
        if (!is_null($this->container['loggrp']) && !in_array($this->container['loggrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'loggrp', must be one of '%s'",
                $this->container['loggrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFwgrpAllowableValues();
        if (!is_null($this->container['fwgrp']) && !in_array($this->container['fwgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fwgrp', must be one of '%s'",
                $this->container['fwgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVpngrpAllowableValues();
        if (!is_null($this->container['vpngrp']) && !in_array($this->container['vpngrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vpngrp', must be one of '%s'",
                $this->container['vpngrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUtmgrpAllowableValues();
        if (!is_null($this->container['utmgrp']) && !in_array($this->container['utmgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'utmgrp', must be one of '%s'",
                $this->container['utmgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWanoptgrpAllowableValues();
        if (!is_null($this->container['wanoptgrp']) && !in_array($this->container['wanoptgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wanoptgrp', must be one of '%s'",
                $this->container['wanoptgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWifiAllowableValues();
        if (!is_null($this->container['wifi']) && !in_array($this->container['wifi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wifi', must be one of '%s'",
                $this->container['wifi'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['netgrp_permission']) && (count($this->container['netgrp_permission']) > 0)) {
            $invalidProperties[] = "invalid value for 'netgrp_permission', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['sysgrp_permission']) && (count($this->container['sysgrp_permission']) > 0)) {
            $invalidProperties[] = "invalid value for 'sysgrp_permission', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['fwgrp_permission']) && (count($this->container['fwgrp_permission']) > 0)) {
            $invalidProperties[] = "invalid value for 'fwgrp_permission', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['loggrp_permission']) && (count($this->container['loggrp_permission']) > 0)) {
            $invalidProperties[] = "invalid value for 'loggrp_permission', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['utmgrp_permission']) && (count($this->container['utmgrp_permission']) > 0)) {
            $invalidProperties[] = "invalid value for 'utmgrp_permission', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAdmintimeoutOverrideAllowableValues();
        if (!is_null($this->container['admintimeout_override']) && !in_array($this->container['admintimeout_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admintimeout_override', must be one of '%s'",
                $this->container['admintimeout_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admintimeout']) && ($this->container['admintimeout'] > 480)) {
            $invalidProperties[] = "invalid value for 'admintimeout', must be smaller than or equal to 480.";
        }

        if (!is_null($this->container['admintimeout']) && ($this->container['admintimeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'admintimeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSystemDiagnosticsAllowableValues();
        if (!is_null($this->container['system_diagnostics']) && !in_array($this->container['system_diagnostics'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'system_diagnostics', must be one of '%s'",
                $this->container['system_diagnostics'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject264., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope Scope of admin access: global or specific VDOM(s).    vdom:VDOM access.    global:Global access.
     *
     * @return self
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scope', must be one of '%s'",
                    $scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject264., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets secfabgrp
     *
     * @return string|null
     */
    public function getSecfabgrp()
    {
        return $this->container['secfabgrp'];
    }

    /**
     * Sets secfabgrp
     *
     * @param string|null $secfabgrp Security Fabric.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setSecfabgrp($secfabgrp)
    {
        $allowedValues = $this->getSecfabgrpAllowableValues();
        if (!is_null($secfabgrp) && !in_array($secfabgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'secfabgrp', must be one of '%s'",
                    $secfabgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secfabgrp'] = $secfabgrp;

        return $this;
    }

    /**
     * Gets ftviewgrp
     *
     * @return string|null
     */
    public function getFtviewgrp()
    {
        return $this->container['ftviewgrp'];
    }

    /**
     * Sets ftviewgrp
     *
     * @param string|null $ftviewgrp FortiView.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setFtviewgrp($ftviewgrp)
    {
        $allowedValues = $this->getFtviewgrpAllowableValues();
        if (!is_null($ftviewgrp) && !in_array($ftviewgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ftviewgrp', must be one of '%s'",
                    $ftviewgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ftviewgrp'] = $ftviewgrp;

        return $this;
    }

    /**
     * Gets authgrp
     *
     * @return string|null
     */
    public function getAuthgrp()
    {
        return $this->container['authgrp'];
    }

    /**
     * Sets authgrp
     *
     * @param string|null $authgrp Administrator access to Users and Devices.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setAuthgrp($authgrp)
    {
        $allowedValues = $this->getAuthgrpAllowableValues();
        if (!is_null($authgrp) && !in_array($authgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authgrp', must be one of '%s'",
                    $authgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authgrp'] = $authgrp;

        return $this;
    }

    /**
     * Gets sysgrp
     *
     * @return string|null
     */
    public function getSysgrp()
    {
        return $this->container['sysgrp'];
    }

    /**
     * Sets sysgrp
     *
     * @param string|null $sysgrp System Configuration.    none:No access.    read:Read access.    read-write:Read/write access.    custom:Customized access.
     *
     * @return self
     */
    public function setSysgrp($sysgrp)
    {
        $allowedValues = $this->getSysgrpAllowableValues();
        if (!is_null($sysgrp) && !in_array($sysgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sysgrp', must be one of '%s'",
                    $sysgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sysgrp'] = $sysgrp;

        return $this;
    }

    /**
     * Gets netgrp
     *
     * @return string|null
     */
    public function getNetgrp()
    {
        return $this->container['netgrp'];
    }

    /**
     * Sets netgrp
     *
     * @param string|null $netgrp Network Configuration.    none:No access.    read:Read access.    read-write:Read/write access.    custom:Customized access.
     *
     * @return self
     */
    public function setNetgrp($netgrp)
    {
        $allowedValues = $this->getNetgrpAllowableValues();
        if (!is_null($netgrp) && !in_array($netgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'netgrp', must be one of '%s'",
                    $netgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['netgrp'] = $netgrp;

        return $this;
    }

    /**
     * Gets loggrp
     *
     * @return string|null
     */
    public function getLoggrp()
    {
        return $this->container['loggrp'];
    }

    /**
     * Sets loggrp
     *
     * @param string|null $loggrp Administrator access to Logging and Reporting including viewing log messages.    none:No access.    read:Read access.    read-write:Read/write access.    custom:Customized access.
     *
     * @return self
     */
    public function setLoggrp($loggrp)
    {
        $allowedValues = $this->getLoggrpAllowableValues();
        if (!is_null($loggrp) && !in_array($loggrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'loggrp', must be one of '%s'",
                    $loggrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loggrp'] = $loggrp;

        return $this;
    }

    /**
     * Gets fwgrp
     *
     * @return string|null
     */
    public function getFwgrp()
    {
        return $this->container['fwgrp'];
    }

    /**
     * Sets fwgrp
     *
     * @param string|null $fwgrp Administrator access to the Firewall configuration.    none:No access.    read:Read access.    read-write:Read/write access.    custom:Customized access.
     *
     * @return self
     */
    public function setFwgrp($fwgrp)
    {
        $allowedValues = $this->getFwgrpAllowableValues();
        if (!is_null($fwgrp) && !in_array($fwgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fwgrp', must be one of '%s'",
                    $fwgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fwgrp'] = $fwgrp;

        return $this;
    }

    /**
     * Gets vpngrp
     *
     * @return string|null
     */
    public function getVpngrp()
    {
        return $this->container['vpngrp'];
    }

    /**
     * Sets vpngrp
     *
     * @param string|null $vpngrp Administrator access to IPsec, SSL, PPTP, and L2TP VPN.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setVpngrp($vpngrp)
    {
        $allowedValues = $this->getVpngrpAllowableValues();
        if (!is_null($vpngrp) && !in_array($vpngrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vpngrp', must be one of '%s'",
                    $vpngrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vpngrp'] = $vpngrp;

        return $this;
    }

    /**
     * Gets utmgrp
     *
     * @return string|null
     */
    public function getUtmgrp()
    {
        return $this->container['utmgrp'];
    }

    /**
     * Sets utmgrp
     *
     * @param string|null $utmgrp Administrator access to Security Profiles.    none:No access.    read:Read access.    read-write:Read/write access.    custom:Customized access.
     *
     * @return self
     */
    public function setUtmgrp($utmgrp)
    {
        $allowedValues = $this->getUtmgrpAllowableValues();
        if (!is_null($utmgrp) && !in_array($utmgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'utmgrp', must be one of '%s'",
                    $utmgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['utmgrp'] = $utmgrp;

        return $this;
    }

    /**
     * Gets wanoptgrp
     *
     * @return string|null
     */
    public function getWanoptgrp()
    {
        return $this->container['wanoptgrp'];
    }

    /**
     * Sets wanoptgrp
     *
     * @param string|null $wanoptgrp Administrator access to WAN Opt & Cache.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setWanoptgrp($wanoptgrp)
    {
        $allowedValues = $this->getWanoptgrpAllowableValues();
        if (!is_null($wanoptgrp) && !in_array($wanoptgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wanoptgrp', must be one of '%s'",
                    $wanoptgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wanoptgrp'] = $wanoptgrp;

        return $this;
    }

    /**
     * Gets wifi
     *
     * @return string|null
     */
    public function getWifi()
    {
        return $this->container['wifi'];
    }

    /**
     * Sets wifi
     *
     * @param string|null $wifi Administrator access to the WiFi controller and Switch controller.    none:No access.    read:Read access.    read-write:Read/write access.
     *
     * @return self
     */
    public function setWifi($wifi)
    {
        $allowedValues = $this->getWifiAllowableValues();
        if (!is_null($wifi) && !in_array($wifi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wifi', must be one of '%s'",
                    $wifi,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wifi'] = $wifi;

        return $this;
    }

    /**
     * Gets netgrp_permission
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameNetgrpPermission[]|null
     */
    public function getNetgrpPermission()
    {
        return $this->container['netgrp_permission'];
    }

    /**
     * Sets netgrp_permission
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameNetgrpPermission[]|null $netgrp_permission Custom network permission.
     *
     * @return self
     */
    public function setNetgrpPermission($netgrp_permission)
    {

        if (!is_null($netgrp_permission) && (count($netgrp_permission) > 0)) {
            throw new \InvalidArgumentException('invalid value for $netgrp_permission when calling InlineObject264., number of items must be less than or equal to 0.');
        }
        $this->container['netgrp_permission'] = $netgrp_permission;

        return $this;
    }

    /**
     * Gets sysgrp_permission
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameSysgrpPermission[]|null
     */
    public function getSysgrpPermission()
    {
        return $this->container['sysgrp_permission'];
    }

    /**
     * Sets sysgrp_permission
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameSysgrpPermission[]|null $sysgrp_permission Custom system permission.
     *
     * @return self
     */
    public function setSysgrpPermission($sysgrp_permission)
    {

        if (!is_null($sysgrp_permission) && (count($sysgrp_permission) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sysgrp_permission when calling InlineObject264., number of items must be less than or equal to 0.');
        }
        $this->container['sysgrp_permission'] = $sysgrp_permission;

        return $this;
    }

    /**
     * Gets fwgrp_permission
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameFwgrpPermission[]|null
     */
    public function getFwgrpPermission()
    {
        return $this->container['fwgrp_permission'];
    }

    /**
     * Sets fwgrp_permission
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameFwgrpPermission[]|null $fwgrp_permission Custom firewall permission.
     *
     * @return self
     */
    public function setFwgrpPermission($fwgrp_permission)
    {

        if (!is_null($fwgrp_permission) && (count($fwgrp_permission) > 0)) {
            throw new \InvalidArgumentException('invalid value for $fwgrp_permission when calling InlineObject264., number of items must be less than or equal to 0.');
        }
        $this->container['fwgrp_permission'] = $fwgrp_permission;

        return $this;
    }

    /**
     * Gets loggrp_permission
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameLoggrpPermission[]|null
     */
    public function getLoggrpPermission()
    {
        return $this->container['loggrp_permission'];
    }

    /**
     * Sets loggrp_permission
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameLoggrpPermission[]|null $loggrp_permission Custom Log & Report permission.
     *
     * @return self
     */
    public function setLoggrpPermission($loggrp_permission)
    {

        if (!is_null($loggrp_permission) && (count($loggrp_permission) > 0)) {
            throw new \InvalidArgumentException('invalid value for $loggrp_permission when calling InlineObject264., number of items must be less than or equal to 0.');
        }
        $this->container['loggrp_permission'] = $loggrp_permission;

        return $this;
    }

    /**
     * Gets utmgrp_permission
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameUtmgrpPermission[]|null
     */
    public function getUtmgrpPermission()
    {
        return $this->container['utmgrp_permission'];
    }

    /**
     * Sets utmgrp_permission
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAccprofileNameUtmgrpPermission[]|null $utmgrp_permission Custom Security Profile permissions.
     *
     * @return self
     */
    public function setUtmgrpPermission($utmgrp_permission)
    {

        if (!is_null($utmgrp_permission) && (count($utmgrp_permission) > 0)) {
            throw new \InvalidArgumentException('invalid value for $utmgrp_permission when calling InlineObject264., number of items must be less than or equal to 0.');
        }
        $this->container['utmgrp_permission'] = $utmgrp_permission;

        return $this;
    }

    /**
     * Gets admintimeout_override
     *
     * @return string|null
     */
    public function getAdmintimeoutOverride()
    {
        return $this->container['admintimeout_override'];
    }

    /**
     * Sets admintimeout_override
     *
     * @param string|null $admintimeout_override Enable/disable overriding the global administrator idle timeout.    enable:Enable overriding the global administrator idle timeout.    disable:Disable overriding the global administrator idle timeout.
     *
     * @return self
     */
    public function setAdmintimeoutOverride($admintimeout_override)
    {
        $allowedValues = $this->getAdmintimeoutOverrideAllowableValues();
        if (!is_null($admintimeout_override) && !in_array($admintimeout_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admintimeout_override', must be one of '%s'",
                    $admintimeout_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admintimeout_override'] = $admintimeout_override;

        return $this;
    }

    /**
     * Gets admintimeout
     *
     * @return int|null
     */
    public function getAdmintimeout()
    {
        return $this->container['admintimeout'];
    }

    /**
     * Sets admintimeout
     *
     * @param int|null $admintimeout Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
     *
     * @return self
     */
    public function setAdmintimeout($admintimeout)
    {

        if (!is_null($admintimeout) && ($admintimeout > 480)) {
            throw new \InvalidArgumentException('invalid value for $admintimeout when calling InlineObject264., must be smaller than or equal to 480.');
        }
        if (!is_null($admintimeout) && ($admintimeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $admintimeout when calling InlineObject264., must be bigger than or equal to 1.');
        }

        $this->container['admintimeout'] = $admintimeout;

        return $this;
    }

    /**
     * Gets system_diagnostics
     *
     * @return string|null
     */
    public function getSystemDiagnostics()
    {
        return $this->container['system_diagnostics'];
    }

    /**
     * Sets system_diagnostics
     *
     * @param string|null $system_diagnostics Enable/disable permission to run system diagnostic commands.    enable:Enable permission to run system diagnostic commands.    disable:Disable permission to run system diagnostic commands.
     *
     * @return self
     */
    public function setSystemDiagnostics($system_diagnostics)
    {
        $allowedValues = $this->getSystemDiagnosticsAllowableValues();
        if (!is_null($system_diagnostics) && !in_array($system_diagnostics, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'system_diagnostics', must be one of '%s'",
                    $system_diagnostics,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['system_diagnostics'] = $system_diagnostics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


