<?php
/**
 * InlineObject437
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject437 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject437 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_437';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'category' => 'string',
        'status' => 'string',
        'mac' => 'string',
        'hw_vendor' => 'string',
        'type' => 'string',
        'family' => 'string',
        'os' => 'string',
        'hw_version' => 'string',
        'sw_version' => 'string',
        'host' => 'string',
        'user' => 'string',
        'src' => 'string',
        'user_group' => 'string',
        'ems_tag' => 'string',
        'switch_fortilink' => 'string',
        'switch_scope' => '\Fortigate\FortiOS\Model\CMDB\UserNacPolicyNameSwitchScope[]',
        'switch_auto_auth' => 'string',
        'switch_port_policy' => 'string',
        'switch_mac_policy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'category' => null,
        'status' => null,
        'mac' => null,
        'hw_vendor' => null,
        'type' => null,
        'family' => null,
        'os' => null,
        'hw_version' => null,
        'sw_version' => null,
        'host' => null,
        'user' => null,
        'src' => null,
        'user_group' => null,
        'ems_tag' => null,
        'switch_fortilink' => null,
        'switch_scope' => null,
        'switch_auto_auth' => null,
        'switch_port_policy' => null,
        'switch_mac_policy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'category' => 'category',
        'status' => 'status',
        'mac' => 'mac',
        'hw_vendor' => 'hw-vendor',
        'type' => 'type',
        'family' => 'family',
        'os' => 'os',
        'hw_version' => 'hw-version',
        'sw_version' => 'sw-version',
        'host' => 'host',
        'user' => 'user',
        'src' => 'src',
        'user_group' => 'user-group',
        'ems_tag' => 'ems-tag',
        'switch_fortilink' => 'switch-fortilink',
        'switch_scope' => 'switch-scope',
        'switch_auto_auth' => 'switch-auto-auth',
        'switch_port_policy' => 'switch-port-policy',
        'switch_mac_policy' => 'switch-mac-policy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'status' => 'setStatus',
        'mac' => 'setMac',
        'hw_vendor' => 'setHwVendor',
        'type' => 'setType',
        'family' => 'setFamily',
        'os' => 'setOs',
        'hw_version' => 'setHwVersion',
        'sw_version' => 'setSwVersion',
        'host' => 'setHost',
        'user' => 'setUser',
        'src' => 'setSrc',
        'user_group' => 'setUserGroup',
        'ems_tag' => 'setEmsTag',
        'switch_fortilink' => 'setSwitchFortilink',
        'switch_scope' => 'setSwitchScope',
        'switch_auto_auth' => 'setSwitchAutoAuth',
        'switch_port_policy' => 'setSwitchPortPolicy',
        'switch_mac_policy' => 'setSwitchMacPolicy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'status' => 'getStatus',
        'mac' => 'getMac',
        'hw_vendor' => 'getHwVendor',
        'type' => 'getType',
        'family' => 'getFamily',
        'os' => 'getOs',
        'hw_version' => 'getHwVersion',
        'sw_version' => 'getSwVersion',
        'host' => 'getHost',
        'user' => 'getUser',
        'src' => 'getSrc',
        'user_group' => 'getUserGroup',
        'ems_tag' => 'getEmsTag',
        'switch_fortilink' => 'getSwitchFortilink',
        'switch_scope' => 'getSwitchScope',
        'switch_auto_auth' => 'getSwitchAutoAuth',
        'switch_port_policy' => 'getSwitchPortPolicy',
        'switch_mac_policy' => 'getSwitchMacPolicy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CATEGORY_DEVICE = 'device';
    const CATEGORY_FIREWALL_USER = 'firewall-user';
    const CATEGORY_EMS_TAG = 'ems-tag';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const SWITCH_AUTO_AUTH__GLOBAL = 'global';
    const SWITCH_AUTO_AUTH_DISABLE = 'disable';
    const SWITCH_AUTO_AUTH_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_DEVICE,
            self::CATEGORY_FIREWALL_USER,
            self::CATEGORY_EMS_TAG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchAutoAuthAllowableValues()
    {
        return [
            self::SWITCH_AUTO_AUTH__GLOBAL,
            self::SWITCH_AUTO_AUTH_DISABLE,
            self::SWITCH_AUTO_AUTH_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['mac'] = $data['mac'] ?? null;
        $this->container['hw_vendor'] = $data['hw_vendor'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['family'] = $data['family'] ?? null;
        $this->container['os'] = $data['os'] ?? null;
        $this->container['hw_version'] = $data['hw_version'] ?? null;
        $this->container['sw_version'] = $data['sw_version'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['src'] = $data['src'] ?? null;
        $this->container['user_group'] = $data['user_group'] ?? null;
        $this->container['ems_tag'] = $data['ems_tag'] ?? null;
        $this->container['switch_fortilink'] = $data['switch_fortilink'] ?? null;
        $this->container['switch_scope'] = $data['switch_scope'] ?? null;
        $this->container['switch_auto_auth'] = $data['switch_auto_auth'] ?? null;
        $this->container['switch_port_policy'] = $data['switch_port_policy'] ?? null;
        $this->container['switch_mac_policy'] = $data['switch_mac_policy'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac']) && (mb_strlen($this->container['mac']) > 17)) {
            $invalidProperties[] = "invalid value for 'mac', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['hw_vendor']) && (mb_strlen($this->container['hw_vendor']) > 15)) {
            $invalidProperties[] = "invalid value for 'hw_vendor', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 15)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['family']) && (mb_strlen($this->container['family']) > 31)) {
            $invalidProperties[] = "invalid value for 'family', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['os']) && (mb_strlen($this->container['os']) > 31)) {
            $invalidProperties[] = "invalid value for 'os', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['hw_version']) && (mb_strlen($this->container['hw_version']) > 15)) {
            $invalidProperties[] = "invalid value for 'hw_version', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['sw_version']) && (mb_strlen($this->container['sw_version']) > 15)) {
            $invalidProperties[] = "invalid value for 'sw_version', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['host']) && (mb_strlen($this->container['host']) > 64)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['user']) && (mb_strlen($this->container['user']) > 64)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['src']) && (mb_strlen($this->container['src']) > 15)) {
            $invalidProperties[] = "invalid value for 'src', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['user_group']) && (mb_strlen($this->container['user_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'user_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ems_tag']) && (mb_strlen($this->container['ems_tag']) > 79)) {
            $invalidProperties[] = "invalid value for 'ems_tag', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['switch_fortilink']) && (mb_strlen($this->container['switch_fortilink']) > 15)) {
            $invalidProperties[] = "invalid value for 'switch_fortilink', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['switch_scope']) && (count($this->container['switch_scope']) > 0)) {
            $invalidProperties[] = "invalid value for 'switch_scope', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSwitchAutoAuthAllowableValues();
        if (!is_null($this->container['switch_auto_auth']) && !in_array($this->container['switch_auto_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_auto_auth', must be one of '%s'",
                $this->container['switch_auto_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['switch_port_policy']) && (mb_strlen($this->container['switch_port_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'switch_port_policy', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['switch_mac_policy']) && (mb_strlen($this->container['switch_mac_policy']) > 63)) {
            $invalidProperties[] = "invalid value for 'switch_mac_policy', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name NAC policy name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject437., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for the NAC policy matching pattern.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject437., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category of NAC policy.    device:Device category.    firewall-user:Firewall user category.    ems-tag:EMS Tag category.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable NAC policy.    enable:Enable NAC policy.    disable:Disable NAC policy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac NAC policy matching MAC address.
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (!is_null($mac) && (mb_strlen($mac) > 17)) {
            throw new \InvalidArgumentException('invalid length for $mac when calling InlineObject437., must be smaller than or equal to 17.');
        }

        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets hw_vendor
     *
     * @return string|null
     */
    public function getHwVendor()
    {
        return $this->container['hw_vendor'];
    }

    /**
     * Sets hw_vendor
     *
     * @param string|null $hw_vendor NAC policy matching hardware vendor.
     *
     * @return self
     */
    public function setHwVendor($hw_vendor)
    {
        if (!is_null($hw_vendor) && (mb_strlen($hw_vendor) > 15)) {
            throw new \InvalidArgumentException('invalid length for $hw_vendor when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['hw_vendor'] = $hw_vendor;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type NAC policy matching type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (!is_null($type) && (mb_strlen($type) > 15)) {
            throw new \InvalidArgumentException('invalid length for $type when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets family
     *
     * @return string|null
     */
    public function getFamily()
    {
        return $this->container['family'];
    }

    /**
     * Sets family
     *
     * @param string|null $family NAC policy matching family.
     *
     * @return self
     */
    public function setFamily($family)
    {
        if (!is_null($family) && (mb_strlen($family) > 31)) {
            throw new \InvalidArgumentException('invalid length for $family when calling InlineObject437., must be smaller than or equal to 31.');
        }

        $this->container['family'] = $family;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os NAC policy matching operating system.
     *
     * @return self
     */
    public function setOs($os)
    {
        if (!is_null($os) && (mb_strlen($os) > 31)) {
            throw new \InvalidArgumentException('invalid length for $os when calling InlineObject437., must be smaller than or equal to 31.');
        }

        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets hw_version
     *
     * @return string|null
     */
    public function getHwVersion()
    {
        return $this->container['hw_version'];
    }

    /**
     * Sets hw_version
     *
     * @param string|null $hw_version NAC policy matching hardware version.
     *
     * @return self
     */
    public function setHwVersion($hw_version)
    {
        if (!is_null($hw_version) && (mb_strlen($hw_version) > 15)) {
            throw new \InvalidArgumentException('invalid length for $hw_version when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['hw_version'] = $hw_version;

        return $this;
    }

    /**
     * Gets sw_version
     *
     * @return string|null
     */
    public function getSwVersion()
    {
        return $this->container['sw_version'];
    }

    /**
     * Sets sw_version
     *
     * @param string|null $sw_version NAC policy matching software version.
     *
     * @return self
     */
    public function setSwVersion($sw_version)
    {
        if (!is_null($sw_version) && (mb_strlen($sw_version) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sw_version when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['sw_version'] = $sw_version;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host NAC policy matching host.
     *
     * @return self
     */
    public function setHost($host)
    {
        if (!is_null($host) && (mb_strlen($host) > 64)) {
            throw new \InvalidArgumentException('invalid length for $host when calling InlineObject437., must be smaller than or equal to 64.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user NAC policy matching user.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (!is_null($user) && (mb_strlen($user) > 64)) {
            throw new \InvalidArgumentException('invalid length for $user when calling InlineObject437., must be smaller than or equal to 64.');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string|null
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string|null $src NAC policy matching source.
     *
     * @return self
     */
    public function setSrc($src)
    {
        if (!is_null($src) && (mb_strlen($src) > 15)) {
            throw new \InvalidArgumentException('invalid length for $src when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets user_group
     *
     * @return string|null
     */
    public function getUserGroup()
    {
        return $this->container['user_group'];
    }

    /**
     * Sets user_group
     *
     * @param string|null $user_group NAC policy matching user group.
     *
     * @return self
     */
    public function setUserGroup($user_group)
    {
        if (!is_null($user_group) && (mb_strlen($user_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $user_group when calling InlineObject437., must be smaller than or equal to 35.');
        }

        $this->container['user_group'] = $user_group;

        return $this;
    }

    /**
     * Gets ems_tag
     *
     * @return string|null
     */
    public function getEmsTag()
    {
        return $this->container['ems_tag'];
    }

    /**
     * Sets ems_tag
     *
     * @param string|null $ems_tag NAC policy matching EMS tag.
     *
     * @return self
     */
    public function setEmsTag($ems_tag)
    {
        if (!is_null($ems_tag) && (mb_strlen($ems_tag) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ems_tag when calling InlineObject437., must be smaller than or equal to 79.');
        }

        $this->container['ems_tag'] = $ems_tag;

        return $this;
    }

    /**
     * Gets switch_fortilink
     *
     * @return string|null
     */
    public function getSwitchFortilink()
    {
        return $this->container['switch_fortilink'];
    }

    /**
     * Sets switch_fortilink
     *
     * @param string|null $switch_fortilink FortiLink interface for which this NAC policy belongs to.
     *
     * @return self
     */
    public function setSwitchFortilink($switch_fortilink)
    {
        if (!is_null($switch_fortilink) && (mb_strlen($switch_fortilink) > 15)) {
            throw new \InvalidArgumentException('invalid length for $switch_fortilink when calling InlineObject437., must be smaller than or equal to 15.');
        }

        $this->container['switch_fortilink'] = $switch_fortilink;

        return $this;
    }

    /**
     * Gets switch_scope
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserNacPolicyNameSwitchScope[]|null
     */
    public function getSwitchScope()
    {
        return $this->container['switch_scope'];
    }

    /**
     * Sets switch_scope
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserNacPolicyNameSwitchScope[]|null $switch_scope List of managed FortiSwitches on which NAC policy can be applied.
     *
     * @return self
     */
    public function setSwitchScope($switch_scope)
    {

        if (!is_null($switch_scope) && (count($switch_scope) > 0)) {
            throw new \InvalidArgumentException('invalid value for $switch_scope when calling InlineObject437., number of items must be less than or equal to 0.');
        }
        $this->container['switch_scope'] = $switch_scope;

        return $this;
    }

    /**
     * Gets switch_auto_auth
     *
     * @return string|null
     */
    public function getSwitchAutoAuth()
    {
        return $this->container['switch_auto_auth'];
    }

    /**
     * Sets switch_auto_auth
     *
     * @param string|null $switch_auto_auth NAC device auto authorization when discovered and nac-policy matched.    global:Follows global auto-auth configuration under nac-settings.    disable:Disable NAC device auto authorization.    enable:Enable NAC device auto authorization.
     *
     * @return self
     */
    public function setSwitchAutoAuth($switch_auto_auth)
    {
        $allowedValues = $this->getSwitchAutoAuthAllowableValues();
        if (!is_null($switch_auto_auth) && !in_array($switch_auto_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_auto_auth', must be one of '%s'",
                    $switch_auto_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_auto_auth'] = $switch_auto_auth;

        return $this;
    }

    /**
     * Gets switch_port_policy
     *
     * @return string|null
     */
    public function getSwitchPortPolicy()
    {
        return $this->container['switch_port_policy'];
    }

    /**
     * Sets switch_port_policy
     *
     * @param string|null $switch_port_policy switch-port-policy to be applied on the matched NAC policy.
     *
     * @return self
     */
    public function setSwitchPortPolicy($switch_port_policy)
    {
        if (!is_null($switch_port_policy) && (mb_strlen($switch_port_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $switch_port_policy when calling InlineObject437., must be smaller than or equal to 63.');
        }

        $this->container['switch_port_policy'] = $switch_port_policy;

        return $this;
    }

    /**
     * Gets switch_mac_policy
     *
     * @return string|null
     */
    public function getSwitchMacPolicy()
    {
        return $this->container['switch_mac_policy'];
    }

    /**
     * Sets switch_mac_policy
     *
     * @param string|null $switch_mac_policy switch-mac-policy to be applied on the matched NAC policy.
     *
     * @return self
     */
    public function setSwitchMacPolicy($switch_mac_policy)
    {
        if (!is_null($switch_mac_policy) && (mb_strlen($switch_mac_policy) > 63)) {
            throw new \InvalidArgumentException('invalid length for $switch_mac_policy when calling InlineObject437., must be smaller than or equal to 63.');
        }

        $this->container['switch_mac_policy'] = $switch_mac_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


