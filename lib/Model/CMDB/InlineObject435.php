<?php
/**
 * InlineObject435
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject435 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject435 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_435';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'int',
        'status' => 'string',
        'type' => 'string',
        'passwd' => 'string',
        'ldap_server' => 'string',
        'radius_server' => 'string',
        'tacacs_server' => 'string',
        'two_factor' => 'string',
        'two_factor_authentication' => 'string',
        'two_factor_notification' => 'string',
        'fortitoken' => 'string',
        'email_to' => 'string',
        'sms_server' => 'string',
        'sms_custom_server' => 'string',
        'sms_phone' => 'string',
        'passwd_policy' => 'string',
        'passwd_time' => 'string',
        'authtimeout' => 'int',
        'workstation' => 'string',
        'auth_concurrent_override' => 'string',
        'auth_concurrent_value' => 'int',
        'ppk_secret' => 'string',
        'ppk_identity' => 'string',
        'username_case_sensitivity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'status' => null,
        'type' => null,
        'passwd' => 'password',
        'ldap_server' => null,
        'radius_server' => null,
        'tacacs_server' => null,
        'two_factor' => null,
        'two_factor_authentication' => null,
        'two_factor_notification' => null,
        'fortitoken' => null,
        'email_to' => null,
        'sms_server' => null,
        'sms_custom_server' => null,
        'sms_phone' => null,
        'passwd_policy' => null,
        'passwd_time' => null,
        'authtimeout' => null,
        'workstation' => null,
        'auth_concurrent_override' => null,
        'auth_concurrent_value' => null,
        'ppk_secret' => null,
        'ppk_identity' => null,
        'username_case_sensitivity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'status' => 'status',
        'type' => 'type',
        'passwd' => 'passwd',
        'ldap_server' => 'ldap-server',
        'radius_server' => 'radius-server',
        'tacacs_server' => 'tacacs+-server',
        'two_factor' => 'two-factor',
        'two_factor_authentication' => 'two-factor-authentication',
        'two_factor_notification' => 'two-factor-notification',
        'fortitoken' => 'fortitoken',
        'email_to' => 'email-to',
        'sms_server' => 'sms-server',
        'sms_custom_server' => 'sms-custom-server',
        'sms_phone' => 'sms-phone',
        'passwd_policy' => 'passwd-policy',
        'passwd_time' => 'passwd-time',
        'authtimeout' => 'authtimeout',
        'workstation' => 'workstation',
        'auth_concurrent_override' => 'auth-concurrent-override',
        'auth_concurrent_value' => 'auth-concurrent-value',
        'ppk_secret' => 'ppk-secret',
        'ppk_identity' => 'ppk-identity',
        'username_case_sensitivity' => 'username-case-sensitivity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'status' => 'setStatus',
        'type' => 'setType',
        'passwd' => 'setPasswd',
        'ldap_server' => 'setLdapServer',
        'radius_server' => 'setRadiusServer',
        'tacacs_server' => 'setTacacsServer',
        'two_factor' => 'setTwoFactor',
        'two_factor_authentication' => 'setTwoFactorAuthentication',
        'two_factor_notification' => 'setTwoFactorNotification',
        'fortitoken' => 'setFortitoken',
        'email_to' => 'setEmailTo',
        'sms_server' => 'setSmsServer',
        'sms_custom_server' => 'setSmsCustomServer',
        'sms_phone' => 'setSmsPhone',
        'passwd_policy' => 'setPasswdPolicy',
        'passwd_time' => 'setPasswdTime',
        'authtimeout' => 'setAuthtimeout',
        'workstation' => 'setWorkstation',
        'auth_concurrent_override' => 'setAuthConcurrentOverride',
        'auth_concurrent_value' => 'setAuthConcurrentValue',
        'ppk_secret' => 'setPpkSecret',
        'ppk_identity' => 'setPpkIdentity',
        'username_case_sensitivity' => 'setUsernameCaseSensitivity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'status' => 'getStatus',
        'type' => 'getType',
        'passwd' => 'getPasswd',
        'ldap_server' => 'getLdapServer',
        'radius_server' => 'getRadiusServer',
        'tacacs_server' => 'getTacacsServer',
        'two_factor' => 'getTwoFactor',
        'two_factor_authentication' => 'getTwoFactorAuthentication',
        'two_factor_notification' => 'getTwoFactorNotification',
        'fortitoken' => 'getFortitoken',
        'email_to' => 'getEmailTo',
        'sms_server' => 'getSmsServer',
        'sms_custom_server' => 'getSmsCustomServer',
        'sms_phone' => 'getSmsPhone',
        'passwd_policy' => 'getPasswdPolicy',
        'passwd_time' => 'getPasswdTime',
        'authtimeout' => 'getAuthtimeout',
        'workstation' => 'getWorkstation',
        'auth_concurrent_override' => 'getAuthConcurrentOverride',
        'auth_concurrent_value' => 'getAuthConcurrentValue',
        'ppk_secret' => 'getPpkSecret',
        'ppk_identity' => 'getPpkIdentity',
        'username_case_sensitivity' => 'getUsernameCaseSensitivity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const TYPE_PASSWORD = 'password';
    const TYPE_RADIUS = 'radius';
    const TYPE_TACACS = 'tacacs+';
    const TYPE_LDAP = 'ldap';
    const TWO_FACTOR_DISABLE = 'disable';
    const TWO_FACTOR_FORTITOKEN = 'fortitoken';
    const TWO_FACTOR_FORTITOKEN_CLOUD = 'fortitoken-cloud';
    const TWO_FACTOR_EMAIL = 'email';
    const TWO_FACTOR_SMS = 'sms';
    const TWO_FACTOR_AUTHENTICATION_FORTITOKEN = 'fortitoken';
    const TWO_FACTOR_AUTHENTICATION_EMAIL = 'email';
    const TWO_FACTOR_AUTHENTICATION_SMS = 'sms';
    const TWO_FACTOR_NOTIFICATION_EMAIL = 'email';
    const TWO_FACTOR_NOTIFICATION_SMS = 'sms';
    const SMS_SERVER_FORTIGUARD = 'fortiguard';
    const SMS_SERVER_CUSTOM = 'custom';
    const AUTH_CONCURRENT_OVERRIDE_ENABLE = 'enable';
    const AUTH_CONCURRENT_OVERRIDE_DISABLE = 'disable';
    const USERNAME_CASE_SENSITIVITY_DISABLE = 'disable';
    const USERNAME_CASE_SENSITIVITY_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PASSWORD,
            self::TYPE_RADIUS,
            self::TYPE_TACACS,
            self::TYPE_LDAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAllowableValues()
    {
        return [
            self::TWO_FACTOR_DISABLE,
            self::TWO_FACTOR_FORTITOKEN,
            self::TWO_FACTOR_FORTITOKEN_CLOUD,
            self::TWO_FACTOR_EMAIL,
            self::TWO_FACTOR_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAuthenticationAllowableValues()
    {
        return [
            self::TWO_FACTOR_AUTHENTICATION_FORTITOKEN,
            self::TWO_FACTOR_AUTHENTICATION_EMAIL,
            self::TWO_FACTOR_AUTHENTICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorNotificationAllowableValues()
    {
        return [
            self::TWO_FACTOR_NOTIFICATION_EMAIL,
            self::TWO_FACTOR_NOTIFICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsServerAllowableValues()
    {
        return [
            self::SMS_SERVER_FORTIGUARD,
            self::SMS_SERVER_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthConcurrentOverrideAllowableValues()
    {
        return [
            self::AUTH_CONCURRENT_OVERRIDE_ENABLE,
            self::AUTH_CONCURRENT_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsernameCaseSensitivityAllowableValues()
    {
        return [
            self::USERNAME_CASE_SENSITIVITY_DISABLE,
            self::USERNAME_CASE_SENSITIVITY_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['passwd'] = $data['passwd'] ?? null;
        $this->container['ldap_server'] = $data['ldap_server'] ?? null;
        $this->container['radius_server'] = $data['radius_server'] ?? null;
        $this->container['tacacs_server'] = $data['tacacs_server'] ?? null;
        $this->container['two_factor'] = $data['two_factor'] ?? null;
        $this->container['two_factor_authentication'] = $data['two_factor_authentication'] ?? null;
        $this->container['two_factor_notification'] = $data['two_factor_notification'] ?? null;
        $this->container['fortitoken'] = $data['fortitoken'] ?? null;
        $this->container['email_to'] = $data['email_to'] ?? null;
        $this->container['sms_server'] = $data['sms_server'] ?? null;
        $this->container['sms_custom_server'] = $data['sms_custom_server'] ?? null;
        $this->container['sms_phone'] = $data['sms_phone'] ?? null;
        $this->container['passwd_policy'] = $data['passwd_policy'] ?? null;
        $this->container['passwd_time'] = $data['passwd_time'] ?? null;
        $this->container['authtimeout'] = $data['authtimeout'] ?? null;
        $this->container['workstation'] = $data['workstation'] ?? null;
        $this->container['auth_concurrent_override'] = $data['auth_concurrent_override'] ?? null;
        $this->container['auth_concurrent_value'] = $data['auth_concurrent_value'] ?? null;
        $this->container['ppk_secret'] = $data['ppk_secret'] ?? null;
        $this->container['ppk_identity'] = $data['ppk_identity'] ?? null;
        $this->container['username_case_sensitivity'] = $data['username_case_sensitivity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ldap_server']) && (mb_strlen($this->container['ldap_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'ldap_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['radius_server']) && (mb_strlen($this->container['radius_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'radius_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['tacacs_server']) && (mb_strlen($this->container['tacacs_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'tacacs_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($this->container['two_factor']) && !in_array($this->container['two_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor', must be one of '%s'",
                $this->container['two_factor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($this->container['two_factor_authentication']) && !in_array($this->container['two_factor_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                $this->container['two_factor_authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($this->container['two_factor_notification']) && !in_array($this->container['two_factor_notification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                $this->container['two_factor_notification'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fortitoken']) && (mb_strlen($this->container['fortitoken']) > 16)) {
            $invalidProperties[] = "invalid value for 'fortitoken', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['email_to']) && (mb_strlen($this->container['email_to']) > 63)) {
            $invalidProperties[] = "invalid value for 'email_to', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($this->container['sms_server']) && !in_array($this->container['sms_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sms_server', must be one of '%s'",
                $this->container['sms_server'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sms_custom_server']) && (mb_strlen($this->container['sms_custom_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'sms_custom_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sms_phone']) && (mb_strlen($this->container['sms_phone']) > 15)) {
            $invalidProperties[] = "invalid value for 'sms_phone', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['passwd_policy']) && (mb_strlen($this->container['passwd_policy']) > 35)) {
            $invalidProperties[] = "invalid value for 'passwd_policy', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['authtimeout']) && ($this->container['authtimeout'] > 1440)) {
            $invalidProperties[] = "invalid value for 'authtimeout', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['authtimeout']) && ($this->container['authtimeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'authtimeout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['workstation']) && (mb_strlen($this->container['workstation']) > 35)) {
            $invalidProperties[] = "invalid value for 'workstation', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthConcurrentOverrideAllowableValues();
        if (!is_null($this->container['auth_concurrent_override']) && !in_array($this->container['auth_concurrent_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_concurrent_override', must be one of '%s'",
                $this->container['auth_concurrent_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_concurrent_value']) && ($this->container['auth_concurrent_value'] > 100)) {
            $invalidProperties[] = "invalid value for 'auth_concurrent_value', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['auth_concurrent_value']) && ($this->container['auth_concurrent_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'auth_concurrent_value', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ppk_identity']) && (mb_strlen($this->container['ppk_identity']) > 35)) {
            $invalidProperties[] = "invalid value for 'ppk_identity', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getUsernameCaseSensitivityAllowableValues();
        if (!is_null($this->container['username_case_sensitivity']) && !in_array($this->container['username_case_sensitivity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'username_case_sensitivity', must be one of '%s'",
                $this->container['username_case_sensitivity'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name User name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject435., must be smaller than or equal to 64.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id User ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject435., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject435., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable allowing the local user to authenticate with the FortiGate unit.    enable:Enable user.    disable:Disable user.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Authentication method.    password:Password authentication.    radius:RADIUS server authentication.    tacacs+:TACACS+ server authentication.    ldap:LDAP server authentication.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets passwd
     *
     * @return string|null
     */
    public function getPasswd()
    {
        return $this->container['passwd'];
    }

    /**
     * Sets passwd
     *
     * @param string|null $passwd User's password.
     *
     * @return self
     */
    public function setPasswd($passwd)
    {
        $this->container['passwd'] = $passwd;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return string|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param string|null $ldap_server Name of LDAP server with which the user must authenticate.
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {
        if (!is_null($ldap_server) && (mb_strlen($ldap_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ldap_server when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets radius_server
     *
     * @return string|null
     */
    public function getRadiusServer()
    {
        return $this->container['radius_server'];
    }

    /**
     * Sets radius_server
     *
     * @param string|null $radius_server Name of RADIUS server with which the user must authenticate.
     *
     * @return self
     */
    public function setRadiusServer($radius_server)
    {
        if (!is_null($radius_server) && (mb_strlen($radius_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $radius_server when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['radius_server'] = $radius_server;

        return $this;
    }

    /**
     * Gets tacacs_server
     *
     * @return string|null
     */
    public function getTacacsServer()
    {
        return $this->container['tacacs_server'];
    }

    /**
     * Sets tacacs_server
     *
     * @param string|null $tacacs_server Name of TACACS+ server with which the user must authenticate.
     *
     * @return self
     */
    public function setTacacsServer($tacacs_server)
    {
        if (!is_null($tacacs_server) && (mb_strlen($tacacs_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $tacacs_server when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['tacacs_server'] = $tacacs_server;

        return $this;
    }

    /**
     * Gets two_factor
     *
     * @return string|null
     */
    public function getTwoFactor()
    {
        return $this->container['two_factor'];
    }

    /**
     * Sets two_factor
     *
     * @param string|null $two_factor Enable/disable two-factor authentication.    disable:disable    fortitoken:FortiToken    fortitoken-cloud:FortiToken Cloud Service.    email:Email authentication code.    sms:SMS authentication code.
     *
     * @return self
     */
    public function setTwoFactor($two_factor)
    {
        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($two_factor) && !in_array($two_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor', must be one of '%s'",
                    $two_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor'] = $two_factor;

        return $this;
    }

    /**
     * Gets two_factor_authentication
     *
     * @return string|null
     */
    public function getTwoFactorAuthentication()
    {
        return $this->container['two_factor_authentication'];
    }

    /**
     * Sets two_factor_authentication
     *
     * @param string|null $two_factor_authentication Authentication method by FortiToken Cloud.    fortitoken:FortiToken authentication.    email:Email one time password.    sms:SMS one time password.
     *
     * @return self
     */
    public function setTwoFactorAuthentication($two_factor_authentication)
    {
        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($two_factor_authentication) && !in_array($two_factor_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                    $two_factor_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_authentication'] = $two_factor_authentication;

        return $this;
    }

    /**
     * Gets two_factor_notification
     *
     * @return string|null
     */
    public function getTwoFactorNotification()
    {
        return $this->container['two_factor_notification'];
    }

    /**
     * Sets two_factor_notification
     *
     * @param string|null $two_factor_notification Notification method for user activation by FortiToken Cloud.    email:Email notification for activation code.    sms:SMS notification for activation code.
     *
     * @return self
     */
    public function setTwoFactorNotification($two_factor_notification)
    {
        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($two_factor_notification) && !in_array($two_factor_notification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                    $two_factor_notification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_notification'] = $two_factor_notification;

        return $this;
    }

    /**
     * Gets fortitoken
     *
     * @return string|null
     */
    public function getFortitoken()
    {
        return $this->container['fortitoken'];
    }

    /**
     * Sets fortitoken
     *
     * @param string|null $fortitoken Two-factor recipient's FortiToken serial number.
     *
     * @return self
     */
    public function setFortitoken($fortitoken)
    {
        if (!is_null($fortitoken) && (mb_strlen($fortitoken) > 16)) {
            throw new \InvalidArgumentException('invalid length for $fortitoken when calling InlineObject435., must be smaller than or equal to 16.');
        }

        $this->container['fortitoken'] = $fortitoken;

        return $this;
    }

    /**
     * Gets email_to
     *
     * @return string|null
     */
    public function getEmailTo()
    {
        return $this->container['email_to'];
    }

    /**
     * Sets email_to
     *
     * @param string|null $email_to Two-factor recipient's email address.
     *
     * @return self
     */
    public function setEmailTo($email_to)
    {
        if (!is_null($email_to) && (mb_strlen($email_to) > 63)) {
            throw new \InvalidArgumentException('invalid length for $email_to when calling InlineObject435., must be smaller than or equal to 63.');
        }

        $this->container['email_to'] = $email_to;

        return $this;
    }

    /**
     * Gets sms_server
     *
     * @return string|null
     */
    public function getSmsServer()
    {
        return $this->container['sms_server'];
    }

    /**
     * Sets sms_server
     *
     * @param string|null $sms_server Send SMS through FortiGuard or other external server.    fortiguard:Send SMS by FortiGuard.    custom:Send SMS by custom server.
     *
     * @return self
     */
    public function setSmsServer($sms_server)
    {
        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($sms_server) && !in_array($sms_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sms_server', must be one of '%s'",
                    $sms_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_server'] = $sms_server;

        return $this;
    }

    /**
     * Gets sms_custom_server
     *
     * @return string|null
     */
    public function getSmsCustomServer()
    {
        return $this->container['sms_custom_server'];
    }

    /**
     * Sets sms_custom_server
     *
     * @param string|null $sms_custom_server Two-factor recipient's SMS server.
     *
     * @return self
     */
    public function setSmsCustomServer($sms_custom_server)
    {
        if (!is_null($sms_custom_server) && (mb_strlen($sms_custom_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sms_custom_server when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['sms_custom_server'] = $sms_custom_server;

        return $this;
    }

    /**
     * Gets sms_phone
     *
     * @return string|null
     */
    public function getSmsPhone()
    {
        return $this->container['sms_phone'];
    }

    /**
     * Sets sms_phone
     *
     * @param string|null $sms_phone Two-factor recipient's mobile phone number.
     *
     * @return self
     */
    public function setSmsPhone($sms_phone)
    {
        if (!is_null($sms_phone) && (mb_strlen($sms_phone) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sms_phone when calling InlineObject435., must be smaller than or equal to 15.');
        }

        $this->container['sms_phone'] = $sms_phone;

        return $this;
    }

    /**
     * Gets passwd_policy
     *
     * @return string|null
     */
    public function getPasswdPolicy()
    {
        return $this->container['passwd_policy'];
    }

    /**
     * Sets passwd_policy
     *
     * @param string|null $passwd_policy Password policy to apply to this user, as defined in config user password-policy.
     *
     * @return self
     */
    public function setPasswdPolicy($passwd_policy)
    {
        if (!is_null($passwd_policy) && (mb_strlen($passwd_policy) > 35)) {
            throw new \InvalidArgumentException('invalid length for $passwd_policy when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['passwd_policy'] = $passwd_policy;

        return $this;
    }

    /**
     * Gets passwd_time
     *
     * @return string|null
     */
    public function getPasswdTime()
    {
        return $this->container['passwd_time'];
    }

    /**
     * Sets passwd_time
     *
     * @param string|null $passwd_time Time of the last password update.
     *
     * @return self
     */
    public function setPasswdTime($passwd_time)
    {
        $this->container['passwd_time'] = $passwd_time;

        return $this;
    }

    /**
     * Gets authtimeout
     *
     * @return int|null
     */
    public function getAuthtimeout()
    {
        return $this->container['authtimeout'];
    }

    /**
     * Sets authtimeout
     *
     * @param int|null $authtimeout Time in minutes before the authentication timeout for a user is reached.
     *
     * @return self
     */
    public function setAuthtimeout($authtimeout)
    {

        if (!is_null($authtimeout) && ($authtimeout > 1440)) {
            throw new \InvalidArgumentException('invalid value for $authtimeout when calling InlineObject435., must be smaller than or equal to 1440.');
        }
        if (!is_null($authtimeout) && ($authtimeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $authtimeout when calling InlineObject435., must be bigger than or equal to 0.');
        }

        $this->container['authtimeout'] = $authtimeout;

        return $this;
    }

    /**
     * Gets workstation
     *
     * @return string|null
     */
    public function getWorkstation()
    {
        return $this->container['workstation'];
    }

    /**
     * Sets workstation
     *
     * @param string|null $workstation Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
     *
     * @return self
     */
    public function setWorkstation($workstation)
    {
        if (!is_null($workstation) && (mb_strlen($workstation) > 35)) {
            throw new \InvalidArgumentException('invalid length for $workstation when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['workstation'] = $workstation;

        return $this;
    }

    /**
     * Gets auth_concurrent_override
     *
     * @return string|null
     */
    public function getAuthConcurrentOverride()
    {
        return $this->container['auth_concurrent_override'];
    }

    /**
     * Sets auth_concurrent_override
     *
     * @param string|null $auth_concurrent_override Enable/disable overriding the policy-auth-concurrent under config system global.    enable:Enable auth-concurrent-override.    disable:Disable auth-concurrent-override.
     *
     * @return self
     */
    public function setAuthConcurrentOverride($auth_concurrent_override)
    {
        $allowedValues = $this->getAuthConcurrentOverrideAllowableValues();
        if (!is_null($auth_concurrent_override) && !in_array($auth_concurrent_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_concurrent_override', must be one of '%s'",
                    $auth_concurrent_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_concurrent_override'] = $auth_concurrent_override;

        return $this;
    }

    /**
     * Gets auth_concurrent_value
     *
     * @return int|null
     */
    public function getAuthConcurrentValue()
    {
        return $this->container['auth_concurrent_value'];
    }

    /**
     * Sets auth_concurrent_value
     *
     * @param int|null $auth_concurrent_value Maximum number of concurrent logins permitted from the same user.
     *
     * @return self
     */
    public function setAuthConcurrentValue($auth_concurrent_value)
    {

        if (!is_null($auth_concurrent_value) && ($auth_concurrent_value > 100)) {
            throw new \InvalidArgumentException('invalid value for $auth_concurrent_value when calling InlineObject435., must be smaller than or equal to 100.');
        }
        if (!is_null($auth_concurrent_value) && ($auth_concurrent_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $auth_concurrent_value when calling InlineObject435., must be bigger than or equal to 0.');
        }

        $this->container['auth_concurrent_value'] = $auth_concurrent_value;

        return $this;
    }

    /**
     * Gets ppk_secret
     *
     * @return string|null
     */
    public function getPpkSecret()
    {
        return $this->container['ppk_secret'];
    }

    /**
     * Sets ppk_secret
     *
     * @param string|null $ppk_secret IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
     *
     * @return self
     */
    public function setPpkSecret($ppk_secret)
    {
        $this->container['ppk_secret'] = $ppk_secret;

        return $this;
    }

    /**
     * Gets ppk_identity
     *
     * @return string|null
     */
    public function getPpkIdentity()
    {
        return $this->container['ppk_identity'];
    }

    /**
     * Sets ppk_identity
     *
     * @param string|null $ppk_identity IKEv2 Postquantum Preshared Key Identity.
     *
     * @return self
     */
    public function setPpkIdentity($ppk_identity)
    {
        if (!is_null($ppk_identity) && (mb_strlen($ppk_identity) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ppk_identity when calling InlineObject435., must be smaller than or equal to 35.');
        }

        $this->container['ppk_identity'] = $ppk_identity;

        return $this;
    }

    /**
     * Gets username_case_sensitivity
     *
     * @return string|null
     */
    public function getUsernameCaseSensitivity()
    {
        return $this->container['username_case_sensitivity'];
    }

    /**
     * Sets username_case_sensitivity
     *
     * @param string|null $username_case_sensitivity Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent).    disable:Ignore case. Username at prompt not required to match case.    enable:Do not ignore case. Username at prompt must match case.
     *
     * @return self
     */
    public function setUsernameCaseSensitivity($username_case_sensitivity)
    {
        $allowedValues = $this->getUsernameCaseSensitivityAllowableValues();
        if (!is_null($username_case_sensitivity) && !in_array($username_case_sensitivity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'username_case_sensitivity', must be one of '%s'",
                    $username_case_sensitivity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['username_case_sensitivity'] = $username_case_sensitivity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


