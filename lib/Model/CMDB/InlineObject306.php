<?php
/**
 * InlineObject306
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject306 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject306 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_306';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip' => 'string',
        'vdom' => 'string',
        'ipsec' => 'string',
        'central_management' => 'string',
        'central_mgmt_auto_backup' => 'string',
        'central_mgmt_schedule_config_restore' => 'string',
        'central_mgmt_schedule_script_restore' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip' => 'ipv4',
        'vdom' => null,
        'ipsec' => null,
        'central_management' => null,
        'central_mgmt_auto_backup' => null,
        'central_mgmt_schedule_config_restore' => null,
        'central_mgmt_schedule_script_restore' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'vdom' => 'vdom',
        'ipsec' => 'ipsec',
        'central_management' => 'central-management',
        'central_mgmt_auto_backup' => 'central-mgmt-auto-backup',
        'central_mgmt_schedule_config_restore' => 'central-mgmt-schedule-config-restore',
        'central_mgmt_schedule_script_restore' => 'central-mgmt-schedule-script-restore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'vdom' => 'setVdom',
        'ipsec' => 'setIpsec',
        'central_management' => 'setCentralManagement',
        'central_mgmt_auto_backup' => 'setCentralMgmtAutoBackup',
        'central_mgmt_schedule_config_restore' => 'setCentralMgmtScheduleConfigRestore',
        'central_mgmt_schedule_script_restore' => 'setCentralMgmtScheduleScriptRestore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'vdom' => 'getVdom',
        'ipsec' => 'getIpsec',
        'central_management' => 'getCentralManagement',
        'central_mgmt_auto_backup' => 'getCentralMgmtAutoBackup',
        'central_mgmt_schedule_config_restore' => 'getCentralMgmtScheduleConfigRestore',
        'central_mgmt_schedule_script_restore' => 'getCentralMgmtScheduleScriptRestore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IPSEC_ENABLE = 'enable';
    const IPSEC_DISABLE = 'disable';
    const CENTRAL_MANAGEMENT_ENABLE = 'enable';
    const CENTRAL_MANAGEMENT_DISABLE = 'disable';
    const CENTRAL_MGMT_AUTO_BACKUP_ENABLE = 'enable';
    const CENTRAL_MGMT_AUTO_BACKUP_DISABLE = 'disable';
    const CENTRAL_MGMT_SCHEDULE_CONFIG_RESTORE_ENABLE = 'enable';
    const CENTRAL_MGMT_SCHEDULE_CONFIG_RESTORE_DISABLE = 'disable';
    const CENTRAL_MGMT_SCHEDULE_SCRIPT_RESTORE_ENABLE = 'enable';
    const CENTRAL_MGMT_SCHEDULE_SCRIPT_RESTORE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecAllowableValues()
    {
        return [
            self::IPSEC_ENABLE,
            self::IPSEC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCentralManagementAllowableValues()
    {
        return [
            self::CENTRAL_MANAGEMENT_ENABLE,
            self::CENTRAL_MANAGEMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCentralMgmtAutoBackupAllowableValues()
    {
        return [
            self::CENTRAL_MGMT_AUTO_BACKUP_ENABLE,
            self::CENTRAL_MGMT_AUTO_BACKUP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCentralMgmtScheduleConfigRestoreAllowableValues()
    {
        return [
            self::CENTRAL_MGMT_SCHEDULE_CONFIG_RESTORE_ENABLE,
            self::CENTRAL_MGMT_SCHEDULE_CONFIG_RESTORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCentralMgmtScheduleScriptRestoreAllowableValues()
    {
        return [
            self::CENTRAL_MGMT_SCHEDULE_SCRIPT_RESTORE_ENABLE,
            self::CENTRAL_MGMT_SCHEDULE_SCRIPT_RESTORE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['ipsec'] = $data['ipsec'] ?? null;
        $this->container['central_management'] = $data['central_management'] ?? null;
        $this->container['central_mgmt_auto_backup'] = $data['central_mgmt_auto_backup'] ?? null;
        $this->container['central_mgmt_schedule_config_restore'] = $data['central_mgmt_schedule_config_restore'] ?? null;
        $this->container['central_mgmt_schedule_script_restore'] = $data['central_mgmt_schedule_script_restore'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vdom']) && (mb_strlen($this->container['vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'vdom', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getIpsecAllowableValues();
        if (!is_null($this->container['ipsec']) && !in_array($this->container['ipsec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec', must be one of '%s'",
                $this->container['ipsec'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCentralManagementAllowableValues();
        if (!is_null($this->container['central_management']) && !in_array($this->container['central_management'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'central_management', must be one of '%s'",
                $this->container['central_management'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCentralMgmtAutoBackupAllowableValues();
        if (!is_null($this->container['central_mgmt_auto_backup']) && !in_array($this->container['central_mgmt_auto_backup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'central_mgmt_auto_backup', must be one of '%s'",
                $this->container['central_mgmt_auto_backup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCentralMgmtScheduleConfigRestoreAllowableValues();
        if (!is_null($this->container['central_mgmt_schedule_config_restore']) && !in_array($this->container['central_mgmt_schedule_config_restore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'central_mgmt_schedule_config_restore', must be one of '%s'",
                $this->container['central_mgmt_schedule_config_restore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCentralMgmtScheduleScriptRestoreAllowableValues();
        if (!is_null($this->container['central_mgmt_schedule_script_restore']) && !in_array($this->container['central_mgmt_schedule_script_restore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'central_mgmt_schedule_script_restore', must be one of '%s'",
                $this->container['central_mgmt_schedule_script_restore'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return string|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param string|null $vdom Virtual domain name.
     *
     * @return self
     */
    public function setVdom($vdom)
    {
        if (!is_null($vdom) && (mb_strlen($vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $vdom when calling InlineObject306., must be smaller than or equal to 31.');
        }

        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets ipsec
     *
     * @return string|null
     */
    public function getIpsec()
    {
        return $this->container['ipsec'];
    }

    /**
     * Sets ipsec
     *
     * @param string|null $ipsec Enable/disable FortiManager IPsec tunnel.    enable:Enable FortiManager IPsec tunnel.    disable:Disable FortiManager IPsec tunnel.
     *
     * @return self
     */
    public function setIpsec($ipsec)
    {
        $allowedValues = $this->getIpsecAllowableValues();
        if (!is_null($ipsec) && !in_array($ipsec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec', must be one of '%s'",
                    $ipsec,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec'] = $ipsec;

        return $this;
    }

    /**
     * Gets central_management
     *
     * @return string|null
     */
    public function getCentralManagement()
    {
        return $this->container['central_management'];
    }

    /**
     * Sets central_management
     *
     * @param string|null $central_management Enable/disable FortiManager central management.    enable:Enable central management.    disable:Disable central management.
     *
     * @return self
     */
    public function setCentralManagement($central_management)
    {
        $allowedValues = $this->getCentralManagementAllowableValues();
        if (!is_null($central_management) && !in_array($central_management, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'central_management', must be one of '%s'",
                    $central_management,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['central_management'] = $central_management;

        return $this;
    }

    /**
     * Gets central_mgmt_auto_backup
     *
     * @return string|null
     */
    public function getCentralMgmtAutoBackup()
    {
        return $this->container['central_mgmt_auto_backup'];
    }

    /**
     * Sets central_mgmt_auto_backup
     *
     * @param string|null $central_mgmt_auto_backup Enable/disable central management auto backup.    enable:Enable auto backup.    disable:Disable auto backup.
     *
     * @return self
     */
    public function setCentralMgmtAutoBackup($central_mgmt_auto_backup)
    {
        $allowedValues = $this->getCentralMgmtAutoBackupAllowableValues();
        if (!is_null($central_mgmt_auto_backup) && !in_array($central_mgmt_auto_backup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'central_mgmt_auto_backup', must be one of '%s'",
                    $central_mgmt_auto_backup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['central_mgmt_auto_backup'] = $central_mgmt_auto_backup;

        return $this;
    }

    /**
     * Gets central_mgmt_schedule_config_restore
     *
     * @return string|null
     */
    public function getCentralMgmtScheduleConfigRestore()
    {
        return $this->container['central_mgmt_schedule_config_restore'];
    }

    /**
     * Sets central_mgmt_schedule_config_restore
     *
     * @param string|null $central_mgmt_schedule_config_restore Enable/disable central management schedule config restore.    enable:Enable central management scheduled restore.    disable:Disable central management scheduled restore.
     *
     * @return self
     */
    public function setCentralMgmtScheduleConfigRestore($central_mgmt_schedule_config_restore)
    {
        $allowedValues = $this->getCentralMgmtScheduleConfigRestoreAllowableValues();
        if (!is_null($central_mgmt_schedule_config_restore) && !in_array($central_mgmt_schedule_config_restore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'central_mgmt_schedule_config_restore', must be one of '%s'",
                    $central_mgmt_schedule_config_restore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['central_mgmt_schedule_config_restore'] = $central_mgmt_schedule_config_restore;

        return $this;
    }

    /**
     * Gets central_mgmt_schedule_script_restore
     *
     * @return string|null
     */
    public function getCentralMgmtScheduleScriptRestore()
    {
        return $this->container['central_mgmt_schedule_script_restore'];
    }

    /**
     * Sets central_mgmt_schedule_script_restore
     *
     * @param string|null $central_mgmt_schedule_script_restore Enable/disable central management schedule script restore.    enable:Enable central management scheduled restore.    disable:Disable central management scheduled restore.
     *
     * @return self
     */
    public function setCentralMgmtScheduleScriptRestore($central_mgmt_schedule_script_restore)
    {
        $allowedValues = $this->getCentralMgmtScheduleScriptRestoreAllowableValues();
        if (!is_null($central_mgmt_schedule_script_restore) && !in_array($central_mgmt_schedule_script_restore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'central_mgmt_schedule_script_restore', must be one of '%s'",
                    $central_mgmt_schedule_script_restore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['central_mgmt_schedule_script_restore'] = $central_mgmt_schedule_script_restore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


