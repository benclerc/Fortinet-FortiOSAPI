<?php
/**
 * InlineObject337
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject337 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject337 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_337';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'addr_mode' => 'string',
        'srcintf' => 'string',
        'server' => '\Fortigate\FortiOS\Model\CMDB\SystemLinkMonitorNameServer[]',
        'protocol' => 'string',
        'port' => 'int',
        'gateway_ip' => 'string',
        'gateway_ip6' => 'string',
        'source_ip' => 'string',
        'source_ip6' => 'string',
        'http_get' => 'string',
        'http_agent' => 'string',
        'http_match' => 'string',
        'interval' => 'int',
        'probe_timeout' => 'int',
        'failtime' => 'int',
        'recoverytime' => 'int',
        'probe_count' => 'int',
        'security_mode' => 'string',
        'password' => 'string',
        'packet_size' => 'int',
        'ha_priority' => 'int',
        'update_cascade_interface' => 'string',
        'update_static_route' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'addr_mode' => null,
        'srcintf' => null,
        'server' => null,
        'protocol' => null,
        'port' => null,
        'gateway_ip' => 'ipv4',
        'gateway_ip6' => 'ipv6',
        'source_ip' => 'ipv4',
        'source_ip6' => 'ipv6',
        'http_get' => null,
        'http_agent' => null,
        'http_match' => null,
        'interval' => null,
        'probe_timeout' => null,
        'failtime' => null,
        'recoverytime' => null,
        'probe_count' => null,
        'security_mode' => null,
        'password' => 'password',
        'packet_size' => null,
        'ha_priority' => null,
        'update_cascade_interface' => null,
        'update_static_route' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'addr_mode' => 'addr-mode',
        'srcintf' => 'srcintf',
        'server' => 'server',
        'protocol' => 'protocol',
        'port' => 'port',
        'gateway_ip' => 'gateway-ip',
        'gateway_ip6' => 'gateway-ip6',
        'source_ip' => 'source-ip',
        'source_ip6' => 'source-ip6',
        'http_get' => 'http-get',
        'http_agent' => 'http-agent',
        'http_match' => 'http-match',
        'interval' => 'interval',
        'probe_timeout' => 'probe-timeout',
        'failtime' => 'failtime',
        'recoverytime' => 'recoverytime',
        'probe_count' => 'probe-count',
        'security_mode' => 'security-mode',
        'password' => 'password',
        'packet_size' => 'packet-size',
        'ha_priority' => 'ha-priority',
        'update_cascade_interface' => 'update-cascade-interface',
        'update_static_route' => 'update-static-route',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'addr_mode' => 'setAddrMode',
        'srcintf' => 'setSrcintf',
        'server' => 'setServer',
        'protocol' => 'setProtocol',
        'port' => 'setPort',
        'gateway_ip' => 'setGatewayIp',
        'gateway_ip6' => 'setGatewayIp6',
        'source_ip' => 'setSourceIp',
        'source_ip6' => 'setSourceIp6',
        'http_get' => 'setHttpGet',
        'http_agent' => 'setHttpAgent',
        'http_match' => 'setHttpMatch',
        'interval' => 'setInterval',
        'probe_timeout' => 'setProbeTimeout',
        'failtime' => 'setFailtime',
        'recoverytime' => 'setRecoverytime',
        'probe_count' => 'setProbeCount',
        'security_mode' => 'setSecurityMode',
        'password' => 'setPassword',
        'packet_size' => 'setPacketSize',
        'ha_priority' => 'setHaPriority',
        'update_cascade_interface' => 'setUpdateCascadeInterface',
        'update_static_route' => 'setUpdateStaticRoute',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'addr_mode' => 'getAddrMode',
        'srcintf' => 'getSrcintf',
        'server' => 'getServer',
        'protocol' => 'getProtocol',
        'port' => 'getPort',
        'gateway_ip' => 'getGatewayIp',
        'gateway_ip6' => 'getGatewayIp6',
        'source_ip' => 'getSourceIp',
        'source_ip6' => 'getSourceIp6',
        'http_get' => 'getHttpGet',
        'http_agent' => 'getHttpAgent',
        'http_match' => 'getHttpMatch',
        'interval' => 'getInterval',
        'probe_timeout' => 'getProbeTimeout',
        'failtime' => 'getFailtime',
        'recoverytime' => 'getRecoverytime',
        'probe_count' => 'getProbeCount',
        'security_mode' => 'getSecurityMode',
        'password' => 'getPassword',
        'packet_size' => 'getPacketSize',
        'ha_priority' => 'getHaPriority',
        'update_cascade_interface' => 'getUpdateCascadeInterface',
        'update_static_route' => 'getUpdateStaticRoute',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDR_MODE_IPV4 = 'ipv4';
    const ADDR_MODE_IPV6 = 'ipv6';
    const PROTOCOL_PING = 'ping';
    const PROTOCOL_TCP_ECHO = 'tcp-echo';
    const PROTOCOL_UDP_ECHO = 'udp-echo';
    const PROTOCOL_HTTP = 'http';
    const PROTOCOL_TWAMP = 'twamp';
    const SECURITY_MODE_NONE = 'none';
    const SECURITY_MODE_AUTHENTICATION = 'authentication';
    const UPDATE_CASCADE_INTERFACE_ENABLE = 'enable';
    const UPDATE_CASCADE_INTERFACE_DISABLE = 'disable';
    const UPDATE_STATIC_ROUTE_ENABLE = 'enable';
    const UPDATE_STATIC_ROUTE_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrModeAllowableValues()
    {
        return [
            self::ADDR_MODE_IPV4,
            self::ADDR_MODE_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_PING,
            self::PROTOCOL_TCP_ECHO,
            self::PROTOCOL_UDP_ECHO,
            self::PROTOCOL_HTTP,
            self::PROTOCOL_TWAMP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityModeAllowableValues()
    {
        return [
            self::SECURITY_MODE_NONE,
            self::SECURITY_MODE_AUTHENTICATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateCascadeInterfaceAllowableValues()
    {
        return [
            self::UPDATE_CASCADE_INTERFACE_ENABLE,
            self::UPDATE_CASCADE_INTERFACE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateStaticRouteAllowableValues()
    {
        return [
            self::UPDATE_STATIC_ROUTE_ENABLE,
            self::UPDATE_STATIC_ROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['addr_mode'] = $data['addr_mode'] ?? null;
        $this->container['srcintf'] = $data['srcintf'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['gateway_ip'] = $data['gateway_ip'] ?? null;
        $this->container['gateway_ip6'] = $data['gateway_ip6'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['source_ip6'] = $data['source_ip6'] ?? null;
        $this->container['http_get'] = $data['http_get'] ?? null;
        $this->container['http_agent'] = $data['http_agent'] ?? null;
        $this->container['http_match'] = $data['http_match'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['probe_timeout'] = $data['probe_timeout'] ?? null;
        $this->container['failtime'] = $data['failtime'] ?? null;
        $this->container['recoverytime'] = $data['recoverytime'] ?? null;
        $this->container['probe_count'] = $data['probe_count'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['packet_size'] = $data['packet_size'] ?? null;
        $this->container['ha_priority'] = $data['ha_priority'] ?? null;
        $this->container['update_cascade_interface'] = $data['update_cascade_interface'] ?? null;
        $this->container['update_static_route'] = $data['update_static_route'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($this->container['addr_mode']) && !in_array($this->container['addr_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_mode', must be one of '%s'",
                $this->container['addr_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['srcintf']) && (mb_strlen($this->container['srcintf']) > 15)) {
            $invalidProperties[] = "invalid value for 'srcintf', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['server']) && (count($this->container['server']) > 0)) {
            $invalidProperties[] = "invalid value for 'server', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['http_get']) && (mb_strlen($this->container['http_get']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_get', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['http_agent']) && (mb_strlen($this->container['http_agent']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_agent', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['http_match']) && (mb_strlen($this->container['http_match']) > 1024)) {
            $invalidProperties[] = "invalid value for 'http_match', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] > 3600000)) {
            $invalidProperties[] = "invalid value for 'interval', must be smaller than or equal to 3600000.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] < 500)) {
            $invalidProperties[] = "invalid value for 'interval', must be bigger than or equal to 500.";
        }

        if (!is_null($this->container['probe_timeout']) && ($this->container['probe_timeout'] > 5000)) {
            $invalidProperties[] = "invalid value for 'probe_timeout', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['probe_timeout']) && ($this->container['probe_timeout'] < 500)) {
            $invalidProperties[] = "invalid value for 'probe_timeout', must be bigger than or equal to 500.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] > 3600)) {
            $invalidProperties[] = "invalid value for 'failtime', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] < 1)) {
            $invalidProperties[] = "invalid value for 'failtime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recoverytime']) && ($this->container['recoverytime'] > 3600)) {
            $invalidProperties[] = "invalid value for 'recoverytime', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['recoverytime']) && ($this->container['recoverytime'] < 1)) {
            $invalidProperties[] = "invalid value for 'recoverytime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['probe_count']) && ($this->container['probe_count'] > 30)) {
            $invalidProperties[] = "invalid value for 'probe_count', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['probe_count']) && ($this->container['probe_count'] < 5)) {
            $invalidProperties[] = "invalid value for 'probe_count', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($this->container['security_mode']) && !in_array($this->container['security_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_mode', must be one of '%s'",
                $this->container['security_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['packet_size']) && ($this->container['packet_size'] > 1024)) {
            $invalidProperties[] = "invalid value for 'packet_size', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['packet_size']) && ($this->container['packet_size'] < 64)) {
            $invalidProperties[] = "invalid value for 'packet_size', must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] > 50)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ha_priority']) && ($this->container['ha_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'ha_priority', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getUpdateCascadeInterfaceAllowableValues();
        if (!is_null($this->container['update_cascade_interface']) && !in_array($this->container['update_cascade_interface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_cascade_interface', must be one of '%s'",
                $this->container['update_cascade_interface'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateStaticRouteAllowableValues();
        if (!is_null($this->container['update_static_route']) && !in_array($this->container['update_static_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_static_route', must be one of '%s'",
                $this->container['update_static_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Link monitor name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject337., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr_mode
     *
     * @return string|null
     */
    public function getAddrMode()
    {
        return $this->container['addr_mode'];
    }

    /**
     * Sets addr_mode
     *
     * @param string|null $addr_mode Address mode (IPv4 or IPv6).    ipv4:IPv4 mode.    ipv6:IPv6 mode.
     *
     * @return self
     */
    public function setAddrMode($addr_mode)
    {
        $allowedValues = $this->getAddrModeAllowableValues();
        if (!is_null($addr_mode) && !in_array($addr_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_mode', must be one of '%s'",
                    $addr_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_mode'] = $addr_mode;

        return $this;
    }

    /**
     * Gets srcintf
     *
     * @return string|null
     */
    public function getSrcintf()
    {
        return $this->container['srcintf'];
    }

    /**
     * Sets srcintf
     *
     * @param string|null $srcintf Interface that receives the traffic to be monitored.
     *
     * @return self
     */
    public function setSrcintf($srcintf)
    {
        if (!is_null($srcintf) && (mb_strlen($srcintf) > 15)) {
            throw new \InvalidArgumentException('invalid length for $srcintf when calling InlineObject337., must be smaller than or equal to 15.');
        }

        $this->container['srcintf'] = $srcintf;

        return $this;
    }

    /**
     * Gets server
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLinkMonitorNameServer[]|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLinkMonitorNameServer[]|null $server IP address of the server(s) to be monitored.
     *
     * @return self
     */
    public function setServer($server)
    {

        if (!is_null($server) && (count($server) > 0)) {
            throw new \InvalidArgumentException('invalid value for $server when calling InlineObject337., number of items must be less than or equal to 0.');
        }
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Protocols used to monitor the server.    ping:PING link monitor.    tcp-echo:TCP echo link monitor.    udp-echo:UDP echo link monitor.    http:HTTP-GET link monitor.    twamp:TWAMP link monitor.
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number of the traffic to be used to monitor the server.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject337., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject337., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets gateway_ip
     *
     * @return string|null
     */
    public function getGatewayIp()
    {
        return $this->container['gateway_ip'];
    }

    /**
     * Sets gateway_ip
     *
     * @param string|null $gateway_ip Gateway IP address used to probe the server.
     *
     * @return self
     */
    public function setGatewayIp($gateway_ip)
    {
        $this->container['gateway_ip'] = $gateway_ip;

        return $this;
    }

    /**
     * Gets gateway_ip6
     *
     * @return string|null
     */
    public function getGatewayIp6()
    {
        return $this->container['gateway_ip6'];
    }

    /**
     * Sets gateway_ip6
     *
     * @param string|null $gateway_ip6 Gateway IPv6 address used to probe the server.
     *
     * @return self
     */
    public function setGatewayIp6($gateway_ip6)
    {
        $this->container['gateway_ip6'] = $gateway_ip6;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address used in packet to the server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_ip6
     *
     * @return string|null
     */
    public function getSourceIp6()
    {
        return $this->container['source_ip6'];
    }

    /**
     * Sets source_ip6
     *
     * @param string|null $source_ip6 Source IPv6 address used in packet to the server.
     *
     * @return self
     */
    public function setSourceIp6($source_ip6)
    {
        $this->container['source_ip6'] = $source_ip6;

        return $this;
    }

    /**
     * Gets http_get
     *
     * @return string|null
     */
    public function getHttpGet()
    {
        return $this->container['http_get'];
    }

    /**
     * Sets http_get
     *
     * @param string|null $http_get If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     *
     * @return self
     */
    public function setHttpGet($http_get)
    {
        if (!is_null($http_get) && (mb_strlen($http_get) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_get when calling InlineObject337., must be smaller than or equal to 1024.');
        }

        $this->container['http_get'] = $http_get;

        return $this;
    }

    /**
     * Gets http_agent
     *
     * @return string|null
     */
    public function getHttpAgent()
    {
        return $this->container['http_agent'];
    }

    /**
     * Sets http_agent
     *
     * @param string|null $http_agent String in the http-agent field in the HTTP header.
     *
     * @return self
     */
    public function setHttpAgent($http_agent)
    {
        if (!is_null($http_agent) && (mb_strlen($http_agent) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_agent when calling InlineObject337., must be smaller than or equal to 1024.');
        }

        $this->container['http_agent'] = $http_agent;

        return $this;
    }

    /**
     * Gets http_match
     *
     * @return string|null
     */
    public function getHttpMatch()
    {
        return $this->container['http_match'];
    }

    /**
     * Sets http_match
     *
     * @param string|null $http_match String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     *
     * @return self
     */
    public function setHttpMatch($http_match)
    {
        if (!is_null($http_match) && (mb_strlen($http_match) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $http_match when calling InlineObject337., must be smaller than or equal to 1024.');
        }

        $this->container['http_match'] = $http_match;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval Detection interval in milliseconds (500 - 3600 * 1000 msec, default = 500).
     *
     * @return self
     */
    public function setInterval($interval)
    {

        if (!is_null($interval) && ($interval > 3600000)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject337., must be smaller than or equal to 3600000.');
        }
        if (!is_null($interval) && ($interval < 500)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject337., must be bigger than or equal to 500.');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets probe_timeout
     *
     * @return int|null
     */
    public function getProbeTimeout()
    {
        return $this->container['probe_timeout'];
    }

    /**
     * Sets probe_timeout
     *
     * @param int|null $probe_timeout Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     *
     * @return self
     */
    public function setProbeTimeout($probe_timeout)
    {

        if (!is_null($probe_timeout) && ($probe_timeout > 5000)) {
            throw new \InvalidArgumentException('invalid value for $probe_timeout when calling InlineObject337., must be smaller than or equal to 5000.');
        }
        if (!is_null($probe_timeout) && ($probe_timeout < 500)) {
            throw new \InvalidArgumentException('invalid value for $probe_timeout when calling InlineObject337., must be bigger than or equal to 500.');
        }

        $this->container['probe_timeout'] = $probe_timeout;

        return $this;
    }

    /**
     * Gets failtime
     *
     * @return int|null
     */
    public function getFailtime()
    {
        return $this->container['failtime'];
    }

    /**
     * Sets failtime
     *
     * @param int|null $failtime Number of retry attempts before the server is considered down (1 - 10, default = 5)
     *
     * @return self
     */
    public function setFailtime($failtime)
    {

        if (!is_null($failtime) && ($failtime > 3600)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling InlineObject337., must be smaller than or equal to 3600.');
        }
        if (!is_null($failtime) && ($failtime < 1)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling InlineObject337., must be bigger than or equal to 1.');
        }

        $this->container['failtime'] = $failtime;

        return $this;
    }

    /**
     * Gets recoverytime
     *
     * @return int|null
     */
    public function getRecoverytime()
    {
        return $this->container['recoverytime'];
    }

    /**
     * Sets recoverytime
     *
     * @param int|null $recoverytime Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     *
     * @return self
     */
    public function setRecoverytime($recoverytime)
    {

        if (!is_null($recoverytime) && ($recoverytime > 3600)) {
            throw new \InvalidArgumentException('invalid value for $recoverytime when calling InlineObject337., must be smaller than or equal to 3600.');
        }
        if (!is_null($recoverytime) && ($recoverytime < 1)) {
            throw new \InvalidArgumentException('invalid value for $recoverytime when calling InlineObject337., must be bigger than or equal to 1.');
        }

        $this->container['recoverytime'] = $recoverytime;

        return $this;
    }

    /**
     * Gets probe_count
     *
     * @return int|null
     */
    public function getProbeCount()
    {
        return $this->container['probe_count'];
    }

    /**
     * Sets probe_count
     *
     * @param int|null $probe_count Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     *
     * @return self
     */
    public function setProbeCount($probe_count)
    {

        if (!is_null($probe_count) && ($probe_count > 30)) {
            throw new \InvalidArgumentException('invalid value for $probe_count when calling InlineObject337., must be smaller than or equal to 30.');
        }
        if (!is_null($probe_count) && ($probe_count < 5)) {
            throw new \InvalidArgumentException('invalid value for $probe_count when calling InlineObject337., must be bigger than or equal to 5.');
        }

        $this->container['probe_count'] = $probe_count;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode Twamp controller security mode.    none:Unauthenticated mode.    authentication:Authenticated mode.
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $allowedValues = $this->getSecurityModeAllowableValues();
        if (!is_null($security_mode) && !in_array($security_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_mode', must be one of '%s'",
                    $security_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Twamp controller password in authentication mode
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets packet_size
     *
     * @return int|null
     */
    public function getPacketSize()
    {
        return $this->container['packet_size'];
    }

    /**
     * Sets packet_size
     *
     * @param int|null $packet_size Packet size of a twamp test session,
     *
     * @return self
     */
    public function setPacketSize($packet_size)
    {

        if (!is_null($packet_size) && ($packet_size > 1024)) {
            throw new \InvalidArgumentException('invalid value for $packet_size when calling InlineObject337., must be smaller than or equal to 1024.');
        }
        if (!is_null($packet_size) && ($packet_size < 64)) {
            throw new \InvalidArgumentException('invalid value for $packet_size when calling InlineObject337., must be bigger than or equal to 64.');
        }

        $this->container['packet_size'] = $packet_size;

        return $this;
    }

    /**
     * Gets ha_priority
     *
     * @return int|null
     */
    public function getHaPriority()
    {
        return $this->container['ha_priority'];
    }

    /**
     * Sets ha_priority
     *
     * @param int|null $ha_priority HA election priority (1 - 50).
     *
     * @return self
     */
    public function setHaPriority($ha_priority)
    {

        if (!is_null($ha_priority) && ($ha_priority > 50)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling InlineObject337., must be smaller than or equal to 50.');
        }
        if (!is_null($ha_priority) && ($ha_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $ha_priority when calling InlineObject337., must be bigger than or equal to 1.');
        }

        $this->container['ha_priority'] = $ha_priority;

        return $this;
    }

    /**
     * Gets update_cascade_interface
     *
     * @return string|null
     */
    public function getUpdateCascadeInterface()
    {
        return $this->container['update_cascade_interface'];
    }

    /**
     * Sets update_cascade_interface
     *
     * @param string|null $update_cascade_interface Enable/disable update cascade interface.    enable:Enable update cascade interface.    disable:Disable update cascade interface.
     *
     * @return self
     */
    public function setUpdateCascadeInterface($update_cascade_interface)
    {
        $allowedValues = $this->getUpdateCascadeInterfaceAllowableValues();
        if (!is_null($update_cascade_interface) && !in_array($update_cascade_interface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_cascade_interface', must be one of '%s'",
                    $update_cascade_interface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_cascade_interface'] = $update_cascade_interface;

        return $this;
    }

    /**
     * Gets update_static_route
     *
     * @return string|null
     */
    public function getUpdateStaticRoute()
    {
        return $this->container['update_static_route'];
    }

    /**
     * Sets update_static_route
     *
     * @param string|null $update_static_route Enable/disable updating the static route.    enable:Enable updating the static route.    disable:Disable updating the static route.
     *
     * @return self
     */
    public function setUpdateStaticRoute($update_static_route)
    {
        $allowedValues = $this->getUpdateStaticRouteAllowableValues();
        if (!is_null($update_static_route) && !in_array($update_static_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_static_route', must be one of '%s'",
                    $update_static_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_static_route'] = $update_static_route;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this link monitor.    enable:Enable this link monitor.    disable:Disable this link monitor.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


