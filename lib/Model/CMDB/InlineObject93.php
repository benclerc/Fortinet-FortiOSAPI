<?php
/**
 * InlineObject93
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject93 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject93 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_93';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'use_management_vdom' => 'string',
        'status' => 'string',
        'ips_archive' => 'string',
        'server' => 'string',
        'certificate_verification' => 'string',
        'serial' => '\Fortigate\FortiOS\Model\CMDB\LogFortianalyzerOverrideSettingSerial[]',
        'access_config' => 'string',
        'hmac_algorithm' => 'string',
        'enc_algorithm' => 'string',
        'ssl_min_proto_version' => 'string',
        'conn_timeout' => 'int',
        'monitor_keepalive_period' => 'int',
        'monitor_failure_retry_period' => 'int',
        'certificate' => 'string',
        'source_ip' => 'string',
        'upload_option' => 'string',
        'upload_interval' => 'string',
        'upload_day' => 'string',
        'upload_time' => 'string',
        'reliable' => 'string',
        'priority' => 'string',
        'max_log_rate' => 'int',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'use_management_vdom' => null,
        'status' => null,
        'ips_archive' => null,
        'server' => null,
        'certificate_verification' => null,
        'serial' => null,
        'access_config' => null,
        'hmac_algorithm' => null,
        'enc_algorithm' => null,
        'ssl_min_proto_version' => null,
        'conn_timeout' => null,
        'monitor_keepalive_period' => null,
        'monitor_failure_retry_period' => null,
        'certificate' => null,
        'source_ip' => null,
        'upload_option' => null,
        'upload_interval' => null,
        'upload_day' => null,
        'upload_time' => null,
        'reliable' => null,
        'priority' => null,
        'max_log_rate' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'use_management_vdom' => 'use-management-vdom',
        'status' => 'status',
        'ips_archive' => 'ips-archive',
        'server' => 'server',
        'certificate_verification' => 'certificate-verification',
        'serial' => 'serial',
        'access_config' => 'access-config',
        'hmac_algorithm' => 'hmac-algorithm',
        'enc_algorithm' => 'enc-algorithm',
        'ssl_min_proto_version' => 'ssl-min-proto-version',
        'conn_timeout' => 'conn-timeout',
        'monitor_keepalive_period' => 'monitor-keepalive-period',
        'monitor_failure_retry_period' => 'monitor-failure-retry-period',
        'certificate' => 'certificate',
        'source_ip' => 'source-ip',
        'upload_option' => 'upload-option',
        'upload_interval' => 'upload-interval',
        'upload_day' => 'upload-day',
        'upload_time' => 'upload-time',
        'reliable' => 'reliable',
        'priority' => 'priority',
        'max_log_rate' => 'max-log-rate',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'use_management_vdom' => 'setUseManagementVdom',
        'status' => 'setStatus',
        'ips_archive' => 'setIpsArchive',
        'server' => 'setServer',
        'certificate_verification' => 'setCertificateVerification',
        'serial' => 'setSerial',
        'access_config' => 'setAccessConfig',
        'hmac_algorithm' => 'setHmacAlgorithm',
        'enc_algorithm' => 'setEncAlgorithm',
        'ssl_min_proto_version' => 'setSslMinProtoVersion',
        'conn_timeout' => 'setConnTimeout',
        'monitor_keepalive_period' => 'setMonitorKeepalivePeriod',
        'monitor_failure_retry_period' => 'setMonitorFailureRetryPeriod',
        'certificate' => 'setCertificate',
        'source_ip' => 'setSourceIp',
        'upload_option' => 'setUploadOption',
        'upload_interval' => 'setUploadInterval',
        'upload_day' => 'setUploadDay',
        'upload_time' => 'setUploadTime',
        'reliable' => 'setReliable',
        'priority' => 'setPriority',
        'max_log_rate' => 'setMaxLogRate',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'use_management_vdom' => 'getUseManagementVdom',
        'status' => 'getStatus',
        'ips_archive' => 'getIpsArchive',
        'server' => 'getServer',
        'certificate_verification' => 'getCertificateVerification',
        'serial' => 'getSerial',
        'access_config' => 'getAccessConfig',
        'hmac_algorithm' => 'getHmacAlgorithm',
        'enc_algorithm' => 'getEncAlgorithm',
        'ssl_min_proto_version' => 'getSslMinProtoVersion',
        'conn_timeout' => 'getConnTimeout',
        'monitor_keepalive_period' => 'getMonitorKeepalivePeriod',
        'monitor_failure_retry_period' => 'getMonitorFailureRetryPeriod',
        'certificate' => 'getCertificate',
        'source_ip' => 'getSourceIp',
        'upload_option' => 'getUploadOption',
        'upload_interval' => 'getUploadInterval',
        'upload_day' => 'getUploadDay',
        'upload_time' => 'getUploadTime',
        'reliable' => 'getReliable',
        'priority' => 'getPriority',
        'max_log_rate' => 'getMaxLogRate',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const USE_MANAGEMENT_VDOM_ENABLE = 'enable';
    const USE_MANAGEMENT_VDOM_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const IPS_ARCHIVE_ENABLE = 'enable';
    const IPS_ARCHIVE_DISABLE = 'disable';
    const CERTIFICATE_VERIFICATION_ENABLE = 'enable';
    const CERTIFICATE_VERIFICATION_DISABLE = 'disable';
    const ACCESS_CONFIG_ENABLE = 'enable';
    const ACCESS_CONFIG_DISABLE = 'disable';
    const HMAC_ALGORITHM_SHA256 = 'sha256';
    const HMAC_ALGORITHM_SHA1 = 'sha1';
    const ENC_ALGORITHM_HIGH_MEDIUM = 'high-medium';
    const ENC_ALGORITHM_HIGH = 'high';
    const ENC_ALGORITHM_LOW = 'low';
    const SSL_MIN_PROTO_VERSION__DEFAULT = 'default';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    const UPLOAD_OPTION_STORE_AND_UPLOAD = 'store-and-upload';
    const UPLOAD_OPTION_REALTIME = 'realtime';
    const UPLOAD_OPTION__1_MINUTE = '1-minute';
    const UPLOAD_OPTION__5_MINUTE = '5-minute';
    const UPLOAD_INTERVAL_DAILY = 'daily';
    const UPLOAD_INTERVAL_WEEKLY = 'weekly';
    const UPLOAD_INTERVAL_MONTHLY = 'monthly';
    const RELIABLE_ENABLE = 'enable';
    const RELIABLE_DISABLE = 'disable';
    const PRIORITY__DEFAULT = 'default';
    const PRIORITY_LOW = 'low';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseManagementVdomAllowableValues()
    {
        return [
            self::USE_MANAGEMENT_VDOM_ENABLE,
            self::USE_MANAGEMENT_VDOM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsArchiveAllowableValues()
    {
        return [
            self::IPS_ARCHIVE_ENABLE,
            self::IPS_ARCHIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCertificateVerificationAllowableValues()
    {
        return [
            self::CERTIFICATE_VERIFICATION_ENABLE,
            self::CERTIFICATE_VERIFICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessConfigAllowableValues()
    {
        return [
            self::ACCESS_CONFIG_ENABLE,
            self::ACCESS_CONFIG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHmacAlgorithmAllowableValues()
    {
        return [
            self::HMAC_ALGORITHM_SHA256,
            self::HMAC_ALGORITHM_SHA1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncAlgorithmAllowableValues()
    {
        return [
            self::ENC_ALGORITHM_HIGH_MEDIUM,
            self::ENC_ALGORITHM_HIGH,
            self::ENC_ALGORITHM_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION__DEFAULT,
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadOptionAllowableValues()
    {
        return [
            self::UPLOAD_OPTION_STORE_AND_UPLOAD,
            self::UPLOAD_OPTION_REALTIME,
            self::UPLOAD_OPTION__1_MINUTE,
            self::UPLOAD_OPTION__5_MINUTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadIntervalAllowableValues()
    {
        return [
            self::UPLOAD_INTERVAL_DAILY,
            self::UPLOAD_INTERVAL_WEEKLY,
            self::UPLOAD_INTERVAL_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReliableAllowableValues()
    {
        return [
            self::RELIABLE_ENABLE,
            self::RELIABLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY__DEFAULT,
            self::PRIORITY_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_management_vdom'] = $data['use_management_vdom'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['ips_archive'] = $data['ips_archive'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['certificate_verification'] = $data['certificate_verification'] ?? null;
        $this->container['serial'] = $data['serial'] ?? null;
        $this->container['access_config'] = $data['access_config'] ?? null;
        $this->container['hmac_algorithm'] = $data['hmac_algorithm'] ?? null;
        $this->container['enc_algorithm'] = $data['enc_algorithm'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
        $this->container['conn_timeout'] = $data['conn_timeout'] ?? null;
        $this->container['monitor_keepalive_period'] = $data['monitor_keepalive_period'] ?? null;
        $this->container['monitor_failure_retry_period'] = $data['monitor_failure_retry_period'] ?? null;
        $this->container['certificate'] = $data['certificate'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['upload_option'] = $data['upload_option'] ?? null;
        $this->container['upload_interval'] = $data['upload_interval'] ?? null;
        $this->container['upload_day'] = $data['upload_day'] ?? null;
        $this->container['upload_time'] = $data['upload_time'] ?? null;
        $this->container['reliable'] = $data['reliable'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['max_log_rate'] = $data['max_log_rate'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUseManagementVdomAllowableValues();
        if (!is_null($this->container['use_management_vdom']) && !in_array($this->container['use_management_vdom'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_management_vdom', must be one of '%s'",
                $this->container['use_management_vdom'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsArchiveAllowableValues();
        if (!is_null($this->container['ips_archive']) && !in_array($this->container['ips_archive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ips_archive', must be one of '%s'",
                $this->container['ips_archive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 127)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getCertificateVerificationAllowableValues();
        if (!is_null($this->container['certificate_verification']) && !in_array($this->container['certificate_verification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'certificate_verification', must be one of '%s'",
                $this->container['certificate_verification'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['serial']) && (count($this->container['serial']) > 8)) {
            $invalidProperties[] = "invalid value for 'serial', number of items must be less than or equal to 8.";
        }

        $allowedValues = $this->getAccessConfigAllowableValues();
        if (!is_null($this->container['access_config']) && !in_array($this->container['access_config'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_config', must be one of '%s'",
                $this->container['access_config'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHmacAlgorithmAllowableValues();
        if (!is_null($this->container['hmac_algorithm']) && !in_array($this->container['hmac_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hmac_algorithm', must be one of '%s'",
                $this->container['hmac_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncAlgorithmAllowableValues();
        if (!is_null($this->container['enc_algorithm']) && !in_array($this->container['enc_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enc_algorithm', must be one of '%s'",
                $this->container['enc_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['conn_timeout']) && ($this->container['conn_timeout'] > 3600)) {
            $invalidProperties[] = "invalid value for 'conn_timeout', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['conn_timeout']) && ($this->container['conn_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'conn_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['monitor_keepalive_period']) && ($this->container['monitor_keepalive_period'] > 120)) {
            $invalidProperties[] = "invalid value for 'monitor_keepalive_period', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['monitor_keepalive_period']) && ($this->container['monitor_keepalive_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'monitor_keepalive_period', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['monitor_failure_retry_period']) && ($this->container['monitor_failure_retry_period'] > 86400)) {
            $invalidProperties[] = "invalid value for 'monitor_failure_retry_period', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['monitor_failure_retry_period']) && ($this->container['monitor_failure_retry_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'monitor_failure_retry_period', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['certificate']) && (mb_strlen($this->container['certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['source_ip']) && (mb_strlen($this->container['source_ip']) > 63)) {
            $invalidProperties[] = "invalid value for 'source_ip', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getUploadOptionAllowableValues();
        if (!is_null($this->container['upload_option']) && !in_array($this->container['upload_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_option', must be one of '%s'",
                $this->container['upload_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadIntervalAllowableValues();
        if (!is_null($this->container['upload_interval']) && !in_array($this->container['upload_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upload_interval', must be one of '%s'",
                $this->container['upload_interval'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReliableAllowableValues();
        if (!is_null($this->container['reliable']) && !in_array($this->container['reliable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reliable', must be one of '%s'",
                $this->container['reliable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_log_rate']) && ($this->container['max_log_rate'] > 100000)) {
            $invalidProperties[] = "invalid value for 'max_log_rate', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['max_log_rate']) && ($this->container['max_log_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_log_rate', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets use_management_vdom
     *
     * @return string|null
     */
    public function getUseManagementVdom()
    {
        return $this->container['use_management_vdom'];
    }

    /**
     * Sets use_management_vdom
     *
     * @param string|null $use_management_vdom Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer.    enable:Enable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer.    disable:Disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer.
     *
     * @return self
     */
    public function setUseManagementVdom($use_management_vdom)
    {
        $allowedValues = $this->getUseManagementVdomAllowableValues();
        if (!is_null($use_management_vdom) && !in_array($use_management_vdom, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_management_vdom', must be one of '%s'",
                    $use_management_vdom,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_management_vdom'] = $use_management_vdom;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable logging to FortiAnalyzer.    enable:Enable logging to FortiAnalyzer.    disable:Disable logging to FortiAnalyzer.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ips_archive
     *
     * @return string|null
     */
    public function getIpsArchive()
    {
        return $this->container['ips_archive'];
    }

    /**
     * Sets ips_archive
     *
     * @param string|null $ips_archive Enable/disable IPS packet archive logging.    enable:Enable IPS packet archive logging.    disable:Disable IPS packet archive logging.
     *
     * @return self
     */
    public function setIpsArchive($ips_archive)
    {
        $allowedValues = $this->getIpsArchiveAllowableValues();
        if (!is_null($ips_archive) && !in_array($ips_archive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ips_archive', must be one of '%s'",
                    $ips_archive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ips_archive'] = $ips_archive;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server The remote FortiAnalyzer.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 127)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject93., must be smaller than or equal to 127.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets certificate_verification
     *
     * @return string|null
     */
    public function getCertificateVerification()
    {
        return $this->container['certificate_verification'];
    }

    /**
     * Sets certificate_verification
     *
     * @param string|null $certificate_verification Enable/disable identity verification of FortiAnalyzer by use of certificate.    enable:Enable identity verification of FortiAnalyzer by use of certificate.    disable:Disable identity verification of FortiAnalyzer by use of certificate.
     *
     * @return self
     */
    public function setCertificateVerification($certificate_verification)
    {
        $allowedValues = $this->getCertificateVerificationAllowableValues();
        if (!is_null($certificate_verification) && !in_array($certificate_verification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'certificate_verification', must be one of '%s'",
                    $certificate_verification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['certificate_verification'] = $certificate_verification;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogFortianalyzerOverrideSettingSerial[]|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogFortianalyzerOverrideSettingSerial[]|null $serial Serial numbers of the FortiAnalyzer.
     *
     * @return self
     */
    public function setSerial($serial)
    {

        if (!is_null($serial) && (count($serial) > 8)) {
            throw new \InvalidArgumentException('invalid value for $serial when calling InlineObject93., number of items must be less than or equal to 8.');
        }
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets access_config
     *
     * @return string|null
     */
    public function getAccessConfig()
    {
        return $this->container['access_config'];
    }

    /**
     * Sets access_config
     *
     * @param string|null $access_config Enable/disable FortiAnalyzer access to configuration and data.    enable:Enable FortiAnalyzer access to configuration and data.    disable:Disable FortiAnalyzer access to configuration and data.
     *
     * @return self
     */
    public function setAccessConfig($access_config)
    {
        $allowedValues = $this->getAccessConfigAllowableValues();
        if (!is_null($access_config) && !in_array($access_config, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_config', must be one of '%s'",
                    $access_config,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_config'] = $access_config;

        return $this;
    }

    /**
     * Gets hmac_algorithm
     *
     * @return string|null
     */
    public function getHmacAlgorithm()
    {
        return $this->container['hmac_algorithm'];
    }

    /**
     * Sets hmac_algorithm
     *
     * @param string|null $hmac_algorithm FortiAnalyzer IPsec tunnel HMAC algorithm.    sha256:Use SHA256 as HMAC algorithm.    sha1:Step down to SHA1 as the HMAC algorithm.
     *
     * @return self
     */
    public function setHmacAlgorithm($hmac_algorithm)
    {
        $allowedValues = $this->getHmacAlgorithmAllowableValues();
        if (!is_null($hmac_algorithm) && !in_array($hmac_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hmac_algorithm', must be one of '%s'",
                    $hmac_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hmac_algorithm'] = $hmac_algorithm;

        return $this;
    }

    /**
     * Gets enc_algorithm
     *
     * @return string|null
     */
    public function getEncAlgorithm()
    {
        return $this->container['enc_algorithm'];
    }

    /**
     * Sets enc_algorithm
     *
     * @param string|null $enc_algorithm Configure the level of SSL protection for secure communication with FortiAnalyzer.    high-medium:Encrypt logs using high and medium encryption algorithms.    high:Encrypt logs using high encryption algorithms.    low:Encrypt logs using all encryption algorithms.
     *
     * @return self
     */
    public function setEncAlgorithm($enc_algorithm)
    {
        $allowedValues = $this->getEncAlgorithmAllowableValues();
        if (!is_null($enc_algorithm) && !in_array($enc_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enc_algorithm', must be one of '%s'",
                    $enc_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enc_algorithm'] = $enc_algorithm;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).    default:Follow system global setting.    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }

    /**
     * Gets conn_timeout
     *
     * @return int|null
     */
    public function getConnTimeout()
    {
        return $this->container['conn_timeout'];
    }

    /**
     * Sets conn_timeout
     *
     * @param int|null $conn_timeout FortiAnalyzer connection time-out in seconds (for status and log buffer).
     *
     * @return self
     */
    public function setConnTimeout($conn_timeout)
    {

        if (!is_null($conn_timeout) && ($conn_timeout > 3600)) {
            throw new \InvalidArgumentException('invalid value for $conn_timeout when calling InlineObject93., must be smaller than or equal to 3600.');
        }
        if (!is_null($conn_timeout) && ($conn_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $conn_timeout when calling InlineObject93., must be bigger than or equal to 1.');
        }

        $this->container['conn_timeout'] = $conn_timeout;

        return $this;
    }

    /**
     * Gets monitor_keepalive_period
     *
     * @return int|null
     */
    public function getMonitorKeepalivePeriod()
    {
        return $this->container['monitor_keepalive_period'];
    }

    /**
     * Sets monitor_keepalive_period
     *
     * @param int|null $monitor_keepalive_period Time between OFTP keepalives in seconds (for status and log buffer).
     *
     * @return self
     */
    public function setMonitorKeepalivePeriod($monitor_keepalive_period)
    {

        if (!is_null($monitor_keepalive_period) && ($monitor_keepalive_period > 120)) {
            throw new \InvalidArgumentException('invalid value for $monitor_keepalive_period when calling InlineObject93., must be smaller than or equal to 120.');
        }
        if (!is_null($monitor_keepalive_period) && ($monitor_keepalive_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $monitor_keepalive_period when calling InlineObject93., must be bigger than or equal to 1.');
        }

        $this->container['monitor_keepalive_period'] = $monitor_keepalive_period;

        return $this;
    }

    /**
     * Gets monitor_failure_retry_period
     *
     * @return int|null
     */
    public function getMonitorFailureRetryPeriod()
    {
        return $this->container['monitor_failure_retry_period'];
    }

    /**
     * Sets monitor_failure_retry_period
     *
     * @param int|null $monitor_failure_retry_period Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
     *
     * @return self
     */
    public function setMonitorFailureRetryPeriod($monitor_failure_retry_period)
    {

        if (!is_null($monitor_failure_retry_period) && ($monitor_failure_retry_period > 86400)) {
            throw new \InvalidArgumentException('invalid value for $monitor_failure_retry_period when calling InlineObject93., must be smaller than or equal to 86400.');
        }
        if (!is_null($monitor_failure_retry_period) && ($monitor_failure_retry_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $monitor_failure_retry_period when calling InlineObject93., must be bigger than or equal to 1.');
        }

        $this->container['monitor_failure_retry_period'] = $monitor_failure_retry_period;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate Certificate used to communicate with FortiAnalyzer.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (!is_null($certificate) && (mb_strlen($certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certificate when calling InlineObject93., must be smaller than or equal to 35.');
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        if (!is_null($source_ip) && (mb_strlen($source_ip) > 63)) {
            throw new \InvalidArgumentException('invalid length for $source_ip when calling InlineObject93., must be smaller than or equal to 63.');
        }

        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets upload_option
     *
     * @return string|null
     */
    public function getUploadOption()
    {
        return $this->container['upload_option'];
    }

    /**
     * Sets upload_option
     *
     * @param string|null $upload_option Enable/disable logging to hard disk and then uploading to FortiAnalyzer.    store-and-upload:Log to hard disk and then upload to FortiAnalyzer.    realtime:Log directly to FortiAnalyzer in real time.    1-minute:Log directly to FortiAnalyzer at least every 1 minute.    5-minute:Log directly to FortiAnalyzer at least every 5 minutes.
     *
     * @return self
     */
    public function setUploadOption($upload_option)
    {
        $allowedValues = $this->getUploadOptionAllowableValues();
        if (!is_null($upload_option) && !in_array($upload_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_option', must be one of '%s'",
                    $upload_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_option'] = $upload_option;

        return $this;
    }

    /**
     * Gets upload_interval
     *
     * @return string|null
     */
    public function getUploadInterval()
    {
        return $this->container['upload_interval'];
    }

    /**
     * Sets upload_interval
     *
     * @param string|null $upload_interval Frequency to upload log files to FortiAnalyzer.    daily:Upload log files to FortiAnalyzer once a day.    weekly:Upload log files to FortiAnalyzer once a week.    monthly:Upload log files to FortiAnalyzer once a month.
     *
     * @return self
     */
    public function setUploadInterval($upload_interval)
    {
        $allowedValues = $this->getUploadIntervalAllowableValues();
        if (!is_null($upload_interval) && !in_array($upload_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upload_interval', must be one of '%s'",
                    $upload_interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_interval'] = $upload_interval;

        return $this;
    }

    /**
     * Gets upload_day
     *
     * @return string|null
     */
    public function getUploadDay()
    {
        return $this->container['upload_day'];
    }

    /**
     * Sets upload_day
     *
     * @param string|null $upload_day Day of week (month) to upload logs.
     *
     * @return self
     */
    public function setUploadDay($upload_day)
    {
        $this->container['upload_day'] = $upload_day;

        return $this;
    }

    /**
     * Gets upload_time
     *
     * @return string|null
     */
    public function getUploadTime()
    {
        return $this->container['upload_time'];
    }

    /**
     * Sets upload_time
     *
     * @param string|null $upload_time Time to upload logs (hh:mm).
     *
     * @return self
     */
    public function setUploadTime($upload_time)
    {
        $this->container['upload_time'] = $upload_time;

        return $this;
    }

    /**
     * Gets reliable
     *
     * @return string|null
     */
    public function getReliable()
    {
        return $this->container['reliable'];
    }

    /**
     * Sets reliable
     *
     * @param string|null $reliable Enable/disable reliable logging to FortiAnalyzer.    enable:Enable reliable logging to FortiAnalyzer.    disable:Disable reliable logging to FortiAnalyzer.
     *
     * @return self
     */
    public function setReliable($reliable)
    {
        $allowedValues = $this->getReliableAllowableValues();
        if (!is_null($reliable) && !in_array($reliable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reliable', must be one of '%s'",
                    $reliable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reliable'] = $reliable;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority Set log transmission priority.    default:Set FortiAnalyzer log transmission priority to default.    low:Set FortiAnalyzer log transmission priority to low.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets max_log_rate
     *
     * @return int|null
     */
    public function getMaxLogRate()
    {
        return $this->container['max_log_rate'];
    }

    /**
     * Sets max_log_rate
     *
     * @param int|null $max_log_rate FortiAnalyzer maximum log rate in MBps (0 = unlimited).
     *
     * @return self
     */
    public function setMaxLogRate($max_log_rate)
    {

        if (!is_null($max_log_rate) && ($max_log_rate > 100000)) {
            throw new \InvalidArgumentException('invalid value for $max_log_rate when calling InlineObject93., must be smaller than or equal to 100000.');
        }
        if (!is_null($max_log_rate) && ($max_log_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_log_rate when calling InlineObject93., must be bigger than or equal to 0.');
        }

        $this->container['max_log_rate'] = $max_log_rate;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject93., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


