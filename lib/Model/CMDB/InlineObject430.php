<?php
/**
 * InlineObject430
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject430 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject430 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_430';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'pac_data' => 'string',
        'principal' => 'string',
        'ldap_server' => '\Fortigate\FortiOS\Model\CMDB\UserDomainControllerNameLdapServer[]',
        'keytab' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'pac_data' => null,
        'principal' => null,
        'ldap_server' => null,
        'keytab' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'pac_data' => 'pac-data',
        'principal' => 'principal',
        'ldap_server' => 'ldap-server',
        'keytab' => 'keytab'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'pac_data' => 'setPacData',
        'principal' => 'setPrincipal',
        'ldap_server' => 'setLdapServer',
        'keytab' => 'setKeytab'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'pac_data' => 'getPacData',
        'principal' => 'getPrincipal',
        'ldap_server' => 'getLdapServer',
        'keytab' => 'getKeytab'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAC_DATA_ENABLE = 'enable';
    const PAC_DATA_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPacDataAllowableValues()
    {
        return [
            self::PAC_DATA_ENABLE,
            self::PAC_DATA_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['pac_data'] = $data['pac_data'] ?? null;
        $this->container['principal'] = $data['principal'] ?? null;
        $this->container['ldap_server'] = $data['ldap_server'] ?? null;
        $this->container['keytab'] = $data['keytab'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getPacDataAllowableValues();
        if (!is_null($this->container['pac_data']) && !in_array($this->container['pac_data'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pac_data', must be one of '%s'",
                $this->container['pac_data'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['principal']) && (mb_strlen($this->container['principal']) > 511)) {
            $invalidProperties[] = "invalid value for 'principal', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['ldap_server']) && (count($this->container['ldap_server']) > 0)) {
            $invalidProperties[] = "invalid value for 'ldap_server', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['keytab']) && (mb_strlen($this->container['keytab']) > 8191)) {
            $invalidProperties[] = "invalid value for 'keytab', the character length must be smaller than or equal to 8191.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Kerberos keytab entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject430., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pac_data
     *
     * @return string|null
     */
    public function getPacData()
    {
        return $this->container['pac_data'];
    }

    /**
     * Sets pac_data
     *
     * @param string|null $pac_data Enable/disable parsing PAC data in the ticket.    enable:Enable parsing PAC data in the ticket.    disable:Disable parsing PAC data in the ticket.
     *
     * @return self
     */
    public function setPacData($pac_data)
    {
        $allowedValues = $this->getPacDataAllowableValues();
        if (!is_null($pac_data) && !in_array($pac_data, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pac_data', must be one of '%s'",
                    $pac_data,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pac_data'] = $pac_data;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string|null
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string|null $principal Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (!is_null($principal) && (mb_strlen($principal) > 511)) {
            throw new \InvalidArgumentException('invalid length for $principal when calling InlineObject430., must be smaller than or equal to 511.');
        }

        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return \Fortigate\FortiOS\Model\CMDB\UserDomainControllerNameLdapServer[]|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param \Fortigate\FortiOS\Model\CMDB\UserDomainControllerNameLdapServer[]|null $ldap_server LDAP server name(s).
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {

        if (!is_null($ldap_server) && (count($ldap_server) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ldap_server when calling InlineObject430., number of items must be less than or equal to 0.');
        }
        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets keytab
     *
     * @return string|null
     */
    public function getKeytab()
    {
        return $this->container['keytab'];
    }

    /**
     * Sets keytab
     *
     * @param string|null $keytab base64 coded keytab file containing a pre-shared key.
     *
     * @return self
     */
    public function setKeytab($keytab)
    {
        if (!is_null($keytab) && (mb_strlen($keytab) > 8191)) {
            throw new \InvalidArgumentException('invalid length for $keytab when calling InlineObject430., must be smaller than or equal to 8191.');
        }

        $this->container['keytab'] = $keytab;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


