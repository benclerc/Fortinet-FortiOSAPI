<?php
/**
 * LogThreatWeightMalware
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * LogThreatWeightMalware Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LogThreatWeightMalware implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_log_threat_weight_malware';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'virus_infected' => 'string',
        'file_blocked' => 'string',
        'command_blocked' => 'string',
        'oversized' => 'string',
        'virus_scan_error' => 'string',
        'switch_proto' => 'string',
        'mimefragmented' => 'string',
        'virus_file_type_executable' => 'string',
        'virus_outbreak_prevention' => 'string',
        'content_disarm' => 'string',
        'malware_list' => 'string',
        'fsa_malicious' => 'string',
        'fsa_high_risk' => 'string',
        'fsa_medium_risk' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'virus_infected' => null,
        'file_blocked' => null,
        'command_blocked' => null,
        'oversized' => null,
        'virus_scan_error' => null,
        'switch_proto' => null,
        'mimefragmented' => null,
        'virus_file_type_executable' => null,
        'virus_outbreak_prevention' => null,
        'content_disarm' => null,
        'malware_list' => null,
        'fsa_malicious' => null,
        'fsa_high_risk' => null,
        'fsa_medium_risk' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'virus_infected' => 'virus-infected',
        'file_blocked' => 'file-blocked',
        'command_blocked' => 'command-blocked',
        'oversized' => 'oversized',
        'virus_scan_error' => 'virus-scan-error',
        'switch_proto' => 'switch-proto',
        'mimefragmented' => 'mimefragmented',
        'virus_file_type_executable' => 'virus-file-type-executable',
        'virus_outbreak_prevention' => 'virus-outbreak-prevention',
        'content_disarm' => 'content-disarm',
        'malware_list' => 'malware-list',
        'fsa_malicious' => 'fsa-malicious',
        'fsa_high_risk' => 'fsa-high-risk',
        'fsa_medium_risk' => 'fsa-medium-risk'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'virus_infected' => 'setVirusInfected',
        'file_blocked' => 'setFileBlocked',
        'command_blocked' => 'setCommandBlocked',
        'oversized' => 'setOversized',
        'virus_scan_error' => 'setVirusScanError',
        'switch_proto' => 'setSwitchProto',
        'mimefragmented' => 'setMimefragmented',
        'virus_file_type_executable' => 'setVirusFileTypeExecutable',
        'virus_outbreak_prevention' => 'setVirusOutbreakPrevention',
        'content_disarm' => 'setContentDisarm',
        'malware_list' => 'setMalwareList',
        'fsa_malicious' => 'setFsaMalicious',
        'fsa_high_risk' => 'setFsaHighRisk',
        'fsa_medium_risk' => 'setFsaMediumRisk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'virus_infected' => 'getVirusInfected',
        'file_blocked' => 'getFileBlocked',
        'command_blocked' => 'getCommandBlocked',
        'oversized' => 'getOversized',
        'virus_scan_error' => 'getVirusScanError',
        'switch_proto' => 'getSwitchProto',
        'mimefragmented' => 'getMimefragmented',
        'virus_file_type_executable' => 'getVirusFileTypeExecutable',
        'virus_outbreak_prevention' => 'getVirusOutbreakPrevention',
        'content_disarm' => 'getContentDisarm',
        'malware_list' => 'getMalwareList',
        'fsa_malicious' => 'getFsaMalicious',
        'fsa_high_risk' => 'getFsaHighRisk',
        'fsa_medium_risk' => 'getFsaMediumRisk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VIRUS_INFECTED_DISABLE = 'disable';
    const VIRUS_INFECTED_LOW = 'low';
    const VIRUS_INFECTED_MEDIUM = 'medium';
    const VIRUS_INFECTED_HIGH = 'high';
    const VIRUS_INFECTED_CRITICAL = 'critical';
    const FILE_BLOCKED_DISABLE = 'disable';
    const FILE_BLOCKED_LOW = 'low';
    const FILE_BLOCKED_MEDIUM = 'medium';
    const FILE_BLOCKED_HIGH = 'high';
    const FILE_BLOCKED_CRITICAL = 'critical';
    const COMMAND_BLOCKED_DISABLE = 'disable';
    const COMMAND_BLOCKED_LOW = 'low';
    const COMMAND_BLOCKED_MEDIUM = 'medium';
    const COMMAND_BLOCKED_HIGH = 'high';
    const COMMAND_BLOCKED_CRITICAL = 'critical';
    const OVERSIZED_DISABLE = 'disable';
    const OVERSIZED_LOW = 'low';
    const OVERSIZED_MEDIUM = 'medium';
    const OVERSIZED_HIGH = 'high';
    const OVERSIZED_CRITICAL = 'critical';
    const VIRUS_SCAN_ERROR_DISABLE = 'disable';
    const VIRUS_SCAN_ERROR_LOW = 'low';
    const VIRUS_SCAN_ERROR_MEDIUM = 'medium';
    const VIRUS_SCAN_ERROR_HIGH = 'high';
    const VIRUS_SCAN_ERROR_CRITICAL = 'critical';
    const SWITCH_PROTO_DISABLE = 'disable';
    const SWITCH_PROTO_LOW = 'low';
    const SWITCH_PROTO_MEDIUM = 'medium';
    const SWITCH_PROTO_HIGH = 'high';
    const SWITCH_PROTO_CRITICAL = 'critical';
    const MIMEFRAGMENTED_DISABLE = 'disable';
    const MIMEFRAGMENTED_LOW = 'low';
    const MIMEFRAGMENTED_MEDIUM = 'medium';
    const MIMEFRAGMENTED_HIGH = 'high';
    const MIMEFRAGMENTED_CRITICAL = 'critical';
    const VIRUS_FILE_TYPE_EXECUTABLE_DISABLE = 'disable';
    const VIRUS_FILE_TYPE_EXECUTABLE_LOW = 'low';
    const VIRUS_FILE_TYPE_EXECUTABLE_MEDIUM = 'medium';
    const VIRUS_FILE_TYPE_EXECUTABLE_HIGH = 'high';
    const VIRUS_FILE_TYPE_EXECUTABLE_CRITICAL = 'critical';
    const VIRUS_OUTBREAK_PREVENTION_DISABLE = 'disable';
    const VIRUS_OUTBREAK_PREVENTION_LOW = 'low';
    const VIRUS_OUTBREAK_PREVENTION_MEDIUM = 'medium';
    const VIRUS_OUTBREAK_PREVENTION_HIGH = 'high';
    const VIRUS_OUTBREAK_PREVENTION_CRITICAL = 'critical';
    const CONTENT_DISARM_DISABLE = 'disable';
    const CONTENT_DISARM_LOW = 'low';
    const CONTENT_DISARM_MEDIUM = 'medium';
    const CONTENT_DISARM_HIGH = 'high';
    const CONTENT_DISARM_CRITICAL = 'critical';
    const MALWARE_LIST_DISABLE = 'disable';
    const MALWARE_LIST_LOW = 'low';
    const MALWARE_LIST_MEDIUM = 'medium';
    const MALWARE_LIST_HIGH = 'high';
    const MALWARE_LIST_CRITICAL = 'critical';
    const FSA_MALICIOUS_DISABLE = 'disable';
    const FSA_MALICIOUS_LOW = 'low';
    const FSA_MALICIOUS_MEDIUM = 'medium';
    const FSA_MALICIOUS_HIGH = 'high';
    const FSA_MALICIOUS_CRITICAL = 'critical';
    const FSA_HIGH_RISK_DISABLE = 'disable';
    const FSA_HIGH_RISK_LOW = 'low';
    const FSA_HIGH_RISK_MEDIUM = 'medium';
    const FSA_HIGH_RISK_HIGH = 'high';
    const FSA_HIGH_RISK_CRITICAL = 'critical';
    const FSA_MEDIUM_RISK_DISABLE = 'disable';
    const FSA_MEDIUM_RISK_LOW = 'low';
    const FSA_MEDIUM_RISK_MEDIUM = 'medium';
    const FSA_MEDIUM_RISK_HIGH = 'high';
    const FSA_MEDIUM_RISK_CRITICAL = 'critical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVirusInfectedAllowableValues()
    {
        return [
            self::VIRUS_INFECTED_DISABLE,
            self::VIRUS_INFECTED_LOW,
            self::VIRUS_INFECTED_MEDIUM,
            self::VIRUS_INFECTED_HIGH,
            self::VIRUS_INFECTED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileBlockedAllowableValues()
    {
        return [
            self::FILE_BLOCKED_DISABLE,
            self::FILE_BLOCKED_LOW,
            self::FILE_BLOCKED_MEDIUM,
            self::FILE_BLOCKED_HIGH,
            self::FILE_BLOCKED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommandBlockedAllowableValues()
    {
        return [
            self::COMMAND_BLOCKED_DISABLE,
            self::COMMAND_BLOCKED_LOW,
            self::COMMAND_BLOCKED_MEDIUM,
            self::COMMAND_BLOCKED_HIGH,
            self::COMMAND_BLOCKED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOversizedAllowableValues()
    {
        return [
            self::OVERSIZED_DISABLE,
            self::OVERSIZED_LOW,
            self::OVERSIZED_MEDIUM,
            self::OVERSIZED_HIGH,
            self::OVERSIZED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVirusScanErrorAllowableValues()
    {
        return [
            self::VIRUS_SCAN_ERROR_DISABLE,
            self::VIRUS_SCAN_ERROR_LOW,
            self::VIRUS_SCAN_ERROR_MEDIUM,
            self::VIRUS_SCAN_ERROR_HIGH,
            self::VIRUS_SCAN_ERROR_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchProtoAllowableValues()
    {
        return [
            self::SWITCH_PROTO_DISABLE,
            self::SWITCH_PROTO_LOW,
            self::SWITCH_PROTO_MEDIUM,
            self::SWITCH_PROTO_HIGH,
            self::SWITCH_PROTO_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMimefragmentedAllowableValues()
    {
        return [
            self::MIMEFRAGMENTED_DISABLE,
            self::MIMEFRAGMENTED_LOW,
            self::MIMEFRAGMENTED_MEDIUM,
            self::MIMEFRAGMENTED_HIGH,
            self::MIMEFRAGMENTED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVirusFileTypeExecutableAllowableValues()
    {
        return [
            self::VIRUS_FILE_TYPE_EXECUTABLE_DISABLE,
            self::VIRUS_FILE_TYPE_EXECUTABLE_LOW,
            self::VIRUS_FILE_TYPE_EXECUTABLE_MEDIUM,
            self::VIRUS_FILE_TYPE_EXECUTABLE_HIGH,
            self::VIRUS_FILE_TYPE_EXECUTABLE_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVirusOutbreakPreventionAllowableValues()
    {
        return [
            self::VIRUS_OUTBREAK_PREVENTION_DISABLE,
            self::VIRUS_OUTBREAK_PREVENTION_LOW,
            self::VIRUS_OUTBREAK_PREVENTION_MEDIUM,
            self::VIRUS_OUTBREAK_PREVENTION_HIGH,
            self::VIRUS_OUTBREAK_PREVENTION_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentDisarmAllowableValues()
    {
        return [
            self::CONTENT_DISARM_DISABLE,
            self::CONTENT_DISARM_LOW,
            self::CONTENT_DISARM_MEDIUM,
            self::CONTENT_DISARM_HIGH,
            self::CONTENT_DISARM_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalwareListAllowableValues()
    {
        return [
            self::MALWARE_LIST_DISABLE,
            self::MALWARE_LIST_LOW,
            self::MALWARE_LIST_MEDIUM,
            self::MALWARE_LIST_HIGH,
            self::MALWARE_LIST_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFsaMaliciousAllowableValues()
    {
        return [
            self::FSA_MALICIOUS_DISABLE,
            self::FSA_MALICIOUS_LOW,
            self::FSA_MALICIOUS_MEDIUM,
            self::FSA_MALICIOUS_HIGH,
            self::FSA_MALICIOUS_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFsaHighRiskAllowableValues()
    {
        return [
            self::FSA_HIGH_RISK_DISABLE,
            self::FSA_HIGH_RISK_LOW,
            self::FSA_HIGH_RISK_MEDIUM,
            self::FSA_HIGH_RISK_HIGH,
            self::FSA_HIGH_RISK_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFsaMediumRiskAllowableValues()
    {
        return [
            self::FSA_MEDIUM_RISK_DISABLE,
            self::FSA_MEDIUM_RISK_LOW,
            self::FSA_MEDIUM_RISK_MEDIUM,
            self::FSA_MEDIUM_RISK_HIGH,
            self::FSA_MEDIUM_RISK_CRITICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['virus_infected'] = $data['virus_infected'] ?? null;
        $this->container['file_blocked'] = $data['file_blocked'] ?? null;
        $this->container['command_blocked'] = $data['command_blocked'] ?? null;
        $this->container['oversized'] = $data['oversized'] ?? null;
        $this->container['virus_scan_error'] = $data['virus_scan_error'] ?? null;
        $this->container['switch_proto'] = $data['switch_proto'] ?? null;
        $this->container['mimefragmented'] = $data['mimefragmented'] ?? null;
        $this->container['virus_file_type_executable'] = $data['virus_file_type_executable'] ?? null;
        $this->container['virus_outbreak_prevention'] = $data['virus_outbreak_prevention'] ?? null;
        $this->container['content_disarm'] = $data['content_disarm'] ?? null;
        $this->container['malware_list'] = $data['malware_list'] ?? null;
        $this->container['fsa_malicious'] = $data['fsa_malicious'] ?? null;
        $this->container['fsa_high_risk'] = $data['fsa_high_risk'] ?? null;
        $this->container['fsa_medium_risk'] = $data['fsa_medium_risk'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVirusInfectedAllowableValues();
        if (!is_null($this->container['virus_infected']) && !in_array($this->container['virus_infected'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'virus_infected', must be one of '%s'",
                $this->container['virus_infected'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFileBlockedAllowableValues();
        if (!is_null($this->container['file_blocked']) && !in_array($this->container['file_blocked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'file_blocked', must be one of '%s'",
                $this->container['file_blocked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCommandBlockedAllowableValues();
        if (!is_null($this->container['command_blocked']) && !in_array($this->container['command_blocked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'command_blocked', must be one of '%s'",
                $this->container['command_blocked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOversizedAllowableValues();
        if (!is_null($this->container['oversized']) && !in_array($this->container['oversized'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'oversized', must be one of '%s'",
                $this->container['oversized'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVirusScanErrorAllowableValues();
        if (!is_null($this->container['virus_scan_error']) && !in_array($this->container['virus_scan_error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'virus_scan_error', must be one of '%s'",
                $this->container['virus_scan_error'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchProtoAllowableValues();
        if (!is_null($this->container['switch_proto']) && !in_array($this->container['switch_proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_proto', must be one of '%s'",
                $this->container['switch_proto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMimefragmentedAllowableValues();
        if (!is_null($this->container['mimefragmented']) && !in_array($this->container['mimefragmented'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mimefragmented', must be one of '%s'",
                $this->container['mimefragmented'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVirusFileTypeExecutableAllowableValues();
        if (!is_null($this->container['virus_file_type_executable']) && !in_array($this->container['virus_file_type_executable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'virus_file_type_executable', must be one of '%s'",
                $this->container['virus_file_type_executable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVirusOutbreakPreventionAllowableValues();
        if (!is_null($this->container['virus_outbreak_prevention']) && !in_array($this->container['virus_outbreak_prevention'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'virus_outbreak_prevention', must be one of '%s'",
                $this->container['virus_outbreak_prevention'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentDisarmAllowableValues();
        if (!is_null($this->container['content_disarm']) && !in_array($this->container['content_disarm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content_disarm', must be one of '%s'",
                $this->container['content_disarm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalwareListAllowableValues();
        if (!is_null($this->container['malware_list']) && !in_array($this->container['malware_list'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malware_list', must be one of '%s'",
                $this->container['malware_list'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFsaMaliciousAllowableValues();
        if (!is_null($this->container['fsa_malicious']) && !in_array($this->container['fsa_malicious'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fsa_malicious', must be one of '%s'",
                $this->container['fsa_malicious'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFsaHighRiskAllowableValues();
        if (!is_null($this->container['fsa_high_risk']) && !in_array($this->container['fsa_high_risk'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fsa_high_risk', must be one of '%s'",
                $this->container['fsa_high_risk'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFsaMediumRiskAllowableValues();
        if (!is_null($this->container['fsa_medium_risk']) && !in_array($this->container['fsa_medium_risk'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fsa_medium_risk', must be one of '%s'",
                $this->container['fsa_medium_risk'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets virus_infected
     *
     * @return string|null
     */
    public function getVirusInfected()
    {
        return $this->container['virus_infected'];
    }

    /**
     * Sets virus_infected
     *
     * @param string|null $virus_infected Threat weight score for virus (infected) detected.    disable:Disable threat weight scoring for virus (infected) detected.    low:Use the low level score for virus (infected) detected.    medium:Use the medium level score for virus (infected) detected.    high:Use the high level score for virus (infected) detected.    critical:Use the critical level score for virus (infected) detected.
     *
     * @return self
     */
    public function setVirusInfected($virus_infected)
    {
        $allowedValues = $this->getVirusInfectedAllowableValues();
        if (!is_null($virus_infected) && !in_array($virus_infected, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'virus_infected', must be one of '%s'",
                    $virus_infected,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['virus_infected'] = $virus_infected;

        return $this;
    }

    /**
     * Gets file_blocked
     *
     * @return string|null
     */
    public function getFileBlocked()
    {
        return $this->container['file_blocked'];
    }

    /**
     * Sets file_blocked
     *
     * @param string|null $file_blocked Threat weight score for blocked file detected.    disable:Disable threat weight scoring for blocked file detected.    low:Use the low level score for blocked file detected.    medium:Use the medium level score for blocked file detected.    high:Use the high level score for blocked file detected.    critical:Use the critical level score for blocked file detected.
     *
     * @return self
     */
    public function setFileBlocked($file_blocked)
    {
        $allowedValues = $this->getFileBlockedAllowableValues();
        if (!is_null($file_blocked) && !in_array($file_blocked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'file_blocked', must be one of '%s'",
                    $file_blocked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_blocked'] = $file_blocked;

        return $this;
    }

    /**
     * Gets command_blocked
     *
     * @return string|null
     */
    public function getCommandBlocked()
    {
        return $this->container['command_blocked'];
    }

    /**
     * Sets command_blocked
     *
     * @param string|null $command_blocked Threat weight score for blocked command detected.    disable:Disable threat weight scoring for blocked command detected.    low:Use the low level score for blocked command detected.    medium:Use the medium level score for blocked command detected.    high:Use the high level score for blocked command detected.    critical:Use the critical level score for blocked command detected.
     *
     * @return self
     */
    public function setCommandBlocked($command_blocked)
    {
        $allowedValues = $this->getCommandBlockedAllowableValues();
        if (!is_null($command_blocked) && !in_array($command_blocked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'command_blocked', must be one of '%s'",
                    $command_blocked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['command_blocked'] = $command_blocked;

        return $this;
    }

    /**
     * Gets oversized
     *
     * @return string|null
     */
    public function getOversized()
    {
        return $this->container['oversized'];
    }

    /**
     * Sets oversized
     *
     * @param string|null $oversized Threat weight score for oversized file detected.    disable:Disable threat weight scoring for oversized file detected.    low:Use the low level score for oversized file detected.    medium:Use the medium level score for oversized file detected.    high:Use the high level score for oversized file detected.    critical:Use the critical level score for oversized file detected.
     *
     * @return self
     */
    public function setOversized($oversized)
    {
        $allowedValues = $this->getOversizedAllowableValues();
        if (!is_null($oversized) && !in_array($oversized, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'oversized', must be one of '%s'",
                    $oversized,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['oversized'] = $oversized;

        return $this;
    }

    /**
     * Gets virus_scan_error
     *
     * @return string|null
     */
    public function getVirusScanError()
    {
        return $this->container['virus_scan_error'];
    }

    /**
     * Sets virus_scan_error
     *
     * @param string|null $virus_scan_error Threat weight score for virus (scan error) detected.    disable:Disable threat weight scoring for virus (scan error) detected.    low:Use the low level score for virus (scan error) detected.    medium:Use the medium level score for virus (scan error) detected.    high:Use the high level score for virus (scan error) detected.    critical:Use the critical level score for virus (scan error) detected.
     *
     * @return self
     */
    public function setVirusScanError($virus_scan_error)
    {
        $allowedValues = $this->getVirusScanErrorAllowableValues();
        if (!is_null($virus_scan_error) && !in_array($virus_scan_error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'virus_scan_error', must be one of '%s'",
                    $virus_scan_error,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['virus_scan_error'] = $virus_scan_error;

        return $this;
    }

    /**
     * Gets switch_proto
     *
     * @return string|null
     */
    public function getSwitchProto()
    {
        return $this->container['switch_proto'];
    }

    /**
     * Sets switch_proto
     *
     * @param string|null $switch_proto Threat weight score for switch proto detected.    disable:Disable threat weight scoring for switch proto detected.    low:Use the low level score for switch proto detected.    medium:Use the medium level score for switch proto detected.    high:Use the high level score for switch proto detected.    critical:Use the critical level score for switch proto detected.
     *
     * @return self
     */
    public function setSwitchProto($switch_proto)
    {
        $allowedValues = $this->getSwitchProtoAllowableValues();
        if (!is_null($switch_proto) && !in_array($switch_proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_proto', must be one of '%s'",
                    $switch_proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_proto'] = $switch_proto;

        return $this;
    }

    /**
     * Gets mimefragmented
     *
     * @return string|null
     */
    public function getMimefragmented()
    {
        return $this->container['mimefragmented'];
    }

    /**
     * Sets mimefragmented
     *
     * @param string|null $mimefragmented Threat weight score for mimefragmented detected.    disable:Disable threat weight scoring for mimefragmented detected.    low:Use the low level score for mimefragmented detected.    medium:Use the medium level score for mimefragmented detected.    high:Use the high level score for mimefragmented detected.    critical:Use the critical level score for mimefragmented detected.
     *
     * @return self
     */
    public function setMimefragmented($mimefragmented)
    {
        $allowedValues = $this->getMimefragmentedAllowableValues();
        if (!is_null($mimefragmented) && !in_array($mimefragmented, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mimefragmented', must be one of '%s'",
                    $mimefragmented,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mimefragmented'] = $mimefragmented;

        return $this;
    }

    /**
     * Gets virus_file_type_executable
     *
     * @return string|null
     */
    public function getVirusFileTypeExecutable()
    {
        return $this->container['virus_file_type_executable'];
    }

    /**
     * Sets virus_file_type_executable
     *
     * @param string|null $virus_file_type_executable Threat weight score for virus (filetype executable) detected.    disable:Disable threat weight scoring for virus (filetype executable) detected.    low:Use the low level score for virus (filetype executable) detected.    medium:Use the medium level score for virus (filetype executable) detected.    high:Use the high level score for virus (filetype executable) detected.    critical:Use the critical level score for virus (filetype executable) detected.
     *
     * @return self
     */
    public function setVirusFileTypeExecutable($virus_file_type_executable)
    {
        $allowedValues = $this->getVirusFileTypeExecutableAllowableValues();
        if (!is_null($virus_file_type_executable) && !in_array($virus_file_type_executable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'virus_file_type_executable', must be one of '%s'",
                    $virus_file_type_executable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['virus_file_type_executable'] = $virus_file_type_executable;

        return $this;
    }

    /**
     * Gets virus_outbreak_prevention
     *
     * @return string|null
     */
    public function getVirusOutbreakPrevention()
    {
        return $this->container['virus_outbreak_prevention'];
    }

    /**
     * Sets virus_outbreak_prevention
     *
     * @param string|null $virus_outbreak_prevention Threat weight score for virus (outbreak prevention) event.    disable:Disable threat weight scoring for virus (outbreak prevention) event.    low:Use the low level score for virus (outbreak prevention) event.    medium:Use the medium level score for virus (outbreak prevention) event.    high:Use the high level score for virus (outbreak prevention) event.    critical:Use the critical level score for virus (outbreak prevention) event.
     *
     * @return self
     */
    public function setVirusOutbreakPrevention($virus_outbreak_prevention)
    {
        $allowedValues = $this->getVirusOutbreakPreventionAllowableValues();
        if (!is_null($virus_outbreak_prevention) && !in_array($virus_outbreak_prevention, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'virus_outbreak_prevention', must be one of '%s'",
                    $virus_outbreak_prevention,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['virus_outbreak_prevention'] = $virus_outbreak_prevention;

        return $this;
    }

    /**
     * Gets content_disarm
     *
     * @return string|null
     */
    public function getContentDisarm()
    {
        return $this->container['content_disarm'];
    }

    /**
     * Sets content_disarm
     *
     * @param string|null $content_disarm Threat weight score for virus (content disarm) detected.    disable:Disable threat weight scoring for virus (content disarm) detected.    low:Use the low level score for virus (content disarm) detected.    medium:Use the medium level score for virus (content disarm) detected.    high:Use the high level score for virus (content disarm) detected.    critical:Use the critical level score for virus (content disarm) detected.
     *
     * @return self
     */
    public function setContentDisarm($content_disarm)
    {
        $allowedValues = $this->getContentDisarmAllowableValues();
        if (!is_null($content_disarm) && !in_array($content_disarm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content_disarm', must be one of '%s'",
                    $content_disarm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_disarm'] = $content_disarm;

        return $this;
    }

    /**
     * Gets malware_list
     *
     * @return string|null
     */
    public function getMalwareList()
    {
        return $this->container['malware_list'];
    }

    /**
     * Sets malware_list
     *
     * @param string|null $malware_list Threat weight score for virus (malware list) detected.    disable:Disable threat weight scoring for virus (malware list) detected.    low:Use the low level score for virus (malware list) detected.    medium:Use the medium level score for virus (malware list) detected.    high:Use the high level score for virus (malware list) detected.    critical:Use the critical level score for virus (malware list) detected.
     *
     * @return self
     */
    public function setMalwareList($malware_list)
    {
        $allowedValues = $this->getMalwareListAllowableValues();
        if (!is_null($malware_list) && !in_array($malware_list, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malware_list', must be one of '%s'",
                    $malware_list,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malware_list'] = $malware_list;

        return $this;
    }

    /**
     * Gets fsa_malicious
     *
     * @return string|null
     */
    public function getFsaMalicious()
    {
        return $this->container['fsa_malicious'];
    }

    /**
     * Sets fsa_malicious
     *
     * @param string|null $fsa_malicious Threat weight score for FortiSandbox malicious malware detected.    disable:Disable threat weight scoring for FortiSandbox malicious malware detected.    low:Use the low level score for FortiSandbox malicious malware detected.    medium:Use the medium level score for FortiSandbox malicious malware detected.    high:Use the high level score for FortiSandbox malicious malware detected.    critical:Use the critical level score for FortiSandbox malicious malware detected.
     *
     * @return self
     */
    public function setFsaMalicious($fsa_malicious)
    {
        $allowedValues = $this->getFsaMaliciousAllowableValues();
        if (!is_null($fsa_malicious) && !in_array($fsa_malicious, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fsa_malicious', must be one of '%s'",
                    $fsa_malicious,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fsa_malicious'] = $fsa_malicious;

        return $this;
    }

    /**
     * Gets fsa_high_risk
     *
     * @return string|null
     */
    public function getFsaHighRisk()
    {
        return $this->container['fsa_high_risk'];
    }

    /**
     * Sets fsa_high_risk
     *
     * @param string|null $fsa_high_risk Threat weight score for FortiSandbox high risk malware detected.    disable:Disable threat weight scoring for FortiSandbox high risk malware detected.    low:Use the low level score for FortiSandbox high risk malware detected.    medium:Use the medium level score for FortiSandbox high risk malware detected.    high:Use the high level score for FortiSandbox high risk malware detected.    critical:Use the critical level score for FortiSandbox high risk malware detected.
     *
     * @return self
     */
    public function setFsaHighRisk($fsa_high_risk)
    {
        $allowedValues = $this->getFsaHighRiskAllowableValues();
        if (!is_null($fsa_high_risk) && !in_array($fsa_high_risk, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fsa_high_risk', must be one of '%s'",
                    $fsa_high_risk,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fsa_high_risk'] = $fsa_high_risk;

        return $this;
    }

    /**
     * Gets fsa_medium_risk
     *
     * @return string|null
     */
    public function getFsaMediumRisk()
    {
        return $this->container['fsa_medium_risk'];
    }

    /**
     * Sets fsa_medium_risk
     *
     * @param string|null $fsa_medium_risk Threat weight score for FortiSandbox medium risk malware detected.    disable:Disable threat weight scoring for FortiSandbox medium risk malware detected.    low:Use the low level score for FortiSandbox medium risk malware detected.    medium:Use the medium level score for FortiSandbox medium risk malware detected.    high:Use the high level score for FortiSandbox medium risk malware detected.    critical:Use the critical level score for FortiSandbox medium risk malware detected.
     *
     * @return self
     */
    public function setFsaMediumRisk($fsa_medium_risk)
    {
        $allowedValues = $this->getFsaMediumRiskAllowableValues();
        if (!is_null($fsa_medium_risk) && !in_array($fsa_medium_risk, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fsa_medium_risk', must be one of '%s'",
                    $fsa_medium_risk,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fsa_medium_risk'] = $fsa_medium_risk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


