<?php
/**
 * SystemSdwanMembers
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanMembers Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanMembers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_members';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'seq_num' => 'int',
        'interface' => 'string',
        'zone' => 'string',
        'gateway' => 'string',
        'source' => 'string',
        'gateway6' => 'string',
        'source6' => 'string',
        'cost' => 'int',
        'weight' => 'int',
        'priority' => 'int',
        'spillover_threshold' => 'int',
        'ingress_spillover_threshold' => 'int',
        'volume_ratio' => 'int',
        'status' => 'string',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'seq_num' => null,
        'interface' => null,
        'zone' => null,
        'gateway' => 'ipv4',
        'source' => 'ipv4',
        'gateway6' => 'ipv6',
        'source6' => 'ipv6',
        'cost' => null,
        'weight' => null,
        'priority' => null,
        'spillover_threshold' => null,
        'ingress_spillover_threshold' => null,
        'volume_ratio' => null,
        'status' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seq_num' => 'seq-num',
        'interface' => 'interface',
        'zone' => 'zone',
        'gateway' => 'gateway',
        'source' => 'source',
        'gateway6' => 'gateway6',
        'source6' => 'source6',
        'cost' => 'cost',
        'weight' => 'weight',
        'priority' => 'priority',
        'spillover_threshold' => 'spillover-threshold',
        'ingress_spillover_threshold' => 'ingress-spillover-threshold',
        'volume_ratio' => 'volume-ratio',
        'status' => 'status',
        'comment' => 'comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seq_num' => 'setSeqNum',
        'interface' => 'setInterface',
        'zone' => 'setZone',
        'gateway' => 'setGateway',
        'source' => 'setSource',
        'gateway6' => 'setGateway6',
        'source6' => 'setSource6',
        'cost' => 'setCost',
        'weight' => 'setWeight',
        'priority' => 'setPriority',
        'spillover_threshold' => 'setSpilloverThreshold',
        'ingress_spillover_threshold' => 'setIngressSpilloverThreshold',
        'volume_ratio' => 'setVolumeRatio',
        'status' => 'setStatus',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seq_num' => 'getSeqNum',
        'interface' => 'getInterface',
        'zone' => 'getZone',
        'gateway' => 'getGateway',
        'source' => 'getSource',
        'gateway6' => 'getGateway6',
        'source6' => 'getSource6',
        'cost' => 'getCost',
        'weight' => 'getWeight',
        'priority' => 'getPriority',
        'spillover_threshold' => 'getSpilloverThreshold',
        'ingress_spillover_threshold' => 'getIngressSpilloverThreshold',
        'volume_ratio' => 'getVolumeRatio',
        'status' => 'getStatus',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seq_num'] = $data['seq_num'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['gateway6'] = $data['gateway6'] ?? null;
        $this->container['source6'] = $data['source6'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['spillover_threshold'] = $data['spillover_threshold'] ?? null;
        $this->container['ingress_spillover_threshold'] = $data['ingress_spillover_threshold'] ?? null;
        $this->container['volume_ratio'] = $data['volume_ratio'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] > 512)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] < 0)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['zone']) && (mb_strlen($this->container['zone']) > 35)) {
            $invalidProperties[] = "invalid value for 'zone', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'cost', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 255)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 1)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 65535)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['spillover_threshold']) && ($this->container['spillover_threshold'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'spillover_threshold', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['spillover_threshold']) && ($this->container['spillover_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'spillover_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ingress_spillover_threshold']) && ($this->container['ingress_spillover_threshold'] > 16776000)) {
            $invalidProperties[] = "invalid value for 'ingress_spillover_threshold', must be smaller than or equal to 16776000.";
        }

        if (!is_null($this->container['ingress_spillover_threshold']) && ($this->container['ingress_spillover_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'ingress_spillover_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['volume_ratio']) && ($this->container['volume_ratio'] > 255)) {
            $invalidProperties[] = "invalid value for 'volume_ratio', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['volume_ratio']) && ($this->container['volume_ratio'] < 1)) {
            $invalidProperties[] = "invalid value for 'volume_ratio', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seq_num
     *
     * @return int|null
     */
    public function getSeqNum()
    {
        return $this->container['seq_num'];
    }

    /**
     * Sets seq_num
     *
     * @param int|null $seq_num Sequence number(1-512).
     *
     * @return self
     */
    public function setSeqNum($seq_num)
    {

        if (!is_null($seq_num) && ($seq_num > 512)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling SystemSdwanMembers., must be smaller than or equal to 512.');
        }
        if (!is_null($seq_num) && ($seq_num < 0)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling SystemSdwanMembers., must be bigger than or equal to 0.');
        }

        $this->container['seq_num'] = $seq_num;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Interface name.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling SystemSdwanMembers., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return string|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param string|null $zone Zone name.
     *
     * @return self
     */
    public function setZone($zone)
    {
        if (!is_null($zone) && (mb_strlen($zone) > 35)) {
            throw new \InvalidArgumentException('invalid length for $zone when calling SystemSdwanMembers., must be smaller than or equal to 35.');
        }

        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source IP address used in the health-check packet to the server.
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets gateway6
     *
     * @return string|null
     */
    public function getGateway6()
    {
        return $this->container['gateway6'];
    }

    /**
     * Sets gateway6
     *
     * @param string|null $gateway6 IPv6 gateway.
     *
     * @return self
     */
    public function setGateway6($gateway6)
    {
        $this->container['gateway6'] = $gateway6;

        return $this;
    }

    /**
     * Gets source6
     *
     * @return string|null
     */
    public function getSource6()
    {
        return $this->container['source6'];
    }

    /**
     * Sets source6
     *
     * @param string|null $source6 Source IPv6 address used in the health-check packet to the server.
     *
     * @return self
     */
    public function setSource6($source6)
    {
        $this->container['source6'] = $source6;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int|null $cost Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
     *
     * @return self
     */
    public function setCost($cost)
    {

        if (!is_null($cost) && ($cost > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling SystemSdwanMembers., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($cost) && ($cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling SystemSdwanMembers., must be bigger than or equal to 0.');
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (!is_null($weight) && ($weight > 255)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SystemSdwanMembers., must be smaller than or equal to 255.');
        }
        if (!is_null($weight) && ($weight < 1)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SystemSdwanMembers., must be bigger than or equal to 1.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 65535)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemSdwanMembers., must be smaller than or equal to 65535.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemSdwanMembers., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets spillover_threshold
     *
     * @return int|null
     */
    public function getSpilloverThreshold()
    {
        return $this->container['spillover_threshold'];
    }

    /**
     * Sets spillover_threshold
     *
     * @param int|null $spillover_threshold Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     *
     * @return self
     */
    public function setSpilloverThreshold($spillover_threshold)
    {

        if (!is_null($spillover_threshold) && ($spillover_threshold > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $spillover_threshold when calling SystemSdwanMembers., must be smaller than or equal to 16776000.');
        }
        if (!is_null($spillover_threshold) && ($spillover_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $spillover_threshold when calling SystemSdwanMembers., must be bigger than or equal to 0.');
        }

        $this->container['spillover_threshold'] = $spillover_threshold;

        return $this;
    }

    /**
     * Gets ingress_spillover_threshold
     *
     * @return int|null
     */
    public function getIngressSpilloverThreshold()
    {
        return $this->container['ingress_spillover_threshold'];
    }

    /**
     * Sets ingress_spillover_threshold
     *
     * @param int|null $ingress_spillover_threshold Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
     *
     * @return self
     */
    public function setIngressSpilloverThreshold($ingress_spillover_threshold)
    {

        if (!is_null($ingress_spillover_threshold) && ($ingress_spillover_threshold > 16776000)) {
            throw new \InvalidArgumentException('invalid value for $ingress_spillover_threshold when calling SystemSdwanMembers., must be smaller than or equal to 16776000.');
        }
        if (!is_null($ingress_spillover_threshold) && ($ingress_spillover_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $ingress_spillover_threshold when calling SystemSdwanMembers., must be bigger than or equal to 0.');
        }

        $this->container['ingress_spillover_threshold'] = $ingress_spillover_threshold;

        return $this;
    }

    /**
     * Gets volume_ratio
     *
     * @return int|null
     */
    public function getVolumeRatio()
    {
        return $this->container['volume_ratio'];
    }

    /**
     * Sets volume_ratio
     *
     * @param int|null $volume_ratio Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
     *
     * @return self
     */
    public function setVolumeRatio($volume_ratio)
    {

        if (!is_null($volume_ratio) && ($volume_ratio > 255)) {
            throw new \InvalidArgumentException('invalid value for $volume_ratio when calling SystemSdwanMembers., must be smaller than or equal to 255.');
        }
        if (!is_null($volume_ratio) && ($volume_ratio < 1)) {
            throw new \InvalidArgumentException('invalid value for $volume_ratio when calling SystemSdwanMembers., must be bigger than or equal to 1.');
        }

        $this->container['volume_ratio'] = $volume_ratio;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this interface in the SD-WAN.    disable:Disable this interface in the SD-WAN.    enable:Enable this interface in the SD-WAN.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comments.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling SystemSdwanMembers., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


