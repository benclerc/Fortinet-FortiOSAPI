<?php
/**
 * InlineObject194
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject194 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject194 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_194';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mac_aging_interval' => 'int',
        'https_image_push' => 'string',
        'vlan_all_mode' => 'string',
        'vlan_optimization' => 'string',
        'disable_discovery' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalDisableDiscovery[]',
        'mac_retention_period' => 'int',
        'default_virtual_switch_vlan' => 'string',
        'log_mac_limit_violations' => 'string',
        'mac_violation_timer' => 'int',
        'sn_dns_resolution' => 'string',
        'mac_event_logging' => 'string',
        'bounce_quarantined_link' => 'string',
        'quarantine_mode' => 'string',
        'update_user_device' => 'string',
        'custom_command' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalCustomCommand[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mac_aging_interval' => null,
        'https_image_push' => null,
        'vlan_all_mode' => null,
        'vlan_optimization' => null,
        'disable_discovery' => null,
        'mac_retention_period' => null,
        'default_virtual_switch_vlan' => null,
        'log_mac_limit_violations' => null,
        'mac_violation_timer' => null,
        'sn_dns_resolution' => null,
        'mac_event_logging' => null,
        'bounce_quarantined_link' => null,
        'quarantine_mode' => null,
        'update_user_device' => null,
        'custom_command' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mac_aging_interval' => 'mac-aging-interval',
        'https_image_push' => 'https-image-push',
        'vlan_all_mode' => 'vlan-all-mode',
        'vlan_optimization' => 'vlan-optimization',
        'disable_discovery' => 'disable-discovery',
        'mac_retention_period' => 'mac-retention-period',
        'default_virtual_switch_vlan' => 'default-virtual-switch-vlan',
        'log_mac_limit_violations' => 'log-mac-limit-violations',
        'mac_violation_timer' => 'mac-violation-timer',
        'sn_dns_resolution' => 'sn-dns-resolution',
        'mac_event_logging' => 'mac-event-logging',
        'bounce_quarantined_link' => 'bounce-quarantined-link',
        'quarantine_mode' => 'quarantine-mode',
        'update_user_device' => 'update-user-device',
        'custom_command' => 'custom-command'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mac_aging_interval' => 'setMacAgingInterval',
        'https_image_push' => 'setHttpsImagePush',
        'vlan_all_mode' => 'setVlanAllMode',
        'vlan_optimization' => 'setVlanOptimization',
        'disable_discovery' => 'setDisableDiscovery',
        'mac_retention_period' => 'setMacRetentionPeriod',
        'default_virtual_switch_vlan' => 'setDefaultVirtualSwitchVlan',
        'log_mac_limit_violations' => 'setLogMacLimitViolations',
        'mac_violation_timer' => 'setMacViolationTimer',
        'sn_dns_resolution' => 'setSnDnsResolution',
        'mac_event_logging' => 'setMacEventLogging',
        'bounce_quarantined_link' => 'setBounceQuarantinedLink',
        'quarantine_mode' => 'setQuarantineMode',
        'update_user_device' => 'setUpdateUserDevice',
        'custom_command' => 'setCustomCommand'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mac_aging_interval' => 'getMacAgingInterval',
        'https_image_push' => 'getHttpsImagePush',
        'vlan_all_mode' => 'getVlanAllMode',
        'vlan_optimization' => 'getVlanOptimization',
        'disable_discovery' => 'getDisableDiscovery',
        'mac_retention_period' => 'getMacRetentionPeriod',
        'default_virtual_switch_vlan' => 'getDefaultVirtualSwitchVlan',
        'log_mac_limit_violations' => 'getLogMacLimitViolations',
        'mac_violation_timer' => 'getMacViolationTimer',
        'sn_dns_resolution' => 'getSnDnsResolution',
        'mac_event_logging' => 'getMacEventLogging',
        'bounce_quarantined_link' => 'getBounceQuarantinedLink',
        'quarantine_mode' => 'getQuarantineMode',
        'update_user_device' => 'getUpdateUserDevice',
        'custom_command' => 'getCustomCommand'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HTTPS_IMAGE_PUSH_ENABLE = 'enable';
    const HTTPS_IMAGE_PUSH_DISABLE = 'disable';
    const VLAN_ALL_MODE_ALL = 'all';
    const VLAN_ALL_MODE_DEFINED = 'defined';
    const VLAN_OPTIMIZATION_ENABLE = 'enable';
    const VLAN_OPTIMIZATION_DISABLE = 'disable';
    const LOG_MAC_LIMIT_VIOLATIONS_ENABLE = 'enable';
    const LOG_MAC_LIMIT_VIOLATIONS_DISABLE = 'disable';
    const SN_DNS_RESOLUTION_ENABLE = 'enable';
    const SN_DNS_RESOLUTION_DISABLE = 'disable';
    const MAC_EVENT_LOGGING_ENABLE = 'enable';
    const MAC_EVENT_LOGGING_DISABLE = 'disable';
    const BOUNCE_QUARANTINED_LINK_DISABLE = 'disable';
    const BOUNCE_QUARANTINED_LINK_ENABLE = 'enable';
    const QUARANTINE_MODE_VLAN = 'by-vlan';
    const QUARANTINE_MODE_REDIRECT = 'by-redirect';
    const UPDATE_USER_DEVICE_MAC_CACHE = 'mac-cache';
    const UPDATE_USER_DEVICE_LLDP = 'lldp';
    const UPDATE_USER_DEVICE_DHCP_SNOOPING = 'dhcp-snooping';
    const UPDATE_USER_DEVICE_L2_DB = 'l2-db';
    const UPDATE_USER_DEVICE_L3_DB = 'l3-db';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpsImagePushAllowableValues()
    {
        return [
            self::HTTPS_IMAGE_PUSH_ENABLE,
            self::HTTPS_IMAGE_PUSH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanAllModeAllowableValues()
    {
        return [
            self::VLAN_ALL_MODE_ALL,
            self::VLAN_ALL_MODE_DEFINED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanOptimizationAllowableValues()
    {
        return [
            self::VLAN_OPTIMIZATION_ENABLE,
            self::VLAN_OPTIMIZATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogMacLimitViolationsAllowableValues()
    {
        return [
            self::LOG_MAC_LIMIT_VIOLATIONS_ENABLE,
            self::LOG_MAC_LIMIT_VIOLATIONS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSnDnsResolutionAllowableValues()
    {
        return [
            self::SN_DNS_RESOLUTION_ENABLE,
            self::SN_DNS_RESOLUTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacEventLoggingAllowableValues()
    {
        return [
            self::MAC_EVENT_LOGGING_ENABLE,
            self::MAC_EVENT_LOGGING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBounceQuarantinedLinkAllowableValues()
    {
        return [
            self::BOUNCE_QUARANTINED_LINK_DISABLE,
            self::BOUNCE_QUARANTINED_LINK_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuarantineModeAllowableValues()
    {
        return [
            self::QUARANTINE_MODE_VLAN,
            self::QUARANTINE_MODE_REDIRECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateUserDeviceAllowableValues()
    {
        return [
            self::UPDATE_USER_DEVICE_MAC_CACHE,
            self::UPDATE_USER_DEVICE_LLDP,
            self::UPDATE_USER_DEVICE_DHCP_SNOOPING,
            self::UPDATE_USER_DEVICE_L2_DB,
            self::UPDATE_USER_DEVICE_L3_DB,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mac_aging_interval'] = $data['mac_aging_interval'] ?? null;
        $this->container['https_image_push'] = $data['https_image_push'] ?? null;
        $this->container['vlan_all_mode'] = $data['vlan_all_mode'] ?? null;
        $this->container['vlan_optimization'] = $data['vlan_optimization'] ?? null;
        $this->container['disable_discovery'] = $data['disable_discovery'] ?? null;
        $this->container['mac_retention_period'] = $data['mac_retention_period'] ?? null;
        $this->container['default_virtual_switch_vlan'] = $data['default_virtual_switch_vlan'] ?? null;
        $this->container['log_mac_limit_violations'] = $data['log_mac_limit_violations'] ?? null;
        $this->container['mac_violation_timer'] = $data['mac_violation_timer'] ?? null;
        $this->container['sn_dns_resolution'] = $data['sn_dns_resolution'] ?? null;
        $this->container['mac_event_logging'] = $data['mac_event_logging'] ?? null;
        $this->container['bounce_quarantined_link'] = $data['bounce_quarantined_link'] ?? null;
        $this->container['quarantine_mode'] = $data['quarantine_mode'] ?? null;
        $this->container['update_user_device'] = $data['update_user_device'] ?? null;
        $this->container['custom_command'] = $data['custom_command'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['mac_aging_interval']) && ($this->container['mac_aging_interval'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'mac_aging_interval', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['mac_aging_interval']) && ($this->container['mac_aging_interval'] < 10)) {
            $invalidProperties[] = "invalid value for 'mac_aging_interval', must be bigger than or equal to 10.";
        }

        $allowedValues = $this->getHttpsImagePushAllowableValues();
        if (!is_null($this->container['https_image_push']) && !in_array($this->container['https_image_push'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'https_image_push', must be one of '%s'",
                $this->container['https_image_push'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVlanAllModeAllowableValues();
        if (!is_null($this->container['vlan_all_mode']) && !in_array($this->container['vlan_all_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlan_all_mode', must be one of '%s'",
                $this->container['vlan_all_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVlanOptimizationAllowableValues();
        if (!is_null($this->container['vlan_optimization']) && !in_array($this->container['vlan_optimization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlan_optimization', must be one of '%s'",
                $this->container['vlan_optimization'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['disable_discovery']) && (count($this->container['disable_discovery']) > 0)) {
            $invalidProperties[] = "invalid value for 'disable_discovery', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['mac_retention_period']) && ($this->container['mac_retention_period'] > 168)) {
            $invalidProperties[] = "invalid value for 'mac_retention_period', must be smaller than or equal to 168.";
        }

        if (!is_null($this->container['mac_retention_period']) && ($this->container['mac_retention_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'mac_retention_period', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_virtual_switch_vlan']) && (mb_strlen($this->container['default_virtual_switch_vlan']) > 15)) {
            $invalidProperties[] = "invalid value for 'default_virtual_switch_vlan', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getLogMacLimitViolationsAllowableValues();
        if (!is_null($this->container['log_mac_limit_violations']) && !in_array($this->container['log_mac_limit_violations'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_mac_limit_violations', must be one of '%s'",
                $this->container['log_mac_limit_violations'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac_violation_timer']) && ($this->container['mac_violation_timer'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'mac_violation_timer', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['mac_violation_timer']) && ($this->container['mac_violation_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'mac_violation_timer', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSnDnsResolutionAllowableValues();
        if (!is_null($this->container['sn_dns_resolution']) && !in_array($this->container['sn_dns_resolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sn_dns_resolution', must be one of '%s'",
                $this->container['sn_dns_resolution'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMacEventLoggingAllowableValues();
        if (!is_null($this->container['mac_event_logging']) && !in_array($this->container['mac_event_logging'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_event_logging', must be one of '%s'",
                $this->container['mac_event_logging'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBounceQuarantinedLinkAllowableValues();
        if (!is_null($this->container['bounce_quarantined_link']) && !in_array($this->container['bounce_quarantined_link'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bounce_quarantined_link', must be one of '%s'",
                $this->container['bounce_quarantined_link'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQuarantineModeAllowableValues();
        if (!is_null($this->container['quarantine_mode']) && !in_array($this->container['quarantine_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quarantine_mode', must be one of '%s'",
                $this->container['quarantine_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateUserDeviceAllowableValues();
        if (!is_null($this->container['update_user_device']) && !in_array($this->container['update_user_device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_user_device', must be one of '%s'",
                $this->container['update_user_device'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_command']) && (count($this->container['custom_command']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_command', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mac_aging_interval
     *
     * @return int|null
     */
    public function getMacAgingInterval()
    {
        return $this->container['mac_aging_interval'];
    }

    /**
     * Sets mac_aging_interval
     *
     * @param int|null $mac_aging_interval Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
     *
     * @return self
     */
    public function setMacAgingInterval($mac_aging_interval)
    {

        if (!is_null($mac_aging_interval) && ($mac_aging_interval > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $mac_aging_interval when calling InlineObject194., must be smaller than or equal to 1000000.');
        }
        if (!is_null($mac_aging_interval) && ($mac_aging_interval < 10)) {
            throw new \InvalidArgumentException('invalid value for $mac_aging_interval when calling InlineObject194., must be bigger than or equal to 10.');
        }

        $this->container['mac_aging_interval'] = $mac_aging_interval;

        return $this;
    }

    /**
     * Gets https_image_push
     *
     * @return string|null
     */
    public function getHttpsImagePush()
    {
        return $this->container['https_image_push'];
    }

    /**
     * Sets https_image_push
     *
     * @param string|null $https_image_push Enable/disable image push to FortiSwitch using HTTPS.    enable:Enable image push to FortiSwitch using HTTPS.    disable:Disable image push to FortiSwitch using HTTPS.
     *
     * @return self
     */
    public function setHttpsImagePush($https_image_push)
    {
        $allowedValues = $this->getHttpsImagePushAllowableValues();
        if (!is_null($https_image_push) && !in_array($https_image_push, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'https_image_push', must be one of '%s'",
                    $https_image_push,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['https_image_push'] = $https_image_push;

        return $this;
    }

    /**
     * Gets vlan_all_mode
     *
     * @return string|null
     */
    public function getVlanAllMode()
    {
        return $this->container['vlan_all_mode'];
    }

    /**
     * Sets vlan_all_mode
     *
     * @param string|null $vlan_all_mode VLAN configuration mode, user-defined-vlans or all-possible-vlans.    all:Include all possible VLANs (1-4093).    defined:Include user defined VLANs.
     *
     * @return self
     */
    public function setVlanAllMode($vlan_all_mode)
    {
        $allowedValues = $this->getVlanAllModeAllowableValues();
        if (!is_null($vlan_all_mode) && !in_array($vlan_all_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlan_all_mode', must be one of '%s'",
                    $vlan_all_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlan_all_mode'] = $vlan_all_mode;

        return $this;
    }

    /**
     * Gets vlan_optimization
     *
     * @return string|null
     */
    public function getVlanOptimization()
    {
        return $this->container['vlan_optimization'];
    }

    /**
     * Sets vlan_optimization
     *
     * @param string|null $vlan_optimization FortiLink VLAN optimization.    enable:Enable VLAN optimization on FortiSwitch units for auto-generated trunks.    disable:Disable VLAN optimization on FortiSwitch units for auto-generated trunks.
     *
     * @return self
     */
    public function setVlanOptimization($vlan_optimization)
    {
        $allowedValues = $this->getVlanOptimizationAllowableValues();
        if (!is_null($vlan_optimization) && !in_array($vlan_optimization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlan_optimization', must be one of '%s'",
                    $vlan_optimization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlan_optimization'] = $vlan_optimization;

        return $this;
    }

    /**
     * Gets disable_discovery
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalDisableDiscovery[]|null
     */
    public function getDisableDiscovery()
    {
        return $this->container['disable_discovery'];
    }

    /**
     * Sets disable_discovery
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalDisableDiscovery[]|null $disable_discovery Prevent this FortiSwitch from discovering.
     *
     * @return self
     */
    public function setDisableDiscovery($disable_discovery)
    {

        if (!is_null($disable_discovery) && (count($disable_discovery) > 0)) {
            throw new \InvalidArgumentException('invalid value for $disable_discovery when calling InlineObject194., number of items must be less than or equal to 0.');
        }
        $this->container['disable_discovery'] = $disable_discovery;

        return $this;
    }

    /**
     * Gets mac_retention_period
     *
     * @return int|null
     */
    public function getMacRetentionPeriod()
    {
        return $this->container['mac_retention_period'];
    }

    /**
     * Sets mac_retention_period
     *
     * @param int|null $mac_retention_period Time in hours after which an inactive MAC is removed from client DB (0 = aged out based on mac-aging-interval).
     *
     * @return self
     */
    public function setMacRetentionPeriod($mac_retention_period)
    {

        if (!is_null($mac_retention_period) && ($mac_retention_period > 168)) {
            throw new \InvalidArgumentException('invalid value for $mac_retention_period when calling InlineObject194., must be smaller than or equal to 168.');
        }
        if (!is_null($mac_retention_period) && ($mac_retention_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $mac_retention_period when calling InlineObject194., must be bigger than or equal to 0.');
        }

        $this->container['mac_retention_period'] = $mac_retention_period;

        return $this;
    }

    /**
     * Gets default_virtual_switch_vlan
     *
     * @return string|null
     */
    public function getDefaultVirtualSwitchVlan()
    {
        return $this->container['default_virtual_switch_vlan'];
    }

    /**
     * Sets default_virtual_switch_vlan
     *
     * @param string|null $default_virtual_switch_vlan Default VLAN for ports when added to the virtual-switch.
     *
     * @return self
     */
    public function setDefaultVirtualSwitchVlan($default_virtual_switch_vlan)
    {
        if (!is_null($default_virtual_switch_vlan) && (mb_strlen($default_virtual_switch_vlan) > 15)) {
            throw new \InvalidArgumentException('invalid length for $default_virtual_switch_vlan when calling InlineObject194., must be smaller than or equal to 15.');
        }

        $this->container['default_virtual_switch_vlan'] = $default_virtual_switch_vlan;

        return $this;
    }

    /**
     * Gets log_mac_limit_violations
     *
     * @return string|null
     */
    public function getLogMacLimitViolations()
    {
        return $this->container['log_mac_limit_violations'];
    }

    /**
     * Sets log_mac_limit_violations
     *
     * @param string|null $log_mac_limit_violations Enable/disable logs for Learning Limit Violations.    enable:Enable Learn Limit Violation.    disable:Disable Learn Limit Violation.
     *
     * @return self
     */
    public function setLogMacLimitViolations($log_mac_limit_violations)
    {
        $allowedValues = $this->getLogMacLimitViolationsAllowableValues();
        if (!is_null($log_mac_limit_violations) && !in_array($log_mac_limit_violations, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_mac_limit_violations', must be one of '%s'",
                    $log_mac_limit_violations,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_mac_limit_violations'] = $log_mac_limit_violations;

        return $this;
    }

    /**
     * Gets mac_violation_timer
     *
     * @return int|null
     */
    public function getMacViolationTimer()
    {
        return $this->container['mac_violation_timer'];
    }

    /**
     * Sets mac_violation_timer
     *
     * @param int|null $mac_violation_timer Set timeout for Learning Limit Violations (0 = disabled).
     *
     * @return self
     */
    public function setMacViolationTimer($mac_violation_timer)
    {

        if (!is_null($mac_violation_timer) && ($mac_violation_timer > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $mac_violation_timer when calling InlineObject194., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($mac_violation_timer) && ($mac_violation_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $mac_violation_timer when calling InlineObject194., must be bigger than or equal to 0.');
        }

        $this->container['mac_violation_timer'] = $mac_violation_timer;

        return $this;
    }

    /**
     * Gets sn_dns_resolution
     *
     * @return string|null
     */
    public function getSnDnsResolution()
    {
        return $this->container['sn_dns_resolution'];
    }

    /**
     * Sets sn_dns_resolution
     *
     * @param string|null $sn_dns_resolution Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number.    enable:Enable DNS resolution of the FortiSwitch unit's IP address by use of its serial number.    disable:Disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number.
     *
     * @return self
     */
    public function setSnDnsResolution($sn_dns_resolution)
    {
        $allowedValues = $this->getSnDnsResolutionAllowableValues();
        if (!is_null($sn_dns_resolution) && !in_array($sn_dns_resolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sn_dns_resolution', must be one of '%s'",
                    $sn_dns_resolution,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sn_dns_resolution'] = $sn_dns_resolution;

        return $this;
    }

    /**
     * Gets mac_event_logging
     *
     * @return string|null
     */
    public function getMacEventLogging()
    {
        return $this->container['mac_event_logging'];
    }

    /**
     * Sets mac_event_logging
     *
     * @param string|null $mac_event_logging Enable/disable MAC address event logging.    enable:Enable MAC address event logging.    disable:Disable MAC address event logging.
     *
     * @return self
     */
    public function setMacEventLogging($mac_event_logging)
    {
        $allowedValues = $this->getMacEventLoggingAllowableValues();
        if (!is_null($mac_event_logging) && !in_array($mac_event_logging, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_event_logging', must be one of '%s'",
                    $mac_event_logging,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_event_logging'] = $mac_event_logging;

        return $this;
    }

    /**
     * Gets bounce_quarantined_link
     *
     * @return string|null
     */
    public function getBounceQuarantinedLink()
    {
        return $this->container['bounce_quarantined_link'];
    }

    /**
     * Sets bounce_quarantined_link
     *
     * @param string|null $bounce_quarantined_link Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device.    disable:Disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last.    enable:Enable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last.
     *
     * @return self
     */
    public function setBounceQuarantinedLink($bounce_quarantined_link)
    {
        $allowedValues = $this->getBounceQuarantinedLinkAllowableValues();
        if (!is_null($bounce_quarantined_link) && !in_array($bounce_quarantined_link, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bounce_quarantined_link', must be one of '%s'",
                    $bounce_quarantined_link,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bounce_quarantined_link'] = $bounce_quarantined_link;

        return $this;
    }

    /**
     * Gets quarantine_mode
     *
     * @return string|null
     */
    public function getQuarantineMode()
    {
        return $this->container['quarantine_mode'];
    }

    /**
     * Sets quarantine_mode
     *
     * @param string|null $quarantine_mode Quarantine mode.    by-vlan:Quarantined device traffic is sent to FortiGate on a separate quarantine VLAN.    by-redirect:Quarantined device traffic is redirected only to the FortiGate on the received VLAN.
     *
     * @return self
     */
    public function setQuarantineMode($quarantine_mode)
    {
        $allowedValues = $this->getQuarantineModeAllowableValues();
        if (!is_null($quarantine_mode) && !in_array($quarantine_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quarantine_mode', must be one of '%s'",
                    $quarantine_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quarantine_mode'] = $quarantine_mode;

        return $this;
    }

    /**
     * Gets update_user_device
     *
     * @return string|null
     */
    public function getUpdateUserDevice()
    {
        return $this->container['update_user_device'];
    }

    /**
     * Sets update_user_device
     *
     * @param string|null $update_user_device Control which sources update the device user list.    mac-cache:Update MAC address from switch-controller mac-cache.    lldp:Update from FortiSwitch LLDP neighbor database.    dhcp-snooping:Update from FortiSwitch DHCP snooping client and server databases.    l2-db:Update from FortiSwitch Network-monitor Layer 2 tracking database.    l3-db:Update from FortiSwitch Network-monitor Layer 3 tracking database.
     *
     * @return self
     */
    public function setUpdateUserDevice($update_user_device)
    {
        $allowedValues = $this->getUpdateUserDeviceAllowableValues();
        if (!is_null($update_user_device) && !in_array($update_user_device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_user_device', must be one of '%s'",
                    $update_user_device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_user_device'] = $update_user_device;

        return $this;
    }

    /**
     * Gets custom_command
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalCustomCommand[]|null
     */
    public function getCustomCommand()
    {
        return $this->container['custom_command'];
    }

    /**
     * Sets custom_command
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerGlobalCustomCommand[]|null $custom_command List of custom commands to be pushed to all FortiSwitches in the VDOM.
     *
     * @return self
     */
    public function setCustomCommand($custom_command)
    {

        if (!is_null($custom_command) && (count($custom_command) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_command when calling InlineObject194., number of items must be less than or equal to 0.');
        }
        $this->container['custom_command'] = $custom_command;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


