<?php
/**
 * InlineObject267
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject267 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject267 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_267';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'wildcard' => 'string',
        'remote_auth' => 'string',
        'remote_group' => 'string',
        'password' => 'string',
        'peer_auth' => 'string',
        'peer_group' => 'string',
        'trusthost1' => 'string',
        'trusthost2' => 'string',
        'trusthost3' => 'string',
        'trusthost4' => 'string',
        'trusthost5' => 'string',
        'trusthost6' => 'string',
        'trusthost7' => 'string',
        'trusthost8' => 'string',
        'trusthost9' => 'string',
        'trusthost10' => 'string',
        'ip6_trusthost1' => 'string',
        'ip6_trusthost2' => 'string',
        'ip6_trusthost3' => 'string',
        'ip6_trusthost4' => 'string',
        'ip6_trusthost5' => 'string',
        'ip6_trusthost6' => 'string',
        'ip6_trusthost7' => 'string',
        'ip6_trusthost8' => 'string',
        'ip6_trusthost9' => 'string',
        'ip6_trusthost10' => 'string',
        'accprofile' => 'string',
        'allow_remove_admin_session' => 'string',
        'comments' => 'string',
        'vdom' => '\Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]',
        'ssh_public_key1' => 'string',
        'ssh_public_key2' => 'string',
        'ssh_public_key3' => 'string',
        'ssh_certificate' => 'string',
        'schedule' => 'string',
        'accprofile_override' => 'string',
        'radius_vdom_override' => 'string',
        'password_expire' => 'string',
        'force_password_change' => 'string',
        'two_factor' => 'string',
        'two_factor_authentication' => 'string',
        'two_factor_notification' => 'string',
        'fortitoken' => 'string',
        'email_to' => 'string',
        'sms_server' => 'string',
        'sms_custom_server' => 'string',
        'sms_phone' => 'string',
        'guest_auth' => 'string',
        'guest_usergroups' => '\Fortigate\FortiOS\Model\CMDB\SystemAdminNameGuestUsergroups[]',
        'guest_lang' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'wildcard' => null,
        'remote_auth' => null,
        'remote_group' => null,
        'password' => null,
        'peer_auth' => null,
        'peer_group' => null,
        'trusthost1' => 'ipv4',
        'trusthost2' => 'ipv4',
        'trusthost3' => 'ipv4',
        'trusthost4' => 'ipv4',
        'trusthost5' => 'ipv4',
        'trusthost6' => 'ipv4',
        'trusthost7' => 'ipv4',
        'trusthost8' => 'ipv4',
        'trusthost9' => 'ipv4',
        'trusthost10' => 'ipv4',
        'ip6_trusthost1' => 'ipv6',
        'ip6_trusthost2' => 'ipv6',
        'ip6_trusthost3' => 'ipv6',
        'ip6_trusthost4' => 'ipv6',
        'ip6_trusthost5' => 'ipv6',
        'ip6_trusthost6' => 'ipv6',
        'ip6_trusthost7' => 'ipv6',
        'ip6_trusthost8' => 'ipv6',
        'ip6_trusthost9' => 'ipv6',
        'ip6_trusthost10' => 'ipv6',
        'accprofile' => null,
        'allow_remove_admin_session' => null,
        'comments' => null,
        'vdom' => null,
        'ssh_public_key1' => null,
        'ssh_public_key2' => null,
        'ssh_public_key3' => null,
        'ssh_certificate' => null,
        'schedule' => null,
        'accprofile_override' => null,
        'radius_vdom_override' => null,
        'password_expire' => null,
        'force_password_change' => null,
        'two_factor' => null,
        'two_factor_authentication' => null,
        'two_factor_notification' => null,
        'fortitoken' => null,
        'email_to' => null,
        'sms_server' => null,
        'sms_custom_server' => null,
        'sms_phone' => null,
        'guest_auth' => null,
        'guest_usergroups' => null,
        'guest_lang' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'wildcard' => 'wildcard',
        'remote_auth' => 'remote-auth',
        'remote_group' => 'remote-group',
        'password' => 'password',
        'peer_auth' => 'peer-auth',
        'peer_group' => 'peer-group',
        'trusthost1' => 'trusthost1',
        'trusthost2' => 'trusthost2',
        'trusthost3' => 'trusthost3',
        'trusthost4' => 'trusthost4',
        'trusthost5' => 'trusthost5',
        'trusthost6' => 'trusthost6',
        'trusthost7' => 'trusthost7',
        'trusthost8' => 'trusthost8',
        'trusthost9' => 'trusthost9',
        'trusthost10' => 'trusthost10',
        'ip6_trusthost1' => 'ip6-trusthost1',
        'ip6_trusthost2' => 'ip6-trusthost2',
        'ip6_trusthost3' => 'ip6-trusthost3',
        'ip6_trusthost4' => 'ip6-trusthost4',
        'ip6_trusthost5' => 'ip6-trusthost5',
        'ip6_trusthost6' => 'ip6-trusthost6',
        'ip6_trusthost7' => 'ip6-trusthost7',
        'ip6_trusthost8' => 'ip6-trusthost8',
        'ip6_trusthost9' => 'ip6-trusthost9',
        'ip6_trusthost10' => 'ip6-trusthost10',
        'accprofile' => 'accprofile',
        'allow_remove_admin_session' => 'allow-remove-admin-session',
        'comments' => 'comments',
        'vdom' => 'vdom',
        'ssh_public_key1' => 'ssh-public-key1',
        'ssh_public_key2' => 'ssh-public-key2',
        'ssh_public_key3' => 'ssh-public-key3',
        'ssh_certificate' => 'ssh-certificate',
        'schedule' => 'schedule',
        'accprofile_override' => 'accprofile-override',
        'radius_vdom_override' => 'radius-vdom-override',
        'password_expire' => 'password-expire',
        'force_password_change' => 'force-password-change',
        'two_factor' => 'two-factor',
        'two_factor_authentication' => 'two-factor-authentication',
        'two_factor_notification' => 'two-factor-notification',
        'fortitoken' => 'fortitoken',
        'email_to' => 'email-to',
        'sms_server' => 'sms-server',
        'sms_custom_server' => 'sms-custom-server',
        'sms_phone' => 'sms-phone',
        'guest_auth' => 'guest-auth',
        'guest_usergroups' => 'guest-usergroups',
        'guest_lang' => 'guest-lang'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'wildcard' => 'setWildcard',
        'remote_auth' => 'setRemoteAuth',
        'remote_group' => 'setRemoteGroup',
        'password' => 'setPassword',
        'peer_auth' => 'setPeerAuth',
        'peer_group' => 'setPeerGroup',
        'trusthost1' => 'setTrusthost1',
        'trusthost2' => 'setTrusthost2',
        'trusthost3' => 'setTrusthost3',
        'trusthost4' => 'setTrusthost4',
        'trusthost5' => 'setTrusthost5',
        'trusthost6' => 'setTrusthost6',
        'trusthost7' => 'setTrusthost7',
        'trusthost8' => 'setTrusthost8',
        'trusthost9' => 'setTrusthost9',
        'trusthost10' => 'setTrusthost10',
        'ip6_trusthost1' => 'setIp6Trusthost1',
        'ip6_trusthost2' => 'setIp6Trusthost2',
        'ip6_trusthost3' => 'setIp6Trusthost3',
        'ip6_trusthost4' => 'setIp6Trusthost4',
        'ip6_trusthost5' => 'setIp6Trusthost5',
        'ip6_trusthost6' => 'setIp6Trusthost6',
        'ip6_trusthost7' => 'setIp6Trusthost7',
        'ip6_trusthost8' => 'setIp6Trusthost8',
        'ip6_trusthost9' => 'setIp6Trusthost9',
        'ip6_trusthost10' => 'setIp6Trusthost10',
        'accprofile' => 'setAccprofile',
        'allow_remove_admin_session' => 'setAllowRemoveAdminSession',
        'comments' => 'setComments',
        'vdom' => 'setVdom',
        'ssh_public_key1' => 'setSshPublicKey1',
        'ssh_public_key2' => 'setSshPublicKey2',
        'ssh_public_key3' => 'setSshPublicKey3',
        'ssh_certificate' => 'setSshCertificate',
        'schedule' => 'setSchedule',
        'accprofile_override' => 'setAccprofileOverride',
        'radius_vdom_override' => 'setRadiusVdomOverride',
        'password_expire' => 'setPasswordExpire',
        'force_password_change' => 'setForcePasswordChange',
        'two_factor' => 'setTwoFactor',
        'two_factor_authentication' => 'setTwoFactorAuthentication',
        'two_factor_notification' => 'setTwoFactorNotification',
        'fortitoken' => 'setFortitoken',
        'email_to' => 'setEmailTo',
        'sms_server' => 'setSmsServer',
        'sms_custom_server' => 'setSmsCustomServer',
        'sms_phone' => 'setSmsPhone',
        'guest_auth' => 'setGuestAuth',
        'guest_usergroups' => 'setGuestUsergroups',
        'guest_lang' => 'setGuestLang'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'wildcard' => 'getWildcard',
        'remote_auth' => 'getRemoteAuth',
        'remote_group' => 'getRemoteGroup',
        'password' => 'getPassword',
        'peer_auth' => 'getPeerAuth',
        'peer_group' => 'getPeerGroup',
        'trusthost1' => 'getTrusthost1',
        'trusthost2' => 'getTrusthost2',
        'trusthost3' => 'getTrusthost3',
        'trusthost4' => 'getTrusthost4',
        'trusthost5' => 'getTrusthost5',
        'trusthost6' => 'getTrusthost6',
        'trusthost7' => 'getTrusthost7',
        'trusthost8' => 'getTrusthost8',
        'trusthost9' => 'getTrusthost9',
        'trusthost10' => 'getTrusthost10',
        'ip6_trusthost1' => 'getIp6Trusthost1',
        'ip6_trusthost2' => 'getIp6Trusthost2',
        'ip6_trusthost3' => 'getIp6Trusthost3',
        'ip6_trusthost4' => 'getIp6Trusthost4',
        'ip6_trusthost5' => 'getIp6Trusthost5',
        'ip6_trusthost6' => 'getIp6Trusthost6',
        'ip6_trusthost7' => 'getIp6Trusthost7',
        'ip6_trusthost8' => 'getIp6Trusthost8',
        'ip6_trusthost9' => 'getIp6Trusthost9',
        'ip6_trusthost10' => 'getIp6Trusthost10',
        'accprofile' => 'getAccprofile',
        'allow_remove_admin_session' => 'getAllowRemoveAdminSession',
        'comments' => 'getComments',
        'vdom' => 'getVdom',
        'ssh_public_key1' => 'getSshPublicKey1',
        'ssh_public_key2' => 'getSshPublicKey2',
        'ssh_public_key3' => 'getSshPublicKey3',
        'ssh_certificate' => 'getSshCertificate',
        'schedule' => 'getSchedule',
        'accprofile_override' => 'getAccprofileOverride',
        'radius_vdom_override' => 'getRadiusVdomOverride',
        'password_expire' => 'getPasswordExpire',
        'force_password_change' => 'getForcePasswordChange',
        'two_factor' => 'getTwoFactor',
        'two_factor_authentication' => 'getTwoFactorAuthentication',
        'two_factor_notification' => 'getTwoFactorNotification',
        'fortitoken' => 'getFortitoken',
        'email_to' => 'getEmailTo',
        'sms_server' => 'getSmsServer',
        'sms_custom_server' => 'getSmsCustomServer',
        'sms_phone' => 'getSmsPhone',
        'guest_auth' => 'getGuestAuth',
        'guest_usergroups' => 'getGuestUsergroups',
        'guest_lang' => 'getGuestLang'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const WILDCARD_ENABLE = 'enable';
    const WILDCARD_DISABLE = 'disable';
    const REMOTE_AUTH_ENABLE = 'enable';
    const REMOTE_AUTH_DISABLE = 'disable';
    const PEER_AUTH_ENABLE = 'enable';
    const PEER_AUTH_DISABLE = 'disable';
    const ALLOW_REMOVE_ADMIN_SESSION_ENABLE = 'enable';
    const ALLOW_REMOVE_ADMIN_SESSION_DISABLE = 'disable';
    const ACCPROFILE_OVERRIDE_ENABLE = 'enable';
    const ACCPROFILE_OVERRIDE_DISABLE = 'disable';
    const RADIUS_VDOM_OVERRIDE_ENABLE = 'enable';
    const RADIUS_VDOM_OVERRIDE_DISABLE = 'disable';
    const FORCE_PASSWORD_CHANGE_ENABLE = 'enable';
    const FORCE_PASSWORD_CHANGE_DISABLE = 'disable';
    const TWO_FACTOR_DISABLE = 'disable';
    const TWO_FACTOR_FORTITOKEN = 'fortitoken';
    const TWO_FACTOR_FORTITOKEN_CLOUD = 'fortitoken-cloud';
    const TWO_FACTOR_EMAIL = 'email';
    const TWO_FACTOR_SMS = 'sms';
    const TWO_FACTOR_AUTHENTICATION_FORTITOKEN = 'fortitoken';
    const TWO_FACTOR_AUTHENTICATION_EMAIL = 'email';
    const TWO_FACTOR_AUTHENTICATION_SMS = 'sms';
    const TWO_FACTOR_NOTIFICATION_EMAIL = 'email';
    const TWO_FACTOR_NOTIFICATION_SMS = 'sms';
    const SMS_SERVER_FORTIGUARD = 'fortiguard';
    const SMS_SERVER_CUSTOM = 'custom';
    const GUEST_AUTH_DISABLE = 'disable';
    const GUEST_AUTH_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWildcardAllowableValues()
    {
        return [
            self::WILDCARD_ENABLE,
            self::WILDCARD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRemoteAuthAllowableValues()
    {
        return [
            self::REMOTE_AUTH_ENABLE,
            self::REMOTE_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerAuthAllowableValues()
    {
        return [
            self::PEER_AUTH_ENABLE,
            self::PEER_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowRemoveAdminSessionAllowableValues()
    {
        return [
            self::ALLOW_REMOVE_ADMIN_SESSION_ENABLE,
            self::ALLOW_REMOVE_ADMIN_SESSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccprofileOverrideAllowableValues()
    {
        return [
            self::ACCPROFILE_OVERRIDE_ENABLE,
            self::ACCPROFILE_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadiusVdomOverrideAllowableValues()
    {
        return [
            self::RADIUS_VDOM_OVERRIDE_ENABLE,
            self::RADIUS_VDOM_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForcePasswordChangeAllowableValues()
    {
        return [
            self::FORCE_PASSWORD_CHANGE_ENABLE,
            self::FORCE_PASSWORD_CHANGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAllowableValues()
    {
        return [
            self::TWO_FACTOR_DISABLE,
            self::TWO_FACTOR_FORTITOKEN,
            self::TWO_FACTOR_FORTITOKEN_CLOUD,
            self::TWO_FACTOR_EMAIL,
            self::TWO_FACTOR_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorAuthenticationAllowableValues()
    {
        return [
            self::TWO_FACTOR_AUTHENTICATION_FORTITOKEN,
            self::TWO_FACTOR_AUTHENTICATION_EMAIL,
            self::TWO_FACTOR_AUTHENTICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTwoFactorNotificationAllowableValues()
    {
        return [
            self::TWO_FACTOR_NOTIFICATION_EMAIL,
            self::TWO_FACTOR_NOTIFICATION_SMS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsServerAllowableValues()
    {
        return [
            self::SMS_SERVER_FORTIGUARD,
            self::SMS_SERVER_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuestAuthAllowableValues()
    {
        return [
            self::GUEST_AUTH_DISABLE,
            self::GUEST_AUTH_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['wildcard'] = $data['wildcard'] ?? null;
        $this->container['remote_auth'] = $data['remote_auth'] ?? null;
        $this->container['remote_group'] = $data['remote_group'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['peer_auth'] = $data['peer_auth'] ?? null;
        $this->container['peer_group'] = $data['peer_group'] ?? null;
        $this->container['trusthost1'] = $data['trusthost1'] ?? null;
        $this->container['trusthost2'] = $data['trusthost2'] ?? null;
        $this->container['trusthost3'] = $data['trusthost3'] ?? null;
        $this->container['trusthost4'] = $data['trusthost4'] ?? null;
        $this->container['trusthost5'] = $data['trusthost5'] ?? null;
        $this->container['trusthost6'] = $data['trusthost6'] ?? null;
        $this->container['trusthost7'] = $data['trusthost7'] ?? null;
        $this->container['trusthost8'] = $data['trusthost8'] ?? null;
        $this->container['trusthost9'] = $data['trusthost9'] ?? null;
        $this->container['trusthost10'] = $data['trusthost10'] ?? null;
        $this->container['ip6_trusthost1'] = $data['ip6_trusthost1'] ?? null;
        $this->container['ip6_trusthost2'] = $data['ip6_trusthost2'] ?? null;
        $this->container['ip6_trusthost3'] = $data['ip6_trusthost3'] ?? null;
        $this->container['ip6_trusthost4'] = $data['ip6_trusthost4'] ?? null;
        $this->container['ip6_trusthost5'] = $data['ip6_trusthost5'] ?? null;
        $this->container['ip6_trusthost6'] = $data['ip6_trusthost6'] ?? null;
        $this->container['ip6_trusthost7'] = $data['ip6_trusthost7'] ?? null;
        $this->container['ip6_trusthost8'] = $data['ip6_trusthost8'] ?? null;
        $this->container['ip6_trusthost9'] = $data['ip6_trusthost9'] ?? null;
        $this->container['ip6_trusthost10'] = $data['ip6_trusthost10'] ?? null;
        $this->container['accprofile'] = $data['accprofile'] ?? null;
        $this->container['allow_remove_admin_session'] = $data['allow_remove_admin_session'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['vdom'] = $data['vdom'] ?? null;
        $this->container['ssh_public_key1'] = $data['ssh_public_key1'] ?? null;
        $this->container['ssh_public_key2'] = $data['ssh_public_key2'] ?? null;
        $this->container['ssh_public_key3'] = $data['ssh_public_key3'] ?? null;
        $this->container['ssh_certificate'] = $data['ssh_certificate'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['accprofile_override'] = $data['accprofile_override'] ?? null;
        $this->container['radius_vdom_override'] = $data['radius_vdom_override'] ?? null;
        $this->container['password_expire'] = $data['password_expire'] ?? null;
        $this->container['force_password_change'] = $data['force_password_change'] ?? null;
        $this->container['two_factor'] = $data['two_factor'] ?? null;
        $this->container['two_factor_authentication'] = $data['two_factor_authentication'] ?? null;
        $this->container['two_factor_notification'] = $data['two_factor_notification'] ?? null;
        $this->container['fortitoken'] = $data['fortitoken'] ?? null;
        $this->container['email_to'] = $data['email_to'] ?? null;
        $this->container['sms_server'] = $data['sms_server'] ?? null;
        $this->container['sms_custom_server'] = $data['sms_custom_server'] ?? null;
        $this->container['sms_phone'] = $data['sms_phone'] ?? null;
        $this->container['guest_auth'] = $data['guest_auth'] ?? null;
        $this->container['guest_usergroups'] = $data['guest_usergroups'] ?? null;
        $this->container['guest_lang'] = $data['guest_lang'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getWildcardAllowableValues();
        if (!is_null($this->container['wildcard']) && !in_array($this->container['wildcard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wildcard', must be one of '%s'",
                $this->container['wildcard'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRemoteAuthAllowableValues();
        if (!is_null($this->container['remote_auth']) && !in_array($this->container['remote_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'remote_auth', must be one of '%s'",
                $this->container['remote_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['remote_group']) && (mb_strlen($this->container['remote_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'remote_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getPeerAuthAllowableValues();
        if (!is_null($this->container['peer_auth']) && !in_array($this->container['peer_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_auth', must be one of '%s'",
                $this->container['peer_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['peer_group']) && (mb_strlen($this->container['peer_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'peer_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['accprofile']) && (mb_strlen($this->container['accprofile']) > 35)) {
            $invalidProperties[] = "invalid value for 'accprofile', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAllowRemoveAdminSessionAllowableValues();
        if (!is_null($this->container['allow_remove_admin_session']) && !in_array($this->container['allow_remove_admin_session'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_remove_admin_session', must be one of '%s'",
                $this->container['allow_remove_admin_session'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vdom']) && (count($this->container['vdom']) > 0)) {
            $invalidProperties[] = "invalid value for 'vdom', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ssh_certificate']) && (mb_strlen($this->container['ssh_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'ssh_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['schedule']) && (mb_strlen($this->container['schedule']) > 35)) {
            $invalidProperties[] = "invalid value for 'schedule', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAccprofileOverrideAllowableValues();
        if (!is_null($this->container['accprofile_override']) && !in_array($this->container['accprofile_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'accprofile_override', must be one of '%s'",
                $this->container['accprofile_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRadiusVdomOverrideAllowableValues();
        if (!is_null($this->container['radius_vdom_override']) && !in_array($this->container['radius_vdom_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'radius_vdom_override', must be one of '%s'",
                $this->container['radius_vdom_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForcePasswordChangeAllowableValues();
        if (!is_null($this->container['force_password_change']) && !in_array($this->container['force_password_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'force_password_change', must be one of '%s'",
                $this->container['force_password_change'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($this->container['two_factor']) && !in_array($this->container['two_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor', must be one of '%s'",
                $this->container['two_factor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($this->container['two_factor_authentication']) && !in_array($this->container['two_factor_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                $this->container['two_factor_authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($this->container['two_factor_notification']) && !in_array($this->container['two_factor_notification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                $this->container['two_factor_notification'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fortitoken']) && (mb_strlen($this->container['fortitoken']) > 16)) {
            $invalidProperties[] = "invalid value for 'fortitoken', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['email_to']) && (mb_strlen($this->container['email_to']) > 63)) {
            $invalidProperties[] = "invalid value for 'email_to', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($this->container['sms_server']) && !in_array($this->container['sms_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sms_server', must be one of '%s'",
                $this->container['sms_server'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sms_custom_server']) && (mb_strlen($this->container['sms_custom_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'sms_custom_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sms_phone']) && (mb_strlen($this->container['sms_phone']) > 15)) {
            $invalidProperties[] = "invalid value for 'sms_phone', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getGuestAuthAllowableValues();
        if (!is_null($this->container['guest_auth']) && !in_array($this->container['guest_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'guest_auth', must be one of '%s'",
                $this->container['guest_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['guest_usergroups']) && (count($this->container['guest_usergroups']) > 0)) {
            $invalidProperties[] = "invalid value for 'guest_usergroups', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['guest_lang']) && (mb_strlen($this->container['guest_lang']) > 35)) {
            $invalidProperties[] = "invalid value for 'guest_lang', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name User name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject267., must be smaller than or equal to 64.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets wildcard
     *
     * @return string|null
     */
    public function getWildcard()
    {
        return $this->container['wildcard'];
    }

    /**
     * Sets wildcard
     *
     * @param string|null $wildcard Enable/disable wildcard RADIUS authentication.    enable:Enable username wildcard.    disable:Disable username wildcard.
     *
     * @return self
     */
    public function setWildcard($wildcard)
    {
        $allowedValues = $this->getWildcardAllowableValues();
        if (!is_null($wildcard) && !in_array($wildcard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wildcard', must be one of '%s'",
                    $wildcard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wildcard'] = $wildcard;

        return $this;
    }

    /**
     * Gets remote_auth
     *
     * @return string|null
     */
    public function getRemoteAuth()
    {
        return $this->container['remote_auth'];
    }

    /**
     * Sets remote_auth
     *
     * @param string|null $remote_auth Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server.    enable:Enable remote authentication.    disable:Disable remote authentication.
     *
     * @return self
     */
    public function setRemoteAuth($remote_auth)
    {
        $allowedValues = $this->getRemoteAuthAllowableValues();
        if (!is_null($remote_auth) && !in_array($remote_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'remote_auth', must be one of '%s'",
                    $remote_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['remote_auth'] = $remote_auth;

        return $this;
    }

    /**
     * Gets remote_group
     *
     * @return string|null
     */
    public function getRemoteGroup()
    {
        return $this->container['remote_group'];
    }

    /**
     * Sets remote_group
     *
     * @param string|null $remote_group User group name used for remote auth.
     *
     * @return self
     */
    public function setRemoteGroup($remote_group)
    {
        if (!is_null($remote_group) && (mb_strlen($remote_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $remote_group when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['remote_group'] = $remote_group;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Admin user password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets peer_auth
     *
     * @return string|null
     */
    public function getPeerAuth()
    {
        return $this->container['peer_auth'];
    }

    /**
     * Sets peer_auth
     *
     * @param string|null $peer_auth Set to enable peer certificate authentication (for HTTPS admin access).    enable:Enable peer.    disable:Disable peer.
     *
     * @return self
     */
    public function setPeerAuth($peer_auth)
    {
        $allowedValues = $this->getPeerAuthAllowableValues();
        if (!is_null($peer_auth) && !in_array($peer_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_auth', must be one of '%s'",
                    $peer_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_auth'] = $peer_auth;

        return $this;
    }

    /**
     * Gets peer_group
     *
     * @return string|null
     */
    public function getPeerGroup()
    {
        return $this->container['peer_group'];
    }

    /**
     * Sets peer_group
     *
     * @param string|null $peer_group Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
     *
     * @return self
     */
    public function setPeerGroup($peer_group)
    {
        if (!is_null($peer_group) && (mb_strlen($peer_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $peer_group when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['peer_group'] = $peer_group;

        return $this;
    }

    /**
     * Gets trusthost1
     *
     * @return string|null
     */
    public function getTrusthost1()
    {
        return $this->container['trusthost1'];
    }

    /**
     * Sets trusthost1
     *
     * @param string|null $trusthost1 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost1($trusthost1)
    {
        $this->container['trusthost1'] = $trusthost1;

        return $this;
    }

    /**
     * Gets trusthost2
     *
     * @return string|null
     */
    public function getTrusthost2()
    {
        return $this->container['trusthost2'];
    }

    /**
     * Sets trusthost2
     *
     * @param string|null $trusthost2 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost2($trusthost2)
    {
        $this->container['trusthost2'] = $trusthost2;

        return $this;
    }

    /**
     * Gets trusthost3
     *
     * @return string|null
     */
    public function getTrusthost3()
    {
        return $this->container['trusthost3'];
    }

    /**
     * Sets trusthost3
     *
     * @param string|null $trusthost3 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost3($trusthost3)
    {
        $this->container['trusthost3'] = $trusthost3;

        return $this;
    }

    /**
     * Gets trusthost4
     *
     * @return string|null
     */
    public function getTrusthost4()
    {
        return $this->container['trusthost4'];
    }

    /**
     * Sets trusthost4
     *
     * @param string|null $trusthost4 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost4($trusthost4)
    {
        $this->container['trusthost4'] = $trusthost4;

        return $this;
    }

    /**
     * Gets trusthost5
     *
     * @return string|null
     */
    public function getTrusthost5()
    {
        return $this->container['trusthost5'];
    }

    /**
     * Sets trusthost5
     *
     * @param string|null $trusthost5 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost5($trusthost5)
    {
        $this->container['trusthost5'] = $trusthost5;

        return $this;
    }

    /**
     * Gets trusthost6
     *
     * @return string|null
     */
    public function getTrusthost6()
    {
        return $this->container['trusthost6'];
    }

    /**
     * Sets trusthost6
     *
     * @param string|null $trusthost6 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost6($trusthost6)
    {
        $this->container['trusthost6'] = $trusthost6;

        return $this;
    }

    /**
     * Gets trusthost7
     *
     * @return string|null
     */
    public function getTrusthost7()
    {
        return $this->container['trusthost7'];
    }

    /**
     * Sets trusthost7
     *
     * @param string|null $trusthost7 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost7($trusthost7)
    {
        $this->container['trusthost7'] = $trusthost7;

        return $this;
    }

    /**
     * Gets trusthost8
     *
     * @return string|null
     */
    public function getTrusthost8()
    {
        return $this->container['trusthost8'];
    }

    /**
     * Sets trusthost8
     *
     * @param string|null $trusthost8 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost8($trusthost8)
    {
        $this->container['trusthost8'] = $trusthost8;

        return $this;
    }

    /**
     * Gets trusthost9
     *
     * @return string|null
     */
    public function getTrusthost9()
    {
        return $this->container['trusthost9'];
    }

    /**
     * Sets trusthost9
     *
     * @param string|null $trusthost9 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost9($trusthost9)
    {
        $this->container['trusthost9'] = $trusthost9;

        return $this;
    }

    /**
     * Gets trusthost10
     *
     * @return string|null
     */
    public function getTrusthost10()
    {
        return $this->container['trusthost10'];
    }

    /**
     * Sets trusthost10
     *
     * @param string|null $trusthost10 Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     *
     * @return self
     */
    public function setTrusthost10($trusthost10)
    {
        $this->container['trusthost10'] = $trusthost10;

        return $this;
    }

    /**
     * Gets ip6_trusthost1
     *
     * @return string|null
     */
    public function getIp6Trusthost1()
    {
        return $this->container['ip6_trusthost1'];
    }

    /**
     * Sets ip6_trusthost1
     *
     * @param string|null $ip6_trusthost1 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost1($ip6_trusthost1)
    {
        $this->container['ip6_trusthost1'] = $ip6_trusthost1;

        return $this;
    }

    /**
     * Gets ip6_trusthost2
     *
     * @return string|null
     */
    public function getIp6Trusthost2()
    {
        return $this->container['ip6_trusthost2'];
    }

    /**
     * Sets ip6_trusthost2
     *
     * @param string|null $ip6_trusthost2 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost2($ip6_trusthost2)
    {
        $this->container['ip6_trusthost2'] = $ip6_trusthost2;

        return $this;
    }

    /**
     * Gets ip6_trusthost3
     *
     * @return string|null
     */
    public function getIp6Trusthost3()
    {
        return $this->container['ip6_trusthost3'];
    }

    /**
     * Sets ip6_trusthost3
     *
     * @param string|null $ip6_trusthost3 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost3($ip6_trusthost3)
    {
        $this->container['ip6_trusthost3'] = $ip6_trusthost3;

        return $this;
    }

    /**
     * Gets ip6_trusthost4
     *
     * @return string|null
     */
    public function getIp6Trusthost4()
    {
        return $this->container['ip6_trusthost4'];
    }

    /**
     * Sets ip6_trusthost4
     *
     * @param string|null $ip6_trusthost4 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost4($ip6_trusthost4)
    {
        $this->container['ip6_trusthost4'] = $ip6_trusthost4;

        return $this;
    }

    /**
     * Gets ip6_trusthost5
     *
     * @return string|null
     */
    public function getIp6Trusthost5()
    {
        return $this->container['ip6_trusthost5'];
    }

    /**
     * Sets ip6_trusthost5
     *
     * @param string|null $ip6_trusthost5 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost5($ip6_trusthost5)
    {
        $this->container['ip6_trusthost5'] = $ip6_trusthost5;

        return $this;
    }

    /**
     * Gets ip6_trusthost6
     *
     * @return string|null
     */
    public function getIp6Trusthost6()
    {
        return $this->container['ip6_trusthost6'];
    }

    /**
     * Sets ip6_trusthost6
     *
     * @param string|null $ip6_trusthost6 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost6($ip6_trusthost6)
    {
        $this->container['ip6_trusthost6'] = $ip6_trusthost6;

        return $this;
    }

    /**
     * Gets ip6_trusthost7
     *
     * @return string|null
     */
    public function getIp6Trusthost7()
    {
        return $this->container['ip6_trusthost7'];
    }

    /**
     * Sets ip6_trusthost7
     *
     * @param string|null $ip6_trusthost7 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost7($ip6_trusthost7)
    {
        $this->container['ip6_trusthost7'] = $ip6_trusthost7;

        return $this;
    }

    /**
     * Gets ip6_trusthost8
     *
     * @return string|null
     */
    public function getIp6Trusthost8()
    {
        return $this->container['ip6_trusthost8'];
    }

    /**
     * Sets ip6_trusthost8
     *
     * @param string|null $ip6_trusthost8 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost8($ip6_trusthost8)
    {
        $this->container['ip6_trusthost8'] = $ip6_trusthost8;

        return $this;
    }

    /**
     * Gets ip6_trusthost9
     *
     * @return string|null
     */
    public function getIp6Trusthost9()
    {
        return $this->container['ip6_trusthost9'];
    }

    /**
     * Sets ip6_trusthost9
     *
     * @param string|null $ip6_trusthost9 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost9($ip6_trusthost9)
    {
        $this->container['ip6_trusthost9'] = $ip6_trusthost9;

        return $this;
    }

    /**
     * Gets ip6_trusthost10
     *
     * @return string|null
     */
    public function getIp6Trusthost10()
    {
        return $this->container['ip6_trusthost10'];
    }

    /**
     * Sets ip6_trusthost10
     *
     * @param string|null $ip6_trusthost10 Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     *
     * @return self
     */
    public function setIp6Trusthost10($ip6_trusthost10)
    {
        $this->container['ip6_trusthost10'] = $ip6_trusthost10;

        return $this;
    }

    /**
     * Gets accprofile
     *
     * @return string|null
     */
    public function getAccprofile()
    {
        return $this->container['accprofile'];
    }

    /**
     * Sets accprofile
     *
     * @param string|null $accprofile Access profile for this administrator. Access profiles control administrator access to FortiGate features.
     *
     * @return self
     */
    public function setAccprofile($accprofile)
    {
        if (!is_null($accprofile) && (mb_strlen($accprofile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $accprofile when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['accprofile'] = $accprofile;

        return $this;
    }

    /**
     * Gets allow_remove_admin_session
     *
     * @return string|null
     */
    public function getAllowRemoveAdminSession()
    {
        return $this->container['allow_remove_admin_session'];
    }

    /**
     * Sets allow_remove_admin_session
     *
     * @param string|null $allow_remove_admin_session Enable/disable allow admin session to be removed by privileged admin users.    enable:Enable allow-remove option.    disable:Disable allow-remove option.
     *
     * @return self
     */
    public function setAllowRemoveAdminSession($allow_remove_admin_session)
    {
        $allowedValues = $this->getAllowRemoveAdminSessionAllowableValues();
        if (!is_null($allow_remove_admin_session) && !in_array($allow_remove_admin_session, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_remove_admin_session', must be one of '%s'",
                    $allow_remove_admin_session,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_remove_admin_session'] = $allow_remove_admin_session;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject267., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets vdom
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]|null
     */
    public function getVdom()
    {
        return $this->container['vdom'];
    }

    /**
     * Sets vdom
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAdminNameVdom[]|null $vdom Virtual domain(s) that the administrator can access.
     *
     * @return self
     */
    public function setVdom($vdom)
    {

        if (!is_null($vdom) && (count($vdom) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vdom when calling InlineObject267., number of items must be less than or equal to 0.');
        }
        $this->container['vdom'] = $vdom;

        return $this;
    }

    /**
     * Gets ssh_public_key1
     *
     * @return string|null
     */
    public function getSshPublicKey1()
    {
        return $this->container['ssh_public_key1'];
    }

    /**
     * Sets ssh_public_key1
     *
     * @param string|null $ssh_public_key1 Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     *
     * @return self
     */
    public function setSshPublicKey1($ssh_public_key1)
    {
        $this->container['ssh_public_key1'] = $ssh_public_key1;

        return $this;
    }

    /**
     * Gets ssh_public_key2
     *
     * @return string|null
     */
    public function getSshPublicKey2()
    {
        return $this->container['ssh_public_key2'];
    }

    /**
     * Sets ssh_public_key2
     *
     * @param string|null $ssh_public_key2 Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     *
     * @return self
     */
    public function setSshPublicKey2($ssh_public_key2)
    {
        $this->container['ssh_public_key2'] = $ssh_public_key2;

        return $this;
    }

    /**
     * Gets ssh_public_key3
     *
     * @return string|null
     */
    public function getSshPublicKey3()
    {
        return $this->container['ssh_public_key3'];
    }

    /**
     * Sets ssh_public_key3
     *
     * @param string|null $ssh_public_key3 Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     *
     * @return self
     */
    public function setSshPublicKey3($ssh_public_key3)
    {
        $this->container['ssh_public_key3'] = $ssh_public_key3;

        return $this;
    }

    /**
     * Gets ssh_certificate
     *
     * @return string|null
     */
    public function getSshCertificate()
    {
        return $this->container['ssh_certificate'];
    }

    /**
     * Sets ssh_certificate
     *
     * @param string|null $ssh_certificate Select the certificate to be used by the FortiGate for authentication with an SSH client.
     *
     * @return self
     */
    public function setSshCertificate($ssh_certificate)
    {
        if (!is_null($ssh_certificate) && (mb_strlen($ssh_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ssh_certificate when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['ssh_certificate'] = $ssh_certificate;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (!is_null($schedule) && (mb_strlen($schedule) > 35)) {
            throw new \InvalidArgumentException('invalid length for $schedule when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets accprofile_override
     *
     * @return string|null
     */
    public function getAccprofileOverride()
    {
        return $this->container['accprofile_override'];
    }

    /**
     * Sets accprofile_override
     *
     * @param string|null $accprofile_override Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access.    enable:Enable access profile override.    disable:Disable access profile override.
     *
     * @return self
     */
    public function setAccprofileOverride($accprofile_override)
    {
        $allowedValues = $this->getAccprofileOverrideAllowableValues();
        if (!is_null($accprofile_override) && !in_array($accprofile_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'accprofile_override', must be one of '%s'",
                    $accprofile_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accprofile_override'] = $accprofile_override;

        return $this;
    }

    /**
     * Gets radius_vdom_override
     *
     * @return string|null
     */
    public function getRadiusVdomOverride()
    {
        return $this->container['radius_vdom_override'];
    }

    /**
     * Sets radius_vdom_override
     *
     * @param string|null $radius_vdom_override Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access.    enable:Enable VDOM override.    disable:Disable VDOM override.
     *
     * @return self
     */
    public function setRadiusVdomOverride($radius_vdom_override)
    {
        $allowedValues = $this->getRadiusVdomOverrideAllowableValues();
        if (!is_null($radius_vdom_override) && !in_array($radius_vdom_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'radius_vdom_override', must be one of '%s'",
                    $radius_vdom_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radius_vdom_override'] = $radius_vdom_override;

        return $this;
    }

    /**
     * Gets password_expire
     *
     * @return string|null
     */
    public function getPasswordExpire()
    {
        return $this->container['password_expire'];
    }

    /**
     * Sets password_expire
     *
     * @param string|null $password_expire Password expire time.
     *
     * @return self
     */
    public function setPasswordExpire($password_expire)
    {
        $this->container['password_expire'] = $password_expire;

        return $this;
    }

    /**
     * Gets force_password_change
     *
     * @return string|null
     */
    public function getForcePasswordChange()
    {
        return $this->container['force_password_change'];
    }

    /**
     * Sets force_password_change
     *
     * @param string|null $force_password_change Enable/disable force password change on next login.    enable:Enable force password change on next login.    disable:Disable force password change on next login.
     *
     * @return self
     */
    public function setForcePasswordChange($force_password_change)
    {
        $allowedValues = $this->getForcePasswordChangeAllowableValues();
        if (!is_null($force_password_change) && !in_array($force_password_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'force_password_change', must be one of '%s'",
                    $force_password_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['force_password_change'] = $force_password_change;

        return $this;
    }

    /**
     * Gets two_factor
     *
     * @return string|null
     */
    public function getTwoFactor()
    {
        return $this->container['two_factor'];
    }

    /**
     * Sets two_factor
     *
     * @param string|null $two_factor Enable/disable two-factor authentication.    disable:Disable two-factor authentication.    fortitoken:Use FortiToken or FortiToken mobile two-factor authentication.    fortitoken-cloud:FortiToken Cloud Service.    email:Send a two-factor authentication code to the configured email-to email address.    sms:Send a two-factor authentication code to the configured sms-server and sms-phone.
     *
     * @return self
     */
    public function setTwoFactor($two_factor)
    {
        $allowedValues = $this->getTwoFactorAllowableValues();
        if (!is_null($two_factor) && !in_array($two_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor', must be one of '%s'",
                    $two_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor'] = $two_factor;

        return $this;
    }

    /**
     * Gets two_factor_authentication
     *
     * @return string|null
     */
    public function getTwoFactorAuthentication()
    {
        return $this->container['two_factor_authentication'];
    }

    /**
     * Sets two_factor_authentication
     *
     * @param string|null $two_factor_authentication Authentication method by FortiToken Cloud.    fortitoken:FortiToken authentication.    email:Email one time password.    sms:SMS one time password.
     *
     * @return self
     */
    public function setTwoFactorAuthentication($two_factor_authentication)
    {
        $allowedValues = $this->getTwoFactorAuthenticationAllowableValues();
        if (!is_null($two_factor_authentication) && !in_array($two_factor_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_authentication', must be one of '%s'",
                    $two_factor_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_authentication'] = $two_factor_authentication;

        return $this;
    }

    /**
     * Gets two_factor_notification
     *
     * @return string|null
     */
    public function getTwoFactorNotification()
    {
        return $this->container['two_factor_notification'];
    }

    /**
     * Sets two_factor_notification
     *
     * @param string|null $two_factor_notification Notification method for user activation by FortiToken Cloud.    email:Email notification for activation code.    sms:SMS notification for activation code.
     *
     * @return self
     */
    public function setTwoFactorNotification($two_factor_notification)
    {
        $allowedValues = $this->getTwoFactorNotificationAllowableValues();
        if (!is_null($two_factor_notification) && !in_array($two_factor_notification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'two_factor_notification', must be one of '%s'",
                    $two_factor_notification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['two_factor_notification'] = $two_factor_notification;

        return $this;
    }

    /**
     * Gets fortitoken
     *
     * @return string|null
     */
    public function getFortitoken()
    {
        return $this->container['fortitoken'];
    }

    /**
     * Sets fortitoken
     *
     * @param string|null $fortitoken This administrator's FortiToken serial number.
     *
     * @return self
     */
    public function setFortitoken($fortitoken)
    {
        if (!is_null($fortitoken) && (mb_strlen($fortitoken) > 16)) {
            throw new \InvalidArgumentException('invalid length for $fortitoken when calling InlineObject267., must be smaller than or equal to 16.');
        }

        $this->container['fortitoken'] = $fortitoken;

        return $this;
    }

    /**
     * Gets email_to
     *
     * @return string|null
     */
    public function getEmailTo()
    {
        return $this->container['email_to'];
    }

    /**
     * Sets email_to
     *
     * @param string|null $email_to This administrator's email address.
     *
     * @return self
     */
    public function setEmailTo($email_to)
    {
        if (!is_null($email_to) && (mb_strlen($email_to) > 63)) {
            throw new \InvalidArgumentException('invalid length for $email_to when calling InlineObject267., must be smaller than or equal to 63.');
        }

        $this->container['email_to'] = $email_to;

        return $this;
    }

    /**
     * Gets sms_server
     *
     * @return string|null
     */
    public function getSmsServer()
    {
        return $this->container['sms_server'];
    }

    /**
     * Sets sms_server
     *
     * @param string|null $sms_server Send SMS messages using the FortiGuard SMS server or a custom server.    fortiguard:Send SMS by FortiGuard.    custom:Send SMS by custom server.
     *
     * @return self
     */
    public function setSmsServer($sms_server)
    {
        $allowedValues = $this->getSmsServerAllowableValues();
        if (!is_null($sms_server) && !in_array($sms_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sms_server', must be one of '%s'",
                    $sms_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms_server'] = $sms_server;

        return $this;
    }

    /**
     * Gets sms_custom_server
     *
     * @return string|null
     */
    public function getSmsCustomServer()
    {
        return $this->container['sms_custom_server'];
    }

    /**
     * Sets sms_custom_server
     *
     * @param string|null $sms_custom_server Custom SMS server to send SMS messages to.
     *
     * @return self
     */
    public function setSmsCustomServer($sms_custom_server)
    {
        if (!is_null($sms_custom_server) && (mb_strlen($sms_custom_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sms_custom_server when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['sms_custom_server'] = $sms_custom_server;

        return $this;
    }

    /**
     * Gets sms_phone
     *
     * @return string|null
     */
    public function getSmsPhone()
    {
        return $this->container['sms_phone'];
    }

    /**
     * Sets sms_phone
     *
     * @param string|null $sms_phone Phone number on which the administrator receives SMS messages.
     *
     * @return self
     */
    public function setSmsPhone($sms_phone)
    {
        if (!is_null($sms_phone) && (mb_strlen($sms_phone) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sms_phone when calling InlineObject267., must be smaller than or equal to 15.');
        }

        $this->container['sms_phone'] = $sms_phone;

        return $this;
    }

    /**
     * Gets guest_auth
     *
     * @return string|null
     */
    public function getGuestAuth()
    {
        return $this->container['guest_auth'];
    }

    /**
     * Sets guest_auth
     *
     * @param string|null $guest_auth Enable/disable guest authentication.    disable:Disable guest authentication.    enable:Enable guest authentication.
     *
     * @return self
     */
    public function setGuestAuth($guest_auth)
    {
        $allowedValues = $this->getGuestAuthAllowableValues();
        if (!is_null($guest_auth) && !in_array($guest_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'guest_auth', must be one of '%s'",
                    $guest_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['guest_auth'] = $guest_auth;

        return $this;
    }

    /**
     * Gets guest_usergroups
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemAdminNameGuestUsergroups[]|null
     */
    public function getGuestUsergroups()
    {
        return $this->container['guest_usergroups'];
    }

    /**
     * Sets guest_usergroups
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemAdminNameGuestUsergroups[]|null $guest_usergroups Select guest user groups.
     *
     * @return self
     */
    public function setGuestUsergroups($guest_usergroups)
    {

        if (!is_null($guest_usergroups) && (count($guest_usergroups) > 0)) {
            throw new \InvalidArgumentException('invalid value for $guest_usergroups when calling InlineObject267., number of items must be less than or equal to 0.');
        }
        $this->container['guest_usergroups'] = $guest_usergroups;

        return $this;
    }

    /**
     * Gets guest_lang
     *
     * @return string|null
     */
    public function getGuestLang()
    {
        return $this->container['guest_lang'];
    }

    /**
     * Sets guest_lang
     *
     * @param string|null $guest_lang Guest management portal language.
     *
     * @return self
     */
    public function setGuestLang($guest_lang)
    {
        if (!is_null($guest_lang) && (mb_strlen($guest_lang) > 35)) {
            throw new \InvalidArgumentException('invalid length for $guest_lang when calling InlineObject267., must be smaller than or equal to 35.');
        }

        $this->container['guest_lang'] = $guest_lang;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


