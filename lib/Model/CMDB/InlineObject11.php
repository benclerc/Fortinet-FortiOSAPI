<?php
/**
 * InlineObject11
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject11 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject11 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_11';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'replacemsg_group' => 'string',
        'extended_log' => 'string',
        'other_application_action' => 'string',
        'app_replacemsg' => 'string',
        'other_application_log' => 'string',
        'enforce_default_app_port' => 'string',
        'force_inclusion_ssl_di_sigs' => 'string',
        'unknown_application_action' => 'string',
        'unknown_application_log' => 'string',
        'p2p_black_list' => 'string',
        'deep_app_inspection' => 'string',
        'options' => 'string',
        'entries' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameEntries[]',
        'control_default_network_services' => 'string',
        'default_network_services' => '\Fortigate\FortiOS\Model\CMDB\ApplicationListNameDefaultNetworkServices[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'replacemsg_group' => null,
        'extended_log' => null,
        'other_application_action' => null,
        'app_replacemsg' => null,
        'other_application_log' => null,
        'enforce_default_app_port' => null,
        'force_inclusion_ssl_di_sigs' => null,
        'unknown_application_action' => null,
        'unknown_application_log' => null,
        'p2p_black_list' => null,
        'deep_app_inspection' => null,
        'options' => null,
        'entries' => null,
        'control_default_network_services' => null,
        'default_network_services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'replacemsg_group' => 'replacemsg-group',
        'extended_log' => 'extended-log',
        'other_application_action' => 'other-application-action',
        'app_replacemsg' => 'app-replacemsg',
        'other_application_log' => 'other-application-log',
        'enforce_default_app_port' => 'enforce-default-app-port',
        'force_inclusion_ssl_di_sigs' => 'force-inclusion-ssl-di-sigs',
        'unknown_application_action' => 'unknown-application-action',
        'unknown_application_log' => 'unknown-application-log',
        'p2p_black_list' => 'p2p-black-list',
        'deep_app_inspection' => 'deep-app-inspection',
        'options' => 'options',
        'entries' => 'entries',
        'control_default_network_services' => 'control-default-network-services',
        'default_network_services' => 'default-network-services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'replacemsg_group' => 'setReplacemsgGroup',
        'extended_log' => 'setExtendedLog',
        'other_application_action' => 'setOtherApplicationAction',
        'app_replacemsg' => 'setAppReplacemsg',
        'other_application_log' => 'setOtherApplicationLog',
        'enforce_default_app_port' => 'setEnforceDefaultAppPort',
        'force_inclusion_ssl_di_sigs' => 'setForceInclusionSslDiSigs',
        'unknown_application_action' => 'setUnknownApplicationAction',
        'unknown_application_log' => 'setUnknownApplicationLog',
        'p2p_black_list' => 'setP2pBlackList',
        'deep_app_inspection' => 'setDeepAppInspection',
        'options' => 'setOptions',
        'entries' => 'setEntries',
        'control_default_network_services' => 'setControlDefaultNetworkServices',
        'default_network_services' => 'setDefaultNetworkServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'replacemsg_group' => 'getReplacemsgGroup',
        'extended_log' => 'getExtendedLog',
        'other_application_action' => 'getOtherApplicationAction',
        'app_replacemsg' => 'getAppReplacemsg',
        'other_application_log' => 'getOtherApplicationLog',
        'enforce_default_app_port' => 'getEnforceDefaultAppPort',
        'force_inclusion_ssl_di_sigs' => 'getForceInclusionSslDiSigs',
        'unknown_application_action' => 'getUnknownApplicationAction',
        'unknown_application_log' => 'getUnknownApplicationLog',
        'p2p_black_list' => 'getP2pBlackList',
        'deep_app_inspection' => 'getDeepAppInspection',
        'options' => 'getOptions',
        'entries' => 'getEntries',
        'control_default_network_services' => 'getControlDefaultNetworkServices',
        'default_network_services' => 'getDefaultNetworkServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    const OTHER_APPLICATION_ACTION_PASS = 'pass';
    const OTHER_APPLICATION_ACTION_BLOCK = 'block';
    const APP_REPLACEMSG_DISABLE = 'disable';
    const APP_REPLACEMSG_ENABLE = 'enable';
    const OTHER_APPLICATION_LOG_DISABLE = 'disable';
    const OTHER_APPLICATION_LOG_ENABLE = 'enable';
    const ENFORCE_DEFAULT_APP_PORT_DISABLE = 'disable';
    const ENFORCE_DEFAULT_APP_PORT_ENABLE = 'enable';
    const FORCE_INCLUSION_SSL_DI_SIGS_DISABLE = 'disable';
    const FORCE_INCLUSION_SSL_DI_SIGS_ENABLE = 'enable';
    const UNKNOWN_APPLICATION_ACTION_PASS = 'pass';
    const UNKNOWN_APPLICATION_ACTION_BLOCK = 'block';
    const UNKNOWN_APPLICATION_LOG_DISABLE = 'disable';
    const UNKNOWN_APPLICATION_LOG_ENABLE = 'enable';
    const P2P_BLACK_LIST_SKYPE = 'skype';
    const P2P_BLACK_LIST_EDONKEY = 'edonkey';
    const P2P_BLACK_LIST_BITTORRENT = 'bittorrent';
    const DEEP_APP_INSPECTION_DISABLE = 'disable';
    const DEEP_APP_INSPECTION_ENABLE = 'enable';
    const OPTIONS_DNS = 'allow-dns';
    const OPTIONS_ICMP = 'allow-icmp';
    const OPTIONS_HTTP = 'allow-http';
    const OPTIONS_SSL = 'allow-ssl';
    const OPTIONS_QUIC = 'allow-quic';
    const CONTROL_DEFAULT_NETWORK_SERVICES_DISABLE = 'disable';
    const CONTROL_DEFAULT_NETWORK_SERVICES_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOtherApplicationActionAllowableValues()
    {
        return [
            self::OTHER_APPLICATION_ACTION_PASS,
            self::OTHER_APPLICATION_ACTION_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppReplacemsgAllowableValues()
    {
        return [
            self::APP_REPLACEMSG_DISABLE,
            self::APP_REPLACEMSG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOtherApplicationLogAllowableValues()
    {
        return [
            self::OTHER_APPLICATION_LOG_DISABLE,
            self::OTHER_APPLICATION_LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnforceDefaultAppPortAllowableValues()
    {
        return [
            self::ENFORCE_DEFAULT_APP_PORT_DISABLE,
            self::ENFORCE_DEFAULT_APP_PORT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForceInclusionSslDiSigsAllowableValues()
    {
        return [
            self::FORCE_INCLUSION_SSL_DI_SIGS_DISABLE,
            self::FORCE_INCLUSION_SSL_DI_SIGS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownApplicationActionAllowableValues()
    {
        return [
            self::UNKNOWN_APPLICATION_ACTION_PASS,
            self::UNKNOWN_APPLICATION_ACTION_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownApplicationLogAllowableValues()
    {
        return [
            self::UNKNOWN_APPLICATION_LOG_DISABLE,
            self::UNKNOWN_APPLICATION_LOG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getP2pBlackListAllowableValues()
    {
        return [
            self::P2P_BLACK_LIST_SKYPE,
            self::P2P_BLACK_LIST_EDONKEY,
            self::P2P_BLACK_LIST_BITTORRENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeepAppInspectionAllowableValues()
    {
        return [
            self::DEEP_APP_INSPECTION_DISABLE,
            self::DEEP_APP_INSPECTION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionsAllowableValues()
    {
        return [
            self::OPTIONS_DNS,
            self::OPTIONS_ICMP,
            self::OPTIONS_HTTP,
            self::OPTIONS_SSL,
            self::OPTIONS_QUIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getControlDefaultNetworkServicesAllowableValues()
    {
        return [
            self::CONTROL_DEFAULT_NETWORK_SERVICES_DISABLE,
            self::CONTROL_DEFAULT_NETWORK_SERVICES_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['other_application_action'] = $data['other_application_action'] ?? null;
        $this->container['app_replacemsg'] = $data['app_replacemsg'] ?? null;
        $this->container['other_application_log'] = $data['other_application_log'] ?? null;
        $this->container['enforce_default_app_port'] = $data['enforce_default_app_port'] ?? null;
        $this->container['force_inclusion_ssl_di_sigs'] = $data['force_inclusion_ssl_di_sigs'] ?? null;
        $this->container['unknown_application_action'] = $data['unknown_application_action'] ?? null;
        $this->container['unknown_application_log'] = $data['unknown_application_log'] ?? null;
        $this->container['p2p_black_list'] = $data['p2p_black_list'] ?? null;
        $this->container['deep_app_inspection'] = $data['deep_app_inspection'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['entries'] = $data['entries'] ?? null;
        $this->container['control_default_network_services'] = $data['control_default_network_services'] ?? null;
        $this->container['default_network_services'] = $data['default_network_services'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOtherApplicationActionAllowableValues();
        if (!is_null($this->container['other_application_action']) && !in_array($this->container['other_application_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'other_application_action', must be one of '%s'",
                $this->container['other_application_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppReplacemsgAllowableValues();
        if (!is_null($this->container['app_replacemsg']) && !in_array($this->container['app_replacemsg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'app_replacemsg', must be one of '%s'",
                $this->container['app_replacemsg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOtherApplicationLogAllowableValues();
        if (!is_null($this->container['other_application_log']) && !in_array($this->container['other_application_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'other_application_log', must be one of '%s'",
                $this->container['other_application_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnforceDefaultAppPortAllowableValues();
        if (!is_null($this->container['enforce_default_app_port']) && !in_array($this->container['enforce_default_app_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enforce_default_app_port', must be one of '%s'",
                $this->container['enforce_default_app_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForceInclusionSslDiSigsAllowableValues();
        if (!is_null($this->container['force_inclusion_ssl_di_sigs']) && !in_array($this->container['force_inclusion_ssl_di_sigs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'force_inclusion_ssl_di_sigs', must be one of '%s'",
                $this->container['force_inclusion_ssl_di_sigs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnknownApplicationActionAllowableValues();
        if (!is_null($this->container['unknown_application_action']) && !in_array($this->container['unknown_application_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_application_action', must be one of '%s'",
                $this->container['unknown_application_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnknownApplicationLogAllowableValues();
        if (!is_null($this->container['unknown_application_log']) && !in_array($this->container['unknown_application_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_application_log', must be one of '%s'",
                $this->container['unknown_application_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getP2pBlackListAllowableValues();
        if (!is_null($this->container['p2p_black_list']) && !in_array($this->container['p2p_black_list'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'p2p_black_list', must be one of '%s'",
                $this->container['p2p_black_list'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeepAppInspectionAllowableValues();
        if (!is_null($this->container['deep_app_inspection']) && !in_array($this->container['deep_app_inspection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deep_app_inspection', must be one of '%s'",
                $this->container['deep_app_inspection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($this->container['options']) && !in_array($this->container['options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'options', must be one of '%s'",
                $this->container['options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['entries']) && (count($this->container['entries']) > 0)) {
            $invalidProperties[] = "invalid value for 'entries', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getControlDefaultNetworkServicesAllowableValues();
        if (!is_null($this->container['control_default_network_services']) && !in_array($this->container['control_default_network_services'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'control_default_network_services', must be one of '%s'",
                $this->container['control_default_network_services'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_network_services']) && (count($this->container['default_network_services']) > 0)) {
            $invalidProperties[] = "invalid value for 'default_network_services', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name List name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject11., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comments
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject11., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject11., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets other_application_action
     *
     * @return string|null
     */
    public function getOtherApplicationAction()
    {
        return $this->container['other_application_action'];
    }

    /**
     * Sets other_application_action
     *
     * @param string|null $other_application_action Action for other applications.    pass:Allow sessions matching an application in this application list.    block:Block sessions matching an application in this application list.
     *
     * @return self
     */
    public function setOtherApplicationAction($other_application_action)
    {
        $allowedValues = $this->getOtherApplicationActionAllowableValues();
        if (!is_null($other_application_action) && !in_array($other_application_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'other_application_action', must be one of '%s'",
                    $other_application_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['other_application_action'] = $other_application_action;

        return $this;
    }

    /**
     * Gets app_replacemsg
     *
     * @return string|null
     */
    public function getAppReplacemsg()
    {
        return $this->container['app_replacemsg'];
    }

    /**
     * Sets app_replacemsg
     *
     * @param string|null $app_replacemsg Enable/disable replacement messages for blocked applications.    disable:Disable replacement messages for blocked applications.    enable:Enable replacement messages for blocked applications.
     *
     * @return self
     */
    public function setAppReplacemsg($app_replacemsg)
    {
        $allowedValues = $this->getAppReplacemsgAllowableValues();
        if (!is_null($app_replacemsg) && !in_array($app_replacemsg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'app_replacemsg', must be one of '%s'",
                    $app_replacemsg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_replacemsg'] = $app_replacemsg;

        return $this;
    }

    /**
     * Gets other_application_log
     *
     * @return string|null
     */
    public function getOtherApplicationLog()
    {
        return $this->container['other_application_log'];
    }

    /**
     * Sets other_application_log
     *
     * @param string|null $other_application_log Enable/disable logging for other applications.    disable:Disable logging for other applications.    enable:Enable logging for other applications.
     *
     * @return self
     */
    public function setOtherApplicationLog($other_application_log)
    {
        $allowedValues = $this->getOtherApplicationLogAllowableValues();
        if (!is_null($other_application_log) && !in_array($other_application_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'other_application_log', must be one of '%s'",
                    $other_application_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['other_application_log'] = $other_application_log;

        return $this;
    }

    /**
     * Gets enforce_default_app_port
     *
     * @return string|null
     */
    public function getEnforceDefaultAppPort()
    {
        return $this->container['enforce_default_app_port'];
    }

    /**
     * Sets enforce_default_app_port
     *
     * @param string|null $enforce_default_app_port Enable/disable default application port enforcement for allowed applications.    disable:Disable default application port enforcement.    enable:Enable default application port enforcement.
     *
     * @return self
     */
    public function setEnforceDefaultAppPort($enforce_default_app_port)
    {
        $allowedValues = $this->getEnforceDefaultAppPortAllowableValues();
        if (!is_null($enforce_default_app_port) && !in_array($enforce_default_app_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enforce_default_app_port', must be one of '%s'",
                    $enforce_default_app_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enforce_default_app_port'] = $enforce_default_app_port;

        return $this;
    }

    /**
     * Gets force_inclusion_ssl_di_sigs
     *
     * @return string|null
     */
    public function getForceInclusionSslDiSigs()
    {
        return $this->container['force_inclusion_ssl_di_sigs'];
    }

    /**
     * Sets force_inclusion_ssl_di_sigs
     *
     * @param string|null $force_inclusion_ssl_di_sigs Enable/disable forced inclusion of SSL deep inspection signatures.    disable:Disable forced inclusion of signatures which normally require SSL deep inspection.    enable:Enable forced inclusion of signatures which normally require SSL deep inspection.
     *
     * @return self
     */
    public function setForceInclusionSslDiSigs($force_inclusion_ssl_di_sigs)
    {
        $allowedValues = $this->getForceInclusionSslDiSigsAllowableValues();
        if (!is_null($force_inclusion_ssl_di_sigs) && !in_array($force_inclusion_ssl_di_sigs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'force_inclusion_ssl_di_sigs', must be one of '%s'",
                    $force_inclusion_ssl_di_sigs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['force_inclusion_ssl_di_sigs'] = $force_inclusion_ssl_di_sigs;

        return $this;
    }

    /**
     * Gets unknown_application_action
     *
     * @return string|null
     */
    public function getUnknownApplicationAction()
    {
        return $this->container['unknown_application_action'];
    }

    /**
     * Sets unknown_application_action
     *
     * @param string|null $unknown_application_action Pass or block traffic from unknown applications.    pass:Pass or allow unknown applications.    block:Drop or block unknown applications.
     *
     * @return self
     */
    public function setUnknownApplicationAction($unknown_application_action)
    {
        $allowedValues = $this->getUnknownApplicationActionAllowableValues();
        if (!is_null($unknown_application_action) && !in_array($unknown_application_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_application_action', must be one of '%s'",
                    $unknown_application_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_application_action'] = $unknown_application_action;

        return $this;
    }

    /**
     * Gets unknown_application_log
     *
     * @return string|null
     */
    public function getUnknownApplicationLog()
    {
        return $this->container['unknown_application_log'];
    }

    /**
     * Sets unknown_application_log
     *
     * @param string|null $unknown_application_log Enable/disable logging for unknown applications.    disable:Disable logging for unknown applications.    enable:Enable logging for unknown applications.
     *
     * @return self
     */
    public function setUnknownApplicationLog($unknown_application_log)
    {
        $allowedValues = $this->getUnknownApplicationLogAllowableValues();
        if (!is_null($unknown_application_log) && !in_array($unknown_application_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_application_log', must be one of '%s'",
                    $unknown_application_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_application_log'] = $unknown_application_log;

        return $this;
    }

    /**
     * Gets p2p_black_list
     *
     * @return string|null
     */
    public function getP2pBlackList()
    {
        return $this->container['p2p_black_list'];
    }

    /**
     * Sets p2p_black_list
     *
     * @param string|null $p2p_black_list P2P applications to be black listed.    skype:Skype.    edonkey:Edonkey.    bittorrent:Bit torrent.
     *
     * @return self
     */
    public function setP2pBlackList($p2p_black_list)
    {
        $allowedValues = $this->getP2pBlackListAllowableValues();
        if (!is_null($p2p_black_list) && !in_array($p2p_black_list, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'p2p_black_list', must be one of '%s'",
                    $p2p_black_list,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['p2p_black_list'] = $p2p_black_list;

        return $this;
    }

    /**
     * Gets deep_app_inspection
     *
     * @return string|null
     */
    public function getDeepAppInspection()
    {
        return $this->container['deep_app_inspection'];
    }

    /**
     * Sets deep_app_inspection
     *
     * @param string|null $deep_app_inspection Enable/disable deep application inspection.    disable:Disable deep application inspection.    enable:Enable deep application inspection.
     *
     * @return self
     */
    public function setDeepAppInspection($deep_app_inspection)
    {
        $allowedValues = $this->getDeepAppInspectionAllowableValues();
        if (!is_null($deep_app_inspection) && !in_array($deep_app_inspection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deep_app_inspection', must be one of '%s'",
                    $deep_app_inspection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deep_app_inspection'] = $deep_app_inspection;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Basic application protocol signatures allowed by default.    allow-dns:Allow DNS.    allow-icmp:Allow ICMP.    allow-http:Allow generic HTTP web browsing.    allow-ssl:Allow generic SSL communication.    allow-quic:Allow QUIC.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $allowedValues = $this->getOptionsAllowableValues();
        if (!is_null($options) && !in_array($options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'options', must be one of '%s'",
                    $options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameEntries[]|null
     */
    public function getEntries()
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameEntries[]|null $entries Application list entries.
     *
     * @return self
     */
    public function setEntries($entries)
    {

        if (!is_null($entries) && (count($entries) > 0)) {
            throw new \InvalidArgumentException('invalid value for $entries when calling InlineObject11., number of items must be less than or equal to 0.');
        }
        $this->container['entries'] = $entries;

        return $this;
    }

    /**
     * Gets control_default_network_services
     *
     * @return string|null
     */
    public function getControlDefaultNetworkServices()
    {
        return $this->container['control_default_network_services'];
    }

    /**
     * Sets control_default_network_services
     *
     * @param string|null $control_default_network_services Enable/disable enforcement of protocols over selected ports.    disable:Disable protocol enforcement over selected ports.    enable:Enable protocol enforcement over selected ports.
     *
     * @return self
     */
    public function setControlDefaultNetworkServices($control_default_network_services)
    {
        $allowedValues = $this->getControlDefaultNetworkServicesAllowableValues();
        if (!is_null($control_default_network_services) && !in_array($control_default_network_services, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'control_default_network_services', must be one of '%s'",
                    $control_default_network_services,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['control_default_network_services'] = $control_default_network_services;

        return $this;
    }

    /**
     * Gets default_network_services
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ApplicationListNameDefaultNetworkServices[]|null
     */
    public function getDefaultNetworkServices()
    {
        return $this->container['default_network_services'];
    }

    /**
     * Sets default_network_services
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ApplicationListNameDefaultNetworkServices[]|null $default_network_services Default network service entries.
     *
     * @return self
     */
    public function setDefaultNetworkServices($default_network_services)
    {

        if (!is_null($default_network_services) && (count($default_network_services) > 0)) {
            throw new \InvalidArgumentException('invalid value for $default_network_services when calling InlineObject11., number of items must be less than or equal to 0.');
        }
        $this->container['default_network_services'] = $default_network_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


