<?php
/**
 * InlineObject563
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject563 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject563 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_563';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'icmp_port' => 'string',
        'ftp_port' => 'string',
        'ssh_port' => 'string',
        'http_port' => 'string',
        'tls_port' => 'string',
        'pptp_vpn_port' => 'string',
        'voip_tcp_port' => 'string',
        'voip_udp_port' => 'string',
        'ikev2_port' => 'string',
        'ikev2_xx_port' => 'string',
        'esp_port' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'icmp_port' => null,
        'ftp_port' => null,
        'ssh_port' => null,
        'http_port' => null,
        'tls_port' => null,
        'pptp_vpn_port' => null,
        'voip_tcp_port' => null,
        'voip_udp_port' => null,
        'ikev2_port' => null,
        'ikev2_xx_port' => null,
        'esp_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'icmp_port' => 'icmp-port',
        'ftp_port' => 'ftp-port',
        'ssh_port' => 'ssh-port',
        'http_port' => 'http-port',
        'tls_port' => 'tls-port',
        'pptp_vpn_port' => 'pptp-vpn-port',
        'voip_tcp_port' => 'voip-tcp-port',
        'voip_udp_port' => 'voip-udp-port',
        'ikev2_port' => 'ikev2-port',
        'ikev2_xx_port' => 'ikev2-xx-port',
        'esp_port' => 'esp-port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'icmp_port' => 'setIcmpPort',
        'ftp_port' => 'setFtpPort',
        'ssh_port' => 'setSshPort',
        'http_port' => 'setHttpPort',
        'tls_port' => 'setTlsPort',
        'pptp_vpn_port' => 'setPptpVpnPort',
        'voip_tcp_port' => 'setVoipTcpPort',
        'voip_udp_port' => 'setVoipUdpPort',
        'ikev2_port' => 'setIkev2Port',
        'ikev2_xx_port' => 'setIkev2XxPort',
        'esp_port' => 'setEspPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'icmp_port' => 'getIcmpPort',
        'ftp_port' => 'getFtpPort',
        'ssh_port' => 'getSshPort',
        'http_port' => 'getHttpPort',
        'tls_port' => 'getTlsPort',
        'pptp_vpn_port' => 'getPptpVpnPort',
        'voip_tcp_port' => 'getVoipTcpPort',
        'voip_udp_port' => 'getVoipUdpPort',
        'ikev2_port' => 'getIkev2Port',
        'ikev2_xx_port' => 'getIkev2XxPort',
        'esp_port' => 'getEspPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ICMP_PORT_CLOSED = 'closed';
    const ICMP_PORT_OPEN = 'open';
    const ICMP_PORT_UNKNOWN = 'unknown';
    const FTP_PORT_CLOSED = 'closed';
    const FTP_PORT_OPEN = 'open';
    const FTP_PORT_UNKNOWN = 'unknown';
    const SSH_PORT_CLOSED = 'closed';
    const SSH_PORT_OPEN = 'open';
    const SSH_PORT_UNKNOWN = 'unknown';
    const HTTP_PORT_CLOSED = 'closed';
    const HTTP_PORT_OPEN = 'open';
    const HTTP_PORT_UNKNOWN = 'unknown';
    const TLS_PORT_CLOSED = 'closed';
    const TLS_PORT_OPEN = 'open';
    const TLS_PORT_UNKNOWN = 'unknown';
    const PPTP_VPN_PORT_CLOSED = 'closed';
    const PPTP_VPN_PORT_OPEN = 'open';
    const PPTP_VPN_PORT_UNKNOWN = 'unknown';
    const VOIP_TCP_PORT_CLOSED = 'closed';
    const VOIP_TCP_PORT_OPEN = 'open';
    const VOIP_TCP_PORT_UNKNOWN = 'unknown';
    const VOIP_UDP_PORT_CLOSED = 'closed';
    const VOIP_UDP_PORT_OPEN = 'open';
    const VOIP_UDP_PORT_UNKNOWN = 'unknown';
    const IKEV2_PORT_CLOSED = 'closed';
    const IKEV2_PORT_OPEN = 'open';
    const IKEV2_PORT_UNKNOWN = 'unknown';
    const IKEV2_XX_PORT_CLOSED = 'closed';
    const IKEV2_XX_PORT_OPEN = 'open';
    const IKEV2_XX_PORT_UNKNOWN = 'unknown';
    const ESP_PORT_CLOSED = 'closed';
    const ESP_PORT_OPEN = 'open';
    const ESP_PORT_UNKNOWN = 'unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIcmpPortAllowableValues()
    {
        return [
            self::ICMP_PORT_CLOSED,
            self::ICMP_PORT_OPEN,
            self::ICMP_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtpPortAllowableValues()
    {
        return [
            self::FTP_PORT_CLOSED,
            self::FTP_PORT_OPEN,
            self::FTP_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshPortAllowableValues()
    {
        return [
            self::SSH_PORT_CLOSED,
            self::SSH_PORT_OPEN,
            self::SSH_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpPortAllowableValues()
    {
        return [
            self::HTTP_PORT_CLOSED,
            self::HTTP_PORT_OPEN,
            self::HTTP_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTlsPortAllowableValues()
    {
        return [
            self::TLS_PORT_CLOSED,
            self::TLS_PORT_OPEN,
            self::TLS_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPptpVpnPortAllowableValues()
    {
        return [
            self::PPTP_VPN_PORT_CLOSED,
            self::PPTP_VPN_PORT_OPEN,
            self::PPTP_VPN_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoipTcpPortAllowableValues()
    {
        return [
            self::VOIP_TCP_PORT_CLOSED,
            self::VOIP_TCP_PORT_OPEN,
            self::VOIP_TCP_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoipUdpPortAllowableValues()
    {
        return [
            self::VOIP_UDP_PORT_CLOSED,
            self::VOIP_UDP_PORT_OPEN,
            self::VOIP_UDP_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkev2PortAllowableValues()
    {
        return [
            self::IKEV2_PORT_CLOSED,
            self::IKEV2_PORT_OPEN,
            self::IKEV2_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkev2XxPortAllowableValues()
    {
        return [
            self::IKEV2_XX_PORT_CLOSED,
            self::IKEV2_XX_PORT_OPEN,
            self::IKEV2_XX_PORT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEspPortAllowableValues()
    {
        return [
            self::ESP_PORT_CLOSED,
            self::ESP_PORT_OPEN,
            self::ESP_PORT_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['icmp_port'] = $data['icmp_port'] ?? null;
        $this->container['ftp_port'] = $data['ftp_port'] ?? null;
        $this->container['ssh_port'] = $data['ssh_port'] ?? null;
        $this->container['http_port'] = $data['http_port'] ?? null;
        $this->container['tls_port'] = $data['tls_port'] ?? null;
        $this->container['pptp_vpn_port'] = $data['pptp_vpn_port'] ?? null;
        $this->container['voip_tcp_port'] = $data['voip_tcp_port'] ?? null;
        $this->container['voip_udp_port'] = $data['voip_udp_port'] ?? null;
        $this->container['ikev2_port'] = $data['ikev2_port'] ?? null;
        $this->container['ikev2_xx_port'] = $data['ikev2_xx_port'] ?? null;
        $this->container['esp_port'] = $data['esp_port'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getIcmpPortAllowableValues();
        if (!is_null($this->container['icmp_port']) && !in_array($this->container['icmp_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'icmp_port', must be one of '%s'",
                $this->container['icmp_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFtpPortAllowableValues();
        if (!is_null($this->container['ftp_port']) && !in_array($this->container['ftp_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ftp_port', must be one of '%s'",
                $this->container['ftp_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshPortAllowableValues();
        if (!is_null($this->container['ssh_port']) && !in_array($this->container['ssh_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_port', must be one of '%s'",
                $this->container['ssh_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHttpPortAllowableValues();
        if (!is_null($this->container['http_port']) && !in_array($this->container['http_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'http_port', must be one of '%s'",
                $this->container['http_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTlsPortAllowableValues();
        if (!is_null($this->container['tls_port']) && !in_array($this->container['tls_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tls_port', must be one of '%s'",
                $this->container['tls_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPptpVpnPortAllowableValues();
        if (!is_null($this->container['pptp_vpn_port']) && !in_array($this->container['pptp_vpn_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pptp_vpn_port', must be one of '%s'",
                $this->container['pptp_vpn_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoipTcpPortAllowableValues();
        if (!is_null($this->container['voip_tcp_port']) && !in_array($this->container['voip_tcp_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voip_tcp_port', must be one of '%s'",
                $this->container['voip_tcp_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoipUdpPortAllowableValues();
        if (!is_null($this->container['voip_udp_port']) && !in_array($this->container['voip_udp_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voip_udp_port', must be one of '%s'",
                $this->container['voip_udp_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIkev2PortAllowableValues();
        if (!is_null($this->container['ikev2_port']) && !in_array($this->container['ikev2_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ikev2_port', must be one of '%s'",
                $this->container['ikev2_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIkev2XxPortAllowableValues();
        if (!is_null($this->container['ikev2_xx_port']) && !in_array($this->container['ikev2_xx_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ikev2_xx_port', must be one of '%s'",
                $this->container['ikev2_xx_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEspPortAllowableValues();
        if (!is_null($this->container['esp_port']) && !in_array($this->container['esp_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'esp_port', must be one of '%s'",
                $this->container['esp_port'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Connection capability name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject563., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icmp_port
     *
     * @return string|null
     */
    public function getIcmpPort()
    {
        return $this->container['icmp_port'];
    }

    /**
     * Sets icmp_port
     *
     * @param string|null $icmp_port Set ICMP port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setIcmpPort($icmp_port)
    {
        $allowedValues = $this->getIcmpPortAllowableValues();
        if (!is_null($icmp_port) && !in_array($icmp_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'icmp_port', must be one of '%s'",
                    $icmp_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['icmp_port'] = $icmp_port;

        return $this;
    }

    /**
     * Gets ftp_port
     *
     * @return string|null
     */
    public function getFtpPort()
    {
        return $this->container['ftp_port'];
    }

    /**
     * Sets ftp_port
     *
     * @param string|null $ftp_port Set FTP port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setFtpPort($ftp_port)
    {
        $allowedValues = $this->getFtpPortAllowableValues();
        if (!is_null($ftp_port) && !in_array($ftp_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ftp_port', must be one of '%s'",
                    $ftp_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ftp_port'] = $ftp_port;

        return $this;
    }

    /**
     * Gets ssh_port
     *
     * @return string|null
     */
    public function getSshPort()
    {
        return $this->container['ssh_port'];
    }

    /**
     * Sets ssh_port
     *
     * @param string|null $ssh_port Set SSH port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setSshPort($ssh_port)
    {
        $allowedValues = $this->getSshPortAllowableValues();
        if (!is_null($ssh_port) && !in_array($ssh_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_port', must be one of '%s'",
                    $ssh_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_port'] = $ssh_port;

        return $this;
    }

    /**
     * Gets http_port
     *
     * @return string|null
     */
    public function getHttpPort()
    {
        return $this->container['http_port'];
    }

    /**
     * Sets http_port
     *
     * @param string|null $http_port Set HTTP port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setHttpPort($http_port)
    {
        $allowedValues = $this->getHttpPortAllowableValues();
        if (!is_null($http_port) && !in_array($http_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'http_port', must be one of '%s'",
                    $http_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_port'] = $http_port;

        return $this;
    }

    /**
     * Gets tls_port
     *
     * @return string|null
     */
    public function getTlsPort()
    {
        return $this->container['tls_port'];
    }

    /**
     * Sets tls_port
     *
     * @param string|null $tls_port Set TLS VPN (HTTPS) port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setTlsPort($tls_port)
    {
        $allowedValues = $this->getTlsPortAllowableValues();
        if (!is_null($tls_port) && !in_array($tls_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tls_port', must be one of '%s'",
                    $tls_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tls_port'] = $tls_port;

        return $this;
    }

    /**
     * Gets pptp_vpn_port
     *
     * @return string|null
     */
    public function getPptpVpnPort()
    {
        return $this->container['pptp_vpn_port'];
    }

    /**
     * Sets pptp_vpn_port
     *
     * @param string|null $pptp_vpn_port Set Point to Point Tunneling Protocol (PPTP) VPN port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setPptpVpnPort($pptp_vpn_port)
    {
        $allowedValues = $this->getPptpVpnPortAllowableValues();
        if (!is_null($pptp_vpn_port) && !in_array($pptp_vpn_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pptp_vpn_port', must be one of '%s'",
                    $pptp_vpn_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pptp_vpn_port'] = $pptp_vpn_port;

        return $this;
    }

    /**
     * Gets voip_tcp_port
     *
     * @return string|null
     */
    public function getVoipTcpPort()
    {
        return $this->container['voip_tcp_port'];
    }

    /**
     * Sets voip_tcp_port
     *
     * @param string|null $voip_tcp_port Set VoIP TCP port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setVoipTcpPort($voip_tcp_port)
    {
        $allowedValues = $this->getVoipTcpPortAllowableValues();
        if (!is_null($voip_tcp_port) && !in_array($voip_tcp_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voip_tcp_port', must be one of '%s'",
                    $voip_tcp_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voip_tcp_port'] = $voip_tcp_port;

        return $this;
    }

    /**
     * Gets voip_udp_port
     *
     * @return string|null
     */
    public function getVoipUdpPort()
    {
        return $this->container['voip_udp_port'];
    }

    /**
     * Sets voip_udp_port
     *
     * @param string|null $voip_udp_port Set VoIP UDP port service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setVoipUdpPort($voip_udp_port)
    {
        $allowedValues = $this->getVoipUdpPortAllowableValues();
        if (!is_null($voip_udp_port) && !in_array($voip_udp_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voip_udp_port', must be one of '%s'",
                    $voip_udp_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voip_udp_port'] = $voip_udp_port;

        return $this;
    }

    /**
     * Gets ikev2_port
     *
     * @return string|null
     */
    public function getIkev2Port()
    {
        return $this->container['ikev2_port'];
    }

    /**
     * Sets ikev2_port
     *
     * @param string|null $ikev2_port Set IKEv2 port service for IPsec VPN status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setIkev2Port($ikev2_port)
    {
        $allowedValues = $this->getIkev2PortAllowableValues();
        if (!is_null($ikev2_port) && !in_array($ikev2_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ikev2_port', must be one of '%s'",
                    $ikev2_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ikev2_port'] = $ikev2_port;

        return $this;
    }

    /**
     * Gets ikev2_xx_port
     *
     * @return string|null
     */
    public function getIkev2XxPort()
    {
        return $this->container['ikev2_xx_port'];
    }

    /**
     * Sets ikev2_xx_port
     *
     * @param string|null $ikev2_xx_port Set UDP port 4500 (which may be used by IKEv2 for IPsec VPN) service status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setIkev2XxPort($ikev2_xx_port)
    {
        $allowedValues = $this->getIkev2XxPortAllowableValues();
        if (!is_null($ikev2_xx_port) && !in_array($ikev2_xx_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ikev2_xx_port', must be one of '%s'",
                    $ikev2_xx_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ikev2_xx_port'] = $ikev2_xx_port;

        return $this;
    }

    /**
     * Gets esp_port
     *
     * @return string|null
     */
    public function getEspPort()
    {
        return $this->container['esp_port'];
    }

    /**
     * Sets esp_port
     *
     * @param string|null $esp_port Set ESP port service (used by IPsec VPNs) status.    closed:The port is not open for communication.    open:The port is open for communication.    unknown:The port may or may not be open for communication.
     *
     * @return self
     */
    public function setEspPort($esp_port)
    {
        $allowedValues = $this->getEspPortAllowableValues();
        if (!is_null($esp_port) && !in_array($esp_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'esp_port', must be one of '%s'",
                    $esp_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['esp_port'] = $esp_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


