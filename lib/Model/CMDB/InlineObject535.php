<?php
/**
 * InlineObject535
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject535 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject535 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_535';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cache_mode' => 'string',
        'cache_prefix_match' => 'string',
        'cache_mem_percent' => 'int',
        'ovrd_auth_port_http' => 'int',
        'ovrd_auth_port_https' => 'int',
        'ovrd_auth_port_https_flow' => 'int',
        'ovrd_auth_port_warning' => 'int',
        'ovrd_auth_https' => 'string',
        'warn_auth_https' => 'string',
        'close_ports' => 'string',
        'request_packet_size_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cache_mode' => null,
        'cache_prefix_match' => null,
        'cache_mem_percent' => null,
        'ovrd_auth_port_http' => null,
        'ovrd_auth_port_https' => null,
        'ovrd_auth_port_https_flow' => null,
        'ovrd_auth_port_warning' => null,
        'ovrd_auth_https' => null,
        'warn_auth_https' => null,
        'close_ports' => null,
        'request_packet_size_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cache_mode' => 'cache-mode',
        'cache_prefix_match' => 'cache-prefix-match',
        'cache_mem_percent' => 'cache-mem-percent',
        'ovrd_auth_port_http' => 'ovrd-auth-port-http',
        'ovrd_auth_port_https' => 'ovrd-auth-port-https',
        'ovrd_auth_port_https_flow' => 'ovrd-auth-port-https-flow',
        'ovrd_auth_port_warning' => 'ovrd-auth-port-warning',
        'ovrd_auth_https' => 'ovrd-auth-https',
        'warn_auth_https' => 'warn-auth-https',
        'close_ports' => 'close-ports',
        'request_packet_size_limit' => 'request-packet-size-limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cache_mode' => 'setCacheMode',
        'cache_prefix_match' => 'setCachePrefixMatch',
        'cache_mem_percent' => 'setCacheMemPercent',
        'ovrd_auth_port_http' => 'setOvrdAuthPortHttp',
        'ovrd_auth_port_https' => 'setOvrdAuthPortHttps',
        'ovrd_auth_port_https_flow' => 'setOvrdAuthPortHttpsFlow',
        'ovrd_auth_port_warning' => 'setOvrdAuthPortWarning',
        'ovrd_auth_https' => 'setOvrdAuthHttps',
        'warn_auth_https' => 'setWarnAuthHttps',
        'close_ports' => 'setClosePorts',
        'request_packet_size_limit' => 'setRequestPacketSizeLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cache_mode' => 'getCacheMode',
        'cache_prefix_match' => 'getCachePrefixMatch',
        'cache_mem_percent' => 'getCacheMemPercent',
        'ovrd_auth_port_http' => 'getOvrdAuthPortHttp',
        'ovrd_auth_port_https' => 'getOvrdAuthPortHttps',
        'ovrd_auth_port_https_flow' => 'getOvrdAuthPortHttpsFlow',
        'ovrd_auth_port_warning' => 'getOvrdAuthPortWarning',
        'ovrd_auth_https' => 'getOvrdAuthHttps',
        'warn_auth_https' => 'getWarnAuthHttps',
        'close_ports' => 'getClosePorts',
        'request_packet_size_limit' => 'getRequestPacketSizeLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CACHE_MODE_TTL = 'ttl';
    const CACHE_MODE_DB_VER = 'db-ver';
    const CACHE_PREFIX_MATCH_ENABLE = 'enable';
    const CACHE_PREFIX_MATCH_DISABLE = 'disable';
    const OVRD_AUTH_HTTPS_ENABLE = 'enable';
    const OVRD_AUTH_HTTPS_DISABLE = 'disable';
    const WARN_AUTH_HTTPS_ENABLE = 'enable';
    const WARN_AUTH_HTTPS_DISABLE = 'disable';
    const CLOSE_PORTS_ENABLE = 'enable';
    const CLOSE_PORTS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheModeAllowableValues()
    {
        return [
            self::CACHE_MODE_TTL,
            self::CACHE_MODE_DB_VER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCachePrefixMatchAllowableValues()
    {
        return [
            self::CACHE_PREFIX_MATCH_ENABLE,
            self::CACHE_PREFIX_MATCH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvrdAuthHttpsAllowableValues()
    {
        return [
            self::OVRD_AUTH_HTTPS_ENABLE,
            self::OVRD_AUTH_HTTPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarnAuthHttpsAllowableValues()
    {
        return [
            self::WARN_AUTH_HTTPS_ENABLE,
            self::WARN_AUTH_HTTPS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClosePortsAllowableValues()
    {
        return [
            self::CLOSE_PORTS_ENABLE,
            self::CLOSE_PORTS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cache_mode'] = $data['cache_mode'] ?? null;
        $this->container['cache_prefix_match'] = $data['cache_prefix_match'] ?? null;
        $this->container['cache_mem_percent'] = $data['cache_mem_percent'] ?? null;
        $this->container['ovrd_auth_port_http'] = $data['ovrd_auth_port_http'] ?? null;
        $this->container['ovrd_auth_port_https'] = $data['ovrd_auth_port_https'] ?? null;
        $this->container['ovrd_auth_port_https_flow'] = $data['ovrd_auth_port_https_flow'] ?? null;
        $this->container['ovrd_auth_port_warning'] = $data['ovrd_auth_port_warning'] ?? null;
        $this->container['ovrd_auth_https'] = $data['ovrd_auth_https'] ?? null;
        $this->container['warn_auth_https'] = $data['warn_auth_https'] ?? null;
        $this->container['close_ports'] = $data['close_ports'] ?? null;
        $this->container['request_packet_size_limit'] = $data['request_packet_size_limit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCacheModeAllowableValues();
        if (!is_null($this->container['cache_mode']) && !in_array($this->container['cache_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache_mode', must be one of '%s'",
                $this->container['cache_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCachePrefixMatchAllowableValues();
        if (!is_null($this->container['cache_prefix_match']) && !in_array($this->container['cache_prefix_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache_prefix_match', must be one of '%s'",
                $this->container['cache_prefix_match'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cache_mem_percent']) && ($this->container['cache_mem_percent'] > 15)) {
            $invalidProperties[] = "invalid value for 'cache_mem_percent', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['cache_mem_percent']) && ($this->container['cache_mem_percent'] < 1)) {
            $invalidProperties[] = "invalid value for 'cache_mem_percent', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ovrd_auth_port_http']) && ($this->container['ovrd_auth_port_http'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_http', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ovrd_auth_port_http']) && ($this->container['ovrd_auth_port_http'] < 0)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_http', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ovrd_auth_port_https']) && ($this->container['ovrd_auth_port_https'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_https', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ovrd_auth_port_https']) && ($this->container['ovrd_auth_port_https'] < 0)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_https', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ovrd_auth_port_https_flow']) && ($this->container['ovrd_auth_port_https_flow'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_https_flow', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ovrd_auth_port_https_flow']) && ($this->container['ovrd_auth_port_https_flow'] < 0)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_https_flow', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ovrd_auth_port_warning']) && ($this->container['ovrd_auth_port_warning'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_warning', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ovrd_auth_port_warning']) && ($this->container['ovrd_auth_port_warning'] < 0)) {
            $invalidProperties[] = "invalid value for 'ovrd_auth_port_warning', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOvrdAuthHttpsAllowableValues();
        if (!is_null($this->container['ovrd_auth_https']) && !in_array($this->container['ovrd_auth_https'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ovrd_auth_https', must be one of '%s'",
                $this->container['ovrd_auth_https'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWarnAuthHttpsAllowableValues();
        if (!is_null($this->container['warn_auth_https']) && !in_array($this->container['warn_auth_https'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warn_auth_https', must be one of '%s'",
                $this->container['warn_auth_https'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClosePortsAllowableValues();
        if (!is_null($this->container['close_ports']) && !in_array($this->container['close_ports'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'close_ports', must be one of '%s'",
                $this->container['close_ports'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['request_packet_size_limit']) && ($this->container['request_packet_size_limit'] > 10000)) {
            $invalidProperties[] = "invalid value for 'request_packet_size_limit', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['request_packet_size_limit']) && ($this->container['request_packet_size_limit'] < 576)) {
            $invalidProperties[] = "invalid value for 'request_packet_size_limit', must be bigger than or equal to 576.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cache_mode
     *
     * @return string|null
     */
    public function getCacheMode()
    {
        return $this->container['cache_mode'];
    }

    /**
     * Sets cache_mode
     *
     * @param string|null $cache_mode Cache entry expiration mode.    ttl:Expire cache items by time-to-live.    db-ver:Expire cache items when the server DB version changes.
     *
     * @return self
     */
    public function setCacheMode($cache_mode)
    {
        $allowedValues = $this->getCacheModeAllowableValues();
        if (!is_null($cache_mode) && !in_array($cache_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache_mode', must be one of '%s'",
                    $cache_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache_mode'] = $cache_mode;

        return $this;
    }

    /**
     * Gets cache_prefix_match
     *
     * @return string|null
     */
    public function getCachePrefixMatch()
    {
        return $this->container['cache_prefix_match'];
    }

    /**
     * Sets cache_prefix_match
     *
     * @param string|null $cache_prefix_match Enable/disable prefix matching in the cache.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCachePrefixMatch($cache_prefix_match)
    {
        $allowedValues = $this->getCachePrefixMatchAllowableValues();
        if (!is_null($cache_prefix_match) && !in_array($cache_prefix_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache_prefix_match', must be one of '%s'",
                    $cache_prefix_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache_prefix_match'] = $cache_prefix_match;

        return $this;
    }

    /**
     * Gets cache_mem_percent
     *
     * @return int|null
     */
    public function getCacheMemPercent()
    {
        return $this->container['cache_mem_percent'];
    }

    /**
     * Sets cache_mem_percent
     *
     * @param int|null $cache_mem_percent Maximum percentage of available memory allocated to caching (1 - 15%).
     *
     * @return self
     */
    public function setCacheMemPercent($cache_mem_percent)
    {

        if (!is_null($cache_mem_percent) && ($cache_mem_percent > 15)) {
            throw new \InvalidArgumentException('invalid value for $cache_mem_percent when calling InlineObject535., must be smaller than or equal to 15.');
        }
        if (!is_null($cache_mem_percent) && ($cache_mem_percent < 1)) {
            throw new \InvalidArgumentException('invalid value for $cache_mem_percent when calling InlineObject535., must be bigger than or equal to 1.');
        }

        $this->container['cache_mem_percent'] = $cache_mem_percent;

        return $this;
    }

    /**
     * Gets ovrd_auth_port_http
     *
     * @return int|null
     */
    public function getOvrdAuthPortHttp()
    {
        return $this->container['ovrd_auth_port_http'];
    }

    /**
     * Sets ovrd_auth_port_http
     *
     * @param int|null $ovrd_auth_port_http Port to use for FortiGuard Web Filter HTTP override authentication
     *
     * @return self
     */
    public function setOvrdAuthPortHttp($ovrd_auth_port_http)
    {

        if (!is_null($ovrd_auth_port_http) && ($ovrd_auth_port_http > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_http when calling InlineObject535., must be smaller than or equal to 65535.');
        }
        if (!is_null($ovrd_auth_port_http) && ($ovrd_auth_port_http < 0)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_http when calling InlineObject535., must be bigger than or equal to 0.');
        }

        $this->container['ovrd_auth_port_http'] = $ovrd_auth_port_http;

        return $this;
    }

    /**
     * Gets ovrd_auth_port_https
     *
     * @return int|null
     */
    public function getOvrdAuthPortHttps()
    {
        return $this->container['ovrd_auth_port_https'];
    }

    /**
     * Sets ovrd_auth_port_https
     *
     * @param int|null $ovrd_auth_port_https Port to use for FortiGuard Web Filter HTTPS override authentication in proxy mode.
     *
     * @return self
     */
    public function setOvrdAuthPortHttps($ovrd_auth_port_https)
    {

        if (!is_null($ovrd_auth_port_https) && ($ovrd_auth_port_https > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_https when calling InlineObject535., must be smaller than or equal to 65535.');
        }
        if (!is_null($ovrd_auth_port_https) && ($ovrd_auth_port_https < 0)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_https when calling InlineObject535., must be bigger than or equal to 0.');
        }

        $this->container['ovrd_auth_port_https'] = $ovrd_auth_port_https;

        return $this;
    }

    /**
     * Gets ovrd_auth_port_https_flow
     *
     * @return int|null
     */
    public function getOvrdAuthPortHttpsFlow()
    {
        return $this->container['ovrd_auth_port_https_flow'];
    }

    /**
     * Sets ovrd_auth_port_https_flow
     *
     * @param int|null $ovrd_auth_port_https_flow Port to use for FortiGuard Web Filter HTTPS override authentication in flow mode.
     *
     * @return self
     */
    public function setOvrdAuthPortHttpsFlow($ovrd_auth_port_https_flow)
    {

        if (!is_null($ovrd_auth_port_https_flow) && ($ovrd_auth_port_https_flow > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_https_flow when calling InlineObject535., must be smaller than or equal to 65535.');
        }
        if (!is_null($ovrd_auth_port_https_flow) && ($ovrd_auth_port_https_flow < 0)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_https_flow when calling InlineObject535., must be bigger than or equal to 0.');
        }

        $this->container['ovrd_auth_port_https_flow'] = $ovrd_auth_port_https_flow;

        return $this;
    }

    /**
     * Gets ovrd_auth_port_warning
     *
     * @return int|null
     */
    public function getOvrdAuthPortWarning()
    {
        return $this->container['ovrd_auth_port_warning'];
    }

    /**
     * Sets ovrd_auth_port_warning
     *
     * @param int|null $ovrd_auth_port_warning Port to use for FortiGuard Web Filter Warning override authentication.
     *
     * @return self
     */
    public function setOvrdAuthPortWarning($ovrd_auth_port_warning)
    {

        if (!is_null($ovrd_auth_port_warning) && ($ovrd_auth_port_warning > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_warning when calling InlineObject535., must be smaller than or equal to 65535.');
        }
        if (!is_null($ovrd_auth_port_warning) && ($ovrd_auth_port_warning < 0)) {
            throw new \InvalidArgumentException('invalid value for $ovrd_auth_port_warning when calling InlineObject535., must be bigger than or equal to 0.');
        }

        $this->container['ovrd_auth_port_warning'] = $ovrd_auth_port_warning;

        return $this;
    }

    /**
     * Gets ovrd_auth_https
     *
     * @return string|null
     */
    public function getOvrdAuthHttps()
    {
        return $this->container['ovrd_auth_https'];
    }

    /**
     * Sets ovrd_auth_https
     *
     * @param string|null $ovrd_auth_https Enable/disable use of HTTPS for override authentication.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setOvrdAuthHttps($ovrd_auth_https)
    {
        $allowedValues = $this->getOvrdAuthHttpsAllowableValues();
        if (!is_null($ovrd_auth_https) && !in_array($ovrd_auth_https, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ovrd_auth_https', must be one of '%s'",
                    $ovrd_auth_https,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ovrd_auth_https'] = $ovrd_auth_https;

        return $this;
    }

    /**
     * Gets warn_auth_https
     *
     * @return string|null
     */
    public function getWarnAuthHttps()
    {
        return $this->container['warn_auth_https'];
    }

    /**
     * Sets warn_auth_https
     *
     * @param string|null $warn_auth_https Enable/disable use of HTTPS for warning and authentication.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setWarnAuthHttps($warn_auth_https)
    {
        $allowedValues = $this->getWarnAuthHttpsAllowableValues();
        if (!is_null($warn_auth_https) && !in_array($warn_auth_https, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warn_auth_https', must be one of '%s'",
                    $warn_auth_https,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warn_auth_https'] = $warn_auth_https;

        return $this;
    }

    /**
     * Gets close_ports
     *
     * @return string|null
     */
    public function getClosePorts()
    {
        return $this->container['close_ports'];
    }

    /**
     * Sets close_ports
     *
     * @param string|null $close_ports Close ports used for HTTP/HTTPS override authentication and disable user overrides.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setClosePorts($close_ports)
    {
        $allowedValues = $this->getClosePortsAllowableValues();
        if (!is_null($close_ports) && !in_array($close_ports, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'close_ports', must be one of '%s'",
                    $close_ports,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['close_ports'] = $close_ports;

        return $this;
    }

    /**
     * Gets request_packet_size_limit
     *
     * @return int|null
     */
    public function getRequestPacketSizeLimit()
    {
        return $this->container['request_packet_size_limit'];
    }

    /**
     * Sets request_packet_size_limit
     *
     * @param int|null $request_packet_size_limit Limit size of URL request packets sent to FortiGuard server (0 for default).
     *
     * @return self
     */
    public function setRequestPacketSizeLimit($request_packet_size_limit)
    {

        if (!is_null($request_packet_size_limit) && ($request_packet_size_limit > 10000)) {
            throw new \InvalidArgumentException('invalid value for $request_packet_size_limit when calling InlineObject535., must be smaller than or equal to 10000.');
        }
        if (!is_null($request_packet_size_limit) && ($request_packet_size_limit < 576)) {
            throw new \InvalidArgumentException('invalid value for $request_packet_size_limit when calling InlineObject535., must be bigger than or equal to 576.');
        }

        $this->container['request_packet_size_limit'] = $request_packet_size_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


