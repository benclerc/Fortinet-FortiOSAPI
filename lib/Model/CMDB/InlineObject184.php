<?php
/**
 * InlineObject184
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject184 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject184 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_184';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'seq_num' => 'int',
        'status' => 'string',
        'dst' => 'string',
        'gateway' => 'string',
        'device' => 'string',
        'devindex' => 'int',
        'distance' => 'int',
        'priority' => 'int',
        'comment' => 'string',
        'blackhole' => 'string',
        'sdwan' => 'string',
        'link_monitor_exempt' => 'string',
        'bfd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'seq_num' => null,
        'status' => null,
        'dst' => null,
        'gateway' => 'ipv6',
        'device' => null,
        'devindex' => null,
        'distance' => null,
        'priority' => null,
        'comment' => null,
        'blackhole' => null,
        'sdwan' => null,
        'link_monitor_exempt' => null,
        'bfd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seq_num' => 'seq-num',
        'status' => 'status',
        'dst' => 'dst',
        'gateway' => 'gateway',
        'device' => 'device',
        'devindex' => 'devindex',
        'distance' => 'distance',
        'priority' => 'priority',
        'comment' => 'comment',
        'blackhole' => 'blackhole',
        'sdwan' => 'sdwan',
        'link_monitor_exempt' => 'link-monitor-exempt',
        'bfd' => 'bfd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seq_num' => 'setSeqNum',
        'status' => 'setStatus',
        'dst' => 'setDst',
        'gateway' => 'setGateway',
        'device' => 'setDevice',
        'devindex' => 'setDevindex',
        'distance' => 'setDistance',
        'priority' => 'setPriority',
        'comment' => 'setComment',
        'blackhole' => 'setBlackhole',
        'sdwan' => 'setSdwan',
        'link_monitor_exempt' => 'setLinkMonitorExempt',
        'bfd' => 'setBfd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seq_num' => 'getSeqNum',
        'status' => 'getStatus',
        'dst' => 'getDst',
        'gateway' => 'getGateway',
        'device' => 'getDevice',
        'devindex' => 'getDevindex',
        'distance' => 'getDistance',
        'priority' => 'getPriority',
        'comment' => 'getComment',
        'blackhole' => 'getBlackhole',
        'sdwan' => 'getSdwan',
        'link_monitor_exempt' => 'getLinkMonitorExempt',
        'bfd' => 'getBfd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const BLACKHOLE_ENABLE = 'enable';
    const BLACKHOLE_DISABLE = 'disable';
    const SDWAN_ENABLE = 'enable';
    const SDWAN_DISABLE = 'disable';
    const LINK_MONITOR_EXEMPT_ENABLE = 'enable';
    const LINK_MONITOR_EXEMPT_DISABLE = 'disable';
    const BFD_ENABLE = 'enable';
    const BFD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlackholeAllowableValues()
    {
        return [
            self::BLACKHOLE_ENABLE,
            self::BLACKHOLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdwanAllowableValues()
    {
        return [
            self::SDWAN_ENABLE,
            self::SDWAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkMonitorExemptAllowableValues()
    {
        return [
            self::LINK_MONITOR_EXEMPT_ENABLE,
            self::LINK_MONITOR_EXEMPT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBfdAllowableValues()
    {
        return [
            self::BFD_ENABLE,
            self::BFD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seq_num'] = $data['seq_num'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['dst'] = $data['dst'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['devindex'] = $data['devindex'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['blackhole'] = $data['blackhole'] ?? null;
        $this->container['sdwan'] = $data['sdwan'] ?? null;
        $this->container['link_monitor_exempt'] = $data['link_monitor_exempt'] ?? null;
        $this->container['bfd'] = $data['bfd'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['seq_num']) && ($this->container['seq_num'] < 0)) {
            $invalidProperties[] = "invalid value for 'seq_num', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['device']) && (mb_strlen($this->container['device']) > 35)) {
            $invalidProperties[] = "invalid value for 'device', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['devindex']) && ($this->container['devindex'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'devindex', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['devindex']) && ($this->container['devindex'] < 0)) {
            $invalidProperties[] = "invalid value for 'devindex', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 65535)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getBlackholeAllowableValues();
        if (!is_null($this->container['blackhole']) && !in_array($this->container['blackhole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blackhole', must be one of '%s'",
                $this->container['blackhole'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($this->container['sdwan']) && !in_array($this->container['sdwan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdwan', must be one of '%s'",
                $this->container['sdwan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkMonitorExemptAllowableValues();
        if (!is_null($this->container['link_monitor_exempt']) && !in_array($this->container['link_monitor_exempt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'link_monitor_exempt', must be one of '%s'",
                $this->container['link_monitor_exempt'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($this->container['bfd']) && !in_array($this->container['bfd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bfd', must be one of '%s'",
                $this->container['bfd'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seq_num
     *
     * @return int|null
     */
    public function getSeqNum()
    {
        return $this->container['seq_num'];
    }

    /**
     * Sets seq_num
     *
     * @param int|null $seq_num Sequence number.
     *
     * @return self
     */
    public function setSeqNum($seq_num)
    {

        if (!is_null($seq_num) && ($seq_num > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling InlineObject184., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($seq_num) && ($seq_num < 0)) {
            throw new \InvalidArgumentException('invalid value for $seq_num when calling InlineObject184., must be bigger than or equal to 0.');
        }

        $this->container['seq_num'] = $seq_num;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this static route.    enable:Enable static route.    disable:Disable static route.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string|null $dst Destination IPv6 prefix.
     *
     * @return self
     */
    public function setDst($dst)
    {
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway IPv6 address of the gateway.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string|null $device Gateway out interface or tunnel.
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (!is_null($device) && (mb_strlen($device) > 35)) {
            throw new \InvalidArgumentException('invalid length for $device when calling InlineObject184., must be smaller than or equal to 35.');
        }

        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets devindex
     *
     * @return int|null
     */
    public function getDevindex()
    {
        return $this->container['devindex'];
    }

    /**
     * Sets devindex
     *
     * @param int|null $devindex Device index (0 - 4294967295).
     *
     * @return self
     */
    public function setDevindex($devindex)
    {

        if (!is_null($devindex) && ($devindex > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $devindex when calling InlineObject184., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($devindex) && ($devindex < 0)) {
            throw new \InvalidArgumentException('invalid value for $devindex when calling InlineObject184., must be bigger than or equal to 0.');
        }

        $this->container['devindex'] = $devindex;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Administrative distance (1 - 255).
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject184., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject184., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Administrative priority (1 - 65535).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 65535)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject184., must be smaller than or equal to 65535.');
        }
        if (!is_null($priority) && ($priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject184., must be bigger than or equal to 1.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Optional comments.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject184., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets blackhole
     *
     * @return string|null
     */
    public function getBlackhole()
    {
        return $this->container['blackhole'];
    }

    /**
     * Sets blackhole
     *
     * @param string|null $blackhole Enable/disable black hole.    enable:Enable black hole.    disable:Disable black hole.
     *
     * @return self
     */
    public function setBlackhole($blackhole)
    {
        $allowedValues = $this->getBlackholeAllowableValues();
        if (!is_null($blackhole) && !in_array($blackhole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blackhole', must be one of '%s'",
                    $blackhole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blackhole'] = $blackhole;

        return $this;
    }

    /**
     * Gets sdwan
     *
     * @return string|null
     */
    public function getSdwan()
    {
        return $this->container['sdwan'];
    }

    /**
     * Sets sdwan
     *
     * @param string|null $sdwan Enable/disable egress through the SD-WAN.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setSdwan($sdwan)
    {
        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($sdwan) && !in_array($sdwan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdwan', must be one of '%s'",
                    $sdwan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdwan'] = $sdwan;

        return $this;
    }

    /**
     * Gets link_monitor_exempt
     *
     * @return string|null
     */
    public function getLinkMonitorExempt()
    {
        return $this->container['link_monitor_exempt'];
    }

    /**
     * Sets link_monitor_exempt
     *
     * @param string|null $link_monitor_exempt Enable/disable withdrawal of this static route when link monitor or health check is down.    enable:Keep this static route when link monitor or health check is down.    disable:Withdraw this static route when link monitor or health check is down. (default)
     *
     * @return self
     */
    public function setLinkMonitorExempt($link_monitor_exempt)
    {
        $allowedValues = $this->getLinkMonitorExemptAllowableValues();
        if (!is_null($link_monitor_exempt) && !in_array($link_monitor_exempt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'link_monitor_exempt', must be one of '%s'",
                    $link_monitor_exempt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_monitor_exempt'] = $link_monitor_exempt;

        return $this;
    }

    /**
     * Gets bfd
     *
     * @return string|null
     */
    public function getBfd()
    {
        return $this->container['bfd'];
    }

    /**
     * Sets bfd
     *
     * @param string|null $bfd Enable/disable Bidirectional Forwarding Detection (BFD).    enable:Enable Bidirectional Forwarding Detection (BFD).    disable:Disable Bidirectional Forwarding Detection (BFD).
     *
     * @return self
     */
    public function setBfd($bfd)
    {
        $allowedValues = $this->getBfdAllowableValues();
        if (!is_null($bfd) && !in_array($bfd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bfd', must be one of '%s'",
                    $bfd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bfd'] = $bfd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


