<?php
/**
 * InlineObject318
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject318 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject318 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_318';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'interface' => 'string',
        'ip_version' => 'string',
        'remote_gw6' => 'string',
        'local_gw6' => 'string',
        'remote_gw' => 'string',
        'local_gw' => 'string',
        'sequence_number_transmission' => 'string',
        'sequence_number_reception' => 'string',
        'checksum_transmission' => 'string',
        'checksum_reception' => 'string',
        'key_outbound' => 'int',
        'key_inbound' => 'int',
        'dscp_copying' => 'string',
        'diffservcode' => 'string',
        'keepalive_interval' => 'int',
        'keepalive_failtimes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'interface' => null,
        'ip_version' => null,
        'remote_gw6' => 'ipv6',
        'local_gw6' => 'ipv6',
        'remote_gw' => 'ipv4',
        'local_gw' => 'ipv4',
        'sequence_number_transmission' => null,
        'sequence_number_reception' => null,
        'checksum_transmission' => null,
        'checksum_reception' => null,
        'key_outbound' => null,
        'key_inbound' => null,
        'dscp_copying' => null,
        'diffservcode' => null,
        'keepalive_interval' => null,
        'keepalive_failtimes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'interface' => 'interface',
        'ip_version' => 'ip-version',
        'remote_gw6' => 'remote-gw6',
        'local_gw6' => 'local-gw6',
        'remote_gw' => 'remote-gw',
        'local_gw' => 'local-gw',
        'sequence_number_transmission' => 'sequence-number-transmission',
        'sequence_number_reception' => 'sequence-number-reception',
        'checksum_transmission' => 'checksum-transmission',
        'checksum_reception' => 'checksum-reception',
        'key_outbound' => 'key-outbound',
        'key_inbound' => 'key-inbound',
        'dscp_copying' => 'dscp-copying',
        'diffservcode' => 'diffservcode',
        'keepalive_interval' => 'keepalive-interval',
        'keepalive_failtimes' => 'keepalive-failtimes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'interface' => 'setInterface',
        'ip_version' => 'setIpVersion',
        'remote_gw6' => 'setRemoteGw6',
        'local_gw6' => 'setLocalGw6',
        'remote_gw' => 'setRemoteGw',
        'local_gw' => 'setLocalGw',
        'sequence_number_transmission' => 'setSequenceNumberTransmission',
        'sequence_number_reception' => 'setSequenceNumberReception',
        'checksum_transmission' => 'setChecksumTransmission',
        'checksum_reception' => 'setChecksumReception',
        'key_outbound' => 'setKeyOutbound',
        'key_inbound' => 'setKeyInbound',
        'dscp_copying' => 'setDscpCopying',
        'diffservcode' => 'setDiffservcode',
        'keepalive_interval' => 'setKeepaliveInterval',
        'keepalive_failtimes' => 'setKeepaliveFailtimes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'interface' => 'getInterface',
        'ip_version' => 'getIpVersion',
        'remote_gw6' => 'getRemoteGw6',
        'local_gw6' => 'getLocalGw6',
        'remote_gw' => 'getRemoteGw',
        'local_gw' => 'getLocalGw',
        'sequence_number_transmission' => 'getSequenceNumberTransmission',
        'sequence_number_reception' => 'getSequenceNumberReception',
        'checksum_transmission' => 'getChecksumTransmission',
        'checksum_reception' => 'getChecksumReception',
        'key_outbound' => 'getKeyOutbound',
        'key_inbound' => 'getKeyInbound',
        'dscp_copying' => 'getDscpCopying',
        'diffservcode' => 'getDiffservcode',
        'keepalive_interval' => 'getKeepaliveInterval',
        'keepalive_failtimes' => 'getKeepaliveFailtimes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IP_VERSION__4 = '4';
    const IP_VERSION__6 = '6';
    const SEQUENCE_NUMBER_TRANSMISSION_DISABLE = 'disable';
    const SEQUENCE_NUMBER_TRANSMISSION_ENABLE = 'enable';
    const SEQUENCE_NUMBER_RECEPTION_DISABLE = 'disable';
    const SEQUENCE_NUMBER_RECEPTION_ENABLE = 'enable';
    const CHECKSUM_TRANSMISSION_DISABLE = 'disable';
    const CHECKSUM_TRANSMISSION_ENABLE = 'enable';
    const CHECKSUM_RECEPTION_DISABLE = 'disable';
    const CHECKSUM_RECEPTION_ENABLE = 'enable';
    const DSCP_COPYING_DISABLE = 'disable';
    const DSCP_COPYING_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpVersionAllowableValues()
    {
        return [
            self::IP_VERSION__4,
            self::IP_VERSION__6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceNumberTransmissionAllowableValues()
    {
        return [
            self::SEQUENCE_NUMBER_TRANSMISSION_DISABLE,
            self::SEQUENCE_NUMBER_TRANSMISSION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceNumberReceptionAllowableValues()
    {
        return [
            self::SEQUENCE_NUMBER_RECEPTION_DISABLE,
            self::SEQUENCE_NUMBER_RECEPTION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChecksumTransmissionAllowableValues()
    {
        return [
            self::CHECKSUM_TRANSMISSION_DISABLE,
            self::CHECKSUM_TRANSMISSION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChecksumReceptionAllowableValues()
    {
        return [
            self::CHECKSUM_RECEPTION_DISABLE,
            self::CHECKSUM_RECEPTION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDscpCopyingAllowableValues()
    {
        return [
            self::DSCP_COPYING_DISABLE,
            self::DSCP_COPYING_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['ip_version'] = $data['ip_version'] ?? null;
        $this->container['remote_gw6'] = $data['remote_gw6'] ?? null;
        $this->container['local_gw6'] = $data['local_gw6'] ?? null;
        $this->container['remote_gw'] = $data['remote_gw'] ?? null;
        $this->container['local_gw'] = $data['local_gw'] ?? null;
        $this->container['sequence_number_transmission'] = $data['sequence_number_transmission'] ?? null;
        $this->container['sequence_number_reception'] = $data['sequence_number_reception'] ?? null;
        $this->container['checksum_transmission'] = $data['checksum_transmission'] ?? null;
        $this->container['checksum_reception'] = $data['checksum_reception'] ?? null;
        $this->container['key_outbound'] = $data['key_outbound'] ?? null;
        $this->container['key_inbound'] = $data['key_inbound'] ?? null;
        $this->container['dscp_copying'] = $data['dscp_copying'] ?? null;
        $this->container['diffservcode'] = $data['diffservcode'] ?? null;
        $this->container['keepalive_interval'] = $data['keepalive_interval'] ?? null;
        $this->container['keepalive_failtimes'] = $data['keepalive_failtimes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($this->container['ip_version']) && !in_array($this->container['ip_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_version', must be one of '%s'",
                $this->container['ip_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSequenceNumberTransmissionAllowableValues();
        if (!is_null($this->container['sequence_number_transmission']) && !in_array($this->container['sequence_number_transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sequence_number_transmission', must be one of '%s'",
                $this->container['sequence_number_transmission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSequenceNumberReceptionAllowableValues();
        if (!is_null($this->container['sequence_number_reception']) && !in_array($this->container['sequence_number_reception'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sequence_number_reception', must be one of '%s'",
                $this->container['sequence_number_reception'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChecksumTransmissionAllowableValues();
        if (!is_null($this->container['checksum_transmission']) && !in_array($this->container['checksum_transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'checksum_transmission', must be one of '%s'",
                $this->container['checksum_transmission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChecksumReceptionAllowableValues();
        if (!is_null($this->container['checksum_reception']) && !in_array($this->container['checksum_reception'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'checksum_reception', must be one of '%s'",
                $this->container['checksum_reception'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['key_outbound']) && ($this->container['key_outbound'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'key_outbound', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['key_outbound']) && ($this->container['key_outbound'] < 0)) {
            $invalidProperties[] = "invalid value for 'key_outbound', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['key_inbound']) && ($this->container['key_inbound'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'key_inbound', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['key_inbound']) && ($this->container['key_inbound'] < 0)) {
            $invalidProperties[] = "invalid value for 'key_inbound', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDscpCopyingAllowableValues();
        if (!is_null($this->container['dscp_copying']) && !in_array($this->container['dscp_copying'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dscp_copying', must be one of '%s'",
                $this->container['dscp_copying'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keepalive_interval']) && ($this->container['keepalive_interval'] > 32767)) {
            $invalidProperties[] = "invalid value for 'keepalive_interval', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['keepalive_interval']) && ($this->container['keepalive_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'keepalive_interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['keepalive_failtimes']) && ($this->container['keepalive_failtimes'] > 255)) {
            $invalidProperties[] = "invalid value for 'keepalive_failtimes', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['keepalive_failtimes']) && ($this->container['keepalive_failtimes'] < 1)) {
            $invalidProperties[] = "invalid value for 'keepalive_failtimes', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tunnel name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject318., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Interface name.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject318., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets ip_version
     *
     * @return string|null
     */
    public function getIpVersion()
    {
        return $this->container['ip_version'];
    }

    /**
     * Sets ip_version
     *
     * @param string|null $ip_version IP version to use for VPN interface.    4:Use IPv4 addressing for gateways.    6:Use IPv6 addressing for gateways.
     *
     * @return self
     */
    public function setIpVersion($ip_version)
    {
        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($ip_version) && !in_array($ip_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_version', must be one of '%s'",
                    $ip_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_version'] = $ip_version;

        return $this;
    }

    /**
     * Gets remote_gw6
     *
     * @return string|null
     */
    public function getRemoteGw6()
    {
        return $this->container['remote_gw6'];
    }

    /**
     * Sets remote_gw6
     *
     * @param string|null $remote_gw6 IPv6 address of the remote gateway.
     *
     * @return self
     */
    public function setRemoteGw6($remote_gw6)
    {
        $this->container['remote_gw6'] = $remote_gw6;

        return $this;
    }

    /**
     * Gets local_gw6
     *
     * @return string|null
     */
    public function getLocalGw6()
    {
        return $this->container['local_gw6'];
    }

    /**
     * Sets local_gw6
     *
     * @param string|null $local_gw6 IPv6 address of the local gateway.
     *
     * @return self
     */
    public function setLocalGw6($local_gw6)
    {
        $this->container['local_gw6'] = $local_gw6;

        return $this;
    }

    /**
     * Gets remote_gw
     *
     * @return string|null
     */
    public function getRemoteGw()
    {
        return $this->container['remote_gw'];
    }

    /**
     * Sets remote_gw
     *
     * @param string|null $remote_gw IP address of the remote gateway.
     *
     * @return self
     */
    public function setRemoteGw($remote_gw)
    {
        $this->container['remote_gw'] = $remote_gw;

        return $this;
    }

    /**
     * Gets local_gw
     *
     * @return string|null
     */
    public function getLocalGw()
    {
        return $this->container['local_gw'];
    }

    /**
     * Sets local_gw
     *
     * @param string|null $local_gw IP address of the local gateway.
     *
     * @return self
     */
    public function setLocalGw($local_gw)
    {
        $this->container['local_gw'] = $local_gw;

        return $this;
    }

    /**
     * Gets sequence_number_transmission
     *
     * @return string|null
     */
    public function getSequenceNumberTransmission()
    {
        return $this->container['sequence_number_transmission'];
    }

    /**
     * Sets sequence_number_transmission
     *
     * @param string|null $sequence_number_transmission Enable/disable including of sequence numbers in transmitted GRE packets.    disable:Include sequence numbers in transmitted GRE packets.    enable:Do not  include sequence numbers in transmitted GRE packets.
     *
     * @return self
     */
    public function setSequenceNumberTransmission($sequence_number_transmission)
    {
        $allowedValues = $this->getSequenceNumberTransmissionAllowableValues();
        if (!is_null($sequence_number_transmission) && !in_array($sequence_number_transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sequence_number_transmission', must be one of '%s'",
                    $sequence_number_transmission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_number_transmission'] = $sequence_number_transmission;

        return $this;
    }

    /**
     * Gets sequence_number_reception
     *
     * @return string|null
     */
    public function getSequenceNumberReception()
    {
        return $this->container['sequence_number_reception'];
    }

    /**
     * Sets sequence_number_reception
     *
     * @param string|null $sequence_number_reception Enable/disable validating sequence numbers in received GRE packets.    disable:Do not validate sequence number in received GRE packets.    enable:Validate sequence numbers in received GRE packets.
     *
     * @return self
     */
    public function setSequenceNumberReception($sequence_number_reception)
    {
        $allowedValues = $this->getSequenceNumberReceptionAllowableValues();
        if (!is_null($sequence_number_reception) && !in_array($sequence_number_reception, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sequence_number_reception', must be one of '%s'",
                    $sequence_number_reception,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_number_reception'] = $sequence_number_reception;

        return $this;
    }

    /**
     * Gets checksum_transmission
     *
     * @return string|null
     */
    public function getChecksumTransmission()
    {
        return $this->container['checksum_transmission'];
    }

    /**
     * Sets checksum_transmission
     *
     * @param string|null $checksum_transmission Enable/disable including checksums in transmitted GRE packets.    disable:Do not include checksums in transmitted GRE packets.    enable:Include checksums in transmitted GRE packets.
     *
     * @return self
     */
    public function setChecksumTransmission($checksum_transmission)
    {
        $allowedValues = $this->getChecksumTransmissionAllowableValues();
        if (!is_null($checksum_transmission) && !in_array($checksum_transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'checksum_transmission', must be one of '%s'",
                    $checksum_transmission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['checksum_transmission'] = $checksum_transmission;

        return $this;
    }

    /**
     * Gets checksum_reception
     *
     * @return string|null
     */
    public function getChecksumReception()
    {
        return $this->container['checksum_reception'];
    }

    /**
     * Sets checksum_reception
     *
     * @param string|null $checksum_reception Enable/disable validating checksums in received GRE packets.    disable:Do not validate checksums in received GRE packets.    enable:Validate checksums in received GRE packets.
     *
     * @return self
     */
    public function setChecksumReception($checksum_reception)
    {
        $allowedValues = $this->getChecksumReceptionAllowableValues();
        if (!is_null($checksum_reception) && !in_array($checksum_reception, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'checksum_reception', must be one of '%s'",
                    $checksum_reception,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['checksum_reception'] = $checksum_reception;

        return $this;
    }

    /**
     * Gets key_outbound
     *
     * @return int|null
     */
    public function getKeyOutbound()
    {
        return $this->container['key_outbound'];
    }

    /**
     * Sets key_outbound
     *
     * @param int|null $key_outbound Include this key in transmitted GRE packets (0 - 4294967295).
     *
     * @return self
     */
    public function setKeyOutbound($key_outbound)
    {

        if (!is_null($key_outbound) && ($key_outbound > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $key_outbound when calling InlineObject318., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($key_outbound) && ($key_outbound < 0)) {
            throw new \InvalidArgumentException('invalid value for $key_outbound when calling InlineObject318., must be bigger than or equal to 0.');
        }

        $this->container['key_outbound'] = $key_outbound;

        return $this;
    }

    /**
     * Gets key_inbound
     *
     * @return int|null
     */
    public function getKeyInbound()
    {
        return $this->container['key_inbound'];
    }

    /**
     * Sets key_inbound
     *
     * @param int|null $key_inbound Require received GRE packets contain this key (0 - 4294967295).
     *
     * @return self
     */
    public function setKeyInbound($key_inbound)
    {

        if (!is_null($key_inbound) && ($key_inbound > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $key_inbound when calling InlineObject318., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($key_inbound) && ($key_inbound < 0)) {
            throw new \InvalidArgumentException('invalid value for $key_inbound when calling InlineObject318., must be bigger than or equal to 0.');
        }

        $this->container['key_inbound'] = $key_inbound;

        return $this;
    }

    /**
     * Gets dscp_copying
     *
     * @return string|null
     */
    public function getDscpCopying()
    {
        return $this->container['dscp_copying'];
    }

    /**
     * Sets dscp_copying
     *
     * @param string|null $dscp_copying Enable/disable DSCP copying.    disable:Disable DSCP copying.    enable:Enable DSCP copying.
     *
     * @return self
     */
    public function setDscpCopying($dscp_copying)
    {
        $allowedValues = $this->getDscpCopyingAllowableValues();
        if (!is_null($dscp_copying) && !in_array($dscp_copying, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dscp_copying', must be one of '%s'",
                    $dscp_copying,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dscp_copying'] = $dscp_copying;

        return $this;
    }

    /**
     * Gets diffservcode
     *
     * @return string|null
     */
    public function getDiffservcode()
    {
        return $this->container['diffservcode'];
    }

    /**
     * Sets diffservcode
     *
     * @param string|null $diffservcode DiffServ setting to be applied to GRE tunnel outer IP header.
     *
     * @return self
     */
    public function setDiffservcode($diffservcode)
    {
        $this->container['diffservcode'] = $diffservcode;

        return $this;
    }

    /**
     * Gets keepalive_interval
     *
     * @return int|null
     */
    public function getKeepaliveInterval()
    {
        return $this->container['keepalive_interval'];
    }

    /**
     * Sets keepalive_interval
     *
     * @param int|null $keepalive_interval Keepalive message interval (0 - 32767, 0 = disabled).
     *
     * @return self
     */
    public function setKeepaliveInterval($keepalive_interval)
    {

        if (!is_null($keepalive_interval) && ($keepalive_interval > 32767)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_interval when calling InlineObject318., must be smaller than or equal to 32767.');
        }
        if (!is_null($keepalive_interval) && ($keepalive_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_interval when calling InlineObject318., must be bigger than or equal to 0.');
        }

        $this->container['keepalive_interval'] = $keepalive_interval;

        return $this;
    }

    /**
     * Gets keepalive_failtimes
     *
     * @return int|null
     */
    public function getKeepaliveFailtimes()
    {
        return $this->container['keepalive_failtimes'];
    }

    /**
     * Sets keepalive_failtimes
     *
     * @param int|null $keepalive_failtimes Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
     *
     * @return self
     */
    public function setKeepaliveFailtimes($keepalive_failtimes)
    {

        if (!is_null($keepalive_failtimes) && ($keepalive_failtimes > 255)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_failtimes when calling InlineObject318., must be smaller than or equal to 255.');
        }
        if (!is_null($keepalive_failtimes) && ($keepalive_failtimes < 1)) {
            throw new \InvalidArgumentException('invalid value for $keepalive_failtimes when calling InlineObject318., must be bigger than or equal to 1.');
        }

        $this->container['keepalive_failtimes'] = $keepalive_failtimes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


