<?php
/**
 * InlineObject226
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject226 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject226 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_226';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'status' => 'string',
        'lease_time' => 'int',
        'mac_acl_default_action' => 'string',
        'forticlient_on_net_status' => 'string',
        'dns_service' => 'string',
        'dns_server1' => 'string',
        'dns_server2' => 'string',
        'dns_server3' => 'string',
        'dns_server4' => 'string',
        'wifi_ac_service' => 'string',
        'wifi_ac1' => 'string',
        'wifi_ac2' => 'string',
        'wifi_ac3' => 'string',
        'ntp_service' => 'string',
        'ntp_server1' => 'string',
        'ntp_server2' => 'string',
        'ntp_server3' => 'string',
        'domain' => 'string',
        'wins_server1' => 'string',
        'wins_server2' => 'string',
        'default_gateway' => 'string',
        'next_server' => 'string',
        'netmask' => 'string',
        'interface' => 'string',
        'ip_range' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]',
        'timezone_option' => 'string',
        'timezone' => 'string',
        'tftp_server' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdTftpServer[]',
        'filename' => 'string',
        'options' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdOptions[]',
        'server_type' => 'string',
        'ip_mode' => 'string',
        'conflicted_ip_timeout' => 'int',
        'ipsec_lease_hold' => 'int',
        'auto_configuration' => 'string',
        'dhcp_settings_from_fortiipam' => 'string',
        'auto_managed_status' => 'string',
        'ddns_update' => 'string',
        'ddns_update_override' => 'string',
        'ddns_server_ip' => 'string',
        'ddns_zone' => 'string',
        'ddns_auth' => 'string',
        'ddns_keyname' => 'string',
        'ddns_key' => 'string',
        'ddns_ttl' => 'int',
        'vci_match' => 'string',
        'vci_string' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdVciString[]',
        'exclude_range' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]',
        'reserved_address' => '\Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdReservedAddress[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'lease_time' => null,
        'mac_acl_default_action' => null,
        'forticlient_on_net_status' => null,
        'dns_service' => null,
        'dns_server1' => 'ipv4',
        'dns_server2' => 'ipv4',
        'dns_server3' => 'ipv4',
        'dns_server4' => 'ipv4',
        'wifi_ac_service' => null,
        'wifi_ac1' => 'ipv4',
        'wifi_ac2' => 'ipv4',
        'wifi_ac3' => 'ipv4',
        'ntp_service' => null,
        'ntp_server1' => 'ipv4',
        'ntp_server2' => 'ipv4',
        'ntp_server3' => 'ipv4',
        'domain' => null,
        'wins_server1' => 'ipv4',
        'wins_server2' => 'ipv4',
        'default_gateway' => 'ipv4',
        'next_server' => 'ipv4',
        'netmask' => null,
        'interface' => null,
        'ip_range' => null,
        'timezone_option' => null,
        'timezone' => null,
        'tftp_server' => null,
        'filename' => null,
        'options' => null,
        'server_type' => null,
        'ip_mode' => null,
        'conflicted_ip_timeout' => null,
        'ipsec_lease_hold' => null,
        'auto_configuration' => null,
        'dhcp_settings_from_fortiipam' => null,
        'auto_managed_status' => null,
        'ddns_update' => null,
        'ddns_update_override' => null,
        'ddns_server_ip' => 'ipv4',
        'ddns_zone' => null,
        'ddns_auth' => null,
        'ddns_keyname' => null,
        'ddns_key' => null,
        'ddns_ttl' => null,
        'vci_match' => null,
        'vci_string' => null,
        'exclude_range' => null,
        'reserved_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'lease_time' => 'lease-time',
        'mac_acl_default_action' => 'mac-acl-default-action',
        'forticlient_on_net_status' => 'forticlient-on-net-status',
        'dns_service' => 'dns-service',
        'dns_server1' => 'dns-server1',
        'dns_server2' => 'dns-server2',
        'dns_server3' => 'dns-server3',
        'dns_server4' => 'dns-server4',
        'wifi_ac_service' => 'wifi-ac-service',
        'wifi_ac1' => 'wifi-ac1',
        'wifi_ac2' => 'wifi-ac2',
        'wifi_ac3' => 'wifi-ac3',
        'ntp_service' => 'ntp-service',
        'ntp_server1' => 'ntp-server1',
        'ntp_server2' => 'ntp-server2',
        'ntp_server3' => 'ntp-server3',
        'domain' => 'domain',
        'wins_server1' => 'wins-server1',
        'wins_server2' => 'wins-server2',
        'default_gateway' => 'default-gateway',
        'next_server' => 'next-server',
        'netmask' => 'netmask',
        'interface' => 'interface',
        'ip_range' => 'ip-range',
        'timezone_option' => 'timezone-option',
        'timezone' => 'timezone',
        'tftp_server' => 'tftp-server',
        'filename' => 'filename',
        'options' => 'options',
        'server_type' => 'server-type',
        'ip_mode' => 'ip-mode',
        'conflicted_ip_timeout' => 'conflicted-ip-timeout',
        'ipsec_lease_hold' => 'ipsec-lease-hold',
        'auto_configuration' => 'auto-configuration',
        'dhcp_settings_from_fortiipam' => 'dhcp-settings-from-fortiipam',
        'auto_managed_status' => 'auto-managed-status',
        'ddns_update' => 'ddns-update',
        'ddns_update_override' => 'ddns-update-override',
        'ddns_server_ip' => 'ddns-server-ip',
        'ddns_zone' => 'ddns-zone',
        'ddns_auth' => 'ddns-auth',
        'ddns_keyname' => 'ddns-keyname',
        'ddns_key' => 'ddns-key',
        'ddns_ttl' => 'ddns-ttl',
        'vci_match' => 'vci-match',
        'vci_string' => 'vci-string',
        'exclude_range' => 'exclude-range',
        'reserved_address' => 'reserved-address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'lease_time' => 'setLeaseTime',
        'mac_acl_default_action' => 'setMacAclDefaultAction',
        'forticlient_on_net_status' => 'setForticlientOnNetStatus',
        'dns_service' => 'setDnsService',
        'dns_server1' => 'setDnsServer1',
        'dns_server2' => 'setDnsServer2',
        'dns_server3' => 'setDnsServer3',
        'dns_server4' => 'setDnsServer4',
        'wifi_ac_service' => 'setWifiAcService',
        'wifi_ac1' => 'setWifiAc1',
        'wifi_ac2' => 'setWifiAc2',
        'wifi_ac3' => 'setWifiAc3',
        'ntp_service' => 'setNtpService',
        'ntp_server1' => 'setNtpServer1',
        'ntp_server2' => 'setNtpServer2',
        'ntp_server3' => 'setNtpServer3',
        'domain' => 'setDomain',
        'wins_server1' => 'setWinsServer1',
        'wins_server2' => 'setWinsServer2',
        'default_gateway' => 'setDefaultGateway',
        'next_server' => 'setNextServer',
        'netmask' => 'setNetmask',
        'interface' => 'setInterface',
        'ip_range' => 'setIpRange',
        'timezone_option' => 'setTimezoneOption',
        'timezone' => 'setTimezone',
        'tftp_server' => 'setTftpServer',
        'filename' => 'setFilename',
        'options' => 'setOptions',
        'server_type' => 'setServerType',
        'ip_mode' => 'setIpMode',
        'conflicted_ip_timeout' => 'setConflictedIpTimeout',
        'ipsec_lease_hold' => 'setIpsecLeaseHold',
        'auto_configuration' => 'setAutoConfiguration',
        'dhcp_settings_from_fortiipam' => 'setDhcpSettingsFromFortiipam',
        'auto_managed_status' => 'setAutoManagedStatus',
        'ddns_update' => 'setDdnsUpdate',
        'ddns_update_override' => 'setDdnsUpdateOverride',
        'ddns_server_ip' => 'setDdnsServerIp',
        'ddns_zone' => 'setDdnsZone',
        'ddns_auth' => 'setDdnsAuth',
        'ddns_keyname' => 'setDdnsKeyname',
        'ddns_key' => 'setDdnsKey',
        'ddns_ttl' => 'setDdnsTtl',
        'vci_match' => 'setVciMatch',
        'vci_string' => 'setVciString',
        'exclude_range' => 'setExcludeRange',
        'reserved_address' => 'setReservedAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'lease_time' => 'getLeaseTime',
        'mac_acl_default_action' => 'getMacAclDefaultAction',
        'forticlient_on_net_status' => 'getForticlientOnNetStatus',
        'dns_service' => 'getDnsService',
        'dns_server1' => 'getDnsServer1',
        'dns_server2' => 'getDnsServer2',
        'dns_server3' => 'getDnsServer3',
        'dns_server4' => 'getDnsServer4',
        'wifi_ac_service' => 'getWifiAcService',
        'wifi_ac1' => 'getWifiAc1',
        'wifi_ac2' => 'getWifiAc2',
        'wifi_ac3' => 'getWifiAc3',
        'ntp_service' => 'getNtpService',
        'ntp_server1' => 'getNtpServer1',
        'ntp_server2' => 'getNtpServer2',
        'ntp_server3' => 'getNtpServer3',
        'domain' => 'getDomain',
        'wins_server1' => 'getWinsServer1',
        'wins_server2' => 'getWinsServer2',
        'default_gateway' => 'getDefaultGateway',
        'next_server' => 'getNextServer',
        'netmask' => 'getNetmask',
        'interface' => 'getInterface',
        'ip_range' => 'getIpRange',
        'timezone_option' => 'getTimezoneOption',
        'timezone' => 'getTimezone',
        'tftp_server' => 'getTftpServer',
        'filename' => 'getFilename',
        'options' => 'getOptions',
        'server_type' => 'getServerType',
        'ip_mode' => 'getIpMode',
        'conflicted_ip_timeout' => 'getConflictedIpTimeout',
        'ipsec_lease_hold' => 'getIpsecLeaseHold',
        'auto_configuration' => 'getAutoConfiguration',
        'dhcp_settings_from_fortiipam' => 'getDhcpSettingsFromFortiipam',
        'auto_managed_status' => 'getAutoManagedStatus',
        'ddns_update' => 'getDdnsUpdate',
        'ddns_update_override' => 'getDdnsUpdateOverride',
        'ddns_server_ip' => 'getDdnsServerIp',
        'ddns_zone' => 'getDdnsZone',
        'ddns_auth' => 'getDdnsAuth',
        'ddns_keyname' => 'getDdnsKeyname',
        'ddns_key' => 'getDdnsKey',
        'ddns_ttl' => 'getDdnsTtl',
        'vci_match' => 'getVciMatch',
        'vci_string' => 'getVciString',
        'exclude_range' => 'getExcludeRange',
        'reserved_address' => 'getReservedAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const MAC_ACL_DEFAULT_ACTION_ASSIGN = 'assign';
    const MAC_ACL_DEFAULT_ACTION_BLOCK = 'block';
    const FORTICLIENT_ON_NET_STATUS_DISABLE = 'disable';
    const FORTICLIENT_ON_NET_STATUS_ENABLE = 'enable';
    const DNS_SERVICE_LOCAL = 'local';
    const DNS_SERVICE__DEFAULT = 'default';
    const DNS_SERVICE_SPECIFY = 'specify';
    const WIFI_AC_SERVICE_SPECIFY = 'specify';
    const WIFI_AC_SERVICE_LOCAL = 'local';
    const NTP_SERVICE_LOCAL = 'local';
    const NTP_SERVICE__DEFAULT = 'default';
    const NTP_SERVICE_SPECIFY = 'specify';
    const TIMEZONE_OPTION_DISABLE = 'disable';
    const TIMEZONE_OPTION__DEFAULT = 'default';
    const TIMEZONE_OPTION_SPECIFY = 'specify';
    const TIMEZONE__01 = '01';
    const TIMEZONE__02 = '02';
    const TIMEZONE__03 = '03';
    const TIMEZONE__04 = '04';
    const TIMEZONE__05 = '05';
    const TIMEZONE__81 = '81';
    const TIMEZONE__06 = '06';
    const TIMEZONE__07 = '07';
    const TIMEZONE__08 = '08';
    const TIMEZONE__09 = '09';
    const TIMEZONE__10 = '10';
    const TIMEZONE__11 = '11';
    const TIMEZONE__12 = '12';
    const TIMEZONE__13 = '13';
    const TIMEZONE__74 = '74';
    const TIMEZONE__14 = '14';
    const TIMEZONE__77 = '77';
    const TIMEZONE__15 = '15';
    const TIMEZONE__87 = '87';
    const TIMEZONE__16 = '16';
    const TIMEZONE__17 = '17';
    const TIMEZONE__18 = '18';
    const TIMEZONE__19 = '19';
    const TIMEZONE__20 = '20';
    const TIMEZONE__75 = '75';
    const TIMEZONE__21 = '21';
    const TIMEZONE__22 = '22';
    const TIMEZONE__23 = '23';
    const TIMEZONE__24 = '24';
    const TIMEZONE__80 = '80';
    const TIMEZONE__79 = '79';
    const TIMEZONE__25 = '25';
    const TIMEZONE__26 = '26';
    const TIMEZONE__27 = '27';
    const TIMEZONE__28 = '28';
    const TIMEZONE__78 = '78';
    const TIMEZONE__29 = '29';
    const TIMEZONE__30 = '30';
    const TIMEZONE__31 = '31';
    const TIMEZONE__32 = '32';
    const TIMEZONE__33 = '33';
    const TIMEZONE__34 = '34';
    const TIMEZONE__35 = '35';
    const TIMEZONE__36 = '36';
    const TIMEZONE__37 = '37';
    const TIMEZONE__38 = '38';
    const TIMEZONE__83 = '83';
    const TIMEZONE__84 = '84';
    const TIMEZONE__40 = '40';
    const TIMEZONE__85 = '85';
    const TIMEZONE__41 = '41';
    const TIMEZONE__42 = '42';
    const TIMEZONE__43 = '43';
    const TIMEZONE__39 = '39';
    const TIMEZONE__44 = '44';
    const TIMEZONE__46 = '46';
    const TIMEZONE__47 = '47';
    const TIMEZONE__51 = '51';
    const TIMEZONE__48 = '48';
    const TIMEZONE__45 = '45';
    const TIMEZONE__49 = '49';
    const TIMEZONE__50 = '50';
    const TIMEZONE__52 = '52';
    const TIMEZONE__53 = '53';
    const TIMEZONE__54 = '54';
    const TIMEZONE__55 = '55';
    const TIMEZONE__56 = '56';
    const TIMEZONE__57 = '57';
    const TIMEZONE__58 = '58';
    const TIMEZONE__59 = '59';
    const TIMEZONE__60 = '60';
    const TIMEZONE__62 = '62';
    const TIMEZONE__63 = '63';
    const TIMEZONE__61 = '61';
    const TIMEZONE__64 = '64';
    const TIMEZONE__65 = '65';
    const TIMEZONE__66 = '66';
    const TIMEZONE__67 = '67';
    const TIMEZONE__68 = '68';
    const TIMEZONE__69 = '69';
    const TIMEZONE__70 = '70';
    const TIMEZONE__71 = '71';
    const TIMEZONE__72 = '72';
    const TIMEZONE__00 = '00';
    const TIMEZONE__82 = '82';
    const TIMEZONE__73 = '73';
    const TIMEZONE__86 = '86';
    const TIMEZONE__76 = '76';
    const SERVER_TYPE_REGULAR = 'regular';
    const SERVER_TYPE_IPSEC = 'ipsec';
    const IP_MODE_RANGE = 'range';
    const IP_MODE_USRGRP = 'usrgrp';
    const AUTO_CONFIGURATION_DISABLE = 'disable';
    const AUTO_CONFIGURATION_ENABLE = 'enable';
    const DHCP_SETTINGS_FROM_FORTIIPAM_DISABLE = 'disable';
    const DHCP_SETTINGS_FROM_FORTIIPAM_ENABLE = 'enable';
    const AUTO_MANAGED_STATUS_DISABLE = 'disable';
    const AUTO_MANAGED_STATUS_ENABLE = 'enable';
    const DDNS_UPDATE_DISABLE = 'disable';
    const DDNS_UPDATE_ENABLE = 'enable';
    const DDNS_UPDATE_OVERRIDE_DISABLE = 'disable';
    const DDNS_UPDATE_OVERRIDE_ENABLE = 'enable';
    const DDNS_AUTH_DISABLE = 'disable';
    const DDNS_AUTH_TSIG = 'tsig';
    const VCI_MATCH_DISABLE = 'disable';
    const VCI_MATCH_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacAclDefaultActionAllowableValues()
    {
        return [
            self::MAC_ACL_DEFAULT_ACTION_ASSIGN,
            self::MAC_ACL_DEFAULT_ACTION_BLOCK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForticlientOnNetStatusAllowableValues()
    {
        return [
            self::FORTICLIENT_ON_NET_STATUS_DISABLE,
            self::FORTICLIENT_ON_NET_STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsServiceAllowableValues()
    {
        return [
            self::DNS_SERVICE_LOCAL,
            self::DNS_SERVICE__DEFAULT,
            self::DNS_SERVICE_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWifiAcServiceAllowableValues()
    {
        return [
            self::WIFI_AC_SERVICE_SPECIFY,
            self::WIFI_AC_SERVICE_LOCAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNtpServiceAllowableValues()
    {
        return [
            self::NTP_SERVICE_LOCAL,
            self::NTP_SERVICE__DEFAULT,
            self::NTP_SERVICE_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimezoneOptionAllowableValues()
    {
        return [
            self::TIMEZONE_OPTION_DISABLE,
            self::TIMEZONE_OPTION__DEFAULT,
            self::TIMEZONE_OPTION_SPECIFY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimezoneAllowableValues()
    {
        return [
            self::TIMEZONE__01,
            self::TIMEZONE__02,
            self::TIMEZONE__03,
            self::TIMEZONE__04,
            self::TIMEZONE__05,
            self::TIMEZONE__81,
            self::TIMEZONE__06,
            self::TIMEZONE__07,
            self::TIMEZONE__08,
            self::TIMEZONE__09,
            self::TIMEZONE__10,
            self::TIMEZONE__11,
            self::TIMEZONE__12,
            self::TIMEZONE__13,
            self::TIMEZONE__74,
            self::TIMEZONE__14,
            self::TIMEZONE__77,
            self::TIMEZONE__15,
            self::TIMEZONE__87,
            self::TIMEZONE__16,
            self::TIMEZONE__17,
            self::TIMEZONE__18,
            self::TIMEZONE__19,
            self::TIMEZONE__20,
            self::TIMEZONE__75,
            self::TIMEZONE__21,
            self::TIMEZONE__22,
            self::TIMEZONE__23,
            self::TIMEZONE__24,
            self::TIMEZONE__80,
            self::TIMEZONE__79,
            self::TIMEZONE__25,
            self::TIMEZONE__26,
            self::TIMEZONE__27,
            self::TIMEZONE__28,
            self::TIMEZONE__78,
            self::TIMEZONE__29,
            self::TIMEZONE__30,
            self::TIMEZONE__31,
            self::TIMEZONE__32,
            self::TIMEZONE__33,
            self::TIMEZONE__34,
            self::TIMEZONE__35,
            self::TIMEZONE__36,
            self::TIMEZONE__37,
            self::TIMEZONE__38,
            self::TIMEZONE__83,
            self::TIMEZONE__84,
            self::TIMEZONE__40,
            self::TIMEZONE__85,
            self::TIMEZONE__41,
            self::TIMEZONE__42,
            self::TIMEZONE__43,
            self::TIMEZONE__39,
            self::TIMEZONE__44,
            self::TIMEZONE__46,
            self::TIMEZONE__47,
            self::TIMEZONE__51,
            self::TIMEZONE__48,
            self::TIMEZONE__45,
            self::TIMEZONE__49,
            self::TIMEZONE__50,
            self::TIMEZONE__52,
            self::TIMEZONE__53,
            self::TIMEZONE__54,
            self::TIMEZONE__55,
            self::TIMEZONE__56,
            self::TIMEZONE__57,
            self::TIMEZONE__58,
            self::TIMEZONE__59,
            self::TIMEZONE__60,
            self::TIMEZONE__62,
            self::TIMEZONE__63,
            self::TIMEZONE__61,
            self::TIMEZONE__64,
            self::TIMEZONE__65,
            self::TIMEZONE__66,
            self::TIMEZONE__67,
            self::TIMEZONE__68,
            self::TIMEZONE__69,
            self::TIMEZONE__70,
            self::TIMEZONE__71,
            self::TIMEZONE__72,
            self::TIMEZONE__00,
            self::TIMEZONE__82,
            self::TIMEZONE__73,
            self::TIMEZONE__86,
            self::TIMEZONE__76,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServerTypeAllowableValues()
    {
        return [
            self::SERVER_TYPE_REGULAR,
            self::SERVER_TYPE_IPSEC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpModeAllowableValues()
    {
        return [
            self::IP_MODE_RANGE,
            self::IP_MODE_USRGRP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoConfigurationAllowableValues()
    {
        return [
            self::AUTO_CONFIGURATION_DISABLE,
            self::AUTO_CONFIGURATION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpSettingsFromFortiipamAllowableValues()
    {
        return [
            self::DHCP_SETTINGS_FROM_FORTIIPAM_DISABLE,
            self::DHCP_SETTINGS_FROM_FORTIIPAM_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoManagedStatusAllowableValues()
    {
        return [
            self::AUTO_MANAGED_STATUS_DISABLE,
            self::AUTO_MANAGED_STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdnsUpdateAllowableValues()
    {
        return [
            self::DDNS_UPDATE_DISABLE,
            self::DDNS_UPDATE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdnsUpdateOverrideAllowableValues()
    {
        return [
            self::DDNS_UPDATE_OVERRIDE_DISABLE,
            self::DDNS_UPDATE_OVERRIDE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDdnsAuthAllowableValues()
    {
        return [
            self::DDNS_AUTH_DISABLE,
            self::DDNS_AUTH_TSIG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVciMatchAllowableValues()
    {
        return [
            self::VCI_MATCH_DISABLE,
            self::VCI_MATCH_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['lease_time'] = $data['lease_time'] ?? null;
        $this->container['mac_acl_default_action'] = $data['mac_acl_default_action'] ?? null;
        $this->container['forticlient_on_net_status'] = $data['forticlient_on_net_status'] ?? null;
        $this->container['dns_service'] = $data['dns_service'] ?? null;
        $this->container['dns_server1'] = $data['dns_server1'] ?? null;
        $this->container['dns_server2'] = $data['dns_server2'] ?? null;
        $this->container['dns_server3'] = $data['dns_server3'] ?? null;
        $this->container['dns_server4'] = $data['dns_server4'] ?? null;
        $this->container['wifi_ac_service'] = $data['wifi_ac_service'] ?? null;
        $this->container['wifi_ac1'] = $data['wifi_ac1'] ?? null;
        $this->container['wifi_ac2'] = $data['wifi_ac2'] ?? null;
        $this->container['wifi_ac3'] = $data['wifi_ac3'] ?? null;
        $this->container['ntp_service'] = $data['ntp_service'] ?? null;
        $this->container['ntp_server1'] = $data['ntp_server1'] ?? null;
        $this->container['ntp_server2'] = $data['ntp_server2'] ?? null;
        $this->container['ntp_server3'] = $data['ntp_server3'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['wins_server1'] = $data['wins_server1'] ?? null;
        $this->container['wins_server2'] = $data['wins_server2'] ?? null;
        $this->container['default_gateway'] = $data['default_gateway'] ?? null;
        $this->container['next_server'] = $data['next_server'] ?? null;
        $this->container['netmask'] = $data['netmask'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['ip_range'] = $data['ip_range'] ?? null;
        $this->container['timezone_option'] = $data['timezone_option'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['tftp_server'] = $data['tftp_server'] ?? null;
        $this->container['filename'] = $data['filename'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['ip_mode'] = $data['ip_mode'] ?? null;
        $this->container['conflicted_ip_timeout'] = $data['conflicted_ip_timeout'] ?? null;
        $this->container['ipsec_lease_hold'] = $data['ipsec_lease_hold'] ?? null;
        $this->container['auto_configuration'] = $data['auto_configuration'] ?? null;
        $this->container['dhcp_settings_from_fortiipam'] = $data['dhcp_settings_from_fortiipam'] ?? null;
        $this->container['auto_managed_status'] = $data['auto_managed_status'] ?? null;
        $this->container['ddns_update'] = $data['ddns_update'] ?? null;
        $this->container['ddns_update_override'] = $data['ddns_update_override'] ?? null;
        $this->container['ddns_server_ip'] = $data['ddns_server_ip'] ?? null;
        $this->container['ddns_zone'] = $data['ddns_zone'] ?? null;
        $this->container['ddns_auth'] = $data['ddns_auth'] ?? null;
        $this->container['ddns_keyname'] = $data['ddns_keyname'] ?? null;
        $this->container['ddns_key'] = $data['ddns_key'] ?? null;
        $this->container['ddns_ttl'] = $data['ddns_ttl'] ?? null;
        $this->container['vci_match'] = $data['vci_match'] ?? null;
        $this->container['vci_string'] = $data['vci_string'] ?? null;
        $this->container['exclude_range'] = $data['exclude_range'] ?? null;
        $this->container['reserved_address'] = $data['reserved_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['lease_time']) && ($this->container['lease_time'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'lease_time', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['lease_time']) && ($this->container['lease_time'] < 300)) {
            $invalidProperties[] = "invalid value for 'lease_time', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getMacAclDefaultActionAllowableValues();
        if (!is_null($this->container['mac_acl_default_action']) && !in_array($this->container['mac_acl_default_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_acl_default_action', must be one of '%s'",
                $this->container['mac_acl_default_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForticlientOnNetStatusAllowableValues();
        if (!is_null($this->container['forticlient_on_net_status']) && !in_array($this->container['forticlient_on_net_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forticlient_on_net_status', must be one of '%s'",
                $this->container['forticlient_on_net_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsServiceAllowableValues();
        if (!is_null($this->container['dns_service']) && !in_array($this->container['dns_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_service', must be one of '%s'",
                $this->container['dns_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWifiAcServiceAllowableValues();
        if (!is_null($this->container['wifi_ac_service']) && !in_array($this->container['wifi_ac_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wifi_ac_service', must be one of '%s'",
                $this->container['wifi_ac_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNtpServiceAllowableValues();
        if (!is_null($this->container['ntp_service']) && !in_array($this->container['ntp_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ntp_service', must be one of '%s'",
                $this->container['ntp_service'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 35)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['ip_range']) && (count($this->container['ip_range']) > 3)) {
            $invalidProperties[] = "invalid value for 'ip_range', number of items must be less than or equal to 3.";
        }

        $allowedValues = $this->getTimezoneOptionAllowableValues();
        if (!is_null($this->container['timezone_option']) && !in_array($this->container['timezone_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timezone_option', must be one of '%s'",
                $this->container['timezone_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($this->container['timezone']) && !in_array($this->container['timezone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timezone', must be one of '%s'",
                $this->container['timezone'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tftp_server']) && (count($this->container['tftp_server']) > 0)) {
            $invalidProperties[] = "invalid value for 'tftp_server', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['filename']) && (mb_strlen($this->container['filename']) > 127)) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['options']) && (count($this->container['options']) > 30)) {
            $invalidProperties[] = "invalid value for 'options', number of items must be less than or equal to 30.";
        }

        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($this->container['server_type']) && !in_array($this->container['server_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'server_type', must be one of '%s'",
                $this->container['server_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($this->container['ip_mode']) && !in_array($this->container['ip_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_mode', must be one of '%s'",
                $this->container['ip_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['conflicted_ip_timeout']) && ($this->container['conflicted_ip_timeout'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'conflicted_ip_timeout', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['conflicted_ip_timeout']) && ($this->container['conflicted_ip_timeout'] < 60)) {
            $invalidProperties[] = "invalid value for 'conflicted_ip_timeout', must be bigger than or equal to 60.";
        }

        if (!is_null($this->container['ipsec_lease_hold']) && ($this->container['ipsec_lease_hold'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'ipsec_lease_hold', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['ipsec_lease_hold']) && ($this->container['ipsec_lease_hold'] < 0)) {
            $invalidProperties[] = "invalid value for 'ipsec_lease_hold', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAutoConfigurationAllowableValues();
        if (!is_null($this->container['auto_configuration']) && !in_array($this->container['auto_configuration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_configuration', must be one of '%s'",
                $this->container['auto_configuration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpSettingsFromFortiipamAllowableValues();
        if (!is_null($this->container['dhcp_settings_from_fortiipam']) && !in_array($this->container['dhcp_settings_from_fortiipam'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_settings_from_fortiipam', must be one of '%s'",
                $this->container['dhcp_settings_from_fortiipam'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoManagedStatusAllowableValues();
        if (!is_null($this->container['auto_managed_status']) && !in_array($this->container['auto_managed_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_managed_status', must be one of '%s'",
                $this->container['auto_managed_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDdnsUpdateAllowableValues();
        if (!is_null($this->container['ddns_update']) && !in_array($this->container['ddns_update'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddns_update', must be one of '%s'",
                $this->container['ddns_update'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDdnsUpdateOverrideAllowableValues();
        if (!is_null($this->container['ddns_update_override']) && !in_array($this->container['ddns_update_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddns_update_override', must be one of '%s'",
                $this->container['ddns_update_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ddns_zone']) && (mb_strlen($this->container['ddns_zone']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_zone', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getDdnsAuthAllowableValues();
        if (!is_null($this->container['ddns_auth']) && !in_array($this->container['ddns_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ddns_auth', must be one of '%s'",
                $this->container['ddns_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ddns_keyname']) && (mb_strlen($this->container['ddns_keyname']) > 64)) {
            $invalidProperties[] = "invalid value for 'ddns_keyname', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ddns_ttl']) && ($this->container['ddns_ttl'] > 86400)) {
            $invalidProperties[] = "invalid value for 'ddns_ttl', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['ddns_ttl']) && ($this->container['ddns_ttl'] < 60)) {
            $invalidProperties[] = "invalid value for 'ddns_ttl', must be bigger than or equal to 60.";
        }

        $allowedValues = $this->getVciMatchAllowableValues();
        if (!is_null($this->container['vci_match']) && !in_array($this->container['vci_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vci_match', must be one of '%s'",
                $this->container['vci_match'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vci_string']) && (count($this->container['vci_string']) > 0)) {
            $invalidProperties[] = "invalid value for 'vci_string', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['exclude_range']) && (count($this->container['exclude_range']) > 16)) {
            $invalidProperties[] = "invalid value for 'exclude_range', number of items must be less than or equal to 16.";
        }

        if (!is_null($this->container['reserved_address']) && (count($this->container['reserved_address']) > 0)) {
            $invalidProperties[] = "invalid value for 'reserved_address', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject226., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject226., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable this DHCP configuration.    disable:Do not use this DHCP server configuration.    enable:Use this DHCP server configuration.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets lease_time
     *
     * @return int|null
     */
    public function getLeaseTime()
    {
        return $this->container['lease_time'];
    }

    /**
     * Sets lease_time
     *
     * @param int|null $lease_time Lease time in seconds, 0 means unlimited.
     *
     * @return self
     */
    public function setLeaseTime($lease_time)
    {

        if (!is_null($lease_time) && ($lease_time > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $lease_time when calling InlineObject226., must be smaller than or equal to 8640000.');
        }
        if (!is_null($lease_time) && ($lease_time < 300)) {
            throw new \InvalidArgumentException('invalid value for $lease_time when calling InlineObject226., must be bigger than or equal to 300.');
        }

        $this->container['lease_time'] = $lease_time;

        return $this;
    }

    /**
     * Gets mac_acl_default_action
     *
     * @return string|null
     */
    public function getMacAclDefaultAction()
    {
        return $this->container['mac_acl_default_action'];
    }

    /**
     * Sets mac_acl_default_action
     *
     * @param string|null $mac_acl_default_action MAC access control default action (allow or block assigning IP settings).    assign:Allow the DHCP server to assign IP settings to clients on the MAC access control list.    block:Block the DHCP server from assigning IP settings to clients on the MAC access control list.
     *
     * @return self
     */
    public function setMacAclDefaultAction($mac_acl_default_action)
    {
        $allowedValues = $this->getMacAclDefaultActionAllowableValues();
        if (!is_null($mac_acl_default_action) && !in_array($mac_acl_default_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_acl_default_action', must be one of '%s'",
                    $mac_acl_default_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_acl_default_action'] = $mac_acl_default_action;

        return $this;
    }

    /**
     * Gets forticlient_on_net_status
     *
     * @return string|null
     */
    public function getForticlientOnNetStatus()
    {
        return $this->container['forticlient_on_net_status'];
    }

    /**
     * Sets forticlient_on_net_status
     *
     * @param string|null $forticlient_on_net_status Enable/disable FortiClient-On-Net service for this DHCP server.    disable:Disable FortiClient On-Net Status.    enable:Enable FortiClient On-Net Status.
     *
     * @return self
     */
    public function setForticlientOnNetStatus($forticlient_on_net_status)
    {
        $allowedValues = $this->getForticlientOnNetStatusAllowableValues();
        if (!is_null($forticlient_on_net_status) && !in_array($forticlient_on_net_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forticlient_on_net_status', must be one of '%s'",
                    $forticlient_on_net_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forticlient_on_net_status'] = $forticlient_on_net_status;

        return $this;
    }

    /**
     * Gets dns_service
     *
     * @return string|null
     */
    public function getDnsService()
    {
        return $this->container['dns_service'];
    }

    /**
     * Sets dns_service
     *
     * @param string|null $dns_service Options for assigning DNS servers to DHCP clients.    local:IP address of the interface the DHCP server is added to becomes the client's DNS server IP address.    default:Clients are assigned the FortiGate's configured DNS servers.    specify:Specify up to 3 DNS servers in the DHCP server configuration.
     *
     * @return self
     */
    public function setDnsService($dns_service)
    {
        $allowedValues = $this->getDnsServiceAllowableValues();
        if (!is_null($dns_service) && !in_array($dns_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_service', must be one of '%s'",
                    $dns_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_service'] = $dns_service;

        return $this;
    }

    /**
     * Gets dns_server1
     *
     * @return string|null
     */
    public function getDnsServer1()
    {
        return $this->container['dns_server1'];
    }

    /**
     * Sets dns_server1
     *
     * @param string|null $dns_server1 DNS server 1.
     *
     * @return self
     */
    public function setDnsServer1($dns_server1)
    {
        $this->container['dns_server1'] = $dns_server1;

        return $this;
    }

    /**
     * Gets dns_server2
     *
     * @return string|null
     */
    public function getDnsServer2()
    {
        return $this->container['dns_server2'];
    }

    /**
     * Sets dns_server2
     *
     * @param string|null $dns_server2 DNS server 2.
     *
     * @return self
     */
    public function setDnsServer2($dns_server2)
    {
        $this->container['dns_server2'] = $dns_server2;

        return $this;
    }

    /**
     * Gets dns_server3
     *
     * @return string|null
     */
    public function getDnsServer3()
    {
        return $this->container['dns_server3'];
    }

    /**
     * Sets dns_server3
     *
     * @param string|null $dns_server3 DNS server 3.
     *
     * @return self
     */
    public function setDnsServer3($dns_server3)
    {
        $this->container['dns_server3'] = $dns_server3;

        return $this;
    }

    /**
     * Gets dns_server4
     *
     * @return string|null
     */
    public function getDnsServer4()
    {
        return $this->container['dns_server4'];
    }

    /**
     * Sets dns_server4
     *
     * @param string|null $dns_server4 DNS server 4.
     *
     * @return self
     */
    public function setDnsServer4($dns_server4)
    {
        $this->container['dns_server4'] = $dns_server4;

        return $this;
    }

    /**
     * Gets wifi_ac_service
     *
     * @return string|null
     */
    public function getWifiAcService()
    {
        return $this->container['wifi_ac_service'];
    }

    /**
     * Sets wifi_ac_service
     *
     * @param string|null $wifi_ac_service Options for assigning WiFi Access Controllers to DHCP clients    specify:Specify up to 3 WiFi Access Controllers in the DHCP server configuration.    local:IP address of the interface the DHCP server is added to becomes the client's WiFi Access Controller IP address.
     *
     * @return self
     */
    public function setWifiAcService($wifi_ac_service)
    {
        $allowedValues = $this->getWifiAcServiceAllowableValues();
        if (!is_null($wifi_ac_service) && !in_array($wifi_ac_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wifi_ac_service', must be one of '%s'",
                    $wifi_ac_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wifi_ac_service'] = $wifi_ac_service;

        return $this;
    }

    /**
     * Gets wifi_ac1
     *
     * @return string|null
     */
    public function getWifiAc1()
    {
        return $this->container['wifi_ac1'];
    }

    /**
     * Sets wifi_ac1
     *
     * @param string|null $wifi_ac1 WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
     *
     * @return self
     */
    public function setWifiAc1($wifi_ac1)
    {
        $this->container['wifi_ac1'] = $wifi_ac1;

        return $this;
    }

    /**
     * Gets wifi_ac2
     *
     * @return string|null
     */
    public function getWifiAc2()
    {
        return $this->container['wifi_ac2'];
    }

    /**
     * Sets wifi_ac2
     *
     * @param string|null $wifi_ac2 WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
     *
     * @return self
     */
    public function setWifiAc2($wifi_ac2)
    {
        $this->container['wifi_ac2'] = $wifi_ac2;

        return $this;
    }

    /**
     * Gets wifi_ac3
     *
     * @return string|null
     */
    public function getWifiAc3()
    {
        return $this->container['wifi_ac3'];
    }

    /**
     * Sets wifi_ac3
     *
     * @param string|null $wifi_ac3 WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
     *
     * @return self
     */
    public function setWifiAc3($wifi_ac3)
    {
        $this->container['wifi_ac3'] = $wifi_ac3;

        return $this;
    }

    /**
     * Gets ntp_service
     *
     * @return string|null
     */
    public function getNtpService()
    {
        return $this->container['ntp_service'];
    }

    /**
     * Sets ntp_service
     *
     * @param string|null $ntp_service Options for assigning Network Time Protocol (NTP) servers to DHCP clients.    local:IP address of the interface the DHCP server is added to becomes the client's NTP server IP address.    default:Clients are assigned the FortiGate's configured NTP servers.    specify:Specify up to 3 NTP servers in the DHCP server configuration.
     *
     * @return self
     */
    public function setNtpService($ntp_service)
    {
        $allowedValues = $this->getNtpServiceAllowableValues();
        if (!is_null($ntp_service) && !in_array($ntp_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ntp_service', must be one of '%s'",
                    $ntp_service,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ntp_service'] = $ntp_service;

        return $this;
    }

    /**
     * Gets ntp_server1
     *
     * @return string|null
     */
    public function getNtpServer1()
    {
        return $this->container['ntp_server1'];
    }

    /**
     * Sets ntp_server1
     *
     * @param string|null $ntp_server1 NTP server 1.
     *
     * @return self
     */
    public function setNtpServer1($ntp_server1)
    {
        $this->container['ntp_server1'] = $ntp_server1;

        return $this;
    }

    /**
     * Gets ntp_server2
     *
     * @return string|null
     */
    public function getNtpServer2()
    {
        return $this->container['ntp_server2'];
    }

    /**
     * Sets ntp_server2
     *
     * @param string|null $ntp_server2 NTP server 2.
     *
     * @return self
     */
    public function setNtpServer2($ntp_server2)
    {
        $this->container['ntp_server2'] = $ntp_server2;

        return $this;
    }

    /**
     * Gets ntp_server3
     *
     * @return string|null
     */
    public function getNtpServer3()
    {
        return $this->container['ntp_server3'];
    }

    /**
     * Sets ntp_server3
     *
     * @param string|null $ntp_server3 NTP server 3.
     *
     * @return self
     */
    public function setNtpServer3($ntp_server3)
    {
        $this->container['ntp_server3'] = $ntp_server3;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain name suffix for the IP addresses that the DHCP server assigns to clients.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 35)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling InlineObject226., must be smaller than or equal to 35.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets wins_server1
     *
     * @return string|null
     */
    public function getWinsServer1()
    {
        return $this->container['wins_server1'];
    }

    /**
     * Sets wins_server1
     *
     * @param string|null $wins_server1 WINS server 1.
     *
     * @return self
     */
    public function setWinsServer1($wins_server1)
    {
        $this->container['wins_server1'] = $wins_server1;

        return $this;
    }

    /**
     * Gets wins_server2
     *
     * @return string|null
     */
    public function getWinsServer2()
    {
        return $this->container['wins_server2'];
    }

    /**
     * Sets wins_server2
     *
     * @param string|null $wins_server2 WINS server 2.
     *
     * @return self
     */
    public function setWinsServer2($wins_server2)
    {
        $this->container['wins_server2'] = $wins_server2;

        return $this;
    }

    /**
     * Gets default_gateway
     *
     * @return string|null
     */
    public function getDefaultGateway()
    {
        return $this->container['default_gateway'];
    }

    /**
     * Sets default_gateway
     *
     * @param string|null $default_gateway Default gateway IP address assigned by the DHCP server.
     *
     * @return self
     */
    public function setDefaultGateway($default_gateway)
    {
        $this->container['default_gateway'] = $default_gateway;

        return $this;
    }

    /**
     * Gets next_server
     *
     * @return string|null
     */
    public function getNextServer()
    {
        return $this->container['next_server'];
    }

    /**
     * Sets next_server
     *
     * @param string|null $next_server IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
     *
     * @return self
     */
    public function setNextServer($next_server)
    {
        $this->container['next_server'] = $next_server;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string|null
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string|null $netmask Netmask assigned by the DHCP server.
     *
     * @return self
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface DHCP server can assign IP configurations to clients connected to this interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject226., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets ip_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]|null
     */
    public function getIpRange()
    {
        return $this->container['ip_range'];
    }

    /**
     * Sets ip_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]|null $ip_range DHCP IP range configuration.
     *
     * @return self
     */
    public function setIpRange($ip_range)
    {

        if (!is_null($ip_range) && (count($ip_range) > 3)) {
            throw new \InvalidArgumentException('invalid value for $ip_range when calling InlineObject226., number of items must be less than or equal to 3.');
        }
        $this->container['ip_range'] = $ip_range;

        return $this;
    }

    /**
     * Gets timezone_option
     *
     * @return string|null
     */
    public function getTimezoneOption()
    {
        return $this->container['timezone_option'];
    }

    /**
     * Sets timezone_option
     *
     * @param string|null $timezone_option Options for the DHCP server to set the client's time zone.    disable:Do not set the client's time zone.    default:Clients are assigned the FortiGate's configured time zone.    specify:Specify the time zone to be assigned to DHCP clients.
     *
     * @return self
     */
    public function setTimezoneOption($timezone_option)
    {
        $allowedValues = $this->getTimezoneOptionAllowableValues();
        if (!is_null($timezone_option) && !in_array($timezone_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timezone_option', must be one of '%s'",
                    $timezone_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timezone_option'] = $timezone_option;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Select the time zone to be assigned to DHCP clients.    01:(GMT-11:00) Midway Island, Samoa    02:(GMT-10:00) Hawaii    03:(GMT-9:00) Alaska    04:(GMT-8:00) Pacific Time (US & Canada)    05:(GMT-7:00) Arizona    81:(GMT-7:00) Baja California Sur, Chihuahua    06:(GMT-7:00) Mountain Time (US & Canada)    07:(GMT-6:00) Central America    08:(GMT-6:00) Central Time (US & Canada)    09:(GMT-6:00) Mexico City    10:(GMT-6:00) Saskatchewan    11:(GMT-5:00) Bogota, Lima,Quito    12:(GMT-5:00) Eastern Time (US & Canada)    13:(GMT-5:00) Indiana (East)    74:(GMT-4:00) Caracas    14:(GMT-4:00) Atlantic Time (Canada)    77:(GMT-4:00) Georgetown    15:(GMT-4:00) La Paz    87:(GMT-4:00) Paraguay    16:(GMT-3:00) Santiago    17:(GMT-3:30) Newfoundland    18:(GMT-3:00) Brasilia    19:(GMT-3:00) Buenos Aires    20:(GMT-3:00) Nuuk (Greenland)    75:(GMT-3:00) Uruguay    21:(GMT-2:00) Mid-Atlantic    22:(GMT-1:00) Azores    23:(GMT-1:00) Cape Verde Is.    24:(GMT) Monrovia    80:(GMT) Greenwich Mean Time    79:(GMT) Casablanca    25:(GMT) Dublin, Edinburgh, Lisbon, London, Canary Is.    26:(GMT+1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna    27:(GMT+1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague    28:(GMT+1:00) Brussels, Copenhagen, Madrid, Paris    78:(GMT+1:00) Namibia    29:(GMT+1:00) Sarajevo, Skopje, Warsaw, Zagreb    30:(GMT+1:00) West Central Africa    31:(GMT+2:00) Athens, Sofia, Vilnius    32:(GMT+2:00) Bucharest    33:(GMT+2:00) Cairo    34:(GMT+2:00) Harare, Pretoria    35:(GMT+2:00) Helsinki, Riga, Tallinn    36:(GMT+2:00) Jerusalem    37:(GMT+3:00) Baghdad    38:(GMT+3:00) Kuwait, Riyadh    83:(GMT+3:00) Moscow    84:(GMT+3:00) Minsk    40:(GMT+3:00) Nairobi    85:(GMT+3:00) Istanbul    41:(GMT+3:30) Tehran    42:(GMT+4:00) Abu Dhabi, Muscat    43:(GMT+4:00) Baku    39:(GMT+3:00) St. Petersburg, Volgograd    44:(GMT+4:30) Kabul    46:(GMT+5:00) Islamabad, Karachi, Tashkent    47:(GMT+5:30) Kolkata, Chennai, Mumbai, New Delhi    51:(GMT+5:30) Sri Jayawardenepara    48:(GMT+5:45) Kathmandu    45:(GMT+5:00) Ekaterinburg    49:(GMT+6:00) Almaty, Novosibirsk    50:(GMT+6:00) Astana, Dhaka    52:(GMT+6:30) Rangoon    53:(GMT+7:00) Bangkok, Hanoi, Jakarta    54:(GMT+7:00) Krasnoyarsk    55:(GMT+8:00) Beijing, ChongQing, HongKong, Urumgi, Irkutsk    56:(GMT+8:00) Ulaan Bataar    57:(GMT+8:00) Kuala Lumpur, Singapore    58:(GMT+8:00) Perth    59:(GMT+8:00) Taipei    60:(GMT+9:00) Osaka, Sapporo, Tokyo, Seoul    62:(GMT+9:30) Adelaide    63:(GMT+9:30) Darwin    61:(GMT+9:00) Yakutsk    64:(GMT+10:00) Brisbane    65:(GMT+10:00) Canberra, Melbourne, Sydney    66:(GMT+10:00) Guam, Port Moresby    67:(GMT+10:00) Hobart    68:(GMT+10:00) Vladivostok    69:(GMT+10:00) Magadan    70:(GMT+11:00) Solomon Is., New Caledonia    71:(GMT+12:00) Auckland, Wellington    72:(GMT+12:00) Fiji, Kamchatka, Marshall Is.    00:(GMT+12:00) Eniwetok, Kwajalein    82:(GMT+12:45) Chatham Islands    73:(GMT+13:00) Nuku'alofa    86:(GMT+13:00) Samoa    76:(GMT+14:00) Kiritimati
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($timezone) && !in_array($timezone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timezone', must be one of '%s'",
                    $timezone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets tftp_server
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdTftpServer[]|null
     */
    public function getTftpServer()
    {
        return $this->container['tftp_server'];
    }

    /**
     * Sets tftp_server
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdTftpServer[]|null $tftp_server One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces.
     *
     * @return self
     */
    public function setTftpServer($tftp_server)
    {

        if (!is_null($tftp_server) && (count($tftp_server) > 0)) {
            throw new \InvalidArgumentException('invalid value for $tftp_server when calling InlineObject226., number of items must be less than or equal to 0.');
        }
        $this->container['tftp_server'] = $tftp_server;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Name of the boot file on the TFTP server.
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (!is_null($filename) && (mb_strlen($filename) > 127)) {
            throw new \InvalidArgumentException('invalid length for $filename when calling InlineObject226., must be smaller than or equal to 127.');
        }

        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdOptions[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdOptions[]|null $options DHCP options.
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (!is_null($options) && (count($options) > 30)) {
            throw new \InvalidArgumentException('invalid value for $options when calling InlineObject226., number of items must be less than or equal to 30.');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string|null $server_type DHCP server can be a normal DHCP server or an IPsec DHCP server.    regular:Regular DHCP service.    ipsec:DHCP over IPsec service.
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $allowedValues = $this->getServerTypeAllowableValues();
        if (!is_null($server_type) && !in_array($server_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'server_type', must be one of '%s'",
                    $server_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets ip_mode
     *
     * @return string|null
     */
    public function getIpMode()
    {
        return $this->container['ip_mode'];
    }

    /**
     * Sets ip_mode
     *
     * @param string|null $ip_mode Method used to assign client IP.    range:Use range defined by start-ip/end-ip to assign client IP.    usrgrp:Use user-group defined method to assign client IP.
     *
     * @return self
     */
    public function setIpMode($ip_mode)
    {
        $allowedValues = $this->getIpModeAllowableValues();
        if (!is_null($ip_mode) && !in_array($ip_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_mode', must be one of '%s'",
                    $ip_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_mode'] = $ip_mode;

        return $this;
    }

    /**
     * Gets conflicted_ip_timeout
     *
     * @return int|null
     */
    public function getConflictedIpTimeout()
    {
        return $this->container['conflicted_ip_timeout'];
    }

    /**
     * Sets conflicted_ip_timeout
     *
     * @param int|null $conflicted_ip_timeout Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
     *
     * @return self
     */
    public function setConflictedIpTimeout($conflicted_ip_timeout)
    {

        if (!is_null($conflicted_ip_timeout) && ($conflicted_ip_timeout > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $conflicted_ip_timeout when calling InlineObject226., must be smaller than or equal to 8640000.');
        }
        if (!is_null($conflicted_ip_timeout) && ($conflicted_ip_timeout < 60)) {
            throw new \InvalidArgumentException('invalid value for $conflicted_ip_timeout when calling InlineObject226., must be bigger than or equal to 60.');
        }

        $this->container['conflicted_ip_timeout'] = $conflicted_ip_timeout;

        return $this;
    }

    /**
     * Gets ipsec_lease_hold
     *
     * @return int|null
     */
    public function getIpsecLeaseHold()
    {
        return $this->container['ipsec_lease_hold'];
    }

    /**
     * Sets ipsec_lease_hold
     *
     * @param int|null $ipsec_lease_hold DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
     *
     * @return self
     */
    public function setIpsecLeaseHold($ipsec_lease_hold)
    {

        if (!is_null($ipsec_lease_hold) && ($ipsec_lease_hold > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_lease_hold when calling InlineObject226., must be smaller than or equal to 8640000.');
        }
        if (!is_null($ipsec_lease_hold) && ($ipsec_lease_hold < 0)) {
            throw new \InvalidArgumentException('invalid value for $ipsec_lease_hold when calling InlineObject226., must be bigger than or equal to 0.');
        }

        $this->container['ipsec_lease_hold'] = $ipsec_lease_hold;

        return $this;
    }

    /**
     * Gets auto_configuration
     *
     * @return string|null
     */
    public function getAutoConfiguration()
    {
        return $this->container['auto_configuration'];
    }

    /**
     * Sets auto_configuration
     *
     * @param string|null $auto_configuration Enable/disable auto configuration.    disable:Disable auto configuration.    enable:Enable auto configuration.
     *
     * @return self
     */
    public function setAutoConfiguration($auto_configuration)
    {
        $allowedValues = $this->getAutoConfigurationAllowableValues();
        if (!is_null($auto_configuration) && !in_array($auto_configuration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_configuration', must be one of '%s'",
                    $auto_configuration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_configuration'] = $auto_configuration;

        return $this;
    }

    /**
     * Gets dhcp_settings_from_fortiipam
     *
     * @return string|null
     */
    public function getDhcpSettingsFromFortiipam()
    {
        return $this->container['dhcp_settings_from_fortiipam'];
    }

    /**
     * Sets dhcp_settings_from_fortiipam
     *
     * @param string|null $dhcp_settings_from_fortiipam Enable/disable populating of DHCP server settings from FortiIPAM.    disable:Disable populating of DHCP server settings from FortiIPAM.    enable:Enable populating of DHCP server settings from FortiIPAM.
     *
     * @return self
     */
    public function setDhcpSettingsFromFortiipam($dhcp_settings_from_fortiipam)
    {
        $allowedValues = $this->getDhcpSettingsFromFortiipamAllowableValues();
        if (!is_null($dhcp_settings_from_fortiipam) && !in_array($dhcp_settings_from_fortiipam, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_settings_from_fortiipam', must be one of '%s'",
                    $dhcp_settings_from_fortiipam,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_settings_from_fortiipam'] = $dhcp_settings_from_fortiipam;

        return $this;
    }

    /**
     * Gets auto_managed_status
     *
     * @return string|null
     */
    public function getAutoManagedStatus()
    {
        return $this->container['auto_managed_status'];
    }

    /**
     * Sets auto_managed_status
     *
     * @param string|null $auto_managed_status Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM.    disable:Disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM.    enable:Enable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM.
     *
     * @return self
     */
    public function setAutoManagedStatus($auto_managed_status)
    {
        $allowedValues = $this->getAutoManagedStatusAllowableValues();
        if (!is_null($auto_managed_status) && !in_array($auto_managed_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_managed_status', must be one of '%s'",
                    $auto_managed_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_managed_status'] = $auto_managed_status;

        return $this;
    }

    /**
     * Gets ddns_update
     *
     * @return string|null
     */
    public function getDdnsUpdate()
    {
        return $this->container['ddns_update'];
    }

    /**
     * Sets ddns_update
     *
     * @param string|null $ddns_update Enable/disable DDNS update for DHCP.    disable:Disable DDNS update for DHCP.    enable:Enable DDNS update for DHCP.
     *
     * @return self
     */
    public function setDdnsUpdate($ddns_update)
    {
        $allowedValues = $this->getDdnsUpdateAllowableValues();
        if (!is_null($ddns_update) && !in_array($ddns_update, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddns_update', must be one of '%s'",
                    $ddns_update,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddns_update'] = $ddns_update;

        return $this;
    }

    /**
     * Gets ddns_update_override
     *
     * @return string|null
     */
    public function getDdnsUpdateOverride()
    {
        return $this->container['ddns_update_override'];
    }

    /**
     * Sets ddns_update_override
     *
     * @param string|null $ddns_update_override Enable/disable DDNS update override for DHCP.    disable:Disable DDNS update override for DHCP.    enable:Enable DDNS update override for DHCP.
     *
     * @return self
     */
    public function setDdnsUpdateOverride($ddns_update_override)
    {
        $allowedValues = $this->getDdnsUpdateOverrideAllowableValues();
        if (!is_null($ddns_update_override) && !in_array($ddns_update_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddns_update_override', must be one of '%s'",
                    $ddns_update_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddns_update_override'] = $ddns_update_override;

        return $this;
    }

    /**
     * Gets ddns_server_ip
     *
     * @return string|null
     */
    public function getDdnsServerIp()
    {
        return $this->container['ddns_server_ip'];
    }

    /**
     * Sets ddns_server_ip
     *
     * @param string|null $ddns_server_ip DDNS server IP.
     *
     * @return self
     */
    public function setDdnsServerIp($ddns_server_ip)
    {
        $this->container['ddns_server_ip'] = $ddns_server_ip;

        return $this;
    }

    /**
     * Gets ddns_zone
     *
     * @return string|null
     */
    public function getDdnsZone()
    {
        return $this->container['ddns_zone'];
    }

    /**
     * Sets ddns_zone
     *
     * @param string|null $ddns_zone Zone of your domain name (ex. DDNS.com).
     *
     * @return self
     */
    public function setDdnsZone($ddns_zone)
    {
        if (!is_null($ddns_zone) && (mb_strlen($ddns_zone) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_zone when calling InlineObject226., must be smaller than or equal to 64.');
        }

        $this->container['ddns_zone'] = $ddns_zone;

        return $this;
    }

    /**
     * Gets ddns_auth
     *
     * @return string|null
     */
    public function getDdnsAuth()
    {
        return $this->container['ddns_auth'];
    }

    /**
     * Sets ddns_auth
     *
     * @param string|null $ddns_auth DDNS authentication mode.    disable:Disable DDNS authentication.    tsig:TSIG based on RFC2845.
     *
     * @return self
     */
    public function setDdnsAuth($ddns_auth)
    {
        $allowedValues = $this->getDdnsAuthAllowableValues();
        if (!is_null($ddns_auth) && !in_array($ddns_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ddns_auth', must be one of '%s'",
                    $ddns_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ddns_auth'] = $ddns_auth;

        return $this;
    }

    /**
     * Gets ddns_keyname
     *
     * @return string|null
     */
    public function getDdnsKeyname()
    {
        return $this->container['ddns_keyname'];
    }

    /**
     * Sets ddns_keyname
     *
     * @param string|null $ddns_keyname DDNS update key name.
     *
     * @return self
     */
    public function setDdnsKeyname($ddns_keyname)
    {
        if (!is_null($ddns_keyname) && (mb_strlen($ddns_keyname) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ddns_keyname when calling InlineObject226., must be smaller than or equal to 64.');
        }

        $this->container['ddns_keyname'] = $ddns_keyname;

        return $this;
    }

    /**
     * Gets ddns_key
     *
     * @return string|null
     */
    public function getDdnsKey()
    {
        return $this->container['ddns_key'];
    }

    /**
     * Sets ddns_key
     *
     * @param string|null $ddns_key DDNS update key (base 64 encoding).
     *
     * @return self
     */
    public function setDdnsKey($ddns_key)
    {
        $this->container['ddns_key'] = $ddns_key;

        return $this;
    }

    /**
     * Gets ddns_ttl
     *
     * @return int|null
     */
    public function getDdnsTtl()
    {
        return $this->container['ddns_ttl'];
    }

    /**
     * Sets ddns_ttl
     *
     * @param int|null $ddns_ttl TTL.
     *
     * @return self
     */
    public function setDdnsTtl($ddns_ttl)
    {

        if (!is_null($ddns_ttl) && ($ddns_ttl > 86400)) {
            throw new \InvalidArgumentException('invalid value for $ddns_ttl when calling InlineObject226., must be smaller than or equal to 86400.');
        }
        if (!is_null($ddns_ttl) && ($ddns_ttl < 60)) {
            throw new \InvalidArgumentException('invalid value for $ddns_ttl when calling InlineObject226., must be bigger than or equal to 60.');
        }

        $this->container['ddns_ttl'] = $ddns_ttl;

        return $this;
    }

    /**
     * Gets vci_match
     *
     * @return string|null
     */
    public function getVciMatch()
    {
        return $this->container['vci_match'];
    }

    /**
     * Sets vci_match
     *
     * @param string|null $vci_match Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served.    disable:Disable VCI matching.    enable:Enable VCI matching.
     *
     * @return self
     */
    public function setVciMatch($vci_match)
    {
        $allowedValues = $this->getVciMatchAllowableValues();
        if (!is_null($vci_match) && !in_array($vci_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vci_match', must be one of '%s'",
                    $vci_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vci_match'] = $vci_match;

        return $this;
    }

    /**
     * Gets vci_string
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdVciString[]|null
     */
    public function getVciString()
    {
        return $this->container['vci_string'];
    }

    /**
     * Sets vci_string
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdVciString[]|null $vci_string One or more VCI strings in quotes separated by spaces.
     *
     * @return self
     */
    public function setVciString($vci_string)
    {

        if (!is_null($vci_string) && (count($vci_string) > 0)) {
            throw new \InvalidArgumentException('invalid value for $vci_string when calling InlineObject226., number of items must be less than or equal to 0.');
        }
        $this->container['vci_string'] = $vci_string;

        return $this;
    }

    /**
     * Gets exclude_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]|null
     */
    public function getExcludeRange()
    {
        return $this->container['exclude_range'];
    }

    /**
     * Sets exclude_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdIpRange[]|null $exclude_range Exclude one or more ranges of IP addresses from being assigned to clients.
     *
     * @return self
     */
    public function setExcludeRange($exclude_range)
    {

        if (!is_null($exclude_range) && (count($exclude_range) > 16)) {
            throw new \InvalidArgumentException('invalid value for $exclude_range when calling InlineObject226., number of items must be less than or equal to 16.');
        }
        $this->container['exclude_range'] = $exclude_range;

        return $this;
    }

    /**
     * Gets reserved_address
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdReservedAddress[]|null
     */
    public function getReservedAddress()
    {
        return $this->container['reserved_address'];
    }

    /**
     * Sets reserved_address
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemDhcpServerIdReservedAddress[]|null $reserved_address Options for the DHCP server to assign IP settings to specific MAC addresses.
     *
     * @return self
     */
    public function setReservedAddress($reserved_address)
    {

        if (!is_null($reserved_address) && (count($reserved_address) > 0)) {
            throw new \InvalidArgumentException('invalid value for $reserved_address when calling InlineObject226., number of items must be less than or equal to 0.');
        }
        $this->container['reserved_address'] = $reserved_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


