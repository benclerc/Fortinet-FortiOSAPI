<?php
/**
 * SystemInterfaceNameVrrp6
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemInterfaceNameVrrp6 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemInterfaceNameVrrp6 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_interface__name__vrrp6';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vrid' => 'int',
        'vrgrp' => 'int',
        'vrip6' => 'string',
        'priority' => 'int',
        'adv_interval' => 'int',
        'start_time' => 'int',
        'preempt' => 'string',
        'accept_mode' => 'string',
        'vrdst6' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vrid' => null,
        'vrgrp' => null,
        'vrip6' => 'ipv6',
        'priority' => null,
        'adv_interval' => null,
        'start_time' => null,
        'preempt' => null,
        'accept_mode' => null,
        'vrdst6' => 'ipv6',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vrid' => 'vrid',
        'vrgrp' => 'vrgrp',
        'vrip6' => 'vrip6',
        'priority' => 'priority',
        'adv_interval' => 'adv-interval',
        'start_time' => 'start-time',
        'preempt' => 'preempt',
        'accept_mode' => 'accept-mode',
        'vrdst6' => 'vrdst6',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vrid' => 'setVrid',
        'vrgrp' => 'setVrgrp',
        'vrip6' => 'setVrip6',
        'priority' => 'setPriority',
        'adv_interval' => 'setAdvInterval',
        'start_time' => 'setStartTime',
        'preempt' => 'setPreempt',
        'accept_mode' => 'setAcceptMode',
        'vrdst6' => 'setVrdst6',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vrid' => 'getVrid',
        'vrgrp' => 'getVrgrp',
        'vrip6' => 'getVrip6',
        'priority' => 'getPriority',
        'adv_interval' => 'getAdvInterval',
        'start_time' => 'getStartTime',
        'preempt' => 'getPreempt',
        'accept_mode' => 'getAcceptMode',
        'vrdst6' => 'getVrdst6',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PREEMPT_ENABLE = 'enable';
    const PREEMPT_DISABLE = 'disable';
    const ACCEPT_MODE_ENABLE = 'enable';
    const ACCEPT_MODE_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreemptAllowableValues()
    {
        return [
            self::PREEMPT_ENABLE,
            self::PREEMPT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptModeAllowableValues()
    {
        return [
            self::ACCEPT_MODE_ENABLE,
            self::ACCEPT_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vrid'] = $data['vrid'] ?? null;
        $this->container['vrgrp'] = $data['vrgrp'] ?? null;
        $this->container['vrip6'] = $data['vrip6'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['adv_interval'] = $data['adv_interval'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['preempt'] = $data['preempt'] ?? null;
        $this->container['accept_mode'] = $data['accept_mode'] ?? null;
        $this->container['vrdst6'] = $data['vrdst6'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vrid']) && ($this->container['vrid'] > 255)) {
            $invalidProperties[] = "invalid value for 'vrid', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vrid']) && ($this->container['vrid'] < 1)) {
            $invalidProperties[] = "invalid value for 'vrid', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vrgrp']) && ($this->container['vrgrp'] > 65535)) {
            $invalidProperties[] = "invalid value for 'vrgrp', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['vrgrp']) && ($this->container['vrgrp'] < 1)) {
            $invalidProperties[] = "invalid value for 'vrgrp', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adv_interval']) && ($this->container['adv_interval'] > 255)) {
            $invalidProperties[] = "invalid value for 'adv_interval', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['adv_interval']) && ($this->container['adv_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'adv_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['start_time']) && ($this->container['start_time'] > 255)) {
            $invalidProperties[] = "invalid value for 'start_time', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['start_time']) && ($this->container['start_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'start_time', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPreemptAllowableValues();
        if (!is_null($this->container['preempt']) && !in_array($this->container['preempt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preempt', must be one of '%s'",
                $this->container['preempt'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAcceptModeAllowableValues();
        if (!is_null($this->container['accept_mode']) && !in_array($this->container['accept_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'accept_mode', must be one of '%s'",
                $this->container['accept_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vrid
     *
     * @return int|null
     */
    public function getVrid()
    {
        return $this->container['vrid'];
    }

    /**
     * Sets vrid
     *
     * @param int|null $vrid Virtual router identifier (1 - 255).
     *
     * @return self
     */
    public function setVrid($vrid)
    {

        if (!is_null($vrid) && ($vrid > 255)) {
            throw new \InvalidArgumentException('invalid value for $vrid when calling SystemInterfaceNameVrrp6., must be smaller than or equal to 255.');
        }
        if (!is_null($vrid) && ($vrid < 1)) {
            throw new \InvalidArgumentException('invalid value for $vrid when calling SystemInterfaceNameVrrp6., must be bigger than or equal to 1.');
        }

        $this->container['vrid'] = $vrid;

        return $this;
    }

    /**
     * Gets vrgrp
     *
     * @return int|null
     */
    public function getVrgrp()
    {
        return $this->container['vrgrp'];
    }

    /**
     * Sets vrgrp
     *
     * @param int|null $vrgrp VRRP group ID (1 - 65535).
     *
     * @return self
     */
    public function setVrgrp($vrgrp)
    {

        if (!is_null($vrgrp) && ($vrgrp > 65535)) {
            throw new \InvalidArgumentException('invalid value for $vrgrp when calling SystemInterfaceNameVrrp6., must be smaller than or equal to 65535.');
        }
        if (!is_null($vrgrp) && ($vrgrp < 1)) {
            throw new \InvalidArgumentException('invalid value for $vrgrp when calling SystemInterfaceNameVrrp6., must be bigger than or equal to 1.');
        }

        $this->container['vrgrp'] = $vrgrp;

        return $this;
    }

    /**
     * Gets vrip6
     *
     * @return string|null
     */
    public function getVrip6()
    {
        return $this->container['vrip6'];
    }

    /**
     * Sets vrip6
     *
     * @param string|null $vrip6 IPv6 address of the virtual router.
     *
     * @return self
     */
    public function setVrip6($vrip6)
    {
        $this->container['vrip6'] = $vrip6;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority of the virtual router (1 - 255).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemInterfaceNameVrrp6., must be smaller than or equal to 255.');
        }
        if (!is_null($priority) && ($priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling SystemInterfaceNameVrrp6., must be bigger than or equal to 1.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets adv_interval
     *
     * @return int|null
     */
    public function getAdvInterval()
    {
        return $this->container['adv_interval'];
    }

    /**
     * Sets adv_interval
     *
     * @param int|null $adv_interval Advertisement interval (1 - 255 seconds).
     *
     * @return self
     */
    public function setAdvInterval($adv_interval)
    {

        if (!is_null($adv_interval) && ($adv_interval > 255)) {
            throw new \InvalidArgumentException('invalid value for $adv_interval when calling SystemInterfaceNameVrrp6., must be smaller than or equal to 255.');
        }
        if (!is_null($adv_interval) && ($adv_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $adv_interval when calling SystemInterfaceNameVrrp6., must be bigger than or equal to 1.');
        }

        $this->container['adv_interval'] = $adv_interval;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int|null $start_time Startup time (1 - 255 seconds).
     *
     * @return self
     */
    public function setStartTime($start_time)
    {

        if (!is_null($start_time) && ($start_time > 255)) {
            throw new \InvalidArgumentException('invalid value for $start_time when calling SystemInterfaceNameVrrp6., must be smaller than or equal to 255.');
        }
        if (!is_null($start_time) && ($start_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $start_time when calling SystemInterfaceNameVrrp6., must be bigger than or equal to 1.');
        }

        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets preempt
     *
     * @return string|null
     */
    public function getPreempt()
    {
        return $this->container['preempt'];
    }

    /**
     * Sets preempt
     *
     * @param string|null $preempt Enable/disable preempt mode.    enable:Enable preempt mode.    disable:Disable preempt mode.
     *
     * @return self
     */
    public function setPreempt($preempt)
    {
        $allowedValues = $this->getPreemptAllowableValues();
        if (!is_null($preempt) && !in_array($preempt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preempt', must be one of '%s'",
                    $preempt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preempt'] = $preempt;

        return $this;
    }

    /**
     * Gets accept_mode
     *
     * @return string|null
     */
    public function getAcceptMode()
    {
        return $this->container['accept_mode'];
    }

    /**
     * Sets accept_mode
     *
     * @param string|null $accept_mode Enable/disable accept mode.    enable:Enable accept mode.    disable:Disable accept mode.
     *
     * @return self
     */
    public function setAcceptMode($accept_mode)
    {
        $allowedValues = $this->getAcceptModeAllowableValues();
        if (!is_null($accept_mode) && !in_array($accept_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'accept_mode', must be one of '%s'",
                    $accept_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accept_mode'] = $accept_mode;

        return $this;
    }

    /**
     * Gets vrdst6
     *
     * @return string|null
     */
    public function getVrdst6()
    {
        return $this->container['vrdst6'];
    }

    /**
     * Sets vrdst6
     *
     * @param string|null $vrdst6 Monitor the route to this destination.
     *
     * @return self
     */
    public function setVrdst6($vrdst6)
    {
        $this->container['vrdst6'] = $vrdst6;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable VRRP.    enable:Enable VRRP.    disable:Disable VRRP.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


