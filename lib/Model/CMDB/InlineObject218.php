<?php
/**
 * InlineObject218
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject218 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject218 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_218';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'fortilink' => 'string',
        'vlan' => 'string',
        'allowed_vlans' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]',
        'untagged_vlans' => '\Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]',
        'allowed_vlans_all' => 'string',
        'discard_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'fortilink' => null,
        'vlan' => null,
        'allowed_vlans' => null,
        'untagged_vlans' => null,
        'allowed_vlans_all' => null,
        'discard_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'fortilink' => 'fortilink',
        'vlan' => 'vlan',
        'allowed_vlans' => 'allowed-vlans',
        'untagged_vlans' => 'untagged-vlans',
        'allowed_vlans_all' => 'allowed-vlans-all',
        'discard_mode' => 'discard-mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'fortilink' => 'setFortilink',
        'vlan' => 'setVlan',
        'allowed_vlans' => 'setAllowedVlans',
        'untagged_vlans' => 'setUntaggedVlans',
        'allowed_vlans_all' => 'setAllowedVlansAll',
        'discard_mode' => 'setDiscardMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'fortilink' => 'getFortilink',
        'vlan' => 'getVlan',
        'allowed_vlans' => 'getAllowedVlans',
        'untagged_vlans' => 'getUntaggedVlans',
        'allowed_vlans_all' => 'getAllowedVlansAll',
        'discard_mode' => 'getDiscardMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALLOWED_VLANS_ALL_ENABLE = 'enable';
    const ALLOWED_VLANS_ALL_DISABLE = 'disable';
    const DISCARD_MODE_NONE = 'none';
    const DISCARD_MODE_ALL_UNTAGGED = 'all-untagged';
    const DISCARD_MODE_ALL_TAGGED = 'all-tagged';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowedVlansAllAllowableValues()
    {
        return [
            self::ALLOWED_VLANS_ALL_ENABLE,
            self::ALLOWED_VLANS_ALL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscardModeAllowableValues()
    {
        return [
            self::DISCARD_MODE_NONE,
            self::DISCARD_MODE_ALL_UNTAGGED,
            self::DISCARD_MODE_ALL_TAGGED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['fortilink'] = $data['fortilink'] ?? null;
        $this->container['vlan'] = $data['vlan'] ?? null;
        $this->container['allowed_vlans'] = $data['allowed_vlans'] ?? null;
        $this->container['untagged_vlans'] = $data['untagged_vlans'] ?? null;
        $this->container['allowed_vlans_all'] = $data['allowed_vlans_all'] ?? null;
        $this->container['discard_mode'] = $data['discard_mode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['fortilink']) && (mb_strlen($this->container['fortilink']) > 15)) {
            $invalidProperties[] = "invalid value for 'fortilink', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['vlan']) && (mb_strlen($this->container['vlan']) > 15)) {
            $invalidProperties[] = "invalid value for 'vlan', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['allowed_vlans']) && (count($this->container['allowed_vlans']) > 0)) {
            $invalidProperties[] = "invalid value for 'allowed_vlans', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['untagged_vlans']) && (count($this->container['untagged_vlans']) > 0)) {
            $invalidProperties[] = "invalid value for 'untagged_vlans', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAllowedVlansAllAllowableValues();
        if (!is_null($this->container['allowed_vlans_all']) && !in_array($this->container['allowed_vlans_all'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowed_vlans_all', must be one of '%s'",
                $this->container['allowed_vlans_all'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscardModeAllowableValues();
        if (!is_null($this->container['discard_mode']) && !in_array($this->container['discard_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'discard_mode', must be one of '%s'",
                $this->container['discard_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name VLAN policy name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject218., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for the VLAN policy.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InlineObject218., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fortilink
     *
     * @return string|null
     */
    public function getFortilink()
    {
        return $this->container['fortilink'];
    }

    /**
     * Sets fortilink
     *
     * @param string|null $fortilink FortiLink interface for which this VLAN policy belongs to.
     *
     * @return self
     */
    public function setFortilink($fortilink)
    {
        if (!is_null($fortilink) && (mb_strlen($fortilink) > 15)) {
            throw new \InvalidArgumentException('invalid length for $fortilink when calling InlineObject218., must be smaller than or equal to 15.');
        }

        $this->container['fortilink'] = $fortilink;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return string|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param string|null $vlan Native VLAN to be applied when using this VLAN policy.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (!is_null($vlan) && (mb_strlen($vlan) > 15)) {
            throw new \InvalidArgumentException('invalid length for $vlan when calling InlineObject218., must be smaller than or equal to 15.');
        }

        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets allowed_vlans
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null
     */
    public function getAllowedVlans()
    {
        return $this->container['allowed_vlans'];
    }

    /**
     * Sets allowed_vlans
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null $allowed_vlans Allowed VLANs to be applied when using this VLAN policy.
     *
     * @return self
     */
    public function setAllowedVlans($allowed_vlans)
    {

        if (!is_null($allowed_vlans) && (count($allowed_vlans) > 0)) {
            throw new \InvalidArgumentException('invalid value for $allowed_vlans when calling InlineObject218., number of items must be less than or equal to 0.');
        }
        $this->container['allowed_vlans'] = $allowed_vlans;

        return $this;
    }

    /**
     * Gets untagged_vlans
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null
     */
    public function getUntaggedVlans()
    {
        return $this->container['untagged_vlans'];
    }

    /**
     * Sets untagged_vlans
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SwitchControllerManagedSwitchSwitchIdAllowedVlans[]|null $untagged_vlans Untagged VLANs to be applied when using this VLAN policy.
     *
     * @return self
     */
    public function setUntaggedVlans($untagged_vlans)
    {

        if (!is_null($untagged_vlans) && (count($untagged_vlans) > 0)) {
            throw new \InvalidArgumentException('invalid value for $untagged_vlans when calling InlineObject218., number of items must be less than or equal to 0.');
        }
        $this->container['untagged_vlans'] = $untagged_vlans;

        return $this;
    }

    /**
     * Gets allowed_vlans_all
     *
     * @return string|null
     */
    public function getAllowedVlansAll()
    {
        return $this->container['allowed_vlans_all'];
    }

    /**
     * Sets allowed_vlans_all
     *
     * @param string|null $allowed_vlans_all Enable/disable all defined VLANs when using this VLAN policy.    enable:Enable all defined VLANs.    disable:Disable all defined VLANs.
     *
     * @return self
     */
    public function setAllowedVlansAll($allowed_vlans_all)
    {
        $allowedValues = $this->getAllowedVlansAllAllowableValues();
        if (!is_null($allowed_vlans_all) && !in_array($allowed_vlans_all, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowed_vlans_all', must be one of '%s'",
                    $allowed_vlans_all,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowed_vlans_all'] = $allowed_vlans_all;

        return $this;
    }

    /**
     * Gets discard_mode
     *
     * @return string|null
     */
    public function getDiscardMode()
    {
        return $this->container['discard_mode'];
    }

    /**
     * Sets discard_mode
     *
     * @param string|null $discard_mode Discard mode to be applied when using this VLAN policy.    none:Discard disabled.    all-untagged:Discard all frames that are untagged.    all-tagged:Discard all frames that are tagged.
     *
     * @return self
     */
    public function setDiscardMode($discard_mode)
    {
        $allowedValues = $this->getDiscardModeAllowableValues();
        if (!is_null($discard_mode) && !in_array($discard_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'discard_mode', must be one of '%s'",
                    $discard_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discard_mode'] = $discard_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


