<?php
/**
 * InlineObject304
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject304 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject304 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_304';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'entropy_token' => 'string',
        'self_test_period' => 'int',
        'key_generation_self_test' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'entropy_token' => null,
        'self_test_period' => null,
        'key_generation_self_test' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'entropy_token' => 'entropy-token',
        'self_test_period' => 'self-test-period',
        'key_generation_self_test' => 'key-generation-self-test'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'entropy_token' => 'setEntropyToken',
        'self_test_period' => 'setSelfTestPeriod',
        'key_generation_self_test' => 'setKeyGenerationSelfTest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'entropy_token' => 'getEntropyToken',
        'self_test_period' => 'getSelfTestPeriod',
        'key_generation_self_test' => 'getKeyGenerationSelfTest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const ENTROPY_TOKEN_ENABLE = 'enable';
    const ENTROPY_TOKEN_DISABLE = 'disable';
    const ENTROPY_TOKEN_DYNAMIC = 'dynamic';
    const KEY_GENERATION_SELF_TEST_ENABLE = 'enable';
    const KEY_GENERATION_SELF_TEST_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntropyTokenAllowableValues()
    {
        return [
            self::ENTROPY_TOKEN_ENABLE,
            self::ENTROPY_TOKEN_DISABLE,
            self::ENTROPY_TOKEN_DYNAMIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyGenerationSelfTestAllowableValues()
    {
        return [
            self::KEY_GENERATION_SELF_TEST_ENABLE,
            self::KEY_GENERATION_SELF_TEST_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['entropy_token'] = $data['entropy_token'] ?? null;
        $this->container['self_test_period'] = $data['self_test_period'] ?? null;
        $this->container['key_generation_self_test'] = $data['key_generation_self_test'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntropyTokenAllowableValues();
        if (!is_null($this->container['entropy_token']) && !in_array($this->container['entropy_token'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entropy_token', must be one of '%s'",
                $this->container['entropy_token'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['self_test_period']) && ($this->container['self_test_period'] > 1440)) {
            $invalidProperties[] = "invalid value for 'self_test_period', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['self_test_period']) && ($this->container['self_test_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'self_test_period', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getKeyGenerationSelfTestAllowableValues();
        if (!is_null($this->container['key_generation_self_test']) && !in_array($this->container['key_generation_self_test'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'key_generation_self_test', must be one of '%s'",
                $this->container['key_generation_self_test'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable/fips-ciphers    enable:Enable FIPS-CC mode.    disable:Disable FIPS-CC mode.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets entropy_token
     *
     * @return string|null
     */
    public function getEntropyToken()
    {
        return $this->container['entropy_token'];
    }

    /**
     * Sets entropy_token
     *
     * @param string|null $entropy_token Enable/disable/dynamic entropy token.    enable:Enable  entropy token to be present during boot process.    disable:Disable entropy token to be present during boot process.    dynamic:Dynamic detect entropy token to be present during boot process.
     *
     * @return self
     */
    public function setEntropyToken($entropy_token)
    {
        $allowedValues = $this->getEntropyTokenAllowableValues();
        if (!is_null($entropy_token) && !in_array($entropy_token, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entropy_token', must be one of '%s'",
                    $entropy_token,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entropy_token'] = $entropy_token;

        return $this;
    }

    /**
     * Gets self_test_period
     *
     * @return int|null
     */
    public function getSelfTestPeriod()
    {
        return $this->container['self_test_period'];
    }

    /**
     * Sets self_test_period
     *
     * @param int|null $self_test_period Self test period.
     *
     * @return self
     */
    public function setSelfTestPeriod($self_test_period)
    {

        if (!is_null($self_test_period) && ($self_test_period > 1440)) {
            throw new \InvalidArgumentException('invalid value for $self_test_period when calling InlineObject304., must be smaller than or equal to 1440.');
        }
        if (!is_null($self_test_period) && ($self_test_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $self_test_period when calling InlineObject304., must be bigger than or equal to 1.');
        }

        $this->container['self_test_period'] = $self_test_period;

        return $this;
    }

    /**
     * Gets key_generation_self_test
     *
     * @return string|null
     */
    public function getKeyGenerationSelfTest()
    {
        return $this->container['key_generation_self_test'];
    }

    /**
     * Sets key_generation_self_test
     *
     * @param string|null $key_generation_self_test Enable/disable self tests after key generation.    enable:Enable self tests after key generation.    disable:Disable self tests after key generation.
     *
     * @return self
     */
    public function setKeyGenerationSelfTest($key_generation_self_test)
    {
        $allowedValues = $this->getKeyGenerationSelfTestAllowableValues();
        if (!is_null($key_generation_self_test) && !in_array($key_generation_self_test, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'key_generation_self_test', must be one of '%s'",
                    $key_generation_self_test,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['key_generation_self_test'] = $key_generation_self_test;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


