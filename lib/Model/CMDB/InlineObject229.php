<?php
/**
 * InlineObject229
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject229 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject229 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_229';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'comment' => 'string',
        'voice' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'voice_signaling' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'guest' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'guest_voice_signaling' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'softphone' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'video_conferencing' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'streaming_video' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]',
        'video_signaling' => '\Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'comment' => null,
        'voice' => null,
        'voice_signaling' => null,
        'guest' => null,
        'guest_voice_signaling' => null,
        'softphone' => null,
        'video_conferencing' => null,
        'streaming_video' => null,
        'video_signaling' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'comment' => 'comment',
        'voice' => 'voice',
        'voice_signaling' => 'voice-signaling',
        'guest' => 'guest',
        'guest_voice_signaling' => 'guest-voice-signaling',
        'softphone' => 'softphone',
        'video_conferencing' => 'video-conferencing',
        'streaming_video' => 'streaming-video',
        'video_signaling' => 'video-signaling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'comment' => 'setComment',
        'voice' => 'setVoice',
        'voice_signaling' => 'setVoiceSignaling',
        'guest' => 'setGuest',
        'guest_voice_signaling' => 'setGuestVoiceSignaling',
        'softphone' => 'setSoftphone',
        'video_conferencing' => 'setVideoConferencing',
        'streaming_video' => 'setStreamingVideo',
        'video_signaling' => 'setVideoSignaling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'comment' => 'getComment',
        'voice' => 'getVoice',
        'voice_signaling' => 'getVoiceSignaling',
        'guest' => 'getGuest',
        'guest_voice_signaling' => 'getGuestVoiceSignaling',
        'softphone' => 'getSoftphone',
        'video_conferencing' => 'getVideoConferencing',
        'streaming_video' => 'getStreamingVideo',
        'video_signaling' => 'getVideoSignaling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['voice'] = $data['voice'] ?? null;
        $this->container['voice_signaling'] = $data['voice_signaling'] ?? null;
        $this->container['guest'] = $data['guest'] ?? null;
        $this->container['guest_voice_signaling'] = $data['guest_voice_signaling'] ?? null;
        $this->container['softphone'] = $data['softphone'] ?? null;
        $this->container['video_conferencing'] = $data['video_conferencing'] ?? null;
        $this->container['streaming_video'] = $data['streaming_video'] ?? null;
        $this->container['video_signaling'] = $data['video_signaling'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 1023)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 1023.";
        }

        if (!is_null($this->container['voice']) && (count($this->container['voice']) > 0)) {
            $invalidProperties[] = "invalid value for 'voice', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['voice_signaling']) && (count($this->container['voice_signaling']) > 0)) {
            $invalidProperties[] = "invalid value for 'voice_signaling', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['guest']) && (count($this->container['guest']) > 0)) {
            $invalidProperties[] = "invalid value for 'guest', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['guest_voice_signaling']) && (count($this->container['guest_voice_signaling']) > 0)) {
            $invalidProperties[] = "invalid value for 'guest_voice_signaling', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['softphone']) && (count($this->container['softphone']) > 0)) {
            $invalidProperties[] = "invalid value for 'softphone', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['video_conferencing']) && (count($this->container['video_conferencing']) > 0)) {
            $invalidProperties[] = "invalid value for 'video_conferencing', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['streaming_video']) && (count($this->container['streaming_video']) > 0)) {
            $invalidProperties[] = "invalid value for 'streaming_video', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['video_signaling']) && (count($this->container['video_signaling']) > 0)) {
            $invalidProperties[] = "invalid value for 'video_signaling', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name LLDP network policy name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject229., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject229., must be smaller than or equal to 1023.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $voice Voice.
     *
     * @return self
     */
    public function setVoice($voice)
    {

        if (!is_null($voice) && (count($voice) > 0)) {
            throw new \InvalidArgumentException('invalid value for $voice when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets voice_signaling
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getVoiceSignaling()
    {
        return $this->container['voice_signaling'];
    }

    /**
     * Sets voice_signaling
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $voice_signaling Voice signaling.
     *
     * @return self
     */
    public function setVoiceSignaling($voice_signaling)
    {

        if (!is_null($voice_signaling) && (count($voice_signaling) > 0)) {
            throw new \InvalidArgumentException('invalid value for $voice_signaling when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['voice_signaling'] = $voice_signaling;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $guest Guest.
     *
     * @return self
     */
    public function setGuest($guest)
    {

        if (!is_null($guest) && (count($guest) > 0)) {
            throw new \InvalidArgumentException('invalid value for $guest when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets guest_voice_signaling
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getGuestVoiceSignaling()
    {
        return $this->container['guest_voice_signaling'];
    }

    /**
     * Sets guest_voice_signaling
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $guest_voice_signaling Guest Voice Signaling.
     *
     * @return self
     */
    public function setGuestVoiceSignaling($guest_voice_signaling)
    {

        if (!is_null($guest_voice_signaling) && (count($guest_voice_signaling) > 0)) {
            throw new \InvalidArgumentException('invalid value for $guest_voice_signaling when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['guest_voice_signaling'] = $guest_voice_signaling;

        return $this;
    }

    /**
     * Gets softphone
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getSoftphone()
    {
        return $this->container['softphone'];
    }

    /**
     * Sets softphone
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $softphone Softphone.
     *
     * @return self
     */
    public function setSoftphone($softphone)
    {

        if (!is_null($softphone) && (count($softphone) > 0)) {
            throw new \InvalidArgumentException('invalid value for $softphone when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['softphone'] = $softphone;

        return $this;
    }

    /**
     * Gets video_conferencing
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getVideoConferencing()
    {
        return $this->container['video_conferencing'];
    }

    /**
     * Sets video_conferencing
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $video_conferencing Video Conferencing.
     *
     * @return self
     */
    public function setVideoConferencing($video_conferencing)
    {

        if (!is_null($video_conferencing) && (count($video_conferencing) > 0)) {
            throw new \InvalidArgumentException('invalid value for $video_conferencing when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['video_conferencing'] = $video_conferencing;

        return $this;
    }

    /**
     * Gets streaming_video
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getStreamingVideo()
    {
        return $this->container['streaming_video'];
    }

    /**
     * Sets streaming_video
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $streaming_video Streaming Video.
     *
     * @return self
     */
    public function setStreamingVideo($streaming_video)
    {

        if (!is_null($streaming_video) && (count($streaming_video) > 0)) {
            throw new \InvalidArgumentException('invalid value for $streaming_video when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['streaming_video'] = $streaming_video;

        return $this;
    }

    /**
     * Gets video_signaling
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null
     */
    public function getVideoSignaling()
    {
        return $this->container['video_signaling'];
    }

    /**
     * Sets video_signaling
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemLldpNetworkPolicyNameVoice[]|null $video_signaling Video Signaling.
     *
     * @return self
     */
    public function setVideoSignaling($video_signaling)
    {

        if (!is_null($video_signaling) && (count($video_signaling) > 0)) {
            throw new \InvalidArgumentException('invalid value for $video_signaling when calling InlineObject229., number of items must be less than or equal to 0.');
        }
        $this->container['video_signaling'] = $video_signaling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


