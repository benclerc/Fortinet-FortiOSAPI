<?php
/**
 * WirelessControllerAccessControlListNameLayer3Ipv6Rules
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerAccessControlListNameLayer3Ipv6Rules Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerAccessControlListNameLayer3Ipv6Rules implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_access_control_list__name__layer3_ipv6_rules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rule_id' => 'int',
        'comment' => 'string',
        'srcaddr' => 'string',
        'srcport' => 'int',
        'dstaddr' => 'string',
        'dstport' => 'int',
        'protocol' => 'int',
        'action' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rule_id' => null,
        'comment' => null,
        'srcaddr' => null,
        'srcport' => null,
        'dstaddr' => null,
        'dstport' => null,
        'protocol' => null,
        'action' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rule_id' => 'rule-id',
        'comment' => 'comment',
        'srcaddr' => 'srcaddr',
        'srcport' => 'srcport',
        'dstaddr' => 'dstaddr',
        'dstport' => 'dstport',
        'protocol' => 'protocol',
        'action' => 'action'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rule_id' => 'setRuleId',
        'comment' => 'setComment',
        'srcaddr' => 'setSrcaddr',
        'srcport' => 'setSrcport',
        'dstaddr' => 'setDstaddr',
        'dstport' => 'setDstport',
        'protocol' => 'setProtocol',
        'action' => 'setAction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rule_id' => 'getRuleId',
        'comment' => 'getComment',
        'srcaddr' => 'getSrcaddr',
        'srcport' => 'getSrcport',
        'dstaddr' => 'getDstaddr',
        'dstport' => 'getDstport',
        'protocol' => 'getProtocol',
        'action' => 'getAction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTION_ALLOW = 'allow';
    const ACTION_DENY = 'deny';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_ALLOW,
            self::ACTION_DENY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rule_id'] = $data['rule_id'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['srcaddr'] = $data['srcaddr'] ?? null;
        $this->container['srcport'] = $data['srcport'] ?? null;
        $this->container['dstaddr'] = $data['dstaddr'] ?? null;
        $this->container['dstport'] = $data['dstport'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rule_id']) && ($this->container['rule_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'rule_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['rule_id']) && ($this->container['rule_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'rule_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 63)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['srcport']) && ($this->container['srcport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'srcport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['srcport']) && ($this->container['srcport'] < 0)) {
            $invalidProperties[] = "invalid value for 'srcport', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dstport']) && ($this->container['dstport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'dstport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['dstport']) && ($this->container['dstport'] < 0)) {
            $invalidProperties[] = "invalid value for 'dstport', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] > 255)) {
            $invalidProperties[] = "invalid value for 'protocol', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] < 0)) {
            $invalidProperties[] = "invalid value for 'protocol', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rule_id
     *
     * @return int|null
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param int|null $rule_id Rule ID (1 - 65535).
     *
     * @return self
     */
    public function setRuleId($rule_id)
    {

        if (!is_null($rule_id) && ($rule_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $rule_id when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be smaller than or equal to 65535.');
        }
        if (!is_null($rule_id) && ($rule_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $rule_id when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be bigger than or equal to 1.');
        }

        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Description.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 63)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be smaller than or equal to 63.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets srcaddr
     *
     * @return string|null
     */
    public function getSrcaddr()
    {
        return $this->container['srcaddr'];
    }

    /**
     * Sets srcaddr
     *
     * @param string|null $srcaddr Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     *
     * @return self
     */
    public function setSrcaddr($srcaddr)
    {
        $this->container['srcaddr'] = $srcaddr;

        return $this;
    }

    /**
     * Gets srcport
     *
     * @return int|null
     */
    public function getSrcport()
    {
        return $this->container['srcport'];
    }

    /**
     * Sets srcport
     *
     * @param int|null $srcport Source port (0 - 65535, default = 0, meaning any).
     *
     * @return self
     */
    public function setSrcport($srcport)
    {

        if (!is_null($srcport) && ($srcport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $srcport when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be smaller than or equal to 65535.');
        }
        if (!is_null($srcport) && ($srcport < 0)) {
            throw new \InvalidArgumentException('invalid value for $srcport when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be bigger than or equal to 0.');
        }

        $this->container['srcport'] = $srcport;

        return $this;
    }

    /**
     * Gets dstaddr
     *
     * @return string|null
     */
    public function getDstaddr()
    {
        return $this->container['dstaddr'];
    }

    /**
     * Sets dstaddr
     *
     * @param string|null $dstaddr Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
     *
     * @return self
     */
    public function setDstaddr($dstaddr)
    {
        $this->container['dstaddr'] = $dstaddr;

        return $this;
    }

    /**
     * Gets dstport
     *
     * @return int|null
     */
    public function getDstport()
    {
        return $this->container['dstport'];
    }

    /**
     * Sets dstport
     *
     * @param int|null $dstport Destination port (0 - 65535, default = 0, meaning any).
     *
     * @return self
     */
    public function setDstport($dstport)
    {

        if (!is_null($dstport) && ($dstport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $dstport when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be smaller than or equal to 65535.');
        }
        if (!is_null($dstport) && ($dstport < 0)) {
            throw new \InvalidArgumentException('invalid value for $dstport when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be bigger than or equal to 0.');
        }

        $this->container['dstport'] = $dstport;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return int|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param int|null $protocol Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if (!is_null($protocol) && ($protocol > 255)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be smaller than or equal to 255.');
        }
        if (!is_null($protocol) && ($protocol < 0)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling WirelessControllerAccessControlListNameLayer3Ipv6Rules., must be bigger than or equal to 0.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Policy action (allow | deny).    allow:Allows traffic matching the policy.    deny:Blocks traffic matching the policy.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


