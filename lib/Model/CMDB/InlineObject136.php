<?php
/**
 * InlineObject136
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject136 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject136 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_136';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'policy' => 'int',
        'type' => 'string',
        'period' => 'string',
        'drill_down_charts' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameDrillDownCharts[]',
        'comments' => 'string',
        'dataset' => 'string',
        'category' => 'string',
        'favorite' => 'string',
        'graph_type' => 'string',
        'style' => 'string',
        'dimension' => 'string',
        'x_series' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameXSeries[]',
        'y_series' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameYSeries[]',
        'category_series' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameCategorySeries[]',
        'value_series' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameValueSeries[]',
        'title' => 'string',
        'title_font_size' => 'int',
        'background' => 'string',
        'color_palette' => 'string',
        'legend' => 'string',
        'legend_font_size' => 'int',
        'column' => '\Fortigate\FortiOS\Model\CMDB\ReportChartNameColumn[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'policy' => null,
        'type' => null,
        'period' => null,
        'drill_down_charts' => null,
        'comments' => null,
        'dataset' => null,
        'category' => null,
        'favorite' => null,
        'graph_type' => null,
        'style' => null,
        'dimension' => null,
        'x_series' => null,
        'y_series' => null,
        'category_series' => null,
        'value_series' => null,
        'title' => null,
        'title_font_size' => null,
        'background' => null,
        'color_palette' => null,
        'legend' => null,
        'legend_font_size' => null,
        'column' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'policy' => 'policy',
        'type' => 'type',
        'period' => 'period',
        'drill_down_charts' => 'drill-down-charts',
        'comments' => 'comments',
        'dataset' => 'dataset',
        'category' => 'category',
        'favorite' => 'favorite',
        'graph_type' => 'graph-type',
        'style' => 'style',
        'dimension' => 'dimension',
        'x_series' => 'x-series',
        'y_series' => 'y-series',
        'category_series' => 'category-series',
        'value_series' => 'value-series',
        'title' => 'title',
        'title_font_size' => 'title-font-size',
        'background' => 'background',
        'color_palette' => 'color-palette',
        'legend' => 'legend',
        'legend_font_size' => 'legend-font-size',
        'column' => 'column'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'policy' => 'setPolicy',
        'type' => 'setType',
        'period' => 'setPeriod',
        'drill_down_charts' => 'setDrillDownCharts',
        'comments' => 'setComments',
        'dataset' => 'setDataset',
        'category' => 'setCategory',
        'favorite' => 'setFavorite',
        'graph_type' => 'setGraphType',
        'style' => 'setStyle',
        'dimension' => 'setDimension',
        'x_series' => 'setXSeries',
        'y_series' => 'setYSeries',
        'category_series' => 'setCategorySeries',
        'value_series' => 'setValueSeries',
        'title' => 'setTitle',
        'title_font_size' => 'setTitleFontSize',
        'background' => 'setBackground',
        'color_palette' => 'setColorPalette',
        'legend' => 'setLegend',
        'legend_font_size' => 'setLegendFontSize',
        'column' => 'setColumn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'policy' => 'getPolicy',
        'type' => 'getType',
        'period' => 'getPeriod',
        'drill_down_charts' => 'getDrillDownCharts',
        'comments' => 'getComments',
        'dataset' => 'getDataset',
        'category' => 'getCategory',
        'favorite' => 'getFavorite',
        'graph_type' => 'getGraphType',
        'style' => 'getStyle',
        'dimension' => 'getDimension',
        'x_series' => 'getXSeries',
        'y_series' => 'getYSeries',
        'category_series' => 'getCategorySeries',
        'value_series' => 'getValueSeries',
        'title' => 'getTitle',
        'title_font_size' => 'getTitleFontSize',
        'background' => 'getBackground',
        'color_palette' => 'getColorPalette',
        'legend' => 'getLegend',
        'legend_font_size' => 'getLegendFontSize',
        'column' => 'getColumn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_GRAPH = 'graph';
    const TYPE_TABLE = 'table';
    const PERIOD_LAST24H = 'last24h';
    const PERIOD_LAST7D = 'last7d';
    const CATEGORY_MISC = 'misc';
    const CATEGORY_TRAFFIC = 'traffic';
    const CATEGORY_EVENT = 'event';
    const CATEGORY_VIRUS = 'virus';
    const CATEGORY_WEBFILTER = 'webfilter';
    const CATEGORY_ATTACK = 'attack';
    const CATEGORY_SPAM = 'spam';
    const CATEGORY_DLP = 'dlp';
    const CATEGORY_APP_CTRL = 'app-ctrl';
    const CATEGORY_VULNERABILITY = 'vulnerability';
    const FAVORITE_NO = 'no';
    const FAVORITE_YES = 'yes';
    const GRAPH_TYPE_NONE = 'none';
    const GRAPH_TYPE_BAR = 'bar';
    const GRAPH_TYPE_PIE = 'pie';
    const GRAPH_TYPE_LINE = 'line';
    const GRAPH_TYPE_FLOW = 'flow';
    const STYLE_AUTO = 'auto';
    const STYLE_MANUAL = 'manual';
    const DIMENSION__2_D = '2D';
    const DIMENSION__3_D = '3D';
    const LEGEND_ENABLE = 'enable';
    const LEGEND_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GRAPH,
            self::TYPE_TABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_LAST24H,
            self::PERIOD_LAST7D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_MISC,
            self::CATEGORY_TRAFFIC,
            self::CATEGORY_EVENT,
            self::CATEGORY_VIRUS,
            self::CATEGORY_WEBFILTER,
            self::CATEGORY_ATTACK,
            self::CATEGORY_SPAM,
            self::CATEGORY_DLP,
            self::CATEGORY_APP_CTRL,
            self::CATEGORY_VULNERABILITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFavoriteAllowableValues()
    {
        return [
            self::FAVORITE_NO,
            self::FAVORITE_YES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGraphTypeAllowableValues()
    {
        return [
            self::GRAPH_TYPE_NONE,
            self::GRAPH_TYPE_BAR,
            self::GRAPH_TYPE_PIE,
            self::GRAPH_TYPE_LINE,
            self::GRAPH_TYPE_FLOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_AUTO,
            self::STYLE_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDimensionAllowableValues()
    {
        return [
            self::DIMENSION__2_D,
            self::DIMENSION__3_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLegendAllowableValues()
    {
        return [
            self::LEGEND_ENABLE,
            self::LEGEND_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['policy'] = $data['policy'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['drill_down_charts'] = $data['drill_down_charts'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['dataset'] = $data['dataset'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['favorite'] = $data['favorite'] ?? null;
        $this->container['graph_type'] = $data['graph_type'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['dimension'] = $data['dimension'] ?? null;
        $this->container['x_series'] = $data['x_series'] ?? null;
        $this->container['y_series'] = $data['y_series'] ?? null;
        $this->container['category_series'] = $data['category_series'] ?? null;
        $this->container['value_series'] = $data['value_series'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['title_font_size'] = $data['title_font_size'] ?? null;
        $this->container['background'] = $data['background'] ?? null;
        $this->container['color_palette'] = $data['color_palette'] ?? null;
        $this->container['legend'] = $data['legend'] ?? null;
        $this->container['legend_font_size'] = $data['legend_font_size'] ?? null;
        $this->container['column'] = $data['column'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 71)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['policy']) && ($this->container['policy'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'policy', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['policy']) && ($this->container['policy'] < 0)) {
            $invalidProperties[] = "invalid value for 'policy', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($this->container['period']) && !in_array($this->container['period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'period', must be one of '%s'",
                $this->container['period'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['drill_down_charts']) && (count($this->container['drill_down_charts']) > 0)) {
            $invalidProperties[] = "invalid value for 'drill_down_charts', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 127)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['dataset']) && (mb_strlen($this->container['dataset']) > 71)) {
            $invalidProperties[] = "invalid value for 'dataset', the character length must be smaller than or equal to 71.";
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFavoriteAllowableValues();
        if (!is_null($this->container['favorite']) && !in_array($this->container['favorite'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'favorite', must be one of '%s'",
                $this->container['favorite'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGraphTypeAllowableValues();
        if (!is_null($this->container['graph_type']) && !in_array($this->container['graph_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'graph_type', must be one of '%s'",
                $this->container['graph_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($this->container['style']) && !in_array($this->container['style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'style', must be one of '%s'",
                $this->container['style'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDimensionAllowableValues();
        if (!is_null($this->container['dimension']) && !in_array($this->container['dimension'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dimension', must be one of '%s'",
                $this->container['dimension'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['x_series']) && (count($this->container['x_series']) > 0)) {
            $invalidProperties[] = "invalid value for 'x_series', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['y_series']) && (count($this->container['y_series']) > 0)) {
            $invalidProperties[] = "invalid value for 'y_series', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['category_series']) && (count($this->container['category_series']) > 0)) {
            $invalidProperties[] = "invalid value for 'category_series', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['value_series']) && (count($this->container['value_series']) > 0)) {
            $invalidProperties[] = "invalid value for 'value_series', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 63)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['title_font_size']) && ($this->container['title_font_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'title_font_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['title_font_size']) && ($this->container['title_font_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'title_font_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['background']) && (mb_strlen($this->container['background']) > 11)) {
            $invalidProperties[] = "invalid value for 'background', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['color_palette']) && (mb_strlen($this->container['color_palette']) > 11)) {
            $invalidProperties[] = "invalid value for 'color_palette', the character length must be smaller than or equal to 11.";
        }

        $allowedValues = $this->getLegendAllowableValues();
        if (!is_null($this->container['legend']) && !in_array($this->container['legend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'legend', must be one of '%s'",
                $this->container['legend'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['legend_font_size']) && ($this->container['legend_font_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'legend_font_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['legend_font_size']) && ($this->container['legend_font_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'legend_font_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['column']) && (count($this->container['column']) > 0)) {
            $invalidProperties[] = "invalid value for 'column', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Chart Widget Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 71)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject136., must be smaller than or equal to 71.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return int|null
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param int|null $policy Used by monitor policy.
     *
     * @return self
     */
    public function setPolicy($policy)
    {

        if (!is_null($policy) && ($policy > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $policy when calling InlineObject136., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($policy) && ($policy < 0)) {
            throw new \InvalidArgumentException('invalid value for $policy when calling InlineObject136., must be bigger than or equal to 0.');
        }

        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Chart type.    graph:Graph.    table:Table.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period Time period.    last24h:Last 24 hours.    last7d:Last 7 days.
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($period) && !in_array($period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'period', must be one of '%s'",
                    $period,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets drill_down_charts
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameDrillDownCharts[]|null
     */
    public function getDrillDownCharts()
    {
        return $this->container['drill_down_charts'];
    }

    /**
     * Sets drill_down_charts
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameDrillDownCharts[]|null $drill_down_charts Drill down charts.
     *
     * @return self
     */
    public function setDrillDownCharts($drill_down_charts)
    {

        if (!is_null($drill_down_charts) && (count($drill_down_charts) > 0)) {
            throw new \InvalidArgumentException('invalid value for $drill_down_charts when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['drill_down_charts'] = $drill_down_charts;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 127)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject136., must be smaller than or equal to 127.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets dataset
     *
     * @return string|null
     */
    public function getDataset()
    {
        return $this->container['dataset'];
    }

    /**
     * Sets dataset
     *
     * @param string|null $dataset Bind dataset to chart.
     *
     * @return self
     */
    public function setDataset($dataset)
    {
        if (!is_null($dataset) && (mb_strlen($dataset) > 71)) {
            throw new \InvalidArgumentException('invalid length for $dataset when calling InlineObject136., must be smaller than or equal to 71.');
        }

        $this->container['dataset'] = $dataset;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category.    misc:Miscellaneous.    traffic:Traffic.    event:Event.    virus:Virus.    webfilter:Webfilter.    attack:Attack.    spam:Spam.    dlp:Data leak prevention.    app-ctrl:Application control.    vulnerability:Vulnerability.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return string|null
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param string|null $favorite Favorite.    no:Not a favorite chart.    yes:Favorite chart.
     *
     * @return self
     */
    public function setFavorite($favorite)
    {
        $allowedValues = $this->getFavoriteAllowableValues();
        if (!is_null($favorite) && !in_array($favorite, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'favorite', must be one of '%s'",
                    $favorite,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets graph_type
     *
     * @return string|null
     */
    public function getGraphType()
    {
        return $this->container['graph_type'];
    }

    /**
     * Sets graph_type
     *
     * @param string|null $graph_type Graph type.    none:None.    bar:Bar Chart.    pie:Pie Chart.    line:Line Chart.    flow:flow Chart.
     *
     * @return self
     */
    public function setGraphType($graph_type)
    {
        $allowedValues = $this->getGraphTypeAllowableValues();
        if (!is_null($graph_type) && !in_array($graph_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'graph_type', must be one of '%s'",
                    $graph_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['graph_type'] = $graph_type;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style Style.    auto:Auto.    manual:Manual.
     *
     * @return self
     */
    public function setStyle($style)
    {
        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($style) && !in_array($style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'style', must be one of '%s'",
                    $style,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return string|null
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param string|null $dimension Dimension.    2D:2D graphic.    3D:3D graphic.
     *
     * @return self
     */
    public function setDimension($dimension)
    {
        $allowedValues = $this->getDimensionAllowableValues();
        if (!is_null($dimension) && !in_array($dimension, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dimension', must be one of '%s'",
                    $dimension,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets x_series
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameXSeries[]|null
     */
    public function getXSeries()
    {
        return $this->container['x_series'];
    }

    /**
     * Sets x_series
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameXSeries[]|null $x_series X-series of chart.
     *
     * @return self
     */
    public function setXSeries($x_series)
    {

        if (!is_null($x_series) && (count($x_series) > 0)) {
            throw new \InvalidArgumentException('invalid value for $x_series when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['x_series'] = $x_series;

        return $this;
    }

    /**
     * Gets y_series
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameYSeries[]|null
     */
    public function getYSeries()
    {
        return $this->container['y_series'];
    }

    /**
     * Sets y_series
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameYSeries[]|null $y_series Y-series of chart.
     *
     * @return self
     */
    public function setYSeries($y_series)
    {

        if (!is_null($y_series) && (count($y_series) > 0)) {
            throw new \InvalidArgumentException('invalid value for $y_series when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['y_series'] = $y_series;

        return $this;
    }

    /**
     * Gets category_series
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameCategorySeries[]|null
     */
    public function getCategorySeries()
    {
        return $this->container['category_series'];
    }

    /**
     * Sets category_series
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameCategorySeries[]|null $category_series Category series of pie chart.
     *
     * @return self
     */
    public function setCategorySeries($category_series)
    {

        if (!is_null($category_series) && (count($category_series) > 0)) {
            throw new \InvalidArgumentException('invalid value for $category_series when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['category_series'] = $category_series;

        return $this;
    }

    /**
     * Gets value_series
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameValueSeries[]|null
     */
    public function getValueSeries()
    {
        return $this->container['value_series'];
    }

    /**
     * Sets value_series
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameValueSeries[]|null $value_series Value series of pie chart.
     *
     * @return self
     */
    public function setValueSeries($value_series)
    {

        if (!is_null($value_series) && (count($value_series) > 0)) {
            throw new \InvalidArgumentException('invalid value for $value_series when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['value_series'] = $value_series;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Chart title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 63)) {
            throw new \InvalidArgumentException('invalid length for $title when calling InlineObject136., must be smaller than or equal to 63.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_font_size
     *
     * @return int|null
     */
    public function getTitleFontSize()
    {
        return $this->container['title_font_size'];
    }

    /**
     * Sets title_font_size
     *
     * @param int|null $title_font_size Font size of chart title.
     *
     * @return self
     */
    public function setTitleFontSize($title_font_size)
    {

        if (!is_null($title_font_size) && ($title_font_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $title_font_size when calling InlineObject136., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($title_font_size) && ($title_font_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $title_font_size when calling InlineObject136., must be bigger than or equal to 0.');
        }

        $this->container['title_font_size'] = $title_font_size;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string|null
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string|null $background Chart background.
     *
     * @return self
     */
    public function setBackground($background)
    {
        if (!is_null($background) && (mb_strlen($background) > 11)) {
            throw new \InvalidArgumentException('invalid length for $background when calling InlineObject136., must be smaller than or equal to 11.');
        }

        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets color_palette
     *
     * @return string|null
     */
    public function getColorPalette()
    {
        return $this->container['color_palette'];
    }

    /**
     * Sets color_palette
     *
     * @param string|null $color_palette Color palette (system will pick color automatically by default).
     *
     * @return self
     */
    public function setColorPalette($color_palette)
    {
        if (!is_null($color_palette) && (mb_strlen($color_palette) > 11)) {
            throw new \InvalidArgumentException('invalid length for $color_palette when calling InlineObject136., must be smaller than or equal to 11.');
        }

        $this->container['color_palette'] = $color_palette;

        return $this;
    }

    /**
     * Gets legend
     *
     * @return string|null
     */
    public function getLegend()
    {
        return $this->container['legend'];
    }

    /**
     * Sets legend
     *
     * @param string|null $legend Enable/Disable Legend area.    enable:Enable legend area.    disable:Disable legend area.
     *
     * @return self
     */
    public function setLegend($legend)
    {
        $allowedValues = $this->getLegendAllowableValues();
        if (!is_null($legend) && !in_array($legend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'legend', must be one of '%s'",
                    $legend,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['legend'] = $legend;

        return $this;
    }

    /**
     * Gets legend_font_size
     *
     * @return int|null
     */
    public function getLegendFontSize()
    {
        return $this->container['legend_font_size'];
    }

    /**
     * Sets legend_font_size
     *
     * @param int|null $legend_font_size Font size of legend area.
     *
     * @return self
     */
    public function setLegendFontSize($legend_font_size)
    {

        if (!is_null($legend_font_size) && ($legend_font_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $legend_font_size when calling InlineObject136., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($legend_font_size) && ($legend_font_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $legend_font_size when calling InlineObject136., must be bigger than or equal to 0.');
        }

        $this->container['legend_font_size'] = $legend_font_size;

        return $this;
    }

    /**
     * Gets column
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportChartNameColumn[]|null
     */
    public function getColumn()
    {
        return $this->container['column'];
    }

    /**
     * Sets column
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportChartNameColumn[]|null $column Table column definition.
     *
     * @return self
     */
    public function setColumn($column)
    {

        if (!is_null($column) && (count($column) > 0)) {
            throw new \InvalidArgumentException('invalid value for $column when calling InlineObject136., number of items must be less than or equal to 0.');
        }
        $this->container['column'] = $column;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


