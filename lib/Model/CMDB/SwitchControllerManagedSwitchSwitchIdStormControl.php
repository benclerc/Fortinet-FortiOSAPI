<?php
/**
 * SwitchControllerManagedSwitchSwitchIdStormControl
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchIdStormControl Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchIdStormControl implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__storm_control';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'local_override' => 'string',
        'rate' => 'int',
        'unknown_unicast' => 'string',
        'unknown_multicast' => 'string',
        'broadcast' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'local_override' => null,
        'rate' => null,
        'unknown_unicast' => null,
        'unknown_multicast' => null,
        'broadcast' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'local_override' => 'local-override',
        'rate' => 'rate',
        'unknown_unicast' => 'unknown-unicast',
        'unknown_multicast' => 'unknown-multicast',
        'broadcast' => 'broadcast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'local_override' => 'setLocalOverride',
        'rate' => 'setRate',
        'unknown_unicast' => 'setUnknownUnicast',
        'unknown_multicast' => 'setUnknownMulticast',
        'broadcast' => 'setBroadcast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'local_override' => 'getLocalOverride',
        'rate' => 'getRate',
        'unknown_unicast' => 'getUnknownUnicast',
        'unknown_multicast' => 'getUnknownMulticast',
        'broadcast' => 'getBroadcast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOCAL_OVERRIDE_ENABLE = 'enable';
    const LOCAL_OVERRIDE_DISABLE = 'disable';
    const UNKNOWN_UNICAST_ENABLE = 'enable';
    const UNKNOWN_UNICAST_DISABLE = 'disable';
    const UNKNOWN_MULTICAST_ENABLE = 'enable';
    const UNKNOWN_MULTICAST_DISABLE = 'disable';
    const BROADCAST_ENABLE = 'enable';
    const BROADCAST_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalOverrideAllowableValues()
    {
        return [
            self::LOCAL_OVERRIDE_ENABLE,
            self::LOCAL_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownUnicastAllowableValues()
    {
        return [
            self::UNKNOWN_UNICAST_ENABLE,
            self::UNKNOWN_UNICAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownMulticastAllowableValues()
    {
        return [
            self::UNKNOWN_MULTICAST_ENABLE,
            self::UNKNOWN_MULTICAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBroadcastAllowableValues()
    {
        return [
            self::BROADCAST_ENABLE,
            self::BROADCAST_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_override'] = $data['local_override'] ?? null;
        $this->container['rate'] = $data['rate'] ?? null;
        $this->container['unknown_unicast'] = $data['unknown_unicast'] ?? null;
        $this->container['unknown_multicast'] = $data['unknown_multicast'] ?? null;
        $this->container['broadcast'] = $data['broadcast'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($this->container['local_override']) && !in_array($this->container['local_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_override', must be one of '%s'",
                $this->container['local_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rate']) && ($this->container['rate'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'rate', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['rate']) && ($this->container['rate'] < 1)) {
            $invalidProperties[] = "invalid value for 'rate', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getUnknownUnicastAllowableValues();
        if (!is_null($this->container['unknown_unicast']) && !in_array($this->container['unknown_unicast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_unicast', must be one of '%s'",
                $this->container['unknown_unicast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnknownMulticastAllowableValues();
        if (!is_null($this->container['unknown_multicast']) && !in_array($this->container['unknown_multicast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_multicast', must be one of '%s'",
                $this->container['unknown_multicast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBroadcastAllowableValues();
        if (!is_null($this->container['broadcast']) && !in_array($this->container['broadcast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'broadcast', must be one of '%s'",
                $this->container['broadcast'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets local_override
     *
     * @return string|null
     */
    public function getLocalOverride()
    {
        return $this->container['local_override'];
    }

    /**
     * Sets local_override
     *
     * @param string|null $local_override Enable to override global FortiSwitch storm control settings for this FortiSwitch.    enable:Override global storm control settings.    disable:Use global storm control settings.
     *
     * @return self
     */
    public function setLocalOverride($local_override)
    {
        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($local_override) && !in_array($local_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_override', must be one of '%s'",
                    $local_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_override'] = $local_override;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return int|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param int|null $rate Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
     *
     * @return self
     */
    public function setRate($rate)
    {

        if (!is_null($rate) && ($rate > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $rate when calling SwitchControllerManagedSwitchSwitchIdStormControl., must be smaller than or equal to 10000000.');
        }
        if (!is_null($rate) && ($rate < 1)) {
            throw new \InvalidArgumentException('invalid value for $rate when calling SwitchControllerManagedSwitchSwitchIdStormControl., must be bigger than or equal to 1.');
        }

        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets unknown_unicast
     *
     * @return string|null
     */
    public function getUnknownUnicast()
    {
        return $this->container['unknown_unicast'];
    }

    /**
     * Sets unknown_unicast
     *
     * @param string|null $unknown_unicast Enable/disable storm control to drop unknown unicast traffic.    enable:Drop unknown unicast traffic.    disable:Allow unknown unicast traffic.
     *
     * @return self
     */
    public function setUnknownUnicast($unknown_unicast)
    {
        $allowedValues = $this->getUnknownUnicastAllowableValues();
        if (!is_null($unknown_unicast) && !in_array($unknown_unicast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_unicast', must be one of '%s'",
                    $unknown_unicast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_unicast'] = $unknown_unicast;

        return $this;
    }

    /**
     * Gets unknown_multicast
     *
     * @return string|null
     */
    public function getUnknownMulticast()
    {
        return $this->container['unknown_multicast'];
    }

    /**
     * Sets unknown_multicast
     *
     * @param string|null $unknown_multicast Enable/disable storm control to drop unknown multicast traffic.    enable:Drop unknown multicast traffic.    disable:Allow unknown multicast traffic.
     *
     * @return self
     */
    public function setUnknownMulticast($unknown_multicast)
    {
        $allowedValues = $this->getUnknownMulticastAllowableValues();
        if (!is_null($unknown_multicast) && !in_array($unknown_multicast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_multicast', must be one of '%s'",
                    $unknown_multicast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_multicast'] = $unknown_multicast;

        return $this;
    }

    /**
     * Gets broadcast
     *
     * @return string|null
     */
    public function getBroadcast()
    {
        return $this->container['broadcast'];
    }

    /**
     * Sets broadcast
     *
     * @param string|null $broadcast Enable/disable storm control to drop broadcast traffic.    enable:Drop broadcast traffic.    disable:Allow broadcast traffic.
     *
     * @return self
     */
    public function setBroadcast($broadcast)
    {
        $allowedValues = $this->getBroadcastAllowableValues();
        if (!is_null($broadcast) && !in_array($broadcast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'broadcast', must be one of '%s'",
                    $broadcast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['broadcast'] = $broadcast;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


