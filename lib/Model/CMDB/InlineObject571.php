<?php
/**
 * InlineObject571
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject571 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject571 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_571';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'access_network_type' => 'string',
        'access_network_internet' => 'string',
        'access_network_asra' => 'string',
        'access_network_esr' => 'string',
        'access_network_uesa' => 'string',
        'venue_group' => 'string',
        'venue_type' => 'string',
        'hessid' => 'string',
        'proxy_arp' => 'string',
        'l2tif' => 'string',
        'pame_bi' => 'string',
        'anqp_domain_id' => 'int',
        'domain_name' => 'string',
        'osu_ssid' => 'string',
        'gas_comeback_delay' => 'int',
        'gas_fragmentation_limit' => 'int',
        'dgaf' => 'string',
        'deauth_request_timeout' => 'int',
        'wnm_sleep_mode' => 'string',
        'bss_transition' => 'string',
        'venue_name' => 'string',
        'roaming_consortium' => 'string',
        'nai_realm' => 'string',
        'oper_friendly_name' => 'string',
        'osu_provider' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20HsProfileNameOsuProvider[]',
        'wan_metrics' => 'string',
        'network_auth' => 'string',
        '_3gpp_plmn' => 'string',
        'conn_cap' => 'string',
        'qos_map' => 'string',
        'ip_addr_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'access_network_type' => null,
        'access_network_internet' => null,
        'access_network_asra' => null,
        'access_network_esr' => null,
        'access_network_uesa' => null,
        'venue_group' => null,
        'venue_type' => null,
        'hessid' => 'mac-address',
        'proxy_arp' => null,
        'l2tif' => null,
        'pame_bi' => null,
        'anqp_domain_id' => null,
        'domain_name' => null,
        'osu_ssid' => null,
        'gas_comeback_delay' => null,
        'gas_fragmentation_limit' => null,
        'dgaf' => null,
        'deauth_request_timeout' => null,
        'wnm_sleep_mode' => null,
        'bss_transition' => null,
        'venue_name' => null,
        'roaming_consortium' => null,
        'nai_realm' => null,
        'oper_friendly_name' => null,
        'osu_provider' => null,
        'wan_metrics' => null,
        'network_auth' => null,
        '_3gpp_plmn' => null,
        'conn_cap' => null,
        'qos_map' => null,
        'ip_addr_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'access_network_type' => 'access-network-type',
        'access_network_internet' => 'access-network-internet',
        'access_network_asra' => 'access-network-asra',
        'access_network_esr' => 'access-network-esr',
        'access_network_uesa' => 'access-network-uesa',
        'venue_group' => 'venue-group',
        'venue_type' => 'venue-type',
        'hessid' => 'hessid',
        'proxy_arp' => 'proxy-arp',
        'l2tif' => 'l2tif',
        'pame_bi' => 'pame-bi',
        'anqp_domain_id' => 'anqp-domain-id',
        'domain_name' => 'domain-name',
        'osu_ssid' => 'osu-ssid',
        'gas_comeback_delay' => 'gas-comeback-delay',
        'gas_fragmentation_limit' => 'gas-fragmentation-limit',
        'dgaf' => 'dgaf',
        'deauth_request_timeout' => 'deauth-request-timeout',
        'wnm_sleep_mode' => 'wnm-sleep-mode',
        'bss_transition' => 'bss-transition',
        'venue_name' => 'venue-name',
        'roaming_consortium' => 'roaming-consortium',
        'nai_realm' => 'nai-realm',
        'oper_friendly_name' => 'oper-friendly-name',
        'osu_provider' => 'osu-provider',
        'wan_metrics' => 'wan-metrics',
        'network_auth' => 'network-auth',
        '_3gpp_plmn' => '3gpp-plmn',
        'conn_cap' => 'conn-cap',
        'qos_map' => 'qos-map',
        'ip_addr_type' => 'ip-addr-type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'access_network_type' => 'setAccessNetworkType',
        'access_network_internet' => 'setAccessNetworkInternet',
        'access_network_asra' => 'setAccessNetworkAsra',
        'access_network_esr' => 'setAccessNetworkEsr',
        'access_network_uesa' => 'setAccessNetworkUesa',
        'venue_group' => 'setVenueGroup',
        'venue_type' => 'setVenueType',
        'hessid' => 'setHessid',
        'proxy_arp' => 'setProxyArp',
        'l2tif' => 'setL2tif',
        'pame_bi' => 'setPameBi',
        'anqp_domain_id' => 'setAnqpDomainId',
        'domain_name' => 'setDomainName',
        'osu_ssid' => 'setOsuSsid',
        'gas_comeback_delay' => 'setGasComebackDelay',
        'gas_fragmentation_limit' => 'setGasFragmentationLimit',
        'dgaf' => 'setDgaf',
        'deauth_request_timeout' => 'setDeauthRequestTimeout',
        'wnm_sleep_mode' => 'setWnmSleepMode',
        'bss_transition' => 'setBssTransition',
        'venue_name' => 'setVenueName',
        'roaming_consortium' => 'setRoamingConsortium',
        'nai_realm' => 'setNaiRealm',
        'oper_friendly_name' => 'setOperFriendlyName',
        'osu_provider' => 'setOsuProvider',
        'wan_metrics' => 'setWanMetrics',
        'network_auth' => 'setNetworkAuth',
        '_3gpp_plmn' => 'set3gppPlmn',
        'conn_cap' => 'setConnCap',
        'qos_map' => 'setQosMap',
        'ip_addr_type' => 'setIpAddrType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'access_network_type' => 'getAccessNetworkType',
        'access_network_internet' => 'getAccessNetworkInternet',
        'access_network_asra' => 'getAccessNetworkAsra',
        'access_network_esr' => 'getAccessNetworkEsr',
        'access_network_uesa' => 'getAccessNetworkUesa',
        'venue_group' => 'getVenueGroup',
        'venue_type' => 'getVenueType',
        'hessid' => 'getHessid',
        'proxy_arp' => 'getProxyArp',
        'l2tif' => 'getL2tif',
        'pame_bi' => 'getPameBi',
        'anqp_domain_id' => 'getAnqpDomainId',
        'domain_name' => 'getDomainName',
        'osu_ssid' => 'getOsuSsid',
        'gas_comeback_delay' => 'getGasComebackDelay',
        'gas_fragmentation_limit' => 'getGasFragmentationLimit',
        'dgaf' => 'getDgaf',
        'deauth_request_timeout' => 'getDeauthRequestTimeout',
        'wnm_sleep_mode' => 'getWnmSleepMode',
        'bss_transition' => 'getBssTransition',
        'venue_name' => 'getVenueName',
        'roaming_consortium' => 'getRoamingConsortium',
        'nai_realm' => 'getNaiRealm',
        'oper_friendly_name' => 'getOperFriendlyName',
        'osu_provider' => 'getOsuProvider',
        'wan_metrics' => 'getWanMetrics',
        'network_auth' => 'getNetworkAuth',
        '_3gpp_plmn' => 'get3gppPlmn',
        'conn_cap' => 'getConnCap',
        'qos_map' => 'getQosMap',
        'ip_addr_type' => 'getIpAddrType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACCESS_NETWORK_TYPE_PRIVATE_NETWORK = 'private-network';
    const ACCESS_NETWORK_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS = 'private-network-with-guest-access';
    const ACCESS_NETWORK_TYPE_CHARGEABLE_PUBLIC_NETWORK = 'chargeable-public-network';
    const ACCESS_NETWORK_TYPE_FREE_PUBLIC_NETWORK = 'free-public-network';
    const ACCESS_NETWORK_TYPE_PERSONAL_DEVICE_NETWORK = 'personal-device-network';
    const ACCESS_NETWORK_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK = 'emergency-services-only-network';
    const ACCESS_NETWORK_TYPE_TEST_OR_EXPERIMENTAL = 'test-or-experimental';
    const ACCESS_NETWORK_TYPE_WILDCARD = 'wildcard';
    const ACCESS_NETWORK_INTERNET_ENABLE = 'enable';
    const ACCESS_NETWORK_INTERNET_DISABLE = 'disable';
    const ACCESS_NETWORK_ASRA_ENABLE = 'enable';
    const ACCESS_NETWORK_ASRA_DISABLE = 'disable';
    const ACCESS_NETWORK_ESR_ENABLE = 'enable';
    const ACCESS_NETWORK_ESR_DISABLE = 'disable';
    const ACCESS_NETWORK_UESA_ENABLE = 'enable';
    const ACCESS_NETWORK_UESA_DISABLE = 'disable';
    const VENUE_GROUP_UNSPECIFIED = 'unspecified';
    const VENUE_GROUP_ASSEMBLY = 'assembly';
    const VENUE_GROUP_BUSINESS = 'business';
    const VENUE_GROUP_EDUCATIONAL = 'educational';
    const VENUE_GROUP_FACTORY = 'factory';
    const VENUE_GROUP_INSTITUTIONAL = 'institutional';
    const VENUE_GROUP_MERCANTILE = 'mercantile';
    const VENUE_GROUP_RESIDENTIAL = 'residential';
    const VENUE_GROUP_STORAGE = 'storage';
    const VENUE_GROUP_UTILITY = 'utility';
    const VENUE_GROUP_VEHICULAR = 'vehicular';
    const VENUE_GROUP_OUTDOOR = 'outdoor';
    const VENUE_TYPE_UNSPECIFIED = 'unspecified';
    const VENUE_TYPE_ARENA = 'arena';
    const VENUE_TYPE_STADIUM = 'stadium';
    const VENUE_TYPE_PASSENGER_TERMINAL = 'passenger-terminal';
    const VENUE_TYPE_AMPHITHEATER = 'amphitheater';
    const VENUE_TYPE_AMUSEMENT_PARK = 'amusement-park';
    const VENUE_TYPE_PLACE_OF_WORSHIP = 'place-of-worship';
    const VENUE_TYPE_CONVENTION_CENTER = 'convention-center';
    const VENUE_TYPE_LIBRARY = 'library';
    const VENUE_TYPE_MUSEUM = 'museum';
    const VENUE_TYPE_RESTAURANT = 'restaurant';
    const VENUE_TYPE_THEATER = 'theater';
    const VENUE_TYPE_BAR = 'bar';
    const VENUE_TYPE_COFFEE_SHOP = 'coffee-shop';
    const VENUE_TYPE_ZOO_OR_AQUARIUM = 'zoo-or-aquarium';
    const VENUE_TYPE_EMERGENCY_CENTER = 'emergency-center';
    const VENUE_TYPE_DOCTOR_OFFICE = 'doctor-office';
    const VENUE_TYPE_BANK = 'bank';
    const VENUE_TYPE_FIRE_STATION = 'fire-station';
    const VENUE_TYPE_POLICE_STATION = 'police-station';
    const VENUE_TYPE_POST_OFFICE = 'post-office';
    const VENUE_TYPE_PROFESSIONAL_OFFICE = 'professional-office';
    const VENUE_TYPE_RESEARCH_FACILITY = 'research-facility';
    const VENUE_TYPE_ATTORNEY_OFFICE = 'attorney-office';
    const VENUE_TYPE_PRIMARY_SCHOOL = 'primary-school';
    const VENUE_TYPE_SECONDARY_SCHOOL = 'secondary-school';
    const VENUE_TYPE_UNIVERSITY_OR_COLLEGE = 'university-or-college';
    const VENUE_TYPE_FACTORY = 'factory';
    const VENUE_TYPE_HOSPITAL = 'hospital';
    const VENUE_TYPE_LONG_TERM_CARE_FACILITY = 'long-term-care-facility';
    const VENUE_TYPE_REHAB_CENTER = 'rehab-center';
    const VENUE_TYPE_GROUP_HOME = 'group-home';
    const VENUE_TYPE_PRISON_OR_JAIL = 'prison-or-jail';
    const VENUE_TYPE_RETAIL_STORE = 'retail-store';
    const VENUE_TYPE_GROCERY_MARKET = 'grocery-market';
    const VENUE_TYPE_AUTO_SERVICE_STATION = 'auto-service-station';
    const VENUE_TYPE_SHOPPING_MALL = 'shopping-mall';
    const VENUE_TYPE_GAS_STATION = 'gas-station';
    const VENUE_TYPE__PRIVATE = 'private';
    const VENUE_TYPE_HOTEL_OR_MOTEL = 'hotel-or-motel';
    const VENUE_TYPE_DORMITORY = 'dormitory';
    const VENUE_TYPE_BOARDING_HOUSE = 'boarding-house';
    const VENUE_TYPE_AUTOMOBILE = 'automobile';
    const VENUE_TYPE_AIRPLANE = 'airplane';
    const VENUE_TYPE_BUS = 'bus';
    const VENUE_TYPE_FERRY = 'ferry';
    const VENUE_TYPE_SHIP_OR_BOAT = 'ship-or-boat';
    const VENUE_TYPE_TRAIN = 'train';
    const VENUE_TYPE_MOTOR_BIKE = 'motor-bike';
    const VENUE_TYPE_MUNI_MESH_NETWORK = 'muni-mesh-network';
    const VENUE_TYPE_CITY_PARK = 'city-park';
    const VENUE_TYPE_REST_AREA = 'rest-area';
    const VENUE_TYPE_TRAFFIC_CONTROL = 'traffic-control';
    const VENUE_TYPE_BUS_STOP = 'bus-stop';
    const VENUE_TYPE_KIOSK = 'kiosk';
    const PROXY_ARP_ENABLE = 'enable';
    const PROXY_ARP_DISABLE = 'disable';
    const L2TIF_ENABLE = 'enable';
    const L2TIF_DISABLE = 'disable';
    const PAME_BI_DISABLE = 'disable';
    const PAME_BI_ENABLE = 'enable';
    const DGAF_ENABLE = 'enable';
    const DGAF_DISABLE = 'disable';
    const WNM_SLEEP_MODE_ENABLE = 'enable';
    const WNM_SLEEP_MODE_DISABLE = 'disable';
    const BSS_TRANSITION_ENABLE = 'enable';
    const BSS_TRANSITION_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessNetworkTypeAllowableValues()
    {
        return [
            self::ACCESS_NETWORK_TYPE_PRIVATE_NETWORK,
            self::ACCESS_NETWORK_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS,
            self::ACCESS_NETWORK_TYPE_CHARGEABLE_PUBLIC_NETWORK,
            self::ACCESS_NETWORK_TYPE_FREE_PUBLIC_NETWORK,
            self::ACCESS_NETWORK_TYPE_PERSONAL_DEVICE_NETWORK,
            self::ACCESS_NETWORK_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK,
            self::ACCESS_NETWORK_TYPE_TEST_OR_EXPERIMENTAL,
            self::ACCESS_NETWORK_TYPE_WILDCARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessNetworkInternetAllowableValues()
    {
        return [
            self::ACCESS_NETWORK_INTERNET_ENABLE,
            self::ACCESS_NETWORK_INTERNET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessNetworkAsraAllowableValues()
    {
        return [
            self::ACCESS_NETWORK_ASRA_ENABLE,
            self::ACCESS_NETWORK_ASRA_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessNetworkEsrAllowableValues()
    {
        return [
            self::ACCESS_NETWORK_ESR_ENABLE,
            self::ACCESS_NETWORK_ESR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessNetworkUesaAllowableValues()
    {
        return [
            self::ACCESS_NETWORK_UESA_ENABLE,
            self::ACCESS_NETWORK_UESA_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVenueGroupAllowableValues()
    {
        return [
            self::VENUE_GROUP_UNSPECIFIED,
            self::VENUE_GROUP_ASSEMBLY,
            self::VENUE_GROUP_BUSINESS,
            self::VENUE_GROUP_EDUCATIONAL,
            self::VENUE_GROUP_FACTORY,
            self::VENUE_GROUP_INSTITUTIONAL,
            self::VENUE_GROUP_MERCANTILE,
            self::VENUE_GROUP_RESIDENTIAL,
            self::VENUE_GROUP_STORAGE,
            self::VENUE_GROUP_UTILITY,
            self::VENUE_GROUP_VEHICULAR,
            self::VENUE_GROUP_OUTDOOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVenueTypeAllowableValues()
    {
        return [
            self::VENUE_TYPE_UNSPECIFIED,
            self::VENUE_TYPE_ARENA,
            self::VENUE_TYPE_STADIUM,
            self::VENUE_TYPE_PASSENGER_TERMINAL,
            self::VENUE_TYPE_AMPHITHEATER,
            self::VENUE_TYPE_AMUSEMENT_PARK,
            self::VENUE_TYPE_PLACE_OF_WORSHIP,
            self::VENUE_TYPE_CONVENTION_CENTER,
            self::VENUE_TYPE_LIBRARY,
            self::VENUE_TYPE_MUSEUM,
            self::VENUE_TYPE_RESTAURANT,
            self::VENUE_TYPE_THEATER,
            self::VENUE_TYPE_BAR,
            self::VENUE_TYPE_COFFEE_SHOP,
            self::VENUE_TYPE_ZOO_OR_AQUARIUM,
            self::VENUE_TYPE_EMERGENCY_CENTER,
            self::VENUE_TYPE_DOCTOR_OFFICE,
            self::VENUE_TYPE_BANK,
            self::VENUE_TYPE_FIRE_STATION,
            self::VENUE_TYPE_POLICE_STATION,
            self::VENUE_TYPE_POST_OFFICE,
            self::VENUE_TYPE_PROFESSIONAL_OFFICE,
            self::VENUE_TYPE_RESEARCH_FACILITY,
            self::VENUE_TYPE_ATTORNEY_OFFICE,
            self::VENUE_TYPE_PRIMARY_SCHOOL,
            self::VENUE_TYPE_SECONDARY_SCHOOL,
            self::VENUE_TYPE_UNIVERSITY_OR_COLLEGE,
            self::VENUE_TYPE_FACTORY,
            self::VENUE_TYPE_HOSPITAL,
            self::VENUE_TYPE_LONG_TERM_CARE_FACILITY,
            self::VENUE_TYPE_REHAB_CENTER,
            self::VENUE_TYPE_GROUP_HOME,
            self::VENUE_TYPE_PRISON_OR_JAIL,
            self::VENUE_TYPE_RETAIL_STORE,
            self::VENUE_TYPE_GROCERY_MARKET,
            self::VENUE_TYPE_AUTO_SERVICE_STATION,
            self::VENUE_TYPE_SHOPPING_MALL,
            self::VENUE_TYPE_GAS_STATION,
            self::VENUE_TYPE__PRIVATE,
            self::VENUE_TYPE_HOTEL_OR_MOTEL,
            self::VENUE_TYPE_DORMITORY,
            self::VENUE_TYPE_BOARDING_HOUSE,
            self::VENUE_TYPE_AUTOMOBILE,
            self::VENUE_TYPE_AIRPLANE,
            self::VENUE_TYPE_BUS,
            self::VENUE_TYPE_FERRY,
            self::VENUE_TYPE_SHIP_OR_BOAT,
            self::VENUE_TYPE_TRAIN,
            self::VENUE_TYPE_MOTOR_BIKE,
            self::VENUE_TYPE_MUNI_MESH_NETWORK,
            self::VENUE_TYPE_CITY_PARK,
            self::VENUE_TYPE_REST_AREA,
            self::VENUE_TYPE_TRAFFIC_CONTROL,
            self::VENUE_TYPE_BUS_STOP,
            self::VENUE_TYPE_KIOSK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyArpAllowableValues()
    {
        return [
            self::PROXY_ARP_ENABLE,
            self::PROXY_ARP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getL2tifAllowableValues()
    {
        return [
            self::L2TIF_ENABLE,
            self::L2TIF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPameBiAllowableValues()
    {
        return [
            self::PAME_BI_DISABLE,
            self::PAME_BI_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDgafAllowableValues()
    {
        return [
            self::DGAF_ENABLE,
            self::DGAF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWnmSleepModeAllowableValues()
    {
        return [
            self::WNM_SLEEP_MODE_ENABLE,
            self::WNM_SLEEP_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBssTransitionAllowableValues()
    {
        return [
            self::BSS_TRANSITION_ENABLE,
            self::BSS_TRANSITION_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['access_network_type'] = $data['access_network_type'] ?? null;
        $this->container['access_network_internet'] = $data['access_network_internet'] ?? null;
        $this->container['access_network_asra'] = $data['access_network_asra'] ?? null;
        $this->container['access_network_esr'] = $data['access_network_esr'] ?? null;
        $this->container['access_network_uesa'] = $data['access_network_uesa'] ?? null;
        $this->container['venue_group'] = $data['venue_group'] ?? null;
        $this->container['venue_type'] = $data['venue_type'] ?? null;
        $this->container['hessid'] = $data['hessid'] ?? null;
        $this->container['proxy_arp'] = $data['proxy_arp'] ?? null;
        $this->container['l2tif'] = $data['l2tif'] ?? null;
        $this->container['pame_bi'] = $data['pame_bi'] ?? null;
        $this->container['anqp_domain_id'] = $data['anqp_domain_id'] ?? null;
        $this->container['domain_name'] = $data['domain_name'] ?? null;
        $this->container['osu_ssid'] = $data['osu_ssid'] ?? null;
        $this->container['gas_comeback_delay'] = $data['gas_comeback_delay'] ?? null;
        $this->container['gas_fragmentation_limit'] = $data['gas_fragmentation_limit'] ?? null;
        $this->container['dgaf'] = $data['dgaf'] ?? null;
        $this->container['deauth_request_timeout'] = $data['deauth_request_timeout'] ?? null;
        $this->container['wnm_sleep_mode'] = $data['wnm_sleep_mode'] ?? null;
        $this->container['bss_transition'] = $data['bss_transition'] ?? null;
        $this->container['venue_name'] = $data['venue_name'] ?? null;
        $this->container['roaming_consortium'] = $data['roaming_consortium'] ?? null;
        $this->container['nai_realm'] = $data['nai_realm'] ?? null;
        $this->container['oper_friendly_name'] = $data['oper_friendly_name'] ?? null;
        $this->container['osu_provider'] = $data['osu_provider'] ?? null;
        $this->container['wan_metrics'] = $data['wan_metrics'] ?? null;
        $this->container['network_auth'] = $data['network_auth'] ?? null;
        $this->container['_3gpp_plmn'] = $data['_3gpp_plmn'] ?? null;
        $this->container['conn_cap'] = $data['conn_cap'] ?? null;
        $this->container['qos_map'] = $data['qos_map'] ?? null;
        $this->container['ip_addr_type'] = $data['ip_addr_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAccessNetworkTypeAllowableValues();
        if (!is_null($this->container['access_network_type']) && !in_array($this->container['access_network_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_network_type', must be one of '%s'",
                $this->container['access_network_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessNetworkInternetAllowableValues();
        if (!is_null($this->container['access_network_internet']) && !in_array($this->container['access_network_internet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_network_internet', must be one of '%s'",
                $this->container['access_network_internet'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessNetworkAsraAllowableValues();
        if (!is_null($this->container['access_network_asra']) && !in_array($this->container['access_network_asra'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_network_asra', must be one of '%s'",
                $this->container['access_network_asra'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessNetworkEsrAllowableValues();
        if (!is_null($this->container['access_network_esr']) && !in_array($this->container['access_network_esr'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_network_esr', must be one of '%s'",
                $this->container['access_network_esr'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessNetworkUesaAllowableValues();
        if (!is_null($this->container['access_network_uesa']) && !in_array($this->container['access_network_uesa'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_network_uesa', must be one of '%s'",
                $this->container['access_network_uesa'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVenueGroupAllowableValues();
        if (!is_null($this->container['venue_group']) && !in_array($this->container['venue_group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'venue_group', must be one of '%s'",
                $this->container['venue_group'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVenueTypeAllowableValues();
        if (!is_null($this->container['venue_type']) && !in_array($this->container['venue_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'venue_type', must be one of '%s'",
                $this->container['venue_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProxyArpAllowableValues();
        if (!is_null($this->container['proxy_arp']) && !in_array($this->container['proxy_arp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_arp', must be one of '%s'",
                $this->container['proxy_arp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getL2tifAllowableValues();
        if (!is_null($this->container['l2tif']) && !in_array($this->container['l2tif'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'l2tif', must be one of '%s'",
                $this->container['l2tif'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPameBiAllowableValues();
        if (!is_null($this->container['pame_bi']) && !in_array($this->container['pame_bi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pame_bi', must be one of '%s'",
                $this->container['pame_bi'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['anqp_domain_id']) && ($this->container['anqp_domain_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'anqp_domain_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['anqp_domain_id']) && ($this->container['anqp_domain_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'anqp_domain_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['domain_name']) && (mb_strlen($this->container['domain_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'domain_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['osu_ssid']) && (mb_strlen($this->container['osu_ssid']) > 255)) {
            $invalidProperties[] = "invalid value for 'osu_ssid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gas_comeback_delay']) && ($this->container['gas_comeback_delay'] > 4000)) {
            $invalidProperties[] = "invalid value for 'gas_comeback_delay', must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['gas_comeback_delay']) && ($this->container['gas_comeback_delay'] < 100)) {
            $invalidProperties[] = "invalid value for 'gas_comeback_delay', must be bigger than or equal to 100.";
        }

        if (!is_null($this->container['gas_fragmentation_limit']) && ($this->container['gas_fragmentation_limit'] > 4096)) {
            $invalidProperties[] = "invalid value for 'gas_fragmentation_limit', must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['gas_fragmentation_limit']) && ($this->container['gas_fragmentation_limit'] < 512)) {
            $invalidProperties[] = "invalid value for 'gas_fragmentation_limit', must be bigger than or equal to 512.";
        }

        $allowedValues = $this->getDgafAllowableValues();
        if (!is_null($this->container['dgaf']) && !in_array($this->container['dgaf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dgaf', must be one of '%s'",
                $this->container['dgaf'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['deauth_request_timeout']) && ($this->container['deauth_request_timeout'] > 120)) {
            $invalidProperties[] = "invalid value for 'deauth_request_timeout', must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['deauth_request_timeout']) && ($this->container['deauth_request_timeout'] < 30)) {
            $invalidProperties[] = "invalid value for 'deauth_request_timeout', must be bigger than or equal to 30.";
        }

        $allowedValues = $this->getWnmSleepModeAllowableValues();
        if (!is_null($this->container['wnm_sleep_mode']) && !in_array($this->container['wnm_sleep_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wnm_sleep_mode', must be one of '%s'",
                $this->container['wnm_sleep_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBssTransitionAllowableValues();
        if (!is_null($this->container['bss_transition']) && !in_array($this->container['bss_transition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bss_transition', must be one of '%s'",
                $this->container['bss_transition'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['venue_name']) && (mb_strlen($this->container['venue_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'venue_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['roaming_consortium']) && (mb_strlen($this->container['roaming_consortium']) > 35)) {
            $invalidProperties[] = "invalid value for 'roaming_consortium', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['nai_realm']) && (mb_strlen($this->container['nai_realm']) > 35)) {
            $invalidProperties[] = "invalid value for 'nai_realm', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['oper_friendly_name']) && (mb_strlen($this->container['oper_friendly_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'oper_friendly_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['osu_provider']) && (count($this->container['osu_provider']) > 0)) {
            $invalidProperties[] = "invalid value for 'osu_provider', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['wan_metrics']) && (mb_strlen($this->container['wan_metrics']) > 35)) {
            $invalidProperties[] = "invalid value for 'wan_metrics', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['network_auth']) && (mb_strlen($this->container['network_auth']) > 35)) {
            $invalidProperties[] = "invalid value for 'network_auth', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['_3gpp_plmn']) && (mb_strlen($this->container['_3gpp_plmn']) > 35)) {
            $invalidProperties[] = "invalid value for '_3gpp_plmn', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['conn_cap']) && (mb_strlen($this->container['conn_cap']) > 35)) {
            $invalidProperties[] = "invalid value for 'conn_cap', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['qos_map']) && (mb_strlen($this->container['qos_map']) > 35)) {
            $invalidProperties[] = "invalid value for 'qos_map', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ip_addr_type']) && (mb_strlen($this->container['ip_addr_type']) > 35)) {
            $invalidProperties[] = "invalid value for 'ip_addr_type', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Hotspot profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets access_network_type
     *
     * @return string|null
     */
    public function getAccessNetworkType()
    {
        return $this->container['access_network_type'];
    }

    /**
     * Sets access_network_type
     *
     * @param string|null $access_network_type Access network type.    private-network:Private network.    private-network-with-guest-access:Private network with guest access.    chargeable-public-network:Chargeable public network.    free-public-network:Free public network.    personal-device-network:Personal devices network.    emergency-services-only-network:Emergency services only network.    test-or-experimental:Test or experimental.    wildcard:Wildcard.
     *
     * @return self
     */
    public function setAccessNetworkType($access_network_type)
    {
        $allowedValues = $this->getAccessNetworkTypeAllowableValues();
        if (!is_null($access_network_type) && !in_array($access_network_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_network_type', must be one of '%s'",
                    $access_network_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_network_type'] = $access_network_type;

        return $this;
    }

    /**
     * Gets access_network_internet
     *
     * @return string|null
     */
    public function getAccessNetworkInternet()
    {
        return $this->container['access_network_internet'];
    }

    /**
     * Sets access_network_internet
     *
     * @param string|null $access_network_internet Enable/disable connectivity to the Internet.    enable:Enable connectivity to the Internet.    disable:Disable connectivity to the Internet.
     *
     * @return self
     */
    public function setAccessNetworkInternet($access_network_internet)
    {
        $allowedValues = $this->getAccessNetworkInternetAllowableValues();
        if (!is_null($access_network_internet) && !in_array($access_network_internet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_network_internet', must be one of '%s'",
                    $access_network_internet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_network_internet'] = $access_network_internet;

        return $this;
    }

    /**
     * Gets access_network_asra
     *
     * @return string|null
     */
    public function getAccessNetworkAsra()
    {
        return $this->container['access_network_asra'];
    }

    /**
     * Sets access_network_asra
     *
     * @param string|null $access_network_asra Enable/disable additional step required for access (ASRA).    enable:Enable additional step required for access (ASRA).    disable:Disable additional step required for access (ASRA).
     *
     * @return self
     */
    public function setAccessNetworkAsra($access_network_asra)
    {
        $allowedValues = $this->getAccessNetworkAsraAllowableValues();
        if (!is_null($access_network_asra) && !in_array($access_network_asra, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_network_asra', must be one of '%s'",
                    $access_network_asra,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_network_asra'] = $access_network_asra;

        return $this;
    }

    /**
     * Gets access_network_esr
     *
     * @return string|null
     */
    public function getAccessNetworkEsr()
    {
        return $this->container['access_network_esr'];
    }

    /**
     * Sets access_network_esr
     *
     * @param string|null $access_network_esr Enable/disable emergency services reachable (ESR).    enable:Enable emergency services reachable (ESR).    disable:Disable emergency services reachable (ESR).
     *
     * @return self
     */
    public function setAccessNetworkEsr($access_network_esr)
    {
        $allowedValues = $this->getAccessNetworkEsrAllowableValues();
        if (!is_null($access_network_esr) && !in_array($access_network_esr, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_network_esr', must be one of '%s'",
                    $access_network_esr,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_network_esr'] = $access_network_esr;

        return $this;
    }

    /**
     * Gets access_network_uesa
     *
     * @return string|null
     */
    public function getAccessNetworkUesa()
    {
        return $this->container['access_network_uesa'];
    }

    /**
     * Sets access_network_uesa
     *
     * @param string|null $access_network_uesa Enable/disable unauthenticated emergency service accessible (UESA).    enable:Enable unauthenticated emergency service accessible (UESA).    disable:Disable unauthenticated emergency service accessible (UESA).
     *
     * @return self
     */
    public function setAccessNetworkUesa($access_network_uesa)
    {
        $allowedValues = $this->getAccessNetworkUesaAllowableValues();
        if (!is_null($access_network_uesa) && !in_array($access_network_uesa, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_network_uesa', must be one of '%s'",
                    $access_network_uesa,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_network_uesa'] = $access_network_uesa;

        return $this;
    }

    /**
     * Gets venue_group
     *
     * @return string|null
     */
    public function getVenueGroup()
    {
        return $this->container['venue_group'];
    }

    /**
     * Sets venue_group
     *
     * @param string|null $venue_group Venue group.    unspecified:Unspecified.    assembly:Assembly.    business:Business.    educational:Educational.    factory:Factory and industrial.    institutional:Institutional.    mercantile:Mercantile.    residential:Residential.    storage:Storage.    utility:Utility and miscellaneous.    vehicular:Vehicular.    outdoor:Outdoor.
     *
     * @return self
     */
    public function setVenueGroup($venue_group)
    {
        $allowedValues = $this->getVenueGroupAllowableValues();
        if (!is_null($venue_group) && !in_array($venue_group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'venue_group', must be one of '%s'",
                    $venue_group,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['venue_group'] = $venue_group;

        return $this;
    }

    /**
     * Gets venue_type
     *
     * @return string|null
     */
    public function getVenueType()
    {
        return $this->container['venue_type'];
    }

    /**
     * Sets venue_type
     *
     * @param string|null $venue_type Venue type.    unspecified:Unspecified.    arena:Arena.    stadium:Stadium.    passenger-terminal:Passenger terminal.    amphitheater:Amphitheater.    amusement-park:Amusement park.    place-of-worship:Place of worship.    convention-center:Convention center.    library:Library.    museum:Museum.    restaurant:Restaurant.    theater:Theater.    bar:Bar.    coffee-shop:Coffee shop.    zoo-or-aquarium:Zoo or aquarium.    emergency-center:Emergency coordination center.    doctor-office:Doctor or dentist office.    bank:Bank.    fire-station:Fire station.    police-station:Police station.    post-office:Post office.    professional-office:Professional office.    research-facility:Research and development facility.    attorney-office:Attorney office.    primary-school:Primary school.    secondary-school:Secondary school.    university-or-college:University or college.    factory:Factory.    hospital:Hospital.    long-term-care-facility:Long term care facility.    rehab-center:Alcohol and drug rehabilitation center.    group-home:Group home.    prison-or-jail:Prison or jail.    retail-store:Retail store.    grocery-market:Grocery market.    auto-service-station:Auto service station.    shopping-mall:Shopping mall.    gas-station:Gas station.    private:Private residence.    hotel-or-motel:Hotel or motel.    dormitory:Dormitory.    boarding-house:Boarding house.    automobile:Automobile or truck.    airplane:Airplane.    bus:Bus.    ferry:Ferry.    ship-or-boat:Ship or boat.    train:Train.    motor-bike:Motor bike.    muni-mesh-network:Muni mesh network.    city-park:City park.    rest-area:Rest area.    traffic-control:Traffic control.    bus-stop:Bus stop.    kiosk:Kiosk.
     *
     * @return self
     */
    public function setVenueType($venue_type)
    {
        $allowedValues = $this->getVenueTypeAllowableValues();
        if (!is_null($venue_type) && !in_array($venue_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'venue_type', must be one of '%s'",
                    $venue_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['venue_type'] = $venue_type;

        return $this;
    }

    /**
     * Gets hessid
     *
     * @return string|null
     */
    public function getHessid()
    {
        return $this->container['hessid'];
    }

    /**
     * Sets hessid
     *
     * @param string|null $hessid Homogeneous extended service set identifier (HESSID).
     *
     * @return self
     */
    public function setHessid($hessid)
    {
        $this->container['hessid'] = $hessid;

        return $this;
    }

    /**
     * Gets proxy_arp
     *
     * @return string|null
     */
    public function getProxyArp()
    {
        return $this->container['proxy_arp'];
    }

    /**
     * Sets proxy_arp
     *
     * @param string|null $proxy_arp Enable/disable Proxy ARP.    enable:Enable Proxy ARP.    disable:Disable Proxy ARP.
     *
     * @return self
     */
    public function setProxyArp($proxy_arp)
    {
        $allowedValues = $this->getProxyArpAllowableValues();
        if (!is_null($proxy_arp) && !in_array($proxy_arp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_arp', must be one of '%s'",
                    $proxy_arp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_arp'] = $proxy_arp;

        return $this;
    }

    /**
     * Gets l2tif
     *
     * @return string|null
     */
    public function getL2tif()
    {
        return $this->container['l2tif'];
    }

    /**
     * Sets l2tif
     *
     * @param string|null $l2tif Enable/disable Layer 2 traffic inspection and filtering.    enable:Enable Layer 2 traffic inspection and filtering.    disable:Disable Layer 2 traffic inspection and filtering.
     *
     * @return self
     */
    public function setL2tif($l2tif)
    {
        $allowedValues = $this->getL2tifAllowableValues();
        if (!is_null($l2tif) && !in_array($l2tif, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'l2tif', must be one of '%s'",
                    $l2tif,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['l2tif'] = $l2tif;

        return $this;
    }

    /**
     * Gets pame_bi
     *
     * @return string|null
     */
    public function getPameBi()
    {
        return $this->container['pame_bi'];
    }

    /**
     * Sets pame_bi
     *
     * @param string|null $pame_bi Enable/disable Pre-Association Message Exchange BSSID Independent (PAME-BI).    disable:Disable Pre-Association Message Exchange BSSID Independent (PAME-BI).    enable:Enable Pre-Association Message Exchange BSSID Independent (PAME-BI).
     *
     * @return self
     */
    public function setPameBi($pame_bi)
    {
        $allowedValues = $this->getPameBiAllowableValues();
        if (!is_null($pame_bi) && !in_array($pame_bi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pame_bi', must be one of '%s'",
                    $pame_bi,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pame_bi'] = $pame_bi;

        return $this;
    }

    /**
     * Gets anqp_domain_id
     *
     * @return int|null
     */
    public function getAnqpDomainId()
    {
        return $this->container['anqp_domain_id'];
    }

    /**
     * Sets anqp_domain_id
     *
     * @param int|null $anqp_domain_id ANQP Domain ID (0-65535).
     *
     * @return self
     */
    public function setAnqpDomainId($anqp_domain_id)
    {

        if (!is_null($anqp_domain_id) && ($anqp_domain_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $anqp_domain_id when calling InlineObject571., must be smaller than or equal to 65535.');
        }
        if (!is_null($anqp_domain_id) && ($anqp_domain_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $anqp_domain_id when calling InlineObject571., must be bigger than or equal to 0.');
        }

        $this->container['anqp_domain_id'] = $anqp_domain_id;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string|null
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string|null $domain_name Domain name.
     *
     * @return self
     */
    public function setDomainName($domain_name)
    {
        if (!is_null($domain_name) && (mb_strlen($domain_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $domain_name when calling InlineObject571., must be smaller than or equal to 255.');
        }

        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets osu_ssid
     *
     * @return string|null
     */
    public function getOsuSsid()
    {
        return $this->container['osu_ssid'];
    }

    /**
     * Sets osu_ssid
     *
     * @param string|null $osu_ssid Online sign up (OSU) SSID.
     *
     * @return self
     */
    public function setOsuSsid($osu_ssid)
    {
        if (!is_null($osu_ssid) && (mb_strlen($osu_ssid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $osu_ssid when calling InlineObject571., must be smaller than or equal to 255.');
        }

        $this->container['osu_ssid'] = $osu_ssid;

        return $this;
    }

    /**
     * Gets gas_comeback_delay
     *
     * @return int|null
     */
    public function getGasComebackDelay()
    {
        return $this->container['gas_comeback_delay'];
    }

    /**
     * Sets gas_comeback_delay
     *
     * @param int|null $gas_comeback_delay GAS comeback delay (0 or 100 - 4000 milliseconds, default = 500).
     *
     * @return self
     */
    public function setGasComebackDelay($gas_comeback_delay)
    {

        if (!is_null($gas_comeback_delay) && ($gas_comeback_delay > 4000)) {
            throw new \InvalidArgumentException('invalid value for $gas_comeback_delay when calling InlineObject571., must be smaller than or equal to 4000.');
        }
        if (!is_null($gas_comeback_delay) && ($gas_comeback_delay < 100)) {
            throw new \InvalidArgumentException('invalid value for $gas_comeback_delay when calling InlineObject571., must be bigger than or equal to 100.');
        }

        $this->container['gas_comeback_delay'] = $gas_comeback_delay;

        return $this;
    }

    /**
     * Gets gas_fragmentation_limit
     *
     * @return int|null
     */
    public function getGasFragmentationLimit()
    {
        return $this->container['gas_fragmentation_limit'];
    }

    /**
     * Sets gas_fragmentation_limit
     *
     * @param int|null $gas_fragmentation_limit GAS fragmentation limit (512 - 4096, default = 1024).
     *
     * @return self
     */
    public function setGasFragmentationLimit($gas_fragmentation_limit)
    {

        if (!is_null($gas_fragmentation_limit) && ($gas_fragmentation_limit > 4096)) {
            throw new \InvalidArgumentException('invalid value for $gas_fragmentation_limit when calling InlineObject571., must be smaller than or equal to 4096.');
        }
        if (!is_null($gas_fragmentation_limit) && ($gas_fragmentation_limit < 512)) {
            throw new \InvalidArgumentException('invalid value for $gas_fragmentation_limit when calling InlineObject571., must be bigger than or equal to 512.');
        }

        $this->container['gas_fragmentation_limit'] = $gas_fragmentation_limit;

        return $this;
    }

    /**
     * Gets dgaf
     *
     * @return string|null
     */
    public function getDgaf()
    {
        return $this->container['dgaf'];
    }

    /**
     * Sets dgaf
     *
     * @param string|null $dgaf Enable/disable downstream group-addressed forwarding (DGAF).    enable:Enable downstream group-addressed forwarding (DGAF).    disable:Disable downstream group-addressed forwarding (DGAF).
     *
     * @return self
     */
    public function setDgaf($dgaf)
    {
        $allowedValues = $this->getDgafAllowableValues();
        if (!is_null($dgaf) && !in_array($dgaf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dgaf', must be one of '%s'",
                    $dgaf,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dgaf'] = $dgaf;

        return $this;
    }

    /**
     * Gets deauth_request_timeout
     *
     * @return int|null
     */
    public function getDeauthRequestTimeout()
    {
        return $this->container['deauth_request_timeout'];
    }

    /**
     * Sets deauth_request_timeout
     *
     * @param int|null $deauth_request_timeout Deauthentication request timeout (in seconds).
     *
     * @return self
     */
    public function setDeauthRequestTimeout($deauth_request_timeout)
    {

        if (!is_null($deauth_request_timeout) && ($deauth_request_timeout > 120)) {
            throw new \InvalidArgumentException('invalid value for $deauth_request_timeout when calling InlineObject571., must be smaller than or equal to 120.');
        }
        if (!is_null($deauth_request_timeout) && ($deauth_request_timeout < 30)) {
            throw new \InvalidArgumentException('invalid value for $deauth_request_timeout when calling InlineObject571., must be bigger than or equal to 30.');
        }

        $this->container['deauth_request_timeout'] = $deauth_request_timeout;

        return $this;
    }

    /**
     * Gets wnm_sleep_mode
     *
     * @return string|null
     */
    public function getWnmSleepMode()
    {
        return $this->container['wnm_sleep_mode'];
    }

    /**
     * Sets wnm_sleep_mode
     *
     * @param string|null $wnm_sleep_mode Enable/disable wireless network management (WNM) sleep mode.    enable:Enable wireless network management (WNM) sleep mode.    disable:Disable wireless network management (WNM) sleep mode.
     *
     * @return self
     */
    public function setWnmSleepMode($wnm_sleep_mode)
    {
        $allowedValues = $this->getWnmSleepModeAllowableValues();
        if (!is_null($wnm_sleep_mode) && !in_array($wnm_sleep_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wnm_sleep_mode', must be one of '%s'",
                    $wnm_sleep_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wnm_sleep_mode'] = $wnm_sleep_mode;

        return $this;
    }

    /**
     * Gets bss_transition
     *
     * @return string|null
     */
    public function getBssTransition()
    {
        return $this->container['bss_transition'];
    }

    /**
     * Sets bss_transition
     *
     * @param string|null $bss_transition Enable/disable basic service set (BSS) transition Support.    enable:Enable basic service set (BSS) transition support.    disable:Disable basic service set (BSS) transition support.
     *
     * @return self
     */
    public function setBssTransition($bss_transition)
    {
        $allowedValues = $this->getBssTransitionAllowableValues();
        if (!is_null($bss_transition) && !in_array($bss_transition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bss_transition', must be one of '%s'",
                    $bss_transition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bss_transition'] = $bss_transition;

        return $this;
    }

    /**
     * Gets venue_name
     *
     * @return string|null
     */
    public function getVenueName()
    {
        return $this->container['venue_name'];
    }

    /**
     * Sets venue_name
     *
     * @param string|null $venue_name Venue name.
     *
     * @return self
     */
    public function setVenueName($venue_name)
    {
        if (!is_null($venue_name) && (mb_strlen($venue_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $venue_name when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['venue_name'] = $venue_name;

        return $this;
    }

    /**
     * Gets roaming_consortium
     *
     * @return string|null
     */
    public function getRoamingConsortium()
    {
        return $this->container['roaming_consortium'];
    }

    /**
     * Sets roaming_consortium
     *
     * @param string|null $roaming_consortium Roaming consortium list name.
     *
     * @return self
     */
    public function setRoamingConsortium($roaming_consortium)
    {
        if (!is_null($roaming_consortium) && (mb_strlen($roaming_consortium) > 35)) {
            throw new \InvalidArgumentException('invalid length for $roaming_consortium when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['roaming_consortium'] = $roaming_consortium;

        return $this;
    }

    /**
     * Gets nai_realm
     *
     * @return string|null
     */
    public function getNaiRealm()
    {
        return $this->container['nai_realm'];
    }

    /**
     * Sets nai_realm
     *
     * @param string|null $nai_realm NAI realm list name.
     *
     * @return self
     */
    public function setNaiRealm($nai_realm)
    {
        if (!is_null($nai_realm) && (mb_strlen($nai_realm) > 35)) {
            throw new \InvalidArgumentException('invalid length for $nai_realm when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['nai_realm'] = $nai_realm;

        return $this;
    }

    /**
     * Gets oper_friendly_name
     *
     * @return string|null
     */
    public function getOperFriendlyName()
    {
        return $this->container['oper_friendly_name'];
    }

    /**
     * Sets oper_friendly_name
     *
     * @param string|null $oper_friendly_name Operator friendly name.
     *
     * @return self
     */
    public function setOperFriendlyName($oper_friendly_name)
    {
        if (!is_null($oper_friendly_name) && (mb_strlen($oper_friendly_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $oper_friendly_name when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['oper_friendly_name'] = $oper_friendly_name;

        return $this;
    }

    /**
     * Gets osu_provider
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20HsProfileNameOsuProvider[]|null
     */
    public function getOsuProvider()
    {
        return $this->container['osu_provider'];
    }

    /**
     * Sets osu_provider
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20HsProfileNameOsuProvider[]|null $osu_provider Manually selected list of OSU provider(s).
     *
     * @return self
     */
    public function setOsuProvider($osu_provider)
    {

        if (!is_null($osu_provider) && (count($osu_provider) > 0)) {
            throw new \InvalidArgumentException('invalid value for $osu_provider when calling InlineObject571., number of items must be less than or equal to 0.');
        }
        $this->container['osu_provider'] = $osu_provider;

        return $this;
    }

    /**
     * Gets wan_metrics
     *
     * @return string|null
     */
    public function getWanMetrics()
    {
        return $this->container['wan_metrics'];
    }

    /**
     * Sets wan_metrics
     *
     * @param string|null $wan_metrics WAN metric name.
     *
     * @return self
     */
    public function setWanMetrics($wan_metrics)
    {
        if (!is_null($wan_metrics) && (mb_strlen($wan_metrics) > 35)) {
            throw new \InvalidArgumentException('invalid length for $wan_metrics when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['wan_metrics'] = $wan_metrics;

        return $this;
    }

    /**
     * Gets network_auth
     *
     * @return string|null
     */
    public function getNetworkAuth()
    {
        return $this->container['network_auth'];
    }

    /**
     * Sets network_auth
     *
     * @param string|null $network_auth Network authentication name.
     *
     * @return self
     */
    public function setNetworkAuth($network_auth)
    {
        if (!is_null($network_auth) && (mb_strlen($network_auth) > 35)) {
            throw new \InvalidArgumentException('invalid length for $network_auth when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['network_auth'] = $network_auth;

        return $this;
    }

    /**
     * Gets _3gpp_plmn
     *
     * @return string|null
     */
    public function get3gppPlmn()
    {
        return $this->container['_3gpp_plmn'];
    }

    /**
     * Sets _3gpp_plmn
     *
     * @param string|null $_3gpp_plmn 3GPP PLMN name.
     *
     * @return self
     */
    public function set3gppPlmn($_3gpp_plmn)
    {
        if (!is_null($_3gpp_plmn) && (mb_strlen($_3gpp_plmn) > 35)) {
            throw new \InvalidArgumentException('invalid length for $_3gpp_plmn when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['_3gpp_plmn'] = $_3gpp_plmn;

        return $this;
    }

    /**
     * Gets conn_cap
     *
     * @return string|null
     */
    public function getConnCap()
    {
        return $this->container['conn_cap'];
    }

    /**
     * Sets conn_cap
     *
     * @param string|null $conn_cap Connection capability name.
     *
     * @return self
     */
    public function setConnCap($conn_cap)
    {
        if (!is_null($conn_cap) && (mb_strlen($conn_cap) > 35)) {
            throw new \InvalidArgumentException('invalid length for $conn_cap when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['conn_cap'] = $conn_cap;

        return $this;
    }

    /**
     * Gets qos_map
     *
     * @return string|null
     */
    public function getQosMap()
    {
        return $this->container['qos_map'];
    }

    /**
     * Sets qos_map
     *
     * @param string|null $qos_map QoS MAP set ID.
     *
     * @return self
     */
    public function setQosMap($qos_map)
    {
        if (!is_null($qos_map) && (mb_strlen($qos_map) > 35)) {
            throw new \InvalidArgumentException('invalid length for $qos_map when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['qos_map'] = $qos_map;

        return $this;
    }

    /**
     * Gets ip_addr_type
     *
     * @return string|null
     */
    public function getIpAddrType()
    {
        return $this->container['ip_addr_type'];
    }

    /**
     * Sets ip_addr_type
     *
     * @param string|null $ip_addr_type IP address type name.
     *
     * @return self
     */
    public function setIpAddrType($ip_addr_type)
    {
        if (!is_null($ip_addr_type) && (mb_strlen($ip_addr_type) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ip_addr_type when calling InlineObject571., must be smaller than or equal to 35.');
        }

        $this->container['ip_addr_type'] = $ip_addr_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


