<?php
/**
 * InlineObject68
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject68 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject68 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_68';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'replacemsg_group' => 'string',
        'name' => 'string',
        'request' => 'string',
        'response' => 'string',
        'streaming_content_bypass' => 'string',
        'preview' => 'string',
        'preview_data_length' => 'int',
        'request_server' => 'string',
        'response_server' => 'string',
        'request_failure' => 'string',
        'response_failure' => 'string',
        'request_path' => 'string',
        'response_path' => 'string',
        'methods' => 'string',
        'response_req_hdr' => 'string',
        'respmod_default_action' => 'string',
        'icap_headers' => '\Fortigate\FortiOS\Model\CMDB\IcapProfileNameIcapHeaders[]',
        'respmod_forward_rules' => '\Fortigate\FortiOS\Model\CMDB\IcapProfileNameRespmodForwardRules[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'replacemsg_group' => null,
        'name' => null,
        'request' => null,
        'response' => null,
        'streaming_content_bypass' => null,
        'preview' => null,
        'preview_data_length' => null,
        'request_server' => null,
        'response_server' => null,
        'request_failure' => null,
        'response_failure' => null,
        'request_path' => null,
        'response_path' => null,
        'methods' => null,
        'response_req_hdr' => null,
        'respmod_default_action' => null,
        'icap_headers' => null,
        'respmod_forward_rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'replacemsg_group' => 'replacemsg-group',
        'name' => 'name',
        'request' => 'request',
        'response' => 'response',
        'streaming_content_bypass' => 'streaming-content-bypass',
        'preview' => 'preview',
        'preview_data_length' => 'preview-data-length',
        'request_server' => 'request-server',
        'response_server' => 'response-server',
        'request_failure' => 'request-failure',
        'response_failure' => 'response-failure',
        'request_path' => 'request-path',
        'response_path' => 'response-path',
        'methods' => 'methods',
        'response_req_hdr' => 'response-req-hdr',
        'respmod_default_action' => 'respmod-default-action',
        'icap_headers' => 'icap-headers',
        'respmod_forward_rules' => 'respmod-forward-rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'replacemsg_group' => 'setReplacemsgGroup',
        'name' => 'setName',
        'request' => 'setRequest',
        'response' => 'setResponse',
        'streaming_content_bypass' => 'setStreamingContentBypass',
        'preview' => 'setPreview',
        'preview_data_length' => 'setPreviewDataLength',
        'request_server' => 'setRequestServer',
        'response_server' => 'setResponseServer',
        'request_failure' => 'setRequestFailure',
        'response_failure' => 'setResponseFailure',
        'request_path' => 'setRequestPath',
        'response_path' => 'setResponsePath',
        'methods' => 'setMethods',
        'response_req_hdr' => 'setResponseReqHdr',
        'respmod_default_action' => 'setRespmodDefaultAction',
        'icap_headers' => 'setIcapHeaders',
        'respmod_forward_rules' => 'setRespmodForwardRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'replacemsg_group' => 'getReplacemsgGroup',
        'name' => 'getName',
        'request' => 'getRequest',
        'response' => 'getResponse',
        'streaming_content_bypass' => 'getStreamingContentBypass',
        'preview' => 'getPreview',
        'preview_data_length' => 'getPreviewDataLength',
        'request_server' => 'getRequestServer',
        'response_server' => 'getResponseServer',
        'request_failure' => 'getRequestFailure',
        'response_failure' => 'getResponseFailure',
        'request_path' => 'getRequestPath',
        'response_path' => 'getResponsePath',
        'methods' => 'getMethods',
        'response_req_hdr' => 'getResponseReqHdr',
        'respmod_default_action' => 'getRespmodDefaultAction',
        'icap_headers' => 'getIcapHeaders',
        'respmod_forward_rules' => 'getRespmodForwardRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REQUEST_DISABLE = 'disable';
    const REQUEST_ENABLE = 'enable';
    const RESPONSE_DISABLE = 'disable';
    const RESPONSE_ENABLE = 'enable';
    const STREAMING_CONTENT_BYPASS_DISABLE = 'disable';
    const STREAMING_CONTENT_BYPASS_ENABLE = 'enable';
    const PREVIEW_DISABLE = 'disable';
    const PREVIEW_ENABLE = 'enable';
    const REQUEST_FAILURE_ERROR = 'error';
    const REQUEST_FAILURE_BYPASS = 'bypass';
    const RESPONSE_FAILURE_ERROR = 'error';
    const RESPONSE_FAILURE_BYPASS = 'bypass';
    const METHODS_DELETE = 'delete';
    const METHODS_GET = 'get';
    const METHODS_HEAD = 'head';
    const METHODS_OPTIONS = 'options';
    const METHODS_POST = 'post';
    const METHODS_PUT = 'put';
    const METHODS_TRACE = 'trace';
    const METHODS_OTHER = 'other';
    const RESPONSE_REQ_HDR_DISABLE = 'disable';
    const RESPONSE_REQ_HDR_ENABLE = 'enable';
    const RESPMOD_DEFAULT_ACTION_FORWARD = 'forward';
    const RESPMOD_DEFAULT_ACTION_BYPASS = 'bypass';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestAllowableValues()
    {
        return [
            self::REQUEST_DISABLE,
            self::REQUEST_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseAllowableValues()
    {
        return [
            self::RESPONSE_DISABLE,
            self::RESPONSE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStreamingContentBypassAllowableValues()
    {
        return [
            self::STREAMING_CONTENT_BYPASS_DISABLE,
            self::STREAMING_CONTENT_BYPASS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreviewAllowableValues()
    {
        return [
            self::PREVIEW_DISABLE,
            self::PREVIEW_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestFailureAllowableValues()
    {
        return [
            self::REQUEST_FAILURE_ERROR,
            self::REQUEST_FAILURE_BYPASS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseFailureAllowableValues()
    {
        return [
            self::RESPONSE_FAILURE_ERROR,
            self::RESPONSE_FAILURE_BYPASS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodsAllowableValues()
    {
        return [
            self::METHODS_DELETE,
            self::METHODS_GET,
            self::METHODS_HEAD,
            self::METHODS_OPTIONS,
            self::METHODS_POST,
            self::METHODS_PUT,
            self::METHODS_TRACE,
            self::METHODS_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseReqHdrAllowableValues()
    {
        return [
            self::RESPONSE_REQ_HDR_DISABLE,
            self::RESPONSE_REQ_HDR_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRespmodDefaultActionAllowableValues()
    {
        return [
            self::RESPMOD_DEFAULT_ACTION_FORWARD,
            self::RESPMOD_DEFAULT_ACTION_BYPASS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['replacemsg_group'] = $data['replacemsg_group'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['request'] = $data['request'] ?? null;
        $this->container['response'] = $data['response'] ?? null;
        $this->container['streaming_content_bypass'] = $data['streaming_content_bypass'] ?? null;
        $this->container['preview'] = $data['preview'] ?? null;
        $this->container['preview_data_length'] = $data['preview_data_length'] ?? null;
        $this->container['request_server'] = $data['request_server'] ?? null;
        $this->container['response_server'] = $data['response_server'] ?? null;
        $this->container['request_failure'] = $data['request_failure'] ?? null;
        $this->container['response_failure'] = $data['response_failure'] ?? null;
        $this->container['request_path'] = $data['request_path'] ?? null;
        $this->container['response_path'] = $data['response_path'] ?? null;
        $this->container['methods'] = $data['methods'] ?? null;
        $this->container['response_req_hdr'] = $data['response_req_hdr'] ?? null;
        $this->container['respmod_default_action'] = $data['respmod_default_action'] ?? null;
        $this->container['icap_headers'] = $data['icap_headers'] ?? null;
        $this->container['respmod_forward_rules'] = $data['respmod_forward_rules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['replacemsg_group']) && (mb_strlen($this->container['replacemsg_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'replacemsg_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRequestAllowableValues();
        if (!is_null($this->container['request']) && !in_array($this->container['request'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request', must be one of '%s'",
                $this->container['request'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseAllowableValues();
        if (!is_null($this->container['response']) && !in_array($this->container['response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response', must be one of '%s'",
                $this->container['response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStreamingContentBypassAllowableValues();
        if (!is_null($this->container['streaming_content_bypass']) && !in_array($this->container['streaming_content_bypass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'streaming_content_bypass', must be one of '%s'",
                $this->container['streaming_content_bypass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPreviewAllowableValues();
        if (!is_null($this->container['preview']) && !in_array($this->container['preview'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preview', must be one of '%s'",
                $this->container['preview'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['preview_data_length']) && ($this->container['preview_data_length'] > 4096)) {
            $invalidProperties[] = "invalid value for 'preview_data_length', must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['preview_data_length']) && ($this->container['preview_data_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'preview_data_length', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['request_server']) && (mb_strlen($this->container['request_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'request_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['response_server']) && (mb_strlen($this->container['response_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'response_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getRequestFailureAllowableValues();
        if (!is_null($this->container['request_failure']) && !in_array($this->container['request_failure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_failure', must be one of '%s'",
                $this->container['request_failure'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseFailureAllowableValues();
        if (!is_null($this->container['response_failure']) && !in_array($this->container['response_failure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_failure', must be one of '%s'",
                $this->container['response_failure'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['request_path']) && (mb_strlen($this->container['request_path']) > 127)) {
            $invalidProperties[] = "invalid value for 'request_path', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['response_path']) && (mb_strlen($this->container['response_path']) > 127)) {
            $invalidProperties[] = "invalid value for 'response_path', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getMethodsAllowableValues();
        if (!is_null($this->container['methods']) && !in_array($this->container['methods'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'methods', must be one of '%s'",
                $this->container['methods'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseReqHdrAllowableValues();
        if (!is_null($this->container['response_req_hdr']) && !in_array($this->container['response_req_hdr'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_req_hdr', must be one of '%s'",
                $this->container['response_req_hdr'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRespmodDefaultActionAllowableValues();
        if (!is_null($this->container['respmod_default_action']) && !in_array($this->container['respmod_default_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'respmod_default_action', must be one of '%s'",
                $this->container['respmod_default_action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['icap_headers']) && (count($this->container['icap_headers']) > 0)) {
            $invalidProperties[] = "invalid value for 'icap_headers', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['respmod_forward_rules']) && (count($this->container['respmod_forward_rules']) > 0)) {
            $invalidProperties[] = "invalid value for 'respmod_forward_rules', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets replacemsg_group
     *
     * @return string|null
     */
    public function getReplacemsgGroup()
    {
        return $this->container['replacemsg_group'];
    }

    /**
     * Sets replacemsg_group
     *
     * @param string|null $replacemsg_group Replacement message group.
     *
     * @return self
     */
    public function setReplacemsgGroup($replacemsg_group)
    {
        if (!is_null($replacemsg_group) && (mb_strlen($replacemsg_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $replacemsg_group when calling InlineObject68., must be smaller than or equal to 35.');
        }

        $this->container['replacemsg_group'] = $replacemsg_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name ICAP profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject68., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string|null $request Enable/disable whether an HTTP request is passed to an ICAP server.    disable:Disable HTTP request passing to ICAP server.    enable:Enable HTTP request passing to ICAP server.
     *
     * @return self
     */
    public function setRequest($request)
    {
        $allowedValues = $this->getRequestAllowableValues();
        if (!is_null($request) && !in_array($request, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request', must be one of '%s'",
                    $request,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response Enable/disable whether an HTTP response is passed to an ICAP server.    disable:Disable HTTP response passing to ICAP server.    enable:Enable HTTP response passing to ICAP server.
     *
     * @return self
     */
    public function setResponse($response)
    {
        $allowedValues = $this->getResponseAllowableValues();
        if (!is_null($response) && !in_array($response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response', must be one of '%s'",
                    $response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets streaming_content_bypass
     *
     * @return string|null
     */
    public function getStreamingContentBypass()
    {
        return $this->container['streaming_content_bypass'];
    }

    /**
     * Sets streaming_content_bypass
     *
     * @param string|null $streaming_content_bypass Enable/disable bypassing of ICAP server for streaming content.    disable:Disable bypassing of ICAP server for streaming content.    enable:Enable bypassing of ICAP server for streaming content.
     *
     * @return self
     */
    public function setStreamingContentBypass($streaming_content_bypass)
    {
        $allowedValues = $this->getStreamingContentBypassAllowableValues();
        if (!is_null($streaming_content_bypass) && !in_array($streaming_content_bypass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'streaming_content_bypass', must be one of '%s'",
                    $streaming_content_bypass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['streaming_content_bypass'] = $streaming_content_bypass;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Enable/disable preview of data to ICAP server.    disable:Disable preview of data to ICAP server.    enable:Enable preview of data to ICAP server.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        $allowedValues = $this->getPreviewAllowableValues();
        if (!is_null($preview) && !in_array($preview, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preview', must be one of '%s'",
                    $preview,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets preview_data_length
     *
     * @return int|null
     */
    public function getPreviewDataLength()
    {
        return $this->container['preview_data_length'];
    }

    /**
     * Sets preview_data_length
     *
     * @param int|null $preview_data_length Preview data length to be sent to ICAP server.
     *
     * @return self
     */
    public function setPreviewDataLength($preview_data_length)
    {

        if (!is_null($preview_data_length) && ($preview_data_length > 4096)) {
            throw new \InvalidArgumentException('invalid value for $preview_data_length when calling InlineObject68., must be smaller than or equal to 4096.');
        }
        if (!is_null($preview_data_length) && ($preview_data_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $preview_data_length when calling InlineObject68., must be bigger than or equal to 0.');
        }

        $this->container['preview_data_length'] = $preview_data_length;

        return $this;
    }

    /**
     * Gets request_server
     *
     * @return string|null
     */
    public function getRequestServer()
    {
        return $this->container['request_server'];
    }

    /**
     * Sets request_server
     *
     * @param string|null $request_server ICAP server to use for an HTTP request.
     *
     * @return self
     */
    public function setRequestServer($request_server)
    {
        if (!is_null($request_server) && (mb_strlen($request_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $request_server when calling InlineObject68., must be smaller than or equal to 35.');
        }

        $this->container['request_server'] = $request_server;

        return $this;
    }

    /**
     * Gets response_server
     *
     * @return string|null
     */
    public function getResponseServer()
    {
        return $this->container['response_server'];
    }

    /**
     * Sets response_server
     *
     * @param string|null $response_server ICAP server to use for an HTTP response.
     *
     * @return self
     */
    public function setResponseServer($response_server)
    {
        if (!is_null($response_server) && (mb_strlen($response_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $response_server when calling InlineObject68., must be smaller than or equal to 35.');
        }

        $this->container['response_server'] = $response_server;

        return $this;
    }

    /**
     * Gets request_failure
     *
     * @return string|null
     */
    public function getRequestFailure()
    {
        return $this->container['request_failure'];
    }

    /**
     * Sets request_failure
     *
     * @param string|null $request_failure Action to take if the ICAP server cannot be contacted when processing an HTTP request.    error:Error.    bypass:Bypass.
     *
     * @return self
     */
    public function setRequestFailure($request_failure)
    {
        $allowedValues = $this->getRequestFailureAllowableValues();
        if (!is_null($request_failure) && !in_array($request_failure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_failure', must be one of '%s'",
                    $request_failure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_failure'] = $request_failure;

        return $this;
    }

    /**
     * Gets response_failure
     *
     * @return string|null
     */
    public function getResponseFailure()
    {
        return $this->container['response_failure'];
    }

    /**
     * Sets response_failure
     *
     * @param string|null $response_failure Action to take if the ICAP server cannot be contacted when processing an HTTP response.    error:Error.    bypass:Bypass.
     *
     * @return self
     */
    public function setResponseFailure($response_failure)
    {
        $allowedValues = $this->getResponseFailureAllowableValues();
        if (!is_null($response_failure) && !in_array($response_failure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_failure', must be one of '%s'",
                    $response_failure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_failure'] = $response_failure;

        return $this;
    }

    /**
     * Gets request_path
     *
     * @return string|null
     */
    public function getRequestPath()
    {
        return $this->container['request_path'];
    }

    /**
     * Sets request_path
     *
     * @param string|null $request_path Path component of the ICAP URI that identifies the HTTP request processing service.
     *
     * @return self
     */
    public function setRequestPath($request_path)
    {
        if (!is_null($request_path) && (mb_strlen($request_path) > 127)) {
            throw new \InvalidArgumentException('invalid length for $request_path when calling InlineObject68., must be smaller than or equal to 127.');
        }

        $this->container['request_path'] = $request_path;

        return $this;
    }

    /**
     * Gets response_path
     *
     * @return string|null
     */
    public function getResponsePath()
    {
        return $this->container['response_path'];
    }

    /**
     * Sets response_path
     *
     * @param string|null $response_path Path component of the ICAP URI that identifies the HTTP response processing service.
     *
     * @return self
     */
    public function setResponsePath($response_path)
    {
        if (!is_null($response_path) && (mb_strlen($response_path) > 127)) {
            throw new \InvalidArgumentException('invalid length for $response_path when calling InlineObject68., must be smaller than or equal to 127.');
        }

        $this->container['response_path'] = $response_path;

        return $this;
    }

    /**
     * Gets methods
     *
     * @return string|null
     */
    public function getMethods()
    {
        return $this->container['methods'];
    }

    /**
     * Sets methods
     *
     * @param string|null $methods The allowed HTTP methods that will be sent to ICAP server for further processing.    delete:Forward HTTP request or response with DELETE method to ICAP server for further processing.    get:Forward HTTP request or response with GET method to ICAP server for further processing.    head:Forward HTTP request or response with HEAD method to ICAP server for further processing.    options:Forward HTTP request or response with OPTIONS method to ICAP server for further processing.    post:Forward HTTP request or response with POST method to ICAP server for further processing.    put:Forward HTTP request or response with PUT method to ICAP server for further processing.    trace:Forward HTTP request or response with TRACE method to ICAP server for further processing.    other:Forward HTTP request or response with All other methods to ICAP server for further processing.
     *
     * @return self
     */
    public function setMethods($methods)
    {
        $allowedValues = $this->getMethodsAllowableValues();
        if (!is_null($methods) && !in_array($methods, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'methods', must be one of '%s'",
                    $methods,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['methods'] = $methods;

        return $this;
    }

    /**
     * Gets response_req_hdr
     *
     * @return string|null
     */
    public function getResponseReqHdr()
    {
        return $this->container['response_req_hdr'];
    }

    /**
     * Sets response_req_hdr
     *
     * @param string|null $response_req_hdr Enable/disable addition of req-hdr for ICAP response modification (respmod) processing.    disable:Do not add req-hdr for response modification (respmod) processing.    enable:Add req-hdr for response modification (respmod) processing.
     *
     * @return self
     */
    public function setResponseReqHdr($response_req_hdr)
    {
        $allowedValues = $this->getResponseReqHdrAllowableValues();
        if (!is_null($response_req_hdr) && !in_array($response_req_hdr, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_req_hdr', must be one of '%s'",
                    $response_req_hdr,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_req_hdr'] = $response_req_hdr;

        return $this;
    }

    /**
     * Gets respmod_default_action
     *
     * @return string|null
     */
    public function getRespmodDefaultAction()
    {
        return $this->container['respmod_default_action'];
    }

    /**
     * Sets respmod_default_action
     *
     * @param string|null $respmod_default_action Default action to ICAP response modification (respmod) processing.    forward:Forward response to icap server unless a rule specifies not to.    bypass:Don't forward request to icap server unless a rule specifies to forward the request.
     *
     * @return self
     */
    public function setRespmodDefaultAction($respmod_default_action)
    {
        $allowedValues = $this->getRespmodDefaultActionAllowableValues();
        if (!is_null($respmod_default_action) && !in_array($respmod_default_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'respmod_default_action', must be one of '%s'",
                    $respmod_default_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['respmod_default_action'] = $respmod_default_action;

        return $this;
    }

    /**
     * Gets icap_headers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\IcapProfileNameIcapHeaders[]|null
     */
    public function getIcapHeaders()
    {
        return $this->container['icap_headers'];
    }

    /**
     * Sets icap_headers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\IcapProfileNameIcapHeaders[]|null $icap_headers Configure ICAP forwarded request headers.
     *
     * @return self
     */
    public function setIcapHeaders($icap_headers)
    {

        if (!is_null($icap_headers) && (count($icap_headers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $icap_headers when calling InlineObject68., number of items must be less than or equal to 0.');
        }
        $this->container['icap_headers'] = $icap_headers;

        return $this;
    }

    /**
     * Gets respmod_forward_rules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\IcapProfileNameRespmodForwardRules[]|null
     */
    public function getRespmodForwardRules()
    {
        return $this->container['respmod_forward_rules'];
    }

    /**
     * Sets respmod_forward_rules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\IcapProfileNameRespmodForwardRules[]|null $respmod_forward_rules ICAP response mode forward rules.
     *
     * @return self
     */
    public function setRespmodForwardRules($respmod_forward_rules)
    {

        if (!is_null($respmod_forward_rules) && (count($respmod_forward_rules) > 0)) {
            throw new \InvalidArgumentException('invalid value for $respmod_forward_rules when calling InlineObject68., number of items must be less than or equal to 0.');
        }
        $this->container['respmod_forward_rules'] = $respmod_forward_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


