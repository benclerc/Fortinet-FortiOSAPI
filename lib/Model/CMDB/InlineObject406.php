<?php
/**
 * InlineObject406
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject406 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject406 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_406';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'physical_switch' => 'string',
        'vlan' => 'int',
        'port' => '\Fortigate\FortiOS\Model\CMDB\SystemVirtualSwitchNamePort[]',
        'span' => 'string',
        'span_source_port' => 'string',
        'span_dest_port' => 'string',
        'span_direction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'physical_switch' => null,
        'vlan' => null,
        'port' => null,
        'span' => null,
        'span_source_port' => null,
        'span_dest_port' => null,
        'span_direction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'physical_switch' => 'physical-switch',
        'vlan' => 'vlan',
        'port' => 'port',
        'span' => 'span',
        'span_source_port' => 'span-source-port',
        'span_dest_port' => 'span-dest-port',
        'span_direction' => 'span-direction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'physical_switch' => 'setPhysicalSwitch',
        'vlan' => 'setVlan',
        'port' => 'setPort',
        'span' => 'setSpan',
        'span_source_port' => 'setSpanSourcePort',
        'span_dest_port' => 'setSpanDestPort',
        'span_direction' => 'setSpanDirection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'physical_switch' => 'getPhysicalSwitch',
        'vlan' => 'getVlan',
        'port' => 'getPort',
        'span' => 'getSpan',
        'span_source_port' => 'getSpanSourcePort',
        'span_dest_port' => 'getSpanDestPort',
        'span_direction' => 'getSpanDirection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SPAN_DISABLE = 'disable';
    const SPAN_ENABLE = 'enable';
    const SPAN_DIRECTION_RX = 'rx';
    const SPAN_DIRECTION_TX = 'tx';
    const SPAN_DIRECTION_BOTH = 'both';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpanAllowableValues()
    {
        return [
            self::SPAN_DISABLE,
            self::SPAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpanDirectionAllowableValues()
    {
        return [
            self::SPAN_DIRECTION_RX,
            self::SPAN_DIRECTION_TX,
            self::SPAN_DIRECTION_BOTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['physical_switch'] = $data['physical_switch'] ?? null;
        $this->container['vlan'] = $data['vlan'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['span'] = $data['span'] ?? null;
        $this->container['span_source_port'] = $data['span_source_port'] ?? null;
        $this->container['span_dest_port'] = $data['span_dest_port'] ?? null;
        $this->container['span_direction'] = $data['span_direction'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['physical_switch']) && (mb_strlen($this->container['physical_switch']) > 15)) {
            $invalidProperties[] = "invalid value for 'physical_switch', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['vlan']) && ($this->container['vlan'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'vlan', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['vlan']) && ($this->container['vlan'] < 0)) {
            $invalidProperties[] = "invalid value for 'vlan', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['port']) && (count($this->container['port']) > 0)) {
            $invalidProperties[] = "invalid value for 'port', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSpanAllowableValues();
        if (!is_null($this->container['span']) && !in_array($this->container['span'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'span', must be one of '%s'",
                $this->container['span'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['span_source_port']) && (mb_strlen($this->container['span_source_port']) > 15)) {
            $invalidProperties[] = "invalid value for 'span_source_port', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['span_dest_port']) && (mb_strlen($this->container['span_dest_port']) > 15)) {
            $invalidProperties[] = "invalid value for 'span_dest_port', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getSpanDirectionAllowableValues();
        if (!is_null($this->container['span_direction']) && !in_array($this->container['span_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'span_direction', must be one of '%s'",
                $this->container['span_direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the virtual switch.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject406., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets physical_switch
     *
     * @return string|null
     */
    public function getPhysicalSwitch()
    {
        return $this->container['physical_switch'];
    }

    /**
     * Sets physical_switch
     *
     * @param string|null $physical_switch Physical switch parent.
     *
     * @return self
     */
    public function setPhysicalSwitch($physical_switch)
    {
        if (!is_null($physical_switch) && (mb_strlen($physical_switch) > 15)) {
            throw new \InvalidArgumentException('invalid length for $physical_switch when calling InlineObject406., must be smaller than or equal to 15.');
        }

        $this->container['physical_switch'] = $physical_switch;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int|null $vlan VLAN.
     *
     * @return self
     */
    public function setVlan($vlan)
    {

        if (!is_null($vlan) && ($vlan > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $vlan when calling InlineObject406., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($vlan) && ($vlan < 0)) {
            throw new \InvalidArgumentException('invalid value for $vlan when calling InlineObject406., must be bigger than or equal to 0.');
        }

        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets port
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemVirtualSwitchNamePort[]|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemVirtualSwitchNamePort[]|null $port Configure member ports.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && (count($port) > 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject406., number of items must be less than or equal to 0.');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets span
     *
     * @return string|null
     */
    public function getSpan()
    {
        return $this->container['span'];
    }

    /**
     * Sets span
     *
     * @param string|null $span Enable/disable SPAN.    disable:Disable SPAN.    enable:Enable SPAN.
     *
     * @return self
     */
    public function setSpan($span)
    {
        $allowedValues = $this->getSpanAllowableValues();
        if (!is_null($span) && !in_array($span, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'span', must be one of '%s'",
                    $span,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['span'] = $span;

        return $this;
    }

    /**
     * Gets span_source_port
     *
     * @return string|null
     */
    public function getSpanSourcePort()
    {
        return $this->container['span_source_port'];
    }

    /**
     * Sets span_source_port
     *
     * @param string|null $span_source_port SPAN source ports.
     *
     * @return self
     */
    public function setSpanSourcePort($span_source_port)
    {
        if (!is_null($span_source_port) && (mb_strlen($span_source_port) > 15)) {
            throw new \InvalidArgumentException('invalid length for $span_source_port when calling InlineObject406., must be smaller than or equal to 15.');
        }

        $this->container['span_source_port'] = $span_source_port;

        return $this;
    }

    /**
     * Gets span_dest_port
     *
     * @return string|null
     */
    public function getSpanDestPort()
    {
        return $this->container['span_dest_port'];
    }

    /**
     * Sets span_dest_port
     *
     * @param string|null $span_dest_port SPAN destination port.
     *
     * @return self
     */
    public function setSpanDestPort($span_dest_port)
    {
        if (!is_null($span_dest_port) && (mb_strlen($span_dest_port) > 15)) {
            throw new \InvalidArgumentException('invalid length for $span_dest_port when calling InlineObject406., must be smaller than or equal to 15.');
        }

        $this->container['span_dest_port'] = $span_dest_port;

        return $this;
    }

    /**
     * Gets span_direction
     *
     * @return string|null
     */
    public function getSpanDirection()
    {
        return $this->container['span_direction'];
    }

    /**
     * Sets span_direction
     *
     * @param string|null $span_direction SPAN direction.    rx:Span receive direction only.    tx:Span transmit direction only.    both:Span both directions.
     *
     * @return self
     */
    public function setSpanDirection($span_direction)
    {
        $allowedValues = $this->getSpanDirectionAllowableValues();
        if (!is_null($span_direction) && !in_array($span_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'span_direction', must be one of '%s'",
                    $span_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['span_direction'] = $span_direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


