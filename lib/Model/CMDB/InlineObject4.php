<?php
/**
 * InlineObject4
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject4 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agelimit' => 'int',
        'maxfilesize' => 'int',
        'quarantine_quota' => 'int',
        'drop_infected' => 'string',
        'store_infected' => 'string',
        'drop_blocked' => 'string',
        'store_blocked' => 'string',
        'drop_heuristic' => 'string',
        'store_heuristic' => 'string',
        'lowspace' => 'string',
        'destination' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'agelimit' => null,
        'maxfilesize' => null,
        'quarantine_quota' => null,
        'drop_infected' => null,
        'store_infected' => null,
        'drop_blocked' => null,
        'store_blocked' => null,
        'drop_heuristic' => null,
        'store_heuristic' => null,
        'lowspace' => null,
        'destination' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agelimit' => 'agelimit',
        'maxfilesize' => 'maxfilesize',
        'quarantine_quota' => 'quarantine-quota',
        'drop_infected' => 'drop-infected',
        'store_infected' => 'store-infected',
        'drop_blocked' => 'drop-blocked',
        'store_blocked' => 'store-blocked',
        'drop_heuristic' => 'drop-heuristic',
        'store_heuristic' => 'store-heuristic',
        'lowspace' => 'lowspace',
        'destination' => 'destination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agelimit' => 'setAgelimit',
        'maxfilesize' => 'setMaxfilesize',
        'quarantine_quota' => 'setQuarantineQuota',
        'drop_infected' => 'setDropInfected',
        'store_infected' => 'setStoreInfected',
        'drop_blocked' => 'setDropBlocked',
        'store_blocked' => 'setStoreBlocked',
        'drop_heuristic' => 'setDropHeuristic',
        'store_heuristic' => 'setStoreHeuristic',
        'lowspace' => 'setLowspace',
        'destination' => 'setDestination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agelimit' => 'getAgelimit',
        'maxfilesize' => 'getMaxfilesize',
        'quarantine_quota' => 'getQuarantineQuota',
        'drop_infected' => 'getDropInfected',
        'store_infected' => 'getStoreInfected',
        'drop_blocked' => 'getDropBlocked',
        'store_blocked' => 'getStoreBlocked',
        'drop_heuristic' => 'getDropHeuristic',
        'store_heuristic' => 'getStoreHeuristic',
        'lowspace' => 'getLowspace',
        'destination' => 'getDestination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DROP_INFECTED_IMAP = 'imap';
    const DROP_INFECTED_SMTP = 'smtp';
    const DROP_INFECTED_POP3 = 'pop3';
    const DROP_INFECTED_HTTP = 'http';
    const DROP_INFECTED_FTP = 'ftp';
    const DROP_INFECTED_NNTP = 'nntp';
    const DROP_INFECTED_IMAPS = 'imaps';
    const DROP_INFECTED_SMTPS = 'smtps';
    const DROP_INFECTED_POP3S = 'pop3s';
    const DROP_INFECTED_HTTPS = 'https';
    const DROP_INFECTED_FTPS = 'ftps';
    const DROP_INFECTED_MAPI = 'mapi';
    const DROP_INFECTED_CIFS = 'cifs';
    const DROP_INFECTED_SSH = 'ssh';
    const STORE_INFECTED_IMAP = 'imap';
    const STORE_INFECTED_SMTP = 'smtp';
    const STORE_INFECTED_POP3 = 'pop3';
    const STORE_INFECTED_HTTP = 'http';
    const STORE_INFECTED_FTP = 'ftp';
    const STORE_INFECTED_NNTP = 'nntp';
    const STORE_INFECTED_IMAPS = 'imaps';
    const STORE_INFECTED_SMTPS = 'smtps';
    const STORE_INFECTED_POP3S = 'pop3s';
    const STORE_INFECTED_HTTPS = 'https';
    const STORE_INFECTED_FTPS = 'ftps';
    const STORE_INFECTED_MAPI = 'mapi';
    const STORE_INFECTED_CIFS = 'cifs';
    const STORE_INFECTED_SSH = 'ssh';
    const DROP_BLOCKED_IMAP = 'imap';
    const DROP_BLOCKED_SMTP = 'smtp';
    const DROP_BLOCKED_POP3 = 'pop3';
    const DROP_BLOCKED_HTTP = 'http';
    const DROP_BLOCKED_FTP = 'ftp';
    const DROP_BLOCKED_NNTP = 'nntp';
    const DROP_BLOCKED_IMAPS = 'imaps';
    const DROP_BLOCKED_SMTPS = 'smtps';
    const DROP_BLOCKED_POP3S = 'pop3s';
    const DROP_BLOCKED_FTPS = 'ftps';
    const DROP_BLOCKED_MAPI = 'mapi';
    const DROP_BLOCKED_CIFS = 'cifs';
    const DROP_BLOCKED_SSH = 'ssh';
    const STORE_BLOCKED_IMAP = 'imap';
    const STORE_BLOCKED_SMTP = 'smtp';
    const STORE_BLOCKED_POP3 = 'pop3';
    const STORE_BLOCKED_HTTP = 'http';
    const STORE_BLOCKED_FTP = 'ftp';
    const STORE_BLOCKED_NNTP = 'nntp';
    const STORE_BLOCKED_IMAPS = 'imaps';
    const STORE_BLOCKED_SMTPS = 'smtps';
    const STORE_BLOCKED_POP3S = 'pop3s';
    const STORE_BLOCKED_FTPS = 'ftps';
    const STORE_BLOCKED_MAPI = 'mapi';
    const STORE_BLOCKED_CIFS = 'cifs';
    const STORE_BLOCKED_SSH = 'ssh';
    const DROP_HEURISTIC_IMAP = 'imap';
    const DROP_HEURISTIC_SMTP = 'smtp';
    const DROP_HEURISTIC_POP3 = 'pop3';
    const DROP_HEURISTIC_HTTP = 'http';
    const DROP_HEURISTIC_FTP = 'ftp';
    const DROP_HEURISTIC_NNTP = 'nntp';
    const DROP_HEURISTIC_IMAPS = 'imaps';
    const DROP_HEURISTIC_SMTPS = 'smtps';
    const DROP_HEURISTIC_POP3S = 'pop3s';
    const DROP_HEURISTIC_HTTPS = 'https';
    const DROP_HEURISTIC_FTPS = 'ftps';
    const DROP_HEURISTIC_MAPI = 'mapi';
    const DROP_HEURISTIC_CIFS = 'cifs';
    const DROP_HEURISTIC_SSH = 'ssh';
    const STORE_HEURISTIC_IMAP = 'imap';
    const STORE_HEURISTIC_SMTP = 'smtp';
    const STORE_HEURISTIC_POP3 = 'pop3';
    const STORE_HEURISTIC_HTTP = 'http';
    const STORE_HEURISTIC_FTP = 'ftp';
    const STORE_HEURISTIC_NNTP = 'nntp';
    const STORE_HEURISTIC_IMAPS = 'imaps';
    const STORE_HEURISTIC_SMTPS = 'smtps';
    const STORE_HEURISTIC_POP3S = 'pop3s';
    const STORE_HEURISTIC_HTTPS = 'https';
    const STORE_HEURISTIC_FTPS = 'ftps';
    const STORE_HEURISTIC_MAPI = 'mapi';
    const STORE_HEURISTIC_CIFS = 'cifs';
    const STORE_HEURISTIC_SSH = 'ssh';
    const LOWSPACE_DROP_NEW = 'drop-new';
    const LOWSPACE_OVRW_OLD = 'ovrw-old';
    const DESTINATION_NULL = 'NULL';
    const DESTINATION_DISK = 'disk';
    const DESTINATION_FORTI_ANALYZER = 'FortiAnalyzer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropInfectedAllowableValues()
    {
        return [
            self::DROP_INFECTED_IMAP,
            self::DROP_INFECTED_SMTP,
            self::DROP_INFECTED_POP3,
            self::DROP_INFECTED_HTTP,
            self::DROP_INFECTED_FTP,
            self::DROP_INFECTED_NNTP,
            self::DROP_INFECTED_IMAPS,
            self::DROP_INFECTED_SMTPS,
            self::DROP_INFECTED_POP3S,
            self::DROP_INFECTED_HTTPS,
            self::DROP_INFECTED_FTPS,
            self::DROP_INFECTED_MAPI,
            self::DROP_INFECTED_CIFS,
            self::DROP_INFECTED_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoreInfectedAllowableValues()
    {
        return [
            self::STORE_INFECTED_IMAP,
            self::STORE_INFECTED_SMTP,
            self::STORE_INFECTED_POP3,
            self::STORE_INFECTED_HTTP,
            self::STORE_INFECTED_FTP,
            self::STORE_INFECTED_NNTP,
            self::STORE_INFECTED_IMAPS,
            self::STORE_INFECTED_SMTPS,
            self::STORE_INFECTED_POP3S,
            self::STORE_INFECTED_HTTPS,
            self::STORE_INFECTED_FTPS,
            self::STORE_INFECTED_MAPI,
            self::STORE_INFECTED_CIFS,
            self::STORE_INFECTED_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropBlockedAllowableValues()
    {
        return [
            self::DROP_BLOCKED_IMAP,
            self::DROP_BLOCKED_SMTP,
            self::DROP_BLOCKED_POP3,
            self::DROP_BLOCKED_HTTP,
            self::DROP_BLOCKED_FTP,
            self::DROP_BLOCKED_NNTP,
            self::DROP_BLOCKED_IMAPS,
            self::DROP_BLOCKED_SMTPS,
            self::DROP_BLOCKED_POP3S,
            self::DROP_BLOCKED_FTPS,
            self::DROP_BLOCKED_MAPI,
            self::DROP_BLOCKED_CIFS,
            self::DROP_BLOCKED_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoreBlockedAllowableValues()
    {
        return [
            self::STORE_BLOCKED_IMAP,
            self::STORE_BLOCKED_SMTP,
            self::STORE_BLOCKED_POP3,
            self::STORE_BLOCKED_HTTP,
            self::STORE_BLOCKED_FTP,
            self::STORE_BLOCKED_NNTP,
            self::STORE_BLOCKED_IMAPS,
            self::STORE_BLOCKED_SMTPS,
            self::STORE_BLOCKED_POP3S,
            self::STORE_BLOCKED_FTPS,
            self::STORE_BLOCKED_MAPI,
            self::STORE_BLOCKED_CIFS,
            self::STORE_BLOCKED_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropHeuristicAllowableValues()
    {
        return [
            self::DROP_HEURISTIC_IMAP,
            self::DROP_HEURISTIC_SMTP,
            self::DROP_HEURISTIC_POP3,
            self::DROP_HEURISTIC_HTTP,
            self::DROP_HEURISTIC_FTP,
            self::DROP_HEURISTIC_NNTP,
            self::DROP_HEURISTIC_IMAPS,
            self::DROP_HEURISTIC_SMTPS,
            self::DROP_HEURISTIC_POP3S,
            self::DROP_HEURISTIC_HTTPS,
            self::DROP_HEURISTIC_FTPS,
            self::DROP_HEURISTIC_MAPI,
            self::DROP_HEURISTIC_CIFS,
            self::DROP_HEURISTIC_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoreHeuristicAllowableValues()
    {
        return [
            self::STORE_HEURISTIC_IMAP,
            self::STORE_HEURISTIC_SMTP,
            self::STORE_HEURISTIC_POP3,
            self::STORE_HEURISTIC_HTTP,
            self::STORE_HEURISTIC_FTP,
            self::STORE_HEURISTIC_NNTP,
            self::STORE_HEURISTIC_IMAPS,
            self::STORE_HEURISTIC_SMTPS,
            self::STORE_HEURISTIC_POP3S,
            self::STORE_HEURISTIC_HTTPS,
            self::STORE_HEURISTIC_FTPS,
            self::STORE_HEURISTIC_MAPI,
            self::STORE_HEURISTIC_CIFS,
            self::STORE_HEURISTIC_SSH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLowspaceAllowableValues()
    {
        return [
            self::LOWSPACE_DROP_NEW,
            self::LOWSPACE_OVRW_OLD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationAllowableValues()
    {
        return [
            self::DESTINATION_NULL,
            self::DESTINATION_DISK,
            self::DESTINATION_FORTI_ANALYZER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agelimit'] = $data['agelimit'] ?? null;
        $this->container['maxfilesize'] = $data['maxfilesize'] ?? null;
        $this->container['quarantine_quota'] = $data['quarantine_quota'] ?? null;
        $this->container['drop_infected'] = $data['drop_infected'] ?? null;
        $this->container['store_infected'] = $data['store_infected'] ?? null;
        $this->container['drop_blocked'] = $data['drop_blocked'] ?? null;
        $this->container['store_blocked'] = $data['store_blocked'] ?? null;
        $this->container['drop_heuristic'] = $data['drop_heuristic'] ?? null;
        $this->container['store_heuristic'] = $data['store_heuristic'] ?? null;
        $this->container['lowspace'] = $data['lowspace'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['agelimit']) && ($this->container['agelimit'] > 479)) {
            $invalidProperties[] = "invalid value for 'agelimit', must be smaller than or equal to 479.";
        }

        if (!is_null($this->container['agelimit']) && ($this->container['agelimit'] < 0)) {
            $invalidProperties[] = "invalid value for 'agelimit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxfilesize']) && ($this->container['maxfilesize'] > 500)) {
            $invalidProperties[] = "invalid value for 'maxfilesize', must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['maxfilesize']) && ($this->container['maxfilesize'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxfilesize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quarantine_quota']) && ($this->container['quarantine_quota'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'quarantine_quota', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['quarantine_quota']) && ($this->container['quarantine_quota'] < 0)) {
            $invalidProperties[] = "invalid value for 'quarantine_quota', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDropInfectedAllowableValues();
        if (!is_null($this->container['drop_infected']) && !in_array($this->container['drop_infected'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_infected', must be one of '%s'",
                $this->container['drop_infected'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStoreInfectedAllowableValues();
        if (!is_null($this->container['store_infected']) && !in_array($this->container['store_infected'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_infected', must be one of '%s'",
                $this->container['store_infected'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDropBlockedAllowableValues();
        if (!is_null($this->container['drop_blocked']) && !in_array($this->container['drop_blocked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_blocked', must be one of '%s'",
                $this->container['drop_blocked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStoreBlockedAllowableValues();
        if (!is_null($this->container['store_blocked']) && !in_array($this->container['store_blocked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_blocked', must be one of '%s'",
                $this->container['store_blocked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDropHeuristicAllowableValues();
        if (!is_null($this->container['drop_heuristic']) && !in_array($this->container['drop_heuristic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_heuristic', must be one of '%s'",
                $this->container['drop_heuristic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStoreHeuristicAllowableValues();
        if (!is_null($this->container['store_heuristic']) && !in_array($this->container['store_heuristic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_heuristic', must be one of '%s'",
                $this->container['store_heuristic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLowspaceAllowableValues();
        if (!is_null($this->container['lowspace']) && !in_array($this->container['lowspace'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lowspace', must be one of '%s'",
                $this->container['lowspace'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDestinationAllowableValues();
        if (!is_null($this->container['destination']) && !in_array($this->container['destination'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destination', must be one of '%s'",
                $this->container['destination'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agelimit
     *
     * @return int|null
     */
    public function getAgelimit()
    {
        return $this->container['agelimit'];
    }

    /**
     * Sets agelimit
     *
     * @param int|null $agelimit Age limit for quarantined files (0 - 479 hours, 0 means forever).
     *
     * @return self
     */
    public function setAgelimit($agelimit)
    {

        if (!is_null($agelimit) && ($agelimit > 479)) {
            throw new \InvalidArgumentException('invalid value for $agelimit when calling InlineObject4., must be smaller than or equal to 479.');
        }
        if (!is_null($agelimit) && ($agelimit < 0)) {
            throw new \InvalidArgumentException('invalid value for $agelimit when calling InlineObject4., must be bigger than or equal to 0.');
        }

        $this->container['agelimit'] = $agelimit;

        return $this;
    }

    /**
     * Gets maxfilesize
     *
     * @return int|null
     */
    public function getMaxfilesize()
    {
        return $this->container['maxfilesize'];
    }

    /**
     * Sets maxfilesize
     *
     * @param int|null $maxfilesize Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
     *
     * @return self
     */
    public function setMaxfilesize($maxfilesize)
    {

        if (!is_null($maxfilesize) && ($maxfilesize > 500)) {
            throw new \InvalidArgumentException('invalid value for $maxfilesize when calling InlineObject4., must be smaller than or equal to 500.');
        }
        if (!is_null($maxfilesize) && ($maxfilesize < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxfilesize when calling InlineObject4., must be bigger than or equal to 0.');
        }

        $this->container['maxfilesize'] = $maxfilesize;

        return $this;
    }

    /**
     * Gets quarantine_quota
     *
     * @return int|null
     */
    public function getQuarantineQuota()
    {
        return $this->container['quarantine_quota'];
    }

    /**
     * Sets quarantine_quota
     *
     * @param int|null $quarantine_quota The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
     *
     * @return self
     */
    public function setQuarantineQuota($quarantine_quota)
    {

        if (!is_null($quarantine_quota) && ($quarantine_quota > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $quarantine_quota when calling InlineObject4., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($quarantine_quota) && ($quarantine_quota < 0)) {
            throw new \InvalidArgumentException('invalid value for $quarantine_quota when calling InlineObject4., must be bigger than or equal to 0.');
        }

        $this->container['quarantine_quota'] = $quarantine_quota;

        return $this;
    }

    /**
     * Gets drop_infected
     *
     * @return string|null
     */
    public function getDropInfected()
    {
        return $this->container['drop_infected'];
    }

    /**
     * Sets drop_infected
     *
     * @param string|null $drop_infected Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    https:HTTPS.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setDropInfected($drop_infected)
    {
        $allowedValues = $this->getDropInfectedAllowableValues();
        if (!is_null($drop_infected) && !in_array($drop_infected, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_infected', must be one of '%s'",
                    $drop_infected,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drop_infected'] = $drop_infected;

        return $this;
    }

    /**
     * Gets store_infected
     *
     * @return string|null
     */
    public function getStoreInfected()
    {
        return $this->container['store_infected'];
    }

    /**
     * Sets store_infected
     *
     * @param string|null $store_infected Quarantine infected files found in sessions using the selected protocols.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    https:HTTPS.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setStoreInfected($store_infected)
    {
        $allowedValues = $this->getStoreInfectedAllowableValues();
        if (!is_null($store_infected) && !in_array($store_infected, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_infected', must be one of '%s'",
                    $store_infected,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['store_infected'] = $store_infected;

        return $this;
    }

    /**
     * Gets drop_blocked
     *
     * @return string|null
     */
    public function getDropBlocked()
    {
        return $this->container['drop_blocked'];
    }

    /**
     * Sets drop_blocked
     *
     * @param string|null $drop_blocked Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setDropBlocked($drop_blocked)
    {
        $allowedValues = $this->getDropBlockedAllowableValues();
        if (!is_null($drop_blocked) && !in_array($drop_blocked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_blocked', must be one of '%s'",
                    $drop_blocked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drop_blocked'] = $drop_blocked;

        return $this;
    }

    /**
     * Gets store_blocked
     *
     * @return string|null
     */
    public function getStoreBlocked()
    {
        return $this->container['store_blocked'];
    }

    /**
     * Sets store_blocked
     *
     * @param string|null $store_blocked Quarantine blocked files found in sessions using the selected protocols.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setStoreBlocked($store_blocked)
    {
        $allowedValues = $this->getStoreBlockedAllowableValues();
        if (!is_null($store_blocked) && !in_array($store_blocked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_blocked', must be one of '%s'",
                    $store_blocked,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['store_blocked'] = $store_blocked;

        return $this;
    }

    /**
     * Gets drop_heuristic
     *
     * @return string|null
     */
    public function getDropHeuristic()
    {
        return $this->container['drop_heuristic'];
    }

    /**
     * Sets drop_heuristic
     *
     * @param string|null $drop_heuristic Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    https:HTTPS.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setDropHeuristic($drop_heuristic)
    {
        $allowedValues = $this->getDropHeuristicAllowableValues();
        if (!is_null($drop_heuristic) && !in_array($drop_heuristic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_heuristic', must be one of '%s'",
                    $drop_heuristic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drop_heuristic'] = $drop_heuristic;

        return $this;
    }

    /**
     * Gets store_heuristic
     *
     * @return string|null
     */
    public function getStoreHeuristic()
    {
        return $this->container['store_heuristic'];
    }

    /**
     * Sets store_heuristic
     *
     * @param string|null $store_heuristic Quarantine files detected by heuristics found in sessions using the selected protocols.    imap:IMAP.    smtp:SMTP.    pop3:POP3.    http:HTTP.    ftp:FTP.    nntp:NNTP.    imaps:IMAPS.    smtps:SMTPS.    pop3s:POP3S.    https:HTTPS.    ftps:FTPS.    mapi:MAPI.    cifs:CIFS.    ssh:SSH.
     *
     * @return self
     */
    public function setStoreHeuristic($store_heuristic)
    {
        $allowedValues = $this->getStoreHeuristicAllowableValues();
        if (!is_null($store_heuristic) && !in_array($store_heuristic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_heuristic', must be one of '%s'",
                    $store_heuristic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['store_heuristic'] = $store_heuristic;

        return $this;
    }

    /**
     * Gets lowspace
     *
     * @return string|null
     */
    public function getLowspace()
    {
        return $this->container['lowspace'];
    }

    /**
     * Sets lowspace
     *
     * @param string|null $lowspace Select the method for handling additional files when running low on disk space.    drop-new:Drop (delete) the most recently quarantined files.    ovrw-old:Overwrite the oldest quarantined files. That is, the files that are closest to being deleted from the quarantine.
     *
     * @return self
     */
    public function setLowspace($lowspace)
    {
        $allowedValues = $this->getLowspaceAllowableValues();
        if (!is_null($lowspace) && !in_array($lowspace, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lowspace', must be one of '%s'",
                    $lowspace,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lowspace'] = $lowspace;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them.    NULL:Files that would be quarantined are deleted.    disk:Quarantine files to the FortiGate hard disk.    FortiAnalyzer:FortiAnalyzer
     *
     * @return self
     */
    public function setDestination($destination)
    {
        $allowedValues = $this->getDestinationAllowableValues();
        if (!is_null($destination) && !in_array($destination, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destination', must be one of '%s'",
                    $destination,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destination'] = $destination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


