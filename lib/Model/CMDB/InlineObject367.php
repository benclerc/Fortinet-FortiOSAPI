<?php
/**
 * InlineObject367
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject367 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject367 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_367';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'role' => 'string',
        'default_login_page' => 'string',
        'default_profile' => 'string',
        'cert' => 'string',
        'portal_url' => 'string',
        'entity_id' => 'string',
        'single_sign_on_url' => 'string',
        'single_logout_url' => 'string',
        'idp_entity_id' => 'string',
        'idp_single_sign_on_url' => 'string',
        'idp_single_logout_url' => 'string',
        'idp_cert' => 'string',
        'server_address' => 'string',
        'tolerance' => 'int',
        'life' => 'int',
        'service_providers' => '\Fortigate\FortiOS\Model\CMDB\SystemSamlServiceProviders[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'role' => null,
        'default_login_page' => null,
        'default_profile' => null,
        'cert' => null,
        'portal_url' => null,
        'entity_id' => null,
        'single_sign_on_url' => null,
        'single_logout_url' => null,
        'idp_entity_id' => null,
        'idp_single_sign_on_url' => null,
        'idp_single_logout_url' => null,
        'idp_cert' => null,
        'server_address' => null,
        'tolerance' => null,
        'life' => null,
        'service_providers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'role' => 'role',
        'default_login_page' => 'default-login-page',
        'default_profile' => 'default-profile',
        'cert' => 'cert',
        'portal_url' => 'portal-url',
        'entity_id' => 'entity-id',
        'single_sign_on_url' => 'single-sign-on-url',
        'single_logout_url' => 'single-logout-url',
        'idp_entity_id' => 'idp-entity-id',
        'idp_single_sign_on_url' => 'idp-single-sign-on-url',
        'idp_single_logout_url' => 'idp-single-logout-url',
        'idp_cert' => 'idp-cert',
        'server_address' => 'server-address',
        'tolerance' => 'tolerance',
        'life' => 'life',
        'service_providers' => 'service-providers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'role' => 'setRole',
        'default_login_page' => 'setDefaultLoginPage',
        'default_profile' => 'setDefaultProfile',
        'cert' => 'setCert',
        'portal_url' => 'setPortalUrl',
        'entity_id' => 'setEntityId',
        'single_sign_on_url' => 'setSingleSignOnUrl',
        'single_logout_url' => 'setSingleLogoutUrl',
        'idp_entity_id' => 'setIdpEntityId',
        'idp_single_sign_on_url' => 'setIdpSingleSignOnUrl',
        'idp_single_logout_url' => 'setIdpSingleLogoutUrl',
        'idp_cert' => 'setIdpCert',
        'server_address' => 'setServerAddress',
        'tolerance' => 'setTolerance',
        'life' => 'setLife',
        'service_providers' => 'setServiceProviders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'role' => 'getRole',
        'default_login_page' => 'getDefaultLoginPage',
        'default_profile' => 'getDefaultProfile',
        'cert' => 'getCert',
        'portal_url' => 'getPortalUrl',
        'entity_id' => 'getEntityId',
        'single_sign_on_url' => 'getSingleSignOnUrl',
        'single_logout_url' => 'getSingleLogoutUrl',
        'idp_entity_id' => 'getIdpEntityId',
        'idp_single_sign_on_url' => 'getIdpSingleSignOnUrl',
        'idp_single_logout_url' => 'getIdpSingleLogoutUrl',
        'idp_cert' => 'getIdpCert',
        'server_address' => 'getServerAddress',
        'tolerance' => 'getTolerance',
        'life' => 'getLife',
        'service_providers' => 'getServiceProviders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const ROLE_IDENTITY_PROVIDER = 'identity-provider';
    const ROLE_SERVICE_PROVIDER = 'service-provider';
    const DEFAULT_LOGIN_PAGE_NORMAL = 'normal';
    const DEFAULT_LOGIN_PAGE_SSO = 'sso';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_IDENTITY_PROVIDER,
            self::ROLE_SERVICE_PROVIDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultLoginPageAllowableValues()
    {
        return [
            self::DEFAULT_LOGIN_PAGE_NORMAL,
            self::DEFAULT_LOGIN_PAGE_SSO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['default_login_page'] = $data['default_login_page'] ?? null;
        $this->container['default_profile'] = $data['default_profile'] ?? null;
        $this->container['cert'] = $data['cert'] ?? null;
        $this->container['portal_url'] = $data['portal_url'] ?? null;
        $this->container['entity_id'] = $data['entity_id'] ?? null;
        $this->container['single_sign_on_url'] = $data['single_sign_on_url'] ?? null;
        $this->container['single_logout_url'] = $data['single_logout_url'] ?? null;
        $this->container['idp_entity_id'] = $data['idp_entity_id'] ?? null;
        $this->container['idp_single_sign_on_url'] = $data['idp_single_sign_on_url'] ?? null;
        $this->container['idp_single_logout_url'] = $data['idp_single_logout_url'] ?? null;
        $this->container['idp_cert'] = $data['idp_cert'] ?? null;
        $this->container['server_address'] = $data['server_address'] ?? null;
        $this->container['tolerance'] = $data['tolerance'] ?? null;
        $this->container['life'] = $data['life'] ?? null;
        $this->container['service_providers'] = $data['service_providers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultLoginPageAllowableValues();
        if (!is_null($this->container['default_login_page']) && !in_array($this->container['default_login_page'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_login_page', must be one of '%s'",
                $this->container['default_login_page'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_profile']) && (mb_strlen($this->container['default_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'default_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cert']) && (mb_strlen($this->container['cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['portal_url']) && (mb_strlen($this->container['portal_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'portal_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['entity_id']) && (mb_strlen($this->container['entity_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'entity_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['single_sign_on_url']) && (mb_strlen($this->container['single_sign_on_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'single_sign_on_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['single_logout_url']) && (mb_strlen($this->container['single_logout_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'single_logout_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_entity_id']) && (mb_strlen($this->container['idp_entity_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_entity_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_single_sign_on_url']) && (mb_strlen($this->container['idp_single_sign_on_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_single_sign_on_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_single_logout_url']) && (mb_strlen($this->container['idp_single_logout_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'idp_single_logout_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['idp_cert']) && (mb_strlen($this->container['idp_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'idp_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server_address']) && (mb_strlen($this->container['server_address']) > 63)) {
            $invalidProperties[] = "invalid value for 'server_address', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['tolerance']) && ($this->container['tolerance'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'tolerance', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['tolerance']) && ($this->container['tolerance'] < 0)) {
            $invalidProperties[] = "invalid value for 'tolerance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['life']) && ($this->container['life'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'life', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['life']) && ($this->container['life'] < 0)) {
            $invalidProperties[] = "invalid value for 'life', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['service_providers']) && (count($this->container['service_providers']) > 0)) {
            $invalidProperties[] = "invalid value for 'service_providers', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable SAML authentication (default = disable).    enable:Enable SAML authentication.    disable:Disable SAML authentication.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role SAML role.    identity-provider:Identity Provider.    service-provider:Service Provider.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets default_login_page
     *
     * @return string|null
     */
    public function getDefaultLoginPage()
    {
        return $this->container['default_login_page'];
    }

    /**
     * Sets default_login_page
     *
     * @param string|null $default_login_page Choose default login page.    normal:Use local login page as default.    sso:Use IdP's Single Sign-On page as default.
     *
     * @return self
     */
    public function setDefaultLoginPage($default_login_page)
    {
        $allowedValues = $this->getDefaultLoginPageAllowableValues();
        if (!is_null($default_login_page) && !in_array($default_login_page, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_login_page', must be one of '%s'",
                    $default_login_page,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_login_page'] = $default_login_page;

        return $this;
    }

    /**
     * Gets default_profile
     *
     * @return string|null
     */
    public function getDefaultProfile()
    {
        return $this->container['default_profile'];
    }

    /**
     * Sets default_profile
     *
     * @param string|null $default_profile Default profile for new SSO admin.
     *
     * @return self
     */
    public function setDefaultProfile($default_profile)
    {
        if (!is_null($default_profile) && (mb_strlen($default_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $default_profile when calling InlineObject367., must be smaller than or equal to 35.');
        }

        $this->container['default_profile'] = $default_profile;

        return $this;
    }

    /**
     * Gets cert
     *
     * @return string|null
     */
    public function getCert()
    {
        return $this->container['cert'];
    }

    /**
     * Sets cert
     *
     * @param string|null $cert Certificate to sign SAML messages.
     *
     * @return self
     */
    public function setCert($cert)
    {
        if (!is_null($cert) && (mb_strlen($cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $cert when calling InlineObject367., must be smaller than or equal to 35.');
        }

        $this->container['cert'] = $cert;

        return $this;
    }

    /**
     * Gets portal_url
     *
     * @return string|null
     */
    public function getPortalUrl()
    {
        return $this->container['portal_url'];
    }

    /**
     * Sets portal_url
     *
     * @param string|null $portal_url SP portal URL.
     *
     * @return self
     */
    public function setPortalUrl($portal_url)
    {
        if (!is_null($portal_url) && (mb_strlen($portal_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $portal_url when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['portal_url'] = $portal_url;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id SP entity ID.
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (!is_null($entity_id) && (mb_strlen($entity_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $entity_id when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets single_sign_on_url
     *
     * @return string|null
     */
    public function getSingleSignOnUrl()
    {
        return $this->container['single_sign_on_url'];
    }

    /**
     * Sets single_sign_on_url
     *
     * @param string|null $single_sign_on_url SP single sign-on URL.
     *
     * @return self
     */
    public function setSingleSignOnUrl($single_sign_on_url)
    {
        if (!is_null($single_sign_on_url) && (mb_strlen($single_sign_on_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $single_sign_on_url when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['single_sign_on_url'] = $single_sign_on_url;

        return $this;
    }

    /**
     * Gets single_logout_url
     *
     * @return string|null
     */
    public function getSingleLogoutUrl()
    {
        return $this->container['single_logout_url'];
    }

    /**
     * Sets single_logout_url
     *
     * @param string|null $single_logout_url SP single logout URL.
     *
     * @return self
     */
    public function setSingleLogoutUrl($single_logout_url)
    {
        if (!is_null($single_logout_url) && (mb_strlen($single_logout_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $single_logout_url when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['single_logout_url'] = $single_logout_url;

        return $this;
    }

    /**
     * Gets idp_entity_id
     *
     * @return string|null
     */
    public function getIdpEntityId()
    {
        return $this->container['idp_entity_id'];
    }

    /**
     * Sets idp_entity_id
     *
     * @param string|null $idp_entity_id IDP entity ID.
     *
     * @return self
     */
    public function setIdpEntityId($idp_entity_id)
    {
        if (!is_null($idp_entity_id) && (mb_strlen($idp_entity_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_entity_id when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['idp_entity_id'] = $idp_entity_id;

        return $this;
    }

    /**
     * Gets idp_single_sign_on_url
     *
     * @return string|null
     */
    public function getIdpSingleSignOnUrl()
    {
        return $this->container['idp_single_sign_on_url'];
    }

    /**
     * Sets idp_single_sign_on_url
     *
     * @param string|null $idp_single_sign_on_url IDP single sign-on URL.
     *
     * @return self
     */
    public function setIdpSingleSignOnUrl($idp_single_sign_on_url)
    {
        if (!is_null($idp_single_sign_on_url) && (mb_strlen($idp_single_sign_on_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_single_sign_on_url when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['idp_single_sign_on_url'] = $idp_single_sign_on_url;

        return $this;
    }

    /**
     * Gets idp_single_logout_url
     *
     * @return string|null
     */
    public function getIdpSingleLogoutUrl()
    {
        return $this->container['idp_single_logout_url'];
    }

    /**
     * Sets idp_single_logout_url
     *
     * @param string|null $idp_single_logout_url IDP single logout URL.
     *
     * @return self
     */
    public function setIdpSingleLogoutUrl($idp_single_logout_url)
    {
        if (!is_null($idp_single_logout_url) && (mb_strlen($idp_single_logout_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $idp_single_logout_url when calling InlineObject367., must be smaller than or equal to 255.');
        }

        $this->container['idp_single_logout_url'] = $idp_single_logout_url;

        return $this;
    }

    /**
     * Gets idp_cert
     *
     * @return string|null
     */
    public function getIdpCert()
    {
        return $this->container['idp_cert'];
    }

    /**
     * Sets idp_cert
     *
     * @param string|null $idp_cert IDP certificate name.
     *
     * @return self
     */
    public function setIdpCert($idp_cert)
    {
        if (!is_null($idp_cert) && (mb_strlen($idp_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $idp_cert when calling InlineObject367., must be smaller than or equal to 35.');
        }

        $this->container['idp_cert'] = $idp_cert;

        return $this;
    }

    /**
     * Gets server_address
     *
     * @return string|null
     */
    public function getServerAddress()
    {
        return $this->container['server_address'];
    }

    /**
     * Sets server_address
     *
     * @param string|null $server_address Server address.
     *
     * @return self
     */
    public function setServerAddress($server_address)
    {
        if (!is_null($server_address) && (mb_strlen($server_address) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server_address when calling InlineObject367., must be smaller than or equal to 63.');
        }

        $this->container['server_address'] = $server_address;

        return $this;
    }

    /**
     * Gets tolerance
     *
     * @return int|null
     */
    public function getTolerance()
    {
        return $this->container['tolerance'];
    }

    /**
     * Sets tolerance
     *
     * @param int|null $tolerance Tolerance to the range of time when the assertion is valid (in minutes).
     *
     * @return self
     */
    public function setTolerance($tolerance)
    {

        if (!is_null($tolerance) && ($tolerance > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $tolerance when calling InlineObject367., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($tolerance) && ($tolerance < 0)) {
            throw new \InvalidArgumentException('invalid value for $tolerance when calling InlineObject367., must be bigger than or equal to 0.');
        }

        $this->container['tolerance'] = $tolerance;

        return $this;
    }

    /**
     * Gets life
     *
     * @return int|null
     */
    public function getLife()
    {
        return $this->container['life'];
    }

    /**
     * Sets life
     *
     * @param int|null $life Length of the range of time when the assertion is valid (in minutes).
     *
     * @return self
     */
    public function setLife($life)
    {

        if (!is_null($life) && ($life > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $life when calling InlineObject367., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($life) && ($life < 0)) {
            throw new \InvalidArgumentException('invalid value for $life when calling InlineObject367., must be bigger than or equal to 0.');
        }

        $this->container['life'] = $life;

        return $this;
    }

    /**
     * Gets service_providers
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSamlServiceProviders[]|null
     */
    public function getServiceProviders()
    {
        return $this->container['service_providers'];
    }

    /**
     * Sets service_providers
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSamlServiceProviders[]|null $service_providers Authorized service providers.
     *
     * @return self
     */
    public function setServiceProviders($service_providers)
    {

        if (!is_null($service_providers) && (count($service_providers) > 0)) {
            throw new \InvalidArgumentException('invalid value for $service_providers when calling InlineObject367., number of items must be less than or equal to 0.');
        }
        $this->container['service_providers'] = $service_providers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


