<?php
/**
 * InlineObject478
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject478 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject478 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_478';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'interface' => 'string',
        'ike_version' => 'string',
        'remote_gw' => 'string',
        'local_gw' => 'string',
        'remotegw_ddns' => 'string',
        'keylife' => 'int',
        'certificate' => '\Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameCertificate[]',
        'authmethod' => 'string',
        'authmethod_remote' => 'string',
        'mode' => 'string',
        'peertype' => 'string',
        'peerid' => 'string',
        'usrgrp' => 'string',
        'peer' => 'string',
        'peergrp' => 'string',
        'mode_cfg' => 'string',
        'assign_ip' => 'string',
        'assign_ip_from' => 'string',
        'ipv4_start_ip' => 'string',
        'ipv4_end_ip' => 'string',
        'ipv4_netmask' => 'string',
        'dhcp_ra_giaddr' => 'string',
        'dhcp6_ra_linkaddr' => 'string',
        'dns_mode' => 'string',
        'ipv4_dns_server1' => 'string',
        'ipv4_dns_server2' => 'string',
        'ipv4_dns_server3' => 'string',
        'ipv4_wins_server1' => 'string',
        'ipv4_wins_server2' => 'string',
        'ipv4_exclude_range' => '\Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv4ExcludeRange[]',
        'ipv4_split_include' => 'string',
        'split_include_service' => 'string',
        'ipv4_name' => 'string',
        'ipv6_start_ip' => 'string',
        'ipv6_end_ip' => 'string',
        'ipv6_prefix' => 'int',
        'ipv6_dns_server1' => 'string',
        'ipv6_dns_server2' => 'string',
        'ipv6_dns_server3' => 'string',
        'ipv6_exclude_range' => '\Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv6ExcludeRange[]',
        'ipv6_split_include' => 'string',
        'ipv6_name' => 'string',
        'unity_support' => 'string',
        'domain' => 'string',
        'banner' => 'string',
        'include_local_lan' => 'string',
        'ipv4_split_exclude' => 'string',
        'ipv6_split_exclude' => 'string',
        'save_password' => 'string',
        'client_auto_negotiate' => 'string',
        'client_keep_alive' => 'string',
        'backup_gateway' => '\Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameBackupGateway[]',
        'proposal' => 'string',
        'add_route' => 'string',
        'add_gw_route' => 'string',
        'psksecret' => 'string',
        'psksecret_remote' => 'string',
        'keepalive' => 'int',
        'distance' => 'int',
        'priority' => 'int',
        'localid' => 'string',
        'localid_type' => 'string',
        'auto_negotiate' => 'string',
        'negotiate_timeout' => 'int',
        'fragmentation' => 'string',
        'dpd' => 'string',
        'dpd_retrycount' => 'int',
        'dpd_retryinterval' => 'string',
        'forticlient_enforcement' => 'string',
        'comments' => 'string',
        'npu_offload' => 'string',
        'send_cert_chain' => 'string',
        'dhgrp' => 'string',
        'suite_b' => 'string',
        'eap' => 'string',
        'eap_identity' => 'string',
        'eap_exclude_peergrp' => 'string',
        'acct_verify' => 'string',
        'ppk' => 'string',
        'ppk_secret' => 'string',
        'ppk_identity' => 'string',
        'wizard_type' => 'string',
        'xauthtype' => 'string',
        'reauth' => 'string',
        'authusr' => 'string',
        'authpasswd' => 'string',
        'group_authentication' => 'string',
        'group_authentication_secret' => 'string',
        'authusrgrp' => 'string',
        'mesh_selector_type' => 'string',
        'idle_timeout' => 'string',
        'idle_timeoutinterval' => 'int',
        'ha_sync_esp_seqno' => 'string',
        'nattraversal' => 'string',
        'esn' => 'string',
        'fragmentation_mtu' => 'int',
        'childless_ike' => 'string',
        'rekey' => 'string',
        'digital_signature_auth' => 'string',
        'signature_hash_alg' => 'string',
        'rsa_signature_format' => 'string',
        'enforce_unique_id' => 'string',
        'cert_id_validation' => 'string',
        'fec_egress' => 'string',
        'fec_send_timeout' => 'int',
        'fec_base' => 'int',
        'fec_redundant' => 'int',
        'fec_ingress' => 'string',
        'fec_receive_timeout' => 'int',
        'network_overlay' => 'string',
        'network_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'interface' => null,
        'ike_version' => null,
        'remote_gw' => 'ipv4',
        'local_gw' => 'ipv4',
        'remotegw_ddns' => null,
        'keylife' => null,
        'certificate' => null,
        'authmethod' => null,
        'authmethod_remote' => null,
        'mode' => null,
        'peertype' => null,
        'peerid' => null,
        'usrgrp' => null,
        'peer' => null,
        'peergrp' => null,
        'mode_cfg' => null,
        'assign_ip' => null,
        'assign_ip_from' => null,
        'ipv4_start_ip' => 'ipv4',
        'ipv4_end_ip' => 'ipv4',
        'ipv4_netmask' => null,
        'dhcp_ra_giaddr' => 'ipv4',
        'dhcp6_ra_linkaddr' => 'ipv6',
        'dns_mode' => null,
        'ipv4_dns_server1' => 'ipv4',
        'ipv4_dns_server2' => 'ipv4',
        'ipv4_dns_server3' => 'ipv4',
        'ipv4_wins_server1' => 'ipv4',
        'ipv4_wins_server2' => 'ipv4',
        'ipv4_exclude_range' => null,
        'ipv4_split_include' => null,
        'split_include_service' => null,
        'ipv4_name' => null,
        'ipv6_start_ip' => 'ipv6',
        'ipv6_end_ip' => 'ipv6',
        'ipv6_prefix' => null,
        'ipv6_dns_server1' => 'ipv6',
        'ipv6_dns_server2' => 'ipv6',
        'ipv6_dns_server3' => 'ipv6',
        'ipv6_exclude_range' => null,
        'ipv6_split_include' => null,
        'ipv6_name' => null,
        'unity_support' => null,
        'domain' => null,
        'banner' => null,
        'include_local_lan' => null,
        'ipv4_split_exclude' => null,
        'ipv6_split_exclude' => null,
        'save_password' => null,
        'client_auto_negotiate' => null,
        'client_keep_alive' => null,
        'backup_gateway' => null,
        'proposal' => null,
        'add_route' => null,
        'add_gw_route' => null,
        'psksecret' => null,
        'psksecret_remote' => null,
        'keepalive' => null,
        'distance' => null,
        'priority' => null,
        'localid' => null,
        'localid_type' => null,
        'auto_negotiate' => null,
        'negotiate_timeout' => null,
        'fragmentation' => null,
        'dpd' => null,
        'dpd_retrycount' => null,
        'dpd_retryinterval' => null,
        'forticlient_enforcement' => null,
        'comments' => null,
        'npu_offload' => null,
        'send_cert_chain' => null,
        'dhgrp' => null,
        'suite_b' => null,
        'eap' => null,
        'eap_identity' => null,
        'eap_exclude_peergrp' => null,
        'acct_verify' => null,
        'ppk' => null,
        'ppk_secret' => null,
        'ppk_identity' => null,
        'wizard_type' => null,
        'xauthtype' => null,
        'reauth' => null,
        'authusr' => null,
        'authpasswd' => 'password',
        'group_authentication' => null,
        'group_authentication_secret' => null,
        'authusrgrp' => null,
        'mesh_selector_type' => null,
        'idle_timeout' => null,
        'idle_timeoutinterval' => null,
        'ha_sync_esp_seqno' => null,
        'nattraversal' => null,
        'esn' => null,
        'fragmentation_mtu' => null,
        'childless_ike' => null,
        'rekey' => null,
        'digital_signature_auth' => null,
        'signature_hash_alg' => null,
        'rsa_signature_format' => null,
        'enforce_unique_id' => null,
        'cert_id_validation' => null,
        'fec_egress' => null,
        'fec_send_timeout' => null,
        'fec_base' => null,
        'fec_redundant' => null,
        'fec_ingress' => null,
        'fec_receive_timeout' => null,
        'network_overlay' => null,
        'network_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'interface' => 'interface',
        'ike_version' => 'ike-version',
        'remote_gw' => 'remote-gw',
        'local_gw' => 'local-gw',
        'remotegw_ddns' => 'remotegw-ddns',
        'keylife' => 'keylife',
        'certificate' => 'certificate',
        'authmethod' => 'authmethod',
        'authmethod_remote' => 'authmethod-remote',
        'mode' => 'mode',
        'peertype' => 'peertype',
        'peerid' => 'peerid',
        'usrgrp' => 'usrgrp',
        'peer' => 'peer',
        'peergrp' => 'peergrp',
        'mode_cfg' => 'mode-cfg',
        'assign_ip' => 'assign-ip',
        'assign_ip_from' => 'assign-ip-from',
        'ipv4_start_ip' => 'ipv4-start-ip',
        'ipv4_end_ip' => 'ipv4-end-ip',
        'ipv4_netmask' => 'ipv4-netmask',
        'dhcp_ra_giaddr' => 'dhcp-ra-giaddr',
        'dhcp6_ra_linkaddr' => 'dhcp6-ra-linkaddr',
        'dns_mode' => 'dns-mode',
        'ipv4_dns_server1' => 'ipv4-dns-server1',
        'ipv4_dns_server2' => 'ipv4-dns-server2',
        'ipv4_dns_server3' => 'ipv4-dns-server3',
        'ipv4_wins_server1' => 'ipv4-wins-server1',
        'ipv4_wins_server2' => 'ipv4-wins-server2',
        'ipv4_exclude_range' => 'ipv4-exclude-range',
        'ipv4_split_include' => 'ipv4-split-include',
        'split_include_service' => 'split-include-service',
        'ipv4_name' => 'ipv4-name',
        'ipv6_start_ip' => 'ipv6-start-ip',
        'ipv6_end_ip' => 'ipv6-end-ip',
        'ipv6_prefix' => 'ipv6-prefix',
        'ipv6_dns_server1' => 'ipv6-dns-server1',
        'ipv6_dns_server2' => 'ipv6-dns-server2',
        'ipv6_dns_server3' => 'ipv6-dns-server3',
        'ipv6_exclude_range' => 'ipv6-exclude-range',
        'ipv6_split_include' => 'ipv6-split-include',
        'ipv6_name' => 'ipv6-name',
        'unity_support' => 'unity-support',
        'domain' => 'domain',
        'banner' => 'banner',
        'include_local_lan' => 'include-local-lan',
        'ipv4_split_exclude' => 'ipv4-split-exclude',
        'ipv6_split_exclude' => 'ipv6-split-exclude',
        'save_password' => 'save-password',
        'client_auto_negotiate' => 'client-auto-negotiate',
        'client_keep_alive' => 'client-keep-alive',
        'backup_gateway' => 'backup-gateway',
        'proposal' => 'proposal',
        'add_route' => 'add-route',
        'add_gw_route' => 'add-gw-route',
        'psksecret' => 'psksecret',
        'psksecret_remote' => 'psksecret-remote',
        'keepalive' => 'keepalive',
        'distance' => 'distance',
        'priority' => 'priority',
        'localid' => 'localid',
        'localid_type' => 'localid-type',
        'auto_negotiate' => 'auto-negotiate',
        'negotiate_timeout' => 'negotiate-timeout',
        'fragmentation' => 'fragmentation',
        'dpd' => 'dpd',
        'dpd_retrycount' => 'dpd-retrycount',
        'dpd_retryinterval' => 'dpd-retryinterval',
        'forticlient_enforcement' => 'forticlient-enforcement',
        'comments' => 'comments',
        'npu_offload' => 'npu-offload',
        'send_cert_chain' => 'send-cert-chain',
        'dhgrp' => 'dhgrp',
        'suite_b' => 'suite-b',
        'eap' => 'eap',
        'eap_identity' => 'eap-identity',
        'eap_exclude_peergrp' => 'eap-exclude-peergrp',
        'acct_verify' => 'acct-verify',
        'ppk' => 'ppk',
        'ppk_secret' => 'ppk-secret',
        'ppk_identity' => 'ppk-identity',
        'wizard_type' => 'wizard-type',
        'xauthtype' => 'xauthtype',
        'reauth' => 'reauth',
        'authusr' => 'authusr',
        'authpasswd' => 'authpasswd',
        'group_authentication' => 'group-authentication',
        'group_authentication_secret' => 'group-authentication-secret',
        'authusrgrp' => 'authusrgrp',
        'mesh_selector_type' => 'mesh-selector-type',
        'idle_timeout' => 'idle-timeout',
        'idle_timeoutinterval' => 'idle-timeoutinterval',
        'ha_sync_esp_seqno' => 'ha-sync-esp-seqno',
        'nattraversal' => 'nattraversal',
        'esn' => 'esn',
        'fragmentation_mtu' => 'fragmentation-mtu',
        'childless_ike' => 'childless-ike',
        'rekey' => 'rekey',
        'digital_signature_auth' => 'digital-signature-auth',
        'signature_hash_alg' => 'signature-hash-alg',
        'rsa_signature_format' => 'rsa-signature-format',
        'enforce_unique_id' => 'enforce-unique-id',
        'cert_id_validation' => 'cert-id-validation',
        'fec_egress' => 'fec-egress',
        'fec_send_timeout' => 'fec-send-timeout',
        'fec_base' => 'fec-base',
        'fec_redundant' => 'fec-redundant',
        'fec_ingress' => 'fec-ingress',
        'fec_receive_timeout' => 'fec-receive-timeout',
        'network_overlay' => 'network-overlay',
        'network_id' => 'network-id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'interface' => 'setInterface',
        'ike_version' => 'setIkeVersion',
        'remote_gw' => 'setRemoteGw',
        'local_gw' => 'setLocalGw',
        'remotegw_ddns' => 'setRemotegwDdns',
        'keylife' => 'setKeylife',
        'certificate' => 'setCertificate',
        'authmethod' => 'setAuthmethod',
        'authmethod_remote' => 'setAuthmethodRemote',
        'mode' => 'setMode',
        'peertype' => 'setPeertype',
        'peerid' => 'setPeerid',
        'usrgrp' => 'setUsrgrp',
        'peer' => 'setPeer',
        'peergrp' => 'setPeergrp',
        'mode_cfg' => 'setModeCfg',
        'assign_ip' => 'setAssignIp',
        'assign_ip_from' => 'setAssignIpFrom',
        'ipv4_start_ip' => 'setIpv4StartIp',
        'ipv4_end_ip' => 'setIpv4EndIp',
        'ipv4_netmask' => 'setIpv4Netmask',
        'dhcp_ra_giaddr' => 'setDhcpRaGiaddr',
        'dhcp6_ra_linkaddr' => 'setDhcp6RaLinkaddr',
        'dns_mode' => 'setDnsMode',
        'ipv4_dns_server1' => 'setIpv4DnsServer1',
        'ipv4_dns_server2' => 'setIpv4DnsServer2',
        'ipv4_dns_server3' => 'setIpv4DnsServer3',
        'ipv4_wins_server1' => 'setIpv4WinsServer1',
        'ipv4_wins_server2' => 'setIpv4WinsServer2',
        'ipv4_exclude_range' => 'setIpv4ExcludeRange',
        'ipv4_split_include' => 'setIpv4SplitInclude',
        'split_include_service' => 'setSplitIncludeService',
        'ipv4_name' => 'setIpv4Name',
        'ipv6_start_ip' => 'setIpv6StartIp',
        'ipv6_end_ip' => 'setIpv6EndIp',
        'ipv6_prefix' => 'setIpv6Prefix',
        'ipv6_dns_server1' => 'setIpv6DnsServer1',
        'ipv6_dns_server2' => 'setIpv6DnsServer2',
        'ipv6_dns_server3' => 'setIpv6DnsServer3',
        'ipv6_exclude_range' => 'setIpv6ExcludeRange',
        'ipv6_split_include' => 'setIpv6SplitInclude',
        'ipv6_name' => 'setIpv6Name',
        'unity_support' => 'setUnitySupport',
        'domain' => 'setDomain',
        'banner' => 'setBanner',
        'include_local_lan' => 'setIncludeLocalLan',
        'ipv4_split_exclude' => 'setIpv4SplitExclude',
        'ipv6_split_exclude' => 'setIpv6SplitExclude',
        'save_password' => 'setSavePassword',
        'client_auto_negotiate' => 'setClientAutoNegotiate',
        'client_keep_alive' => 'setClientKeepAlive',
        'backup_gateway' => 'setBackupGateway',
        'proposal' => 'setProposal',
        'add_route' => 'setAddRoute',
        'add_gw_route' => 'setAddGwRoute',
        'psksecret' => 'setPsksecret',
        'psksecret_remote' => 'setPsksecretRemote',
        'keepalive' => 'setKeepalive',
        'distance' => 'setDistance',
        'priority' => 'setPriority',
        'localid' => 'setLocalid',
        'localid_type' => 'setLocalidType',
        'auto_negotiate' => 'setAutoNegotiate',
        'negotiate_timeout' => 'setNegotiateTimeout',
        'fragmentation' => 'setFragmentation',
        'dpd' => 'setDpd',
        'dpd_retrycount' => 'setDpdRetrycount',
        'dpd_retryinterval' => 'setDpdRetryinterval',
        'forticlient_enforcement' => 'setForticlientEnforcement',
        'comments' => 'setComments',
        'npu_offload' => 'setNpuOffload',
        'send_cert_chain' => 'setSendCertChain',
        'dhgrp' => 'setDhgrp',
        'suite_b' => 'setSuiteB',
        'eap' => 'setEap',
        'eap_identity' => 'setEapIdentity',
        'eap_exclude_peergrp' => 'setEapExcludePeergrp',
        'acct_verify' => 'setAcctVerify',
        'ppk' => 'setPpk',
        'ppk_secret' => 'setPpkSecret',
        'ppk_identity' => 'setPpkIdentity',
        'wizard_type' => 'setWizardType',
        'xauthtype' => 'setXauthtype',
        'reauth' => 'setReauth',
        'authusr' => 'setAuthusr',
        'authpasswd' => 'setAuthpasswd',
        'group_authentication' => 'setGroupAuthentication',
        'group_authentication_secret' => 'setGroupAuthenticationSecret',
        'authusrgrp' => 'setAuthusrgrp',
        'mesh_selector_type' => 'setMeshSelectorType',
        'idle_timeout' => 'setIdleTimeout',
        'idle_timeoutinterval' => 'setIdleTimeoutinterval',
        'ha_sync_esp_seqno' => 'setHaSyncEspSeqno',
        'nattraversal' => 'setNattraversal',
        'esn' => 'setEsn',
        'fragmentation_mtu' => 'setFragmentationMtu',
        'childless_ike' => 'setChildlessIke',
        'rekey' => 'setRekey',
        'digital_signature_auth' => 'setDigitalSignatureAuth',
        'signature_hash_alg' => 'setSignatureHashAlg',
        'rsa_signature_format' => 'setRsaSignatureFormat',
        'enforce_unique_id' => 'setEnforceUniqueId',
        'cert_id_validation' => 'setCertIdValidation',
        'fec_egress' => 'setFecEgress',
        'fec_send_timeout' => 'setFecSendTimeout',
        'fec_base' => 'setFecBase',
        'fec_redundant' => 'setFecRedundant',
        'fec_ingress' => 'setFecIngress',
        'fec_receive_timeout' => 'setFecReceiveTimeout',
        'network_overlay' => 'setNetworkOverlay',
        'network_id' => 'setNetworkId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'interface' => 'getInterface',
        'ike_version' => 'getIkeVersion',
        'remote_gw' => 'getRemoteGw',
        'local_gw' => 'getLocalGw',
        'remotegw_ddns' => 'getRemotegwDdns',
        'keylife' => 'getKeylife',
        'certificate' => 'getCertificate',
        'authmethod' => 'getAuthmethod',
        'authmethod_remote' => 'getAuthmethodRemote',
        'mode' => 'getMode',
        'peertype' => 'getPeertype',
        'peerid' => 'getPeerid',
        'usrgrp' => 'getUsrgrp',
        'peer' => 'getPeer',
        'peergrp' => 'getPeergrp',
        'mode_cfg' => 'getModeCfg',
        'assign_ip' => 'getAssignIp',
        'assign_ip_from' => 'getAssignIpFrom',
        'ipv4_start_ip' => 'getIpv4StartIp',
        'ipv4_end_ip' => 'getIpv4EndIp',
        'ipv4_netmask' => 'getIpv4Netmask',
        'dhcp_ra_giaddr' => 'getDhcpRaGiaddr',
        'dhcp6_ra_linkaddr' => 'getDhcp6RaLinkaddr',
        'dns_mode' => 'getDnsMode',
        'ipv4_dns_server1' => 'getIpv4DnsServer1',
        'ipv4_dns_server2' => 'getIpv4DnsServer2',
        'ipv4_dns_server3' => 'getIpv4DnsServer3',
        'ipv4_wins_server1' => 'getIpv4WinsServer1',
        'ipv4_wins_server2' => 'getIpv4WinsServer2',
        'ipv4_exclude_range' => 'getIpv4ExcludeRange',
        'ipv4_split_include' => 'getIpv4SplitInclude',
        'split_include_service' => 'getSplitIncludeService',
        'ipv4_name' => 'getIpv4Name',
        'ipv6_start_ip' => 'getIpv6StartIp',
        'ipv6_end_ip' => 'getIpv6EndIp',
        'ipv6_prefix' => 'getIpv6Prefix',
        'ipv6_dns_server1' => 'getIpv6DnsServer1',
        'ipv6_dns_server2' => 'getIpv6DnsServer2',
        'ipv6_dns_server3' => 'getIpv6DnsServer3',
        'ipv6_exclude_range' => 'getIpv6ExcludeRange',
        'ipv6_split_include' => 'getIpv6SplitInclude',
        'ipv6_name' => 'getIpv6Name',
        'unity_support' => 'getUnitySupport',
        'domain' => 'getDomain',
        'banner' => 'getBanner',
        'include_local_lan' => 'getIncludeLocalLan',
        'ipv4_split_exclude' => 'getIpv4SplitExclude',
        'ipv6_split_exclude' => 'getIpv6SplitExclude',
        'save_password' => 'getSavePassword',
        'client_auto_negotiate' => 'getClientAutoNegotiate',
        'client_keep_alive' => 'getClientKeepAlive',
        'backup_gateway' => 'getBackupGateway',
        'proposal' => 'getProposal',
        'add_route' => 'getAddRoute',
        'add_gw_route' => 'getAddGwRoute',
        'psksecret' => 'getPsksecret',
        'psksecret_remote' => 'getPsksecretRemote',
        'keepalive' => 'getKeepalive',
        'distance' => 'getDistance',
        'priority' => 'getPriority',
        'localid' => 'getLocalid',
        'localid_type' => 'getLocalidType',
        'auto_negotiate' => 'getAutoNegotiate',
        'negotiate_timeout' => 'getNegotiateTimeout',
        'fragmentation' => 'getFragmentation',
        'dpd' => 'getDpd',
        'dpd_retrycount' => 'getDpdRetrycount',
        'dpd_retryinterval' => 'getDpdRetryinterval',
        'forticlient_enforcement' => 'getForticlientEnforcement',
        'comments' => 'getComments',
        'npu_offload' => 'getNpuOffload',
        'send_cert_chain' => 'getSendCertChain',
        'dhgrp' => 'getDhgrp',
        'suite_b' => 'getSuiteB',
        'eap' => 'getEap',
        'eap_identity' => 'getEapIdentity',
        'eap_exclude_peergrp' => 'getEapExcludePeergrp',
        'acct_verify' => 'getAcctVerify',
        'ppk' => 'getPpk',
        'ppk_secret' => 'getPpkSecret',
        'ppk_identity' => 'getPpkIdentity',
        'wizard_type' => 'getWizardType',
        'xauthtype' => 'getXauthtype',
        'reauth' => 'getReauth',
        'authusr' => 'getAuthusr',
        'authpasswd' => 'getAuthpasswd',
        'group_authentication' => 'getGroupAuthentication',
        'group_authentication_secret' => 'getGroupAuthenticationSecret',
        'authusrgrp' => 'getAuthusrgrp',
        'mesh_selector_type' => 'getMeshSelectorType',
        'idle_timeout' => 'getIdleTimeout',
        'idle_timeoutinterval' => 'getIdleTimeoutinterval',
        'ha_sync_esp_seqno' => 'getHaSyncEspSeqno',
        'nattraversal' => 'getNattraversal',
        'esn' => 'getEsn',
        'fragmentation_mtu' => 'getFragmentationMtu',
        'childless_ike' => 'getChildlessIke',
        'rekey' => 'getRekey',
        'digital_signature_auth' => 'getDigitalSignatureAuth',
        'signature_hash_alg' => 'getSignatureHashAlg',
        'rsa_signature_format' => 'getRsaSignatureFormat',
        'enforce_unique_id' => 'getEnforceUniqueId',
        'cert_id_validation' => 'getCertIdValidation',
        'fec_egress' => 'getFecEgress',
        'fec_send_timeout' => 'getFecSendTimeout',
        'fec_base' => 'getFecBase',
        'fec_redundant' => 'getFecRedundant',
        'fec_ingress' => 'getFecIngress',
        'fec_receive_timeout' => 'getFecReceiveTimeout',
        'network_overlay' => 'getNetworkOverlay',
        'network_id' => 'getNetworkId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE__STATIC = 'static';
    const TYPE_DYNAMIC = 'dynamic';
    const TYPE_DDNS = 'ddns';
    const IKE_VERSION__1 = '1';
    const IKE_VERSION__2 = '2';
    const AUTHMETHOD_PSK = 'psk';
    const AUTHMETHOD_SIGNATURE = 'signature';
    const AUTHMETHOD_REMOTE_PSK = 'psk';
    const AUTHMETHOD_REMOTE_SIGNATURE = 'signature';
    const MODE_AGGRESSIVE = 'aggressive';
    const MODE_MAIN = 'main';
    const PEERTYPE_ANY = 'any';
    const PEERTYPE_ONE = 'one';
    const PEERTYPE_DIALUP = 'dialup';
    const PEERTYPE_PEER = 'peer';
    const PEERTYPE_PEERGRP = 'peergrp';
    const MODE_CFG_DISABLE = 'disable';
    const MODE_CFG_ENABLE = 'enable';
    const ASSIGN_IP_DISABLE = 'disable';
    const ASSIGN_IP_ENABLE = 'enable';
    const ASSIGN_IP_FROM_RANGE = 'range';
    const ASSIGN_IP_FROM_USRGRP = 'usrgrp';
    const ASSIGN_IP_FROM_DHCP = 'dhcp';
    const ASSIGN_IP_FROM_NAME = 'name';
    const DNS_MODE_MANUAL = 'manual';
    const DNS_MODE_AUTO = 'auto';
    const UNITY_SUPPORT_DISABLE = 'disable';
    const UNITY_SUPPORT_ENABLE = 'enable';
    const INCLUDE_LOCAL_LAN_DISABLE = 'disable';
    const INCLUDE_LOCAL_LAN_ENABLE = 'enable';
    const SAVE_PASSWORD_DISABLE = 'disable';
    const SAVE_PASSWORD_ENABLE = 'enable';
    const CLIENT_AUTO_NEGOTIATE_DISABLE = 'disable';
    const CLIENT_AUTO_NEGOTIATE_ENABLE = 'enable';
    const CLIENT_KEEP_ALIVE_DISABLE = 'disable';
    const CLIENT_KEEP_ALIVE_ENABLE = 'enable';
    const PROPOSAL_DES_MD5 = 'des-md5';
    const PROPOSAL_DES_SHA1 = 'des-sha1';
    const PROPOSAL_DES_SHA256 = 'des-sha256';
    const PROPOSAL_DES_SHA384 = 'des-sha384';
    const PROPOSAL_DES_SHA512 = 'des-sha512';
    const PROPOSAL__3DES_MD5 = '3des-md5';
    const PROPOSAL__3DES_SHA1 = '3des-sha1';
    const PROPOSAL__3DES_SHA256 = '3des-sha256';
    const PROPOSAL__3DES_SHA384 = '3des-sha384';
    const PROPOSAL__3DES_SHA512 = '3des-sha512';
    const PROPOSAL_AES128_MD5 = 'aes128-md5';
    const PROPOSAL_AES128_SHA1 = 'aes128-sha1';
    const PROPOSAL_AES128_SHA256 = 'aes128-sha256';
    const PROPOSAL_AES128_SHA384 = 'aes128-sha384';
    const PROPOSAL_AES128_SHA512 = 'aes128-sha512';
    const PROPOSAL_AES128GCM_PRFSHA1 = 'aes128gcm-prfsha1';
    const PROPOSAL_AES128GCM_PRFSHA256 = 'aes128gcm-prfsha256';
    const PROPOSAL_AES128GCM_PRFSHA384 = 'aes128gcm-prfsha384';
    const PROPOSAL_AES128GCM_PRFSHA512 = 'aes128gcm-prfsha512';
    const PROPOSAL_AES192_MD5 = 'aes192-md5';
    const PROPOSAL_AES192_SHA1 = 'aes192-sha1';
    const PROPOSAL_AES192_SHA256 = 'aes192-sha256';
    const PROPOSAL_AES192_SHA384 = 'aes192-sha384';
    const PROPOSAL_AES192_SHA512 = 'aes192-sha512';
    const PROPOSAL_AES256_MD5 = 'aes256-md5';
    const PROPOSAL_AES256_SHA1 = 'aes256-sha1';
    const PROPOSAL_AES256_SHA256 = 'aes256-sha256';
    const PROPOSAL_AES256_SHA384 = 'aes256-sha384';
    const PROPOSAL_AES256_SHA512 = 'aes256-sha512';
    const PROPOSAL_AES256GCM_PRFSHA1 = 'aes256gcm-prfsha1';
    const PROPOSAL_AES256GCM_PRFSHA256 = 'aes256gcm-prfsha256';
    const PROPOSAL_AES256GCM_PRFSHA384 = 'aes256gcm-prfsha384';
    const PROPOSAL_AES256GCM_PRFSHA512 = 'aes256gcm-prfsha512';
    const PROPOSAL_CHACHA20POLY1305_PRFSHA1 = 'chacha20poly1305-prfsha1';
    const PROPOSAL_CHACHA20POLY1305_PRFSHA256 = 'chacha20poly1305-prfsha256';
    const PROPOSAL_CHACHA20POLY1305_PRFSHA384 = 'chacha20poly1305-prfsha384';
    const PROPOSAL_CHACHA20POLY1305_PRFSHA512 = 'chacha20poly1305-prfsha512';
    const PROPOSAL_ARIA128_MD5 = 'aria128-md5';
    const PROPOSAL_ARIA128_SHA1 = 'aria128-sha1';
    const PROPOSAL_ARIA128_SHA256 = 'aria128-sha256';
    const PROPOSAL_ARIA128_SHA384 = 'aria128-sha384';
    const PROPOSAL_ARIA128_SHA512 = 'aria128-sha512';
    const PROPOSAL_ARIA192_MD5 = 'aria192-md5';
    const PROPOSAL_ARIA192_SHA1 = 'aria192-sha1';
    const PROPOSAL_ARIA192_SHA256 = 'aria192-sha256';
    const PROPOSAL_ARIA192_SHA384 = 'aria192-sha384';
    const PROPOSAL_ARIA192_SHA512 = 'aria192-sha512';
    const PROPOSAL_ARIA256_MD5 = 'aria256-md5';
    const PROPOSAL_ARIA256_SHA1 = 'aria256-sha1';
    const PROPOSAL_ARIA256_SHA256 = 'aria256-sha256';
    const PROPOSAL_ARIA256_SHA384 = 'aria256-sha384';
    const PROPOSAL_ARIA256_SHA512 = 'aria256-sha512';
    const PROPOSAL_SEED_MD5 = 'seed-md5';
    const PROPOSAL_SEED_SHA1 = 'seed-sha1';
    const PROPOSAL_SEED_SHA256 = 'seed-sha256';
    const PROPOSAL_SEED_SHA384 = 'seed-sha384';
    const PROPOSAL_SEED_SHA512 = 'seed-sha512';
    const ADD_ROUTE_DISABLE = 'disable';
    const ADD_ROUTE_ENABLE = 'enable';
    const ADD_GW_ROUTE_ENABLE = 'enable';
    const ADD_GW_ROUTE_DISABLE = 'disable';
    const LOCALID_TYPE_AUTO = 'auto';
    const LOCALID_TYPE_FQDN = 'fqdn';
    const LOCALID_TYPE_USER_FQDN = 'user-fqdn';
    const LOCALID_TYPE_KEYID = 'keyid';
    const LOCALID_TYPE_ADDRESS = 'address';
    const LOCALID_TYPE_ASN1DN = 'asn1dn';
    const AUTO_NEGOTIATE_ENABLE = 'enable';
    const AUTO_NEGOTIATE_DISABLE = 'disable';
    const FRAGMENTATION_ENABLE = 'enable';
    const FRAGMENTATION_DISABLE = 'disable';
    const DPD_DISABLE = 'disable';
    const DPD_ON_IDLE = 'on-idle';
    const DPD_ON_DEMAND = 'on-demand';
    const FORTICLIENT_ENFORCEMENT_ENABLE = 'enable';
    const FORTICLIENT_ENFORCEMENT_DISABLE = 'disable';
    const NPU_OFFLOAD_ENABLE = 'enable';
    const NPU_OFFLOAD_DISABLE = 'disable';
    const SEND_CERT_CHAIN_ENABLE = 'enable';
    const SEND_CERT_CHAIN_DISABLE = 'disable';
    const DHGRP__1 = '1';
    const DHGRP__2 = '2';
    const DHGRP__5 = '5';
    const DHGRP__14 = '14';
    const DHGRP__15 = '15';
    const DHGRP__16 = '16';
    const DHGRP__17 = '17';
    const DHGRP__18 = '18';
    const DHGRP__19 = '19';
    const DHGRP__20 = '20';
    const DHGRP__21 = '21';
    const DHGRP__27 = '27';
    const DHGRP__28 = '28';
    const DHGRP__29 = '29';
    const DHGRP__30 = '30';
    const DHGRP__31 = '31';
    const DHGRP__32 = '32';
    const SUITE_B_DISABLE = 'disable';
    const SUITE_B_SUITE_B_GCM_128 = 'suite-b-gcm-128';
    const SUITE_B_SUITE_B_GCM_256 = 'suite-b-gcm-256';
    const EAP_ENABLE = 'enable';
    const EAP_DISABLE = 'disable';
    const EAP_IDENTITY_USE_ID_PAYLOAD = 'use-id-payload';
    const EAP_IDENTITY_SEND_REQUEST = 'send-request';
    const ACCT_VERIFY_ENABLE = 'enable';
    const ACCT_VERIFY_DISABLE = 'disable';
    const PPK_DISABLE = 'disable';
    const PPK_ALLOW = 'allow';
    const PPK__REQUIRE = 'require';
    const WIZARD_TYPE_CUSTOM = 'custom';
    const WIZARD_TYPE_DIALUP_FORTICLIENT = 'dialup-forticlient';
    const WIZARD_TYPE_DIALUP_IOS = 'dialup-ios';
    const WIZARD_TYPE_DIALUP_ANDROID = 'dialup-android';
    const WIZARD_TYPE_DIALUP_WINDOWS = 'dialup-windows';
    const WIZARD_TYPE_DIALUP_CISCO = 'dialup-cisco';
    const WIZARD_TYPE_STATIC_FORTIGATE = 'static-fortigate';
    const WIZARD_TYPE_DIALUP_FORTIGATE = 'dialup-fortigate';
    const WIZARD_TYPE_STATIC_CISCO = 'static-cisco';
    const WIZARD_TYPE_DIALUP_CISCO_FW = 'dialup-cisco-fw';
    const WIZARD_TYPE_SIMPLIFIED_STATIC_FORTIGATE = 'simplified-static-fortigate';
    const WIZARD_TYPE_HUB_FORTIGATE_AUTO_DISCOVERY = 'hub-fortigate-auto-discovery';
    const WIZARD_TYPE_SPOKE_FORTIGATE_AUTO_DISCOVERY = 'spoke-fortigate-auto-discovery';
    const XAUTHTYPE_DISABLE = 'disable';
    const XAUTHTYPE_CLIENT = 'client';
    const XAUTHTYPE_PAP = 'pap';
    const XAUTHTYPE_CHAP = 'chap';
    const XAUTHTYPE_AUTO = 'auto';
    const REAUTH_DISABLE = 'disable';
    const REAUTH_ENABLE = 'enable';
    const GROUP_AUTHENTICATION_ENABLE = 'enable';
    const GROUP_AUTHENTICATION_DISABLE = 'disable';
    const MESH_SELECTOR_TYPE_DISABLE = 'disable';
    const MESH_SELECTOR_TYPE_SUBNET = 'subnet';
    const MESH_SELECTOR_TYPE_HOST = 'host';
    const IDLE_TIMEOUT_ENABLE = 'enable';
    const IDLE_TIMEOUT_DISABLE = 'disable';
    const HA_SYNC_ESP_SEQNO_ENABLE = 'enable';
    const HA_SYNC_ESP_SEQNO_DISABLE = 'disable';
    const NATTRAVERSAL_ENABLE = 'enable';
    const NATTRAVERSAL_DISABLE = 'disable';
    const NATTRAVERSAL_FORCED = 'forced';
    const ESN__REQUIRE = 'require';
    const ESN_ALLOW = 'allow';
    const ESN_DISABLE = 'disable';
    const CHILDLESS_IKE_ENABLE = 'enable';
    const CHILDLESS_IKE_DISABLE = 'disable';
    const REKEY_ENABLE = 'enable';
    const REKEY_DISABLE = 'disable';
    const DIGITAL_SIGNATURE_AUTH_ENABLE = 'enable';
    const DIGITAL_SIGNATURE_AUTH_DISABLE = 'disable';
    const SIGNATURE_HASH_ALG_SHA1 = 'sha1';
    const SIGNATURE_HASH_ALG_SHA2_256 = 'sha2-256';
    const SIGNATURE_HASH_ALG_SHA2_384 = 'sha2-384';
    const SIGNATURE_HASH_ALG_SHA2_512 = 'sha2-512';
    const RSA_SIGNATURE_FORMAT_PKCS1 = 'pkcs1';
    const RSA_SIGNATURE_FORMAT_PSS = 'pss';
    const ENFORCE_UNIQUE_ID_DISABLE = 'disable';
    const ENFORCE_UNIQUE_ID_KEEP_NEW = 'keep-new';
    const ENFORCE_UNIQUE_ID_KEEP_OLD = 'keep-old';
    const CERT_ID_VALIDATION_ENABLE = 'enable';
    const CERT_ID_VALIDATION_DISABLE = 'disable';
    const FEC_EGRESS_ENABLE = 'enable';
    const FEC_EGRESS_DISABLE = 'disable';
    const FEC_INGRESS_ENABLE = 'enable';
    const FEC_INGRESS_DISABLE = 'disable';
    const NETWORK_OVERLAY_DISABLE = 'disable';
    const NETWORK_OVERLAY_ENABLE = 'enable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__STATIC,
            self::TYPE_DYNAMIC,
            self::TYPE_DDNS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeVersionAllowableValues()
    {
        return [
            self::IKE_VERSION__1,
            self::IKE_VERSION__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthmethodAllowableValues()
    {
        return [
            self::AUTHMETHOD_PSK,
            self::AUTHMETHOD_SIGNATURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthmethodRemoteAllowableValues()
    {
        return [
            self::AUTHMETHOD_REMOTE_PSK,
            self::AUTHMETHOD_REMOTE_SIGNATURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_AGGRESSIVE,
            self::MODE_MAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeertypeAllowableValues()
    {
        return [
            self::PEERTYPE_ANY,
            self::PEERTYPE_ONE,
            self::PEERTYPE_DIALUP,
            self::PEERTYPE_PEER,
            self::PEERTYPE_PEERGRP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeCfgAllowableValues()
    {
        return [
            self::MODE_CFG_DISABLE,
            self::MODE_CFG_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignIpAllowableValues()
    {
        return [
            self::ASSIGN_IP_DISABLE,
            self::ASSIGN_IP_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignIpFromAllowableValues()
    {
        return [
            self::ASSIGN_IP_FROM_RANGE,
            self::ASSIGN_IP_FROM_USRGRP,
            self::ASSIGN_IP_FROM_DHCP,
            self::ASSIGN_IP_FROM_NAME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsModeAllowableValues()
    {
        return [
            self::DNS_MODE_MANUAL,
            self::DNS_MODE_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitySupportAllowableValues()
    {
        return [
            self::UNITY_SUPPORT_DISABLE,
            self::UNITY_SUPPORT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeLocalLanAllowableValues()
    {
        return [
            self::INCLUDE_LOCAL_LAN_DISABLE,
            self::INCLUDE_LOCAL_LAN_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSavePasswordAllowableValues()
    {
        return [
            self::SAVE_PASSWORD_DISABLE,
            self::SAVE_PASSWORD_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientAutoNegotiateAllowableValues()
    {
        return [
            self::CLIENT_AUTO_NEGOTIATE_DISABLE,
            self::CLIENT_AUTO_NEGOTIATE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientKeepAliveAllowableValues()
    {
        return [
            self::CLIENT_KEEP_ALIVE_DISABLE,
            self::CLIENT_KEEP_ALIVE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalAllowableValues()
    {
        return [
            self::PROPOSAL_DES_MD5,
            self::PROPOSAL_DES_SHA1,
            self::PROPOSAL_DES_SHA256,
            self::PROPOSAL_DES_SHA384,
            self::PROPOSAL_DES_SHA512,
            self::PROPOSAL__3DES_MD5,
            self::PROPOSAL__3DES_SHA1,
            self::PROPOSAL__3DES_SHA256,
            self::PROPOSAL__3DES_SHA384,
            self::PROPOSAL__3DES_SHA512,
            self::PROPOSAL_AES128_MD5,
            self::PROPOSAL_AES128_SHA1,
            self::PROPOSAL_AES128_SHA256,
            self::PROPOSAL_AES128_SHA384,
            self::PROPOSAL_AES128_SHA512,
            self::PROPOSAL_AES128GCM_PRFSHA1,
            self::PROPOSAL_AES128GCM_PRFSHA256,
            self::PROPOSAL_AES128GCM_PRFSHA384,
            self::PROPOSAL_AES128GCM_PRFSHA512,
            self::PROPOSAL_AES192_MD5,
            self::PROPOSAL_AES192_SHA1,
            self::PROPOSAL_AES192_SHA256,
            self::PROPOSAL_AES192_SHA384,
            self::PROPOSAL_AES192_SHA512,
            self::PROPOSAL_AES256_MD5,
            self::PROPOSAL_AES256_SHA1,
            self::PROPOSAL_AES256_SHA256,
            self::PROPOSAL_AES256_SHA384,
            self::PROPOSAL_AES256_SHA512,
            self::PROPOSAL_AES256GCM_PRFSHA1,
            self::PROPOSAL_AES256GCM_PRFSHA256,
            self::PROPOSAL_AES256GCM_PRFSHA384,
            self::PROPOSAL_AES256GCM_PRFSHA512,
            self::PROPOSAL_CHACHA20POLY1305_PRFSHA1,
            self::PROPOSAL_CHACHA20POLY1305_PRFSHA256,
            self::PROPOSAL_CHACHA20POLY1305_PRFSHA384,
            self::PROPOSAL_CHACHA20POLY1305_PRFSHA512,
            self::PROPOSAL_ARIA128_MD5,
            self::PROPOSAL_ARIA128_SHA1,
            self::PROPOSAL_ARIA128_SHA256,
            self::PROPOSAL_ARIA128_SHA384,
            self::PROPOSAL_ARIA128_SHA512,
            self::PROPOSAL_ARIA192_MD5,
            self::PROPOSAL_ARIA192_SHA1,
            self::PROPOSAL_ARIA192_SHA256,
            self::PROPOSAL_ARIA192_SHA384,
            self::PROPOSAL_ARIA192_SHA512,
            self::PROPOSAL_ARIA256_MD5,
            self::PROPOSAL_ARIA256_SHA1,
            self::PROPOSAL_ARIA256_SHA256,
            self::PROPOSAL_ARIA256_SHA384,
            self::PROPOSAL_ARIA256_SHA512,
            self::PROPOSAL_SEED_MD5,
            self::PROPOSAL_SEED_SHA1,
            self::PROPOSAL_SEED_SHA256,
            self::PROPOSAL_SEED_SHA384,
            self::PROPOSAL_SEED_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddRouteAllowableValues()
    {
        return [
            self::ADD_ROUTE_DISABLE,
            self::ADD_ROUTE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddGwRouteAllowableValues()
    {
        return [
            self::ADD_GW_ROUTE_ENABLE,
            self::ADD_GW_ROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalidTypeAllowableValues()
    {
        return [
            self::LOCALID_TYPE_AUTO,
            self::LOCALID_TYPE_FQDN,
            self::LOCALID_TYPE_USER_FQDN,
            self::LOCALID_TYPE_KEYID,
            self::LOCALID_TYPE_ADDRESS,
            self::LOCALID_TYPE_ASN1DN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoNegotiateAllowableValues()
    {
        return [
            self::AUTO_NEGOTIATE_ENABLE,
            self::AUTO_NEGOTIATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFragmentationAllowableValues()
    {
        return [
            self::FRAGMENTATION_ENABLE,
            self::FRAGMENTATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpdAllowableValues()
    {
        return [
            self::DPD_DISABLE,
            self::DPD_ON_IDLE,
            self::DPD_ON_DEMAND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForticlientEnforcementAllowableValues()
    {
        return [
            self::FORTICLIENT_ENFORCEMENT_ENABLE,
            self::FORTICLIENT_ENFORCEMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNpuOffloadAllowableValues()
    {
        return [
            self::NPU_OFFLOAD_ENABLE,
            self::NPU_OFFLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendCertChainAllowableValues()
    {
        return [
            self::SEND_CERT_CHAIN_ENABLE,
            self::SEND_CERT_CHAIN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhgrpAllowableValues()
    {
        return [
            self::DHGRP__1,
            self::DHGRP__2,
            self::DHGRP__5,
            self::DHGRP__14,
            self::DHGRP__15,
            self::DHGRP__16,
            self::DHGRP__17,
            self::DHGRP__18,
            self::DHGRP__19,
            self::DHGRP__20,
            self::DHGRP__21,
            self::DHGRP__27,
            self::DHGRP__28,
            self::DHGRP__29,
            self::DHGRP__30,
            self::DHGRP__31,
            self::DHGRP__32,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuiteBAllowableValues()
    {
        return [
            self::SUITE_B_DISABLE,
            self::SUITE_B_SUITE_B_GCM_128,
            self::SUITE_B_SUITE_B_GCM_256,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapAllowableValues()
    {
        return [
            self::EAP_ENABLE,
            self::EAP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapIdentityAllowableValues()
    {
        return [
            self::EAP_IDENTITY_USE_ID_PAYLOAD,
            self::EAP_IDENTITY_SEND_REQUEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcctVerifyAllowableValues()
    {
        return [
            self::ACCT_VERIFY_ENABLE,
            self::ACCT_VERIFY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPpkAllowableValues()
    {
        return [
            self::PPK_DISABLE,
            self::PPK_ALLOW,
            self::PPK__REQUIRE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWizardTypeAllowableValues()
    {
        return [
            self::WIZARD_TYPE_CUSTOM,
            self::WIZARD_TYPE_DIALUP_FORTICLIENT,
            self::WIZARD_TYPE_DIALUP_IOS,
            self::WIZARD_TYPE_DIALUP_ANDROID,
            self::WIZARD_TYPE_DIALUP_WINDOWS,
            self::WIZARD_TYPE_DIALUP_CISCO,
            self::WIZARD_TYPE_STATIC_FORTIGATE,
            self::WIZARD_TYPE_DIALUP_FORTIGATE,
            self::WIZARD_TYPE_STATIC_CISCO,
            self::WIZARD_TYPE_DIALUP_CISCO_FW,
            self::WIZARD_TYPE_SIMPLIFIED_STATIC_FORTIGATE,
            self::WIZARD_TYPE_HUB_FORTIGATE_AUTO_DISCOVERY,
            self::WIZARD_TYPE_SPOKE_FORTIGATE_AUTO_DISCOVERY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getXauthtypeAllowableValues()
    {
        return [
            self::XAUTHTYPE_DISABLE,
            self::XAUTHTYPE_CLIENT,
            self::XAUTHTYPE_PAP,
            self::XAUTHTYPE_CHAP,
            self::XAUTHTYPE_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReauthAllowableValues()
    {
        return [
            self::REAUTH_DISABLE,
            self::REAUTH_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupAuthenticationAllowableValues()
    {
        return [
            self::GROUP_AUTHENTICATION_ENABLE,
            self::GROUP_AUTHENTICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeshSelectorTypeAllowableValues()
    {
        return [
            self::MESH_SELECTOR_TYPE_DISABLE,
            self::MESH_SELECTOR_TYPE_SUBNET,
            self::MESH_SELECTOR_TYPE_HOST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdleTimeoutAllowableValues()
    {
        return [
            self::IDLE_TIMEOUT_ENABLE,
            self::IDLE_TIMEOUT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaSyncEspSeqnoAllowableValues()
    {
        return [
            self::HA_SYNC_ESP_SEQNO_ENABLE,
            self::HA_SYNC_ESP_SEQNO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNattraversalAllowableValues()
    {
        return [
            self::NATTRAVERSAL_ENABLE,
            self::NATTRAVERSAL_DISABLE,
            self::NATTRAVERSAL_FORCED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEsnAllowableValues()
    {
        return [
            self::ESN__REQUIRE,
            self::ESN_ALLOW,
            self::ESN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChildlessIkeAllowableValues()
    {
        return [
            self::CHILDLESS_IKE_ENABLE,
            self::CHILDLESS_IKE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRekeyAllowableValues()
    {
        return [
            self::REKEY_ENABLE,
            self::REKEY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDigitalSignatureAuthAllowableValues()
    {
        return [
            self::DIGITAL_SIGNATURE_AUTH_ENABLE,
            self::DIGITAL_SIGNATURE_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureHashAlgAllowableValues()
    {
        return [
            self::SIGNATURE_HASH_ALG_SHA1,
            self::SIGNATURE_HASH_ALG_SHA2_256,
            self::SIGNATURE_HASH_ALG_SHA2_384,
            self::SIGNATURE_HASH_ALG_SHA2_512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRsaSignatureFormatAllowableValues()
    {
        return [
            self::RSA_SIGNATURE_FORMAT_PKCS1,
            self::RSA_SIGNATURE_FORMAT_PSS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnforceUniqueIdAllowableValues()
    {
        return [
            self::ENFORCE_UNIQUE_ID_DISABLE,
            self::ENFORCE_UNIQUE_ID_KEEP_NEW,
            self::ENFORCE_UNIQUE_ID_KEEP_OLD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCertIdValidationAllowableValues()
    {
        return [
            self::CERT_ID_VALIDATION_ENABLE,
            self::CERT_ID_VALIDATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFecEgressAllowableValues()
    {
        return [
            self::FEC_EGRESS_ENABLE,
            self::FEC_EGRESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFecIngressAllowableValues()
    {
        return [
            self::FEC_INGRESS_ENABLE,
            self::FEC_INGRESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkOverlayAllowableValues()
    {
        return [
            self::NETWORK_OVERLAY_DISABLE,
            self::NETWORK_OVERLAY_ENABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['ike_version'] = $data['ike_version'] ?? null;
        $this->container['remote_gw'] = $data['remote_gw'] ?? null;
        $this->container['local_gw'] = $data['local_gw'] ?? null;
        $this->container['remotegw_ddns'] = $data['remotegw_ddns'] ?? null;
        $this->container['keylife'] = $data['keylife'] ?? null;
        $this->container['certificate'] = $data['certificate'] ?? null;
        $this->container['authmethod'] = $data['authmethod'] ?? null;
        $this->container['authmethod_remote'] = $data['authmethod_remote'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['peertype'] = $data['peertype'] ?? null;
        $this->container['peerid'] = $data['peerid'] ?? null;
        $this->container['usrgrp'] = $data['usrgrp'] ?? null;
        $this->container['peer'] = $data['peer'] ?? null;
        $this->container['peergrp'] = $data['peergrp'] ?? null;
        $this->container['mode_cfg'] = $data['mode_cfg'] ?? null;
        $this->container['assign_ip'] = $data['assign_ip'] ?? null;
        $this->container['assign_ip_from'] = $data['assign_ip_from'] ?? null;
        $this->container['ipv4_start_ip'] = $data['ipv4_start_ip'] ?? null;
        $this->container['ipv4_end_ip'] = $data['ipv4_end_ip'] ?? null;
        $this->container['ipv4_netmask'] = $data['ipv4_netmask'] ?? null;
        $this->container['dhcp_ra_giaddr'] = $data['dhcp_ra_giaddr'] ?? null;
        $this->container['dhcp6_ra_linkaddr'] = $data['dhcp6_ra_linkaddr'] ?? null;
        $this->container['dns_mode'] = $data['dns_mode'] ?? null;
        $this->container['ipv4_dns_server1'] = $data['ipv4_dns_server1'] ?? null;
        $this->container['ipv4_dns_server2'] = $data['ipv4_dns_server2'] ?? null;
        $this->container['ipv4_dns_server3'] = $data['ipv4_dns_server3'] ?? null;
        $this->container['ipv4_wins_server1'] = $data['ipv4_wins_server1'] ?? null;
        $this->container['ipv4_wins_server2'] = $data['ipv4_wins_server2'] ?? null;
        $this->container['ipv4_exclude_range'] = $data['ipv4_exclude_range'] ?? null;
        $this->container['ipv4_split_include'] = $data['ipv4_split_include'] ?? null;
        $this->container['split_include_service'] = $data['split_include_service'] ?? null;
        $this->container['ipv4_name'] = $data['ipv4_name'] ?? null;
        $this->container['ipv6_start_ip'] = $data['ipv6_start_ip'] ?? null;
        $this->container['ipv6_end_ip'] = $data['ipv6_end_ip'] ?? null;
        $this->container['ipv6_prefix'] = $data['ipv6_prefix'] ?? null;
        $this->container['ipv6_dns_server1'] = $data['ipv6_dns_server1'] ?? null;
        $this->container['ipv6_dns_server2'] = $data['ipv6_dns_server2'] ?? null;
        $this->container['ipv6_dns_server3'] = $data['ipv6_dns_server3'] ?? null;
        $this->container['ipv6_exclude_range'] = $data['ipv6_exclude_range'] ?? null;
        $this->container['ipv6_split_include'] = $data['ipv6_split_include'] ?? null;
        $this->container['ipv6_name'] = $data['ipv6_name'] ?? null;
        $this->container['unity_support'] = $data['unity_support'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['banner'] = $data['banner'] ?? null;
        $this->container['include_local_lan'] = $data['include_local_lan'] ?? null;
        $this->container['ipv4_split_exclude'] = $data['ipv4_split_exclude'] ?? null;
        $this->container['ipv6_split_exclude'] = $data['ipv6_split_exclude'] ?? null;
        $this->container['save_password'] = $data['save_password'] ?? null;
        $this->container['client_auto_negotiate'] = $data['client_auto_negotiate'] ?? null;
        $this->container['client_keep_alive'] = $data['client_keep_alive'] ?? null;
        $this->container['backup_gateway'] = $data['backup_gateway'] ?? null;
        $this->container['proposal'] = $data['proposal'] ?? null;
        $this->container['add_route'] = $data['add_route'] ?? null;
        $this->container['add_gw_route'] = $data['add_gw_route'] ?? null;
        $this->container['psksecret'] = $data['psksecret'] ?? null;
        $this->container['psksecret_remote'] = $data['psksecret_remote'] ?? null;
        $this->container['keepalive'] = $data['keepalive'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['localid'] = $data['localid'] ?? null;
        $this->container['localid_type'] = $data['localid_type'] ?? null;
        $this->container['auto_negotiate'] = $data['auto_negotiate'] ?? null;
        $this->container['negotiate_timeout'] = $data['negotiate_timeout'] ?? null;
        $this->container['fragmentation'] = $data['fragmentation'] ?? null;
        $this->container['dpd'] = $data['dpd'] ?? null;
        $this->container['dpd_retrycount'] = $data['dpd_retrycount'] ?? null;
        $this->container['dpd_retryinterval'] = $data['dpd_retryinterval'] ?? null;
        $this->container['forticlient_enforcement'] = $data['forticlient_enforcement'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['npu_offload'] = $data['npu_offload'] ?? null;
        $this->container['send_cert_chain'] = $data['send_cert_chain'] ?? null;
        $this->container['dhgrp'] = $data['dhgrp'] ?? null;
        $this->container['suite_b'] = $data['suite_b'] ?? null;
        $this->container['eap'] = $data['eap'] ?? null;
        $this->container['eap_identity'] = $data['eap_identity'] ?? null;
        $this->container['eap_exclude_peergrp'] = $data['eap_exclude_peergrp'] ?? null;
        $this->container['acct_verify'] = $data['acct_verify'] ?? null;
        $this->container['ppk'] = $data['ppk'] ?? null;
        $this->container['ppk_secret'] = $data['ppk_secret'] ?? null;
        $this->container['ppk_identity'] = $data['ppk_identity'] ?? null;
        $this->container['wizard_type'] = $data['wizard_type'] ?? null;
        $this->container['xauthtype'] = $data['xauthtype'] ?? null;
        $this->container['reauth'] = $data['reauth'] ?? null;
        $this->container['authusr'] = $data['authusr'] ?? null;
        $this->container['authpasswd'] = $data['authpasswd'] ?? null;
        $this->container['group_authentication'] = $data['group_authentication'] ?? null;
        $this->container['group_authentication_secret'] = $data['group_authentication_secret'] ?? null;
        $this->container['authusrgrp'] = $data['authusrgrp'] ?? null;
        $this->container['mesh_selector_type'] = $data['mesh_selector_type'] ?? null;
        $this->container['idle_timeout'] = $data['idle_timeout'] ?? null;
        $this->container['idle_timeoutinterval'] = $data['idle_timeoutinterval'] ?? null;
        $this->container['ha_sync_esp_seqno'] = $data['ha_sync_esp_seqno'] ?? null;
        $this->container['nattraversal'] = $data['nattraversal'] ?? null;
        $this->container['esn'] = $data['esn'] ?? null;
        $this->container['fragmentation_mtu'] = $data['fragmentation_mtu'] ?? null;
        $this->container['childless_ike'] = $data['childless_ike'] ?? null;
        $this->container['rekey'] = $data['rekey'] ?? null;
        $this->container['digital_signature_auth'] = $data['digital_signature_auth'] ?? null;
        $this->container['signature_hash_alg'] = $data['signature_hash_alg'] ?? null;
        $this->container['rsa_signature_format'] = $data['rsa_signature_format'] ?? null;
        $this->container['enforce_unique_id'] = $data['enforce_unique_id'] ?? null;
        $this->container['cert_id_validation'] = $data['cert_id_validation'] ?? null;
        $this->container['fec_egress'] = $data['fec_egress'] ?? null;
        $this->container['fec_send_timeout'] = $data['fec_send_timeout'] ?? null;
        $this->container['fec_base'] = $data['fec_base'] ?? null;
        $this->container['fec_redundant'] = $data['fec_redundant'] ?? null;
        $this->container['fec_ingress'] = $data['fec_ingress'] ?? null;
        $this->container['fec_receive_timeout'] = $data['fec_receive_timeout'] ?? null;
        $this->container['network_overlay'] = $data['network_overlay'] ?? null;
        $this->container['network_id'] = $data['network_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 35)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!is_null($this->container['ike_version']) && !in_array($this->container['ike_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ike_version', must be one of '%s'",
                $this->container['ike_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['remotegw_ddns']) && (mb_strlen($this->container['remotegw_ddns']) > 63)) {
            $invalidProperties[] = "invalid value for 'remotegw_ddns', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['keylife']) && ($this->container['keylife'] > 172800)) {
            $invalidProperties[] = "invalid value for 'keylife', must be smaller than or equal to 172800.";
        }

        if (!is_null($this->container['keylife']) && ($this->container['keylife'] < 120)) {
            $invalidProperties[] = "invalid value for 'keylife', must be bigger than or equal to 120.";
        }

        if (!is_null($this->container['certificate']) && (count($this->container['certificate']) > 0)) {
            $invalidProperties[] = "invalid value for 'certificate', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAuthmethodAllowableValues();
        if (!is_null($this->container['authmethod']) && !in_array($this->container['authmethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authmethod', must be one of '%s'",
                $this->container['authmethod'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthmethodRemoteAllowableValues();
        if (!is_null($this->container['authmethod_remote']) && !in_array($this->container['authmethod_remote'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authmethod_remote', must be one of '%s'",
                $this->container['authmethod_remote'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPeertypeAllowableValues();
        if (!is_null($this->container['peertype']) && !in_array($this->container['peertype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peertype', must be one of '%s'",
                $this->container['peertype'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['peerid']) && (mb_strlen($this->container['peerid']) > 255)) {
            $invalidProperties[] = "invalid value for 'peerid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['usrgrp']) && (mb_strlen($this->container['usrgrp']) > 35)) {
            $invalidProperties[] = "invalid value for 'usrgrp', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['peer']) && (mb_strlen($this->container['peer']) > 35)) {
            $invalidProperties[] = "invalid value for 'peer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['peergrp']) && (mb_strlen($this->container['peergrp']) > 35)) {
            $invalidProperties[] = "invalid value for 'peergrp', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getModeCfgAllowableValues();
        if (!is_null($this->container['mode_cfg']) && !in_array($this->container['mode_cfg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode_cfg', must be one of '%s'",
                $this->container['mode_cfg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAssignIpAllowableValues();
        if (!is_null($this->container['assign_ip']) && !in_array($this->container['assign_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assign_ip', must be one of '%s'",
                $this->container['assign_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAssignIpFromAllowableValues();
        if (!is_null($this->container['assign_ip_from']) && !in_array($this->container['assign_ip_from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assign_ip_from', must be one of '%s'",
                $this->container['assign_ip_from'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsModeAllowableValues();
        if (!is_null($this->container['dns_mode']) && !in_array($this->container['dns_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dns_mode', must be one of '%s'",
                $this->container['dns_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipv4_exclude_range']) && (count($this->container['ipv4_exclude_range']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipv4_exclude_range', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ipv4_split_include']) && (mb_strlen($this->container['ipv4_split_include']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv4_split_include', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['split_include_service']) && (mb_strlen($this->container['split_include_service']) > 79)) {
            $invalidProperties[] = "invalid value for 'split_include_service', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['ipv4_name']) && (mb_strlen($this->container['ipv4_name']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv4_name', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['ipv6_prefix']) && ($this->container['ipv6_prefix'] > 128)) {
            $invalidProperties[] = "invalid value for 'ipv6_prefix', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['ipv6_prefix']) && ($this->container['ipv6_prefix'] < 1)) {
            $invalidProperties[] = "invalid value for 'ipv6_prefix', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ipv6_exclude_range']) && (count($this->container['ipv6_exclude_range']) > 0)) {
            $invalidProperties[] = "invalid value for 'ipv6_exclude_range', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ipv6_split_include']) && (mb_strlen($this->container['ipv6_split_include']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv6_split_include', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['ipv6_name']) && (mb_strlen($this->container['ipv6_name']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv6_name', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getUnitySupportAllowableValues();
        if (!is_null($this->container['unity_support']) && !in_array($this->container['unity_support'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unity_support', must be one of '%s'",
                $this->container['unity_support'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 63)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['banner']) && (mb_strlen($this->container['banner']) > 1024)) {
            $invalidProperties[] = "invalid value for 'banner', the character length must be smaller than or equal to 1024.";
        }

        $allowedValues = $this->getIncludeLocalLanAllowableValues();
        if (!is_null($this->container['include_local_lan']) && !in_array($this->container['include_local_lan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include_local_lan', must be one of '%s'",
                $this->container['include_local_lan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipv4_split_exclude']) && (mb_strlen($this->container['ipv4_split_exclude']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv4_split_exclude', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['ipv6_split_exclude']) && (mb_strlen($this->container['ipv6_split_exclude']) > 79)) {
            $invalidProperties[] = "invalid value for 'ipv6_split_exclude', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getSavePasswordAllowableValues();
        if (!is_null($this->container['save_password']) && !in_array($this->container['save_password'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'save_password', must be one of '%s'",
                $this->container['save_password'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClientAutoNegotiateAllowableValues();
        if (!is_null($this->container['client_auto_negotiate']) && !in_array($this->container['client_auto_negotiate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'client_auto_negotiate', must be one of '%s'",
                $this->container['client_auto_negotiate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClientKeepAliveAllowableValues();
        if (!is_null($this->container['client_keep_alive']) && !in_array($this->container['client_keep_alive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'client_keep_alive', must be one of '%s'",
                $this->container['client_keep_alive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['backup_gateway']) && (count($this->container['backup_gateway']) > 0)) {
            $invalidProperties[] = "invalid value for 'backup_gateway', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getProposalAllowableValues();
        if (!is_null($this->container['proposal']) && !in_array($this->container['proposal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proposal', must be one of '%s'",
                $this->container['proposal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddRouteAllowableValues();
        if (!is_null($this->container['add_route']) && !in_array($this->container['add_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'add_route', must be one of '%s'",
                $this->container['add_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddGwRouteAllowableValues();
        if (!is_null($this->container['add_gw_route']) && !in_array($this->container['add_gw_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'add_gw_route', must be one of '%s'",
                $this->container['add_gw_route'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keepalive']) && ($this->container['keepalive'] > 900)) {
            $invalidProperties[] = "invalid value for 'keepalive', must be smaller than or equal to 900.";
        }

        if (!is_null($this->container['keepalive']) && ($this->container['keepalive'] < 10)) {
            $invalidProperties[] = "invalid value for 'keepalive', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] > 255)) {
            $invalidProperties[] = "invalid value for 'distance', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 1)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['localid']) && (mb_strlen($this->container['localid']) > 63)) {
            $invalidProperties[] = "invalid value for 'localid', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getLocalidTypeAllowableValues();
        if (!is_null($this->container['localid_type']) && !in_array($this->container['localid_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'localid_type', must be one of '%s'",
                $this->container['localid_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoNegotiateAllowableValues();
        if (!is_null($this->container['auto_negotiate']) && !in_array($this->container['auto_negotiate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_negotiate', must be one of '%s'",
                $this->container['auto_negotiate'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['negotiate_timeout']) && ($this->container['negotiate_timeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'negotiate_timeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['negotiate_timeout']) && ($this->container['negotiate_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'negotiate_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getFragmentationAllowableValues();
        if (!is_null($this->container['fragmentation']) && !in_array($this->container['fragmentation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fragmentation', must be one of '%s'",
                $this->container['fragmentation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDpdAllowableValues();
        if (!is_null($this->container['dpd']) && !in_array($this->container['dpd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dpd', must be one of '%s'",
                $this->container['dpd'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dpd_retrycount']) && ($this->container['dpd_retrycount'] > 10)) {
            $invalidProperties[] = "invalid value for 'dpd_retrycount', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['dpd_retrycount']) && ($this->container['dpd_retrycount'] < 0)) {
            $invalidProperties[] = "invalid value for 'dpd_retrycount', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getForticlientEnforcementAllowableValues();
        if (!is_null($this->container['forticlient_enforcement']) && !in_array($this->container['forticlient_enforcement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'forticlient_enforcement', must be one of '%s'",
                $this->container['forticlient_enforcement'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($this->container['npu_offload']) && !in_array($this->container['npu_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'npu_offload', must be one of '%s'",
                $this->container['npu_offload'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendCertChainAllowableValues();
        if (!is_null($this->container['send_cert_chain']) && !in_array($this->container['send_cert_chain'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_cert_chain', must be one of '%s'",
                $this->container['send_cert_chain'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhgrpAllowableValues();
        if (!is_null($this->container['dhgrp']) && !in_array($this->container['dhgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhgrp', must be one of '%s'",
                $this->container['dhgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSuiteBAllowableValues();
        if (!is_null($this->container['suite_b']) && !in_array($this->container['suite_b'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'suite_b', must be one of '%s'",
                $this->container['suite_b'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEapAllowableValues();
        if (!is_null($this->container['eap']) && !in_array($this->container['eap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap', must be one of '%s'",
                $this->container['eap'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEapIdentityAllowableValues();
        if (!is_null($this->container['eap_identity']) && !in_array($this->container['eap_identity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap_identity', must be one of '%s'",
                $this->container['eap_identity'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eap_exclude_peergrp']) && (mb_strlen($this->container['eap_exclude_peergrp']) > 35)) {
            $invalidProperties[] = "invalid value for 'eap_exclude_peergrp', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAcctVerifyAllowableValues();
        if (!is_null($this->container['acct_verify']) && !in_array($this->container['acct_verify'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'acct_verify', must be one of '%s'",
                $this->container['acct_verify'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPpkAllowableValues();
        if (!is_null($this->container['ppk']) && !in_array($this->container['ppk'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ppk', must be one of '%s'",
                $this->container['ppk'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ppk_identity']) && (mb_strlen($this->container['ppk_identity']) > 35)) {
            $invalidProperties[] = "invalid value for 'ppk_identity', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getWizardTypeAllowableValues();
        if (!is_null($this->container['wizard_type']) && !in_array($this->container['wizard_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wizard_type', must be one of '%s'",
                $this->container['wizard_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getXauthtypeAllowableValues();
        if (!is_null($this->container['xauthtype']) && !in_array($this->container['xauthtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'xauthtype', must be one of '%s'",
                $this->container['xauthtype'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReauthAllowableValues();
        if (!is_null($this->container['reauth']) && !in_array($this->container['reauth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reauth', must be one of '%s'",
                $this->container['reauth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authusr']) && (mb_strlen($this->container['authusr']) > 64)) {
            $invalidProperties[] = "invalid value for 'authusr', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getGroupAuthenticationAllowableValues();
        if (!is_null($this->container['group_authentication']) && !in_array($this->container['group_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_authentication', must be one of '%s'",
                $this->container['group_authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authusrgrp']) && (mb_strlen($this->container['authusrgrp']) > 35)) {
            $invalidProperties[] = "invalid value for 'authusrgrp', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getMeshSelectorTypeAllowableValues();
        if (!is_null($this->container['mesh_selector_type']) && !in_array($this->container['mesh_selector_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mesh_selector_type', must be one of '%s'",
                $this->container['mesh_selector_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdleTimeoutAllowableValues();
        if (!is_null($this->container['idle_timeout']) && !in_array($this->container['idle_timeout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idle_timeout', must be one of '%s'",
                $this->container['idle_timeout'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['idle_timeoutinterval']) && ($this->container['idle_timeoutinterval'] > 43200)) {
            $invalidProperties[] = "invalid value for 'idle_timeoutinterval', must be smaller than or equal to 43200.";
        }

        if (!is_null($this->container['idle_timeoutinterval']) && ($this->container['idle_timeoutinterval'] < 5)) {
            $invalidProperties[] = "invalid value for 'idle_timeoutinterval', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getHaSyncEspSeqnoAllowableValues();
        if (!is_null($this->container['ha_sync_esp_seqno']) && !in_array($this->container['ha_sync_esp_seqno'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ha_sync_esp_seqno', must be one of '%s'",
                $this->container['ha_sync_esp_seqno'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNattraversalAllowableValues();
        if (!is_null($this->container['nattraversal']) && !in_array($this->container['nattraversal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'nattraversal', must be one of '%s'",
                $this->container['nattraversal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEsnAllowableValues();
        if (!is_null($this->container['esn']) && !in_array($this->container['esn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'esn', must be one of '%s'",
                $this->container['esn'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fragmentation_mtu']) && ($this->container['fragmentation_mtu'] > 16000)) {
            $invalidProperties[] = "invalid value for 'fragmentation_mtu', must be smaller than or equal to 16000.";
        }

        if (!is_null($this->container['fragmentation_mtu']) && ($this->container['fragmentation_mtu'] < 500)) {
            $invalidProperties[] = "invalid value for 'fragmentation_mtu', must be bigger than or equal to 500.";
        }

        $allowedValues = $this->getChildlessIkeAllowableValues();
        if (!is_null($this->container['childless_ike']) && !in_array($this->container['childless_ike'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'childless_ike', must be one of '%s'",
                $this->container['childless_ike'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRekeyAllowableValues();
        if (!is_null($this->container['rekey']) && !in_array($this->container['rekey'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rekey', must be one of '%s'",
                $this->container['rekey'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDigitalSignatureAuthAllowableValues();
        if (!is_null($this->container['digital_signature_auth']) && !in_array($this->container['digital_signature_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'digital_signature_auth', must be one of '%s'",
                $this->container['digital_signature_auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSignatureHashAlgAllowableValues();
        if (!is_null($this->container['signature_hash_alg']) && !in_array($this->container['signature_hash_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'signature_hash_alg', must be one of '%s'",
                $this->container['signature_hash_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRsaSignatureFormatAllowableValues();
        if (!is_null($this->container['rsa_signature_format']) && !in_array($this->container['rsa_signature_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rsa_signature_format', must be one of '%s'",
                $this->container['rsa_signature_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnforceUniqueIdAllowableValues();
        if (!is_null($this->container['enforce_unique_id']) && !in_array($this->container['enforce_unique_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enforce_unique_id', must be one of '%s'",
                $this->container['enforce_unique_id'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCertIdValidationAllowableValues();
        if (!is_null($this->container['cert_id_validation']) && !in_array($this->container['cert_id_validation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cert_id_validation', must be one of '%s'",
                $this->container['cert_id_validation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFecEgressAllowableValues();
        if (!is_null($this->container['fec_egress']) && !in_array($this->container['fec_egress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fec_egress', must be one of '%s'",
                $this->container['fec_egress'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fec_send_timeout']) && ($this->container['fec_send_timeout'] > 1000)) {
            $invalidProperties[] = "invalid value for 'fec_send_timeout', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['fec_send_timeout']) && ($this->container['fec_send_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'fec_send_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fec_base']) && ($this->container['fec_base'] > 100)) {
            $invalidProperties[] = "invalid value for 'fec_base', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fec_base']) && ($this->container['fec_base'] < 1)) {
            $invalidProperties[] = "invalid value for 'fec_base', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fec_redundant']) && ($this->container['fec_redundant'] > 100)) {
            $invalidProperties[] = "invalid value for 'fec_redundant', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fec_redundant']) && ($this->container['fec_redundant'] < 0)) {
            $invalidProperties[] = "invalid value for 'fec_redundant', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getFecIngressAllowableValues();
        if (!is_null($this->container['fec_ingress']) && !in_array($this->container['fec_ingress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fec_ingress', must be one of '%s'",
                $this->container['fec_ingress'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fec_receive_timeout']) && ($this->container['fec_receive_timeout'] > 10000)) {
            $invalidProperties[] = "invalid value for 'fec_receive_timeout', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['fec_receive_timeout']) && ($this->container['fec_receive_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'fec_receive_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getNetworkOverlayAllowableValues();
        if (!is_null($this->container['network_overlay']) && !in_array($this->container['network_overlay'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_overlay', must be one of '%s'",
                $this->container['network_overlay'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['network_id']) && ($this->container['network_id'] > 255)) {
            $invalidProperties[] = "invalid value for 'network_id', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['network_id']) && ($this->container['network_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'network_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IPsec remote gateway name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Remote gateway type.    static:Remote VPN gateway has fixed IP address.    dynamic:Remote VPN gateway has dynamic IP address.    ddns:Remote VPN gateway has dynamic IP address and is a dynamic DNS client.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Local physical, aggregate, or VLAN outgoing interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 35)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets ike_version
     *
     * @return string|null
     */
    public function getIkeVersion()
    {
        return $this->container['ike_version'];
    }

    /**
     * Sets ike_version
     *
     * @param string|null $ike_version IKE protocol version.    1:Use IKEv1 protocol.    2:Use IKEv2 protocol.
     *
     * @return self
     */
    public function setIkeVersion($ike_version)
    {
        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!is_null($ike_version) && !in_array($ike_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ike_version', must be one of '%s'",
                    $ike_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_version'] = $ike_version;

        return $this;
    }

    /**
     * Gets remote_gw
     *
     * @return string|null
     */
    public function getRemoteGw()
    {
        return $this->container['remote_gw'];
    }

    /**
     * Sets remote_gw
     *
     * @param string|null $remote_gw Remote VPN gateway.
     *
     * @return self
     */
    public function setRemoteGw($remote_gw)
    {
        $this->container['remote_gw'] = $remote_gw;

        return $this;
    }

    /**
     * Gets local_gw
     *
     * @return string|null
     */
    public function getLocalGw()
    {
        return $this->container['local_gw'];
    }

    /**
     * Sets local_gw
     *
     * @param string|null $local_gw Local VPN gateway.
     *
     * @return self
     */
    public function setLocalGw($local_gw)
    {
        $this->container['local_gw'] = $local_gw;

        return $this;
    }

    /**
     * Gets remotegw_ddns
     *
     * @return string|null
     */
    public function getRemotegwDdns()
    {
        return $this->container['remotegw_ddns'];
    }

    /**
     * Sets remotegw_ddns
     *
     * @param string|null $remotegw_ddns Domain name of remote gateway (eg. name.DDNS.com).
     *
     * @return self
     */
    public function setRemotegwDdns($remotegw_ddns)
    {
        if (!is_null($remotegw_ddns) && (mb_strlen($remotegw_ddns) > 63)) {
            throw new \InvalidArgumentException('invalid length for $remotegw_ddns when calling InlineObject478., must be smaller than or equal to 63.');
        }

        $this->container['remotegw_ddns'] = $remotegw_ddns;

        return $this;
    }

    /**
     * Gets keylife
     *
     * @return int|null
     */
    public function getKeylife()
    {
        return $this->container['keylife'];
    }

    /**
     * Sets keylife
     *
     * @param int|null $keylife Time to wait in seconds before phase 1 encryption key expires.
     *
     * @return self
     */
    public function setKeylife($keylife)
    {

        if (!is_null($keylife) && ($keylife > 172800)) {
            throw new \InvalidArgumentException('invalid value for $keylife when calling InlineObject478., must be smaller than or equal to 172800.');
        }
        if (!is_null($keylife) && ($keylife < 120)) {
            throw new \InvalidArgumentException('invalid value for $keylife when calling InlineObject478., must be bigger than or equal to 120.');
        }

        $this->container['keylife'] = $keylife;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameCertificate[]|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameCertificate[]|null $certificate Names of up to 4 signed personal certificates.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {

        if (!is_null($certificate) && (count($certificate) > 0)) {
            throw new \InvalidArgumentException('invalid value for $certificate when calling InlineObject478., number of items must be less than or equal to 0.');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets authmethod
     *
     * @return string|null
     */
    public function getAuthmethod()
    {
        return $this->container['authmethod'];
    }

    /**
     * Sets authmethod
     *
     * @param string|null $authmethod Authentication method.    psk:PSK authentication method.    signature:Signature authentication method.
     *
     * @return self
     */
    public function setAuthmethod($authmethod)
    {
        $allowedValues = $this->getAuthmethodAllowableValues();
        if (!is_null($authmethod) && !in_array($authmethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authmethod', must be one of '%s'",
                    $authmethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authmethod'] = $authmethod;

        return $this;
    }

    /**
     * Gets authmethod_remote
     *
     * @return string|null
     */
    public function getAuthmethodRemote()
    {
        return $this->container['authmethod_remote'];
    }

    /**
     * Sets authmethod_remote
     *
     * @param string|null $authmethod_remote Authentication method (remote side).    psk:PSK authentication method.    signature:Signature authentication method.
     *
     * @return self
     */
    public function setAuthmethodRemote($authmethod_remote)
    {
        $allowedValues = $this->getAuthmethodRemoteAllowableValues();
        if (!is_null($authmethod_remote) && !in_array($authmethod_remote, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authmethod_remote', must be one of '%s'",
                    $authmethod_remote,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authmethod_remote'] = $authmethod_remote;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode ID protection mode used to establish a secure channel.    aggressive:Aggressive mode.    main:Main mode.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets peertype
     *
     * @return string|null
     */
    public function getPeertype()
    {
        return $this->container['peertype'];
    }

    /**
     * Sets peertype
     *
     * @param string|null $peertype Accept this peer type.    any:Accept any peer ID.    one:Accept this peer ID.    dialup:Accept peer ID in dialup group.    peer:Accept this peer certificate.    peergrp:Accept this peer certificate group.
     *
     * @return self
     */
    public function setPeertype($peertype)
    {
        $allowedValues = $this->getPeertypeAllowableValues();
        if (!is_null($peertype) && !in_array($peertype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peertype', must be one of '%s'",
                    $peertype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peertype'] = $peertype;

        return $this;
    }

    /**
     * Gets peerid
     *
     * @return string|null
     */
    public function getPeerid()
    {
        return $this->container['peerid'];
    }

    /**
     * Sets peerid
     *
     * @param string|null $peerid Accept this peer identity.
     *
     * @return self
     */
    public function setPeerid($peerid)
    {
        if (!is_null($peerid) && (mb_strlen($peerid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $peerid when calling InlineObject478., must be smaller than or equal to 255.');
        }

        $this->container['peerid'] = $peerid;

        return $this;
    }

    /**
     * Gets usrgrp
     *
     * @return string|null
     */
    public function getUsrgrp()
    {
        return $this->container['usrgrp'];
    }

    /**
     * Sets usrgrp
     *
     * @param string|null $usrgrp User group name for dialup peers.
     *
     * @return self
     */
    public function setUsrgrp($usrgrp)
    {
        if (!is_null($usrgrp) && (mb_strlen($usrgrp) > 35)) {
            throw new \InvalidArgumentException('invalid length for $usrgrp when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['usrgrp'] = $usrgrp;

        return $this;
    }

    /**
     * Gets peer
     *
     * @return string|null
     */
    public function getPeer()
    {
        return $this->container['peer'];
    }

    /**
     * Sets peer
     *
     * @param string|null $peer Accept this peer certificate.
     *
     * @return self
     */
    public function setPeer($peer)
    {
        if (!is_null($peer) && (mb_strlen($peer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $peer when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['peer'] = $peer;

        return $this;
    }

    /**
     * Gets peergrp
     *
     * @return string|null
     */
    public function getPeergrp()
    {
        return $this->container['peergrp'];
    }

    /**
     * Sets peergrp
     *
     * @param string|null $peergrp Accept this peer certificate group.
     *
     * @return self
     */
    public function setPeergrp($peergrp)
    {
        if (!is_null($peergrp) && (mb_strlen($peergrp) > 35)) {
            throw new \InvalidArgumentException('invalid length for $peergrp when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['peergrp'] = $peergrp;

        return $this;
    }

    /**
     * Gets mode_cfg
     *
     * @return string|null
     */
    public function getModeCfg()
    {
        return $this->container['mode_cfg'];
    }

    /**
     * Sets mode_cfg
     *
     * @param string|null $mode_cfg Enable/disable configuration method.    disable:Disable Configuration Method.    enable:Enable Configuration Method.
     *
     * @return self
     */
    public function setModeCfg($mode_cfg)
    {
        $allowedValues = $this->getModeCfgAllowableValues();
        if (!is_null($mode_cfg) && !in_array($mode_cfg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode_cfg', must be one of '%s'",
                    $mode_cfg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode_cfg'] = $mode_cfg;

        return $this;
    }

    /**
     * Gets assign_ip
     *
     * @return string|null
     */
    public function getAssignIp()
    {
        return $this->container['assign_ip'];
    }

    /**
     * Sets assign_ip
     *
     * @param string|null $assign_ip Enable/disable assignment of IP to IPsec interface via configuration method.    disable:Do not assign an IP address to the IPsec interface.    enable:Assign an IP address to the IPsec interface.
     *
     * @return self
     */
    public function setAssignIp($assign_ip)
    {
        $allowedValues = $this->getAssignIpAllowableValues();
        if (!is_null($assign_ip) && !in_array($assign_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assign_ip', must be one of '%s'",
                    $assign_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assign_ip'] = $assign_ip;

        return $this;
    }

    /**
     * Gets assign_ip_from
     *
     * @return string|null
     */
    public function getAssignIpFrom()
    {
        return $this->container['assign_ip_from'];
    }

    /**
     * Sets assign_ip_from
     *
     * @param string|null $assign_ip_from Method by which the IP address will be assigned.    range:Assign IP address from locally defined range.    usrgrp:Assign IP address via user group.    dhcp:Assign IP address via DHCP.    name:Assign IP address from firewall address or group.
     *
     * @return self
     */
    public function setAssignIpFrom($assign_ip_from)
    {
        $allowedValues = $this->getAssignIpFromAllowableValues();
        if (!is_null($assign_ip_from) && !in_array($assign_ip_from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assign_ip_from', must be one of '%s'",
                    $assign_ip_from,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assign_ip_from'] = $assign_ip_from;

        return $this;
    }

    /**
     * Gets ipv4_start_ip
     *
     * @return string|null
     */
    public function getIpv4StartIp()
    {
        return $this->container['ipv4_start_ip'];
    }

    /**
     * Sets ipv4_start_ip
     *
     * @param string|null $ipv4_start_ip Start of IPv4 range.
     *
     * @return self
     */
    public function setIpv4StartIp($ipv4_start_ip)
    {
        $this->container['ipv4_start_ip'] = $ipv4_start_ip;

        return $this;
    }

    /**
     * Gets ipv4_end_ip
     *
     * @return string|null
     */
    public function getIpv4EndIp()
    {
        return $this->container['ipv4_end_ip'];
    }

    /**
     * Sets ipv4_end_ip
     *
     * @param string|null $ipv4_end_ip End of IPv4 range.
     *
     * @return self
     */
    public function setIpv4EndIp($ipv4_end_ip)
    {
        $this->container['ipv4_end_ip'] = $ipv4_end_ip;

        return $this;
    }

    /**
     * Gets ipv4_netmask
     *
     * @return string|null
     */
    public function getIpv4Netmask()
    {
        return $this->container['ipv4_netmask'];
    }

    /**
     * Sets ipv4_netmask
     *
     * @param string|null $ipv4_netmask IPv4 Netmask.
     *
     * @return self
     */
    public function setIpv4Netmask($ipv4_netmask)
    {
        $this->container['ipv4_netmask'] = $ipv4_netmask;

        return $this;
    }

    /**
     * Gets dhcp_ra_giaddr
     *
     * @return string|null
     */
    public function getDhcpRaGiaddr()
    {
        return $this->container['dhcp_ra_giaddr'];
    }

    /**
     * Sets dhcp_ra_giaddr
     *
     * @param string|null $dhcp_ra_giaddr Relay agent gateway IP address to use in the giaddr field of DHCP requests.
     *
     * @return self
     */
    public function setDhcpRaGiaddr($dhcp_ra_giaddr)
    {
        $this->container['dhcp_ra_giaddr'] = $dhcp_ra_giaddr;

        return $this;
    }

    /**
     * Gets dhcp6_ra_linkaddr
     *
     * @return string|null
     */
    public function getDhcp6RaLinkaddr()
    {
        return $this->container['dhcp6_ra_linkaddr'];
    }

    /**
     * Sets dhcp6_ra_linkaddr
     *
     * @param string|null $dhcp6_ra_linkaddr Relay agent IPv6 link address to use in DHCP6 requests.
     *
     * @return self
     */
    public function setDhcp6RaLinkaddr($dhcp6_ra_linkaddr)
    {
        $this->container['dhcp6_ra_linkaddr'] = $dhcp6_ra_linkaddr;

        return $this;
    }

    /**
     * Gets dns_mode
     *
     * @return string|null
     */
    public function getDnsMode()
    {
        return $this->container['dns_mode'];
    }

    /**
     * Sets dns_mode
     *
     * @param string|null $dns_mode DNS server mode.    manual:Manually configure DNS servers.    auto:Use default DNS servers.
     *
     * @return self
     */
    public function setDnsMode($dns_mode)
    {
        $allowedValues = $this->getDnsModeAllowableValues();
        if (!is_null($dns_mode) && !in_array($dns_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dns_mode', must be one of '%s'",
                    $dns_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_mode'] = $dns_mode;

        return $this;
    }

    /**
     * Gets ipv4_dns_server1
     *
     * @return string|null
     */
    public function getIpv4DnsServer1()
    {
        return $this->container['ipv4_dns_server1'];
    }

    /**
     * Sets ipv4_dns_server1
     *
     * @param string|null $ipv4_dns_server1 IPv4 DNS server 1.
     *
     * @return self
     */
    public function setIpv4DnsServer1($ipv4_dns_server1)
    {
        $this->container['ipv4_dns_server1'] = $ipv4_dns_server1;

        return $this;
    }

    /**
     * Gets ipv4_dns_server2
     *
     * @return string|null
     */
    public function getIpv4DnsServer2()
    {
        return $this->container['ipv4_dns_server2'];
    }

    /**
     * Sets ipv4_dns_server2
     *
     * @param string|null $ipv4_dns_server2 IPv4 DNS server 2.
     *
     * @return self
     */
    public function setIpv4DnsServer2($ipv4_dns_server2)
    {
        $this->container['ipv4_dns_server2'] = $ipv4_dns_server2;

        return $this;
    }

    /**
     * Gets ipv4_dns_server3
     *
     * @return string|null
     */
    public function getIpv4DnsServer3()
    {
        return $this->container['ipv4_dns_server3'];
    }

    /**
     * Sets ipv4_dns_server3
     *
     * @param string|null $ipv4_dns_server3 IPv4 DNS server 3.
     *
     * @return self
     */
    public function setIpv4DnsServer3($ipv4_dns_server3)
    {
        $this->container['ipv4_dns_server3'] = $ipv4_dns_server3;

        return $this;
    }

    /**
     * Gets ipv4_wins_server1
     *
     * @return string|null
     */
    public function getIpv4WinsServer1()
    {
        return $this->container['ipv4_wins_server1'];
    }

    /**
     * Sets ipv4_wins_server1
     *
     * @param string|null $ipv4_wins_server1 WINS server 1.
     *
     * @return self
     */
    public function setIpv4WinsServer1($ipv4_wins_server1)
    {
        $this->container['ipv4_wins_server1'] = $ipv4_wins_server1;

        return $this;
    }

    /**
     * Gets ipv4_wins_server2
     *
     * @return string|null
     */
    public function getIpv4WinsServer2()
    {
        return $this->container['ipv4_wins_server2'];
    }

    /**
     * Sets ipv4_wins_server2
     *
     * @param string|null $ipv4_wins_server2 WINS server 2.
     *
     * @return self
     */
    public function setIpv4WinsServer2($ipv4_wins_server2)
    {
        $this->container['ipv4_wins_server2'] = $ipv4_wins_server2;

        return $this;
    }

    /**
     * Gets ipv4_exclude_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv4ExcludeRange[]|null
     */
    public function getIpv4ExcludeRange()
    {
        return $this->container['ipv4_exclude_range'];
    }

    /**
     * Sets ipv4_exclude_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv4ExcludeRange[]|null $ipv4_exclude_range Configuration Method IPv4 exclude ranges.
     *
     * @return self
     */
    public function setIpv4ExcludeRange($ipv4_exclude_range)
    {

        if (!is_null($ipv4_exclude_range) && (count($ipv4_exclude_range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv4_exclude_range when calling InlineObject478., number of items must be less than or equal to 0.');
        }
        $this->container['ipv4_exclude_range'] = $ipv4_exclude_range;

        return $this;
    }

    /**
     * Gets ipv4_split_include
     *
     * @return string|null
     */
    public function getIpv4SplitInclude()
    {
        return $this->container['ipv4_split_include'];
    }

    /**
     * Sets ipv4_split_include
     *
     * @param string|null $ipv4_split_include IPv4 split-include subnets.
     *
     * @return self
     */
    public function setIpv4SplitInclude($ipv4_split_include)
    {
        if (!is_null($ipv4_split_include) && (mb_strlen($ipv4_split_include) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv4_split_include when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv4_split_include'] = $ipv4_split_include;

        return $this;
    }

    /**
     * Gets split_include_service
     *
     * @return string|null
     */
    public function getSplitIncludeService()
    {
        return $this->container['split_include_service'];
    }

    /**
     * Sets split_include_service
     *
     * @param string|null $split_include_service Split-include services.
     *
     * @return self
     */
    public function setSplitIncludeService($split_include_service)
    {
        if (!is_null($split_include_service) && (mb_strlen($split_include_service) > 79)) {
            throw new \InvalidArgumentException('invalid length for $split_include_service when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['split_include_service'] = $split_include_service;

        return $this;
    }

    /**
     * Gets ipv4_name
     *
     * @return string|null
     */
    public function getIpv4Name()
    {
        return $this->container['ipv4_name'];
    }

    /**
     * Sets ipv4_name
     *
     * @param string|null $ipv4_name IPv4 address name.
     *
     * @return self
     */
    public function setIpv4Name($ipv4_name)
    {
        if (!is_null($ipv4_name) && (mb_strlen($ipv4_name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv4_name when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv4_name'] = $ipv4_name;

        return $this;
    }

    /**
     * Gets ipv6_start_ip
     *
     * @return string|null
     */
    public function getIpv6StartIp()
    {
        return $this->container['ipv6_start_ip'];
    }

    /**
     * Sets ipv6_start_ip
     *
     * @param string|null $ipv6_start_ip Start of IPv6 range.
     *
     * @return self
     */
    public function setIpv6StartIp($ipv6_start_ip)
    {
        $this->container['ipv6_start_ip'] = $ipv6_start_ip;

        return $this;
    }

    /**
     * Gets ipv6_end_ip
     *
     * @return string|null
     */
    public function getIpv6EndIp()
    {
        return $this->container['ipv6_end_ip'];
    }

    /**
     * Sets ipv6_end_ip
     *
     * @param string|null $ipv6_end_ip End of IPv6 range.
     *
     * @return self
     */
    public function setIpv6EndIp($ipv6_end_ip)
    {
        $this->container['ipv6_end_ip'] = $ipv6_end_ip;

        return $this;
    }

    /**
     * Gets ipv6_prefix
     *
     * @return int|null
     */
    public function getIpv6Prefix()
    {
        return $this->container['ipv6_prefix'];
    }

    /**
     * Sets ipv6_prefix
     *
     * @param int|null $ipv6_prefix IPv6 prefix.
     *
     * @return self
     */
    public function setIpv6Prefix($ipv6_prefix)
    {

        if (!is_null($ipv6_prefix) && ($ipv6_prefix > 128)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_prefix when calling InlineObject478., must be smaller than or equal to 128.');
        }
        if (!is_null($ipv6_prefix) && ($ipv6_prefix < 1)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_prefix when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['ipv6_prefix'] = $ipv6_prefix;

        return $this;
    }

    /**
     * Gets ipv6_dns_server1
     *
     * @return string|null
     */
    public function getIpv6DnsServer1()
    {
        return $this->container['ipv6_dns_server1'];
    }

    /**
     * Sets ipv6_dns_server1
     *
     * @param string|null $ipv6_dns_server1 IPv6 DNS server 1.
     *
     * @return self
     */
    public function setIpv6DnsServer1($ipv6_dns_server1)
    {
        $this->container['ipv6_dns_server1'] = $ipv6_dns_server1;

        return $this;
    }

    /**
     * Gets ipv6_dns_server2
     *
     * @return string|null
     */
    public function getIpv6DnsServer2()
    {
        return $this->container['ipv6_dns_server2'];
    }

    /**
     * Sets ipv6_dns_server2
     *
     * @param string|null $ipv6_dns_server2 IPv6 DNS server 2.
     *
     * @return self
     */
    public function setIpv6DnsServer2($ipv6_dns_server2)
    {
        $this->container['ipv6_dns_server2'] = $ipv6_dns_server2;

        return $this;
    }

    /**
     * Gets ipv6_dns_server3
     *
     * @return string|null
     */
    public function getIpv6DnsServer3()
    {
        return $this->container['ipv6_dns_server3'];
    }

    /**
     * Sets ipv6_dns_server3
     *
     * @param string|null $ipv6_dns_server3 IPv6 DNS server 3.
     *
     * @return self
     */
    public function setIpv6DnsServer3($ipv6_dns_server3)
    {
        $this->container['ipv6_dns_server3'] = $ipv6_dns_server3;

        return $this;
    }

    /**
     * Gets ipv6_exclude_range
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv6ExcludeRange[]|null
     */
    public function getIpv6ExcludeRange()
    {
        return $this->container['ipv6_exclude_range'];
    }

    /**
     * Sets ipv6_exclude_range
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameIpv6ExcludeRange[]|null $ipv6_exclude_range Configuration method IPv6 exclude ranges.
     *
     * @return self
     */
    public function setIpv6ExcludeRange($ipv6_exclude_range)
    {

        if (!is_null($ipv6_exclude_range) && (count($ipv6_exclude_range) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_exclude_range when calling InlineObject478., number of items must be less than or equal to 0.');
        }
        $this->container['ipv6_exclude_range'] = $ipv6_exclude_range;

        return $this;
    }

    /**
     * Gets ipv6_split_include
     *
     * @return string|null
     */
    public function getIpv6SplitInclude()
    {
        return $this->container['ipv6_split_include'];
    }

    /**
     * Sets ipv6_split_include
     *
     * @param string|null $ipv6_split_include IPv6 split-include subnets.
     *
     * @return self
     */
    public function setIpv6SplitInclude($ipv6_split_include)
    {
        if (!is_null($ipv6_split_include) && (mb_strlen($ipv6_split_include) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv6_split_include when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv6_split_include'] = $ipv6_split_include;

        return $this;
    }

    /**
     * Gets ipv6_name
     *
     * @return string|null
     */
    public function getIpv6Name()
    {
        return $this->container['ipv6_name'];
    }

    /**
     * Sets ipv6_name
     *
     * @param string|null $ipv6_name IPv6 address name.
     *
     * @return self
     */
    public function setIpv6Name($ipv6_name)
    {
        if (!is_null($ipv6_name) && (mb_strlen($ipv6_name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv6_name when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv6_name'] = $ipv6_name;

        return $this;
    }

    /**
     * Gets unity_support
     *
     * @return string|null
     */
    public function getUnitySupport()
    {
        return $this->container['unity_support'];
    }

    /**
     * Sets unity_support
     *
     * @param string|null $unity_support Enable/disable support for Cisco UNITY Configuration Method extensions.    disable:Disable Cisco Unity Configuration Method Extensions.    enable:Enable Cisco Unity Configuration Method Extensions.
     *
     * @return self
     */
    public function setUnitySupport($unity_support)
    {
        $allowedValues = $this->getUnitySupportAllowableValues();
        if (!is_null($unity_support) && !in_array($unity_support, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unity_support', must be one of '%s'",
                    $unity_support,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unity_support'] = $unity_support;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Instruct unity clients about the default DNS domain.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 63)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling InlineObject478., must be smaller than or equal to 63.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner Message that unity client should display after connecting.
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (!is_null($banner) && (mb_strlen($banner) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $banner when calling InlineObject478., must be smaller than or equal to 1024.');
        }

        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets include_local_lan
     *
     * @return string|null
     */
    public function getIncludeLocalLan()
    {
        return $this->container['include_local_lan'];
    }

    /**
     * Sets include_local_lan
     *
     * @param string|null $include_local_lan Enable/disable allow local LAN access on unity clients.    disable:Disable local LAN access on Unity clients.    enable:Enable local LAN access on Unity clients.
     *
     * @return self
     */
    public function setIncludeLocalLan($include_local_lan)
    {
        $allowedValues = $this->getIncludeLocalLanAllowableValues();
        if (!is_null($include_local_lan) && !in_array($include_local_lan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include_local_lan', must be one of '%s'",
                    $include_local_lan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['include_local_lan'] = $include_local_lan;

        return $this;
    }

    /**
     * Gets ipv4_split_exclude
     *
     * @return string|null
     */
    public function getIpv4SplitExclude()
    {
        return $this->container['ipv4_split_exclude'];
    }

    /**
     * Sets ipv4_split_exclude
     *
     * @param string|null $ipv4_split_exclude IPv4 subnets that should not be sent over the IPsec tunnel.
     *
     * @return self
     */
    public function setIpv4SplitExclude($ipv4_split_exclude)
    {
        if (!is_null($ipv4_split_exclude) && (mb_strlen($ipv4_split_exclude) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv4_split_exclude when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv4_split_exclude'] = $ipv4_split_exclude;

        return $this;
    }

    /**
     * Gets ipv6_split_exclude
     *
     * @return string|null
     */
    public function getIpv6SplitExclude()
    {
        return $this->container['ipv6_split_exclude'];
    }

    /**
     * Sets ipv6_split_exclude
     *
     * @param string|null $ipv6_split_exclude IPv6 subnets that should not be sent over the IPsec tunnel.
     *
     * @return self
     */
    public function setIpv6SplitExclude($ipv6_split_exclude)
    {
        if (!is_null($ipv6_split_exclude) && (mb_strlen($ipv6_split_exclude) > 79)) {
            throw new \InvalidArgumentException('invalid length for $ipv6_split_exclude when calling InlineObject478., must be smaller than or equal to 79.');
        }

        $this->container['ipv6_split_exclude'] = $ipv6_split_exclude;

        return $this;
    }

    /**
     * Gets save_password
     *
     * @return string|null
     */
    public function getSavePassword()
    {
        return $this->container['save_password'];
    }

    /**
     * Sets save_password
     *
     * @param string|null $save_password Enable/disable saving XAuth username and password on VPN clients.    disable:Disable saving XAuth username and password on VPN clients.    enable:Enable saving XAuth username and password on VPN clients.
     *
     * @return self
     */
    public function setSavePassword($save_password)
    {
        $allowedValues = $this->getSavePasswordAllowableValues();
        if (!is_null($save_password) && !in_array($save_password, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'save_password', must be one of '%s'",
                    $save_password,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['save_password'] = $save_password;

        return $this;
    }

    /**
     * Gets client_auto_negotiate
     *
     * @return string|null
     */
    public function getClientAutoNegotiate()
    {
        return $this->container['client_auto_negotiate'];
    }

    /**
     * Sets client_auto_negotiate
     *
     * @param string|null $client_auto_negotiate Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic.    disable:Disable allowing the VPN client to bring up the tunnel when there is no traffic.    enable:Enable allowing the VPN client to bring up the tunnel when there is no traffic.
     *
     * @return self
     */
    public function setClientAutoNegotiate($client_auto_negotiate)
    {
        $allowedValues = $this->getClientAutoNegotiateAllowableValues();
        if (!is_null($client_auto_negotiate) && !in_array($client_auto_negotiate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'client_auto_negotiate', must be one of '%s'",
                    $client_auto_negotiate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client_auto_negotiate'] = $client_auto_negotiate;

        return $this;
    }

    /**
     * Gets client_keep_alive
     *
     * @return string|null
     */
    public function getClientKeepAlive()
    {
        return $this->container['client_keep_alive'];
    }

    /**
     * Sets client_keep_alive
     *
     * @param string|null $client_keep_alive Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic.    disable:Disable allowing the VPN client to keep the tunnel up when there is no traffic.    enable:Enable allowing the VPN client to keep the tunnel up when there is no traffic.
     *
     * @return self
     */
    public function setClientKeepAlive($client_keep_alive)
    {
        $allowedValues = $this->getClientKeepAliveAllowableValues();
        if (!is_null($client_keep_alive) && !in_array($client_keep_alive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'client_keep_alive', must be one of '%s'",
                    $client_keep_alive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client_keep_alive'] = $client_keep_alive;

        return $this;
    }

    /**
     * Gets backup_gateway
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameBackupGateway[]|null
     */
    public function getBackupGateway()
    {
        return $this->container['backup_gateway'];
    }

    /**
     * Sets backup_gateway
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnIpsecPhase1NameBackupGateway[]|null $backup_gateway Instruct unity clients about the backup gateway address(es).
     *
     * @return self
     */
    public function setBackupGateway($backup_gateway)
    {

        if (!is_null($backup_gateway) && (count($backup_gateway) > 0)) {
            throw new \InvalidArgumentException('invalid value for $backup_gateway when calling InlineObject478., number of items must be less than or equal to 0.');
        }
        $this->container['backup_gateway'] = $backup_gateway;

        return $this;
    }

    /**
     * Gets proposal
     *
     * @return string|null
     */
    public function getProposal()
    {
        return $this->container['proposal'];
    }

    /**
     * Sets proposal
     *
     * @param string|null $proposal Phase1 proposal.    des-md5:des-md5    des-sha1:des-sha1    des-sha256:des-sha256    des-sha384:des-sha384    des-sha512:des-sha512    3des-md5:3des-md5    3des-sha1:3des-sha1    3des-sha256:3des-sha256    3des-sha384:3des-sha384    3des-sha512:3des-sha512    aes128-md5:aes128-md5    aes128-sha1:aes128-sha1    aes128-sha256:aes128-sha256    aes128-sha384:aes128-sha384    aes128-sha512:aes128-sha512    aes128gcm-prfsha1:aes128gcm-prfsha1    aes128gcm-prfsha256:aes128gcm-prfsha256    aes128gcm-prfsha384:aes128gcm-prfsha384    aes128gcm-prfsha512:aes128gcm-prfsha512    aes192-md5:aes192-md5    aes192-sha1:aes192-sha1    aes192-sha256:aes192-sha256    aes192-sha384:aes192-sha384    aes192-sha512:aes192-sha512    aes256-md5:aes256-md5    aes256-sha1:aes256-sha1    aes256-sha256:aes256-sha256    aes256-sha384:aes256-sha384    aes256-sha512:aes256-sha512    aes256gcm-prfsha1:aes256gcm-prfsha1    aes256gcm-prfsha256:aes256gcm-prfsha256    aes256gcm-prfsha384:aes256gcm-prfsha384    aes256gcm-prfsha512:aes256gcm-prfsha512    chacha20poly1305-prfsha1:chacha20poly1305-prfsha1    chacha20poly1305-prfsha256:chacha20poly1305-prfsha256    chacha20poly1305-prfsha384:chacha20poly1305-prfsha384    chacha20poly1305-prfsha512:chacha20poly1305-prfsha512    aria128-md5:aria128-md5    aria128-sha1:aria128-sha1    aria128-sha256:aria128-sha256    aria128-sha384:aria128-sha384    aria128-sha512:aria128-sha512    aria192-md5:aria192-md5    aria192-sha1:aria192-sha1    aria192-sha256:aria192-sha256    aria192-sha384:aria192-sha384    aria192-sha512:aria192-sha512    aria256-md5:aria256-md5    aria256-sha1:aria256-sha1    aria256-sha256:aria256-sha256    aria256-sha384:aria256-sha384    aria256-sha512:aria256-sha512    seed-md5:seed-md5    seed-sha1:seed-sha1    seed-sha256:seed-sha256    seed-sha384:seed-sha384    seed-sha512:seed-sha512
     *
     * @return self
     */
    public function setProposal($proposal)
    {
        $allowedValues = $this->getProposalAllowableValues();
        if (!is_null($proposal) && !in_array($proposal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proposal', must be one of '%s'",
                    $proposal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proposal'] = $proposal;

        return $this;
    }

    /**
     * Gets add_route
     *
     * @return string|null
     */
    public function getAddRoute()
    {
        return $this->container['add_route'];
    }

    /**
     * Sets add_route
     *
     * @param string|null $add_route Enable/disable control addition of a route to peer destination selector.    disable:Do not add a route to destination of peer selector.    enable:Add route to destination of peer selector.
     *
     * @return self
     */
    public function setAddRoute($add_route)
    {
        $allowedValues = $this->getAddRouteAllowableValues();
        if (!is_null($add_route) && !in_array($add_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'add_route', must be one of '%s'",
                    $add_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['add_route'] = $add_route;

        return $this;
    }

    /**
     * Gets add_gw_route
     *
     * @return string|null
     */
    public function getAddGwRoute()
    {
        return $this->container['add_gw_route'];
    }

    /**
     * Sets add_gw_route
     *
     * @param string|null $add_gw_route Enable/disable automatically add a route to the remote gateway.    enable:Automatically add a route to the remote gateway.    disable:Do not automatically add a route to the remote gateway.
     *
     * @return self
     */
    public function setAddGwRoute($add_gw_route)
    {
        $allowedValues = $this->getAddGwRouteAllowableValues();
        if (!is_null($add_gw_route) && !in_array($add_gw_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'add_gw_route', must be one of '%s'",
                    $add_gw_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['add_gw_route'] = $add_gw_route;

        return $this;
    }

    /**
     * Gets psksecret
     *
     * @return string|null
     */
    public function getPsksecret()
    {
        return $this->container['psksecret'];
    }

    /**
     * Sets psksecret
     *
     * @param string|null $psksecret Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
     *
     * @return self
     */
    public function setPsksecret($psksecret)
    {
        $this->container['psksecret'] = $psksecret;

        return $this;
    }

    /**
     * Gets psksecret_remote
     *
     * @return string|null
     */
    public function getPsksecretRemote()
    {
        return $this->container['psksecret_remote'];
    }

    /**
     * Sets psksecret_remote
     *
     * @param string|null $psksecret_remote Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
     *
     * @return self
     */
    public function setPsksecretRemote($psksecret_remote)
    {
        $this->container['psksecret_remote'] = $psksecret_remote;

        return $this;
    }

    /**
     * Gets keepalive
     *
     * @return int|null
     */
    public function getKeepalive()
    {
        return $this->container['keepalive'];
    }

    /**
     * Sets keepalive
     *
     * @param int|null $keepalive NAT-T keep alive interval.
     *
     * @return self
     */
    public function setKeepalive($keepalive)
    {

        if (!is_null($keepalive) && ($keepalive > 900)) {
            throw new \InvalidArgumentException('invalid value for $keepalive when calling InlineObject478., must be smaller than or equal to 900.');
        }
        if (!is_null($keepalive) && ($keepalive < 10)) {
            throw new \InvalidArgumentException('invalid value for $keepalive when calling InlineObject478., must be bigger than or equal to 10.');
        }

        $this->container['keepalive'] = $keepalive;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Distance for routes added by IKE (1 - 255).
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance > 255)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject478., must be smaller than or equal to 255.');
        }
        if (!is_null($distance) && ($distance < 1)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Priority for routes added by IKE (0 - 4294967295).
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject478., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($priority) && ($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling InlineObject478., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets localid
     *
     * @return string|null
     */
    public function getLocalid()
    {
        return $this->container['localid'];
    }

    /**
     * Sets localid
     *
     * @param string|null $localid Local ID.
     *
     * @return self
     */
    public function setLocalid($localid)
    {
        if (!is_null($localid) && (mb_strlen($localid) > 63)) {
            throw new \InvalidArgumentException('invalid length for $localid when calling InlineObject478., must be smaller than or equal to 63.');
        }

        $this->container['localid'] = $localid;

        return $this;
    }

    /**
     * Gets localid_type
     *
     * @return string|null
     */
    public function getLocalidType()
    {
        return $this->container['localid_type'];
    }

    /**
     * Sets localid_type
     *
     * @param string|null $localid_type Local ID type.    auto:Select ID type automatically.    fqdn:Use fully qualified domain name.    user-fqdn:Use user fully qualified domain name.    keyid:Use key-id string.    address:Use local IP address.    asn1dn:Use ASN.1 distinguished name.
     *
     * @return self
     */
    public function setLocalidType($localid_type)
    {
        $allowedValues = $this->getLocalidTypeAllowableValues();
        if (!is_null($localid_type) && !in_array($localid_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'localid_type', must be one of '%s'",
                    $localid_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['localid_type'] = $localid_type;

        return $this;
    }

    /**
     * Gets auto_negotiate
     *
     * @return string|null
     */
    public function getAutoNegotiate()
    {
        return $this->container['auto_negotiate'];
    }

    /**
     * Sets auto_negotiate
     *
     * @param string|null $auto_negotiate Enable/disable automatic initiation of IKE SA negotiation.    enable:Enable automatic initiation of IKE SA negotiation.    disable:Disable automatic initiation of IKE SA negotiation.
     *
     * @return self
     */
    public function setAutoNegotiate($auto_negotiate)
    {
        $allowedValues = $this->getAutoNegotiateAllowableValues();
        if (!is_null($auto_negotiate) && !in_array($auto_negotiate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_negotiate', must be one of '%s'",
                    $auto_negotiate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_negotiate'] = $auto_negotiate;

        return $this;
    }

    /**
     * Gets negotiate_timeout
     *
     * @return int|null
     */
    public function getNegotiateTimeout()
    {
        return $this->container['negotiate_timeout'];
    }

    /**
     * Sets negotiate_timeout
     *
     * @param int|null $negotiate_timeout IKE SA negotiation timeout in seconds (1 - 300).
     *
     * @return self
     */
    public function setNegotiateTimeout($negotiate_timeout)
    {

        if (!is_null($negotiate_timeout) && ($negotiate_timeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $negotiate_timeout when calling InlineObject478., must be smaller than or equal to 300.');
        }
        if (!is_null($negotiate_timeout) && ($negotiate_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $negotiate_timeout when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['negotiate_timeout'] = $negotiate_timeout;

        return $this;
    }

    /**
     * Gets fragmentation
     *
     * @return string|null
     */
    public function getFragmentation()
    {
        return $this->container['fragmentation'];
    }

    /**
     * Sets fragmentation
     *
     * @param string|null $fragmentation Enable/disable fragment IKE message on re-transmission.    enable:Enable intra-IKE fragmentation support on re-transmission.    disable:Disable intra-IKE fragmentation support.
     *
     * @return self
     */
    public function setFragmentation($fragmentation)
    {
        $allowedValues = $this->getFragmentationAllowableValues();
        if (!is_null($fragmentation) && !in_array($fragmentation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fragmentation', must be one of '%s'",
                    $fragmentation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fragmentation'] = $fragmentation;

        return $this;
    }

    /**
     * Gets dpd
     *
     * @return string|null
     */
    public function getDpd()
    {
        return $this->container['dpd'];
    }

    /**
     * Sets dpd
     *
     * @param string|null $dpd Dead Peer Detection mode.    disable:Disable Dead Peer Detection.    on-idle:Trigger Dead Peer Detection when IPsec is idle.    on-demand:Trigger Dead Peer Detection when IPsec traffic is sent but no reply is received from the peer.
     *
     * @return self
     */
    public function setDpd($dpd)
    {
        $allowedValues = $this->getDpdAllowableValues();
        if (!is_null($dpd) && !in_array($dpd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dpd', must be one of '%s'",
                    $dpd,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dpd'] = $dpd;

        return $this;
    }

    /**
     * Gets dpd_retrycount
     *
     * @return int|null
     */
    public function getDpdRetrycount()
    {
        return $this->container['dpd_retrycount'];
    }

    /**
     * Sets dpd_retrycount
     *
     * @param int|null $dpd_retrycount Number of DPD retry attempts.
     *
     * @return self
     */
    public function setDpdRetrycount($dpd_retrycount)
    {

        if (!is_null($dpd_retrycount) && ($dpd_retrycount > 10)) {
            throw new \InvalidArgumentException('invalid value for $dpd_retrycount when calling InlineObject478., must be smaller than or equal to 10.');
        }
        if (!is_null($dpd_retrycount) && ($dpd_retrycount < 0)) {
            throw new \InvalidArgumentException('invalid value for $dpd_retrycount when calling InlineObject478., must be bigger than or equal to 0.');
        }

        $this->container['dpd_retrycount'] = $dpd_retrycount;

        return $this;
    }

    /**
     * Gets dpd_retryinterval
     *
     * @return string|null
     */
    public function getDpdRetryinterval()
    {
        return $this->container['dpd_retryinterval'];
    }

    /**
     * Sets dpd_retryinterval
     *
     * @param string|null $dpd_retryinterval DPD retry interval.
     *
     * @return self
     */
    public function setDpdRetryinterval($dpd_retryinterval)
    {
        $this->container['dpd_retryinterval'] = $dpd_retryinterval;

        return $this;
    }

    /**
     * Gets forticlient_enforcement
     *
     * @return string|null
     */
    public function getForticlientEnforcement()
    {
        return $this->container['forticlient_enforcement'];
    }

    /**
     * Sets forticlient_enforcement
     *
     * @param string|null $forticlient_enforcement Enable/disable FortiClient enforcement.    enable:Enable FortiClient enforcement.    disable:Disable FortiClient enforcement.
     *
     * @return self
     */
    public function setForticlientEnforcement($forticlient_enforcement)
    {
        $allowedValues = $this->getForticlientEnforcementAllowableValues();
        if (!is_null($forticlient_enforcement) && !in_array($forticlient_enforcement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'forticlient_enforcement', must be one of '%s'",
                    $forticlient_enforcement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['forticlient_enforcement'] = $forticlient_enforcement;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject478., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets npu_offload
     *
     * @return string|null
     */
    public function getNpuOffload()
    {
        return $this->container['npu_offload'];
    }

    /**
     * Sets npu_offload
     *
     * @param string|null $npu_offload Enable/disable offloading NPU.    enable:Enable NPU offloading.    disable:Disable NPU offloading.
     *
     * @return self
     */
    public function setNpuOffload($npu_offload)
    {
        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($npu_offload) && !in_array($npu_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'npu_offload', must be one of '%s'",
                    $npu_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['npu_offload'] = $npu_offload;

        return $this;
    }

    /**
     * Gets send_cert_chain
     *
     * @return string|null
     */
    public function getSendCertChain()
    {
        return $this->container['send_cert_chain'];
    }

    /**
     * Sets send_cert_chain
     *
     * @param string|null $send_cert_chain Enable/disable sending certificate chain.    enable:Enable sending certificate chain.    disable:Disable sending certificate chain.
     *
     * @return self
     */
    public function setSendCertChain($send_cert_chain)
    {
        $allowedValues = $this->getSendCertChainAllowableValues();
        if (!is_null($send_cert_chain) && !in_array($send_cert_chain, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_cert_chain', must be one of '%s'",
                    $send_cert_chain,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_cert_chain'] = $send_cert_chain;

        return $this;
    }

    /**
     * Gets dhgrp
     *
     * @return string|null
     */
    public function getDhgrp()
    {
        return $this->container['dhgrp'];
    }

    /**
     * Sets dhgrp
     *
     * @param string|null $dhgrp DH group.    1:DH Group 1.    2:DH Group 2.    5:DH Group 5.    14:DH Group 14.    15:DH Group 15.    16:DH Group 16.    17:DH Group 17.    18:DH Group 18.    19:DH Group 19.    20:DH Group 20.    21:DH Group 21.    27:DH Group 27.    28:DH Group 28.    29:DH Group 29.    30:DH Group 30.    31:DH Group 31.    32:DH Group 32.
     *
     * @return self
     */
    public function setDhgrp($dhgrp)
    {
        $allowedValues = $this->getDhgrpAllowableValues();
        if (!is_null($dhgrp) && !in_array($dhgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhgrp', must be one of '%s'",
                    $dhgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhgrp'] = $dhgrp;

        return $this;
    }

    /**
     * Gets suite_b
     *
     * @return string|null
     */
    public function getSuiteB()
    {
        return $this->container['suite_b'];
    }

    /**
     * Sets suite_b
     *
     * @param string|null $suite_b Use Suite-B.    disable:Do not use UI suite.    suite-b-gcm-128:Use Suite-B-GCM-128.    suite-b-gcm-256:Use Suite-B-GCM-256.
     *
     * @return self
     */
    public function setSuiteB($suite_b)
    {
        $allowedValues = $this->getSuiteBAllowableValues();
        if (!is_null($suite_b) && !in_array($suite_b, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'suite_b', must be one of '%s'",
                    $suite_b,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['suite_b'] = $suite_b;

        return $this;
    }

    /**
     * Gets eap
     *
     * @return string|null
     */
    public function getEap()
    {
        return $this->container['eap'];
    }

    /**
     * Sets eap
     *
     * @param string|null $eap Enable/disable IKEv2 EAP authentication.    enable:Enable IKEv2 EAP authentication.    disable:Disable IKEv2 EAP authentication.
     *
     * @return self
     */
    public function setEap($eap)
    {
        $allowedValues = $this->getEapAllowableValues();
        if (!is_null($eap) && !in_array($eap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap', must be one of '%s'",
                    $eap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap'] = $eap;

        return $this;
    }

    /**
     * Gets eap_identity
     *
     * @return string|null
     */
    public function getEapIdentity()
    {
        return $this->container['eap_identity'];
    }

    /**
     * Sets eap_identity
     *
     * @param string|null $eap_identity IKEv2 EAP peer identity type.    use-id-payload:Use IKEv2 IDi payload to resolve peer identity.    send-request:Use EAP identity request to resolve peer identity.
     *
     * @return self
     */
    public function setEapIdentity($eap_identity)
    {
        $allowedValues = $this->getEapIdentityAllowableValues();
        if (!is_null($eap_identity) && !in_array($eap_identity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap_identity', must be one of '%s'",
                    $eap_identity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap_identity'] = $eap_identity;

        return $this;
    }

    /**
     * Gets eap_exclude_peergrp
     *
     * @return string|null
     */
    public function getEapExcludePeergrp()
    {
        return $this->container['eap_exclude_peergrp'];
    }

    /**
     * Sets eap_exclude_peergrp
     *
     * @param string|null $eap_exclude_peergrp Peer group excluded from EAP authentication.
     *
     * @return self
     */
    public function setEapExcludePeergrp($eap_exclude_peergrp)
    {
        if (!is_null($eap_exclude_peergrp) && (mb_strlen($eap_exclude_peergrp) > 35)) {
            throw new \InvalidArgumentException('invalid length for $eap_exclude_peergrp when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['eap_exclude_peergrp'] = $eap_exclude_peergrp;

        return $this;
    }

    /**
     * Gets acct_verify
     *
     * @return string|null
     */
    public function getAcctVerify()
    {
        return $this->container['acct_verify'];
    }

    /**
     * Sets acct_verify
     *
     * @param string|null $acct_verify Enable/disable verification of RADIUS accounting record.    enable:Enable verification of RADIUS accounting record.    disable:Disable verification of RADIUS accounting record.
     *
     * @return self
     */
    public function setAcctVerify($acct_verify)
    {
        $allowedValues = $this->getAcctVerifyAllowableValues();
        if (!is_null($acct_verify) && !in_array($acct_verify, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'acct_verify', must be one of '%s'",
                    $acct_verify,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acct_verify'] = $acct_verify;

        return $this;
    }

    /**
     * Gets ppk
     *
     * @return string|null
     */
    public function getPpk()
    {
        return $this->container['ppk'];
    }

    /**
     * Sets ppk
     *
     * @param string|null $ppk Enable/disable IKEv2 Postquantum Preshared Key (PPK).    disable:Disable use of IKEv2 Postquantum Preshared Key (PPK).    allow:Allow, but do not require, use of IKEv2 Postquantum Preshared Key (PPK).    require:Require use of IKEv2 Postquantum Preshared Key (PPK).
     *
     * @return self
     */
    public function setPpk($ppk)
    {
        $allowedValues = $this->getPpkAllowableValues();
        if (!is_null($ppk) && !in_array($ppk, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ppk', must be one of '%s'",
                    $ppk,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ppk'] = $ppk;

        return $this;
    }

    /**
     * Gets ppk_secret
     *
     * @return string|null
     */
    public function getPpkSecret()
    {
        return $this->container['ppk_secret'];
    }

    /**
     * Sets ppk_secret
     *
     * @param string|null $ppk_secret IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
     *
     * @return self
     */
    public function setPpkSecret($ppk_secret)
    {
        $this->container['ppk_secret'] = $ppk_secret;

        return $this;
    }

    /**
     * Gets ppk_identity
     *
     * @return string|null
     */
    public function getPpkIdentity()
    {
        return $this->container['ppk_identity'];
    }

    /**
     * Sets ppk_identity
     *
     * @param string|null $ppk_identity IKEv2 Postquantum Preshared Key Identity.
     *
     * @return self
     */
    public function setPpkIdentity($ppk_identity)
    {
        if (!is_null($ppk_identity) && (mb_strlen($ppk_identity) > 35)) {
            throw new \InvalidArgumentException('invalid length for $ppk_identity when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['ppk_identity'] = $ppk_identity;

        return $this;
    }

    /**
     * Gets wizard_type
     *
     * @return string|null
     */
    public function getWizardType()
    {
        return $this->container['wizard_type'];
    }

    /**
     * Sets wizard_type
     *
     * @param string|null $wizard_type GUI VPN Wizard Type.    custom:Custom VPN configuration.    dialup-forticlient:Dial Up - FortiClient Windows, Mac and Android.    dialup-ios:Dial Up - iPhone / iPad Native IPsec Client.    dialup-android:Dial Up - Android Native IPsec Client.    dialup-windows:Dial Up - Windows Native IPsec Client.    dialup-cisco:Dial Up - Cisco IPsec Client.    static-fortigate:Site to Site - FortiGate.    dialup-fortigate:Dial Up - FortiGate.    static-cisco:Site to Site - Cisco.    dialup-cisco-fw:Dialup Up - Cisco Firewall.    simplified-static-fortigate:Site to Site - FortiGate (SD-WAN).    hub-fortigate-auto-discovery:Hub role in a Hub-and-Spoke auto-discovery VPN.    spoke-fortigate-auto-discovery:Spoke role in a Hub-and-Spoke auto-discovery VPN.
     *
     * @return self
     */
    public function setWizardType($wizard_type)
    {
        $allowedValues = $this->getWizardTypeAllowableValues();
        if (!is_null($wizard_type) && !in_array($wizard_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wizard_type', must be one of '%s'",
                    $wizard_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wizard_type'] = $wizard_type;

        return $this;
    }

    /**
     * Gets xauthtype
     *
     * @return string|null
     */
    public function getXauthtype()
    {
        return $this->container['xauthtype'];
    }

    /**
     * Sets xauthtype
     *
     * @param string|null $xauthtype XAuth type.    disable:Disable.    client:Enable as client.    pap:Enable as server PAP.    chap:Enable as server CHAP.    auto:Enable as server auto.
     *
     * @return self
     */
    public function setXauthtype($xauthtype)
    {
        $allowedValues = $this->getXauthtypeAllowableValues();
        if (!is_null($xauthtype) && !in_array($xauthtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'xauthtype', must be one of '%s'",
                    $xauthtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['xauthtype'] = $xauthtype;

        return $this;
    }

    /**
     * Gets reauth
     *
     * @return string|null
     */
    public function getReauth()
    {
        return $this->container['reauth'];
    }

    /**
     * Sets reauth
     *
     * @param string|null $reauth Enable/disable re-authentication upon IKE SA lifetime expiration.    disable:Disable IKE SA re-authentication.    enable:Enable IKE SA re-authentication.
     *
     * @return self
     */
    public function setReauth($reauth)
    {
        $allowedValues = $this->getReauthAllowableValues();
        if (!is_null($reauth) && !in_array($reauth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reauth', must be one of '%s'",
                    $reauth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reauth'] = $reauth;

        return $this;
    }

    /**
     * Gets authusr
     *
     * @return string|null
     */
    public function getAuthusr()
    {
        return $this->container['authusr'];
    }

    /**
     * Sets authusr
     *
     * @param string|null $authusr XAuth user name.
     *
     * @return self
     */
    public function setAuthusr($authusr)
    {
        if (!is_null($authusr) && (mb_strlen($authusr) > 64)) {
            throw new \InvalidArgumentException('invalid length for $authusr when calling InlineObject478., must be smaller than or equal to 64.');
        }

        $this->container['authusr'] = $authusr;

        return $this;
    }

    /**
     * Gets authpasswd
     *
     * @return string|null
     */
    public function getAuthpasswd()
    {
        return $this->container['authpasswd'];
    }

    /**
     * Sets authpasswd
     *
     * @param string|null $authpasswd XAuth password (max 35 characters).
     *
     * @return self
     */
    public function setAuthpasswd($authpasswd)
    {
        $this->container['authpasswd'] = $authpasswd;

        return $this;
    }

    /**
     * Gets group_authentication
     *
     * @return string|null
     */
    public function getGroupAuthentication()
    {
        return $this->container['group_authentication'];
    }

    /**
     * Sets group_authentication
     *
     * @param string|null $group_authentication Enable/disable IKEv2 IDi group authentication.    enable:Enable IKEv2 IDi group authentication.    disable:Disable IKEv2 IDi group authentication.
     *
     * @return self
     */
    public function setGroupAuthentication($group_authentication)
    {
        $allowedValues = $this->getGroupAuthenticationAllowableValues();
        if (!is_null($group_authentication) && !in_array($group_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_authentication', must be one of '%s'",
                    $group_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_authentication'] = $group_authentication;

        return $this;
    }

    /**
     * Gets group_authentication_secret
     *
     * @return string|null
     */
    public function getGroupAuthenticationSecret()
    {
        return $this->container['group_authentication_secret'];
    }

    /**
     * Sets group_authentication_secret
     *
     * @param string|null $group_authentication_secret Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
     *
     * @return self
     */
    public function setGroupAuthenticationSecret($group_authentication_secret)
    {
        $this->container['group_authentication_secret'] = $group_authentication_secret;

        return $this;
    }

    /**
     * Gets authusrgrp
     *
     * @return string|null
     */
    public function getAuthusrgrp()
    {
        return $this->container['authusrgrp'];
    }

    /**
     * Sets authusrgrp
     *
     * @param string|null $authusrgrp Authentication user group.
     *
     * @return self
     */
    public function setAuthusrgrp($authusrgrp)
    {
        if (!is_null($authusrgrp) && (mb_strlen($authusrgrp) > 35)) {
            throw new \InvalidArgumentException('invalid length for $authusrgrp when calling InlineObject478., must be smaller than or equal to 35.');
        }

        $this->container['authusrgrp'] = $authusrgrp;

        return $this;
    }

    /**
     * Gets mesh_selector_type
     *
     * @return string|null
     */
    public function getMeshSelectorType()
    {
        return $this->container['mesh_selector_type'];
    }

    /**
     * Sets mesh_selector_type
     *
     * @param string|null $mesh_selector_type Add selectors containing subsets of the configuration depending on traffic.    disable:Disable.    subnet:Enable addition of matching subnet selector.    host:Enable addition of host to host selector.
     *
     * @return self
     */
    public function setMeshSelectorType($mesh_selector_type)
    {
        $allowedValues = $this->getMeshSelectorTypeAllowableValues();
        if (!is_null($mesh_selector_type) && !in_array($mesh_selector_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mesh_selector_type', must be one of '%s'",
                    $mesh_selector_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mesh_selector_type'] = $mesh_selector_type;

        return $this;
    }

    /**
     * Gets idle_timeout
     *
     * @return string|null
     */
    public function getIdleTimeout()
    {
        return $this->container['idle_timeout'];
    }

    /**
     * Sets idle_timeout
     *
     * @param string|null $idle_timeout Enable/disable IPsec tunnel idle timeout.    enable:Enable IPsec tunnel idle timeout.    disable:Disable IPsec tunnel idle timeout.
     *
     * @return self
     */
    public function setIdleTimeout($idle_timeout)
    {
        $allowedValues = $this->getIdleTimeoutAllowableValues();
        if (!is_null($idle_timeout) && !in_array($idle_timeout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idle_timeout', must be one of '%s'",
                    $idle_timeout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idle_timeout'] = $idle_timeout;

        return $this;
    }

    /**
     * Gets idle_timeoutinterval
     *
     * @return int|null
     */
    public function getIdleTimeoutinterval()
    {
        return $this->container['idle_timeoutinterval'];
    }

    /**
     * Sets idle_timeoutinterval
     *
     * @param int|null $idle_timeoutinterval IPsec tunnel idle timeout in minutes (5 - 43200).
     *
     * @return self
     */
    public function setIdleTimeoutinterval($idle_timeoutinterval)
    {

        if (!is_null($idle_timeoutinterval) && ($idle_timeoutinterval > 43200)) {
            throw new \InvalidArgumentException('invalid value for $idle_timeoutinterval when calling InlineObject478., must be smaller than or equal to 43200.');
        }
        if (!is_null($idle_timeoutinterval) && ($idle_timeoutinterval < 5)) {
            throw new \InvalidArgumentException('invalid value for $idle_timeoutinterval when calling InlineObject478., must be bigger than or equal to 5.');
        }

        $this->container['idle_timeoutinterval'] = $idle_timeoutinterval;

        return $this;
    }

    /**
     * Gets ha_sync_esp_seqno
     *
     * @return string|null
     */
    public function getHaSyncEspSeqno()
    {
        return $this->container['ha_sync_esp_seqno'];
    }

    /**
     * Sets ha_sync_esp_seqno
     *
     * @param string|null $ha_sync_esp_seqno Enable/disable sequence number jump ahead for IPsec HA.    enable:Enable HA syncing of ESP sequence numbers.    disable:Disable HA syncing of ESP sequence numbers.
     *
     * @return self
     */
    public function setHaSyncEspSeqno($ha_sync_esp_seqno)
    {
        $allowedValues = $this->getHaSyncEspSeqnoAllowableValues();
        if (!is_null($ha_sync_esp_seqno) && !in_array($ha_sync_esp_seqno, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ha_sync_esp_seqno', must be one of '%s'",
                    $ha_sync_esp_seqno,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha_sync_esp_seqno'] = $ha_sync_esp_seqno;

        return $this;
    }

    /**
     * Gets nattraversal
     *
     * @return string|null
     */
    public function getNattraversal()
    {
        return $this->container['nattraversal'];
    }

    /**
     * Sets nattraversal
     *
     * @param string|null $nattraversal Enable/disable NAT traversal.    enable:Enable IPsec NAT traversal.    disable:Disable IPsec NAT traversal.    forced:Force IPsec NAT traversal on.
     *
     * @return self
     */
    public function setNattraversal($nattraversal)
    {
        $allowedValues = $this->getNattraversalAllowableValues();
        if (!is_null($nattraversal) && !in_array($nattraversal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'nattraversal', must be one of '%s'",
                    $nattraversal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nattraversal'] = $nattraversal;

        return $this;
    }

    /**
     * Gets esn
     *
     * @return string|null
     */
    public function getEsn()
    {
        return $this->container['esn'];
    }

    /**
     * Sets esn
     *
     * @param string|null $esn Extended sequence number (ESN) negotiation.    require:Require extended sequence number.    allow:Allow extended sequence number.    disable:Disable extended sequence number.
     *
     * @return self
     */
    public function setEsn($esn)
    {
        $allowedValues = $this->getEsnAllowableValues();
        if (!is_null($esn) && !in_array($esn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'esn', must be one of '%s'",
                    $esn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['esn'] = $esn;

        return $this;
    }

    /**
     * Gets fragmentation_mtu
     *
     * @return int|null
     */
    public function getFragmentationMtu()
    {
        return $this->container['fragmentation_mtu'];
    }

    /**
     * Sets fragmentation_mtu
     *
     * @param int|null $fragmentation_mtu IKE fragmentation MTU (500 - 16000).
     *
     * @return self
     */
    public function setFragmentationMtu($fragmentation_mtu)
    {

        if (!is_null($fragmentation_mtu) && ($fragmentation_mtu > 16000)) {
            throw new \InvalidArgumentException('invalid value for $fragmentation_mtu when calling InlineObject478., must be smaller than or equal to 16000.');
        }
        if (!is_null($fragmentation_mtu) && ($fragmentation_mtu < 500)) {
            throw new \InvalidArgumentException('invalid value for $fragmentation_mtu when calling InlineObject478., must be bigger than or equal to 500.');
        }

        $this->container['fragmentation_mtu'] = $fragmentation_mtu;

        return $this;
    }

    /**
     * Gets childless_ike
     *
     * @return string|null
     */
    public function getChildlessIke()
    {
        return $this->container['childless_ike'];
    }

    /**
     * Sets childless_ike
     *
     * @param string|null $childless_ike Enable/disable childless IKEv2 initiation (RFC 6023).    enable:Enable childless IKEv2 initiation (RFC 6023).    disable:Disable childless IKEv2 initiation (RFC 6023).
     *
     * @return self
     */
    public function setChildlessIke($childless_ike)
    {
        $allowedValues = $this->getChildlessIkeAllowableValues();
        if (!is_null($childless_ike) && !in_array($childless_ike, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'childless_ike', must be one of '%s'",
                    $childless_ike,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['childless_ike'] = $childless_ike;

        return $this;
    }

    /**
     * Gets rekey
     *
     * @return string|null
     */
    public function getRekey()
    {
        return $this->container['rekey'];
    }

    /**
     * Sets rekey
     *
     * @param string|null $rekey Enable/disable phase1 rekey.    enable:Enable phase1 rekey.    disable:Disable phase1 rekey.
     *
     * @return self
     */
    public function setRekey($rekey)
    {
        $allowedValues = $this->getRekeyAllowableValues();
        if (!is_null($rekey) && !in_array($rekey, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rekey', must be one of '%s'",
                    $rekey,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rekey'] = $rekey;

        return $this;
    }

    /**
     * Gets digital_signature_auth
     *
     * @return string|null
     */
    public function getDigitalSignatureAuth()
    {
        return $this->container['digital_signature_auth'];
    }

    /**
     * Sets digital_signature_auth
     *
     * @param string|null $digital_signature_auth Enable/disable IKEv2 Digital Signature Authentication (RFC 7427).    enable:Enable IKEv2 Digital Signature Authentication (RFC 7427).    disable:Disable IKEv2 Digital Signature Authentication (RFC 7427).
     *
     * @return self
     */
    public function setDigitalSignatureAuth($digital_signature_auth)
    {
        $allowedValues = $this->getDigitalSignatureAuthAllowableValues();
        if (!is_null($digital_signature_auth) && !in_array($digital_signature_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'digital_signature_auth', must be one of '%s'",
                    $digital_signature_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['digital_signature_auth'] = $digital_signature_auth;

        return $this;
    }

    /**
     * Gets signature_hash_alg
     *
     * @return string|null
     */
    public function getSignatureHashAlg()
    {
        return $this->container['signature_hash_alg'];
    }

    /**
     * Sets signature_hash_alg
     *
     * @param string|null $signature_hash_alg Digital Signature Authentication hash algorithms.    sha1:SHA1.    sha2-256:SHA2-256.    sha2-384:SHA2-384.    sha2-512:SHA2-512.
     *
     * @return self
     */
    public function setSignatureHashAlg($signature_hash_alg)
    {
        $allowedValues = $this->getSignatureHashAlgAllowableValues();
        if (!is_null($signature_hash_alg) && !in_array($signature_hash_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'signature_hash_alg', must be one of '%s'",
                    $signature_hash_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_hash_alg'] = $signature_hash_alg;

        return $this;
    }

    /**
     * Gets rsa_signature_format
     *
     * @return string|null
     */
    public function getRsaSignatureFormat()
    {
        return $this->container['rsa_signature_format'];
    }

    /**
     * Sets rsa_signature_format
     *
     * @param string|null $rsa_signature_format Digital Signature Authentication RSA signature format.    pkcs1:RSASSA PKCS#1 v1.5.    pss:RSASSA Probabilistic Signature Scheme (PSS).
     *
     * @return self
     */
    public function setRsaSignatureFormat($rsa_signature_format)
    {
        $allowedValues = $this->getRsaSignatureFormatAllowableValues();
        if (!is_null($rsa_signature_format) && !in_array($rsa_signature_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rsa_signature_format', must be one of '%s'",
                    $rsa_signature_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rsa_signature_format'] = $rsa_signature_format;

        return $this;
    }

    /**
     * Gets enforce_unique_id
     *
     * @return string|null
     */
    public function getEnforceUniqueId()
    {
        return $this->container['enforce_unique_id'];
    }

    /**
     * Sets enforce_unique_id
     *
     * @param string|null $enforce_unique_id Enable/disable peer ID uniqueness check.    disable:Disable peer ID uniqueness enforcement.    keep-new:Enforce peer ID uniqueness, keep new connection if collision found.    keep-old:Enforce peer ID uniqueness, keep old connection if collision found.
     *
     * @return self
     */
    public function setEnforceUniqueId($enforce_unique_id)
    {
        $allowedValues = $this->getEnforceUniqueIdAllowableValues();
        if (!is_null($enforce_unique_id) && !in_array($enforce_unique_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enforce_unique_id', must be one of '%s'",
                    $enforce_unique_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enforce_unique_id'] = $enforce_unique_id;

        return $this;
    }

    /**
     * Gets cert_id_validation
     *
     * @return string|null
     */
    public function getCertIdValidation()
    {
        return $this->container['cert_id_validation'];
    }

    /**
     * Sets cert_id_validation
     *
     * @param string|null $cert_id_validation Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945.    enable:Enable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945.    disable:Disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945.
     *
     * @return self
     */
    public function setCertIdValidation($cert_id_validation)
    {
        $allowedValues = $this->getCertIdValidationAllowableValues();
        if (!is_null($cert_id_validation) && !in_array($cert_id_validation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cert_id_validation', must be one of '%s'",
                    $cert_id_validation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cert_id_validation'] = $cert_id_validation;

        return $this;
    }

    /**
     * Gets fec_egress
     *
     * @return string|null
     */
    public function getFecEgress()
    {
        return $this->container['fec_egress'];
    }

    /**
     * Sets fec_egress
     *
     * @param string|null $fec_egress Enable/disable Forward Error Correction for egress IPsec traffic.    enable:Enable Forward Error Correction for egress IPsec traffic.    disable:Disable Forward Error Correction for egress IPsec traffic.
     *
     * @return self
     */
    public function setFecEgress($fec_egress)
    {
        $allowedValues = $this->getFecEgressAllowableValues();
        if (!is_null($fec_egress) && !in_array($fec_egress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fec_egress', must be one of '%s'",
                    $fec_egress,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fec_egress'] = $fec_egress;

        return $this;
    }

    /**
     * Gets fec_send_timeout
     *
     * @return int|null
     */
    public function getFecSendTimeout()
    {
        return $this->container['fec_send_timeout'];
    }

    /**
     * Sets fec_send_timeout
     *
     * @param int|null $fec_send_timeout Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
     *
     * @return self
     */
    public function setFecSendTimeout($fec_send_timeout)
    {

        if (!is_null($fec_send_timeout) && ($fec_send_timeout > 1000)) {
            throw new \InvalidArgumentException('invalid value for $fec_send_timeout when calling InlineObject478., must be smaller than or equal to 1000.');
        }
        if (!is_null($fec_send_timeout) && ($fec_send_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $fec_send_timeout when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['fec_send_timeout'] = $fec_send_timeout;

        return $this;
    }

    /**
     * Gets fec_base
     *
     * @return int|null
     */
    public function getFecBase()
    {
        return $this->container['fec_base'];
    }

    /**
     * Sets fec_base
     *
     * @param int|null $fec_base Number of base Forward Error Correction packets (1 - 100).
     *
     * @return self
     */
    public function setFecBase($fec_base)
    {

        if (!is_null($fec_base) && ($fec_base > 100)) {
            throw new \InvalidArgumentException('invalid value for $fec_base when calling InlineObject478., must be smaller than or equal to 100.');
        }
        if (!is_null($fec_base) && ($fec_base < 1)) {
            throw new \InvalidArgumentException('invalid value for $fec_base when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['fec_base'] = $fec_base;

        return $this;
    }

    /**
     * Gets fec_redundant
     *
     * @return int|null
     */
    public function getFecRedundant()
    {
        return $this->container['fec_redundant'];
    }

    /**
     * Sets fec_redundant
     *
     * @param int|null $fec_redundant Number of redundant Forward Error Correction packets (0 - 100).
     *
     * @return self
     */
    public function setFecRedundant($fec_redundant)
    {

        if (!is_null($fec_redundant) && ($fec_redundant > 100)) {
            throw new \InvalidArgumentException('invalid value for $fec_redundant when calling InlineObject478., must be smaller than or equal to 100.');
        }
        if (!is_null($fec_redundant) && ($fec_redundant < 0)) {
            throw new \InvalidArgumentException('invalid value for $fec_redundant when calling InlineObject478., must be bigger than or equal to 0.');
        }

        $this->container['fec_redundant'] = $fec_redundant;

        return $this;
    }

    /**
     * Gets fec_ingress
     *
     * @return string|null
     */
    public function getFecIngress()
    {
        return $this->container['fec_ingress'];
    }

    /**
     * Sets fec_ingress
     *
     * @param string|null $fec_ingress Enable/disable Forward Error Correction for ingress IPsec traffic.    enable:Enable Forward Error Correction for ingress IPsec traffic.    disable:Disable Forward Error Correction for ingress IPsec traffic.
     *
     * @return self
     */
    public function setFecIngress($fec_ingress)
    {
        $allowedValues = $this->getFecIngressAllowableValues();
        if (!is_null($fec_ingress) && !in_array($fec_ingress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fec_ingress', must be one of '%s'",
                    $fec_ingress,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fec_ingress'] = $fec_ingress;

        return $this;
    }

    /**
     * Gets fec_receive_timeout
     *
     * @return int|null
     */
    public function getFecReceiveTimeout()
    {
        return $this->container['fec_receive_timeout'];
    }

    /**
     * Sets fec_receive_timeout
     *
     * @param int|null $fec_receive_timeout Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
     *
     * @return self
     */
    public function setFecReceiveTimeout($fec_receive_timeout)
    {

        if (!is_null($fec_receive_timeout) && ($fec_receive_timeout > 10000)) {
            throw new \InvalidArgumentException('invalid value for $fec_receive_timeout when calling InlineObject478., must be smaller than or equal to 10000.');
        }
        if (!is_null($fec_receive_timeout) && ($fec_receive_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $fec_receive_timeout when calling InlineObject478., must be bigger than or equal to 1.');
        }

        $this->container['fec_receive_timeout'] = $fec_receive_timeout;

        return $this;
    }

    /**
     * Gets network_overlay
     *
     * @return string|null
     */
    public function getNetworkOverlay()
    {
        return $this->container['network_overlay'];
    }

    /**
     * Sets network_overlay
     *
     * @param string|null $network_overlay Enable/disable network overlays.    disable:Disable network overlays.    enable:Enable network overlays.
     *
     * @return self
     */
    public function setNetworkOverlay($network_overlay)
    {
        $allowedValues = $this->getNetworkOverlayAllowableValues();
        if (!is_null($network_overlay) && !in_array($network_overlay, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_overlay', must be one of '%s'",
                    $network_overlay,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_overlay'] = $network_overlay;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int|null $network_id VPN gateway network ID.
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {

        if (!is_null($network_id) && ($network_id > 255)) {
            throw new \InvalidArgumentException('invalid value for $network_id when calling InlineObject478., must be smaller than or equal to 255.');
        }
        if (!is_null($network_id) && ($network_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $network_id when calling InlineObject478., must be bigger than or equal to 0.');
        }

        $this->container['network_id'] = $network_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


