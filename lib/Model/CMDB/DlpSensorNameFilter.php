<?php
/**
 * DlpSensorNameFilter
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * DlpSensorNameFilter Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DlpSensorNameFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_dlp_sensor__name__filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'severity' => 'string',
        'type' => 'string',
        'proto' => 'string',
        'filter_by' => 'string',
        'file_size' => 'int',
        'company_identifier' => 'string',
        'sensitivity' => '\Fortigate\FortiOS\Model\CMDB\DlpSensorNameSensitivity[]',
        'match_percentage' => 'int',
        'file_type' => 'int',
        'regexp' => 'string',
        'archive' => 'string',
        'action' => 'string',
        'expiry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'severity' => null,
        'type' => null,
        'proto' => null,
        'filter_by' => null,
        'file_size' => null,
        'company_identifier' => null,
        'sensitivity' => null,
        'match_percentage' => null,
        'file_type' => null,
        'regexp' => null,
        'archive' => null,
        'action' => null,
        'expiry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'severity' => 'severity',
        'type' => 'type',
        'proto' => 'proto',
        'filter_by' => 'filter-by',
        'file_size' => 'file-size',
        'company_identifier' => 'company-identifier',
        'sensitivity' => 'sensitivity',
        'match_percentage' => 'match-percentage',
        'file_type' => 'file-type',
        'regexp' => 'regexp',
        'archive' => 'archive',
        'action' => 'action',
        'expiry' => 'expiry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'severity' => 'setSeverity',
        'type' => 'setType',
        'proto' => 'setProto',
        'filter_by' => 'setFilterBy',
        'file_size' => 'setFileSize',
        'company_identifier' => 'setCompanyIdentifier',
        'sensitivity' => 'setSensitivity',
        'match_percentage' => 'setMatchPercentage',
        'file_type' => 'setFileType',
        'regexp' => 'setRegexp',
        'archive' => 'setArchive',
        'action' => 'setAction',
        'expiry' => 'setExpiry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'severity' => 'getSeverity',
        'type' => 'getType',
        'proto' => 'getProto',
        'filter_by' => 'getFilterBy',
        'file_size' => 'getFileSize',
        'company_identifier' => 'getCompanyIdentifier',
        'sensitivity' => 'getSensitivity',
        'match_percentage' => 'getMatchPercentage',
        'file_type' => 'getFileType',
        'regexp' => 'getRegexp',
        'archive' => 'getArchive',
        'action' => 'getAction',
        'expiry' => 'getExpiry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SEVERITY_INFO = 'info';
    const SEVERITY_LOW = 'low';
    const SEVERITY_MEDIUM = 'medium';
    const SEVERITY_HIGH = 'high';
    const SEVERITY_CRITICAL = 'critical';
    const TYPE_FILE = 'file';
    const TYPE_MESSAGE = 'message';
    const PROTO_SMTP = 'smtp';
    const PROTO_POP3 = 'pop3';
    const PROTO_IMAP = 'imap';
    const PROTO_HTTP_GET = 'http-get';
    const PROTO_HTTP_POST = 'http-post';
    const PROTO_FTP = 'ftp';
    const PROTO_NNTP = 'nntp';
    const PROTO_MAPI = 'mapi';
    const PROTO_SSH = 'ssh';
    const PROTO_CIFS = 'cifs';
    const FILTER_BY_CREDIT_CARD = 'credit-card';
    const FILTER_BY_SSN = 'ssn';
    const FILTER_BY_REGEXP = 'regexp';
    const FILTER_BY_FILE_TYPE = 'file-type';
    const FILTER_BY_FILE_SIZE = 'file-size';
    const FILTER_BY_FINGERPRINT = 'fingerprint';
    const FILTER_BY_WATERMARK = 'watermark';
    const FILTER_BY_ENCRYPTED = 'encrypted';
    const ARCHIVE_DISABLE = 'disable';
    const ARCHIVE_ENABLE = 'enable';
    const ACTION_ALLOW = 'allow';
    const ACTION_LOG_ONLY = 'log-only';
    const ACTION_BLOCK = 'block';
    const ACTION_QUARANTINE_IP = 'quarantine-ip';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_INFO,
            self::SEVERITY_LOW,
            self::SEVERITY_MEDIUM,
            self::SEVERITY_HIGH,
            self::SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILE,
            self::TYPE_MESSAGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtoAllowableValues()
    {
        return [
            self::PROTO_SMTP,
            self::PROTO_POP3,
            self::PROTO_IMAP,
            self::PROTO_HTTP_GET,
            self::PROTO_HTTP_POST,
            self::PROTO_FTP,
            self::PROTO_NNTP,
            self::PROTO_MAPI,
            self::PROTO_SSH,
            self::PROTO_CIFS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterByAllowableValues()
    {
        return [
            self::FILTER_BY_CREDIT_CARD,
            self::FILTER_BY_SSN,
            self::FILTER_BY_REGEXP,
            self::FILTER_BY_FILE_TYPE,
            self::FILTER_BY_FILE_SIZE,
            self::FILTER_BY_FINGERPRINT,
            self::FILTER_BY_WATERMARK,
            self::FILTER_BY_ENCRYPTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArchiveAllowableValues()
    {
        return [
            self::ARCHIVE_DISABLE,
            self::ARCHIVE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_ALLOW,
            self::ACTION_LOG_ONLY,
            self::ACTION_BLOCK,
            self::ACTION_QUARANTINE_IP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['proto'] = $data['proto'] ?? null;
        $this->container['filter_by'] = $data['filter_by'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['company_identifier'] = $data['company_identifier'] ?? null;
        $this->container['sensitivity'] = $data['sensitivity'] ?? null;
        $this->container['match_percentage'] = $data['match_percentage'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
        $this->container['regexp'] = $data['regexp'] ?? null;
        $this->container['archive'] = $data['archive'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['expiry'] = $data['expiry'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'severity', must be one of '%s'",
                $this->container['severity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtoAllowableValues();
        if (!is_null($this->container['proto']) && !in_array($this->container['proto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proto', must be one of '%s'",
                $this->container['proto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilterByAllowableValues();
        if (!is_null($this->container['filter_by']) && !in_array($this->container['filter_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filter_by', must be one of '%s'",
                $this->container['filter_by'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['file_size']) && ($this->container['file_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'file_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['file_size']) && ($this->container['file_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'file_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_identifier']) && (mb_strlen($this->container['company_identifier']) > 35)) {
            $invalidProperties[] = "invalid value for 'company_identifier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sensitivity']) && (count($this->container['sensitivity']) > 0)) {
            $invalidProperties[] = "invalid value for 'sensitivity', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['match_percentage']) && ($this->container['match_percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'match_percentage', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['match_percentage']) && ($this->container['match_percentage'] < 1)) {
            $invalidProperties[] = "invalid value for 'match_percentage', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['file_type']) && ($this->container['file_type'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'file_type', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['file_type']) && ($this->container['file_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'file_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['regexp']) && (mb_strlen($this->container['regexp']) > 255)) {
            $invalidProperties[] = "invalid value for 'regexp', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getArchiveAllowableValues();
        if (!is_null($this->container['archive']) && !in_array($this->container['archive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'archive', must be one of '%s'",
                $this->container['archive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DlpSensorNameFilter., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DlpSensorNameFilter., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Filter name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling DlpSensorNameFilter., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Select the severity or threat level that matches this filter.    info:Informational.    low:Low.    medium:Medium.    high:High.    critical:Critical.
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'severity', must be one of '%s'",
                    $severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).     file:Check the contents of downloaded or attached files.    message:Check the contents of email messages, web pages, etc.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets proto
     *
     * @return string|null
     */
    public function getProto()
    {
        return $this->container['proto'];
    }

    /**
     * Sets proto
     *
     * @param string|null $proto Check messages or files over one or more of these protocols.    smtp:SMTP.    pop3:POP3.    imap:IMAP.    http-get:HTTP GET.    http-post:HTTP POST.    ftp:FTP.    nntp:NNTP.    mapi:MAPI.    ssh:SFTP and SCP.    cifs:CIFS.
     *
     * @return self
     */
    public function setProto($proto)
    {
        $allowedValues = $this->getProtoAllowableValues();
        if (!is_null($proto) && !in_array($proto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proto', must be one of '%s'",
                    $proto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proto'] = $proto;

        return $this;
    }

    /**
     * Gets filter_by
     *
     * @return string|null
     */
    public function getFilterBy()
    {
        return $this->container['filter_by'];
    }

    /**
     * Sets filter_by
     *
     * @param string|null $filter_by Select the type of content to match.    credit-card:Match credit cards.    ssn:Match social security numbers.    regexp:Use a regular expression to match content.    file-type:Match a DLP file pattern list.    file-size:Match any file over with a size over the threshold.    fingerprint:Match against a fingerprint sensitivity.    watermark:Look for defined file watermarks.    encrypted:Look for encrypted files.
     *
     * @return self
     */
    public function setFilterBy($filter_by)
    {
        $allowedValues = $this->getFilterByAllowableValues();
        if (!is_null($filter_by) && !in_array($filter_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filter_by', must be one of '%s'",
                    $filter_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_by'] = $filter_by;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int|null $file_size Match files this size or larger (0 - 4294967295 kbytes).
     *
     * @return self
     */
    public function setFileSize($file_size)
    {

        if (!is_null($file_size) && ($file_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $file_size when calling DlpSensorNameFilter., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($file_size) && ($file_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $file_size when calling DlpSensorNameFilter., must be bigger than or equal to 0.');
        }

        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets company_identifier
     *
     * @return string|null
     */
    public function getCompanyIdentifier()
    {
        return $this->container['company_identifier'];
    }

    /**
     * Sets company_identifier
     *
     * @param string|null $company_identifier Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
     *
     * @return self
     */
    public function setCompanyIdentifier($company_identifier)
    {
        if (!is_null($company_identifier) && (mb_strlen($company_identifier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $company_identifier when calling DlpSensorNameFilter., must be smaller than or equal to 35.');
        }

        $this->container['company_identifier'] = $company_identifier;

        return $this;
    }

    /**
     * Gets sensitivity
     *
     * @return \Fortigate\FortiOS\Model\CMDB\DlpSensorNameSensitivity[]|null
     */
    public function getSensitivity()
    {
        return $this->container['sensitivity'];
    }

    /**
     * Sets sensitivity
     *
     * @param \Fortigate\FortiOS\Model\CMDB\DlpSensorNameSensitivity[]|null $sensitivity Select a DLP file pattern sensitivity to match.
     *
     * @return self
     */
    public function setSensitivity($sensitivity)
    {

        if (!is_null($sensitivity) && (count($sensitivity) > 0)) {
            throw new \InvalidArgumentException('invalid value for $sensitivity when calling DlpSensorNameFilter., number of items must be less than or equal to 0.');
        }
        $this->container['sensitivity'] = $sensitivity;

        return $this;
    }

    /**
     * Gets match_percentage
     *
     * @return int|null
     */
    public function getMatchPercentage()
    {
        return $this->container['match_percentage'];
    }

    /**
     * Sets match_percentage
     *
     * @param int|null $match_percentage Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
     *
     * @return self
     */
    public function setMatchPercentage($match_percentage)
    {

        if (!is_null($match_percentage) && ($match_percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $match_percentage when calling DlpSensorNameFilter., must be smaller than or equal to 100.');
        }
        if (!is_null($match_percentage) && ($match_percentage < 1)) {
            throw new \InvalidArgumentException('invalid value for $match_percentage when calling DlpSensorNameFilter., must be bigger than or equal to 1.');
        }

        $this->container['match_percentage'] = $match_percentage;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return int|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param int|null $file_type Select the number of a DLP file pattern table to match.
     *
     * @return self
     */
    public function setFileType($file_type)
    {

        if (!is_null($file_type) && ($file_type > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $file_type when calling DlpSensorNameFilter., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($file_type) && ($file_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $file_type when calling DlpSensorNameFilter., must be bigger than or equal to 0.');
        }

        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets regexp
     *
     * @return string|null
     */
    public function getRegexp()
    {
        return $this->container['regexp'];
    }

    /**
     * Sets regexp
     *
     * @param string|null $regexp Enter a regular expression to match (max. 255 characters).
     *
     * @return self
     */
    public function setRegexp($regexp)
    {
        if (!is_null($regexp) && (mb_strlen($regexp) > 255)) {
            throw new \InvalidArgumentException('invalid length for $regexp when calling DlpSensorNameFilter., must be smaller than or equal to 255.');
        }

        $this->container['regexp'] = $regexp;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return string|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param string|null $archive Enable/disable DLP archiving.    disable:No DLP archiving.    enable:Enable full DLP archiving.
     *
     * @return self
     */
    public function setArchive($archive)
    {
        $allowedValues = $this->getArchiveAllowableValues();
        if (!is_null($archive) && !in_array($archive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'archive', must be one of '%s'",
                    $archive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action to take with content that this DLP sensor matches.    allow:Allow the content to pass through the FortiGate and do not create a log message.    log-only:Allow the content to pass through the FortiGate, but write a log message.    block:Block the content and write a log message.    quarantine-ip:Quarantine all traffic from the IP address and write a log message.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string|null
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string|null $expiry Quarantine duration in days, hours, minutes format (dddhhmm).
     *
     * @return self
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


