<?php
/**
 * InlineObject455
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject455 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject455 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_455';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'server' => 'string',
        'secondary_server' => 'string',
        'tertiary_server' => 'string',
        'port' => 'int',
        'key' => 'string',
        'secondary_key' => 'string',
        'tertiary_key' => 'string',
        'authen_type' => 'string',
        'authorization' => 'string',
        'source_ip' => 'string',
        'interface_select_method' => 'string',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'server' => null,
        'secondary_server' => null,
        'tertiary_server' => null,
        'port' => null,
        'key' => 'password',
        'secondary_key' => 'password',
        'tertiary_key' => 'password',
        'authen_type' => null,
        'authorization' => null,
        'source_ip' => null,
        'interface_select_method' => null,
        'interface' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'server' => 'server',
        'secondary_server' => 'secondary-server',
        'tertiary_server' => 'tertiary-server',
        'port' => 'port',
        'key' => 'key',
        'secondary_key' => 'secondary-key',
        'tertiary_key' => 'tertiary-key',
        'authen_type' => 'authen-type',
        'authorization' => 'authorization',
        'source_ip' => 'source-ip',
        'interface_select_method' => 'interface-select-method',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'server' => 'setServer',
        'secondary_server' => 'setSecondaryServer',
        'tertiary_server' => 'setTertiaryServer',
        'port' => 'setPort',
        'key' => 'setKey',
        'secondary_key' => 'setSecondaryKey',
        'tertiary_key' => 'setTertiaryKey',
        'authen_type' => 'setAuthenType',
        'authorization' => 'setAuthorization',
        'source_ip' => 'setSourceIp',
        'interface_select_method' => 'setInterfaceSelectMethod',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'server' => 'getServer',
        'secondary_server' => 'getSecondaryServer',
        'tertiary_server' => 'getTertiaryServer',
        'port' => 'getPort',
        'key' => 'getKey',
        'secondary_key' => 'getSecondaryKey',
        'tertiary_key' => 'getTertiaryKey',
        'authen_type' => 'getAuthenType',
        'authorization' => 'getAuthorization',
        'source_ip' => 'getSourceIp',
        'interface_select_method' => 'getInterfaceSelectMethod',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHEN_TYPE_MSCHAP = 'mschap';
    const AUTHEN_TYPE_CHAP = 'chap';
    const AUTHEN_TYPE_PAP = 'pap';
    const AUTHEN_TYPE_ASCII = 'ascii';
    const AUTHEN_TYPE_AUTO = 'auto';
    const AUTHORIZATION_ENABLE = 'enable';
    const AUTHORIZATION_DISABLE = 'disable';
    const INTERFACE_SELECT_METHOD_AUTO = 'auto';
    const INTERFACE_SELECT_METHOD_SDWAN = 'sdwan';
    const INTERFACE_SELECT_METHOD_SPECIFY = 'specify';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenTypeAllowableValues()
    {
        return [
            self::AUTHEN_TYPE_MSCHAP,
            self::AUTHEN_TYPE_CHAP,
            self::AUTHEN_TYPE_PAP,
            self::AUTHEN_TYPE_ASCII,
            self::AUTHEN_TYPE_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationAllowableValues()
    {
        return [
            self::AUTHORIZATION_ENABLE,
            self::AUTHORIZATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceSelectMethodAllowableValues()
    {
        return [
            self::INTERFACE_SELECT_METHOD_AUTO,
            self::INTERFACE_SELECT_METHOD_SDWAN,
            self::INTERFACE_SELECT_METHOD_SPECIFY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['secondary_server'] = $data['secondary_server'] ?? null;
        $this->container['tertiary_server'] = $data['tertiary_server'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['key'] = $data['key'] ?? null;
        $this->container['secondary_key'] = $data['secondary_key'] ?? null;
        $this->container['tertiary_key'] = $data['tertiary_key'] ?? null;
        $this->container['authen_type'] = $data['authen_type'] ?? null;
        $this->container['authorization'] = $data['authorization'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['interface_select_method'] = $data['interface_select_method'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 63)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['secondary_server']) && (mb_strlen($this->container['secondary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'secondary_server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['tertiary_server']) && (mb_strlen($this->container['tertiary_server']) > 63)) {
            $invalidProperties[] = "invalid value for 'tertiary_server', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 1)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthenTypeAllowableValues();
        if (!is_null($this->container['authen_type']) && !in_array($this->container['authen_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authen_type', must be one of '%s'",
                $this->container['authen_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthorizationAllowableValues();
        if (!is_null($this->container['authorization']) && !in_array($this->container['authorization'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization', must be one of '%s'",
                $this->container['authorization'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['source_ip']) && (mb_strlen($this->container['source_ip']) > 63)) {
            $invalidProperties[] = "invalid value for 'source_ip', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($this->container['interface_select_method']) && !in_array($this->container['interface_select_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface_select_method', must be one of '%s'",
                $this->container['interface_select_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name TACACS+ server entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject455., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server Primary TACACS+ server CN domain name or IP address.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject455., must be smaller than or equal to 63.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets secondary_server
     *
     * @return string|null
     */
    public function getSecondaryServer()
    {
        return $this->container['secondary_server'];
    }

    /**
     * Sets secondary_server
     *
     * @param string|null $secondary_server Secondary TACACS+ server CN domain name or IP address.
     *
     * @return self
     */
    public function setSecondaryServer($secondary_server)
    {
        if (!is_null($secondary_server) && (mb_strlen($secondary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $secondary_server when calling InlineObject455., must be smaller than or equal to 63.');
        }

        $this->container['secondary_server'] = $secondary_server;

        return $this;
    }

    /**
     * Gets tertiary_server
     *
     * @return string|null
     */
    public function getTertiaryServer()
    {
        return $this->container['tertiary_server'];
    }

    /**
     * Sets tertiary_server
     *
     * @param string|null $tertiary_server Tertiary TACACS+ server CN domain name or IP address.
     *
     * @return self
     */
    public function setTertiaryServer($tertiary_server)
    {
        if (!is_null($tertiary_server) && (mb_strlen($tertiary_server) > 63)) {
            throw new \InvalidArgumentException('invalid length for $tertiary_server when calling InlineObject455., must be smaller than or equal to 63.');
        }

        $this->container['tertiary_server'] = $tertiary_server;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port Port number of the TACACS+ server.
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject455., must be smaller than or equal to 65535.');
        }
        if (!is_null($port) && ($port < 1)) {
            throw new \InvalidArgumentException('invalid value for $port when calling InlineObject455., must be bigger than or equal to 1.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key Key to access the primary server.
     *
     * @return self
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets secondary_key
     *
     * @return string|null
     */
    public function getSecondaryKey()
    {
        return $this->container['secondary_key'];
    }

    /**
     * Sets secondary_key
     *
     * @param string|null $secondary_key Key to access the secondary server.
     *
     * @return self
     */
    public function setSecondaryKey($secondary_key)
    {
        $this->container['secondary_key'] = $secondary_key;

        return $this;
    }

    /**
     * Gets tertiary_key
     *
     * @return string|null
     */
    public function getTertiaryKey()
    {
        return $this->container['tertiary_key'];
    }

    /**
     * Sets tertiary_key
     *
     * @param string|null $tertiary_key Key to access the tertiary server.
     *
     * @return self
     */
    public function setTertiaryKey($tertiary_key)
    {
        $this->container['tertiary_key'] = $tertiary_key;

        return $this;
    }

    /**
     * Gets authen_type
     *
     * @return string|null
     */
    public function getAuthenType()
    {
        return $this->container['authen_type'];
    }

    /**
     * Sets authen_type
     *
     * @param string|null $authen_type Allowed authentication protocols/methods.    mschap:MSCHAP.    chap:CHAP.    pap:PAP.    ascii:ASCII.    auto:Use PAP, MSCHAP, and CHAP (in that order).
     *
     * @return self
     */
    public function setAuthenType($authen_type)
    {
        $allowedValues = $this->getAuthenTypeAllowableValues();
        if (!is_null($authen_type) && !in_array($authen_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authen_type', must be one of '%s'",
                    $authen_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authen_type'] = $authen_type;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return string|null
     */
    public function getAuthorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param string|null $authorization Enable/disable TACACS+ authorization.    enable:Enable TACACS+ authorization.    disable:Disable TACACS+ authorization.
     *
     * @return self
     */
    public function setAuthorization($authorization)
    {
        $allowedValues = $this->getAuthorizationAllowableValues();
        if (!is_null($authorization) && !in_array($authorization, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization', must be one of '%s'",
                    $authorization,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip source IP for communications to TACACS+ server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        if (!is_null($source_ip) && (mb_strlen($source_ip) > 63)) {
            throw new \InvalidArgumentException('invalid length for $source_ip when calling InlineObject455., must be smaller than or equal to 63.');
        }

        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets interface_select_method
     *
     * @return string|null
     */
    public function getInterfaceSelectMethod()
    {
        return $this->container['interface_select_method'];
    }

    /**
     * Sets interface_select_method
     *
     * @param string|null $interface_select_method Specify how to select outgoing interface to reach server.    auto:Set outgoing interface automatically.    sdwan:Set outgoing interface by SD-WAN or policy routing rules.    specify:Set outgoing interface manually.
     *
     * @return self
     */
    public function setInterfaceSelectMethod($interface_select_method)
    {
        $allowedValues = $this->getInterfaceSelectMethodAllowableValues();
        if (!is_null($interface_select_method) && !in_array($interface_select_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface_select_method', must be one of '%s'",
                    $interface_select_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface_select_method'] = $interface_select_method;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Specify outgoing interface to reach server.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject455., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


