<?php
/**
 * InlineObject142
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject142 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject142 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_142';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pdf_report' => 'string',
        'fortiview' => 'string',
        'report_source' => 'string',
        'web_browsing_threshold' => 'int',
        'top_n' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pdf_report' => null,
        'fortiview' => null,
        'report_source' => null,
        'web_browsing_threshold' => null,
        'top_n' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pdf_report' => 'pdf-report',
        'fortiview' => 'fortiview',
        'report_source' => 'report-source',
        'web_browsing_threshold' => 'web-browsing-threshold',
        'top_n' => 'top-n'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pdf_report' => 'setPdfReport',
        'fortiview' => 'setFortiview',
        'report_source' => 'setReportSource',
        'web_browsing_threshold' => 'setWebBrowsingThreshold',
        'top_n' => 'setTopN'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pdf_report' => 'getPdfReport',
        'fortiview' => 'getFortiview',
        'report_source' => 'getReportSource',
        'web_browsing_threshold' => 'getWebBrowsingThreshold',
        'top_n' => 'getTopN'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PDF_REPORT_ENABLE = 'enable';
    const PDF_REPORT_DISABLE = 'disable';
    const FORTIVIEW_ENABLE = 'enable';
    const FORTIVIEW_DISABLE = 'disable';
    const REPORT_SOURCE_FORWARD_TRAFFIC = 'forward-traffic';
    const REPORT_SOURCE_SNIFFER_TRAFFIC = 'sniffer-traffic';
    const REPORT_SOURCE_LOCAL_DENY_TRAFFIC = 'local-deny-traffic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPdfReportAllowableValues()
    {
        return [
            self::PDF_REPORT_ENABLE,
            self::PDF_REPORT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiviewAllowableValues()
    {
        return [
            self::FORTIVIEW_ENABLE,
            self::FORTIVIEW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportSourceAllowableValues()
    {
        return [
            self::REPORT_SOURCE_FORWARD_TRAFFIC,
            self::REPORT_SOURCE_SNIFFER_TRAFFIC,
            self::REPORT_SOURCE_LOCAL_DENY_TRAFFIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pdf_report'] = $data['pdf_report'] ?? null;
        $this->container['fortiview'] = $data['fortiview'] ?? null;
        $this->container['report_source'] = $data['report_source'] ?? null;
        $this->container['web_browsing_threshold'] = $data['web_browsing_threshold'] ?? null;
        $this->container['top_n'] = $data['top_n'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPdfReportAllowableValues();
        if (!is_null($this->container['pdf_report']) && !in_array($this->container['pdf_report'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pdf_report', must be one of '%s'",
                $this->container['pdf_report'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiviewAllowableValues();
        if (!is_null($this->container['fortiview']) && !in_array($this->container['fortiview'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiview', must be one of '%s'",
                $this->container['fortiview'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReportSourceAllowableValues();
        if (!is_null($this->container['report_source']) && !in_array($this->container['report_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'report_source', must be one of '%s'",
                $this->container['report_source'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['web_browsing_threshold']) && ($this->container['web_browsing_threshold'] > 15)) {
            $invalidProperties[] = "invalid value for 'web_browsing_threshold', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['web_browsing_threshold']) && ($this->container['web_browsing_threshold'] < 3)) {
            $invalidProperties[] = "invalid value for 'web_browsing_threshold', must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['top_n']) && ($this->container['top_n'] > 20000)) {
            $invalidProperties[] = "invalid value for 'top_n', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['top_n']) && ($this->container['top_n'] < 1000)) {
            $invalidProperties[] = "invalid value for 'top_n', must be bigger than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pdf_report
     *
     * @return string|null
     */
    public function getPdfReport()
    {
        return $this->container['pdf_report'];
    }

    /**
     * Sets pdf_report
     *
     * @param string|null $pdf_report Enable/disable PDF report.    enable:Enable PDF report.    disable:Disable PDF report.
     *
     * @return self
     */
    public function setPdfReport($pdf_report)
    {
        $allowedValues = $this->getPdfReportAllowableValues();
        if (!is_null($pdf_report) && !in_array($pdf_report, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pdf_report', must be one of '%s'",
                    $pdf_report,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pdf_report'] = $pdf_report;

        return $this;
    }

    /**
     * Gets fortiview
     *
     * @return string|null
     */
    public function getFortiview()
    {
        return $this->container['fortiview'];
    }

    /**
     * Sets fortiview
     *
     * @param string|null $fortiview Enable/disable historical FortiView.    enable:Enable historical FortiView.    disable:Disable historical FortiView.
     *
     * @return self
     */
    public function setFortiview($fortiview)
    {
        $allowedValues = $this->getFortiviewAllowableValues();
        if (!is_null($fortiview) && !in_array($fortiview, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiview', must be one of '%s'",
                    $fortiview,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiview'] = $fortiview;

        return $this;
    }

    /**
     * Gets report_source
     *
     * @return string|null
     */
    public function getReportSource()
    {
        return $this->container['report_source'];
    }

    /**
     * Sets report_source
     *
     * @param string|null $report_source Report log source.    forward-traffic:Report includes forward traffic logs.    sniffer-traffic:Report includes sniffer traffic logs.    local-deny-traffic:Report includes local deny traffic logs.
     *
     * @return self
     */
    public function setReportSource($report_source)
    {
        $allowedValues = $this->getReportSourceAllowableValues();
        if (!is_null($report_source) && !in_array($report_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'report_source', must be one of '%s'",
                    $report_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_source'] = $report_source;

        return $this;
    }

    /**
     * Gets web_browsing_threshold
     *
     * @return int|null
     */
    public function getWebBrowsingThreshold()
    {
        return $this->container['web_browsing_threshold'];
    }

    /**
     * Sets web_browsing_threshold
     *
     * @param int|null $web_browsing_threshold Web browsing time calculation threshold (3 - 15 min).
     *
     * @return self
     */
    public function setWebBrowsingThreshold($web_browsing_threshold)
    {

        if (!is_null($web_browsing_threshold) && ($web_browsing_threshold > 15)) {
            throw new \InvalidArgumentException('invalid value for $web_browsing_threshold when calling InlineObject142., must be smaller than or equal to 15.');
        }
        if (!is_null($web_browsing_threshold) && ($web_browsing_threshold < 3)) {
            throw new \InvalidArgumentException('invalid value for $web_browsing_threshold when calling InlineObject142., must be bigger than or equal to 3.');
        }

        $this->container['web_browsing_threshold'] = $web_browsing_threshold;

        return $this;
    }

    /**
     * Gets top_n
     *
     * @return int|null
     */
    public function getTopN()
    {
        return $this->container['top_n'];
    }

    /**
     * Sets top_n
     *
     * @param int|null $top_n Number of items to populate (1000 - 20000).
     *
     * @return self
     */
    public function setTopN($top_n)
    {

        if (!is_null($top_n) && ($top_n > 20000)) {
            throw new \InvalidArgumentException('invalid value for $top_n when calling InlineObject142., must be smaller than or equal to 20000.');
        }
        if (!is_null($top_n) && ($top_n < 1000)) {
            throw new \InvalidArgumentException('invalid value for $top_n when calling InlineObject142., must be bigger than or equal to 1000.');
        }

        $this->container['top_n'] = $top_n;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


