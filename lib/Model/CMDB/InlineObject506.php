<?php
/**
 * InlineObject506
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject506 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject506 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_506';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'auth_method' => 'string',
        'psk' => 'string',
        'cert' => 'string',
        'peer_accept' => 'string',
        'peer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'auth_method' => null,
        'psk' => 'password',
        'cert' => null,
        'peer_accept' => null,
        'peer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'auth_method' => 'auth-method',
        'psk' => 'psk',
        'cert' => 'cert',
        'peer_accept' => 'peer-accept',
        'peer' => 'peer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'auth_method' => 'setAuthMethod',
        'psk' => 'setPsk',
        'cert' => 'setCert',
        'peer_accept' => 'setPeerAccept',
        'peer' => 'setPeer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'auth_method' => 'getAuthMethod',
        'psk' => 'getPsk',
        'cert' => 'getCert',
        'peer_accept' => 'getPeerAccept',
        'peer' => 'getPeer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTH_METHOD_CERT = 'cert';
    const AUTH_METHOD_PSK = 'psk';
    const PEER_ACCEPT_ANY = 'any';
    const PEER_ACCEPT_DEFINED = 'defined';
    const PEER_ACCEPT_ONE = 'one';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthMethodAllowableValues()
    {
        return [
            self::AUTH_METHOD_CERT,
            self::AUTH_METHOD_PSK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeerAcceptAllowableValues()
    {
        return [
            self::PEER_ACCEPT_ANY,
            self::PEER_ACCEPT_DEFINED,
            self::PEER_ACCEPT_ONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['auth_method'] = $data['auth_method'] ?? null;
        $this->container['psk'] = $data['psk'] ?? null;
        $this->container['cert'] = $data['cert'] ?? null;
        $this->container['peer_accept'] = $data['peer_accept'] ?? null;
        $this->container['peer'] = $data['peer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAuthMethodAllowableValues();
        if (!is_null($this->container['auth_method']) && !in_array($this->container['auth_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_method', must be one of '%s'",
                $this->container['auth_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cert']) && (mb_strlen($this->container['cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'cert', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getPeerAcceptAllowableValues();
        if (!is_null($this->container['peer_accept']) && !in_array($this->container['peer_accept'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'peer_accept', must be one of '%s'",
                $this->container['peer_accept'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['peer']) && (mb_strlen($this->container['peer']) > 35)) {
            $invalidProperties[] = "invalid value for 'peer', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Auth-group name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject506., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets auth_method
     *
     * @return string|null
     */
    public function getAuthMethod()
    {
        return $this->container['auth_method'];
    }

    /**
     * Sets auth_method
     *
     * @param string|null $auth_method Select certificate or pre-shared key authentication for this authentication group.    cert:Certificate authentication.    psk:Pre-shared secret key authentication.
     *
     * @return self
     */
    public function setAuthMethod($auth_method)
    {
        $allowedValues = $this->getAuthMethodAllowableValues();
        if (!is_null($auth_method) && !in_array($auth_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_method', must be one of '%s'",
                    $auth_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_method'] = $auth_method;

        return $this;
    }

    /**
     * Gets psk
     *
     * @return string|null
     */
    public function getPsk()
    {
        return $this->container['psk'];
    }

    /**
     * Sets psk
     *
     * @param string|null $psk Pre-shared key used by the peers in this authentication group.
     *
     * @return self
     */
    public function setPsk($psk)
    {
        $this->container['psk'] = $psk;

        return $this;
    }

    /**
     * Gets cert
     *
     * @return string|null
     */
    public function getCert()
    {
        return $this->container['cert'];
    }

    /**
     * Sets cert
     *
     * @param string|null $cert Name of certificate to identify this peer.
     *
     * @return self
     */
    public function setCert($cert)
    {
        if (!is_null($cert) && (mb_strlen($cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $cert when calling InlineObject506., must be smaller than or equal to 35.');
        }

        $this->container['cert'] = $cert;

        return $this;
    }

    /**
     * Gets peer_accept
     *
     * @return string|null
     */
    public function getPeerAccept()
    {
        return $this->container['peer_accept'];
    }

    /**
     * Sets peer_accept
     *
     * @param string|null $peer_accept Determine if this auth group accepts, any peer, a list of defined peers, or just one peer.    any:Accept any peer that can authenticate with this auth group.    defined:Accept only the peers added with the wanopt peer command.    one:Accept the peer added to this auth group using the peer option.
     *
     * @return self
     */
    public function setPeerAccept($peer_accept)
    {
        $allowedValues = $this->getPeerAcceptAllowableValues();
        if (!is_null($peer_accept) && !in_array($peer_accept, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'peer_accept', must be one of '%s'",
                    $peer_accept,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['peer_accept'] = $peer_accept;

        return $this;
    }

    /**
     * Gets peer
     *
     * @return string|null
     */
    public function getPeer()
    {
        return $this->container['peer'];
    }

    /**
     * Sets peer
     *
     * @param string|null $peer If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
     *
     * @return self
     */
    public function setPeer($peer)
    {
        if (!is_null($peer) && (mb_strlen($peer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $peer when calling InlineObject506., must be smaller than or equal to 35.');
        }

        $this->container['peer'] = $peer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


