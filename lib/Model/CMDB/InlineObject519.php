<?php
/**
 * InlineObject519
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject519 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject519 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_519';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'ftp_over_http' => 'string',
        'socks' => 'string',
        'http_incoming_port' => 'string',
        'https_incoming_port' => 'string',
        'ftp_incoming_port' => 'string',
        'socks_incoming_port' => 'string',
        'incoming_ip' => 'string',
        'outgoing_ip' => 'string',
        'ipv6_status' => 'string',
        'incoming_ip6' => 'string',
        'outgoing_ip6' => 'string',
        'strict_guest' => 'string',
        'pref_dns_result' => 'string',
        'unknown_http_version' => 'string',
        'realm' => 'string',
        'sec_default_action' => 'string',
        'https_replacement_message' => 'string',
        'message_upon_server_error' => 'string',
        'pac_file_server_status' => 'string',
        'pac_file_url' => 'string',
        'pac_file_server_port' => 'string',
        'pac_file_name' => 'string',
        'pac_file_data' => 'string',
        'pac_policy' => '\Fortigate\FortiOS\Model\CMDB\WebProxyExplicitPacPolicy[]',
        'ssl_algorithm' => 'string',
        'trace_auth_no_rsp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'ftp_over_http' => null,
        'socks' => null,
        'http_incoming_port' => null,
        'https_incoming_port' => null,
        'ftp_incoming_port' => null,
        'socks_incoming_port' => null,
        'incoming_ip' => 'ipv4',
        'outgoing_ip' => 'ipv4',
        'ipv6_status' => null,
        'incoming_ip6' => 'ipv6',
        'outgoing_ip6' => 'ipv6',
        'strict_guest' => null,
        'pref_dns_result' => null,
        'unknown_http_version' => null,
        'realm' => null,
        'sec_default_action' => null,
        'https_replacement_message' => null,
        'message_upon_server_error' => null,
        'pac_file_server_status' => null,
        'pac_file_url' => null,
        'pac_file_server_port' => null,
        'pac_file_name' => null,
        'pac_file_data' => null,
        'pac_policy' => null,
        'ssl_algorithm' => null,
        'trace_auth_no_rsp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'ftp_over_http' => 'ftp-over-http',
        'socks' => 'socks',
        'http_incoming_port' => 'http-incoming-port',
        'https_incoming_port' => 'https-incoming-port',
        'ftp_incoming_port' => 'ftp-incoming-port',
        'socks_incoming_port' => 'socks-incoming-port',
        'incoming_ip' => 'incoming-ip',
        'outgoing_ip' => 'outgoing-ip',
        'ipv6_status' => 'ipv6-status',
        'incoming_ip6' => 'incoming-ip6',
        'outgoing_ip6' => 'outgoing-ip6',
        'strict_guest' => 'strict-guest',
        'pref_dns_result' => 'pref-dns-result',
        'unknown_http_version' => 'unknown-http-version',
        'realm' => 'realm',
        'sec_default_action' => 'sec-default-action',
        'https_replacement_message' => 'https-replacement-message',
        'message_upon_server_error' => 'message-upon-server-error',
        'pac_file_server_status' => 'pac-file-server-status',
        'pac_file_url' => 'pac-file-url',
        'pac_file_server_port' => 'pac-file-server-port',
        'pac_file_name' => 'pac-file-name',
        'pac_file_data' => 'pac-file-data',
        'pac_policy' => 'pac-policy',
        'ssl_algorithm' => 'ssl-algorithm',
        'trace_auth_no_rsp' => 'trace-auth-no-rsp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'ftp_over_http' => 'setFtpOverHttp',
        'socks' => 'setSocks',
        'http_incoming_port' => 'setHttpIncomingPort',
        'https_incoming_port' => 'setHttpsIncomingPort',
        'ftp_incoming_port' => 'setFtpIncomingPort',
        'socks_incoming_port' => 'setSocksIncomingPort',
        'incoming_ip' => 'setIncomingIp',
        'outgoing_ip' => 'setOutgoingIp',
        'ipv6_status' => 'setIpv6Status',
        'incoming_ip6' => 'setIncomingIp6',
        'outgoing_ip6' => 'setOutgoingIp6',
        'strict_guest' => 'setStrictGuest',
        'pref_dns_result' => 'setPrefDnsResult',
        'unknown_http_version' => 'setUnknownHttpVersion',
        'realm' => 'setRealm',
        'sec_default_action' => 'setSecDefaultAction',
        'https_replacement_message' => 'setHttpsReplacementMessage',
        'message_upon_server_error' => 'setMessageUponServerError',
        'pac_file_server_status' => 'setPacFileServerStatus',
        'pac_file_url' => 'setPacFileUrl',
        'pac_file_server_port' => 'setPacFileServerPort',
        'pac_file_name' => 'setPacFileName',
        'pac_file_data' => 'setPacFileData',
        'pac_policy' => 'setPacPolicy',
        'ssl_algorithm' => 'setSslAlgorithm',
        'trace_auth_no_rsp' => 'setTraceAuthNoRsp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'ftp_over_http' => 'getFtpOverHttp',
        'socks' => 'getSocks',
        'http_incoming_port' => 'getHttpIncomingPort',
        'https_incoming_port' => 'getHttpsIncomingPort',
        'ftp_incoming_port' => 'getFtpIncomingPort',
        'socks_incoming_port' => 'getSocksIncomingPort',
        'incoming_ip' => 'getIncomingIp',
        'outgoing_ip' => 'getOutgoingIp',
        'ipv6_status' => 'getIpv6Status',
        'incoming_ip6' => 'getIncomingIp6',
        'outgoing_ip6' => 'getOutgoingIp6',
        'strict_guest' => 'getStrictGuest',
        'pref_dns_result' => 'getPrefDnsResult',
        'unknown_http_version' => 'getUnknownHttpVersion',
        'realm' => 'getRealm',
        'sec_default_action' => 'getSecDefaultAction',
        'https_replacement_message' => 'getHttpsReplacementMessage',
        'message_upon_server_error' => 'getMessageUponServerError',
        'pac_file_server_status' => 'getPacFileServerStatus',
        'pac_file_url' => 'getPacFileUrl',
        'pac_file_server_port' => 'getPacFileServerPort',
        'pac_file_name' => 'getPacFileName',
        'pac_file_data' => 'getPacFileData',
        'pac_policy' => 'getPacPolicy',
        'ssl_algorithm' => 'getSslAlgorithm',
        'trace_auth_no_rsp' => 'getTraceAuthNoRsp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const FTP_OVER_HTTP_ENABLE = 'enable';
    const FTP_OVER_HTTP_DISABLE = 'disable';
    const SOCKS_ENABLE = 'enable';
    const SOCKS_DISABLE = 'disable';
    const IPV6_STATUS_ENABLE = 'enable';
    const IPV6_STATUS_DISABLE = 'disable';
    const STRICT_GUEST_ENABLE = 'enable';
    const STRICT_GUEST_DISABLE = 'disable';
    const PREF_DNS_RESULT_IPV4 = 'ipv4';
    const PREF_DNS_RESULT_IPV6 = 'ipv6';
    const UNKNOWN_HTTP_VERSION_REJECT = 'reject';
    const UNKNOWN_HTTP_VERSION_TUNNEL = 'tunnel';
    const UNKNOWN_HTTP_VERSION_BEST_EFFORT = 'best-effort';
    const SEC_DEFAULT_ACTION_ACCEPT = 'accept';
    const SEC_DEFAULT_ACTION_DENY = 'deny';
    const HTTPS_REPLACEMENT_MESSAGE_ENABLE = 'enable';
    const HTTPS_REPLACEMENT_MESSAGE_DISABLE = 'disable';
    const MESSAGE_UPON_SERVER_ERROR_ENABLE = 'enable';
    const MESSAGE_UPON_SERVER_ERROR_DISABLE = 'disable';
    const PAC_FILE_SERVER_STATUS_ENABLE = 'enable';
    const PAC_FILE_SERVER_STATUS_DISABLE = 'disable';
    const SSL_ALGORITHM_HIGH = 'high';
    const SSL_ALGORITHM_MEDIUM = 'medium';
    const SSL_ALGORITHM_LOW = 'low';
    const TRACE_AUTH_NO_RSP_ENABLE = 'enable';
    const TRACE_AUTH_NO_RSP_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtpOverHttpAllowableValues()
    {
        return [
            self::FTP_OVER_HTTP_ENABLE,
            self::FTP_OVER_HTTP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSocksAllowableValues()
    {
        return [
            self::SOCKS_ENABLE,
            self::SOCKS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6StatusAllowableValues()
    {
        return [
            self::IPV6_STATUS_ENABLE,
            self::IPV6_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictGuestAllowableValues()
    {
        return [
            self::STRICT_GUEST_ENABLE,
            self::STRICT_GUEST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrefDnsResultAllowableValues()
    {
        return [
            self::PREF_DNS_RESULT_IPV4,
            self::PREF_DNS_RESULT_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnknownHttpVersionAllowableValues()
    {
        return [
            self::UNKNOWN_HTTP_VERSION_REJECT,
            self::UNKNOWN_HTTP_VERSION_TUNNEL,
            self::UNKNOWN_HTTP_VERSION_BEST_EFFORT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecDefaultActionAllowableValues()
    {
        return [
            self::SEC_DEFAULT_ACTION_ACCEPT,
            self::SEC_DEFAULT_ACTION_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpsReplacementMessageAllowableValues()
    {
        return [
            self::HTTPS_REPLACEMENT_MESSAGE_ENABLE,
            self::HTTPS_REPLACEMENT_MESSAGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageUponServerErrorAllowableValues()
    {
        return [
            self::MESSAGE_UPON_SERVER_ERROR_ENABLE,
            self::MESSAGE_UPON_SERVER_ERROR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPacFileServerStatusAllowableValues()
    {
        return [
            self::PAC_FILE_SERVER_STATUS_ENABLE,
            self::PAC_FILE_SERVER_STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAlgorithmAllowableValues()
    {
        return [
            self::SSL_ALGORITHM_HIGH,
            self::SSL_ALGORITHM_MEDIUM,
            self::SSL_ALGORITHM_LOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTraceAuthNoRspAllowableValues()
    {
        return [
            self::TRACE_AUTH_NO_RSP_ENABLE,
            self::TRACE_AUTH_NO_RSP_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['ftp_over_http'] = $data['ftp_over_http'] ?? null;
        $this->container['socks'] = $data['socks'] ?? null;
        $this->container['http_incoming_port'] = $data['http_incoming_port'] ?? null;
        $this->container['https_incoming_port'] = $data['https_incoming_port'] ?? null;
        $this->container['ftp_incoming_port'] = $data['ftp_incoming_port'] ?? null;
        $this->container['socks_incoming_port'] = $data['socks_incoming_port'] ?? null;
        $this->container['incoming_ip'] = $data['incoming_ip'] ?? null;
        $this->container['outgoing_ip'] = $data['outgoing_ip'] ?? null;
        $this->container['ipv6_status'] = $data['ipv6_status'] ?? null;
        $this->container['incoming_ip6'] = $data['incoming_ip6'] ?? null;
        $this->container['outgoing_ip6'] = $data['outgoing_ip6'] ?? null;
        $this->container['strict_guest'] = $data['strict_guest'] ?? null;
        $this->container['pref_dns_result'] = $data['pref_dns_result'] ?? null;
        $this->container['unknown_http_version'] = $data['unknown_http_version'] ?? null;
        $this->container['realm'] = $data['realm'] ?? null;
        $this->container['sec_default_action'] = $data['sec_default_action'] ?? null;
        $this->container['https_replacement_message'] = $data['https_replacement_message'] ?? null;
        $this->container['message_upon_server_error'] = $data['message_upon_server_error'] ?? null;
        $this->container['pac_file_server_status'] = $data['pac_file_server_status'] ?? null;
        $this->container['pac_file_url'] = $data['pac_file_url'] ?? null;
        $this->container['pac_file_server_port'] = $data['pac_file_server_port'] ?? null;
        $this->container['pac_file_name'] = $data['pac_file_name'] ?? null;
        $this->container['pac_file_data'] = $data['pac_file_data'] ?? null;
        $this->container['pac_policy'] = $data['pac_policy'] ?? null;
        $this->container['ssl_algorithm'] = $data['ssl_algorithm'] ?? null;
        $this->container['trace_auth_no_rsp'] = $data['trace_auth_no_rsp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFtpOverHttpAllowableValues();
        if (!is_null($this->container['ftp_over_http']) && !in_array($this->container['ftp_over_http'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ftp_over_http', must be one of '%s'",
                $this->container['ftp_over_http'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSocksAllowableValues();
        if (!is_null($this->container['socks']) && !in_array($this->container['socks'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'socks', must be one of '%s'",
                $this->container['socks'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6StatusAllowableValues();
        if (!is_null($this->container['ipv6_status']) && !in_array($this->container['ipv6_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_status', must be one of '%s'",
                $this->container['ipv6_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictGuestAllowableValues();
        if (!is_null($this->container['strict_guest']) && !in_array($this->container['strict_guest'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_guest', must be one of '%s'",
                $this->container['strict_guest'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrefDnsResultAllowableValues();
        if (!is_null($this->container['pref_dns_result']) && !in_array($this->container['pref_dns_result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pref_dns_result', must be one of '%s'",
                $this->container['pref_dns_result'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnknownHttpVersionAllowableValues();
        if (!is_null($this->container['unknown_http_version']) && !in_array($this->container['unknown_http_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unknown_http_version', must be one of '%s'",
                $this->container['unknown_http_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['realm']) && (mb_strlen($this->container['realm']) > 63)) {
            $invalidProperties[] = "invalid value for 'realm', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getSecDefaultActionAllowableValues();
        if (!is_null($this->container['sec_default_action']) && !in_array($this->container['sec_default_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sec_default_action', must be one of '%s'",
                $this->container['sec_default_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHttpsReplacementMessageAllowableValues();
        if (!is_null($this->container['https_replacement_message']) && !in_array($this->container['https_replacement_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'https_replacement_message', must be one of '%s'",
                $this->container['https_replacement_message'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageUponServerErrorAllowableValues();
        if (!is_null($this->container['message_upon_server_error']) && !in_array($this->container['message_upon_server_error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'message_upon_server_error', must be one of '%s'",
                $this->container['message_upon_server_error'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPacFileServerStatusAllowableValues();
        if (!is_null($this->container['pac_file_server_status']) && !in_array($this->container['pac_file_server_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pac_file_server_status', must be one of '%s'",
                $this->container['pac_file_server_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pac_file_name']) && (mb_strlen($this->container['pac_file_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'pac_file_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['pac_policy']) && (count($this->container['pac_policy']) > 0)) {
            $invalidProperties[] = "invalid value for 'pac_policy', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($this->container['ssl_algorithm']) && !in_array($this->container['ssl_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                $this->container['ssl_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTraceAuthNoRspAllowableValues();
        if (!is_null($this->container['trace_auth_no_rsp']) && !in_array($this->container['trace_auth_no_rsp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trace_auth_no_rsp', must be one of '%s'",
                $this->container['trace_auth_no_rsp'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable the explicit Web proxy for HTTP and HTTPS session.    enable:Enable the explicit web proxy.    disable:Disable the explicit web proxy.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ftp_over_http
     *
     * @return string|null
     */
    public function getFtpOverHttp()
    {
        return $this->container['ftp_over_http'];
    }

    /**
     * Sets ftp_over_http
     *
     * @param string|null $ftp_over_http Enable to proxy FTP-over-HTTP sessions sent from a web browser.    enable:Enable FTP-over-HTTP sessions.    disable:Disable FTP-over-HTTP sessions.
     *
     * @return self
     */
    public function setFtpOverHttp($ftp_over_http)
    {
        $allowedValues = $this->getFtpOverHttpAllowableValues();
        if (!is_null($ftp_over_http) && !in_array($ftp_over_http, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ftp_over_http', must be one of '%s'",
                    $ftp_over_http,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ftp_over_http'] = $ftp_over_http;

        return $this;
    }

    /**
     * Gets socks
     *
     * @return string|null
     */
    public function getSocks()
    {
        return $this->container['socks'];
    }

    /**
     * Sets socks
     *
     * @param string|null $socks Enable/disable the SOCKS proxy.    enable:Enable the SOCKS proxy.    disable:Disable the SOCKS proxy.
     *
     * @return self
     */
    public function setSocks($socks)
    {
        $allowedValues = $this->getSocksAllowableValues();
        if (!is_null($socks) && !in_array($socks, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'socks', must be one of '%s'",
                    $socks,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['socks'] = $socks;

        return $this;
    }

    /**
     * Gets http_incoming_port
     *
     * @return string|null
     */
    public function getHttpIncomingPort()
    {
        return $this->container['http_incoming_port'];
    }

    /**
     * Sets http_incoming_port
     *
     * @param string|null $http_incoming_port Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
     *
     * @return self
     */
    public function setHttpIncomingPort($http_incoming_port)
    {
        $this->container['http_incoming_port'] = $http_incoming_port;

        return $this;
    }

    /**
     * Gets https_incoming_port
     *
     * @return string|null
     */
    public function getHttpsIncomingPort()
    {
        return $this->container['https_incoming_port'];
    }

    /**
     * Sets https_incoming_port
     *
     * @param string|null $https_incoming_port Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
     *
     * @return self
     */
    public function setHttpsIncomingPort($https_incoming_port)
    {
        $this->container['https_incoming_port'] = $https_incoming_port;

        return $this;
    }

    /**
     * Gets ftp_incoming_port
     *
     * @return string|null
     */
    public function getFtpIncomingPort()
    {
        return $this->container['ftp_incoming_port'];
    }

    /**
     * Sets ftp_incoming_port
     *
     * @param string|null $ftp_incoming_port Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
     *
     * @return self
     */
    public function setFtpIncomingPort($ftp_incoming_port)
    {
        $this->container['ftp_incoming_port'] = $ftp_incoming_port;

        return $this;
    }

    /**
     * Gets socks_incoming_port
     *
     * @return string|null
     */
    public function getSocksIncomingPort()
    {
        return $this->container['socks_incoming_port'];
    }

    /**
     * Sets socks_incoming_port
     *
     * @param string|null $socks_incoming_port Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
     *
     * @return self
     */
    public function setSocksIncomingPort($socks_incoming_port)
    {
        $this->container['socks_incoming_port'] = $socks_incoming_port;

        return $this;
    }

    /**
     * Gets incoming_ip
     *
     * @return string|null
     */
    public function getIncomingIp()
    {
        return $this->container['incoming_ip'];
    }

    /**
     * Sets incoming_ip
     *
     * @param string|null $incoming_ip Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
     *
     * @return self
     */
    public function setIncomingIp($incoming_ip)
    {
        $this->container['incoming_ip'] = $incoming_ip;

        return $this;
    }

    /**
     * Gets outgoing_ip
     *
     * @return string|null
     */
    public function getOutgoingIp()
    {
        return $this->container['outgoing_ip'];
    }

    /**
     * Sets outgoing_ip
     *
     * @param string|null $outgoing_ip Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
     *
     * @return self
     */
    public function setOutgoingIp($outgoing_ip)
    {
        $this->container['outgoing_ip'] = $outgoing_ip;

        return $this;
    }

    /**
     * Gets ipv6_status
     *
     * @return string|null
     */
    public function getIpv6Status()
    {
        return $this->container['ipv6_status'];
    }

    /**
     * Sets ipv6_status
     *
     * @param string|null $ipv6_status Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command.    enable:Enable allowing an IPv6 web proxy destination.    disable:Disable allowing an IPv6 web proxy destination.
     *
     * @return self
     */
    public function setIpv6Status($ipv6_status)
    {
        $allowedValues = $this->getIpv6StatusAllowableValues();
        if (!is_null($ipv6_status) && !in_array($ipv6_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_status', must be one of '%s'",
                    $ipv6_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_status'] = $ipv6_status;

        return $this;
    }

    /**
     * Gets incoming_ip6
     *
     * @return string|null
     */
    public function getIncomingIp6()
    {
        return $this->container['incoming_ip6'];
    }

    /**
     * Sets incoming_ip6
     *
     * @param string|null $incoming_ip6 Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
     *
     * @return self
     */
    public function setIncomingIp6($incoming_ip6)
    {
        $this->container['incoming_ip6'] = $incoming_ip6;

        return $this;
    }

    /**
     * Gets outgoing_ip6
     *
     * @return string|null
     */
    public function getOutgoingIp6()
    {
        return $this->container['outgoing_ip6'];
    }

    /**
     * Sets outgoing_ip6
     *
     * @param string|null $outgoing_ip6 Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
     *
     * @return self
     */
    public function setOutgoingIp6($outgoing_ip6)
    {
        $this->container['outgoing_ip6'] = $outgoing_ip6;

        return $this;
    }

    /**
     * Gets strict_guest
     *
     * @return string|null
     */
    public function getStrictGuest()
    {
        return $this->container['strict_guest'];
    }

    /**
     * Sets strict_guest
     *
     * @param string|null $strict_guest Enable/disable strict guest user checking by the explicit web proxy.    enable:Enable strict guest user checking.    disable:Disable strict guest user checking.
     *
     * @return self
     */
    public function setStrictGuest($strict_guest)
    {
        $allowedValues = $this->getStrictGuestAllowableValues();
        if (!is_null($strict_guest) && !in_array($strict_guest, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_guest', must be one of '%s'",
                    $strict_guest,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_guest'] = $strict_guest;

        return $this;
    }

    /**
     * Gets pref_dns_result
     *
     * @return string|null
     */
    public function getPrefDnsResult()
    {
        return $this->container['pref_dns_result'];
    }

    /**
     * Sets pref_dns_result
     *
     * @param string|null $pref_dns_result Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4).    ipv4:Prefer the IPv4 DNS server.    ipv6:Prefer the IPv6 DNS server.
     *
     * @return self
     */
    public function setPrefDnsResult($pref_dns_result)
    {
        $allowedValues = $this->getPrefDnsResultAllowableValues();
        if (!is_null($pref_dns_result) && !in_array($pref_dns_result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pref_dns_result', must be one of '%s'",
                    $pref_dns_result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pref_dns_result'] = $pref_dns_result;

        return $this;
    }

    /**
     * Gets unknown_http_version
     *
     * @return string|null
     */
    public function getUnknownHttpVersion()
    {
        return $this->container['unknown_http_version'];
    }

    /**
     * Sets unknown_http_version
     *
     * @param string|null $unknown_http_version How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1.    reject:Reject or tear down HTTP sessions that do not use HTTP 0.9, 1.0, or 1.1.    tunnel:Pass HTTP traffic that does not use HTTP 0.9, 1.0, or 1.1 without applying HTTP protocol optimization, byte-caching, or web caching. TCP protocol optimization is applied.    best-effort:Assume all HTTP sessions comply with HTTP 0.9, 1.0, or 1.1. If a session uses a different HTTP version, it may not parse correctly and the connection may be lost.
     *
     * @return self
     */
    public function setUnknownHttpVersion($unknown_http_version)
    {
        $allowedValues = $this->getUnknownHttpVersionAllowableValues();
        if (!is_null($unknown_http_version) && !in_array($unknown_http_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unknown_http_version', must be one of '%s'",
                    $unknown_http_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unknown_http_version'] = $unknown_http_version;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string|null
     */
    public function getRealm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string|null $realm Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
     *
     * @return self
     */
    public function setRealm($realm)
    {
        if (!is_null($realm) && (mb_strlen($realm) > 63)) {
            throw new \InvalidArgumentException('invalid length for $realm when calling InlineObject519., must be smaller than or equal to 63.');
        }

        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets sec_default_action
     *
     * @return string|null
     */
    public function getSecDefaultAction()
    {
        return $this->container['sec_default_action'];
    }

    /**
     * Sets sec_default_action
     *
     * @param string|null $sec_default_action Accept or deny explicit web proxy sessions when no web proxy firewall policy exists.    accept:Accept requests. All explicit web proxy traffic is accepted whether there is an explicit web proxy policy or not.    deny:Deny requests unless there is a matching explicit web proxy policy.
     *
     * @return self
     */
    public function setSecDefaultAction($sec_default_action)
    {
        $allowedValues = $this->getSecDefaultActionAllowableValues();
        if (!is_null($sec_default_action) && !in_array($sec_default_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sec_default_action', must be one of '%s'",
                    $sec_default_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sec_default_action'] = $sec_default_action;

        return $this;
    }

    /**
     * Gets https_replacement_message
     *
     * @return string|null
     */
    public function getHttpsReplacementMessage()
    {
        return $this->container['https_replacement_message'];
    }

    /**
     * Sets https_replacement_message
     *
     * @param string|null $https_replacement_message Enable/disable sending the client a replacement message for HTTPS requests.    enable:Display a replacement message for HTTPS requests.    disable:Do not display a replacement message for HTTPS requests.
     *
     * @return self
     */
    public function setHttpsReplacementMessage($https_replacement_message)
    {
        $allowedValues = $this->getHttpsReplacementMessageAllowableValues();
        if (!is_null($https_replacement_message) && !in_array($https_replacement_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'https_replacement_message', must be one of '%s'",
                    $https_replacement_message,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['https_replacement_message'] = $https_replacement_message;

        return $this;
    }

    /**
     * Gets message_upon_server_error
     *
     * @return string|null
     */
    public function getMessageUponServerError()
    {
        return $this->container['message_upon_server_error'];
    }

    /**
     * Sets message_upon_server_error
     *
     * @param string|null $message_upon_server_error Enable/disable displaying a replacement message when a server error is detected.    enable:Display a replacement message when a server error is detected.    disable:Do not display a replacement message when a server error is detected.
     *
     * @return self
     */
    public function setMessageUponServerError($message_upon_server_error)
    {
        $allowedValues = $this->getMessageUponServerErrorAllowableValues();
        if (!is_null($message_upon_server_error) && !in_array($message_upon_server_error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'message_upon_server_error', must be one of '%s'",
                    $message_upon_server_error,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_upon_server_error'] = $message_upon_server_error;

        return $this;
    }

    /**
     * Gets pac_file_server_status
     *
     * @return string|null
     */
    public function getPacFileServerStatus()
    {
        return $this->container['pac_file_server_status'];
    }

    /**
     * Sets pac_file_server_status
     *
     * @param string|null $pac_file_server_status Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile.    enable:Enable Proxy Auto-Configuration (PAC).    disable:Disable Proxy Auto-Configuration (PAC).
     *
     * @return self
     */
    public function setPacFileServerStatus($pac_file_server_status)
    {
        $allowedValues = $this->getPacFileServerStatusAllowableValues();
        if (!is_null($pac_file_server_status) && !in_array($pac_file_server_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pac_file_server_status', must be one of '%s'",
                    $pac_file_server_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pac_file_server_status'] = $pac_file_server_status;

        return $this;
    }

    /**
     * Gets pac_file_url
     *
     * @return string|null
     */
    public function getPacFileUrl()
    {
        return $this->container['pac_file_url'];
    }

    /**
     * Sets pac_file_url
     *
     * @param string|null $pac_file_url PAC file access URL.
     *
     * @return self
     */
    public function setPacFileUrl($pac_file_url)
    {
        $this->container['pac_file_url'] = $pac_file_url;

        return $this;
    }

    /**
     * Gets pac_file_server_port
     *
     * @return string|null
     */
    public function getPacFileServerPort()
    {
        return $this->container['pac_file_server_port'];
    }

    /**
     * Sets pac_file_server_port
     *
     * @param string|null $pac_file_server_port Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
     *
     * @return self
     */
    public function setPacFileServerPort($pac_file_server_port)
    {
        $this->container['pac_file_server_port'] = $pac_file_server_port;

        return $this;
    }

    /**
     * Gets pac_file_name
     *
     * @return string|null
     */
    public function getPacFileName()
    {
        return $this->container['pac_file_name'];
    }

    /**
     * Sets pac_file_name
     *
     * @param string|null $pac_file_name Pac file name.
     *
     * @return self
     */
    public function setPacFileName($pac_file_name)
    {
        if (!is_null($pac_file_name) && (mb_strlen($pac_file_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $pac_file_name when calling InlineObject519., must be smaller than or equal to 63.');
        }

        $this->container['pac_file_name'] = $pac_file_name;

        return $this;
    }

    /**
     * Gets pac_file_data
     *
     * @return string|null
     */
    public function getPacFileData()
    {
        return $this->container['pac_file_data'];
    }

    /**
     * Sets pac_file_data
     *
     * @param string|null $pac_file_data PAC file contents enclosed in quotes (maximum of 256K bytes).
     *
     * @return self
     */
    public function setPacFileData($pac_file_data)
    {
        $this->container['pac_file_data'] = $pac_file_data;

        return $this;
    }

    /**
     * Gets pac_policy
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebProxyExplicitPacPolicy[]|null
     */
    public function getPacPolicy()
    {
        return $this->container['pac_policy'];
    }

    /**
     * Sets pac_policy
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebProxyExplicitPacPolicy[]|null $pac_policy PAC policies.
     *
     * @return self
     */
    public function setPacPolicy($pac_policy)
    {

        if (!is_null($pac_policy) && (count($pac_policy) > 0)) {
            throw new \InvalidArgumentException('invalid value for $pac_policy when calling InlineObject519., number of items must be less than or equal to 0.');
        }
        $this->container['pac_policy'] = $pac_policy;

        return $this;
    }

    /**
     * Gets ssl_algorithm
     *
     * @return string|null
     */
    public function getSslAlgorithm()
    {
        return $this->container['ssl_algorithm'];
    }

    /**
     * Sets ssl_algorithm
     *
     * @param string|null $ssl_algorithm Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low.    high:High encrption. Allow only AES and ChaCha.    medium:Medium encryption. Allow AES, ChaCha, 3DES, and RC4.    low:Low encryption. Allow AES, ChaCha, 3DES, RC4, and DES.
     *
     * @return self
     */
    public function setSslAlgorithm($ssl_algorithm)
    {
        $allowedValues = $this->getSslAlgorithmAllowableValues();
        if (!is_null($ssl_algorithm) && !in_array($ssl_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_algorithm', must be one of '%s'",
                    $ssl_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_algorithm'] = $ssl_algorithm;

        return $this;
    }

    /**
     * Gets trace_auth_no_rsp
     *
     * @return string|null
     */
    public function getTraceAuthNoRsp()
    {
        return $this->container['trace_auth_no_rsp'];
    }

    /**
     * Sets trace_auth_no_rsp
     *
     * @param string|null $trace_auth_no_rsp Enable/disable logging timed-out authentication requests.    enable:Enable logging timed-out authentication requests.    disable:Disable logging timed-out authentication requests.
     *
     * @return self
     */
    public function setTraceAuthNoRsp($trace_auth_no_rsp)
    {
        $allowedValues = $this->getTraceAuthNoRspAllowableValues();
        if (!is_null($trace_auth_no_rsp) && !in_array($trace_auth_no_rsp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trace_auth_no_rsp', must be one of '%s'",
                    $trace_auth_no_rsp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trace_auth_no_rsp'] = $trace_auth_no_rsp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


