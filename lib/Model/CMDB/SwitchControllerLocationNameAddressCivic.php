<?php
/**
 * SwitchControllerLocationNameAddressCivic
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerLocationNameAddressCivic Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerLocationNameAddressCivic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_location__name__address_civic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional' => 'string',
        'additional_code' => 'string',
        'block' => 'string',
        'branch_road' => 'string',
        'building' => 'string',
        'city' => 'string',
        'city_division' => 'string',
        'country' => 'string',
        'country_subdivision' => 'string',
        'county' => 'string',
        'direction' => 'string',
        'floor' => 'string',
        'landmark' => 'string',
        'language' => 'string',
        'name' => 'string',
        'number' => 'string',
        'number_suffix' => 'string',
        'place_type' => 'string',
        'post_office_box' => 'string',
        'postal_community' => 'string',
        'primary_road' => 'string',
        'road_section' => 'string',
        'room' => 'string',
        'script' => 'string',
        'seat' => 'string',
        'street' => 'string',
        'street_name_post_mod' => 'string',
        'street_name_pre_mod' => 'string',
        'street_suffix' => 'string',
        'sub_branch_road' => 'string',
        'trailing_str_suffix' => 'string',
        'unit' => 'string',
        'zip' => 'string',
        'parent_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional' => null,
        'additional_code' => null,
        'block' => null,
        'branch_road' => null,
        'building' => null,
        'city' => null,
        'city_division' => null,
        'country' => null,
        'country_subdivision' => null,
        'county' => null,
        'direction' => null,
        'floor' => null,
        'landmark' => null,
        'language' => null,
        'name' => null,
        'number' => null,
        'number_suffix' => null,
        'place_type' => null,
        'post_office_box' => null,
        'postal_community' => null,
        'primary_road' => null,
        'road_section' => null,
        'room' => null,
        'script' => null,
        'seat' => null,
        'street' => null,
        'street_name_post_mod' => null,
        'street_name_pre_mod' => null,
        'street_suffix' => null,
        'sub_branch_road' => null,
        'trailing_str_suffix' => null,
        'unit' => null,
        'zip' => null,
        'parent_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional' => 'additional',
        'additional_code' => 'additional-code',
        'block' => 'block',
        'branch_road' => 'branch-road',
        'building' => 'building',
        'city' => 'city',
        'city_division' => 'city-division',
        'country' => 'country',
        'country_subdivision' => 'country-subdivision',
        'county' => 'county',
        'direction' => 'direction',
        'floor' => 'floor',
        'landmark' => 'landmark',
        'language' => 'language',
        'name' => 'name',
        'number' => 'number',
        'number_suffix' => 'number-suffix',
        'place_type' => 'place-type',
        'post_office_box' => 'post-office-box',
        'postal_community' => 'postal-community',
        'primary_road' => 'primary-road',
        'road_section' => 'road-section',
        'room' => 'room',
        'script' => 'script',
        'seat' => 'seat',
        'street' => 'street',
        'street_name_post_mod' => 'street-name-post-mod',
        'street_name_pre_mod' => 'street-name-pre-mod',
        'street_suffix' => 'street-suffix',
        'sub_branch_road' => 'sub-branch-road',
        'trailing_str_suffix' => 'trailing-str-suffix',
        'unit' => 'unit',
        'zip' => 'zip',
        'parent_key' => 'parent-key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional' => 'setAdditional',
        'additional_code' => 'setAdditionalCode',
        'block' => 'setBlock',
        'branch_road' => 'setBranchRoad',
        'building' => 'setBuilding',
        'city' => 'setCity',
        'city_division' => 'setCityDivision',
        'country' => 'setCountry',
        'country_subdivision' => 'setCountrySubdivision',
        'county' => 'setCounty',
        'direction' => 'setDirection',
        'floor' => 'setFloor',
        'landmark' => 'setLandmark',
        'language' => 'setLanguage',
        'name' => 'setName',
        'number' => 'setNumber',
        'number_suffix' => 'setNumberSuffix',
        'place_type' => 'setPlaceType',
        'post_office_box' => 'setPostOfficeBox',
        'postal_community' => 'setPostalCommunity',
        'primary_road' => 'setPrimaryRoad',
        'road_section' => 'setRoadSection',
        'room' => 'setRoom',
        'script' => 'setScript',
        'seat' => 'setSeat',
        'street' => 'setStreet',
        'street_name_post_mod' => 'setStreetNamePostMod',
        'street_name_pre_mod' => 'setStreetNamePreMod',
        'street_suffix' => 'setStreetSuffix',
        'sub_branch_road' => 'setSubBranchRoad',
        'trailing_str_suffix' => 'setTrailingStrSuffix',
        'unit' => 'setUnit',
        'zip' => 'setZip',
        'parent_key' => 'setParentKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional' => 'getAdditional',
        'additional_code' => 'getAdditionalCode',
        'block' => 'getBlock',
        'branch_road' => 'getBranchRoad',
        'building' => 'getBuilding',
        'city' => 'getCity',
        'city_division' => 'getCityDivision',
        'country' => 'getCountry',
        'country_subdivision' => 'getCountrySubdivision',
        'county' => 'getCounty',
        'direction' => 'getDirection',
        'floor' => 'getFloor',
        'landmark' => 'getLandmark',
        'language' => 'getLanguage',
        'name' => 'getName',
        'number' => 'getNumber',
        'number_suffix' => 'getNumberSuffix',
        'place_type' => 'getPlaceType',
        'post_office_box' => 'getPostOfficeBox',
        'postal_community' => 'getPostalCommunity',
        'primary_road' => 'getPrimaryRoad',
        'road_section' => 'getRoadSection',
        'room' => 'getRoom',
        'script' => 'getScript',
        'seat' => 'getSeat',
        'street' => 'getStreet',
        'street_name_post_mod' => 'getStreetNamePostMod',
        'street_name_pre_mod' => 'getStreetNamePreMod',
        'street_suffix' => 'getStreetSuffix',
        'sub_branch_road' => 'getSubBranchRoad',
        'trailing_str_suffix' => 'getTrailingStrSuffix',
        'unit' => 'getUnit',
        'zip' => 'getZip',
        'parent_key' => 'getParentKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional'] = $data['additional'] ?? null;
        $this->container['additional_code'] = $data['additional_code'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
        $this->container['branch_road'] = $data['branch_road'] ?? null;
        $this->container['building'] = $data['building'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['city_division'] = $data['city_division'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['country_subdivision'] = $data['country_subdivision'] ?? null;
        $this->container['county'] = $data['county'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['floor'] = $data['floor'] ?? null;
        $this->container['landmark'] = $data['landmark'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['number_suffix'] = $data['number_suffix'] ?? null;
        $this->container['place_type'] = $data['place_type'] ?? null;
        $this->container['post_office_box'] = $data['post_office_box'] ?? null;
        $this->container['postal_community'] = $data['postal_community'] ?? null;
        $this->container['primary_road'] = $data['primary_road'] ?? null;
        $this->container['road_section'] = $data['road_section'] ?? null;
        $this->container['room'] = $data['room'] ?? null;
        $this->container['script'] = $data['script'] ?? null;
        $this->container['seat'] = $data['seat'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['street_name_post_mod'] = $data['street_name_post_mod'] ?? null;
        $this->container['street_name_pre_mod'] = $data['street_name_pre_mod'] ?? null;
        $this->container['street_suffix'] = $data['street_suffix'] ?? null;
        $this->container['sub_branch_road'] = $data['sub_branch_road'] ?? null;
        $this->container['trailing_str_suffix'] = $data['trailing_str_suffix'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['parent_key'] = $data['parent_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['additional']) && (mb_strlen($this->container['additional']) > 47)) {
            $invalidProperties[] = "invalid value for 'additional', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['additional_code']) && (mb_strlen($this->container['additional_code']) > 47)) {
            $invalidProperties[] = "invalid value for 'additional_code', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['block']) && (mb_strlen($this->container['block']) > 47)) {
            $invalidProperties[] = "invalid value for 'block', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['branch_road']) && (mb_strlen($this->container['branch_road']) > 47)) {
            $invalidProperties[] = "invalid value for 'branch_road', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['building']) && (mb_strlen($this->container['building']) > 47)) {
            $invalidProperties[] = "invalid value for 'building', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 47)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['city_division']) && (mb_strlen($this->container['city_division']) > 47)) {
            $invalidProperties[] = "invalid value for 'city_division', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 47)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['country_subdivision']) && (mb_strlen($this->container['country_subdivision']) > 47)) {
            $invalidProperties[] = "invalid value for 'country_subdivision', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 47)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['direction']) && (mb_strlen($this->container['direction']) > 47)) {
            $invalidProperties[] = "invalid value for 'direction', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['floor']) && (mb_strlen($this->container['floor']) > 47)) {
            $invalidProperties[] = "invalid value for 'floor', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['landmark']) && (mb_strlen($this->container['landmark']) > 47)) {
            $invalidProperties[] = "invalid value for 'landmark', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 47)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 47)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 47)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['number_suffix']) && (mb_strlen($this->container['number_suffix']) > 47)) {
            $invalidProperties[] = "invalid value for 'number_suffix', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['place_type']) && (mb_strlen($this->container['place_type']) > 47)) {
            $invalidProperties[] = "invalid value for 'place_type', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['post_office_box']) && (mb_strlen($this->container['post_office_box']) > 47)) {
            $invalidProperties[] = "invalid value for 'post_office_box', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['postal_community']) && (mb_strlen($this->container['postal_community']) > 47)) {
            $invalidProperties[] = "invalid value for 'postal_community', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['primary_road']) && (mb_strlen($this->container['primary_road']) > 47)) {
            $invalidProperties[] = "invalid value for 'primary_road', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['road_section']) && (mb_strlen($this->container['road_section']) > 47)) {
            $invalidProperties[] = "invalid value for 'road_section', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['room']) && (mb_strlen($this->container['room']) > 47)) {
            $invalidProperties[] = "invalid value for 'room', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['script']) && (mb_strlen($this->container['script']) > 47)) {
            $invalidProperties[] = "invalid value for 'script', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['seat']) && (mb_strlen($this->container['seat']) > 47)) {
            $invalidProperties[] = "invalid value for 'seat', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 47)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['street_name_post_mod']) && (mb_strlen($this->container['street_name_post_mod']) > 47)) {
            $invalidProperties[] = "invalid value for 'street_name_post_mod', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['street_name_pre_mod']) && (mb_strlen($this->container['street_name_pre_mod']) > 47)) {
            $invalidProperties[] = "invalid value for 'street_name_pre_mod', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['street_suffix']) && (mb_strlen($this->container['street_suffix']) > 47)) {
            $invalidProperties[] = "invalid value for 'street_suffix', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['sub_branch_road']) && (mb_strlen($this->container['sub_branch_road']) > 47)) {
            $invalidProperties[] = "invalid value for 'sub_branch_road', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['trailing_str_suffix']) && (mb_strlen($this->container['trailing_str_suffix']) > 47)) {
            $invalidProperties[] = "invalid value for 'trailing_str_suffix', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 47)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 47)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['parent_key']) && (mb_strlen($this->container['parent_key']) > 63)) {
            $invalidProperties[] = "invalid value for 'parent_key', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional
     *
     * @return string|null
     */
    public function getAdditional()
    {
        return $this->container['additional'];
    }

    /**
     * Sets additional
     *
     * @param string|null $additional Location additional details.
     *
     * @return self
     */
    public function setAdditional($additional)
    {
        if (!is_null($additional) && (mb_strlen($additional) > 47)) {
            throw new \InvalidArgumentException('invalid length for $additional when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['additional'] = $additional;

        return $this;
    }

    /**
     * Gets additional_code
     *
     * @return string|null
     */
    public function getAdditionalCode()
    {
        return $this->container['additional_code'];
    }

    /**
     * Sets additional_code
     *
     * @param string|null $additional_code Location additional code details.
     *
     * @return self
     */
    public function setAdditionalCode($additional_code)
    {
        if (!is_null($additional_code) && (mb_strlen($additional_code) > 47)) {
            throw new \InvalidArgumentException('invalid length for $additional_code when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['additional_code'] = $additional_code;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string|null $block Location block details.
     *
     * @return self
     */
    public function setBlock($block)
    {
        if (!is_null($block) && (mb_strlen($block) > 47)) {
            throw new \InvalidArgumentException('invalid length for $block when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets branch_road
     *
     * @return string|null
     */
    public function getBranchRoad()
    {
        return $this->container['branch_road'];
    }

    /**
     * Sets branch_road
     *
     * @param string|null $branch_road Location branch road details.
     *
     * @return self
     */
    public function setBranchRoad($branch_road)
    {
        if (!is_null($branch_road) && (mb_strlen($branch_road) > 47)) {
            throw new \InvalidArgumentException('invalid length for $branch_road when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['branch_road'] = $branch_road;

        return $this;
    }

    /**
     * Gets building
     *
     * @return string|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param string|null $building Location building details.
     *
     * @return self
     */
    public function setBuilding($building)
    {
        if (!is_null($building) && (mb_strlen($building) > 47)) {
            throw new \InvalidArgumentException('invalid length for $building when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Location city details.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 47)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets city_division
     *
     * @return string|null
     */
    public function getCityDivision()
    {
        return $this->container['city_division'];
    }

    /**
     * Sets city_division
     *
     * @param string|null $city_division Location city division details.
     *
     * @return self
     */
    public function setCityDivision($city_division)
    {
        if (!is_null($city_division) && (mb_strlen($city_division) > 47)) {
            throw new \InvalidArgumentException('invalid length for $city_division when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['city_division'] = $city_division;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 47)) {
            throw new \InvalidArgumentException('invalid length for $country when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_subdivision
     *
     * @return string|null
     */
    public function getCountrySubdivision()
    {
        return $this->container['country_subdivision'];
    }

    /**
     * Sets country_subdivision
     *
     * @param string|null $country_subdivision National subdivisions (state, canton, region, province, or prefecture).
     *
     * @return self
     */
    public function setCountrySubdivision($country_subdivision)
    {
        if (!is_null($country_subdivision) && (mb_strlen($country_subdivision) > 47)) {
            throw new \InvalidArgumentException('invalid length for $country_subdivision when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['country_subdivision'] = $country_subdivision;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county County, parish, gun (JP), or district (IN).
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (mb_strlen($county) > 47)) {
            throw new \InvalidArgumentException('invalid length for $county when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction Leading street direction.
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (!is_null($direction) && (mb_strlen($direction) > 47)) {
            throw new \InvalidArgumentException('invalid length for $direction when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return string|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param string|null $floor Floor.
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (!is_null($floor) && (mb_strlen($floor) > 47)) {
            throw new \InvalidArgumentException('invalid length for $floor when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets landmark
     *
     * @return string|null
     */
    public function getLandmark()
    {
        return $this->container['landmark'];
    }

    /**
     * Sets landmark
     *
     * @param string|null $landmark Landmark or vanity address.
     *
     * @return self
     */
    public function setLandmark($landmark)
    {
        if (!is_null($landmark) && (mb_strlen($landmark) > 47)) {
            throw new \InvalidArgumentException('invalid length for $landmark when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['landmark'] = $landmark;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (!is_null($language) && (mb_strlen($language) > 47)) {
            throw new \InvalidArgumentException('invalid length for $language when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name (residence and office occupant).
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 47)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number House number.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 47)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets number_suffix
     *
     * @return string|null
     */
    public function getNumberSuffix()
    {
        return $this->container['number_suffix'];
    }

    /**
     * Sets number_suffix
     *
     * @param string|null $number_suffix House number suffix.
     *
     * @return self
     */
    public function setNumberSuffix($number_suffix)
    {
        if (!is_null($number_suffix) && (mb_strlen($number_suffix) > 47)) {
            throw new \InvalidArgumentException('invalid length for $number_suffix when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['number_suffix'] = $number_suffix;

        return $this;
    }

    /**
     * Gets place_type
     *
     * @return string|null
     */
    public function getPlaceType()
    {
        return $this->container['place_type'];
    }

    /**
     * Sets place_type
     *
     * @param string|null $place_type Placetype.
     *
     * @return self
     */
    public function setPlaceType($place_type)
    {
        if (!is_null($place_type) && (mb_strlen($place_type) > 47)) {
            throw new \InvalidArgumentException('invalid length for $place_type when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['place_type'] = $place_type;

        return $this;
    }

    /**
     * Gets post_office_box
     *
     * @return string|null
     */
    public function getPostOfficeBox()
    {
        return $this->container['post_office_box'];
    }

    /**
     * Sets post_office_box
     *
     * @param string|null $post_office_box Post office box (P.O. box).
     *
     * @return self
     */
    public function setPostOfficeBox($post_office_box)
    {
        if (!is_null($post_office_box) && (mb_strlen($post_office_box) > 47)) {
            throw new \InvalidArgumentException('invalid length for $post_office_box when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['post_office_box'] = $post_office_box;

        return $this;
    }

    /**
     * Gets postal_community
     *
     * @return string|null
     */
    public function getPostalCommunity()
    {
        return $this->container['postal_community'];
    }

    /**
     * Sets postal_community
     *
     * @param string|null $postal_community Postal community name.
     *
     * @return self
     */
    public function setPostalCommunity($postal_community)
    {
        if (!is_null($postal_community) && (mb_strlen($postal_community) > 47)) {
            throw new \InvalidArgumentException('invalid length for $postal_community when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['postal_community'] = $postal_community;

        return $this;
    }

    /**
     * Gets primary_road
     *
     * @return string|null
     */
    public function getPrimaryRoad()
    {
        return $this->container['primary_road'];
    }

    /**
     * Sets primary_road
     *
     * @param string|null $primary_road Primary road name.
     *
     * @return self
     */
    public function setPrimaryRoad($primary_road)
    {
        if (!is_null($primary_road) && (mb_strlen($primary_road) > 47)) {
            throw new \InvalidArgumentException('invalid length for $primary_road when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['primary_road'] = $primary_road;

        return $this;
    }

    /**
     * Gets road_section
     *
     * @return string|null
     */
    public function getRoadSection()
    {
        return $this->container['road_section'];
    }

    /**
     * Sets road_section
     *
     * @param string|null $road_section Road section.
     *
     * @return self
     */
    public function setRoadSection($road_section)
    {
        if (!is_null($road_section) && (mb_strlen($road_section) > 47)) {
            throw new \InvalidArgumentException('invalid length for $road_section when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['road_section'] = $road_section;

        return $this;
    }

    /**
     * Gets room
     *
     * @return string|null
     */
    public function getRoom()
    {
        return $this->container['room'];
    }

    /**
     * Sets room
     *
     * @param string|null $room Room number.
     *
     * @return self
     */
    public function setRoom($room)
    {
        if (!is_null($room) && (mb_strlen($room) > 47)) {
            throw new \InvalidArgumentException('invalid length for $room when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['room'] = $room;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string|null
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string|null $script Script used to present the address information.
     *
     * @return self
     */
    public function setScript($script)
    {
        if (!is_null($script) && (mb_strlen($script) > 47)) {
            throw new \InvalidArgumentException('invalid length for $script when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets seat
     *
     * @return string|null
     */
    public function getSeat()
    {
        return $this->container['seat'];
    }

    /**
     * Sets seat
     *
     * @param string|null $seat Seat number.
     *
     * @return self
     */
    public function setSeat($seat)
    {
        if (!is_null($seat) && (mb_strlen($seat) > 47)) {
            throw new \InvalidArgumentException('invalid length for $seat when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['seat'] = $seat;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Street.
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (mb_strlen($street) > 47)) {
            throw new \InvalidArgumentException('invalid length for $street when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_name_post_mod
     *
     * @return string|null
     */
    public function getStreetNamePostMod()
    {
        return $this->container['street_name_post_mod'];
    }

    /**
     * Sets street_name_post_mod
     *
     * @param string|null $street_name_post_mod Street name post modifier.
     *
     * @return self
     */
    public function setStreetNamePostMod($street_name_post_mod)
    {
        if (!is_null($street_name_post_mod) && (mb_strlen($street_name_post_mod) > 47)) {
            throw new \InvalidArgumentException('invalid length for $street_name_post_mod when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['street_name_post_mod'] = $street_name_post_mod;

        return $this;
    }

    /**
     * Gets street_name_pre_mod
     *
     * @return string|null
     */
    public function getStreetNamePreMod()
    {
        return $this->container['street_name_pre_mod'];
    }

    /**
     * Sets street_name_pre_mod
     *
     * @param string|null $street_name_pre_mod Street name pre modifier.
     *
     * @return self
     */
    public function setStreetNamePreMod($street_name_pre_mod)
    {
        if (!is_null($street_name_pre_mod) && (mb_strlen($street_name_pre_mod) > 47)) {
            throw new \InvalidArgumentException('invalid length for $street_name_pre_mod when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['street_name_pre_mod'] = $street_name_pre_mod;

        return $this;
    }

    /**
     * Gets street_suffix
     *
     * @return string|null
     */
    public function getStreetSuffix()
    {
        return $this->container['street_suffix'];
    }

    /**
     * Sets street_suffix
     *
     * @param string|null $street_suffix Street suffix.
     *
     * @return self
     */
    public function setStreetSuffix($street_suffix)
    {
        if (!is_null($street_suffix) && (mb_strlen($street_suffix) > 47)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['street_suffix'] = $street_suffix;

        return $this;
    }

    /**
     * Gets sub_branch_road
     *
     * @return string|null
     */
    public function getSubBranchRoad()
    {
        return $this->container['sub_branch_road'];
    }

    /**
     * Sets sub_branch_road
     *
     * @param string|null $sub_branch_road Sub branch road name.
     *
     * @return self
     */
    public function setSubBranchRoad($sub_branch_road)
    {
        if (!is_null($sub_branch_road) && (mb_strlen($sub_branch_road) > 47)) {
            throw new \InvalidArgumentException('invalid length for $sub_branch_road when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['sub_branch_road'] = $sub_branch_road;

        return $this;
    }

    /**
     * Gets trailing_str_suffix
     *
     * @return string|null
     */
    public function getTrailingStrSuffix()
    {
        return $this->container['trailing_str_suffix'];
    }

    /**
     * Sets trailing_str_suffix
     *
     * @param string|null $trailing_str_suffix Trailing street suffix.
     *
     * @return self
     */
    public function setTrailingStrSuffix($trailing_str_suffix)
    {
        if (!is_null($trailing_str_suffix) && (mb_strlen($trailing_str_suffix) > 47)) {
            throw new \InvalidArgumentException('invalid length for $trailing_str_suffix when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['trailing_str_suffix'] = $trailing_str_suffix;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit Unit (apartment, suite).
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 47)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Postal/zip code.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (mb_strlen($zip) > 47)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 47.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets parent_key
     *
     * @return string|null
     */
    public function getParentKey()
    {
        return $this->container['parent_key'];
    }

    /**
     * Sets parent_key
     *
     * @param string|null $parent_key Parent key name.
     *
     * @return self
     */
    public function setParentKey($parent_key)
    {
        if (!is_null($parent_key) && (mb_strlen($parent_key) > 63)) {
            throw new \InvalidArgumentException('invalid length for $parent_key when calling SwitchControllerLocationNameAddressCivic., must be smaller than or equal to 63.');
        }

        $this->container['parent_key'] = $parent_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


