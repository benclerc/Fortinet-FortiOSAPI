<?php
/**
 * InlineObject220
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject220 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject220 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_220';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'vendor' => 'string',
        'model' => 'string',
        'vendor_id' => 'string',
        'product_id' => 'string',
        'class_id' => 'string',
        'init_string' => 'string',
        'modeswitch_string' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'vendor' => null,
        'model' => null,
        'vendor_id' => null,
        'product_id' => null,
        'class_id' => null,
        'init_string' => null,
        'modeswitch_string' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vendor' => 'vendor',
        'model' => 'model',
        'vendor_id' => 'vendor-id',
        'product_id' => 'product-id',
        'class_id' => 'class-id',
        'init_string' => 'init-string',
        'modeswitch_string' => 'modeswitch-string'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vendor' => 'setVendor',
        'model' => 'setModel',
        'vendor_id' => 'setVendorId',
        'product_id' => 'setProductId',
        'class_id' => 'setClassId',
        'init_string' => 'setInitString',
        'modeswitch_string' => 'setModeswitchString'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vendor' => 'getVendor',
        'model' => 'getModel',
        'vendor_id' => 'getVendorId',
        'product_id' => 'getProductId',
        'class_id' => 'getClassId',
        'init_string' => 'getInitString',
        'modeswitch_string' => 'getModeswitchString'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['vendor'] = $data['vendor'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['vendor_id'] = $data['vendor_id'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['class_id'] = $data['class_id'] ?? null;
        $this->container['init_string'] = $data['init_string'] ?? null;
        $this->container['modeswitch_string'] = $data['modeswitch_string'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vendor']) && (mb_strlen($this->container['vendor']) > 35)) {
            $invalidProperties[] = "invalid value for 'vendor', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['model']) && (mb_strlen($this->container['model']) > 35)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['init_string']) && (mb_strlen($this->container['init_string']) > 127)) {
            $invalidProperties[] = "invalid value for 'init_string', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['modeswitch_string']) && (mb_strlen($this->container['modeswitch_string']) > 127)) {
            $invalidProperties[] = "invalid value for 'modeswitch_string', the character length must be smaller than or equal to 127.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject220., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InlineObject220., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor MODEM vendor name.
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (!is_null($vendor) && (mb_strlen($vendor) > 35)) {
            throw new \InvalidArgumentException('invalid length for $vendor when calling InlineObject220., must be smaller than or equal to 35.');
        }

        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model MODEM model name.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (!is_null($model) && (mb_strlen($model) > 35)) {
            throw new \InvalidArgumentException('invalid length for $model when calling InlineObject220., must be smaller than or equal to 35.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string|null
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string|null $vendor_id USB vendor ID in hexadecimal format (0000-ffff).
     *
     * @return self
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id USB product ID in hexadecimal format (0000-ffff).
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return string|null
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param string|null $class_id USB interface class in hexadecimal format (00-ff).
     *
     * @return self
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets init_string
     *
     * @return string|null
     */
    public function getInitString()
    {
        return $this->container['init_string'];
    }

    /**
     * Sets init_string
     *
     * @param string|null $init_string Init string in hexadecimal format (even length).
     *
     * @return self
     */
    public function setInitString($init_string)
    {
        if (!is_null($init_string) && (mb_strlen($init_string) > 127)) {
            throw new \InvalidArgumentException('invalid length for $init_string when calling InlineObject220., must be smaller than or equal to 127.');
        }

        $this->container['init_string'] = $init_string;

        return $this;
    }

    /**
     * Gets modeswitch_string
     *
     * @return string|null
     */
    public function getModeswitchString()
    {
        return $this->container['modeswitch_string'];
    }

    /**
     * Sets modeswitch_string
     *
     * @param string|null $modeswitch_string USB modeswitch arguments. e.g: '-v 1410 -p 9030 -V 1410 -P 9032 -u 3'
     *
     * @return self
     */
    public function setModeswitchString($modeswitch_string)
    {
        if (!is_null($modeswitch_string) && (mb_strlen($modeswitch_string) > 127)) {
            throw new \InvalidArgumentException('invalid length for $modeswitch_string when calling InlineObject220., must be smaller than or equal to 127.');
        }

        $this->container['modeswitch_string'] = $modeswitch_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


