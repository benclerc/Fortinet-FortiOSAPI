<?php
/**
 * InlineObject547
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject547 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject547 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_547';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'hostname' => 'string',
        'url' => 'string',
        'query' => 'string',
        'safesearch' => 'string',
        'charset' => 'string',
        'safesearch_str' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'hostname' => null,
        'url' => null,
        'query' => null,
        'safesearch' => null,
        'charset' => null,
        'safesearch_str' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'hostname' => 'hostname',
        'url' => 'url',
        'query' => 'query',
        'safesearch' => 'safesearch',
        'charset' => 'charset',
        'safesearch_str' => 'safesearch-str'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'hostname' => 'setHostname',
        'url' => 'setUrl',
        'query' => 'setQuery',
        'safesearch' => 'setSafesearch',
        'charset' => 'setCharset',
        'safesearch_str' => 'setSafesearchStr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'hostname' => 'getHostname',
        'url' => 'getUrl',
        'query' => 'getQuery',
        'safesearch' => 'getSafesearch',
        'charset' => 'getCharset',
        'safesearch_str' => 'getSafesearchStr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SAFESEARCH_DISABLE = 'disable';
    const SAFESEARCH_URL = 'url';
    const SAFESEARCH_HEADER = 'header';
    const CHARSET_UTF_8 = 'utf-8';
    const CHARSET_GB2312 = 'gb2312';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSafesearchAllowableValues()
    {
        return [
            self::SAFESEARCH_DISABLE,
            self::SAFESEARCH_URL,
            self::SAFESEARCH_HEADER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCharsetAllowableValues()
    {
        return [
            self::CHARSET_UTF_8,
            self::CHARSET_GB2312,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['query'] = $data['query'] ?? null;
        $this->container['safesearch'] = $data['safesearch'] ?? null;
        $this->container['charset'] = $data['charset'] ?? null;
        $this->container['safesearch_str'] = $data['safesearch_str'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['hostname']) && (mb_strlen($this->container['hostname']) > 127)) {
            $invalidProperties[] = "invalid value for 'hostname', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 127)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['query']) && (mb_strlen($this->container['query']) > 15)) {
            $invalidProperties[] = "invalid value for 'query', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getSafesearchAllowableValues();
        if (!is_null($this->container['safesearch']) && !in_array($this->container['safesearch'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'safesearch', must be one of '%s'",
                $this->container['safesearch'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCharsetAllowableValues();
        if (!is_null($this->container['charset']) && !in_array($this->container['charset'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'charset', must be one of '%s'",
                $this->container['charset'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['safesearch_str']) && (mb_strlen($this->container['safesearch_str']) > 79)) {
            $invalidProperties[] = "invalid value for 'safesearch_str', the character length must be smaller than or equal to 79.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Search engine name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject547., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname Hostname (regular expression).
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (!is_null($hostname) && (mb_strlen($hostname) > 127)) {
            throw new \InvalidArgumentException('invalid length for $hostname when calling InlineObject547., must be smaller than or equal to 127.');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL (regular expression).
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $url when calling InlineObject547., must be smaller than or equal to 127.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query Code used to prefix a query (must end with an equals character).
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (!is_null($query) && (mb_strlen($query) > 15)) {
            throw new \InvalidArgumentException('invalid length for $query when calling InlineObject547., must be smaller than or equal to 15.');
        }

        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets safesearch
     *
     * @return string|null
     */
    public function getSafesearch()
    {
        return $this->container['safesearch'];
    }

    /**
     * Sets safesearch
     *
     * @param string|null $safesearch Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.    disable:Site does not support safe search.    url:Safe search selected with a parameter in the URL.    header:Safe search selected by search header (i.e. youtube.edu).
     *
     * @return self
     */
    public function setSafesearch($safesearch)
    {
        $allowedValues = $this->getSafesearchAllowableValues();
        if (!is_null($safesearch) && !in_array($safesearch, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'safesearch', must be one of '%s'",
                    $safesearch,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['safesearch'] = $safesearch;

        return $this;
    }

    /**
     * Gets charset
     *
     * @return string|null
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string|null $charset Search engine charset.    utf-8:UTF-8 encoding.    gb2312:GB2312 encoding.
     *
     * @return self
     */
    public function setCharset($charset)
    {
        $allowedValues = $this->getCharsetAllowableValues();
        if (!is_null($charset) && !in_array($charset, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'charset', must be one of '%s'",
                    $charset,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets safesearch_str
     *
     * @return string|null
     */
    public function getSafesearchStr()
    {
        return $this->container['safesearch_str'];
    }

    /**
     * Sets safesearch_str
     *
     * @param string|null $safesearch_str Safe search parameter used in the URL.
     *
     * @return self
     */
    public function setSafesearchStr($safesearch_str)
    {
        if (!is_null($safesearch_str) && (mb_strlen($safesearch_str) > 79)) {
            throw new \InvalidArgumentException('invalid length for $safesearch_str when calling InlineObject547., must be smaller than or equal to 79.');
        }

        $this->container['safesearch_str'] = $safesearch_str;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


