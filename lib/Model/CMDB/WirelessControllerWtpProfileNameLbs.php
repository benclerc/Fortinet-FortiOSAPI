<?php
/**
 * WirelessControllerWtpProfileNameLbs
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerWtpProfileNameLbs Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerWtpProfileNameLbs implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_wtp_profile__name__lbs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ekahau_blink_mode' => 'string',
        'ekahau_tag' => 'string',
        'erc_server_ip' => 'string',
        'erc_server_port' => 'int',
        'aeroscout' => 'string',
        'aeroscout_server_ip' => 'string',
        'aeroscout_server_port' => 'int',
        'aeroscout_mu' => 'string',
        'aeroscout_ap_mac' => 'string',
        'aeroscout_mmu_report' => 'string',
        'aeroscout_mu_factor' => 'int',
        'aeroscout_mu_timeout' => 'int',
        'fortipresence' => 'string',
        'fortipresence_server' => 'string',
        'fortipresence_port' => 'int',
        'fortipresence_secret' => 'string',
        'fortipresence_project' => 'string',
        'fortipresence_frequency' => 'int',
        'fortipresence_rogue' => 'string',
        'fortipresence_unassoc' => 'string',
        'fortipresence_ble' => 'string',
        'station_locate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ekahau_blink_mode' => null,
        'ekahau_tag' => 'mac-address',
        'erc_server_ip' => 'ipv4',
        'erc_server_port' => null,
        'aeroscout' => null,
        'aeroscout_server_ip' => 'ipv4',
        'aeroscout_server_port' => null,
        'aeroscout_mu' => null,
        'aeroscout_ap_mac' => null,
        'aeroscout_mmu_report' => null,
        'aeroscout_mu_factor' => null,
        'aeroscout_mu_timeout' => null,
        'fortipresence' => null,
        'fortipresence_server' => 'ipv4',
        'fortipresence_port' => null,
        'fortipresence_secret' => 'password',
        'fortipresence_project' => null,
        'fortipresence_frequency' => null,
        'fortipresence_rogue' => null,
        'fortipresence_unassoc' => null,
        'fortipresence_ble' => null,
        'station_locate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ekahau_blink_mode' => 'ekahau-blink-mode',
        'ekahau_tag' => 'ekahau-tag',
        'erc_server_ip' => 'erc-server-ip',
        'erc_server_port' => 'erc-server-port',
        'aeroscout' => 'aeroscout',
        'aeroscout_server_ip' => 'aeroscout-server-ip',
        'aeroscout_server_port' => 'aeroscout-server-port',
        'aeroscout_mu' => 'aeroscout-mu',
        'aeroscout_ap_mac' => 'aeroscout-ap-mac',
        'aeroscout_mmu_report' => 'aeroscout-mmu-report',
        'aeroscout_mu_factor' => 'aeroscout-mu-factor',
        'aeroscout_mu_timeout' => 'aeroscout-mu-timeout',
        'fortipresence' => 'fortipresence',
        'fortipresence_server' => 'fortipresence-server',
        'fortipresence_port' => 'fortipresence-port',
        'fortipresence_secret' => 'fortipresence-secret',
        'fortipresence_project' => 'fortipresence-project',
        'fortipresence_frequency' => 'fortipresence-frequency',
        'fortipresence_rogue' => 'fortipresence-rogue',
        'fortipresence_unassoc' => 'fortipresence-unassoc',
        'fortipresence_ble' => 'fortipresence-ble',
        'station_locate' => 'station-locate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ekahau_blink_mode' => 'setEkahauBlinkMode',
        'ekahau_tag' => 'setEkahauTag',
        'erc_server_ip' => 'setErcServerIp',
        'erc_server_port' => 'setErcServerPort',
        'aeroscout' => 'setAeroscout',
        'aeroscout_server_ip' => 'setAeroscoutServerIp',
        'aeroscout_server_port' => 'setAeroscoutServerPort',
        'aeroscout_mu' => 'setAeroscoutMu',
        'aeroscout_ap_mac' => 'setAeroscoutApMac',
        'aeroscout_mmu_report' => 'setAeroscoutMmuReport',
        'aeroscout_mu_factor' => 'setAeroscoutMuFactor',
        'aeroscout_mu_timeout' => 'setAeroscoutMuTimeout',
        'fortipresence' => 'setFortipresence',
        'fortipresence_server' => 'setFortipresenceServer',
        'fortipresence_port' => 'setFortipresencePort',
        'fortipresence_secret' => 'setFortipresenceSecret',
        'fortipresence_project' => 'setFortipresenceProject',
        'fortipresence_frequency' => 'setFortipresenceFrequency',
        'fortipresence_rogue' => 'setFortipresenceRogue',
        'fortipresence_unassoc' => 'setFortipresenceUnassoc',
        'fortipresence_ble' => 'setFortipresenceBle',
        'station_locate' => 'setStationLocate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ekahau_blink_mode' => 'getEkahauBlinkMode',
        'ekahau_tag' => 'getEkahauTag',
        'erc_server_ip' => 'getErcServerIp',
        'erc_server_port' => 'getErcServerPort',
        'aeroscout' => 'getAeroscout',
        'aeroscout_server_ip' => 'getAeroscoutServerIp',
        'aeroscout_server_port' => 'getAeroscoutServerPort',
        'aeroscout_mu' => 'getAeroscoutMu',
        'aeroscout_ap_mac' => 'getAeroscoutApMac',
        'aeroscout_mmu_report' => 'getAeroscoutMmuReport',
        'aeroscout_mu_factor' => 'getAeroscoutMuFactor',
        'aeroscout_mu_timeout' => 'getAeroscoutMuTimeout',
        'fortipresence' => 'getFortipresence',
        'fortipresence_server' => 'getFortipresenceServer',
        'fortipresence_port' => 'getFortipresencePort',
        'fortipresence_secret' => 'getFortipresenceSecret',
        'fortipresence_project' => 'getFortipresenceProject',
        'fortipresence_frequency' => 'getFortipresenceFrequency',
        'fortipresence_rogue' => 'getFortipresenceRogue',
        'fortipresence_unassoc' => 'getFortipresenceUnassoc',
        'fortipresence_ble' => 'getFortipresenceBle',
        'station_locate' => 'getStationLocate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EKAHAU_BLINK_MODE_ENABLE = 'enable';
    const EKAHAU_BLINK_MODE_DISABLE = 'disable';
    const AEROSCOUT_ENABLE = 'enable';
    const AEROSCOUT_DISABLE = 'disable';
    const AEROSCOUT_MU_ENABLE = 'enable';
    const AEROSCOUT_MU_DISABLE = 'disable';
    const AEROSCOUT_AP_MAC_BSSID = 'bssid';
    const AEROSCOUT_AP_MAC_BOARD_MAC = 'board-mac';
    const AEROSCOUT_MMU_REPORT_ENABLE = 'enable';
    const AEROSCOUT_MMU_REPORT_DISABLE = 'disable';
    const FORTIPRESENCE_FOREIGN = 'foreign';
    const FORTIPRESENCE_BOTH = 'both';
    const FORTIPRESENCE_DISABLE = 'disable';
    const FORTIPRESENCE_ROGUE_ENABLE = 'enable';
    const FORTIPRESENCE_ROGUE_DISABLE = 'disable';
    const FORTIPRESENCE_UNASSOC_ENABLE = 'enable';
    const FORTIPRESENCE_UNASSOC_DISABLE = 'disable';
    const FORTIPRESENCE_BLE_ENABLE = 'enable';
    const FORTIPRESENCE_BLE_DISABLE = 'disable';
    const STATION_LOCATE_ENABLE = 'enable';
    const STATION_LOCATE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEkahauBlinkModeAllowableValues()
    {
        return [
            self::EKAHAU_BLINK_MODE_ENABLE,
            self::EKAHAU_BLINK_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAeroscoutAllowableValues()
    {
        return [
            self::AEROSCOUT_ENABLE,
            self::AEROSCOUT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAeroscoutMuAllowableValues()
    {
        return [
            self::AEROSCOUT_MU_ENABLE,
            self::AEROSCOUT_MU_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAeroscoutApMacAllowableValues()
    {
        return [
            self::AEROSCOUT_AP_MAC_BSSID,
            self::AEROSCOUT_AP_MAC_BOARD_MAC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAeroscoutMmuReportAllowableValues()
    {
        return [
            self::AEROSCOUT_MMU_REPORT_ENABLE,
            self::AEROSCOUT_MMU_REPORT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortipresenceAllowableValues()
    {
        return [
            self::FORTIPRESENCE_FOREIGN,
            self::FORTIPRESENCE_BOTH,
            self::FORTIPRESENCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortipresenceRogueAllowableValues()
    {
        return [
            self::FORTIPRESENCE_ROGUE_ENABLE,
            self::FORTIPRESENCE_ROGUE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortipresenceUnassocAllowableValues()
    {
        return [
            self::FORTIPRESENCE_UNASSOC_ENABLE,
            self::FORTIPRESENCE_UNASSOC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortipresenceBleAllowableValues()
    {
        return [
            self::FORTIPRESENCE_BLE_ENABLE,
            self::FORTIPRESENCE_BLE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStationLocateAllowableValues()
    {
        return [
            self::STATION_LOCATE_ENABLE,
            self::STATION_LOCATE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ekahau_blink_mode'] = $data['ekahau_blink_mode'] ?? null;
        $this->container['ekahau_tag'] = $data['ekahau_tag'] ?? null;
        $this->container['erc_server_ip'] = $data['erc_server_ip'] ?? null;
        $this->container['erc_server_port'] = $data['erc_server_port'] ?? null;
        $this->container['aeroscout'] = $data['aeroscout'] ?? null;
        $this->container['aeroscout_server_ip'] = $data['aeroscout_server_ip'] ?? null;
        $this->container['aeroscout_server_port'] = $data['aeroscout_server_port'] ?? null;
        $this->container['aeroscout_mu'] = $data['aeroscout_mu'] ?? null;
        $this->container['aeroscout_ap_mac'] = $data['aeroscout_ap_mac'] ?? null;
        $this->container['aeroscout_mmu_report'] = $data['aeroscout_mmu_report'] ?? null;
        $this->container['aeroscout_mu_factor'] = $data['aeroscout_mu_factor'] ?? null;
        $this->container['aeroscout_mu_timeout'] = $data['aeroscout_mu_timeout'] ?? null;
        $this->container['fortipresence'] = $data['fortipresence'] ?? null;
        $this->container['fortipresence_server'] = $data['fortipresence_server'] ?? null;
        $this->container['fortipresence_port'] = $data['fortipresence_port'] ?? null;
        $this->container['fortipresence_secret'] = $data['fortipresence_secret'] ?? null;
        $this->container['fortipresence_project'] = $data['fortipresence_project'] ?? null;
        $this->container['fortipresence_frequency'] = $data['fortipresence_frequency'] ?? null;
        $this->container['fortipresence_rogue'] = $data['fortipresence_rogue'] ?? null;
        $this->container['fortipresence_unassoc'] = $data['fortipresence_unassoc'] ?? null;
        $this->container['fortipresence_ble'] = $data['fortipresence_ble'] ?? null;
        $this->container['station_locate'] = $data['station_locate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEkahauBlinkModeAllowableValues();
        if (!is_null($this->container['ekahau_blink_mode']) && !in_array($this->container['ekahau_blink_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ekahau_blink_mode', must be one of '%s'",
                $this->container['ekahau_blink_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['erc_server_port']) && ($this->container['erc_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'erc_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['erc_server_port']) && ($this->container['erc_server_port'] < 1024)) {
            $invalidProperties[] = "invalid value for 'erc_server_port', must be bigger than or equal to 1024.";
        }

        $allowedValues = $this->getAeroscoutAllowableValues();
        if (!is_null($this->container['aeroscout']) && !in_array($this->container['aeroscout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aeroscout', must be one of '%s'",
                $this->container['aeroscout'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['aeroscout_server_port']) && ($this->container['aeroscout_server_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'aeroscout_server_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['aeroscout_server_port']) && ($this->container['aeroscout_server_port'] < 1024)) {
            $invalidProperties[] = "invalid value for 'aeroscout_server_port', must be bigger than or equal to 1024.";
        }

        $allowedValues = $this->getAeroscoutMuAllowableValues();
        if (!is_null($this->container['aeroscout_mu']) && !in_array($this->container['aeroscout_mu'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aeroscout_mu', must be one of '%s'",
                $this->container['aeroscout_mu'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAeroscoutApMacAllowableValues();
        if (!is_null($this->container['aeroscout_ap_mac']) && !in_array($this->container['aeroscout_ap_mac'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aeroscout_ap_mac', must be one of '%s'",
                $this->container['aeroscout_ap_mac'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAeroscoutMmuReportAllowableValues();
        if (!is_null($this->container['aeroscout_mmu_report']) && !in_array($this->container['aeroscout_mmu_report'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aeroscout_mmu_report', must be one of '%s'",
                $this->container['aeroscout_mmu_report'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['aeroscout_mu_factor']) && ($this->container['aeroscout_mu_factor'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'aeroscout_mu_factor', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['aeroscout_mu_factor']) && ($this->container['aeroscout_mu_factor'] < 0)) {
            $invalidProperties[] = "invalid value for 'aeroscout_mu_factor', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['aeroscout_mu_timeout']) && ($this->container['aeroscout_mu_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'aeroscout_mu_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['aeroscout_mu_timeout']) && ($this->container['aeroscout_mu_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'aeroscout_mu_timeout', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getFortipresenceAllowableValues();
        if (!is_null($this->container['fortipresence']) && !in_array($this->container['fortipresence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortipresence', must be one of '%s'",
                $this->container['fortipresence'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fortipresence_port']) && ($this->container['fortipresence_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fortipresence_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fortipresence_port']) && ($this->container['fortipresence_port'] < 300)) {
            $invalidProperties[] = "invalid value for 'fortipresence_port', must be bigger than or equal to 300.";
        }

        if (!is_null($this->container['fortipresence_project']) && (mb_strlen($this->container['fortipresence_project']) > 16)) {
            $invalidProperties[] = "invalid value for 'fortipresence_project', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['fortipresence_frequency']) && ($this->container['fortipresence_frequency'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fortipresence_frequency', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fortipresence_frequency']) && ($this->container['fortipresence_frequency'] < 5)) {
            $invalidProperties[] = "invalid value for 'fortipresence_frequency', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getFortipresenceRogueAllowableValues();
        if (!is_null($this->container['fortipresence_rogue']) && !in_array($this->container['fortipresence_rogue'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortipresence_rogue', must be one of '%s'",
                $this->container['fortipresence_rogue'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortipresenceUnassocAllowableValues();
        if (!is_null($this->container['fortipresence_unassoc']) && !in_array($this->container['fortipresence_unassoc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortipresence_unassoc', must be one of '%s'",
                $this->container['fortipresence_unassoc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortipresenceBleAllowableValues();
        if (!is_null($this->container['fortipresence_ble']) && !in_array($this->container['fortipresence_ble'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortipresence_ble', must be one of '%s'",
                $this->container['fortipresence_ble'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStationLocateAllowableValues();
        if (!is_null($this->container['station_locate']) && !in_array($this->container['station_locate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'station_locate', must be one of '%s'",
                $this->container['station_locate'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ekahau_blink_mode
     *
     * @return string|null
     */
    public function getEkahauBlinkMode()
    {
        return $this->container['ekahau_blink_mode'];
    }

    /**
     * Sets ekahau_blink_mode
     *
     * @param string|null $ekahau_blink_mode Enable/disable Ekahau blink mode (now known as AiRISTA Flow) to track and locate WiFi tags (default = disable).    enable:Enable Ekahau blink mode.    disable:Disable Ekahau blink mode.
     *
     * @return self
     */
    public function setEkahauBlinkMode($ekahau_blink_mode)
    {
        $allowedValues = $this->getEkahauBlinkModeAllowableValues();
        if (!is_null($ekahau_blink_mode) && !in_array($ekahau_blink_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ekahau_blink_mode', must be one of '%s'",
                    $ekahau_blink_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ekahau_blink_mode'] = $ekahau_blink_mode;

        return $this;
    }

    /**
     * Gets ekahau_tag
     *
     * @return string|null
     */
    public function getEkahauTag()
    {
        return $this->container['ekahau_tag'];
    }

    /**
     * Sets ekahau_tag
     *
     * @param string|null $ekahau_tag WiFi frame MAC address or WiFi Tag.
     *
     * @return self
     */
    public function setEkahauTag($ekahau_tag)
    {
        $this->container['ekahau_tag'] = $ekahau_tag;

        return $this;
    }

    /**
     * Gets erc_server_ip
     *
     * @return string|null
     */
    public function getErcServerIp()
    {
        return $this->container['erc_server_ip'];
    }

    /**
     * Sets erc_server_ip
     *
     * @param string|null $erc_server_ip IP address of Ekahau RTLS Controller (ERC).
     *
     * @return self
     */
    public function setErcServerIp($erc_server_ip)
    {
        $this->container['erc_server_ip'] = $erc_server_ip;

        return $this;
    }

    /**
     * Gets erc_server_port
     *
     * @return int|null
     */
    public function getErcServerPort()
    {
        return $this->container['erc_server_port'];
    }

    /**
     * Sets erc_server_port
     *
     * @param int|null $erc_server_port Ekahau RTLS Controller (ERC) UDP listening port.
     *
     * @return self
     */
    public function setErcServerPort($erc_server_port)
    {

        if (!is_null($erc_server_port) && ($erc_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $erc_server_port when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 65535.');
        }
        if (!is_null($erc_server_port) && ($erc_server_port < 1024)) {
            throw new \InvalidArgumentException('invalid value for $erc_server_port when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 1024.');
        }

        $this->container['erc_server_port'] = $erc_server_port;

        return $this;
    }

    /**
     * Gets aeroscout
     *
     * @return string|null
     */
    public function getAeroscout()
    {
        return $this->container['aeroscout'];
    }

    /**
     * Sets aeroscout
     *
     * @param string|null $aeroscout Enable/disable AeroScout Real Time Location Service (RTLS) support (default = disable).    enable:Enable AeroScout support.    disable:Disable AeroScout support.
     *
     * @return self
     */
    public function setAeroscout($aeroscout)
    {
        $allowedValues = $this->getAeroscoutAllowableValues();
        if (!is_null($aeroscout) && !in_array($aeroscout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aeroscout', must be one of '%s'",
                    $aeroscout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aeroscout'] = $aeroscout;

        return $this;
    }

    /**
     * Gets aeroscout_server_ip
     *
     * @return string|null
     */
    public function getAeroscoutServerIp()
    {
        return $this->container['aeroscout_server_ip'];
    }

    /**
     * Sets aeroscout_server_ip
     *
     * @param string|null $aeroscout_server_ip IP address of AeroScout server.
     *
     * @return self
     */
    public function setAeroscoutServerIp($aeroscout_server_ip)
    {
        $this->container['aeroscout_server_ip'] = $aeroscout_server_ip;

        return $this;
    }

    /**
     * Gets aeroscout_server_port
     *
     * @return int|null
     */
    public function getAeroscoutServerPort()
    {
        return $this->container['aeroscout_server_port'];
    }

    /**
     * Sets aeroscout_server_port
     *
     * @param int|null $aeroscout_server_port AeroScout server UDP listening port.
     *
     * @return self
     */
    public function setAeroscoutServerPort($aeroscout_server_port)
    {

        if (!is_null($aeroscout_server_port) && ($aeroscout_server_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_server_port when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 65535.');
        }
        if (!is_null($aeroscout_server_port) && ($aeroscout_server_port < 1024)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_server_port when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 1024.');
        }

        $this->container['aeroscout_server_port'] = $aeroscout_server_port;

        return $this;
    }

    /**
     * Gets aeroscout_mu
     *
     * @return string|null
     */
    public function getAeroscoutMu()
    {
        return $this->container['aeroscout_mu'];
    }

    /**
     * Sets aeroscout_mu
     *
     * @param string|null $aeroscout_mu Enable/disable AeroScout Mobile Unit (MU) support (default = disable).    enable:Enable AeroScout MU mode support.    disable:Disable AeroScout MU mode support.
     *
     * @return self
     */
    public function setAeroscoutMu($aeroscout_mu)
    {
        $allowedValues = $this->getAeroscoutMuAllowableValues();
        if (!is_null($aeroscout_mu) && !in_array($aeroscout_mu, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aeroscout_mu', must be one of '%s'",
                    $aeroscout_mu,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aeroscout_mu'] = $aeroscout_mu;

        return $this;
    }

    /**
     * Gets aeroscout_ap_mac
     *
     * @return string|null
     */
    public function getAeroscoutApMac()
    {
        return $this->container['aeroscout_ap_mac'];
    }

    /**
     * Sets aeroscout_ap_mac
     *
     * @param string|null $aeroscout_ap_mac Use BSSID or board MAC address as AP MAC address in AeroScout AP messages (default = bssid).    bssid:Use BSSID as AP MAC address in AeroScout AP messages.    board-mac:Use board MAC address as AP MAC address in AeroScout AP messages.
     *
     * @return self
     */
    public function setAeroscoutApMac($aeroscout_ap_mac)
    {
        $allowedValues = $this->getAeroscoutApMacAllowableValues();
        if (!is_null($aeroscout_ap_mac) && !in_array($aeroscout_ap_mac, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aeroscout_ap_mac', must be one of '%s'",
                    $aeroscout_ap_mac,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aeroscout_ap_mac'] = $aeroscout_ap_mac;

        return $this;
    }

    /**
     * Gets aeroscout_mmu_report
     *
     * @return string|null
     */
    public function getAeroscoutMmuReport()
    {
        return $this->container['aeroscout_mmu_report'];
    }

    /**
     * Sets aeroscout_mmu_report
     *
     * @param string|null $aeroscout_mmu_report Enable/disable compounded AeroScout tag and MU report (default = enable).    enable:Enable compounded AeroScout tag and MU report.    disable:Disable compounded AeroScout tag and MU report.
     *
     * @return self
     */
    public function setAeroscoutMmuReport($aeroscout_mmu_report)
    {
        $allowedValues = $this->getAeroscoutMmuReportAllowableValues();
        if (!is_null($aeroscout_mmu_report) && !in_array($aeroscout_mmu_report, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aeroscout_mmu_report', must be one of '%s'",
                    $aeroscout_mmu_report,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aeroscout_mmu_report'] = $aeroscout_mmu_report;

        return $this;
    }

    /**
     * Gets aeroscout_mu_factor
     *
     * @return int|null
     */
    public function getAeroscoutMuFactor()
    {
        return $this->container['aeroscout_mu_factor'];
    }

    /**
     * Sets aeroscout_mu_factor
     *
     * @param int|null $aeroscout_mu_factor AeroScout MU mode dilution factor (default = 20).
     *
     * @return self
     */
    public function setAeroscoutMuFactor($aeroscout_mu_factor)
    {

        if (!is_null($aeroscout_mu_factor) && ($aeroscout_mu_factor > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_mu_factor when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($aeroscout_mu_factor) && ($aeroscout_mu_factor < 0)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_mu_factor when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 0.');
        }

        $this->container['aeroscout_mu_factor'] = $aeroscout_mu_factor;

        return $this;
    }

    /**
     * Gets aeroscout_mu_timeout
     *
     * @return int|null
     */
    public function getAeroscoutMuTimeout()
    {
        return $this->container['aeroscout_mu_timeout'];
    }

    /**
     * Sets aeroscout_mu_timeout
     *
     * @param int|null $aeroscout_mu_timeout AeroScout MU mode timeout (0 - 65535 sec, default = 5).
     *
     * @return self
     */
    public function setAeroscoutMuTimeout($aeroscout_mu_timeout)
    {

        if (!is_null($aeroscout_mu_timeout) && ($aeroscout_mu_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_mu_timeout when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 65535.');
        }
        if (!is_null($aeroscout_mu_timeout) && ($aeroscout_mu_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $aeroscout_mu_timeout when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 0.');
        }

        $this->container['aeroscout_mu_timeout'] = $aeroscout_mu_timeout;

        return $this;
    }

    /**
     * Gets fortipresence
     *
     * @return string|null
     */
    public function getFortipresence()
    {
        return $this->container['fortipresence'];
    }

    /**
     * Sets fortipresence
     *
     * @param string|null $fortipresence Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable).    foreign:FortiPresence monitors foreign channels only. Foreign channels mean all other available channels than the current operating channel of the WTP, AP, or FortiAP.    both:Enable FortiPresence on both foreign and home channels. Select this option to have FortiPresence monitor all WiFi channels.    disable:Disable FortiPresence.
     *
     * @return self
     */
    public function setFortipresence($fortipresence)
    {
        $allowedValues = $this->getFortipresenceAllowableValues();
        if (!is_null($fortipresence) && !in_array($fortipresence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortipresence', must be one of '%s'",
                    $fortipresence,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortipresence'] = $fortipresence;

        return $this;
    }

    /**
     * Gets fortipresence_server
     *
     * @return string|null
     */
    public function getFortipresenceServer()
    {
        return $this->container['fortipresence_server'];
    }

    /**
     * Sets fortipresence_server
     *
     * @param string|null $fortipresence_server FortiPresence server IP address.
     *
     * @return self
     */
    public function setFortipresenceServer($fortipresence_server)
    {
        $this->container['fortipresence_server'] = $fortipresence_server;

        return $this;
    }

    /**
     * Gets fortipresence_port
     *
     * @return int|null
     */
    public function getFortipresencePort()
    {
        return $this->container['fortipresence_port'];
    }

    /**
     * Sets fortipresence_port
     *
     * @param int|null $fortipresence_port FortiPresence server UDP listening port (default = 3000).
     *
     * @return self
     */
    public function setFortipresencePort($fortipresence_port)
    {

        if (!is_null($fortipresence_port) && ($fortipresence_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fortipresence_port when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 65535.');
        }
        if (!is_null($fortipresence_port) && ($fortipresence_port < 300)) {
            throw new \InvalidArgumentException('invalid value for $fortipresence_port when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 300.');
        }

        $this->container['fortipresence_port'] = $fortipresence_port;

        return $this;
    }

    /**
     * Gets fortipresence_secret
     *
     * @return string|null
     */
    public function getFortipresenceSecret()
    {
        return $this->container['fortipresence_secret'];
    }

    /**
     * Sets fortipresence_secret
     *
     * @param string|null $fortipresence_secret FortiPresence secret password (max. 16 characters).
     *
     * @return self
     */
    public function setFortipresenceSecret($fortipresence_secret)
    {
        $this->container['fortipresence_secret'] = $fortipresence_secret;

        return $this;
    }

    /**
     * Gets fortipresence_project
     *
     * @return string|null
     */
    public function getFortipresenceProject()
    {
        return $this->container['fortipresence_project'];
    }

    /**
     * Sets fortipresence_project
     *
     * @param string|null $fortipresence_project FortiPresence project name (max. 16 characters, default = fortipresence).
     *
     * @return self
     */
    public function setFortipresenceProject($fortipresence_project)
    {
        if (!is_null($fortipresence_project) && (mb_strlen($fortipresence_project) > 16)) {
            throw new \InvalidArgumentException('invalid length for $fortipresence_project when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 16.');
        }

        $this->container['fortipresence_project'] = $fortipresence_project;

        return $this;
    }

    /**
     * Gets fortipresence_frequency
     *
     * @return int|null
     */
    public function getFortipresenceFrequency()
    {
        return $this->container['fortipresence_frequency'];
    }

    /**
     * Sets fortipresence_frequency
     *
     * @param int|null $fortipresence_frequency FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
     *
     * @return self
     */
    public function setFortipresenceFrequency($fortipresence_frequency)
    {

        if (!is_null($fortipresence_frequency) && ($fortipresence_frequency > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fortipresence_frequency when calling WirelessControllerWtpProfileNameLbs., must be smaller than or equal to 65535.');
        }
        if (!is_null($fortipresence_frequency) && ($fortipresence_frequency < 5)) {
            throw new \InvalidArgumentException('invalid value for $fortipresence_frequency when calling WirelessControllerWtpProfileNameLbs., must be bigger than or equal to 5.');
        }

        $this->container['fortipresence_frequency'] = $fortipresence_frequency;

        return $this;
    }

    /**
     * Gets fortipresence_rogue
     *
     * @return string|null
     */
    public function getFortipresenceRogue()
    {
        return $this->container['fortipresence_rogue'];
    }

    /**
     * Sets fortipresence_rogue
     *
     * @param string|null $fortipresence_rogue Enable/disable FortiPresence finding and reporting rogue APs.    enable:Enable FortiPresence finding and reporting rogue APs.    disable:Disable FortiPresence finding and reporting rogue APs.
     *
     * @return self
     */
    public function setFortipresenceRogue($fortipresence_rogue)
    {
        $allowedValues = $this->getFortipresenceRogueAllowableValues();
        if (!is_null($fortipresence_rogue) && !in_array($fortipresence_rogue, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortipresence_rogue', must be one of '%s'",
                    $fortipresence_rogue,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortipresence_rogue'] = $fortipresence_rogue;

        return $this;
    }

    /**
     * Gets fortipresence_unassoc
     *
     * @return string|null
     */
    public function getFortipresenceUnassoc()
    {
        return $this->container['fortipresence_unassoc'];
    }

    /**
     * Sets fortipresence_unassoc
     *
     * @param string|null $fortipresence_unassoc Enable/disable FortiPresence finding and reporting unassociated stations.    enable:Enable FortiPresence finding and reporting unassociated stations.    disable:Disable FortiPresence finding and reporting unassociated stations.
     *
     * @return self
     */
    public function setFortipresenceUnassoc($fortipresence_unassoc)
    {
        $allowedValues = $this->getFortipresenceUnassocAllowableValues();
        if (!is_null($fortipresence_unassoc) && !in_array($fortipresence_unassoc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortipresence_unassoc', must be one of '%s'",
                    $fortipresence_unassoc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortipresence_unassoc'] = $fortipresence_unassoc;

        return $this;
    }

    /**
     * Gets fortipresence_ble
     *
     * @return string|null
     */
    public function getFortipresenceBle()
    {
        return $this->container['fortipresence_ble'];
    }

    /**
     * Sets fortipresence_ble
     *
     * @param string|null $fortipresence_ble Enable/disable FortiPresence finding and reporting BLE devices.    enable:Enable FortiPresence finding and reporting BLE devices.    disable:Disable FortiPresence finding and reporting BLE devices.
     *
     * @return self
     */
    public function setFortipresenceBle($fortipresence_ble)
    {
        $allowedValues = $this->getFortipresenceBleAllowableValues();
        if (!is_null($fortipresence_ble) && !in_array($fortipresence_ble, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortipresence_ble', must be one of '%s'",
                    $fortipresence_ble,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortipresence_ble'] = $fortipresence_ble;

        return $this;
    }

    /**
     * Gets station_locate
     *
     * @return string|null
     */
    public function getStationLocate()
    {
        return $this->container['station_locate'];
    }

    /**
     * Sets station_locate
     *
     * @param string|null $station_locate Enable/disable client station locating services for all clients, whether associated or not (default = disable).    enable:Enable station locating service.    disable:Disable station locating service.
     *
     * @return self
     */
    public function setStationLocate($station_locate)
    {
        $allowedValues = $this->getStationLocateAllowableValues();
        if (!is_null($station_locate) && !in_array($station_locate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'station_locate', must be one of '%s'",
                    $station_locate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['station_locate'] = $station_locate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


