<?php
/**
 * InlineObject58
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject58 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject58 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_58';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'fortinetone_cloud_authentication' => 'string',
        'server' => 'string',
        'https_port' => 'int',
        'source_ip' => 'string',
        'pull_sysinfo' => 'string',
        'pull_vulnerabilities' => 'string',
        'pull_avatars' => 'string',
        'pull_tags' => 'string',
        'cloud_server_type' => 'string',
        'call_timeout' => 'int',
        'status_check_interval' => 'int',
        'certificate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'fortinetone_cloud_authentication' => null,
        'server' => null,
        'https_port' => null,
        'source_ip' => 'ipv4',
        'pull_sysinfo' => null,
        'pull_vulnerabilities' => null,
        'pull_avatars' => null,
        'pull_tags' => null,
        'cloud_server_type' => null,
        'call_timeout' => null,
        'status_check_interval' => null,
        'certificate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'fortinetone_cloud_authentication' => 'fortinetone-cloud-authentication',
        'server' => 'server',
        'https_port' => 'https-port',
        'source_ip' => 'source-ip',
        'pull_sysinfo' => 'pull-sysinfo',
        'pull_vulnerabilities' => 'pull-vulnerabilities',
        'pull_avatars' => 'pull-avatars',
        'pull_tags' => 'pull-tags',
        'cloud_server_type' => 'cloud-server-type',
        'call_timeout' => 'call-timeout',
        'status_check_interval' => 'status-check-interval',
        'certificate' => 'certificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'fortinetone_cloud_authentication' => 'setFortinetoneCloudAuthentication',
        'server' => 'setServer',
        'https_port' => 'setHttpsPort',
        'source_ip' => 'setSourceIp',
        'pull_sysinfo' => 'setPullSysinfo',
        'pull_vulnerabilities' => 'setPullVulnerabilities',
        'pull_avatars' => 'setPullAvatars',
        'pull_tags' => 'setPullTags',
        'cloud_server_type' => 'setCloudServerType',
        'call_timeout' => 'setCallTimeout',
        'status_check_interval' => 'setStatusCheckInterval',
        'certificate' => 'setCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'fortinetone_cloud_authentication' => 'getFortinetoneCloudAuthentication',
        'server' => 'getServer',
        'https_port' => 'getHttpsPort',
        'source_ip' => 'getSourceIp',
        'pull_sysinfo' => 'getPullSysinfo',
        'pull_vulnerabilities' => 'getPullVulnerabilities',
        'pull_avatars' => 'getPullAvatars',
        'pull_tags' => 'getPullTags',
        'cloud_server_type' => 'getCloudServerType',
        'call_timeout' => 'getCallTimeout',
        'status_check_interval' => 'getStatusCheckInterval',
        'certificate' => 'getCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FORTINETONE_CLOUD_AUTHENTICATION_ENABLE = 'enable';
    const FORTINETONE_CLOUD_AUTHENTICATION_DISABLE = 'disable';
    const PULL_SYSINFO_ENABLE = 'enable';
    const PULL_SYSINFO_DISABLE = 'disable';
    const PULL_VULNERABILITIES_ENABLE = 'enable';
    const PULL_VULNERABILITIES_DISABLE = 'disable';
    const PULL_AVATARS_ENABLE = 'enable';
    const PULL_AVATARS_DISABLE = 'disable';
    const PULL_TAGS_ENABLE = 'enable';
    const PULL_TAGS_DISABLE = 'disable';
    const CLOUD_SERVER_TYPE_PRODUCTION = 'production';
    const CLOUD_SERVER_TYPE_ALPHA = 'alpha';
    const CLOUD_SERVER_TYPE_BETA = 'beta';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortinetoneCloudAuthenticationAllowableValues()
    {
        return [
            self::FORTINETONE_CLOUD_AUTHENTICATION_ENABLE,
            self::FORTINETONE_CLOUD_AUTHENTICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullSysinfoAllowableValues()
    {
        return [
            self::PULL_SYSINFO_ENABLE,
            self::PULL_SYSINFO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullVulnerabilitiesAllowableValues()
    {
        return [
            self::PULL_VULNERABILITIES_ENABLE,
            self::PULL_VULNERABILITIES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullAvatarsAllowableValues()
    {
        return [
            self::PULL_AVATARS_ENABLE,
            self::PULL_AVATARS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullTagsAllowableValues()
    {
        return [
            self::PULL_TAGS_ENABLE,
            self::PULL_TAGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloudServerTypeAllowableValues()
    {
        return [
            self::CLOUD_SERVER_TYPE_PRODUCTION,
            self::CLOUD_SERVER_TYPE_ALPHA,
            self::CLOUD_SERVER_TYPE_BETA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['fortinetone_cloud_authentication'] = $data['fortinetone_cloud_authentication'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['https_port'] = $data['https_port'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
        $this->container['pull_sysinfo'] = $data['pull_sysinfo'] ?? null;
        $this->container['pull_vulnerabilities'] = $data['pull_vulnerabilities'] ?? null;
        $this->container['pull_avatars'] = $data['pull_avatars'] ?? null;
        $this->container['pull_tags'] = $data['pull_tags'] ?? null;
        $this->container['cloud_server_type'] = $data['cloud_server_type'] ?? null;
        $this->container['call_timeout'] = $data['call_timeout'] ?? null;
        $this->container['status_check_interval'] = $data['status_check_interval'] ?? null;
        $this->container['certificate'] = $data['certificate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getFortinetoneCloudAuthenticationAllowableValues();
        if (!is_null($this->container['fortinetone_cloud_authentication']) && !in_array($this->container['fortinetone_cloud_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortinetone_cloud_authentication', must be one of '%s'",
                $this->container['fortinetone_cloud_authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 255)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['https_port']) && ($this->container['https_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'https_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['https_port']) && ($this->container['https_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'https_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPullSysinfoAllowableValues();
        if (!is_null($this->container['pull_sysinfo']) && !in_array($this->container['pull_sysinfo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_sysinfo', must be one of '%s'",
                $this->container['pull_sysinfo'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPullVulnerabilitiesAllowableValues();
        if (!is_null($this->container['pull_vulnerabilities']) && !in_array($this->container['pull_vulnerabilities'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_vulnerabilities', must be one of '%s'",
                $this->container['pull_vulnerabilities'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPullAvatarsAllowableValues();
        if (!is_null($this->container['pull_avatars']) && !in_array($this->container['pull_avatars'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_avatars', must be one of '%s'",
                $this->container['pull_avatars'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPullTagsAllowableValues();
        if (!is_null($this->container['pull_tags']) && !in_array($this->container['pull_tags'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_tags', must be one of '%s'",
                $this->container['pull_tags'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCloudServerTypeAllowableValues();
        if (!is_null($this->container['cloud_server_type']) && !in_array($this->container['cloud_server_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cloud_server_type', must be one of '%s'",
                $this->container['cloud_server_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['call_timeout']) && ($this->container['call_timeout'] > 180)) {
            $invalidProperties[] = "invalid value for 'call_timeout', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['call_timeout']) && ($this->container['call_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'call_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['status_check_interval']) && ($this->container['status_check_interval'] > 180)) {
            $invalidProperties[] = "invalid value for 'status_check_interval', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['status_check_interval']) && ($this->container['status_check_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'status_check_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['certificate']) && (mb_strlen($this->container['certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'certificate', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name FortiClient Enterprise Management Server (EMS) name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject58., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fortinetone_cloud_authentication
     *
     * @return string|null
     */
    public function getFortinetoneCloudAuthentication()
    {
        return $this->container['fortinetone_cloud_authentication'];
    }

    /**
     * Sets fortinetone_cloud_authentication
     *
     * @param string|null $fortinetone_cloud_authentication Enable/disable authentication of FortiClient EMS Cloud through FortiCloud account.    enable:Enable authentication of FortiClient EMS Cloud through the use of FortiCloud account.    disable:Disable authentication of FortiClient EMS Cloud through the use of FortiCloud account.
     *
     * @return self
     */
    public function setFortinetoneCloudAuthentication($fortinetone_cloud_authentication)
    {
        $allowedValues = $this->getFortinetoneCloudAuthenticationAllowableValues();
        if (!is_null($fortinetone_cloud_authentication) && !in_array($fortinetone_cloud_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortinetone_cloud_authentication', must be one of '%s'",
                    $fortinetone_cloud_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortinetone_cloud_authentication'] = $fortinetone_cloud_authentication;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server FortiClient EMS FQDN or IPv4 address.
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 255)) {
            throw new \InvalidArgumentException('invalid length for $server when calling InlineObject58., must be smaller than or equal to 255.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets https_port
     *
     * @return int|null
     */
    public function getHttpsPort()
    {
        return $this->container['https_port'];
    }

    /**
     * Sets https_port
     *
     * @param int|null $https_port FortiClient EMS HTTPS access port number. (1 - 65535, default: 443).
     *
     * @return self
     */
    public function setHttpsPort($https_port)
    {

        if (!is_null($https_port) && ($https_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $https_port when calling InlineObject58., must be smaller than or equal to 65535.');
        }
        if (!is_null($https_port) && ($https_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $https_port when calling InlineObject58., must be bigger than or equal to 1.');
        }

        $this->container['https_port'] = $https_port;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip REST API call source IP.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets pull_sysinfo
     *
     * @return string|null
     */
    public function getPullSysinfo()
    {
        return $this->container['pull_sysinfo'];
    }

    /**
     * Sets pull_sysinfo
     *
     * @param string|null $pull_sysinfo Enable/disable pulling SysInfo from EMS.    enable:Enable pulling FortiClient user SysInfo from EMS.    disable:Disable pulling FortiClient user SysInfo from EMS.
     *
     * @return self
     */
    public function setPullSysinfo($pull_sysinfo)
    {
        $allowedValues = $this->getPullSysinfoAllowableValues();
        if (!is_null($pull_sysinfo) && !in_array($pull_sysinfo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_sysinfo', must be one of '%s'",
                    $pull_sysinfo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_sysinfo'] = $pull_sysinfo;

        return $this;
    }

    /**
     * Gets pull_vulnerabilities
     *
     * @return string|null
     */
    public function getPullVulnerabilities()
    {
        return $this->container['pull_vulnerabilities'];
    }

    /**
     * Sets pull_vulnerabilities
     *
     * @param string|null $pull_vulnerabilities Enable/disable pulling vulnerabilities from EMS.    enable:Enable pulling client vulnerabilities from EMS.    disable:Disable pulling client vulnerabilities from from EMS.
     *
     * @return self
     */
    public function setPullVulnerabilities($pull_vulnerabilities)
    {
        $allowedValues = $this->getPullVulnerabilitiesAllowableValues();
        if (!is_null($pull_vulnerabilities) && !in_array($pull_vulnerabilities, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_vulnerabilities', must be one of '%s'",
                    $pull_vulnerabilities,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_vulnerabilities'] = $pull_vulnerabilities;

        return $this;
    }

    /**
     * Gets pull_avatars
     *
     * @return string|null
     */
    public function getPullAvatars()
    {
        return $this->container['pull_avatars'];
    }

    /**
     * Sets pull_avatars
     *
     * @param string|null $pull_avatars Enable/disable pulling avatars from EMS.    enable:Enable pulling FortiClient user avatars from EMS.    disable:Disable pulling FortiClient user avatars from EMS.
     *
     * @return self
     */
    public function setPullAvatars($pull_avatars)
    {
        $allowedValues = $this->getPullAvatarsAllowableValues();
        if (!is_null($pull_avatars) && !in_array($pull_avatars, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_avatars', must be one of '%s'",
                    $pull_avatars,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_avatars'] = $pull_avatars;

        return $this;
    }

    /**
     * Gets pull_tags
     *
     * @return string|null
     */
    public function getPullTags()
    {
        return $this->container['pull_tags'];
    }

    /**
     * Sets pull_tags
     *
     * @param string|null $pull_tags Enable/disable pulling FortiClient user tags from EMS.    enable:Enable pulling FortiClient user tags from EMS.    disable:Disable pulling FortiClient user tags from EMS.
     *
     * @return self
     */
    public function setPullTags($pull_tags)
    {
        $allowedValues = $this->getPullTagsAllowableValues();
        if (!is_null($pull_tags) && !in_array($pull_tags, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_tags', must be one of '%s'",
                    $pull_tags,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_tags'] = $pull_tags;

        return $this;
    }

    /**
     * Gets cloud_server_type
     *
     * @return string|null
     */
    public function getCloudServerType()
    {
        return $this->container['cloud_server_type'];
    }

    /**
     * Sets cloud_server_type
     *
     * @param string|null $cloud_server_type Cloud server type.    production:Production FortiClient EMS Cloud Controller.    alpha:Alpha FortiClient EMS Cloud Controller.    beta:Beta FortiClient EMS Cloud Controller.
     *
     * @return self
     */
    public function setCloudServerType($cloud_server_type)
    {
        $allowedValues = $this->getCloudServerTypeAllowableValues();
        if (!is_null($cloud_server_type) && !in_array($cloud_server_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cloud_server_type', must be one of '%s'",
                    $cloud_server_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cloud_server_type'] = $cloud_server_type;

        return $this;
    }

    /**
     * Gets call_timeout
     *
     * @return int|null
     */
    public function getCallTimeout()
    {
        return $this->container['call_timeout'];
    }

    /**
     * Sets call_timeout
     *
     * @param int|null $call_timeout FortiClient EMS call timeout in seconds (1 - 180 seconds, default = 30).
     *
     * @return self
     */
    public function setCallTimeout($call_timeout)
    {

        if (!is_null($call_timeout) && ($call_timeout > 180)) {
            throw new \InvalidArgumentException('invalid value for $call_timeout when calling InlineObject58., must be smaller than or equal to 180.');
        }
        if (!is_null($call_timeout) && ($call_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $call_timeout when calling InlineObject58., must be bigger than or equal to 1.');
        }

        $this->container['call_timeout'] = $call_timeout;

        return $this;
    }

    /**
     * Gets status_check_interval
     *
     * @return int|null
     */
    public function getStatusCheckInterval()
    {
        return $this->container['status_check_interval'];
    }

    /**
     * Sets status_check_interval
     *
     * @param int|null $status_check_interval FortiClient EMS call timeout in seconds (1 - 120 seconds, default = 5).
     *
     * @return self
     */
    public function setStatusCheckInterval($status_check_interval)
    {

        if (!is_null($status_check_interval) && ($status_check_interval > 180)) {
            throw new \InvalidArgumentException('invalid value for $status_check_interval when calling InlineObject58., must be smaller than or equal to 180.');
        }
        if (!is_null($status_check_interval) && ($status_check_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $status_check_interval when calling InlineObject58., must be bigger than or equal to 1.');
        }

        $this->container['status_check_interval'] = $status_check_interval;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate FortiClient EMS certificate.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (!is_null($certificate) && (mb_strlen($certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $certificate when calling InlineObject58., must be smaller than or equal to 35.');
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


