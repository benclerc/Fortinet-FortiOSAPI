<?php
/**
 * ReportChartNameYSeries
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportChartNameYSeries Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportChartNameYSeries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_chart__name__y_series';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'databind' => 'string',
        'caption' => 'string',
        'caption_font_size' => 'int',
        'font_size' => 'int',
        'label_angle' => 'string',
        'group' => 'string',
        'unit' => 'string',
        'extra_y' => 'string',
        'extra_databind' => 'string',
        'y_legend' => 'string',
        'extra_y_legend' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'databind' => null,
        'caption' => null,
        'caption_font_size' => null,
        'font_size' => null,
        'label_angle' => null,
        'group' => null,
        'unit' => null,
        'extra_y' => null,
        'extra_databind' => null,
        'y_legend' => null,
        'extra_y_legend' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'databind' => 'databind',
        'caption' => 'caption',
        'caption_font_size' => 'caption-font-size',
        'font_size' => 'font-size',
        'label_angle' => 'label-angle',
        'group' => 'group',
        'unit' => 'unit',
        'extra_y' => 'extra-y',
        'extra_databind' => 'extra-databind',
        'y_legend' => 'y-legend',
        'extra_y_legend' => 'extra-y-legend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'databind' => 'setDatabind',
        'caption' => 'setCaption',
        'caption_font_size' => 'setCaptionFontSize',
        'font_size' => 'setFontSize',
        'label_angle' => 'setLabelAngle',
        'group' => 'setGroup',
        'unit' => 'setUnit',
        'extra_y' => 'setExtraY',
        'extra_databind' => 'setExtraDatabind',
        'y_legend' => 'setYLegend',
        'extra_y_legend' => 'setExtraYLegend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'databind' => 'getDatabind',
        'caption' => 'getCaption',
        'caption_font_size' => 'getCaptionFontSize',
        'font_size' => 'getFontSize',
        'label_angle' => 'getLabelAngle',
        'group' => 'getGroup',
        'unit' => 'getUnit',
        'extra_y' => 'getExtraY',
        'extra_databind' => 'getExtraDatabind',
        'y_legend' => 'getYLegend',
        'extra_y_legend' => 'getExtraYLegend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LABEL_ANGLE__45_DEGREE = '45-degree';
    const LABEL_ANGLE_VERTICAL = 'vertical';
    const LABEL_ANGLE_HORIZONTAL = 'horizontal';
    const EXTRA_Y_ENABLE = 'enable';
    const EXTRA_Y_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAngleAllowableValues()
    {
        return [
            self::LABEL_ANGLE__45_DEGREE,
            self::LABEL_ANGLE_VERTICAL,
            self::LABEL_ANGLE_HORIZONTAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtraYAllowableValues()
    {
        return [
            self::EXTRA_Y_ENABLE,
            self::EXTRA_Y_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['databind'] = $data['databind'] ?? null;
        $this->container['caption'] = $data['caption'] ?? null;
        $this->container['caption_font_size'] = $data['caption_font_size'] ?? null;
        $this->container['font_size'] = $data['font_size'] ?? null;
        $this->container['label_angle'] = $data['label_angle'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['extra_y'] = $data['extra_y'] ?? null;
        $this->container['extra_databind'] = $data['extra_databind'] ?? null;
        $this->container['y_legend'] = $data['y_legend'] ?? null;
        $this->container['extra_y_legend'] = $data['extra_y_legend'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['databind']) && (mb_strlen($this->container['databind']) > 127)) {
            $invalidProperties[] = "invalid value for 'databind', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['caption']) && (mb_strlen($this->container['caption']) > 35)) {
            $invalidProperties[] = "invalid value for 'caption', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['caption_font_size']) && ($this->container['caption_font_size'] > 20)) {
            $invalidProperties[] = "invalid value for 'caption_font_size', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['caption_font_size']) && ($this->container['caption_font_size'] < 5)) {
            $invalidProperties[] = "invalid value for 'caption_font_size', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['font_size']) && ($this->container['font_size'] > 20)) {
            $invalidProperties[] = "invalid value for 'font_size', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['font_size']) && ($this->container['font_size'] < 5)) {
            $invalidProperties[] = "invalid value for 'font_size', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getLabelAngleAllowableValues();
        if (!is_null($this->container['label_angle']) && !in_array($this->container['label_angle'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label_angle', must be one of '%s'",
                $this->container['label_angle'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['group']) && (mb_strlen($this->container['group']) > 127)) {
            $invalidProperties[] = "invalid value for 'group', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 35)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getExtraYAllowableValues();
        if (!is_null($this->container['extra_y']) && !in_array($this->container['extra_y'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extra_y', must be one of '%s'",
                $this->container['extra_y'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['extra_databind']) && (mb_strlen($this->container['extra_databind']) > 127)) {
            $invalidProperties[] = "invalid value for 'extra_databind', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['y_legend']) && (mb_strlen($this->container['y_legend']) > 35)) {
            $invalidProperties[] = "invalid value for 'y_legend', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['extra_y_legend']) && (mb_strlen($this->container['extra_y_legend']) > 35)) {
            $invalidProperties[] = "invalid value for 'extra_y_legend', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets databind
     *
     * @return string|null
     */
    public function getDatabind()
    {
        return $this->container['databind'];
    }

    /**
     * Sets databind
     *
     * @param string|null $databind Y-series value expression.
     *
     * @return self
     */
    public function setDatabind($databind)
    {
        if (!is_null($databind) && (mb_strlen($databind) > 127)) {
            throw new \InvalidArgumentException('invalid length for $databind when calling ReportChartNameYSeries., must be smaller than or equal to 127.');
        }

        $this->container['databind'] = $databind;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Y-series caption.
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (!is_null($caption) && (mb_strlen($caption) > 35)) {
            throw new \InvalidArgumentException('invalid length for $caption when calling ReportChartNameYSeries., must be smaller than or equal to 35.');
        }

        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets caption_font_size
     *
     * @return int|null
     */
    public function getCaptionFontSize()
    {
        return $this->container['caption_font_size'];
    }

    /**
     * Sets caption_font_size
     *
     * @param int|null $caption_font_size Y-series caption font size.
     *
     * @return self
     */
    public function setCaptionFontSize($caption_font_size)
    {

        if (!is_null($caption_font_size) && ($caption_font_size > 20)) {
            throw new \InvalidArgumentException('invalid value for $caption_font_size when calling ReportChartNameYSeries., must be smaller than or equal to 20.');
        }
        if (!is_null($caption_font_size) && ($caption_font_size < 5)) {
            throw new \InvalidArgumentException('invalid value for $caption_font_size when calling ReportChartNameYSeries., must be bigger than or equal to 5.');
        }

        $this->container['caption_font_size'] = $caption_font_size;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return int|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param int|null $font_size Y-series label font size.
     *
     * @return self
     */
    public function setFontSize($font_size)
    {

        if (!is_null($font_size) && ($font_size > 20)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling ReportChartNameYSeries., must be smaller than or equal to 20.');
        }
        if (!is_null($font_size) && ($font_size < 5)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling ReportChartNameYSeries., must be bigger than or equal to 5.');
        }

        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets label_angle
     *
     * @return string|null
     */
    public function getLabelAngle()
    {
        return $this->container['label_angle'];
    }

    /**
     * Sets label_angle
     *
     * @param string|null $label_angle Y-series label angle.    45-degree:45-degree.    vertical:Vertical.    horizontal:Horizontal.
     *
     * @return self
     */
    public function setLabelAngle($label_angle)
    {
        $allowedValues = $this->getLabelAngleAllowableValues();
        if (!is_null($label_angle) && !in_array($label_angle, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label_angle', must be one of '%s'",
                    $label_angle,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_angle'] = $label_angle;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group Y-series group option.
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (!is_null($group) && (mb_strlen($group) > 127)) {
            throw new \InvalidArgumentException('invalid length for $group when calling ReportChartNameYSeries., must be smaller than or equal to 127.');
        }

        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit Y-series unit.
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 35)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling ReportChartNameYSeries., must be smaller than or equal to 35.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets extra_y
     *
     * @return string|null
     */
    public function getExtraY()
    {
        return $this->container['extra_y'];
    }

    /**
     * Sets extra_y
     *
     * @param string|null $extra_y Allow another Y-series value    enable:Enable second Y-series.    disable:Disable second Y-series.
     *
     * @return self
     */
    public function setExtraY($extra_y)
    {
        $allowedValues = $this->getExtraYAllowableValues();
        if (!is_null($extra_y) && !in_array($extra_y, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extra_y', must be one of '%s'",
                    $extra_y,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extra_y'] = $extra_y;

        return $this;
    }

    /**
     * Gets extra_databind
     *
     * @return string|null
     */
    public function getExtraDatabind()
    {
        return $this->container['extra_databind'];
    }

    /**
     * Sets extra_databind
     *
     * @param string|null $extra_databind Extra Y-series value.
     *
     * @return self
     */
    public function setExtraDatabind($extra_databind)
    {
        if (!is_null($extra_databind) && (mb_strlen($extra_databind) > 127)) {
            throw new \InvalidArgumentException('invalid length for $extra_databind when calling ReportChartNameYSeries., must be smaller than or equal to 127.');
        }

        $this->container['extra_databind'] = $extra_databind;

        return $this;
    }

    /**
     * Gets y_legend
     *
     * @return string|null
     */
    public function getYLegend()
    {
        return $this->container['y_legend'];
    }

    /**
     * Sets y_legend
     *
     * @param string|null $y_legend First Y-series legend type/name.
     *
     * @return self
     */
    public function setYLegend($y_legend)
    {
        if (!is_null($y_legend) && (mb_strlen($y_legend) > 35)) {
            throw new \InvalidArgumentException('invalid length for $y_legend when calling ReportChartNameYSeries., must be smaller than or equal to 35.');
        }

        $this->container['y_legend'] = $y_legend;

        return $this;
    }

    /**
     * Gets extra_y_legend
     *
     * @return string|null
     */
    public function getExtraYLegend()
    {
        return $this->container['extra_y_legend'];
    }

    /**
     * Sets extra_y_legend
     *
     * @param string|null $extra_y_legend Extra Y-series legend type/name.
     *
     * @return self
     */
    public function setExtraYLegend($extra_y_legend)
    {
        if (!is_null($extra_y_legend) && (mb_strlen($extra_y_legend) > 35)) {
            throw new \InvalidArgumentException('invalid length for $extra_y_legend when calling ReportChartNameYSeries., must be smaller than or equal to 35.');
        }

        $this->container['extra_y_legend'] = $extra_y_legend;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


