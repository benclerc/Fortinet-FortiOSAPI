<?php
/**
 * VpnOcvpnOverlays
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * VpnOcvpnOverlays Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VpnOcvpnOverlays implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_vpn_ocvpn_overlays';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'overlay_name' => 'string',
        'inter_overlay' => 'string',
        'assign_ip' => 'string',
        'ipv4_start_ip' => 'string',
        'ipv4_end_ip' => 'string',
        'subnets' => '\Fortigate\FortiOS\Model\CMDB\VpnOcvpnSubnets[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'overlay_name' => null,
        'inter_overlay' => null,
        'assign_ip' => null,
        'ipv4_start_ip' => 'ipv4',
        'ipv4_end_ip' => 'ipv4',
        'subnets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overlay_name' => 'overlay-name',
        'inter_overlay' => 'inter-overlay',
        'assign_ip' => 'assign-ip',
        'ipv4_start_ip' => 'ipv4-start-ip',
        'ipv4_end_ip' => 'ipv4-end-ip',
        'subnets' => 'subnets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overlay_name' => 'setOverlayName',
        'inter_overlay' => 'setInterOverlay',
        'assign_ip' => 'setAssignIp',
        'ipv4_start_ip' => 'setIpv4StartIp',
        'ipv4_end_ip' => 'setIpv4EndIp',
        'subnets' => 'setSubnets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overlay_name' => 'getOverlayName',
        'inter_overlay' => 'getInterOverlay',
        'assign_ip' => 'getAssignIp',
        'ipv4_start_ip' => 'getIpv4StartIp',
        'ipv4_end_ip' => 'getIpv4EndIp',
        'subnets' => 'getSubnets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INTER_OVERLAY_ALLOW = 'allow';
    const INTER_OVERLAY_DENY = 'deny';
    const ASSIGN_IP_ENABLE = 'enable';
    const ASSIGN_IP_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterOverlayAllowableValues()
    {
        return [
            self::INTER_OVERLAY_ALLOW,
            self::INTER_OVERLAY_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssignIpAllowableValues()
    {
        return [
            self::ASSIGN_IP_ENABLE,
            self::ASSIGN_IP_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overlay_name'] = $data['overlay_name'] ?? null;
        $this->container['inter_overlay'] = $data['inter_overlay'] ?? null;
        $this->container['assign_ip'] = $data['assign_ip'] ?? null;
        $this->container['ipv4_start_ip'] = $data['ipv4_start_ip'] ?? null;
        $this->container['ipv4_end_ip'] = $data['ipv4_end_ip'] ?? null;
        $this->container['subnets'] = $data['subnets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['overlay_name']) && (mb_strlen($this->container['overlay_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'overlay_name', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getInterOverlayAllowableValues();
        if (!is_null($this->container['inter_overlay']) && !in_array($this->container['inter_overlay'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inter_overlay', must be one of '%s'",
                $this->container['inter_overlay'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAssignIpAllowableValues();
        if (!is_null($this->container['assign_ip']) && !in_array($this->container['assign_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assign_ip', must be one of '%s'",
                $this->container['assign_ip'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['subnets']) && (count($this->container['subnets']) > 64)) {
            $invalidProperties[] = "invalid value for 'subnets', number of items must be less than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overlay_name
     *
     * @return string|null
     */
    public function getOverlayName()
    {
        return $this->container['overlay_name'];
    }

    /**
     * Sets overlay_name
     *
     * @param string|null $overlay_name Overlay name.
     *
     * @return self
     */
    public function setOverlayName($overlay_name)
    {
        if (!is_null($overlay_name) && (mb_strlen($overlay_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $overlay_name when calling VpnOcvpnOverlays., must be smaller than or equal to 63.');
        }

        $this->container['overlay_name'] = $overlay_name;

        return $this;
    }

    /**
     * Gets inter_overlay
     *
     * @return string|null
     */
    public function getInterOverlay()
    {
        return $this->container['inter_overlay'];
    }

    /**
     * Sets inter_overlay
     *
     * @param string|null $inter_overlay Allow or deny traffic from other overlays.    allow:Allow traffic from other overlays.    deny:Deny traffic from other overlays.
     *
     * @return self
     */
    public function setInterOverlay($inter_overlay)
    {
        $allowedValues = $this->getInterOverlayAllowableValues();
        if (!is_null($inter_overlay) && !in_array($inter_overlay, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inter_overlay', must be one of '%s'",
                    $inter_overlay,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inter_overlay'] = $inter_overlay;

        return $this;
    }

    /**
     * Gets assign_ip
     *
     * @return string|null
     */
    public function getAssignIp()
    {
        return $this->container['assign_ip'];
    }

    /**
     * Sets assign_ip
     *
     * @param string|null $assign_ip Enable/disable mode-cfg address assignment.    enable:Enable client IPv4 address assignment.    disable:Disable client IPv4 address assignment.
     *
     * @return self
     */
    public function setAssignIp($assign_ip)
    {
        $allowedValues = $this->getAssignIpAllowableValues();
        if (!is_null($assign_ip) && !in_array($assign_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assign_ip', must be one of '%s'",
                    $assign_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assign_ip'] = $assign_ip;

        return $this;
    }

    /**
     * Gets ipv4_start_ip
     *
     * @return string|null
     */
    public function getIpv4StartIp()
    {
        return $this->container['ipv4_start_ip'];
    }

    /**
     * Sets ipv4_start_ip
     *
     * @param string|null $ipv4_start_ip Start of IPv4 range.
     *
     * @return self
     */
    public function setIpv4StartIp($ipv4_start_ip)
    {
        $this->container['ipv4_start_ip'] = $ipv4_start_ip;

        return $this;
    }

    /**
     * Gets ipv4_end_ip
     *
     * @return string|null
     */
    public function getIpv4EndIp()
    {
        return $this->container['ipv4_end_ip'];
    }

    /**
     * Sets ipv4_end_ip
     *
     * @param string|null $ipv4_end_ip End of IPv4 range.
     *
     * @return self
     */
    public function setIpv4EndIp($ipv4_end_ip)
    {
        $this->container['ipv4_end_ip'] = $ipv4_end_ip;

        return $this;
    }

    /**
     * Gets subnets
     *
     * @return \Fortigate\FortiOS\Model\CMDB\VpnOcvpnSubnets[]|null
     */
    public function getSubnets()
    {
        return $this->container['subnets'];
    }

    /**
     * Sets subnets
     *
     * @param \Fortigate\FortiOS\Model\CMDB\VpnOcvpnSubnets[]|null $subnets Internal subnets to register with OCVPN service.
     *
     * @return self
     */
    public function setSubnets($subnets)
    {

        if (!is_null($subnets) && (count($subnets) > 64)) {
            throw new \InvalidArgumentException('invalid value for $subnets when calling VpnOcvpnOverlays., number of items must be less than or equal to 64.');
        }
        $this->container['subnets'] = $subnets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


