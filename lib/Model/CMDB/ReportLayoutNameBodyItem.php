<?php
/**
 * ReportLayoutNameBodyItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * ReportLayoutNameBodyItem Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportLayoutNameBodyItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_report_layout__name__body_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'type' => 'string',
        'style' => 'string',
        'top_n' => 'int',
        'hide' => 'string',
        'parameters' => '\Fortigate\FortiOS\Model\CMDB\ReportLayoutNameParameters[]',
        'text_component' => 'string',
        'content' => 'string',
        'img_src' => 'string',
        'list_component' => 'string',
        'list' => '\Fortigate\FortiOS\Model\CMDB\ReportLayoutNameList[]',
        'chart' => 'string',
        'chart_options' => 'string',
        'drill_down_items' => 'string',
        'drill_down_types' => 'string',
        'table_column_widths' => 'string',
        'table_caption_style' => 'string',
        'table_head_style' => 'string',
        'table_odd_row_style' => 'string',
        'table_even_row_style' => 'string',
        'misc_component' => 'string',
        'column' => 'int',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'type' => null,
        'style' => null,
        'top_n' => null,
        'hide' => null,
        'parameters' => null,
        'text_component' => null,
        'content' => null,
        'img_src' => null,
        'list_component' => null,
        'list' => null,
        'chart' => null,
        'chart_options' => null,
        'drill_down_items' => null,
        'drill_down_types' => null,
        'table_column_widths' => null,
        'table_caption_style' => null,
        'table_head_style' => null,
        'table_odd_row_style' => null,
        'table_even_row_style' => null,
        'misc_component' => null,
        'column' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'type' => 'type',
        'style' => 'style',
        'top_n' => 'top-n',
        'hide' => 'hide',
        'parameters' => 'parameters',
        'text_component' => 'text-component',
        'content' => 'content',
        'img_src' => 'img-src',
        'list_component' => 'list-component',
        'list' => 'list',
        'chart' => 'chart',
        'chart_options' => 'chart-options',
        'drill_down_items' => 'drill-down-items',
        'drill_down_types' => 'drill-down-types',
        'table_column_widths' => 'table-column-widths',
        'table_caption_style' => 'table-caption-style',
        'table_head_style' => 'table-head-style',
        'table_odd_row_style' => 'table-odd-row-style',
        'table_even_row_style' => 'table-even-row-style',
        'misc_component' => 'misc-component',
        'column' => 'column',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'type' => 'setType',
        'style' => 'setStyle',
        'top_n' => 'setTopN',
        'hide' => 'setHide',
        'parameters' => 'setParameters',
        'text_component' => 'setTextComponent',
        'content' => 'setContent',
        'img_src' => 'setImgSrc',
        'list_component' => 'setListComponent',
        'list' => 'setList',
        'chart' => 'setChart',
        'chart_options' => 'setChartOptions',
        'drill_down_items' => 'setDrillDownItems',
        'drill_down_types' => 'setDrillDownTypes',
        'table_column_widths' => 'setTableColumnWidths',
        'table_caption_style' => 'setTableCaptionStyle',
        'table_head_style' => 'setTableHeadStyle',
        'table_odd_row_style' => 'setTableOddRowStyle',
        'table_even_row_style' => 'setTableEvenRowStyle',
        'misc_component' => 'setMiscComponent',
        'column' => 'setColumn',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'type' => 'getType',
        'style' => 'getStyle',
        'top_n' => 'getTopN',
        'hide' => 'getHide',
        'parameters' => 'getParameters',
        'text_component' => 'getTextComponent',
        'content' => 'getContent',
        'img_src' => 'getImgSrc',
        'list_component' => 'getListComponent',
        'list' => 'getList',
        'chart' => 'getChart',
        'chart_options' => 'getChartOptions',
        'drill_down_items' => 'getDrillDownItems',
        'drill_down_types' => 'getDrillDownTypes',
        'table_column_widths' => 'getTableColumnWidths',
        'table_caption_style' => 'getTableCaptionStyle',
        'table_head_style' => 'getTableHeadStyle',
        'table_odd_row_style' => 'getTableOddRowStyle',
        'table_even_row_style' => 'getTableEvenRowStyle',
        'misc_component' => 'getMiscComponent',
        'column' => 'getColumn',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_TEXT = 'text';
    const TYPE_IMAGE = 'image';
    const TYPE_CHART = 'chart';
    const TYPE_MISC = 'misc';
    const HIDE_ENABLE = 'enable';
    const HIDE_DISABLE = 'disable';
    const TEXT_COMPONENT_TEXT = 'text';
    const TEXT_COMPONENT_HEADING1 = 'heading1';
    const TEXT_COMPONENT_HEADING2 = 'heading2';
    const TEXT_COMPONENT_HEADING3 = 'heading3';
    const LIST_COMPONENT_BULLET = 'bullet';
    const LIST_COMPONENT_NUMBERED = 'numbered';
    const CHART_OPTIONS_INCLUDE_NO_DATA = 'include-no-data';
    const CHART_OPTIONS_HIDE_TITLE = 'hide-title';
    const CHART_OPTIONS_SHOW_CAPTION = 'show-caption';
    const MISC_COMPONENT_HLINE = 'hline';
    const MISC_COMPONENT_PAGE_BREAK = 'page-break';
    const MISC_COMPONENT_COLUMN_BREAK = 'column-break';
    const MISC_COMPONENT_SECTION_START = 'section-start';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEXT,
            self::TYPE_IMAGE,
            self::TYPE_CHART,
            self::TYPE_MISC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHideAllowableValues()
    {
        return [
            self::HIDE_ENABLE,
            self::HIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextComponentAllowableValues()
    {
        return [
            self::TEXT_COMPONENT_TEXT,
            self::TEXT_COMPONENT_HEADING1,
            self::TEXT_COMPONENT_HEADING2,
            self::TEXT_COMPONENT_HEADING3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListComponentAllowableValues()
    {
        return [
            self::LIST_COMPONENT_BULLET,
            self::LIST_COMPONENT_NUMBERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChartOptionsAllowableValues()
    {
        return [
            self::CHART_OPTIONS_INCLUDE_NO_DATA,
            self::CHART_OPTIONS_HIDE_TITLE,
            self::CHART_OPTIONS_SHOW_CAPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMiscComponentAllowableValues()
    {
        return [
            self::MISC_COMPONENT_HLINE,
            self::MISC_COMPONENT_PAGE_BREAK,
            self::MISC_COMPONENT_COLUMN_BREAK,
            self::MISC_COMPONENT_SECTION_START,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['top_n'] = $data['top_n'] ?? null;
        $this->container['hide'] = $data['hide'] ?? null;
        $this->container['parameters'] = $data['parameters'] ?? null;
        $this->container['text_component'] = $data['text_component'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['img_src'] = $data['img_src'] ?? null;
        $this->container['list_component'] = $data['list_component'] ?? null;
        $this->container['list'] = $data['list'] ?? null;
        $this->container['chart'] = $data['chart'] ?? null;
        $this->container['chart_options'] = $data['chart_options'] ?? null;
        $this->container['drill_down_items'] = $data['drill_down_items'] ?? null;
        $this->container['drill_down_types'] = $data['drill_down_types'] ?? null;
        $this->container['table_column_widths'] = $data['table_column_widths'] ?? null;
        $this->container['table_caption_style'] = $data['table_caption_style'] ?? null;
        $this->container['table_head_style'] = $data['table_head_style'] ?? null;
        $this->container['table_odd_row_style'] = $data['table_odd_row_style'] ?? null;
        $this->container['table_even_row_style'] = $data['table_even_row_style'] ?? null;
        $this->container['misc_component'] = $data['misc_component'] ?? null;
        $this->container['column'] = $data['column'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['style']) && (mb_strlen($this->container['style']) > 71)) {
            $invalidProperties[] = "invalid value for 'style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['top_n']) && ($this->container['top_n'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'top_n', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['top_n']) && ($this->container['top_n'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_n', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getHideAllowableValues();
        if (!is_null($this->container['hide']) && !in_array($this->container['hide'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hide', must be one of '%s'",
                $this->container['hide'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['parameters']) && (count($this->container['parameters']) > 0)) {
            $invalidProperties[] = "invalid value for 'parameters', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getTextComponentAllowableValues();
        if (!is_null($this->container['text_component']) && !in_array($this->container['text_component'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_component', must be one of '%s'",
                $this->container['text_component'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['content']) && (mb_strlen($this->container['content']) > 511)) {
            $invalidProperties[] = "invalid value for 'content', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['img_src']) && (mb_strlen($this->container['img_src']) > 127)) {
            $invalidProperties[] = "invalid value for 'img_src', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getListComponentAllowableValues();
        if (!is_null($this->container['list_component']) && !in_array($this->container['list_component'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'list_component', must be one of '%s'",
                $this->container['list_component'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['list']) && (count($this->container['list']) > 0)) {
            $invalidProperties[] = "invalid value for 'list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['chart']) && (mb_strlen($this->container['chart']) > 71)) {
            $invalidProperties[] = "invalid value for 'chart', the character length must be smaller than or equal to 71.";
        }

        $allowedValues = $this->getChartOptionsAllowableValues();
        if (!is_null($this->container['chart_options']) && !in_array($this->container['chart_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chart_options', must be one of '%s'",
                $this->container['chart_options'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['drill_down_items']) && (mb_strlen($this->container['drill_down_items']) > 11)) {
            $invalidProperties[] = "invalid value for 'drill_down_items', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['drill_down_types']) && (mb_strlen($this->container['drill_down_types']) > 7)) {
            $invalidProperties[] = "invalid value for 'drill_down_types', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['table_column_widths']) && (mb_strlen($this->container['table_column_widths']) > 179)) {
            $invalidProperties[] = "invalid value for 'table_column_widths', the character length must be smaller than or equal to 179.";
        }

        if (!is_null($this->container['table_caption_style']) && (mb_strlen($this->container['table_caption_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_caption_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_head_style']) && (mb_strlen($this->container['table_head_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_head_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_odd_row_style']) && (mb_strlen($this->container['table_odd_row_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_odd_row_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_even_row_style']) && (mb_strlen($this->container['table_even_row_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_even_row_style', the character length must be smaller than or equal to 71.";
        }

        $allowedValues = $this->getMiscComponentAllowableValues();
        if (!is_null($this->container['misc_component']) && !in_array($this->container['misc_component'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'misc_component', must be one of '%s'",
                $this->container['misc_component'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['column']) && ($this->container['column'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'column', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['column']) && ($this->container['column'] < 0)) {
            $invalidProperties[] = "invalid value for 'column', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 511)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 511.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Report item ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportLayoutNameBodyItem., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ReportLayoutNameBodyItem., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ReportLayoutNameBodyItem., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Report item type.    text:Text.    image:Image.    chart:Chart.    misc:Miscellaneous.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style Report item style.
     *
     * @return self
     */
    public function setStyle($style)
    {
        if (!is_null($style) && (mb_strlen($style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $style when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets top_n
     *
     * @return int|null
     */
    public function getTopN()
    {
        return $this->container['top_n'];
    }

    /**
     * Sets top_n
     *
     * @param int|null $top_n Value of top.
     *
     * @return self
     */
    public function setTopN($top_n)
    {

        if (!is_null($top_n) && ($top_n > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $top_n when calling ReportLayoutNameBodyItem., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($top_n) && ($top_n < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_n when calling ReportLayoutNameBodyItem., must be bigger than or equal to 0.');
        }

        $this->container['top_n'] = $top_n;

        return $this;
    }

    /**
     * Gets hide
     *
     * @return string|null
     */
    public function getHide()
    {
        return $this->container['hide'];
    }

    /**
     * Sets hide
     *
     * @param string|null $hide Enable/disable hide item in report.    enable:Enable hide item in report.    disable:Disable hide item in report.
     *
     * @return self
     */
    public function setHide($hide)
    {
        $allowedValues = $this->getHideAllowableValues();
        if (!is_null($hide) && !in_array($hide, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hide', must be one of '%s'",
                    $hide,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hide'] = $hide;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameParameters[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameParameters[]|null $parameters Parameters.
     *
     * @return self
     */
    public function setParameters($parameters)
    {

        if (!is_null($parameters) && (count($parameters) > 0)) {
            throw new \InvalidArgumentException('invalid value for $parameters when calling ReportLayoutNameBodyItem., number of items must be less than or equal to 0.');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets text_component
     *
     * @return string|null
     */
    public function getTextComponent()
    {
        return $this->container['text_component'];
    }

    /**
     * Sets text_component
     *
     * @param string|null $text_component Report item text component.    text:Normal text.    heading1:Heading 1.    heading2:Heading 2.    heading3:Heading 3.
     *
     * @return self
     */
    public function setTextComponent($text_component)
    {
        $allowedValues = $this->getTextComponentAllowableValues();
        if (!is_null($text_component) && !in_array($text_component, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_component', must be one of '%s'",
                    $text_component,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_component'] = $text_component;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Report item text content.
     *
     * @return self
     */
    public function setContent($content)
    {
        if (!is_null($content) && (mb_strlen($content) > 511)) {
            throw new \InvalidArgumentException('invalid length for $content when calling ReportLayoutNameBodyItem., must be smaller than or equal to 511.');
        }

        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets img_src
     *
     * @return string|null
     */
    public function getImgSrc()
    {
        return $this->container['img_src'];
    }

    /**
     * Sets img_src
     *
     * @param string|null $img_src Report item image file name.
     *
     * @return self
     */
    public function setImgSrc($img_src)
    {
        if (!is_null($img_src) && (mb_strlen($img_src) > 127)) {
            throw new \InvalidArgumentException('invalid length for $img_src when calling ReportLayoutNameBodyItem., must be smaller than or equal to 127.');
        }

        $this->container['img_src'] = $img_src;

        return $this;
    }

    /**
     * Gets list_component
     *
     * @return string|null
     */
    public function getListComponent()
    {
        return $this->container['list_component'];
    }

    /**
     * Sets list_component
     *
     * @param string|null $list_component Report item list component.    bullet:Bullet list.    numbered:Numbered list.
     *
     * @return self
     */
    public function setListComponent($list_component)
    {
        $allowedValues = $this->getListComponentAllowableValues();
        if (!is_null($list_component) && !in_array($list_component, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'list_component', must be one of '%s'",
                    $list_component,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['list_component'] = $list_component;

        return $this;
    }

    /**
     * Gets list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameList[]|null
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\ReportLayoutNameList[]|null $list Configure report list item.
     *
     * @return self
     */
    public function setList($list)
    {

        if (!is_null($list) && (count($list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $list when calling ReportLayoutNameBodyItem., number of items must be less than or equal to 0.');
        }
        $this->container['list'] = $list;

        return $this;
    }

    /**
     * Gets chart
     *
     * @return string|null
     */
    public function getChart()
    {
        return $this->container['chart'];
    }

    /**
     * Sets chart
     *
     * @param string|null $chart Report item chart name.
     *
     * @return self
     */
    public function setChart($chart)
    {
        if (!is_null($chart) && (mb_strlen($chart) > 71)) {
            throw new \InvalidArgumentException('invalid length for $chart when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['chart'] = $chart;

        return $this;
    }

    /**
     * Gets chart_options
     *
     * @return string|null
     */
    public function getChartOptions()
    {
        return $this->container['chart_options'];
    }

    /**
     * Sets chart_options
     *
     * @param string|null $chart_options Report chart options.    include-no-data:Include chart with no data.    hide-title:Hide chart title.    show-caption:Show chart caption.
     *
     * @return self
     */
    public function setChartOptions($chart_options)
    {
        $allowedValues = $this->getChartOptionsAllowableValues();
        if (!is_null($chart_options) && !in_array($chart_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chart_options', must be one of '%s'",
                    $chart_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chart_options'] = $chart_options;

        return $this;
    }

    /**
     * Gets drill_down_items
     *
     * @return string|null
     */
    public function getDrillDownItems()
    {
        return $this->container['drill_down_items'];
    }

    /**
     * Sets drill_down_items
     *
     * @param string|null $drill_down_items Control how drill down charts are shown.
     *
     * @return self
     */
    public function setDrillDownItems($drill_down_items)
    {
        if (!is_null($drill_down_items) && (mb_strlen($drill_down_items) > 11)) {
            throw new \InvalidArgumentException('invalid length for $drill_down_items when calling ReportLayoutNameBodyItem., must be smaller than or equal to 11.');
        }

        $this->container['drill_down_items'] = $drill_down_items;

        return $this;
    }

    /**
     * Gets drill_down_types
     *
     * @return string|null
     */
    public function getDrillDownTypes()
    {
        return $this->container['drill_down_types'];
    }

    /**
     * Sets drill_down_types
     *
     * @param string|null $drill_down_types Control whether keys from the parent being combined or not.
     *
     * @return self
     */
    public function setDrillDownTypes($drill_down_types)
    {
        if (!is_null($drill_down_types) && (mb_strlen($drill_down_types) > 7)) {
            throw new \InvalidArgumentException('invalid length for $drill_down_types when calling ReportLayoutNameBodyItem., must be smaller than or equal to 7.');
        }

        $this->container['drill_down_types'] = $drill_down_types;

        return $this;
    }

    /**
     * Gets table_column_widths
     *
     * @return string|null
     */
    public function getTableColumnWidths()
    {
        return $this->container['table_column_widths'];
    }

    /**
     * Sets table_column_widths
     *
     * @param string|null $table_column_widths Report item table column widths.
     *
     * @return self
     */
    public function setTableColumnWidths($table_column_widths)
    {
        if (!is_null($table_column_widths) && (mb_strlen($table_column_widths) > 179)) {
            throw new \InvalidArgumentException('invalid length for $table_column_widths when calling ReportLayoutNameBodyItem., must be smaller than or equal to 179.');
        }

        $this->container['table_column_widths'] = $table_column_widths;

        return $this;
    }

    /**
     * Gets table_caption_style
     *
     * @return string|null
     */
    public function getTableCaptionStyle()
    {
        return $this->container['table_caption_style'];
    }

    /**
     * Sets table_caption_style
     *
     * @param string|null $table_caption_style Table chart caption style.
     *
     * @return self
     */
    public function setTableCaptionStyle($table_caption_style)
    {
        if (!is_null($table_caption_style) && (mb_strlen($table_caption_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_caption_style when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['table_caption_style'] = $table_caption_style;

        return $this;
    }

    /**
     * Gets table_head_style
     *
     * @return string|null
     */
    public function getTableHeadStyle()
    {
        return $this->container['table_head_style'];
    }

    /**
     * Sets table_head_style
     *
     * @param string|null $table_head_style Table chart head style.
     *
     * @return self
     */
    public function setTableHeadStyle($table_head_style)
    {
        if (!is_null($table_head_style) && (mb_strlen($table_head_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_head_style when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['table_head_style'] = $table_head_style;

        return $this;
    }

    /**
     * Gets table_odd_row_style
     *
     * @return string|null
     */
    public function getTableOddRowStyle()
    {
        return $this->container['table_odd_row_style'];
    }

    /**
     * Sets table_odd_row_style
     *
     * @param string|null $table_odd_row_style Table chart odd row style.
     *
     * @return self
     */
    public function setTableOddRowStyle($table_odd_row_style)
    {
        if (!is_null($table_odd_row_style) && (mb_strlen($table_odd_row_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_odd_row_style when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['table_odd_row_style'] = $table_odd_row_style;

        return $this;
    }

    /**
     * Gets table_even_row_style
     *
     * @return string|null
     */
    public function getTableEvenRowStyle()
    {
        return $this->container['table_even_row_style'];
    }

    /**
     * Sets table_even_row_style
     *
     * @param string|null $table_even_row_style Table chart even row style.
     *
     * @return self
     */
    public function setTableEvenRowStyle($table_even_row_style)
    {
        if (!is_null($table_even_row_style) && (mb_strlen($table_even_row_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_even_row_style when calling ReportLayoutNameBodyItem., must be smaller than or equal to 71.');
        }

        $this->container['table_even_row_style'] = $table_even_row_style;

        return $this;
    }

    /**
     * Gets misc_component
     *
     * @return string|null
     */
    public function getMiscComponent()
    {
        return $this->container['misc_component'];
    }

    /**
     * Sets misc_component
     *
     * @param string|null $misc_component Report item miscellaneous component.    hline:Horizontal line.    page-break:Page break.    column-break:Column break.    section-start:Section start.
     *
     * @return self
     */
    public function setMiscComponent($misc_component)
    {
        $allowedValues = $this->getMiscComponentAllowableValues();
        if (!is_null($misc_component) && !in_array($misc_component, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'misc_component', must be one of '%s'",
                    $misc_component,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['misc_component'] = $misc_component;

        return $this;
    }

    /**
     * Gets column
     *
     * @return int|null
     */
    public function getColumn()
    {
        return $this->container['column'];
    }

    /**
     * Sets column
     *
     * @param int|null $column Report section column number.
     *
     * @return self
     */
    public function setColumn($column)
    {

        if (!is_null($column) && ($column > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $column when calling ReportLayoutNameBodyItem., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($column) && ($column < 0)) {
            throw new \InvalidArgumentException('invalid value for $column when calling ReportLayoutNameBodyItem., must be bigger than or equal to 0.');
        }

        $this->container['column'] = $column;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Report section title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 511)) {
            throw new \InvalidArgumentException('invalid length for $title when calling ReportLayoutNameBodyItem., must be smaller than or equal to 511.');
        }

        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


