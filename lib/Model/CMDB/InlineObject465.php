<?php
/**
 * InlineObject465
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject465 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject465 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_465';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'url' => 'string',
        'cert' => 'string',
        'secondary_url' => 'string',
        'secondary_cert' => 'string',
        'unavail_action' => 'string',
        'source_ip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'url' => null,
        'cert' => null,
        'secondary_url' => null,
        'secondary_cert' => null,
        'unavail_action' => null,
        'source_ip' => 'ipv4'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'url' => 'url',
        'cert' => 'cert',
        'secondary_url' => 'secondary-url',
        'secondary_cert' => 'secondary-cert',
        'unavail_action' => 'unavail-action',
        'source_ip' => 'source-ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'url' => 'setUrl',
        'cert' => 'setCert',
        'secondary_url' => 'setSecondaryUrl',
        'secondary_cert' => 'setSecondaryCert',
        'unavail_action' => 'setUnavailAction',
        'source_ip' => 'setSourceIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'url' => 'getUrl',
        'cert' => 'getCert',
        'secondary_url' => 'getSecondaryUrl',
        'secondary_cert' => 'getSecondaryCert',
        'unavail_action' => 'getUnavailAction',
        'source_ip' => 'getSourceIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const UNAVAIL_ACTION_REVOKE = 'revoke';
    const UNAVAIL_ACTION_IGNORE = 'ignore';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnavailActionAllowableValues()
    {
        return [
            self::UNAVAIL_ACTION_REVOKE,
            self::UNAVAIL_ACTION_IGNORE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['cert'] = $data['cert'] ?? null;
        $this->container['secondary_url'] = $data['secondary_url'] ?? null;
        $this->container['secondary_cert'] = $data['secondary_cert'] ?? null;
        $this->container['unavail_action'] = $data['unavail_action'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 127)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['cert']) && (mb_strlen($this->container['cert']) > 127)) {
            $invalidProperties[] = "invalid value for 'cert', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['secondary_url']) && (mb_strlen($this->container['secondary_url']) > 127)) {
            $invalidProperties[] = "invalid value for 'secondary_url', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['secondary_cert']) && (mb_strlen($this->container['secondary_cert']) > 127)) {
            $invalidProperties[] = "invalid value for 'secondary_cert', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getUnavailActionAllowableValues();
        if (!is_null($this->container['unavail_action']) && !in_array($this->container['unavail_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unavail_action', must be one of '%s'",
                $this->container['unavail_action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name OCSP server entry name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject465., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url OCSP server URL.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $url when calling InlineObject465., must be smaller than or equal to 127.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets cert
     *
     * @return string|null
     */
    public function getCert()
    {
        return $this->container['cert'];
    }

    /**
     * Sets cert
     *
     * @param string|null $cert OCSP server certificate.
     *
     * @return self
     */
    public function setCert($cert)
    {
        if (!is_null($cert) && (mb_strlen($cert) > 127)) {
            throw new \InvalidArgumentException('invalid length for $cert when calling InlineObject465., must be smaller than or equal to 127.');
        }

        $this->container['cert'] = $cert;

        return $this;
    }

    /**
     * Gets secondary_url
     *
     * @return string|null
     */
    public function getSecondaryUrl()
    {
        return $this->container['secondary_url'];
    }

    /**
     * Sets secondary_url
     *
     * @param string|null $secondary_url Secondary OCSP server URL.
     *
     * @return self
     */
    public function setSecondaryUrl($secondary_url)
    {
        if (!is_null($secondary_url) && (mb_strlen($secondary_url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $secondary_url when calling InlineObject465., must be smaller than or equal to 127.');
        }

        $this->container['secondary_url'] = $secondary_url;

        return $this;
    }

    /**
     * Gets secondary_cert
     *
     * @return string|null
     */
    public function getSecondaryCert()
    {
        return $this->container['secondary_cert'];
    }

    /**
     * Sets secondary_cert
     *
     * @param string|null $secondary_cert Secondary OCSP server certificate.
     *
     * @return self
     */
    public function setSecondaryCert($secondary_cert)
    {
        if (!is_null($secondary_cert) && (mb_strlen($secondary_cert) > 127)) {
            throw new \InvalidArgumentException('invalid length for $secondary_cert when calling InlineObject465., must be smaller than or equal to 127.');
        }

        $this->container['secondary_cert'] = $secondary_cert;

        return $this;
    }

    /**
     * Gets unavail_action
     *
     * @return string|null
     */
    public function getUnavailAction()
    {
        return $this->container['unavail_action'];
    }

    /**
     * Sets unavail_action
     *
     * @param string|null $unavail_action Action when server is unavailable (revoke the certificate or ignore the result of the check).    revoke:Revoke certificate if server is unavailable.    ignore:Ignore OCSP check if server is unavailable.
     *
     * @return self
     */
    public function setUnavailAction($unavail_action)
    {
        $allowedValues = $this->getUnavailActionAllowableValues();
        if (!is_null($unavail_action) && !in_array($unavail_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unavail_action', must be one of '%s'",
                    $unavail_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unavail_action'] = $unavail_action;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address for communications to the OCSP server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


