<?php
/**
 * SystemClusterSyncSyncIdSessionSyncFilter
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemClusterSyncSyncIdSessionSyncFilter Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemClusterSyncSyncIdSessionSyncFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_cluster_sync__sync_id__session_sync_filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'srcintf' => 'string',
        'dstintf' => 'string',
        'srcaddr' => 'string',
        'dstaddr' => 'string',
        'srcaddr6' => 'string',
        'dstaddr6' => 'string',
        'custom_service' => '\Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdCustomService[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'srcintf' => null,
        'dstintf' => null,
        'srcaddr' => 'ipv4',
        'dstaddr' => 'ipv4',
        'srcaddr6' => null,
        'dstaddr6' => null,
        'custom_service' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'srcintf' => 'srcintf',
        'dstintf' => 'dstintf',
        'srcaddr' => 'srcaddr',
        'dstaddr' => 'dstaddr',
        'srcaddr6' => 'srcaddr6',
        'dstaddr6' => 'dstaddr6',
        'custom_service' => 'custom-service'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'srcintf' => 'setSrcintf',
        'dstintf' => 'setDstintf',
        'srcaddr' => 'setSrcaddr',
        'dstaddr' => 'setDstaddr',
        'srcaddr6' => 'setSrcaddr6',
        'dstaddr6' => 'setDstaddr6',
        'custom_service' => 'setCustomService'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'srcintf' => 'getSrcintf',
        'dstintf' => 'getDstintf',
        'srcaddr' => 'getSrcaddr',
        'dstaddr' => 'getDstaddr',
        'srcaddr6' => 'getSrcaddr6',
        'dstaddr6' => 'getDstaddr6',
        'custom_service' => 'getCustomService'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['srcintf'] = $data['srcintf'] ?? null;
        $this->container['dstintf'] = $data['dstintf'] ?? null;
        $this->container['srcaddr'] = $data['srcaddr'] ?? null;
        $this->container['dstaddr'] = $data['dstaddr'] ?? null;
        $this->container['srcaddr6'] = $data['srcaddr6'] ?? null;
        $this->container['dstaddr6'] = $data['dstaddr6'] ?? null;
        $this->container['custom_service'] = $data['custom_service'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['srcintf']) && (mb_strlen($this->container['srcintf']) > 15)) {
            $invalidProperties[] = "invalid value for 'srcintf', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['dstintf']) && (mb_strlen($this->container['dstintf']) > 15)) {
            $invalidProperties[] = "invalid value for 'dstintf', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['custom_service']) && (count($this->container['custom_service']) > 0)) {
            $invalidProperties[] = "invalid value for 'custom_service', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets srcintf
     *
     * @return string|null
     */
    public function getSrcintf()
    {
        return $this->container['srcintf'];
    }

    /**
     * Sets srcintf
     *
     * @param string|null $srcintf Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
     *
     * @return self
     */
    public function setSrcintf($srcintf)
    {
        if (!is_null($srcintf) && (mb_strlen($srcintf) > 15)) {
            throw new \InvalidArgumentException('invalid length for $srcintf when calling SystemClusterSyncSyncIdSessionSyncFilter., must be smaller than or equal to 15.');
        }

        $this->container['srcintf'] = $srcintf;

        return $this;
    }

    /**
     * Gets dstintf
     *
     * @return string|null
     */
    public function getDstintf()
    {
        return $this->container['dstintf'];
    }

    /**
     * Sets dstintf
     *
     * @param string|null $dstintf Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
     *
     * @return self
     */
    public function setDstintf($dstintf)
    {
        if (!is_null($dstintf) && (mb_strlen($dstintf) > 15)) {
            throw new \InvalidArgumentException('invalid length for $dstintf when calling SystemClusterSyncSyncIdSessionSyncFilter., must be smaller than or equal to 15.');
        }

        $this->container['dstintf'] = $dstintf;

        return $this;
    }

    /**
     * Gets srcaddr
     *
     * @return string|null
     */
    public function getSrcaddr()
    {
        return $this->container['srcaddr'];
    }

    /**
     * Sets srcaddr
     *
     * @param string|null $srcaddr Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     *
     * @return self
     */
    public function setSrcaddr($srcaddr)
    {
        $this->container['srcaddr'] = $srcaddr;

        return $this;
    }

    /**
     * Gets dstaddr
     *
     * @return string|null
     */
    public function getDstaddr()
    {
        return $this->container['dstaddr'];
    }

    /**
     * Sets dstaddr
     *
     * @param string|null $dstaddr Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     *
     * @return self
     */
    public function setDstaddr($dstaddr)
    {
        $this->container['dstaddr'] = $dstaddr;

        return $this;
    }

    /**
     * Gets srcaddr6
     *
     * @return string|null
     */
    public function getSrcaddr6()
    {
        return $this->container['srcaddr6'];
    }

    /**
     * Sets srcaddr6
     *
     * @param string|null $srcaddr6 Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
     *
     * @return self
     */
    public function setSrcaddr6($srcaddr6)
    {
        $this->container['srcaddr6'] = $srcaddr6;

        return $this;
    }

    /**
     * Gets dstaddr6
     *
     * @return string|null
     */
    public function getDstaddr6()
    {
        return $this->container['dstaddr6'];
    }

    /**
     * Sets dstaddr6
     *
     * @param string|null $dstaddr6 Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
     *
     * @return self
     */
    public function setDstaddr6($dstaddr6)
    {
        $this->container['dstaddr6'] = $dstaddr6;

        return $this;
    }

    /**
     * Gets custom_service
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdCustomService[]|null
     */
    public function getCustomService()
    {
        return $this->container['custom_service'];
    }

    /**
     * Sets custom_service
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemClusterSyncSyncIdCustomService[]|null $custom_service Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services.
     *
     * @return self
     */
    public function setCustomService($custom_service)
    {

        if (!is_null($custom_service) && (count($custom_service) > 0)) {
            throw new \InvalidArgumentException('invalid value for $custom_service when calling SystemClusterSyncSyncIdSessionSyncFilter., number of items must be less than or equal to 0.');
        }
        $this->container['custom_service'] = $custom_service;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


