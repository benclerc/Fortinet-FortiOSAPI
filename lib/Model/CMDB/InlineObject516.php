<?php
/**
 * InlineObject516
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject516 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject516 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_516';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_object_size' => 'int',
        'neg_resp_time' => 'int',
        'fresh_factor' => 'int',
        'max_ttl' => 'int',
        'min_ttl' => 'int',
        'default_ttl' => 'int',
        'ignore_ims' => 'string',
        'ignore_conditional' => 'string',
        'ignore_pnc' => 'string',
        'ignore_ie_reload' => 'string',
        'cache_expired' => 'string',
        'cache_cookie' => 'string',
        'reval_pnc' => 'string',
        'always_revalidate' => 'string',
        'cache_by_default' => 'string',
        'host_validate' => 'string',
        'external' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_object_size' => null,
        'neg_resp_time' => null,
        'fresh_factor' => null,
        'max_ttl' => null,
        'min_ttl' => null,
        'default_ttl' => null,
        'ignore_ims' => null,
        'ignore_conditional' => null,
        'ignore_pnc' => null,
        'ignore_ie_reload' => null,
        'cache_expired' => null,
        'cache_cookie' => null,
        'reval_pnc' => null,
        'always_revalidate' => null,
        'cache_by_default' => null,
        'host_validate' => null,
        'external' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_object_size' => 'max-object-size',
        'neg_resp_time' => 'neg-resp-time',
        'fresh_factor' => 'fresh-factor',
        'max_ttl' => 'max-ttl',
        'min_ttl' => 'min-ttl',
        'default_ttl' => 'default-ttl',
        'ignore_ims' => 'ignore-ims',
        'ignore_conditional' => 'ignore-conditional',
        'ignore_pnc' => 'ignore-pnc',
        'ignore_ie_reload' => 'ignore-ie-reload',
        'cache_expired' => 'cache-expired',
        'cache_cookie' => 'cache-cookie',
        'reval_pnc' => 'reval-pnc',
        'always_revalidate' => 'always-revalidate',
        'cache_by_default' => 'cache-by-default',
        'host_validate' => 'host-validate',
        'external' => 'external'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_object_size' => 'setMaxObjectSize',
        'neg_resp_time' => 'setNegRespTime',
        'fresh_factor' => 'setFreshFactor',
        'max_ttl' => 'setMaxTtl',
        'min_ttl' => 'setMinTtl',
        'default_ttl' => 'setDefaultTtl',
        'ignore_ims' => 'setIgnoreIms',
        'ignore_conditional' => 'setIgnoreConditional',
        'ignore_pnc' => 'setIgnorePnc',
        'ignore_ie_reload' => 'setIgnoreIeReload',
        'cache_expired' => 'setCacheExpired',
        'cache_cookie' => 'setCacheCookie',
        'reval_pnc' => 'setRevalPnc',
        'always_revalidate' => 'setAlwaysRevalidate',
        'cache_by_default' => 'setCacheByDefault',
        'host_validate' => 'setHostValidate',
        'external' => 'setExternal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_object_size' => 'getMaxObjectSize',
        'neg_resp_time' => 'getNegRespTime',
        'fresh_factor' => 'getFreshFactor',
        'max_ttl' => 'getMaxTtl',
        'min_ttl' => 'getMinTtl',
        'default_ttl' => 'getDefaultTtl',
        'ignore_ims' => 'getIgnoreIms',
        'ignore_conditional' => 'getIgnoreConditional',
        'ignore_pnc' => 'getIgnorePnc',
        'ignore_ie_reload' => 'getIgnoreIeReload',
        'cache_expired' => 'getCacheExpired',
        'cache_cookie' => 'getCacheCookie',
        'reval_pnc' => 'getRevalPnc',
        'always_revalidate' => 'getAlwaysRevalidate',
        'cache_by_default' => 'getCacheByDefault',
        'host_validate' => 'getHostValidate',
        'external' => 'getExternal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IGNORE_IMS_ENABLE = 'enable';
    const IGNORE_IMS_DISABLE = 'disable';
    const IGNORE_CONDITIONAL_ENABLE = 'enable';
    const IGNORE_CONDITIONAL_DISABLE = 'disable';
    const IGNORE_PNC_ENABLE = 'enable';
    const IGNORE_PNC_DISABLE = 'disable';
    const IGNORE_IE_RELOAD_ENABLE = 'enable';
    const IGNORE_IE_RELOAD_DISABLE = 'disable';
    const CACHE_EXPIRED_ENABLE = 'enable';
    const CACHE_EXPIRED_DISABLE = 'disable';
    const CACHE_COOKIE_ENABLE = 'enable';
    const CACHE_COOKIE_DISABLE = 'disable';
    const REVAL_PNC_ENABLE = 'enable';
    const REVAL_PNC_DISABLE = 'disable';
    const ALWAYS_REVALIDATE_ENABLE = 'enable';
    const ALWAYS_REVALIDATE_DISABLE = 'disable';
    const CACHE_BY_DEFAULT_ENABLE = 'enable';
    const CACHE_BY_DEFAULT_DISABLE = 'disable';
    const HOST_VALIDATE_ENABLE = 'enable';
    const HOST_VALIDATE_DISABLE = 'disable';
    const EXTERNAL_ENABLE = 'enable';
    const EXTERNAL_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoreImsAllowableValues()
    {
        return [
            self::IGNORE_IMS_ENABLE,
            self::IGNORE_IMS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoreConditionalAllowableValues()
    {
        return [
            self::IGNORE_CONDITIONAL_ENABLE,
            self::IGNORE_CONDITIONAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnorePncAllowableValues()
    {
        return [
            self::IGNORE_PNC_ENABLE,
            self::IGNORE_PNC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoreIeReloadAllowableValues()
    {
        return [
            self::IGNORE_IE_RELOAD_ENABLE,
            self::IGNORE_IE_RELOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheExpiredAllowableValues()
    {
        return [
            self::CACHE_EXPIRED_ENABLE,
            self::CACHE_EXPIRED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheCookieAllowableValues()
    {
        return [
            self::CACHE_COOKIE_ENABLE,
            self::CACHE_COOKIE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRevalPncAllowableValues()
    {
        return [
            self::REVAL_PNC_ENABLE,
            self::REVAL_PNC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlwaysRevalidateAllowableValues()
    {
        return [
            self::ALWAYS_REVALIDATE_ENABLE,
            self::ALWAYS_REVALIDATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheByDefaultAllowableValues()
    {
        return [
            self::CACHE_BY_DEFAULT_ENABLE,
            self::CACHE_BY_DEFAULT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostValidateAllowableValues()
    {
        return [
            self::HOST_VALIDATE_ENABLE,
            self::HOST_VALIDATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalAllowableValues()
    {
        return [
            self::EXTERNAL_ENABLE,
            self::EXTERNAL_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_object_size'] = $data['max_object_size'] ?? null;
        $this->container['neg_resp_time'] = $data['neg_resp_time'] ?? null;
        $this->container['fresh_factor'] = $data['fresh_factor'] ?? null;
        $this->container['max_ttl'] = $data['max_ttl'] ?? null;
        $this->container['min_ttl'] = $data['min_ttl'] ?? null;
        $this->container['default_ttl'] = $data['default_ttl'] ?? null;
        $this->container['ignore_ims'] = $data['ignore_ims'] ?? null;
        $this->container['ignore_conditional'] = $data['ignore_conditional'] ?? null;
        $this->container['ignore_pnc'] = $data['ignore_pnc'] ?? null;
        $this->container['ignore_ie_reload'] = $data['ignore_ie_reload'] ?? null;
        $this->container['cache_expired'] = $data['cache_expired'] ?? null;
        $this->container['cache_cookie'] = $data['cache_cookie'] ?? null;
        $this->container['reval_pnc'] = $data['reval_pnc'] ?? null;
        $this->container['always_revalidate'] = $data['always_revalidate'] ?? null;
        $this->container['cache_by_default'] = $data['cache_by_default'] ?? null;
        $this->container['host_validate'] = $data['host_validate'] ?? null;
        $this->container['external'] = $data['external'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['max_object_size']) && ($this->container['max_object_size'] > 2147483)) {
            $invalidProperties[] = "invalid value for 'max_object_size', must be smaller than or equal to 2147483.";
        }

        if (!is_null($this->container['max_object_size']) && ($this->container['max_object_size'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_object_size', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['neg_resp_time']) && ($this->container['neg_resp_time'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'neg_resp_time', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['neg_resp_time']) && ($this->container['neg_resp_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'neg_resp_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fresh_factor']) && ($this->container['fresh_factor'] > 100)) {
            $invalidProperties[] = "invalid value for 'fresh_factor', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fresh_factor']) && ($this->container['fresh_factor'] < 1)) {
            $invalidProperties[] = "invalid value for 'fresh_factor', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_ttl']) && ($this->container['max_ttl'] > 5256000)) {
            $invalidProperties[] = "invalid value for 'max_ttl', must be smaller than or equal to 5256000.";
        }

        if (!is_null($this->container['max_ttl']) && ($this->container['max_ttl'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_ttl', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['min_ttl']) && ($this->container['min_ttl'] > 5256000)) {
            $invalidProperties[] = "invalid value for 'min_ttl', must be smaller than or equal to 5256000.";
        }

        if (!is_null($this->container['min_ttl']) && ($this->container['min_ttl'] < 1)) {
            $invalidProperties[] = "invalid value for 'min_ttl', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['default_ttl']) && ($this->container['default_ttl'] > 5256000)) {
            $invalidProperties[] = "invalid value for 'default_ttl', must be smaller than or equal to 5256000.";
        }

        if (!is_null($this->container['default_ttl']) && ($this->container['default_ttl'] < 1)) {
            $invalidProperties[] = "invalid value for 'default_ttl', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIgnoreImsAllowableValues();
        if (!is_null($this->container['ignore_ims']) && !in_array($this->container['ignore_ims'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_ims', must be one of '%s'",
                $this->container['ignore_ims'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgnoreConditionalAllowableValues();
        if (!is_null($this->container['ignore_conditional']) && !in_array($this->container['ignore_conditional'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_conditional', must be one of '%s'",
                $this->container['ignore_conditional'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgnorePncAllowableValues();
        if (!is_null($this->container['ignore_pnc']) && !in_array($this->container['ignore_pnc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_pnc', must be one of '%s'",
                $this->container['ignore_pnc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgnoreIeReloadAllowableValues();
        if (!is_null($this->container['ignore_ie_reload']) && !in_array($this->container['ignore_ie_reload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ignore_ie_reload', must be one of '%s'",
                $this->container['ignore_ie_reload'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCacheExpiredAllowableValues();
        if (!is_null($this->container['cache_expired']) && !in_array($this->container['cache_expired'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache_expired', must be one of '%s'",
                $this->container['cache_expired'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCacheCookieAllowableValues();
        if (!is_null($this->container['cache_cookie']) && !in_array($this->container['cache_cookie'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache_cookie', must be one of '%s'",
                $this->container['cache_cookie'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRevalPncAllowableValues();
        if (!is_null($this->container['reval_pnc']) && !in_array($this->container['reval_pnc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reval_pnc', must be one of '%s'",
                $this->container['reval_pnc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAlwaysRevalidateAllowableValues();
        if (!is_null($this->container['always_revalidate']) && !in_array($this->container['always_revalidate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'always_revalidate', must be one of '%s'",
                $this->container['always_revalidate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCacheByDefaultAllowableValues();
        if (!is_null($this->container['cache_by_default']) && !in_array($this->container['cache_by_default'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache_by_default', must be one of '%s'",
                $this->container['cache_by_default'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHostValidateAllowableValues();
        if (!is_null($this->container['host_validate']) && !in_array($this->container['host_validate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'host_validate', must be one of '%s'",
                $this->container['host_validate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($this->container['external']) && !in_array($this->container['external'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external', must be one of '%s'",
                $this->container['external'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_object_size
     *
     * @return int|null
     */
    public function getMaxObjectSize()
    {
        return $this->container['max_object_size'];
    }

    /**
     * Sets max_object_size
     *
     * @param int|null $max_object_size Maximum cacheable object size in kB (1 - 2147483 kb (2GB). All objects that exceed this are delivered to the client but not stored in the web cache.
     *
     * @return self
     */
    public function setMaxObjectSize($max_object_size)
    {

        if (!is_null($max_object_size) && ($max_object_size > 2147483)) {
            throw new \InvalidArgumentException('invalid value for $max_object_size when calling InlineObject516., must be smaller than or equal to 2147483.');
        }
        if (!is_null($max_object_size) && ($max_object_size < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_object_size when calling InlineObject516., must be bigger than or equal to 1.');
        }

        $this->container['max_object_size'] = $max_object_size;

        return $this;
    }

    /**
     * Gets neg_resp_time
     *
     * @return int|null
     */
    public function getNegRespTime()
    {
        return $this->container['neg_resp_time'];
    }

    /**
     * Sets neg_resp_time
     *
     * @param int|null $neg_resp_time Time in minutes to cache negative responses or errors (0 - 4294967295, default = 0  which means negative responses are not cached).
     *
     * @return self
     */
    public function setNegRespTime($neg_resp_time)
    {

        if (!is_null($neg_resp_time) && ($neg_resp_time > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $neg_resp_time when calling InlineObject516., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($neg_resp_time) && ($neg_resp_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $neg_resp_time when calling InlineObject516., must be bigger than or equal to 0.');
        }

        $this->container['neg_resp_time'] = $neg_resp_time;

        return $this;
    }

    /**
     * Gets fresh_factor
     *
     * @return int|null
     */
    public function getFreshFactor()
    {
        return $this->container['fresh_factor'];
    }

    /**
     * Sets fresh_factor
     *
     * @param int|null $fresh_factor Frequency that the server is checked to see if any objects have expired (1 - 100, default = 100). The higher the fresh factor, the less often the checks occur.
     *
     * @return self
     */
    public function setFreshFactor($fresh_factor)
    {

        if (!is_null($fresh_factor) && ($fresh_factor > 100)) {
            throw new \InvalidArgumentException('invalid value for $fresh_factor when calling InlineObject516., must be smaller than or equal to 100.');
        }
        if (!is_null($fresh_factor) && ($fresh_factor < 1)) {
            throw new \InvalidArgumentException('invalid value for $fresh_factor when calling InlineObject516., must be bigger than or equal to 1.');
        }

        $this->container['fresh_factor'] = $fresh_factor;

        return $this;
    }

    /**
     * Gets max_ttl
     *
     * @return int|null
     */
    public function getMaxTtl()
    {
        return $this->container['max_ttl'];
    }

    /**
     * Sets max_ttl
     *
     * @param int|null $max_ttl Maximum time an object can stay in the web cache without checking to see if it has expired on the server (default = 7200 min (5 days); maximum = 5256000 min (10 years)).
     *
     * @return self
     */
    public function setMaxTtl($max_ttl)
    {

        if (!is_null($max_ttl) && ($max_ttl > 5256000)) {
            throw new \InvalidArgumentException('invalid value for $max_ttl when calling InlineObject516., must be smaller than or equal to 5256000.');
        }
        if (!is_null($max_ttl) && ($max_ttl < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_ttl when calling InlineObject516., must be bigger than or equal to 1.');
        }

        $this->container['max_ttl'] = $max_ttl;

        return $this;
    }

    /**
     * Gets min_ttl
     *
     * @return int|null
     */
    public function getMinTtl()
    {
        return $this->container['min_ttl'];
    }

    /**
     * Sets min_ttl
     *
     * @param int|null $min_ttl Minimum time an object can stay in the web cache without checking to see if it has expired on the server (default = 5 min; maximum = 5256000 (10 years)).
     *
     * @return self
     */
    public function setMinTtl($min_ttl)
    {

        if (!is_null($min_ttl) && ($min_ttl > 5256000)) {
            throw new \InvalidArgumentException('invalid value for $min_ttl when calling InlineObject516., must be smaller than or equal to 5256000.');
        }
        if (!is_null($min_ttl) && ($min_ttl < 1)) {
            throw new \InvalidArgumentException('invalid value for $min_ttl when calling InlineObject516., must be bigger than or equal to 1.');
        }

        $this->container['min_ttl'] = $min_ttl;

        return $this;
    }

    /**
     * Gets default_ttl
     *
     * @return int|null
     */
    public function getDefaultTtl()
    {
        return $this->container['default_ttl'];
    }

    /**
     * Sets default_ttl
     *
     * @param int|null $default_ttl Default object expiry time (default = 1440 min (1 day); maximum = 5256000 min (10 years)). This only applies to those objects that do not have an expiry time set by the web server.
     *
     * @return self
     */
    public function setDefaultTtl($default_ttl)
    {

        if (!is_null($default_ttl) && ($default_ttl > 5256000)) {
            throw new \InvalidArgumentException('invalid value for $default_ttl when calling InlineObject516., must be smaller than or equal to 5256000.');
        }
        if (!is_null($default_ttl) && ($default_ttl < 1)) {
            throw new \InvalidArgumentException('invalid value for $default_ttl when calling InlineObject516., must be bigger than or equal to 1.');
        }

        $this->container['default_ttl'] = $default_ttl;

        return $this;
    }

    /**
     * Gets ignore_ims
     *
     * @return string|null
     */
    public function getIgnoreIms()
    {
        return $this->container['ignore_ims'];
    }

    /**
     * Sets ignore_ims
     *
     * @param string|null $ignore_ims Enable/disable ignoring the if-modified-since (IMS) header.    enable:Enable ignoring the if-modified-since (IMS) header.    disable:Disable ignoring the if-modified-since (IMS) header.
     *
     * @return self
     */
    public function setIgnoreIms($ignore_ims)
    {
        $allowedValues = $this->getIgnoreImsAllowableValues();
        if (!is_null($ignore_ims) && !in_array($ignore_ims, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_ims', must be one of '%s'",
                    $ignore_ims,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_ims'] = $ignore_ims;

        return $this;
    }

    /**
     * Gets ignore_conditional
     *
     * @return string|null
     */
    public function getIgnoreConditional()
    {
        return $this->container['ignore_conditional'];
    }

    /**
     * Sets ignore_conditional
     *
     * @param string|null $ignore_conditional Enable/disable controlling the behavior of cache-control HTTP 1.1 header values.    enable:Enable ignoring cache-control HTTP 1.1 header values.    disable:Disable ignoring cache-control HTTP 1.1 header values.
     *
     * @return self
     */
    public function setIgnoreConditional($ignore_conditional)
    {
        $allowedValues = $this->getIgnoreConditionalAllowableValues();
        if (!is_null($ignore_conditional) && !in_array($ignore_conditional, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_conditional', must be one of '%s'",
                    $ignore_conditional,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_conditional'] = $ignore_conditional;

        return $this;
    }

    /**
     * Gets ignore_pnc
     *
     * @return string|null
     */
    public function getIgnorePnc()
    {
        return $this->container['ignore_pnc'];
    }

    /**
     * Sets ignore_pnc
     *
     * @param string|null $ignore_pnc Enable/disable ignoring the pragma no-cache (PNC) header.    enable:Enable ignoring the pragma no-cache (PNC) header.    disable:Disable ignoring the pragma no-cache (PNC) header.
     *
     * @return self
     */
    public function setIgnorePnc($ignore_pnc)
    {
        $allowedValues = $this->getIgnorePncAllowableValues();
        if (!is_null($ignore_pnc) && !in_array($ignore_pnc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_pnc', must be one of '%s'",
                    $ignore_pnc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_pnc'] = $ignore_pnc;

        return $this;
    }

    /**
     * Gets ignore_ie_reload
     *
     * @return string|null
     */
    public function getIgnoreIeReload()
    {
        return $this->container['ignore_ie_reload'];
    }

    /**
     * Sets ignore_ie_reload
     *
     * @param string|null $ignore_ie_reload Enable/disable ignoring the PNC-interpretation of Internet Explorer's Accept: / header.    enable:Enable Enable/disable ignoring the PNC-interpretation of Internet Explorer's Accept: / header.    disable:Disable Enable/disable ignoring the PNC-interpretation of Internet Explorer's Accept: / header.
     *
     * @return self
     */
    public function setIgnoreIeReload($ignore_ie_reload)
    {
        $allowedValues = $this->getIgnoreIeReloadAllowableValues();
        if (!is_null($ignore_ie_reload) && !in_array($ignore_ie_reload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ignore_ie_reload', must be one of '%s'",
                    $ignore_ie_reload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignore_ie_reload'] = $ignore_ie_reload;

        return $this;
    }

    /**
     * Gets cache_expired
     *
     * @return string|null
     */
    public function getCacheExpired()
    {
        return $this->container['cache_expired'];
    }

    /**
     * Sets cache_expired
     *
     * @param string|null $cache_expired Enable/disable caching type-1 objects that are already expired on arrival.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setCacheExpired($cache_expired)
    {
        $allowedValues = $this->getCacheExpiredAllowableValues();
        if (!is_null($cache_expired) && !in_array($cache_expired, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache_expired', must be one of '%s'",
                    $cache_expired,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache_expired'] = $cache_expired;

        return $this;
    }

    /**
     * Gets cache_cookie
     *
     * @return string|null
     */
    public function getCacheCookie()
    {
        return $this->container['cache_cookie'];
    }

    /**
     * Sets cache_cookie
     *
     * @param string|null $cache_cookie Enable/disable caching cookies. Since cookies contain information for or about individual users, they not usually cached.    enable:Cache cookies.    disable:Do not cache cookies.
     *
     * @return self
     */
    public function setCacheCookie($cache_cookie)
    {
        $allowedValues = $this->getCacheCookieAllowableValues();
        if (!is_null($cache_cookie) && !in_array($cache_cookie, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache_cookie', must be one of '%s'",
                    $cache_cookie,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache_cookie'] = $cache_cookie;

        return $this;
    }

    /**
     * Gets reval_pnc
     *
     * @return string|null
     */
    public function getRevalPnc()
    {
        return $this->container['reval_pnc'];
    }

    /**
     * Sets reval_pnc
     *
     * @param string|null $reval_pnc Enable/disable revalidation of pragma-no-cache (PNC) to address bandwidth concerns.    enable:Enable revalidation of pragma-no-cache (PNC).    disable:Disable revalidation of pragma-no-cache (PNC).
     *
     * @return self
     */
    public function setRevalPnc($reval_pnc)
    {
        $allowedValues = $this->getRevalPncAllowableValues();
        if (!is_null($reval_pnc) && !in_array($reval_pnc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reval_pnc', must be one of '%s'",
                    $reval_pnc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reval_pnc'] = $reval_pnc;

        return $this;
    }

    /**
     * Gets always_revalidate
     *
     * @return string|null
     */
    public function getAlwaysRevalidate()
    {
        return $this->container['always_revalidate'];
    }

    /**
     * Sets always_revalidate
     *
     * @param string|null $always_revalidate Enable/disable revalidation of requested cached objects, which have content on the server, before serving it to the client.    enable:Enable revalidation of requested cached objects.    disable:Disable revalidation of requested cached objects.
     *
     * @return self
     */
    public function setAlwaysRevalidate($always_revalidate)
    {
        $allowedValues = $this->getAlwaysRevalidateAllowableValues();
        if (!is_null($always_revalidate) && !in_array($always_revalidate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'always_revalidate', must be one of '%s'",
                    $always_revalidate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['always_revalidate'] = $always_revalidate;

        return $this;
    }

    /**
     * Gets cache_by_default
     *
     * @return string|null
     */
    public function getCacheByDefault()
    {
        return $this->container['cache_by_default'];
    }

    /**
     * Sets cache_by_default
     *
     * @param string|null $cache_by_default Enable/disable caching content that lacks explicit caching policies from the server.    enable:Enable caching content that lacks explicit caching policies.    disable:Disable caching content that lacks explicit caching policies.
     *
     * @return self
     */
    public function setCacheByDefault($cache_by_default)
    {
        $allowedValues = $this->getCacheByDefaultAllowableValues();
        if (!is_null($cache_by_default) && !in_array($cache_by_default, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache_by_default', must be one of '%s'",
                    $cache_by_default,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache_by_default'] = $cache_by_default;

        return $this;
    }

    /**
     * Gets host_validate
     *
     * @return string|null
     */
    public function getHostValidate()
    {
        return $this->container['host_validate'];
    }

    /**
     * Sets host_validate
     *
     * @param string|null $host_validate Enable/disable validating \"Host:\" with original server IP.    enable:Enable validating \"Host:\" with original server IP.    disable:Disable validating \"Host:\" with original server IP.
     *
     * @return self
     */
    public function setHostValidate($host_validate)
    {
        $allowedValues = $this->getHostValidateAllowableValues();
        if (!is_null($host_validate) && !in_array($host_validate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'host_validate', must be one of '%s'",
                    $host_validate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['host_validate'] = $host_validate;

        return $this;
    }

    /**
     * Gets external
     *
     * @return string|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param string|null $external Enable/disable external Web caching.    enable:Enable external Web caching.    disable:Disable external Web caching.
     *
     * @return self
     */
    public function setExternal($external)
    {
        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($external) && !in_array($external, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external', must be one of '%s'",
                    $external,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external'] = $external;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


