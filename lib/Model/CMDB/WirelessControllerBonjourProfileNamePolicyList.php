<?php
/**
 * WirelessControllerBonjourProfileNamePolicyList
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerBonjourProfileNamePolicyList Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerBonjourProfileNamePolicyList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_bonjour_profile__name__policy_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policy_id' => 'int',
        'description' => 'string',
        'from_vlan' => 'string',
        'to_vlan' => 'string',
        'services' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'policy_id' => null,
        'description' => null,
        'from_vlan' => null,
        'to_vlan' => null,
        'services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_id' => 'policy-id',
        'description' => 'description',
        'from_vlan' => 'from-vlan',
        'to_vlan' => 'to-vlan',
        'services' => 'services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_id' => 'setPolicyId',
        'description' => 'setDescription',
        'from_vlan' => 'setFromVlan',
        'to_vlan' => 'setToVlan',
        'services' => 'setServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_id' => 'getPolicyId',
        'description' => 'getDescription',
        'from_vlan' => 'getFromVlan',
        'to_vlan' => 'getToVlan',
        'services' => 'getServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SERVICES_ALL = 'all';
    const SERVICES_AIRPLAY = 'airplay';
    const SERVICES_AFP = 'afp';
    const SERVICES_BIT_TORRENT = 'bit-torrent';
    const SERVICES_FTP = 'ftp';
    const SERVICES_ICHAT = 'ichat';
    const SERVICES_ITUNES = 'itunes';
    const SERVICES_PRINTERS = 'printers';
    const SERVICES_SAMBA = 'samba';
    const SERVICES_SCANNERS = 'scanners';
    const SERVICES_SSH = 'ssh';
    const SERVICES_CHROMECAST = 'chromecast';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServicesAllowableValues()
    {
        return [
            self::SERVICES_ALL,
            self::SERVICES_AIRPLAY,
            self::SERVICES_AFP,
            self::SERVICES_BIT_TORRENT,
            self::SERVICES_FTP,
            self::SERVICES_ICHAT,
            self::SERVICES_ITUNES,
            self::SERVICES_PRINTERS,
            self::SERVICES_SAMBA,
            self::SERVICES_SCANNERS,
            self::SERVICES_SSH,
            self::SERVICES_CHROMECAST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_id'] = $data['policy_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['from_vlan'] = $data['from_vlan'] ?? null;
        $this->container['to_vlan'] = $data['to_vlan'] ?? null;
        $this->container['services'] = $data['services'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['policy_id']) && ($this->container['policy_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'policy_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['policy_id']) && ($this->container['policy_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'policy_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 63)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['from_vlan']) && (mb_strlen($this->container['from_vlan']) > 63)) {
            $invalidProperties[] = "invalid value for 'from_vlan', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['to_vlan']) && (mb_strlen($this->container['to_vlan']) > 63)) {
            $invalidProperties[] = "invalid value for 'to_vlan', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getServicesAllowableValues();
        if (!is_null($this->container['services']) && !in_array($this->container['services'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'services', must be one of '%s'",
                $this->container['services'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_id
     *
     * @return int|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param int|null $policy_id Policy ID.
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {

        if (!is_null($policy_id) && ($policy_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $policy_id when calling WirelessControllerBonjourProfileNamePolicyList., must be smaller than or equal to 65535.');
        }
        if (!is_null($policy_id) && ($policy_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $policy_id when calling WirelessControllerBonjourProfileNamePolicyList., must be bigger than or equal to 1.');
        }

        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 63)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WirelessControllerBonjourProfileNamePolicyList., must be smaller than or equal to 63.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets from_vlan
     *
     * @return string|null
     */
    public function getFromVlan()
    {
        return $this->container['from_vlan'];
    }

    /**
     * Sets from_vlan
     *
     * @param string|null $from_vlan VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
     *
     * @return self
     */
    public function setFromVlan($from_vlan)
    {
        if (!is_null($from_vlan) && (mb_strlen($from_vlan) > 63)) {
            throw new \InvalidArgumentException('invalid length for $from_vlan when calling WirelessControllerBonjourProfileNamePolicyList., must be smaller than or equal to 63.');
        }

        $this->container['from_vlan'] = $from_vlan;

        return $this;
    }

    /**
     * Gets to_vlan
     *
     * @return string|null
     */
    public function getToVlan()
    {
        return $this->container['to_vlan'];
    }

    /**
     * Sets to_vlan
     *
     * @param string|null $to_vlan VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
     *
     * @return self
     */
    public function setToVlan($to_vlan)
    {
        if (!is_null($to_vlan) && (mb_strlen($to_vlan) > 63)) {
            throw new \InvalidArgumentException('invalid length for $to_vlan when calling WirelessControllerBonjourProfileNamePolicyList., must be smaller than or equal to 63.');
        }

        $this->container['to_vlan'] = $to_vlan;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string|null $services Bonjour services for the VLAN connecting to the Bonjour network.    all:All services.    airplay:AirPlay.    afp:AFP (Apple File Sharing).    bit-torrent:BitTorrent.    ftp:FTP.    ichat:iChat.    itunes:iTunes.    printers:Printers.    samba:Samba.    scanners:Scanners.    ssh:SSH.    chromecast:ChromeCast.
     *
     * @return self
     */
    public function setServices($services)
    {
        $allowedValues = $this->getServicesAllowableValues();
        if (!is_null($services) && !in_array($services, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'services', must be one of '%s'",
                    $services,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['services'] = $services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


