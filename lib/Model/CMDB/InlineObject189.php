<?php
/**
 * InlineObject189
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject189 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject189 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_189';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'vlanid' => 'int',
        'ip' => 'string',
        'allowaccess' => 'string',
        'auto_ip' => 'string',
        'dhcp_server' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'vlanid' => null,
        'ip' => 'ipv4',
        'allowaccess' => null,
        'auto_ip' => null,
        'dhcp_server' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vlanid' => 'vlanid',
        'ip' => 'ip',
        'allowaccess' => 'allowaccess',
        'auto_ip' => 'auto-ip',
        'dhcp_server' => 'dhcp-server'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vlanid' => 'setVlanid',
        'ip' => 'setIp',
        'allowaccess' => 'setAllowaccess',
        'auto_ip' => 'setAutoIp',
        'dhcp_server' => 'setDhcpServer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vlanid' => 'getVlanid',
        'ip' => 'getIp',
        'allowaccess' => 'getAllowaccess',
        'auto_ip' => 'getAutoIp',
        'dhcp_server' => 'getDhcpServer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALLOWACCESS_PING = 'ping';
    const ALLOWACCESS_HTTPS = 'https';
    const ALLOWACCESS_SSH = 'ssh';
    const ALLOWACCESS_SNMP = 'snmp';
    const ALLOWACCESS_HTTP = 'http';
    const ALLOWACCESS_TELNET = 'telnet';
    const ALLOWACCESS_FGFM = 'fgfm';
    const ALLOWACCESS_RADIUS_ACCT = 'radius-acct';
    const ALLOWACCESS_PROBE_RESPONSE = 'probe-response';
    const ALLOWACCESS_FABRIC = 'fabric';
    const ALLOWACCESS_FTM = 'ftm';
    const AUTO_IP_ENABLE = 'enable';
    const AUTO_IP_DISABLE = 'disable';
    const DHCP_SERVER_ENABLE = 'enable';
    const DHCP_SERVER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowaccessAllowableValues()
    {
        return [
            self::ALLOWACCESS_PING,
            self::ALLOWACCESS_HTTPS,
            self::ALLOWACCESS_SSH,
            self::ALLOWACCESS_SNMP,
            self::ALLOWACCESS_HTTP,
            self::ALLOWACCESS_TELNET,
            self::ALLOWACCESS_FGFM,
            self::ALLOWACCESS_RADIUS_ACCT,
            self::ALLOWACCESS_PROBE_RESPONSE,
            self::ALLOWACCESS_FABRIC,
            self::ALLOWACCESS_FTM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoIpAllowableValues()
    {
        return [
            self::AUTO_IP_ENABLE,
            self::AUTO_IP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpServerAllowableValues()
    {
        return [
            self::DHCP_SERVER_ENABLE,
            self::DHCP_SERVER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['vlanid'] = $data['vlanid'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['allowaccess'] = $data['allowaccess'] ?? null;
        $this->container['auto_ip'] = $data['auto_ip'] ?? null;
        $this->container['dhcp_server'] = $data['dhcp_server'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] > 4094)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] < 1)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($this->container['allowaccess']) && !in_array($this->container['allowaccess'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allowaccess', must be one of '%s'",
                $this->container['allowaccess'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoIpAllowableValues();
        if (!is_null($this->container['auto_ip']) && !in_array($this->container['auto_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_ip', must be one of '%s'",
                $this->container['auto_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpServerAllowableValues();
        if (!is_null($this->container['dhcp_server']) && !in_array($this->container['dhcp_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_server', must be one of '%s'",
                $this->container['dhcp_server'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Initial config template name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject189., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vlanid
     *
     * @return int|null
     */
    public function getVlanid()
    {
        return $this->container['vlanid'];
    }

    /**
     * Sets vlanid
     *
     * @param int|null $vlanid Unique VLAN ID.
     *
     * @return self
     */
    public function setVlanid($vlanid)
    {

        if (!is_null($vlanid) && ($vlanid > 4094)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject189., must be smaller than or equal to 4094.');
        }
        if (!is_null($vlanid) && ($vlanid < 1)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject189., must be bigger than or equal to 1.');
        }

        $this->container['vlanid'] = $vlanid;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Interface IPv4 address and subnet mask.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets allowaccess
     *
     * @return string|null
     */
    public function getAllowaccess()
    {
        return $this->container['allowaccess'];
    }

    /**
     * Sets allowaccess
     *
     * @param string|null $allowaccess Permitted types of management access to this interface.    ping:PING access.    https:HTTPS access.    ssh:SSH access.    snmp:SNMP access.    http:HTTP access.    telnet:TELNET access.    fgfm:FortiManager access.    radius-acct:RADIUS accounting access.    probe-response:Probe access.    fabric:Security Fabric access.    ftm:FTM access.
     *
     * @return self
     */
    public function setAllowaccess($allowaccess)
    {
        $allowedValues = $this->getAllowaccessAllowableValues();
        if (!is_null($allowaccess) && !in_array($allowaccess, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allowaccess', must be one of '%s'",
                    $allowaccess,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowaccess'] = $allowaccess;

        return $this;
    }

    /**
     * Gets auto_ip
     *
     * @return string|null
     */
    public function getAutoIp()
    {
        return $this->container['auto_ip'];
    }

    /**
     * Sets auto_ip
     *
     * @param string|null $auto_ip Automatically allocate interface address and subnet block.    enable:Enable auto-ip status.    disable:Disable auto-ip status.
     *
     * @return self
     */
    public function setAutoIp($auto_ip)
    {
        $allowedValues = $this->getAutoIpAllowableValues();
        if (!is_null($auto_ip) && !in_array($auto_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_ip', must be one of '%s'",
                    $auto_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_ip'] = $auto_ip;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return string|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param string|null $dhcp_server Enable/disable a DHCP server on this interface.    enable:Enable DHCP server.    disable:Disable DHCP server.
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        $allowedValues = $this->getDhcpServerAllowableValues();
        if (!is_null($dhcp_server) && !in_array($dhcp_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_server', must be one of '%s'",
                    $dhcp_server,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


