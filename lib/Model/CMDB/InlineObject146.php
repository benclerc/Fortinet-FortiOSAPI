<?php
/**
 * InlineObject146
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject146 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject146 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_146';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'page_orient' => 'string',
        'column_count' => 'string',
        'default_html_style' => 'string',
        'default_pdf_style' => 'string',
        'page_style' => 'string',
        'page_header_style' => 'string',
        'page_footer_style' => 'string',
        'report_title_style' => 'string',
        'report_subtitle_style' => 'string',
        'toc_title_style' => 'string',
        'toc_heading1_style' => 'string',
        'toc_heading2_style' => 'string',
        'toc_heading3_style' => 'string',
        'toc_heading4_style' => 'string',
        'heading1_style' => 'string',
        'heading2_style' => 'string',
        'heading3_style' => 'string',
        'heading4_style' => 'string',
        'normal_text_style' => 'string',
        'bullet_list_style' => 'string',
        'numbered_list_style' => 'string',
        'image_style' => 'string',
        'hline_style' => 'string',
        'graph_chart_style' => 'string',
        'table_chart_style' => 'string',
        'table_chart_caption_style' => 'string',
        'table_chart_head_style' => 'string',
        'table_chart_odd_row_style' => 'string',
        'table_chart_even_row_style' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'page_orient' => null,
        'column_count' => null,
        'default_html_style' => null,
        'default_pdf_style' => null,
        'page_style' => null,
        'page_header_style' => null,
        'page_footer_style' => null,
        'report_title_style' => null,
        'report_subtitle_style' => null,
        'toc_title_style' => null,
        'toc_heading1_style' => null,
        'toc_heading2_style' => null,
        'toc_heading3_style' => null,
        'toc_heading4_style' => null,
        'heading1_style' => null,
        'heading2_style' => null,
        'heading3_style' => null,
        'heading4_style' => null,
        'normal_text_style' => null,
        'bullet_list_style' => null,
        'numbered_list_style' => null,
        'image_style' => null,
        'hline_style' => null,
        'graph_chart_style' => null,
        'table_chart_style' => null,
        'table_chart_caption_style' => null,
        'table_chart_head_style' => null,
        'table_chart_odd_row_style' => null,
        'table_chart_even_row_style' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'page_orient' => 'page-orient',
        'column_count' => 'column-count',
        'default_html_style' => 'default-html-style',
        'default_pdf_style' => 'default-pdf-style',
        'page_style' => 'page-style',
        'page_header_style' => 'page-header-style',
        'page_footer_style' => 'page-footer-style',
        'report_title_style' => 'report-title-style',
        'report_subtitle_style' => 'report-subtitle-style',
        'toc_title_style' => 'toc-title-style',
        'toc_heading1_style' => 'toc-heading1-style',
        'toc_heading2_style' => 'toc-heading2-style',
        'toc_heading3_style' => 'toc-heading3-style',
        'toc_heading4_style' => 'toc-heading4-style',
        'heading1_style' => 'heading1-style',
        'heading2_style' => 'heading2-style',
        'heading3_style' => 'heading3-style',
        'heading4_style' => 'heading4-style',
        'normal_text_style' => 'normal-text-style',
        'bullet_list_style' => 'bullet-list-style',
        'numbered_list_style' => 'numbered-list-style',
        'image_style' => 'image-style',
        'hline_style' => 'hline-style',
        'graph_chart_style' => 'graph-chart-style',
        'table_chart_style' => 'table-chart-style',
        'table_chart_caption_style' => 'table-chart-caption-style',
        'table_chart_head_style' => 'table-chart-head-style',
        'table_chart_odd_row_style' => 'table-chart-odd-row-style',
        'table_chart_even_row_style' => 'table-chart-even-row-style'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'page_orient' => 'setPageOrient',
        'column_count' => 'setColumnCount',
        'default_html_style' => 'setDefaultHtmlStyle',
        'default_pdf_style' => 'setDefaultPdfStyle',
        'page_style' => 'setPageStyle',
        'page_header_style' => 'setPageHeaderStyle',
        'page_footer_style' => 'setPageFooterStyle',
        'report_title_style' => 'setReportTitleStyle',
        'report_subtitle_style' => 'setReportSubtitleStyle',
        'toc_title_style' => 'setTocTitleStyle',
        'toc_heading1_style' => 'setTocHeading1Style',
        'toc_heading2_style' => 'setTocHeading2Style',
        'toc_heading3_style' => 'setTocHeading3Style',
        'toc_heading4_style' => 'setTocHeading4Style',
        'heading1_style' => 'setHeading1Style',
        'heading2_style' => 'setHeading2Style',
        'heading3_style' => 'setHeading3Style',
        'heading4_style' => 'setHeading4Style',
        'normal_text_style' => 'setNormalTextStyle',
        'bullet_list_style' => 'setBulletListStyle',
        'numbered_list_style' => 'setNumberedListStyle',
        'image_style' => 'setImageStyle',
        'hline_style' => 'setHlineStyle',
        'graph_chart_style' => 'setGraphChartStyle',
        'table_chart_style' => 'setTableChartStyle',
        'table_chart_caption_style' => 'setTableChartCaptionStyle',
        'table_chart_head_style' => 'setTableChartHeadStyle',
        'table_chart_odd_row_style' => 'setTableChartOddRowStyle',
        'table_chart_even_row_style' => 'setTableChartEvenRowStyle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'page_orient' => 'getPageOrient',
        'column_count' => 'getColumnCount',
        'default_html_style' => 'getDefaultHtmlStyle',
        'default_pdf_style' => 'getDefaultPdfStyle',
        'page_style' => 'getPageStyle',
        'page_header_style' => 'getPageHeaderStyle',
        'page_footer_style' => 'getPageFooterStyle',
        'report_title_style' => 'getReportTitleStyle',
        'report_subtitle_style' => 'getReportSubtitleStyle',
        'toc_title_style' => 'getTocTitleStyle',
        'toc_heading1_style' => 'getTocHeading1Style',
        'toc_heading2_style' => 'getTocHeading2Style',
        'toc_heading3_style' => 'getTocHeading3Style',
        'toc_heading4_style' => 'getTocHeading4Style',
        'heading1_style' => 'getHeading1Style',
        'heading2_style' => 'getHeading2Style',
        'heading3_style' => 'getHeading3Style',
        'heading4_style' => 'getHeading4Style',
        'normal_text_style' => 'getNormalTextStyle',
        'bullet_list_style' => 'getBulletListStyle',
        'numbered_list_style' => 'getNumberedListStyle',
        'image_style' => 'getImageStyle',
        'hline_style' => 'getHlineStyle',
        'graph_chart_style' => 'getGraphChartStyle',
        'table_chart_style' => 'getTableChartStyle',
        'table_chart_caption_style' => 'getTableChartCaptionStyle',
        'table_chart_head_style' => 'getTableChartHeadStyle',
        'table_chart_odd_row_style' => 'getTableChartOddRowStyle',
        'table_chart_even_row_style' => 'getTableChartEvenRowStyle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAGE_ORIENT_PORTRAIT = 'portrait';
    const PAGE_ORIENT_LANDSCAPE = 'landscape';
    const COLUMN_COUNT__1 = '1';
    const COLUMN_COUNT__2 = '2';
    const COLUMN_COUNT__3 = '3';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageOrientAllowableValues()
    {
        return [
            self::PAGE_ORIENT_PORTRAIT,
            self::PAGE_ORIENT_LANDSCAPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColumnCountAllowableValues()
    {
        return [
            self::COLUMN_COUNT__1,
            self::COLUMN_COUNT__2,
            self::COLUMN_COUNT__3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['page_orient'] = $data['page_orient'] ?? null;
        $this->container['column_count'] = $data['column_count'] ?? null;
        $this->container['default_html_style'] = $data['default_html_style'] ?? null;
        $this->container['default_pdf_style'] = $data['default_pdf_style'] ?? null;
        $this->container['page_style'] = $data['page_style'] ?? null;
        $this->container['page_header_style'] = $data['page_header_style'] ?? null;
        $this->container['page_footer_style'] = $data['page_footer_style'] ?? null;
        $this->container['report_title_style'] = $data['report_title_style'] ?? null;
        $this->container['report_subtitle_style'] = $data['report_subtitle_style'] ?? null;
        $this->container['toc_title_style'] = $data['toc_title_style'] ?? null;
        $this->container['toc_heading1_style'] = $data['toc_heading1_style'] ?? null;
        $this->container['toc_heading2_style'] = $data['toc_heading2_style'] ?? null;
        $this->container['toc_heading3_style'] = $data['toc_heading3_style'] ?? null;
        $this->container['toc_heading4_style'] = $data['toc_heading4_style'] ?? null;
        $this->container['heading1_style'] = $data['heading1_style'] ?? null;
        $this->container['heading2_style'] = $data['heading2_style'] ?? null;
        $this->container['heading3_style'] = $data['heading3_style'] ?? null;
        $this->container['heading4_style'] = $data['heading4_style'] ?? null;
        $this->container['normal_text_style'] = $data['normal_text_style'] ?? null;
        $this->container['bullet_list_style'] = $data['bullet_list_style'] ?? null;
        $this->container['numbered_list_style'] = $data['numbered_list_style'] ?? null;
        $this->container['image_style'] = $data['image_style'] ?? null;
        $this->container['hline_style'] = $data['hline_style'] ?? null;
        $this->container['graph_chart_style'] = $data['graph_chart_style'] ?? null;
        $this->container['table_chart_style'] = $data['table_chart_style'] ?? null;
        $this->container['table_chart_caption_style'] = $data['table_chart_caption_style'] ?? null;
        $this->container['table_chart_head_style'] = $data['table_chart_head_style'] ?? null;
        $this->container['table_chart_odd_row_style'] = $data['table_chart_odd_row_style'] ?? null;
        $this->container['table_chart_even_row_style'] = $data['table_chart_even_row_style'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getPageOrientAllowableValues();
        if (!is_null($this->container['page_orient']) && !in_array($this->container['page_orient'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'page_orient', must be one of '%s'",
                $this->container['page_orient'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getColumnCountAllowableValues();
        if (!is_null($this->container['column_count']) && !in_array($this->container['column_count'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'column_count', must be one of '%s'",
                $this->container['column_count'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['default_html_style']) && (mb_strlen($this->container['default_html_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'default_html_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['default_pdf_style']) && (mb_strlen($this->container['default_pdf_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'default_pdf_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['page_style']) && (mb_strlen($this->container['page_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'page_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['page_header_style']) && (mb_strlen($this->container['page_header_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'page_header_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['page_footer_style']) && (mb_strlen($this->container['page_footer_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'page_footer_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['report_title_style']) && (mb_strlen($this->container['report_title_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'report_title_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['report_subtitle_style']) && (mb_strlen($this->container['report_subtitle_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'report_subtitle_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['toc_title_style']) && (mb_strlen($this->container['toc_title_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'toc_title_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['toc_heading1_style']) && (mb_strlen($this->container['toc_heading1_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'toc_heading1_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['toc_heading2_style']) && (mb_strlen($this->container['toc_heading2_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'toc_heading2_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['toc_heading3_style']) && (mb_strlen($this->container['toc_heading3_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'toc_heading3_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['toc_heading4_style']) && (mb_strlen($this->container['toc_heading4_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'toc_heading4_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['heading1_style']) && (mb_strlen($this->container['heading1_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'heading1_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['heading2_style']) && (mb_strlen($this->container['heading2_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'heading2_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['heading3_style']) && (mb_strlen($this->container['heading3_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'heading3_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['heading4_style']) && (mb_strlen($this->container['heading4_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'heading4_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['normal_text_style']) && (mb_strlen($this->container['normal_text_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'normal_text_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['bullet_list_style']) && (mb_strlen($this->container['bullet_list_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'bullet_list_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['numbered_list_style']) && (mb_strlen($this->container['numbered_list_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'numbered_list_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['image_style']) && (mb_strlen($this->container['image_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'image_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['hline_style']) && (mb_strlen($this->container['hline_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'hline_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['graph_chart_style']) && (mb_strlen($this->container['graph_chart_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'graph_chart_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_chart_style']) && (mb_strlen($this->container['table_chart_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_chart_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_chart_caption_style']) && (mb_strlen($this->container['table_chart_caption_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_chart_caption_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_chart_head_style']) && (mb_strlen($this->container['table_chart_head_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_chart_head_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_chart_odd_row_style']) && (mb_strlen($this->container['table_chart_odd_row_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_chart_odd_row_style', the character length must be smaller than or equal to 71.";
        }

        if (!is_null($this->container['table_chart_even_row_style']) && (mb_strlen($this->container['table_chart_even_row_style']) > 71)) {
            $invalidProperties[] = "invalid value for 'table_chart_even_row_style', the character length must be smaller than or equal to 71.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Report theme name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject146., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_orient
     *
     * @return string|null
     */
    public function getPageOrient()
    {
        return $this->container['page_orient'];
    }

    /**
     * Sets page_orient
     *
     * @param string|null $page_orient Report page orientation.    portrait:Portrait Orientation.    landscape:Landscape Orientation.
     *
     * @return self
     */
    public function setPageOrient($page_orient)
    {
        $allowedValues = $this->getPageOrientAllowableValues();
        if (!is_null($page_orient) && !in_array($page_orient, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'page_orient', must be one of '%s'",
                    $page_orient,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['page_orient'] = $page_orient;

        return $this;
    }

    /**
     * Gets column_count
     *
     * @return string|null
     */
    public function getColumnCount()
    {
        return $this->container['column_count'];
    }

    /**
     * Sets column_count
     *
     * @param string|null $column_count Report page column count.    1:One Column.    2:Two Columns.    3:Three Columns.
     *
     * @return self
     */
    public function setColumnCount($column_count)
    {
        $allowedValues = $this->getColumnCountAllowableValues();
        if (!is_null($column_count) && !in_array($column_count, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'column_count', must be one of '%s'",
                    $column_count,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['column_count'] = $column_count;

        return $this;
    }

    /**
     * Gets default_html_style
     *
     * @return string|null
     */
    public function getDefaultHtmlStyle()
    {
        return $this->container['default_html_style'];
    }

    /**
     * Sets default_html_style
     *
     * @param string|null $default_html_style Default HTML report style.
     *
     * @return self
     */
    public function setDefaultHtmlStyle($default_html_style)
    {
        if (!is_null($default_html_style) && (mb_strlen($default_html_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $default_html_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['default_html_style'] = $default_html_style;

        return $this;
    }

    /**
     * Gets default_pdf_style
     *
     * @return string|null
     */
    public function getDefaultPdfStyle()
    {
        return $this->container['default_pdf_style'];
    }

    /**
     * Sets default_pdf_style
     *
     * @param string|null $default_pdf_style Default PDF report style.
     *
     * @return self
     */
    public function setDefaultPdfStyle($default_pdf_style)
    {
        if (!is_null($default_pdf_style) && (mb_strlen($default_pdf_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $default_pdf_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['default_pdf_style'] = $default_pdf_style;

        return $this;
    }

    /**
     * Gets page_style
     *
     * @return string|null
     */
    public function getPageStyle()
    {
        return $this->container['page_style'];
    }

    /**
     * Sets page_style
     *
     * @param string|null $page_style Report page style.
     *
     * @return self
     */
    public function setPageStyle($page_style)
    {
        if (!is_null($page_style) && (mb_strlen($page_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $page_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['page_style'] = $page_style;

        return $this;
    }

    /**
     * Gets page_header_style
     *
     * @return string|null
     */
    public function getPageHeaderStyle()
    {
        return $this->container['page_header_style'];
    }

    /**
     * Sets page_header_style
     *
     * @param string|null $page_header_style Report page header style.
     *
     * @return self
     */
    public function setPageHeaderStyle($page_header_style)
    {
        if (!is_null($page_header_style) && (mb_strlen($page_header_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $page_header_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['page_header_style'] = $page_header_style;

        return $this;
    }

    /**
     * Gets page_footer_style
     *
     * @return string|null
     */
    public function getPageFooterStyle()
    {
        return $this->container['page_footer_style'];
    }

    /**
     * Sets page_footer_style
     *
     * @param string|null $page_footer_style Report page footer style.
     *
     * @return self
     */
    public function setPageFooterStyle($page_footer_style)
    {
        if (!is_null($page_footer_style) && (mb_strlen($page_footer_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $page_footer_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['page_footer_style'] = $page_footer_style;

        return $this;
    }

    /**
     * Gets report_title_style
     *
     * @return string|null
     */
    public function getReportTitleStyle()
    {
        return $this->container['report_title_style'];
    }

    /**
     * Sets report_title_style
     *
     * @param string|null $report_title_style Report title style.
     *
     * @return self
     */
    public function setReportTitleStyle($report_title_style)
    {
        if (!is_null($report_title_style) && (mb_strlen($report_title_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $report_title_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['report_title_style'] = $report_title_style;

        return $this;
    }

    /**
     * Gets report_subtitle_style
     *
     * @return string|null
     */
    public function getReportSubtitleStyle()
    {
        return $this->container['report_subtitle_style'];
    }

    /**
     * Sets report_subtitle_style
     *
     * @param string|null $report_subtitle_style Report subtitle style.
     *
     * @return self
     */
    public function setReportSubtitleStyle($report_subtitle_style)
    {
        if (!is_null($report_subtitle_style) && (mb_strlen($report_subtitle_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $report_subtitle_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['report_subtitle_style'] = $report_subtitle_style;

        return $this;
    }

    /**
     * Gets toc_title_style
     *
     * @return string|null
     */
    public function getTocTitleStyle()
    {
        return $this->container['toc_title_style'];
    }

    /**
     * Sets toc_title_style
     *
     * @param string|null $toc_title_style Table of contents title style.
     *
     * @return self
     */
    public function setTocTitleStyle($toc_title_style)
    {
        if (!is_null($toc_title_style) && (mb_strlen($toc_title_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $toc_title_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['toc_title_style'] = $toc_title_style;

        return $this;
    }

    /**
     * Gets toc_heading1_style
     *
     * @return string|null
     */
    public function getTocHeading1Style()
    {
        return $this->container['toc_heading1_style'];
    }

    /**
     * Sets toc_heading1_style
     *
     * @param string|null $toc_heading1_style Table of contents heading style.
     *
     * @return self
     */
    public function setTocHeading1Style($toc_heading1_style)
    {
        if (!is_null($toc_heading1_style) && (mb_strlen($toc_heading1_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $toc_heading1_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['toc_heading1_style'] = $toc_heading1_style;

        return $this;
    }

    /**
     * Gets toc_heading2_style
     *
     * @return string|null
     */
    public function getTocHeading2Style()
    {
        return $this->container['toc_heading2_style'];
    }

    /**
     * Sets toc_heading2_style
     *
     * @param string|null $toc_heading2_style Table of contents heading style.
     *
     * @return self
     */
    public function setTocHeading2Style($toc_heading2_style)
    {
        if (!is_null($toc_heading2_style) && (mb_strlen($toc_heading2_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $toc_heading2_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['toc_heading2_style'] = $toc_heading2_style;

        return $this;
    }

    /**
     * Gets toc_heading3_style
     *
     * @return string|null
     */
    public function getTocHeading3Style()
    {
        return $this->container['toc_heading3_style'];
    }

    /**
     * Sets toc_heading3_style
     *
     * @param string|null $toc_heading3_style Table of contents heading style.
     *
     * @return self
     */
    public function setTocHeading3Style($toc_heading3_style)
    {
        if (!is_null($toc_heading3_style) && (mb_strlen($toc_heading3_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $toc_heading3_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['toc_heading3_style'] = $toc_heading3_style;

        return $this;
    }

    /**
     * Gets toc_heading4_style
     *
     * @return string|null
     */
    public function getTocHeading4Style()
    {
        return $this->container['toc_heading4_style'];
    }

    /**
     * Sets toc_heading4_style
     *
     * @param string|null $toc_heading4_style Table of contents heading style.
     *
     * @return self
     */
    public function setTocHeading4Style($toc_heading4_style)
    {
        if (!is_null($toc_heading4_style) && (mb_strlen($toc_heading4_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $toc_heading4_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['toc_heading4_style'] = $toc_heading4_style;

        return $this;
    }

    /**
     * Gets heading1_style
     *
     * @return string|null
     */
    public function getHeading1Style()
    {
        return $this->container['heading1_style'];
    }

    /**
     * Sets heading1_style
     *
     * @param string|null $heading1_style Report heading style.
     *
     * @return self
     */
    public function setHeading1Style($heading1_style)
    {
        if (!is_null($heading1_style) && (mb_strlen($heading1_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $heading1_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['heading1_style'] = $heading1_style;

        return $this;
    }

    /**
     * Gets heading2_style
     *
     * @return string|null
     */
    public function getHeading2Style()
    {
        return $this->container['heading2_style'];
    }

    /**
     * Sets heading2_style
     *
     * @param string|null $heading2_style Report heading style.
     *
     * @return self
     */
    public function setHeading2Style($heading2_style)
    {
        if (!is_null($heading2_style) && (mb_strlen($heading2_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $heading2_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['heading2_style'] = $heading2_style;

        return $this;
    }

    /**
     * Gets heading3_style
     *
     * @return string|null
     */
    public function getHeading3Style()
    {
        return $this->container['heading3_style'];
    }

    /**
     * Sets heading3_style
     *
     * @param string|null $heading3_style Report heading style.
     *
     * @return self
     */
    public function setHeading3Style($heading3_style)
    {
        if (!is_null($heading3_style) && (mb_strlen($heading3_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $heading3_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['heading3_style'] = $heading3_style;

        return $this;
    }

    /**
     * Gets heading4_style
     *
     * @return string|null
     */
    public function getHeading4Style()
    {
        return $this->container['heading4_style'];
    }

    /**
     * Sets heading4_style
     *
     * @param string|null $heading4_style Report heading style.
     *
     * @return self
     */
    public function setHeading4Style($heading4_style)
    {
        if (!is_null($heading4_style) && (mb_strlen($heading4_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $heading4_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['heading4_style'] = $heading4_style;

        return $this;
    }

    /**
     * Gets normal_text_style
     *
     * @return string|null
     */
    public function getNormalTextStyle()
    {
        return $this->container['normal_text_style'];
    }

    /**
     * Sets normal_text_style
     *
     * @param string|null $normal_text_style Normal text style.
     *
     * @return self
     */
    public function setNormalTextStyle($normal_text_style)
    {
        if (!is_null($normal_text_style) && (mb_strlen($normal_text_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $normal_text_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['normal_text_style'] = $normal_text_style;

        return $this;
    }

    /**
     * Gets bullet_list_style
     *
     * @return string|null
     */
    public function getBulletListStyle()
    {
        return $this->container['bullet_list_style'];
    }

    /**
     * Sets bullet_list_style
     *
     * @param string|null $bullet_list_style Bullet list style.
     *
     * @return self
     */
    public function setBulletListStyle($bullet_list_style)
    {
        if (!is_null($bullet_list_style) && (mb_strlen($bullet_list_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $bullet_list_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['bullet_list_style'] = $bullet_list_style;

        return $this;
    }

    /**
     * Gets numbered_list_style
     *
     * @return string|null
     */
    public function getNumberedListStyle()
    {
        return $this->container['numbered_list_style'];
    }

    /**
     * Sets numbered_list_style
     *
     * @param string|null $numbered_list_style Numbered list style.
     *
     * @return self
     */
    public function setNumberedListStyle($numbered_list_style)
    {
        if (!is_null($numbered_list_style) && (mb_strlen($numbered_list_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $numbered_list_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['numbered_list_style'] = $numbered_list_style;

        return $this;
    }

    /**
     * Gets image_style
     *
     * @return string|null
     */
    public function getImageStyle()
    {
        return $this->container['image_style'];
    }

    /**
     * Sets image_style
     *
     * @param string|null $image_style Image style.
     *
     * @return self
     */
    public function setImageStyle($image_style)
    {
        if (!is_null($image_style) && (mb_strlen($image_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $image_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['image_style'] = $image_style;

        return $this;
    }

    /**
     * Gets hline_style
     *
     * @return string|null
     */
    public function getHlineStyle()
    {
        return $this->container['hline_style'];
    }

    /**
     * Sets hline_style
     *
     * @param string|null $hline_style Horizontal line style.
     *
     * @return self
     */
    public function setHlineStyle($hline_style)
    {
        if (!is_null($hline_style) && (mb_strlen($hline_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $hline_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['hline_style'] = $hline_style;

        return $this;
    }

    /**
     * Gets graph_chart_style
     *
     * @return string|null
     */
    public function getGraphChartStyle()
    {
        return $this->container['graph_chart_style'];
    }

    /**
     * Sets graph_chart_style
     *
     * @param string|null $graph_chart_style Graph chart style.
     *
     * @return self
     */
    public function setGraphChartStyle($graph_chart_style)
    {
        if (!is_null($graph_chart_style) && (mb_strlen($graph_chart_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $graph_chart_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['graph_chart_style'] = $graph_chart_style;

        return $this;
    }

    /**
     * Gets table_chart_style
     *
     * @return string|null
     */
    public function getTableChartStyle()
    {
        return $this->container['table_chart_style'];
    }

    /**
     * Sets table_chart_style
     *
     * @param string|null $table_chart_style Table chart style.
     *
     * @return self
     */
    public function setTableChartStyle($table_chart_style)
    {
        if (!is_null($table_chart_style) && (mb_strlen($table_chart_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_chart_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['table_chart_style'] = $table_chart_style;

        return $this;
    }

    /**
     * Gets table_chart_caption_style
     *
     * @return string|null
     */
    public function getTableChartCaptionStyle()
    {
        return $this->container['table_chart_caption_style'];
    }

    /**
     * Sets table_chart_caption_style
     *
     * @param string|null $table_chart_caption_style Table chart caption style.
     *
     * @return self
     */
    public function setTableChartCaptionStyle($table_chart_caption_style)
    {
        if (!is_null($table_chart_caption_style) && (mb_strlen($table_chart_caption_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_chart_caption_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['table_chart_caption_style'] = $table_chart_caption_style;

        return $this;
    }

    /**
     * Gets table_chart_head_style
     *
     * @return string|null
     */
    public function getTableChartHeadStyle()
    {
        return $this->container['table_chart_head_style'];
    }

    /**
     * Sets table_chart_head_style
     *
     * @param string|null $table_chart_head_style Table chart head row style.
     *
     * @return self
     */
    public function setTableChartHeadStyle($table_chart_head_style)
    {
        if (!is_null($table_chart_head_style) && (mb_strlen($table_chart_head_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_chart_head_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['table_chart_head_style'] = $table_chart_head_style;

        return $this;
    }

    /**
     * Gets table_chart_odd_row_style
     *
     * @return string|null
     */
    public function getTableChartOddRowStyle()
    {
        return $this->container['table_chart_odd_row_style'];
    }

    /**
     * Sets table_chart_odd_row_style
     *
     * @param string|null $table_chart_odd_row_style Table chart odd row style.
     *
     * @return self
     */
    public function setTableChartOddRowStyle($table_chart_odd_row_style)
    {
        if (!is_null($table_chart_odd_row_style) && (mb_strlen($table_chart_odd_row_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_chart_odd_row_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['table_chart_odd_row_style'] = $table_chart_odd_row_style;

        return $this;
    }

    /**
     * Gets table_chart_even_row_style
     *
     * @return string|null
     */
    public function getTableChartEvenRowStyle()
    {
        return $this->container['table_chart_even_row_style'];
    }

    /**
     * Sets table_chart_even_row_style
     *
     * @param string|null $table_chart_even_row_style Table chart even row style.
     *
     * @return self
     */
    public function setTableChartEvenRowStyle($table_chart_even_row_style)
    {
        if (!is_null($table_chart_even_row_style) && (mb_strlen($table_chart_even_row_style) > 71)) {
            throw new \InvalidArgumentException('invalid length for $table_chart_even_row_style when calling InlineObject146., must be smaller than or equal to 71.');
        }

        $this->container['table_chart_even_row_style'] = $table_chart_even_row_style;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


