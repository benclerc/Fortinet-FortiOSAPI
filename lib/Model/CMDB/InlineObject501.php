<?php
/**
 * InlineObject501
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject501 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject501 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_501';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'external' => 'string',
        'extended_log' => 'string',
        'signature' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameSignature[]',
        'constraint' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameConstraint[]',
        'method' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameMethod[]',
        'address_list' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameAddressList[]',
        'url_access' => '\Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlAccess[]',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'external' => null,
        'extended_log' => null,
        'signature' => null,
        'constraint' => null,
        'method' => null,
        'address_list' => null,
        'url_access' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'external' => 'external',
        'extended_log' => 'extended-log',
        'signature' => 'signature',
        'constraint' => 'constraint',
        'method' => 'method',
        'address_list' => 'address-list',
        'url_access' => 'url-access',
        'comment' => 'comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'external' => 'setExternal',
        'extended_log' => 'setExtendedLog',
        'signature' => 'setSignature',
        'constraint' => 'setConstraint',
        'method' => 'setMethod',
        'address_list' => 'setAddressList',
        'url_access' => 'setUrlAccess',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'external' => 'getExternal',
        'extended_log' => 'getExtendedLog',
        'signature' => 'getSignature',
        'constraint' => 'getConstraint',
        'method' => 'getMethod',
        'address_list' => 'getAddressList',
        'url_access' => 'getUrlAccess',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EXTERNAL_DISABLE = 'disable';
    const EXTERNAL_ENABLE = 'enable';
    const EXTENDED_LOG_ENABLE = 'enable';
    const EXTENDED_LOG_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalAllowableValues()
    {
        return [
            self::EXTERNAL_DISABLE,
            self::EXTERNAL_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtendedLogAllowableValues()
    {
        return [
            self::EXTENDED_LOG_ENABLE,
            self::EXTENDED_LOG_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['external'] = $data['external'] ?? null;
        $this->container['extended_log'] = $data['extended_log'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
        $this->container['constraint'] = $data['constraint'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['address_list'] = $data['address_list'] ?? null;
        $this->container['url_access'] = $data['url_access'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($this->container['external']) && !in_array($this->container['external'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external', must be one of '%s'",
                $this->container['external'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($this->container['extended_log']) && !in_array($this->container['extended_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'extended_log', must be one of '%s'",
                $this->container['extended_log'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['signature']) && (count($this->container['signature']) > 0)) {
            $invalidProperties[] = "invalid value for 'signature', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['constraint']) && (count($this->container['constraint']) > 0)) {
            $invalidProperties[] = "invalid value for 'constraint', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['method']) && (count($this->container['method']) > 0)) {
            $invalidProperties[] = "invalid value for 'method', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['address_list']) && (count($this->container['address_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'address_list', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['url_access']) && (count($this->container['url_access']) > 0)) {
            $invalidProperties[] = "invalid value for 'url_access', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 1023)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 1023.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name WAF Profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject501., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external
     *
     * @return string|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param string|null $external Disable/Enable external HTTP Inspection.    disable:Disable external inspection.    enable:Enable external inspection.
     *
     * @return self
     */
    public function setExternal($external)
    {
        $allowedValues = $this->getExternalAllowableValues();
        if (!is_null($external) && !in_array($external, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external', must be one of '%s'",
                    $external,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets extended_log
     *
     * @return string|null
     */
    public function getExtendedLog()
    {
        return $this->container['extended_log'];
    }

    /**
     * Sets extended_log
     *
     * @param string|null $extended_log Enable/disable extended logging.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setExtendedLog($extended_log)
    {
        $allowedValues = $this->getExtendedLogAllowableValues();
        if (!is_null($extended_log) && !in_array($extended_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'extended_log', must be one of '%s'",
                    $extended_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extended_log'] = $extended_log;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameSignature[]|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameSignature[]|null $signature WAF signatures.
     *
     * @return self
     */
    public function setSignature($signature)
    {

        if (!is_null($signature) && (count($signature) > 0)) {
            throw new \InvalidArgumentException('invalid value for $signature when calling InlineObject501., number of items must be less than or equal to 0.');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets constraint
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameConstraint[]|null
     */
    public function getConstraint()
    {
        return $this->container['constraint'];
    }

    /**
     * Sets constraint
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameConstraint[]|null $constraint WAF HTTP protocol restrictions.
     *
     * @return self
     */
    public function setConstraint($constraint)
    {

        if (!is_null($constraint) && (count($constraint) > 0)) {
            throw new \InvalidArgumentException('invalid value for $constraint when calling InlineObject501., number of items must be less than or equal to 0.');
        }
        $this->container['constraint'] = $constraint;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameMethod[]|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameMethod[]|null $method Method restriction.
     *
     * @return self
     */
    public function setMethod($method)
    {

        if (!is_null($method) && (count($method) > 0)) {
            throw new \InvalidArgumentException('invalid value for $method when calling InlineObject501., number of items must be less than or equal to 0.');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets address_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameAddressList[]|null
     */
    public function getAddressList()
    {
        return $this->container['address_list'];
    }

    /**
     * Sets address_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameAddressList[]|null $address_list Black address list and white address list.
     *
     * @return self
     */
    public function setAddressList($address_list)
    {

        if (!is_null($address_list) && (count($address_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $address_list when calling InlineObject501., number of items must be less than or equal to 0.');
        }
        $this->container['address_list'] = $address_list;

        return $this;
    }

    /**
     * Gets url_access
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlAccess[]|null
     */
    public function getUrlAccess()
    {
        return $this->container['url_access'];
    }

    /**
     * Sets url_access
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WafProfileNameUrlAccess[]|null $url_access URL access list
     *
     * @return self
     */
    public function setUrlAccess($url_access)
    {

        if (!is_null($url_access) && (count($url_access) > 0)) {
            throw new \InvalidArgumentException('invalid value for $url_access when calling InlineObject501., number of items must be less than or equal to 0.');
        }
        $this->container['url_access'] = $url_access;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 1023)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling InlineObject501., must be smaller than or equal to 1023.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


