<?php
/**
 * InlineObject387
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject387 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject387 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_387';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'switch_priority' => 'string',
        'hello_time' => 'int',
        'forward_delay' => 'int',
        'max_age' => 'int',
        'max_hops' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'switch_priority' => null,
        'hello_time' => null,
        'forward_delay' => null,
        'max_age' => null,
        'max_hops' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'switch_priority' => 'switch-priority',
        'hello_time' => 'hello-time',
        'forward_delay' => 'forward-delay',
        'max_age' => 'max-age',
        'max_hops' => 'max-hops'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'switch_priority' => 'setSwitchPriority',
        'hello_time' => 'setHelloTime',
        'forward_delay' => 'setForwardDelay',
        'max_age' => 'setMaxAge',
        'max_hops' => 'setMaxHops'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'switch_priority' => 'getSwitchPriority',
        'hello_time' => 'getHelloTime',
        'forward_delay' => 'getForwardDelay',
        'max_age' => 'getMaxAge',
        'max_hops' => 'getMaxHops'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SWITCH_PRIORITY__0 = '0';
    const SWITCH_PRIORITY__4096 = '4096';
    const SWITCH_PRIORITY__8192 = '8192';
    const SWITCH_PRIORITY__12288 = '12288';
    const SWITCH_PRIORITY__16384 = '16384';
    const SWITCH_PRIORITY__20480 = '20480';
    const SWITCH_PRIORITY__24576 = '24576';
    const SWITCH_PRIORITY__28672 = '28672';
    const SWITCH_PRIORITY__32768 = '32768';
    const SWITCH_PRIORITY__36864 = '36864';
    const SWITCH_PRIORITY__40960 = '40960';
    const SWITCH_PRIORITY__45056 = '45056';
    const SWITCH_PRIORITY__49152 = '49152';
    const SWITCH_PRIORITY__53248 = '53248';
    const SWITCH_PRIORITY__57344 = '57344';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchPriorityAllowableValues()
    {
        return [
            self::SWITCH_PRIORITY__0,
            self::SWITCH_PRIORITY__4096,
            self::SWITCH_PRIORITY__8192,
            self::SWITCH_PRIORITY__12288,
            self::SWITCH_PRIORITY__16384,
            self::SWITCH_PRIORITY__20480,
            self::SWITCH_PRIORITY__24576,
            self::SWITCH_PRIORITY__28672,
            self::SWITCH_PRIORITY__32768,
            self::SWITCH_PRIORITY__36864,
            self::SWITCH_PRIORITY__40960,
            self::SWITCH_PRIORITY__45056,
            self::SWITCH_PRIORITY__49152,
            self::SWITCH_PRIORITY__53248,
            self::SWITCH_PRIORITY__57344,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['switch_priority'] = $data['switch_priority'] ?? null;
        $this->container['hello_time'] = $data['hello_time'] ?? null;
        $this->container['forward_delay'] = $data['forward_delay'] ?? null;
        $this->container['max_age'] = $data['max_age'] ?? null;
        $this->container['max_hops'] = $data['max_hops'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSwitchPriorityAllowableValues();
        if (!is_null($this->container['switch_priority']) && !in_array($this->container['switch_priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_priority', must be one of '%s'",
                $this->container['switch_priority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['hello_time']) && ($this->container['hello_time'] > 10)) {
            $invalidProperties[] = "invalid value for 'hello_time', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['hello_time']) && ($this->container['hello_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'hello_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['forward_delay']) && ($this->container['forward_delay'] > 30)) {
            $invalidProperties[] = "invalid value for 'forward_delay', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['forward_delay']) && ($this->container['forward_delay'] < 4)) {
            $invalidProperties[] = "invalid value for 'forward_delay', must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['max_age']) && ($this->container['max_age'] > 40)) {
            $invalidProperties[] = "invalid value for 'max_age', must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['max_age']) && ($this->container['max_age'] < 6)) {
            $invalidProperties[] = "invalid value for 'max_age', must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['max_hops']) && ($this->container['max_hops'] > 40)) {
            $invalidProperties[] = "invalid value for 'max_hops', must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['max_hops']) && ($this->container['max_hops'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_hops', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets switch_priority
     *
     * @return string|null
     */
    public function getSwitchPriority()
    {
        return $this->container['switch_priority'];
    }

    /**
     * Sets switch_priority
     *
     * @param string|null $switch_priority STP switch priority; the lower the number the higher the priority (select from 0, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, and 57344).    0:0    4096:4096    8192:8192    12288:12288    16384:16384    20480:20480    24576:24576    28672:28672    32768:32768    36864:36864    40960:40960    45056:45056    49152:49152    53248:53248    57344:57344
     *
     * @return self
     */
    public function setSwitchPriority($switch_priority)
    {
        $allowedValues = $this->getSwitchPriorityAllowableValues();
        if (!is_null($switch_priority) && !in_array($switch_priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_priority', must be one of '%s'",
                    $switch_priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_priority'] = $switch_priority;

        return $this;
    }

    /**
     * Gets hello_time
     *
     * @return int|null
     */
    public function getHelloTime()
    {
        return $this->container['hello_time'];
    }

    /**
     * Sets hello_time
     *
     * @param int|null $hello_time Hello time (1 - 10 sec, default = 2).
     *
     * @return self
     */
    public function setHelloTime($hello_time)
    {

        if (!is_null($hello_time) && ($hello_time > 10)) {
            throw new \InvalidArgumentException('invalid value for $hello_time when calling InlineObject387., must be smaller than or equal to 10.');
        }
        if (!is_null($hello_time) && ($hello_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $hello_time when calling InlineObject387., must be bigger than or equal to 1.');
        }

        $this->container['hello_time'] = $hello_time;

        return $this;
    }

    /**
     * Gets forward_delay
     *
     * @return int|null
     */
    public function getForwardDelay()
    {
        return $this->container['forward_delay'];
    }

    /**
     * Sets forward_delay
     *
     * @param int|null $forward_delay Forward delay (4 - 30 sec, default = 15).
     *
     * @return self
     */
    public function setForwardDelay($forward_delay)
    {

        if (!is_null($forward_delay) && ($forward_delay > 30)) {
            throw new \InvalidArgumentException('invalid value for $forward_delay when calling InlineObject387., must be smaller than or equal to 30.');
        }
        if (!is_null($forward_delay) && ($forward_delay < 4)) {
            throw new \InvalidArgumentException('invalid value for $forward_delay when calling InlineObject387., must be bigger than or equal to 4.');
        }

        $this->container['forward_delay'] = $forward_delay;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return int|null
     */
    public function getMaxAge()
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param int|null $max_age Maximum packet age (6 - 40 sec, default = 20).
     *
     * @return self
     */
    public function setMaxAge($max_age)
    {

        if (!is_null($max_age) && ($max_age > 40)) {
            throw new \InvalidArgumentException('invalid value for $max_age when calling InlineObject387., must be smaller than or equal to 40.');
        }
        if (!is_null($max_age) && ($max_age < 6)) {
            throw new \InvalidArgumentException('invalid value for $max_age when calling InlineObject387., must be bigger than or equal to 6.');
        }

        $this->container['max_age'] = $max_age;

        return $this;
    }

    /**
     * Gets max_hops
     *
     * @return int|null
     */
    public function getMaxHops()
    {
        return $this->container['max_hops'];
    }

    /**
     * Sets max_hops
     *
     * @param int|null $max_hops Maximum number of hops (1 - 40, default = 20).
     *
     * @return self
     */
    public function setMaxHops($max_hops)
    {

        if (!is_null($max_hops) && ($max_hops > 40)) {
            throw new \InvalidArgumentException('invalid value for $max_hops when calling InlineObject387., must be smaller than or equal to 40.');
        }
        if (!is_null($max_hops) && ($max_hops < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_hops when calling InlineObject387., must be bigger than or equal to 1.');
        }

        $this->container['max_hops'] = $max_hops;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


