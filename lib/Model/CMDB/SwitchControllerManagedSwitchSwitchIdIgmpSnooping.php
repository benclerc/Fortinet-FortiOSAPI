<?php
/**
 * SwitchControllerManagedSwitchSwitchIdIgmpSnooping
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerManagedSwitchSwitchIdIgmpSnooping Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerManagedSwitchSwitchIdIgmpSnooping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_managed_switch__switch_id__igmp_snooping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'local_override' => 'string',
        'aging_time' => 'int',
        'flood_unknown_multicast' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'local_override' => null,
        'aging_time' => null,
        'flood_unknown_multicast' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'local_override' => 'local-override',
        'aging_time' => 'aging-time',
        'flood_unknown_multicast' => 'flood-unknown-multicast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'local_override' => 'setLocalOverride',
        'aging_time' => 'setAgingTime',
        'flood_unknown_multicast' => 'setFloodUnknownMulticast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'local_override' => 'getLocalOverride',
        'aging_time' => 'getAgingTime',
        'flood_unknown_multicast' => 'getFloodUnknownMulticast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOCAL_OVERRIDE_ENABLE = 'enable';
    const LOCAL_OVERRIDE_DISABLE = 'disable';
    const FLOOD_UNKNOWN_MULTICAST_ENABLE = 'enable';
    const FLOOD_UNKNOWN_MULTICAST_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalOverrideAllowableValues()
    {
        return [
            self::LOCAL_OVERRIDE_ENABLE,
            self::LOCAL_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFloodUnknownMulticastAllowableValues()
    {
        return [
            self::FLOOD_UNKNOWN_MULTICAST_ENABLE,
            self::FLOOD_UNKNOWN_MULTICAST_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_override'] = $data['local_override'] ?? null;
        $this->container['aging_time'] = $data['aging_time'] ?? null;
        $this->container['flood_unknown_multicast'] = $data['flood_unknown_multicast'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($this->container['local_override']) && !in_array($this->container['local_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_override', must be one of '%s'",
                $this->container['local_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['aging_time']) && ($this->container['aging_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'aging_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['aging_time']) && ($this->container['aging_time'] < 15)) {
            $invalidProperties[] = "invalid value for 'aging_time', must be bigger than or equal to 15.";
        }

        $allowedValues = $this->getFloodUnknownMulticastAllowableValues();
        if (!is_null($this->container['flood_unknown_multicast']) && !in_array($this->container['flood_unknown_multicast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'flood_unknown_multicast', must be one of '%s'",
                $this->container['flood_unknown_multicast'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets local_override
     *
     * @return string|null
     */
    public function getLocalOverride()
    {
        return $this->container['local_override'];
    }

    /**
     * Sets local_override
     *
     * @param string|null $local_override Enable/disable overriding the global IGMP snooping configuration.    enable:Override the global IGMP snooping configuration.    disable:Use the global IGMP snooping configuration.
     *
     * @return self
     */
    public function setLocalOverride($local_override)
    {
        $allowedValues = $this->getLocalOverrideAllowableValues();
        if (!is_null($local_override) && !in_array($local_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_override', must be one of '%s'",
                    $local_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_override'] = $local_override;

        return $this;
    }

    /**
     * Gets aging_time
     *
     * @return int|null
     */
    public function getAgingTime()
    {
        return $this->container['aging_time'];
    }

    /**
     * Sets aging_time
     *
     * @param int|null $aging_time Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
     *
     * @return self
     */
    public function setAgingTime($aging_time)
    {

        if (!is_null($aging_time) && ($aging_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $aging_time when calling SwitchControllerManagedSwitchSwitchIdIgmpSnooping., must be smaller than or equal to 3600.');
        }
        if (!is_null($aging_time) && ($aging_time < 15)) {
            throw new \InvalidArgumentException('invalid value for $aging_time when calling SwitchControllerManagedSwitchSwitchIdIgmpSnooping., must be bigger than or equal to 15.');
        }

        $this->container['aging_time'] = $aging_time;

        return $this;
    }

    /**
     * Gets flood_unknown_multicast
     *
     * @return string|null
     */
    public function getFloodUnknownMulticast()
    {
        return $this->container['flood_unknown_multicast'];
    }

    /**
     * Sets flood_unknown_multicast
     *
     * @param string|null $flood_unknown_multicast Enable/disable unknown multicast flooding.    enable:Enable unknown multicast flooding.    disable:Disable unknown multicast flooding.
     *
     * @return self
     */
    public function setFloodUnknownMulticast($flood_unknown_multicast)
    {
        $allowedValues = $this->getFloodUnknownMulticastAllowableValues();
        if (!is_null($flood_unknown_multicast) && !in_array($flood_unknown_multicast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'flood_unknown_multicast', must be one of '%s'",
                    $flood_unknown_multicast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flood_unknown_multicast'] = $flood_unknown_multicast;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


