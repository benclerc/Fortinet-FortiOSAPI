<?php
/**
 * InlineObject316
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject316 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject316 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_316';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language' => 'string',
        'gui_ipv6' => 'string',
        'gui_certificates' => 'string',
        'gui_custom_language' => 'string',
        'gui_wireless_opensecurity' => 'string',
        'gui_display_hostname' => 'string',
        'gui_fortisandbox_cloud' => 'string',
        'gui_firmware_upgrade_warning' => 'string',
        'gui_allow_default_hostname' => 'string',
        'gui_forticare_registration_setup_warning' => 'string',
        'admin_https_ssl_versions' => 'string',
        'admintimeout' => 'int',
        'admin_console_timeout' => 'int',
        'ssd_trim_freq' => 'string',
        'ssd_trim_hour' => 'int',
        'ssd_trim_min' => 'int',
        'ssd_trim_weekday' => 'string',
        'ssd_trim_date' => 'int',
        'admin_concurrent' => 'string',
        'admin_lockout_threshold' => 'int',
        'admin_lockout_duration' => 'int',
        'refresh' => 'int',
        'interval' => 'int',
        'failtime' => 'int',
        'daily_restart' => 'string',
        'restart_time' => 'string',
        'radius_port' => 'int',
        'admin_login_max' => 'int',
        'remoteauthtimeout' => 'int',
        'ldapconntimeout' => 'int',
        'batch_cmdb' => 'string',
        'multi_factor_authentication' => 'string',
        'ssl_min_proto_version' => 'string',
        'autorun_log_fsck' => 'string',
        'dst' => 'string',
        'timezone' => 'string',
        'traffic_priority' => 'string',
        'traffic_priority_level' => 'string',
        'anti_replay' => 'string',
        'send_pmtu_icmp' => 'string',
        'honor_df' => 'string',
        'virtual_switch_vlan' => 'string',
        'revision_image_auto_backup' => 'string',
        'revision_backup_on_logout' => 'string',
        'management_vdom' => 'string',
        'hostname' => 'string',
        'alias' => 'string',
        'strong_crypto' => 'string',
        'ssh_cbc_cipher' => 'string',
        'ssh_hmac_md5' => 'string',
        'ssh_kex_sha1' => 'string',
        'ssh_mac_weak' => 'string',
        'ssl_static_key_ciphers' => 'string',
        'snat_route_change' => 'string',
        'cli_audit_log' => 'string',
        'dh_params' => 'string',
        'fds_statistics' => 'string',
        'fds_statistics_period' => 'int',
        'tcp_option' => 'string',
        'lldp_transmission' => 'string',
        'lldp_reception' => 'string',
        'proxy_auth_timeout' => 'int',
        'proxy_re_authentication_mode' => 'string',
        'proxy_auth_lifetime' => 'string',
        'proxy_auth_lifetime_timeout' => 'int',
        'sys_perf_log_interval' => 'int',
        'check_protocol_header' => 'string',
        'vip_arp_range' => 'string',
        'reset_sessionless_tcp' => 'string',
        'allow_traffic_redirect' => 'string',
        'strict_dirty_session_check' => 'string',
        'tcp_halfclose_timer' => 'int',
        'tcp_halfopen_timer' => 'int',
        'tcp_timewait_timer' => 'int',
        'udp_idle_timer' => 'int',
        'block_session_timer' => 'int',
        'ip_src_port_range' => 'string',
        'pre_login_banner' => 'string',
        'post_login_banner' => 'string',
        'tftp' => 'string',
        'av_failopen' => 'string',
        'av_failopen_session' => 'string',
        'memory_use_threshold_extreme' => 'int',
        'memory_use_threshold_red' => 'int',
        'memory_use_threshold_green' => 'int',
        'cpu_use_threshold' => 'int',
        'check_reset_range' => 'string',
        'vdom_mode' => 'string',
        'long_vdom_name' => 'string',
        'edit_vdom_prompt' => 'string',
        'admin_port' => 'int',
        'admin_sport' => 'int',
        'admin_https_redirect' => 'string',
        'admin_hsts_max_age' => 'int',
        'admin_ssh_password' => 'string',
        'admin_restrict_local' => 'string',
        'admin_ssh_port' => 'int',
        'admin_ssh_grace_time' => 'int',
        'admin_ssh_v1' => 'string',
        'admin_telnet' => 'string',
        'admin_telnet_port' => 'int',
        'default_service_source_port' => 'string',
        'admin_maintainer' => 'string',
        'admin_reset_button' => 'string',
        'admin_server_cert' => 'string',
        'user_server_cert' => 'string',
        'admin_https_pki_required' => 'string',
        'wifi_certificate' => 'string',
        'wifi_ca_certificate' => 'string',
        'auth_http_port' => 'int',
        'auth_https_port' => 'int',
        'auth_keepalive' => 'string',
        'policy_auth_concurrent' => 'int',
        'auth_session_limit' => 'string',
        'auth_cert' => 'string',
        'clt_cert_req' => 'string',
        'fortiservice_port' => 'int',
        'cfg_save' => 'string',
        'cfg_revert_timeout' => 'int',
        'reboot_upon_config_restore' => 'string',
        'admin_scp' => 'string',
        'security_rating_result_submission' => 'string',
        'security_rating_run_on_schedule' => 'string',
        'wireless_controller' => 'string',
        'wireless_controller_port' => 'int',
        'fortiextender_data_port' => 'int',
        'fortiextender' => 'string',
        'fortiextender_vlan_mode' => 'string',
        'switch_controller' => 'string',
        'switch_controller_reserved_network' => 'string',
        'dnsproxy_worker_count' => 'int',
        'url_filter_count' => 'int',
        'proxy_worker_count' => 'int',
        'scanunit_count' => 'int',
        'proxy_hardware_acceleration' => 'string',
        'fgd_alert_subscription' => 'string',
        'ipsec_hmac_offload' => 'string',
        'ipv6_accept_dad' => 'int',
        'ipv6_allow_anycast_probe' => 'string',
        'csr_ca_attribute' => 'string',
        'wimax_4g_usb' => 'string',
        'cert_chain_max' => 'int',
        'sslvpn_max_worker_count' => 'int',
        'sslvpn_kxp_hardware_acceleration' => 'string',
        'sslvpn_cipher_hardware_acceleration' => 'string',
        'sslvpn_ems_sn_check' => 'string',
        'sslvpn_plugin_version_check' => 'string',
        'two_factor_ftk_expiry' => 'int',
        'two_factor_email_expiry' => 'int',
        'two_factor_sms_expiry' => 'int',
        'two_factor_fac_expiry' => 'int',
        'two_factor_ftm_expiry' => 'int',
        'wad_worker_count' => 'int',
        'wad_csvc_cs_count' => 'int',
        'wad_csvc_db_count' => 'int',
        'wad_source_affinity' => 'string',
        'wad_memory_change_granularity' => 'int',
        'login_timestamp' => 'string',
        'miglogd_children' => 'int',
        'special_file_23_support' => 'string',
        'log_uuid_address' => 'string',
        'log_ssl_connection' => 'string',
        'arp_max_entry' => 'int',
        'ndp_max_entry' => 'int',
        'br_fdb_max_entry' => 'int',
        'max_route_cache_size' => 'int',
        'ipsec_asic_offload' => 'string',
        'ipsec_soft_dec_async' => 'string',
        'device_idle_timeout' => 'int',
        'user_device_store_max_devices' => 'int',
        'user_device_store_max_users' => 'int',
        'gui_device_latitude' => 'string',
        'gui_device_longitude' => 'string',
        'private_data_encryption' => 'string',
        'auto_auth_extension_device' => 'string',
        'gui_theme' => 'string',
        'gui_date_format' => 'string',
        'gui_date_time_source' => 'string',
        'igmp_state_limit' => 'int',
        'cloud_communication' => 'string',
        'fec_port' => 'int',
        'fortitoken_cloud' => 'string',
        'faz_disk_buffer_size' => 'int',
        'irq_time_accounting' => 'string',
        'fortiipam_integration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language' => null,
        'gui_ipv6' => null,
        'gui_certificates' => null,
        'gui_custom_language' => null,
        'gui_wireless_opensecurity' => null,
        'gui_display_hostname' => null,
        'gui_fortisandbox_cloud' => null,
        'gui_firmware_upgrade_warning' => null,
        'gui_allow_default_hostname' => null,
        'gui_forticare_registration_setup_warning' => null,
        'admin_https_ssl_versions' => null,
        'admintimeout' => null,
        'admin_console_timeout' => null,
        'ssd_trim_freq' => null,
        'ssd_trim_hour' => null,
        'ssd_trim_min' => null,
        'ssd_trim_weekday' => null,
        'ssd_trim_date' => null,
        'admin_concurrent' => null,
        'admin_lockout_threshold' => null,
        'admin_lockout_duration' => null,
        'refresh' => null,
        'interval' => null,
        'failtime' => null,
        'daily_restart' => null,
        'restart_time' => null,
        'radius_port' => null,
        'admin_login_max' => null,
        'remoteauthtimeout' => null,
        'ldapconntimeout' => null,
        'batch_cmdb' => null,
        'multi_factor_authentication' => null,
        'ssl_min_proto_version' => null,
        'autorun_log_fsck' => null,
        'dst' => null,
        'timezone' => null,
        'traffic_priority' => null,
        'traffic_priority_level' => null,
        'anti_replay' => null,
        'send_pmtu_icmp' => null,
        'honor_df' => null,
        'virtual_switch_vlan' => null,
        'revision_image_auto_backup' => null,
        'revision_backup_on_logout' => null,
        'management_vdom' => null,
        'hostname' => null,
        'alias' => null,
        'strong_crypto' => null,
        'ssh_cbc_cipher' => null,
        'ssh_hmac_md5' => null,
        'ssh_kex_sha1' => null,
        'ssh_mac_weak' => null,
        'ssl_static_key_ciphers' => null,
        'snat_route_change' => null,
        'cli_audit_log' => null,
        'dh_params' => null,
        'fds_statistics' => null,
        'fds_statistics_period' => null,
        'tcp_option' => null,
        'lldp_transmission' => null,
        'lldp_reception' => null,
        'proxy_auth_timeout' => null,
        'proxy_re_authentication_mode' => null,
        'proxy_auth_lifetime' => null,
        'proxy_auth_lifetime_timeout' => null,
        'sys_perf_log_interval' => null,
        'check_protocol_header' => null,
        'vip_arp_range' => null,
        'reset_sessionless_tcp' => null,
        'allow_traffic_redirect' => null,
        'strict_dirty_session_check' => null,
        'tcp_halfclose_timer' => null,
        'tcp_halfopen_timer' => null,
        'tcp_timewait_timer' => null,
        'udp_idle_timer' => null,
        'block_session_timer' => null,
        'ip_src_port_range' => null,
        'pre_login_banner' => null,
        'post_login_banner' => null,
        'tftp' => null,
        'av_failopen' => null,
        'av_failopen_session' => null,
        'memory_use_threshold_extreme' => null,
        'memory_use_threshold_red' => null,
        'memory_use_threshold_green' => null,
        'cpu_use_threshold' => null,
        'check_reset_range' => null,
        'vdom_mode' => null,
        'long_vdom_name' => null,
        'edit_vdom_prompt' => null,
        'admin_port' => null,
        'admin_sport' => null,
        'admin_https_redirect' => null,
        'admin_hsts_max_age' => null,
        'admin_ssh_password' => null,
        'admin_restrict_local' => null,
        'admin_ssh_port' => null,
        'admin_ssh_grace_time' => null,
        'admin_ssh_v1' => null,
        'admin_telnet' => null,
        'admin_telnet_port' => null,
        'default_service_source_port' => null,
        'admin_maintainer' => null,
        'admin_reset_button' => null,
        'admin_server_cert' => null,
        'user_server_cert' => null,
        'admin_https_pki_required' => null,
        'wifi_certificate' => null,
        'wifi_ca_certificate' => null,
        'auth_http_port' => null,
        'auth_https_port' => null,
        'auth_keepalive' => null,
        'policy_auth_concurrent' => null,
        'auth_session_limit' => null,
        'auth_cert' => null,
        'clt_cert_req' => null,
        'fortiservice_port' => null,
        'cfg_save' => null,
        'cfg_revert_timeout' => null,
        'reboot_upon_config_restore' => null,
        'admin_scp' => null,
        'security_rating_result_submission' => null,
        'security_rating_run_on_schedule' => null,
        'wireless_controller' => null,
        'wireless_controller_port' => null,
        'fortiextender_data_port' => null,
        'fortiextender' => null,
        'fortiextender_vlan_mode' => null,
        'switch_controller' => null,
        'switch_controller_reserved_network' => 'ipv4',
        'dnsproxy_worker_count' => null,
        'url_filter_count' => null,
        'proxy_worker_count' => null,
        'scanunit_count' => null,
        'proxy_hardware_acceleration' => null,
        'fgd_alert_subscription' => null,
        'ipsec_hmac_offload' => null,
        'ipv6_accept_dad' => null,
        'ipv6_allow_anycast_probe' => null,
        'csr_ca_attribute' => null,
        'wimax_4g_usb' => null,
        'cert_chain_max' => null,
        'sslvpn_max_worker_count' => null,
        'sslvpn_kxp_hardware_acceleration' => null,
        'sslvpn_cipher_hardware_acceleration' => null,
        'sslvpn_ems_sn_check' => null,
        'sslvpn_plugin_version_check' => null,
        'two_factor_ftk_expiry' => null,
        'two_factor_email_expiry' => null,
        'two_factor_sms_expiry' => null,
        'two_factor_fac_expiry' => null,
        'two_factor_ftm_expiry' => null,
        'wad_worker_count' => null,
        'wad_csvc_cs_count' => null,
        'wad_csvc_db_count' => null,
        'wad_source_affinity' => null,
        'wad_memory_change_granularity' => null,
        'login_timestamp' => null,
        'miglogd_children' => null,
        'special_file_23_support' => null,
        'log_uuid_address' => null,
        'log_ssl_connection' => null,
        'arp_max_entry' => null,
        'ndp_max_entry' => null,
        'br_fdb_max_entry' => null,
        'max_route_cache_size' => null,
        'ipsec_asic_offload' => null,
        'ipsec_soft_dec_async' => null,
        'device_idle_timeout' => null,
        'user_device_store_max_devices' => null,
        'user_device_store_max_users' => null,
        'gui_device_latitude' => null,
        'gui_device_longitude' => null,
        'private_data_encryption' => null,
        'auto_auth_extension_device' => null,
        'gui_theme' => null,
        'gui_date_format' => null,
        'gui_date_time_source' => null,
        'igmp_state_limit' => null,
        'cloud_communication' => null,
        'fec_port' => null,
        'fortitoken_cloud' => null,
        'faz_disk_buffer_size' => null,
        'irq_time_accounting' => null,
        'fortiipam_integration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'gui_ipv6' => 'gui-ipv6',
        'gui_certificates' => 'gui-certificates',
        'gui_custom_language' => 'gui-custom-language',
        'gui_wireless_opensecurity' => 'gui-wireless-opensecurity',
        'gui_display_hostname' => 'gui-display-hostname',
        'gui_fortisandbox_cloud' => 'gui-fortisandbox-cloud',
        'gui_firmware_upgrade_warning' => 'gui-firmware-upgrade-warning',
        'gui_allow_default_hostname' => 'gui-allow-default-hostname',
        'gui_forticare_registration_setup_warning' => 'gui-forticare-registration-setup-warning',
        'admin_https_ssl_versions' => 'admin-https-ssl-versions',
        'admintimeout' => 'admintimeout',
        'admin_console_timeout' => 'admin-console-timeout',
        'ssd_trim_freq' => 'ssd-trim-freq',
        'ssd_trim_hour' => 'ssd-trim-hour',
        'ssd_trim_min' => 'ssd-trim-min',
        'ssd_trim_weekday' => 'ssd-trim-weekday',
        'ssd_trim_date' => 'ssd-trim-date',
        'admin_concurrent' => 'admin-concurrent',
        'admin_lockout_threshold' => 'admin-lockout-threshold',
        'admin_lockout_duration' => 'admin-lockout-duration',
        'refresh' => 'refresh',
        'interval' => 'interval',
        'failtime' => 'failtime',
        'daily_restart' => 'daily-restart',
        'restart_time' => 'restart-time',
        'radius_port' => 'radius-port',
        'admin_login_max' => 'admin-login-max',
        'remoteauthtimeout' => 'remoteauthtimeout',
        'ldapconntimeout' => 'ldapconntimeout',
        'batch_cmdb' => 'batch-cmdb',
        'multi_factor_authentication' => 'multi-factor-authentication',
        'ssl_min_proto_version' => 'ssl-min-proto-version',
        'autorun_log_fsck' => 'autorun-log-fsck',
        'dst' => 'dst',
        'timezone' => 'timezone',
        'traffic_priority' => 'traffic-priority',
        'traffic_priority_level' => 'traffic-priority-level',
        'anti_replay' => 'anti-replay',
        'send_pmtu_icmp' => 'send-pmtu-icmp',
        'honor_df' => 'honor-df',
        'virtual_switch_vlan' => 'virtual-switch-vlan',
        'revision_image_auto_backup' => 'revision-image-auto-backup',
        'revision_backup_on_logout' => 'revision-backup-on-logout',
        'management_vdom' => 'management-vdom',
        'hostname' => 'hostname',
        'alias' => 'alias',
        'strong_crypto' => 'strong-crypto',
        'ssh_cbc_cipher' => 'ssh-cbc-cipher',
        'ssh_hmac_md5' => 'ssh-hmac-md5',
        'ssh_kex_sha1' => 'ssh-kex-sha1',
        'ssh_mac_weak' => 'ssh-mac-weak',
        'ssl_static_key_ciphers' => 'ssl-static-key-ciphers',
        'snat_route_change' => 'snat-route-change',
        'cli_audit_log' => 'cli-audit-log',
        'dh_params' => 'dh-params',
        'fds_statistics' => 'fds-statistics',
        'fds_statistics_period' => 'fds-statistics-period',
        'tcp_option' => 'tcp-option',
        'lldp_transmission' => 'lldp-transmission',
        'lldp_reception' => 'lldp-reception',
        'proxy_auth_timeout' => 'proxy-auth-timeout',
        'proxy_re_authentication_mode' => 'proxy-re-authentication-mode',
        'proxy_auth_lifetime' => 'proxy-auth-lifetime',
        'proxy_auth_lifetime_timeout' => 'proxy-auth-lifetime-timeout',
        'sys_perf_log_interval' => 'sys-perf-log-interval',
        'check_protocol_header' => 'check-protocol-header',
        'vip_arp_range' => 'vip-arp-range',
        'reset_sessionless_tcp' => 'reset-sessionless-tcp',
        'allow_traffic_redirect' => 'allow-traffic-redirect',
        'strict_dirty_session_check' => 'strict-dirty-session-check',
        'tcp_halfclose_timer' => 'tcp-halfclose-timer',
        'tcp_halfopen_timer' => 'tcp-halfopen-timer',
        'tcp_timewait_timer' => 'tcp-timewait-timer',
        'udp_idle_timer' => 'udp-idle-timer',
        'block_session_timer' => 'block-session-timer',
        'ip_src_port_range' => 'ip-src-port-range',
        'pre_login_banner' => 'pre-login-banner',
        'post_login_banner' => 'post-login-banner',
        'tftp' => 'tftp',
        'av_failopen' => 'av-failopen',
        'av_failopen_session' => 'av-failopen-session',
        'memory_use_threshold_extreme' => 'memory-use-threshold-extreme',
        'memory_use_threshold_red' => 'memory-use-threshold-red',
        'memory_use_threshold_green' => 'memory-use-threshold-green',
        'cpu_use_threshold' => 'cpu-use-threshold',
        'check_reset_range' => 'check-reset-range',
        'vdom_mode' => 'vdom-mode',
        'long_vdom_name' => 'long-vdom-name',
        'edit_vdom_prompt' => 'edit-vdom-prompt',
        'admin_port' => 'admin-port',
        'admin_sport' => 'admin-sport',
        'admin_https_redirect' => 'admin-https-redirect',
        'admin_hsts_max_age' => 'admin-hsts-max-age',
        'admin_ssh_password' => 'admin-ssh-password',
        'admin_restrict_local' => 'admin-restrict-local',
        'admin_ssh_port' => 'admin-ssh-port',
        'admin_ssh_grace_time' => 'admin-ssh-grace-time',
        'admin_ssh_v1' => 'admin-ssh-v1',
        'admin_telnet' => 'admin-telnet',
        'admin_telnet_port' => 'admin-telnet-port',
        'default_service_source_port' => 'default-service-source-port',
        'admin_maintainer' => 'admin-maintainer',
        'admin_reset_button' => 'admin-reset-button',
        'admin_server_cert' => 'admin-server-cert',
        'user_server_cert' => 'user-server-cert',
        'admin_https_pki_required' => 'admin-https-pki-required',
        'wifi_certificate' => 'wifi-certificate',
        'wifi_ca_certificate' => 'wifi-ca-certificate',
        'auth_http_port' => 'auth-http-port',
        'auth_https_port' => 'auth-https-port',
        'auth_keepalive' => 'auth-keepalive',
        'policy_auth_concurrent' => 'policy-auth-concurrent',
        'auth_session_limit' => 'auth-session-limit',
        'auth_cert' => 'auth-cert',
        'clt_cert_req' => 'clt-cert-req',
        'fortiservice_port' => 'fortiservice-port',
        'cfg_save' => 'cfg-save',
        'cfg_revert_timeout' => 'cfg-revert-timeout',
        'reboot_upon_config_restore' => 'reboot-upon-config-restore',
        'admin_scp' => 'admin-scp',
        'security_rating_result_submission' => 'security-rating-result-submission',
        'security_rating_run_on_schedule' => 'security-rating-run-on-schedule',
        'wireless_controller' => 'wireless-controller',
        'wireless_controller_port' => 'wireless-controller-port',
        'fortiextender_data_port' => 'fortiextender-data-port',
        'fortiextender' => 'fortiextender',
        'fortiextender_vlan_mode' => 'fortiextender-vlan-mode',
        'switch_controller' => 'switch-controller',
        'switch_controller_reserved_network' => 'switch-controller-reserved-network',
        'dnsproxy_worker_count' => 'dnsproxy-worker-count',
        'url_filter_count' => 'url-filter-count',
        'proxy_worker_count' => 'proxy-worker-count',
        'scanunit_count' => 'scanunit-count',
        'proxy_hardware_acceleration' => 'proxy-hardware-acceleration',
        'fgd_alert_subscription' => 'fgd-alert-subscription',
        'ipsec_hmac_offload' => 'ipsec-hmac-offload',
        'ipv6_accept_dad' => 'ipv6-accept-dad',
        'ipv6_allow_anycast_probe' => 'ipv6-allow-anycast-probe',
        'csr_ca_attribute' => 'csr-ca-attribute',
        'wimax_4g_usb' => 'wimax-4g-usb',
        'cert_chain_max' => 'cert-chain-max',
        'sslvpn_max_worker_count' => 'sslvpn-max-worker-count',
        'sslvpn_kxp_hardware_acceleration' => 'sslvpn-kxp-hardware-acceleration',
        'sslvpn_cipher_hardware_acceleration' => 'sslvpn-cipher-hardware-acceleration',
        'sslvpn_ems_sn_check' => 'sslvpn-ems-sn-check',
        'sslvpn_plugin_version_check' => 'sslvpn-plugin-version-check',
        'two_factor_ftk_expiry' => 'two-factor-ftk-expiry',
        'two_factor_email_expiry' => 'two-factor-email-expiry',
        'two_factor_sms_expiry' => 'two-factor-sms-expiry',
        'two_factor_fac_expiry' => 'two-factor-fac-expiry',
        'two_factor_ftm_expiry' => 'two-factor-ftm-expiry',
        'wad_worker_count' => 'wad-worker-count',
        'wad_csvc_cs_count' => 'wad-csvc-cs-count',
        'wad_csvc_db_count' => 'wad-csvc-db-count',
        'wad_source_affinity' => 'wad-source-affinity',
        'wad_memory_change_granularity' => 'wad-memory-change-granularity',
        'login_timestamp' => 'login-timestamp',
        'miglogd_children' => 'miglogd-children',
        'special_file_23_support' => 'special-file-23-support',
        'log_uuid_address' => 'log-uuid-address',
        'log_ssl_connection' => 'log-ssl-connection',
        'arp_max_entry' => 'arp-max-entry',
        'ndp_max_entry' => 'ndp-max-entry',
        'br_fdb_max_entry' => 'br-fdb-max-entry',
        'max_route_cache_size' => 'max-route-cache-size',
        'ipsec_asic_offload' => 'ipsec-asic-offload',
        'ipsec_soft_dec_async' => 'ipsec-soft-dec-async',
        'device_idle_timeout' => 'device-idle-timeout',
        'user_device_store_max_devices' => 'user-device-store-max-devices',
        'user_device_store_max_users' => 'user-device-store-max-users',
        'gui_device_latitude' => 'gui-device-latitude',
        'gui_device_longitude' => 'gui-device-longitude',
        'private_data_encryption' => 'private-data-encryption',
        'auto_auth_extension_device' => 'auto-auth-extension-device',
        'gui_theme' => 'gui-theme',
        'gui_date_format' => 'gui-date-format',
        'gui_date_time_source' => 'gui-date-time-source',
        'igmp_state_limit' => 'igmp-state-limit',
        'cloud_communication' => 'cloud-communication',
        'fec_port' => 'fec-port',
        'fortitoken_cloud' => 'fortitoken-cloud',
        'faz_disk_buffer_size' => 'faz-disk-buffer-size',
        'irq_time_accounting' => 'irq-time-accounting',
        'fortiipam_integration' => 'fortiipam-integration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'gui_ipv6' => 'setGuiIpv6',
        'gui_certificates' => 'setGuiCertificates',
        'gui_custom_language' => 'setGuiCustomLanguage',
        'gui_wireless_opensecurity' => 'setGuiWirelessOpensecurity',
        'gui_display_hostname' => 'setGuiDisplayHostname',
        'gui_fortisandbox_cloud' => 'setGuiFortisandboxCloud',
        'gui_firmware_upgrade_warning' => 'setGuiFirmwareUpgradeWarning',
        'gui_allow_default_hostname' => 'setGuiAllowDefaultHostname',
        'gui_forticare_registration_setup_warning' => 'setGuiForticareRegistrationSetupWarning',
        'admin_https_ssl_versions' => 'setAdminHttpsSslVersions',
        'admintimeout' => 'setAdmintimeout',
        'admin_console_timeout' => 'setAdminConsoleTimeout',
        'ssd_trim_freq' => 'setSsdTrimFreq',
        'ssd_trim_hour' => 'setSsdTrimHour',
        'ssd_trim_min' => 'setSsdTrimMin',
        'ssd_trim_weekday' => 'setSsdTrimWeekday',
        'ssd_trim_date' => 'setSsdTrimDate',
        'admin_concurrent' => 'setAdminConcurrent',
        'admin_lockout_threshold' => 'setAdminLockoutThreshold',
        'admin_lockout_duration' => 'setAdminLockoutDuration',
        'refresh' => 'setRefresh',
        'interval' => 'setInterval',
        'failtime' => 'setFailtime',
        'daily_restart' => 'setDailyRestart',
        'restart_time' => 'setRestartTime',
        'radius_port' => 'setRadiusPort',
        'admin_login_max' => 'setAdminLoginMax',
        'remoteauthtimeout' => 'setRemoteauthtimeout',
        'ldapconntimeout' => 'setLdapconntimeout',
        'batch_cmdb' => 'setBatchCmdb',
        'multi_factor_authentication' => 'setMultiFactorAuthentication',
        'ssl_min_proto_version' => 'setSslMinProtoVersion',
        'autorun_log_fsck' => 'setAutorunLogFsck',
        'dst' => 'setDst',
        'timezone' => 'setTimezone',
        'traffic_priority' => 'setTrafficPriority',
        'traffic_priority_level' => 'setTrafficPriorityLevel',
        'anti_replay' => 'setAntiReplay',
        'send_pmtu_icmp' => 'setSendPmtuIcmp',
        'honor_df' => 'setHonorDf',
        'virtual_switch_vlan' => 'setVirtualSwitchVlan',
        'revision_image_auto_backup' => 'setRevisionImageAutoBackup',
        'revision_backup_on_logout' => 'setRevisionBackupOnLogout',
        'management_vdom' => 'setManagementVdom',
        'hostname' => 'setHostname',
        'alias' => 'setAlias',
        'strong_crypto' => 'setStrongCrypto',
        'ssh_cbc_cipher' => 'setSshCbcCipher',
        'ssh_hmac_md5' => 'setSshHmacMd5',
        'ssh_kex_sha1' => 'setSshKexSha1',
        'ssh_mac_weak' => 'setSshMacWeak',
        'ssl_static_key_ciphers' => 'setSslStaticKeyCiphers',
        'snat_route_change' => 'setSnatRouteChange',
        'cli_audit_log' => 'setCliAuditLog',
        'dh_params' => 'setDhParams',
        'fds_statistics' => 'setFdsStatistics',
        'fds_statistics_period' => 'setFdsStatisticsPeriod',
        'tcp_option' => 'setTcpOption',
        'lldp_transmission' => 'setLldpTransmission',
        'lldp_reception' => 'setLldpReception',
        'proxy_auth_timeout' => 'setProxyAuthTimeout',
        'proxy_re_authentication_mode' => 'setProxyReAuthenticationMode',
        'proxy_auth_lifetime' => 'setProxyAuthLifetime',
        'proxy_auth_lifetime_timeout' => 'setProxyAuthLifetimeTimeout',
        'sys_perf_log_interval' => 'setSysPerfLogInterval',
        'check_protocol_header' => 'setCheckProtocolHeader',
        'vip_arp_range' => 'setVipArpRange',
        'reset_sessionless_tcp' => 'setResetSessionlessTcp',
        'allow_traffic_redirect' => 'setAllowTrafficRedirect',
        'strict_dirty_session_check' => 'setStrictDirtySessionCheck',
        'tcp_halfclose_timer' => 'setTcpHalfcloseTimer',
        'tcp_halfopen_timer' => 'setTcpHalfopenTimer',
        'tcp_timewait_timer' => 'setTcpTimewaitTimer',
        'udp_idle_timer' => 'setUdpIdleTimer',
        'block_session_timer' => 'setBlockSessionTimer',
        'ip_src_port_range' => 'setIpSrcPortRange',
        'pre_login_banner' => 'setPreLoginBanner',
        'post_login_banner' => 'setPostLoginBanner',
        'tftp' => 'setTftp',
        'av_failopen' => 'setAvFailopen',
        'av_failopen_session' => 'setAvFailopenSession',
        'memory_use_threshold_extreme' => 'setMemoryUseThresholdExtreme',
        'memory_use_threshold_red' => 'setMemoryUseThresholdRed',
        'memory_use_threshold_green' => 'setMemoryUseThresholdGreen',
        'cpu_use_threshold' => 'setCpuUseThreshold',
        'check_reset_range' => 'setCheckResetRange',
        'vdom_mode' => 'setVdomMode',
        'long_vdom_name' => 'setLongVdomName',
        'edit_vdom_prompt' => 'setEditVdomPrompt',
        'admin_port' => 'setAdminPort',
        'admin_sport' => 'setAdminSport',
        'admin_https_redirect' => 'setAdminHttpsRedirect',
        'admin_hsts_max_age' => 'setAdminHstsMaxAge',
        'admin_ssh_password' => 'setAdminSshPassword',
        'admin_restrict_local' => 'setAdminRestrictLocal',
        'admin_ssh_port' => 'setAdminSshPort',
        'admin_ssh_grace_time' => 'setAdminSshGraceTime',
        'admin_ssh_v1' => 'setAdminSshV1',
        'admin_telnet' => 'setAdminTelnet',
        'admin_telnet_port' => 'setAdminTelnetPort',
        'default_service_source_port' => 'setDefaultServiceSourcePort',
        'admin_maintainer' => 'setAdminMaintainer',
        'admin_reset_button' => 'setAdminResetButton',
        'admin_server_cert' => 'setAdminServerCert',
        'user_server_cert' => 'setUserServerCert',
        'admin_https_pki_required' => 'setAdminHttpsPkiRequired',
        'wifi_certificate' => 'setWifiCertificate',
        'wifi_ca_certificate' => 'setWifiCaCertificate',
        'auth_http_port' => 'setAuthHttpPort',
        'auth_https_port' => 'setAuthHttpsPort',
        'auth_keepalive' => 'setAuthKeepalive',
        'policy_auth_concurrent' => 'setPolicyAuthConcurrent',
        'auth_session_limit' => 'setAuthSessionLimit',
        'auth_cert' => 'setAuthCert',
        'clt_cert_req' => 'setCltCertReq',
        'fortiservice_port' => 'setFortiservicePort',
        'cfg_save' => 'setCfgSave',
        'cfg_revert_timeout' => 'setCfgRevertTimeout',
        'reboot_upon_config_restore' => 'setRebootUponConfigRestore',
        'admin_scp' => 'setAdminScp',
        'security_rating_result_submission' => 'setSecurityRatingResultSubmission',
        'security_rating_run_on_schedule' => 'setSecurityRatingRunOnSchedule',
        'wireless_controller' => 'setWirelessController',
        'wireless_controller_port' => 'setWirelessControllerPort',
        'fortiextender_data_port' => 'setFortiextenderDataPort',
        'fortiextender' => 'setFortiextender',
        'fortiextender_vlan_mode' => 'setFortiextenderVlanMode',
        'switch_controller' => 'setSwitchController',
        'switch_controller_reserved_network' => 'setSwitchControllerReservedNetwork',
        'dnsproxy_worker_count' => 'setDnsproxyWorkerCount',
        'url_filter_count' => 'setUrlFilterCount',
        'proxy_worker_count' => 'setProxyWorkerCount',
        'scanunit_count' => 'setScanunitCount',
        'proxy_hardware_acceleration' => 'setProxyHardwareAcceleration',
        'fgd_alert_subscription' => 'setFgdAlertSubscription',
        'ipsec_hmac_offload' => 'setIpsecHmacOffload',
        'ipv6_accept_dad' => 'setIpv6AcceptDad',
        'ipv6_allow_anycast_probe' => 'setIpv6AllowAnycastProbe',
        'csr_ca_attribute' => 'setCsrCaAttribute',
        'wimax_4g_usb' => 'setWimax4gUsb',
        'cert_chain_max' => 'setCertChainMax',
        'sslvpn_max_worker_count' => 'setSslvpnMaxWorkerCount',
        'sslvpn_kxp_hardware_acceleration' => 'setSslvpnKxpHardwareAcceleration',
        'sslvpn_cipher_hardware_acceleration' => 'setSslvpnCipherHardwareAcceleration',
        'sslvpn_ems_sn_check' => 'setSslvpnEmsSnCheck',
        'sslvpn_plugin_version_check' => 'setSslvpnPluginVersionCheck',
        'two_factor_ftk_expiry' => 'setTwoFactorFtkExpiry',
        'two_factor_email_expiry' => 'setTwoFactorEmailExpiry',
        'two_factor_sms_expiry' => 'setTwoFactorSmsExpiry',
        'two_factor_fac_expiry' => 'setTwoFactorFacExpiry',
        'two_factor_ftm_expiry' => 'setTwoFactorFtmExpiry',
        'wad_worker_count' => 'setWadWorkerCount',
        'wad_csvc_cs_count' => 'setWadCsvcCsCount',
        'wad_csvc_db_count' => 'setWadCsvcDbCount',
        'wad_source_affinity' => 'setWadSourceAffinity',
        'wad_memory_change_granularity' => 'setWadMemoryChangeGranularity',
        'login_timestamp' => 'setLoginTimestamp',
        'miglogd_children' => 'setMiglogdChildren',
        'special_file_23_support' => 'setSpecialFile23Support',
        'log_uuid_address' => 'setLogUuidAddress',
        'log_ssl_connection' => 'setLogSslConnection',
        'arp_max_entry' => 'setArpMaxEntry',
        'ndp_max_entry' => 'setNdpMaxEntry',
        'br_fdb_max_entry' => 'setBrFdbMaxEntry',
        'max_route_cache_size' => 'setMaxRouteCacheSize',
        'ipsec_asic_offload' => 'setIpsecAsicOffload',
        'ipsec_soft_dec_async' => 'setIpsecSoftDecAsync',
        'device_idle_timeout' => 'setDeviceIdleTimeout',
        'user_device_store_max_devices' => 'setUserDeviceStoreMaxDevices',
        'user_device_store_max_users' => 'setUserDeviceStoreMaxUsers',
        'gui_device_latitude' => 'setGuiDeviceLatitude',
        'gui_device_longitude' => 'setGuiDeviceLongitude',
        'private_data_encryption' => 'setPrivateDataEncryption',
        'auto_auth_extension_device' => 'setAutoAuthExtensionDevice',
        'gui_theme' => 'setGuiTheme',
        'gui_date_format' => 'setGuiDateFormat',
        'gui_date_time_source' => 'setGuiDateTimeSource',
        'igmp_state_limit' => 'setIgmpStateLimit',
        'cloud_communication' => 'setCloudCommunication',
        'fec_port' => 'setFecPort',
        'fortitoken_cloud' => 'setFortitokenCloud',
        'faz_disk_buffer_size' => 'setFazDiskBufferSize',
        'irq_time_accounting' => 'setIrqTimeAccounting',
        'fortiipam_integration' => 'setFortiipamIntegration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'gui_ipv6' => 'getGuiIpv6',
        'gui_certificates' => 'getGuiCertificates',
        'gui_custom_language' => 'getGuiCustomLanguage',
        'gui_wireless_opensecurity' => 'getGuiWirelessOpensecurity',
        'gui_display_hostname' => 'getGuiDisplayHostname',
        'gui_fortisandbox_cloud' => 'getGuiFortisandboxCloud',
        'gui_firmware_upgrade_warning' => 'getGuiFirmwareUpgradeWarning',
        'gui_allow_default_hostname' => 'getGuiAllowDefaultHostname',
        'gui_forticare_registration_setup_warning' => 'getGuiForticareRegistrationSetupWarning',
        'admin_https_ssl_versions' => 'getAdminHttpsSslVersions',
        'admintimeout' => 'getAdmintimeout',
        'admin_console_timeout' => 'getAdminConsoleTimeout',
        'ssd_trim_freq' => 'getSsdTrimFreq',
        'ssd_trim_hour' => 'getSsdTrimHour',
        'ssd_trim_min' => 'getSsdTrimMin',
        'ssd_trim_weekday' => 'getSsdTrimWeekday',
        'ssd_trim_date' => 'getSsdTrimDate',
        'admin_concurrent' => 'getAdminConcurrent',
        'admin_lockout_threshold' => 'getAdminLockoutThreshold',
        'admin_lockout_duration' => 'getAdminLockoutDuration',
        'refresh' => 'getRefresh',
        'interval' => 'getInterval',
        'failtime' => 'getFailtime',
        'daily_restart' => 'getDailyRestart',
        'restart_time' => 'getRestartTime',
        'radius_port' => 'getRadiusPort',
        'admin_login_max' => 'getAdminLoginMax',
        'remoteauthtimeout' => 'getRemoteauthtimeout',
        'ldapconntimeout' => 'getLdapconntimeout',
        'batch_cmdb' => 'getBatchCmdb',
        'multi_factor_authentication' => 'getMultiFactorAuthentication',
        'ssl_min_proto_version' => 'getSslMinProtoVersion',
        'autorun_log_fsck' => 'getAutorunLogFsck',
        'dst' => 'getDst',
        'timezone' => 'getTimezone',
        'traffic_priority' => 'getTrafficPriority',
        'traffic_priority_level' => 'getTrafficPriorityLevel',
        'anti_replay' => 'getAntiReplay',
        'send_pmtu_icmp' => 'getSendPmtuIcmp',
        'honor_df' => 'getHonorDf',
        'virtual_switch_vlan' => 'getVirtualSwitchVlan',
        'revision_image_auto_backup' => 'getRevisionImageAutoBackup',
        'revision_backup_on_logout' => 'getRevisionBackupOnLogout',
        'management_vdom' => 'getManagementVdom',
        'hostname' => 'getHostname',
        'alias' => 'getAlias',
        'strong_crypto' => 'getStrongCrypto',
        'ssh_cbc_cipher' => 'getSshCbcCipher',
        'ssh_hmac_md5' => 'getSshHmacMd5',
        'ssh_kex_sha1' => 'getSshKexSha1',
        'ssh_mac_weak' => 'getSshMacWeak',
        'ssl_static_key_ciphers' => 'getSslStaticKeyCiphers',
        'snat_route_change' => 'getSnatRouteChange',
        'cli_audit_log' => 'getCliAuditLog',
        'dh_params' => 'getDhParams',
        'fds_statistics' => 'getFdsStatistics',
        'fds_statistics_period' => 'getFdsStatisticsPeriod',
        'tcp_option' => 'getTcpOption',
        'lldp_transmission' => 'getLldpTransmission',
        'lldp_reception' => 'getLldpReception',
        'proxy_auth_timeout' => 'getProxyAuthTimeout',
        'proxy_re_authentication_mode' => 'getProxyReAuthenticationMode',
        'proxy_auth_lifetime' => 'getProxyAuthLifetime',
        'proxy_auth_lifetime_timeout' => 'getProxyAuthLifetimeTimeout',
        'sys_perf_log_interval' => 'getSysPerfLogInterval',
        'check_protocol_header' => 'getCheckProtocolHeader',
        'vip_arp_range' => 'getVipArpRange',
        'reset_sessionless_tcp' => 'getResetSessionlessTcp',
        'allow_traffic_redirect' => 'getAllowTrafficRedirect',
        'strict_dirty_session_check' => 'getStrictDirtySessionCheck',
        'tcp_halfclose_timer' => 'getTcpHalfcloseTimer',
        'tcp_halfopen_timer' => 'getTcpHalfopenTimer',
        'tcp_timewait_timer' => 'getTcpTimewaitTimer',
        'udp_idle_timer' => 'getUdpIdleTimer',
        'block_session_timer' => 'getBlockSessionTimer',
        'ip_src_port_range' => 'getIpSrcPortRange',
        'pre_login_banner' => 'getPreLoginBanner',
        'post_login_banner' => 'getPostLoginBanner',
        'tftp' => 'getTftp',
        'av_failopen' => 'getAvFailopen',
        'av_failopen_session' => 'getAvFailopenSession',
        'memory_use_threshold_extreme' => 'getMemoryUseThresholdExtreme',
        'memory_use_threshold_red' => 'getMemoryUseThresholdRed',
        'memory_use_threshold_green' => 'getMemoryUseThresholdGreen',
        'cpu_use_threshold' => 'getCpuUseThreshold',
        'check_reset_range' => 'getCheckResetRange',
        'vdom_mode' => 'getVdomMode',
        'long_vdom_name' => 'getLongVdomName',
        'edit_vdom_prompt' => 'getEditVdomPrompt',
        'admin_port' => 'getAdminPort',
        'admin_sport' => 'getAdminSport',
        'admin_https_redirect' => 'getAdminHttpsRedirect',
        'admin_hsts_max_age' => 'getAdminHstsMaxAge',
        'admin_ssh_password' => 'getAdminSshPassword',
        'admin_restrict_local' => 'getAdminRestrictLocal',
        'admin_ssh_port' => 'getAdminSshPort',
        'admin_ssh_grace_time' => 'getAdminSshGraceTime',
        'admin_ssh_v1' => 'getAdminSshV1',
        'admin_telnet' => 'getAdminTelnet',
        'admin_telnet_port' => 'getAdminTelnetPort',
        'default_service_source_port' => 'getDefaultServiceSourcePort',
        'admin_maintainer' => 'getAdminMaintainer',
        'admin_reset_button' => 'getAdminResetButton',
        'admin_server_cert' => 'getAdminServerCert',
        'user_server_cert' => 'getUserServerCert',
        'admin_https_pki_required' => 'getAdminHttpsPkiRequired',
        'wifi_certificate' => 'getWifiCertificate',
        'wifi_ca_certificate' => 'getWifiCaCertificate',
        'auth_http_port' => 'getAuthHttpPort',
        'auth_https_port' => 'getAuthHttpsPort',
        'auth_keepalive' => 'getAuthKeepalive',
        'policy_auth_concurrent' => 'getPolicyAuthConcurrent',
        'auth_session_limit' => 'getAuthSessionLimit',
        'auth_cert' => 'getAuthCert',
        'clt_cert_req' => 'getCltCertReq',
        'fortiservice_port' => 'getFortiservicePort',
        'cfg_save' => 'getCfgSave',
        'cfg_revert_timeout' => 'getCfgRevertTimeout',
        'reboot_upon_config_restore' => 'getRebootUponConfigRestore',
        'admin_scp' => 'getAdminScp',
        'security_rating_result_submission' => 'getSecurityRatingResultSubmission',
        'security_rating_run_on_schedule' => 'getSecurityRatingRunOnSchedule',
        'wireless_controller' => 'getWirelessController',
        'wireless_controller_port' => 'getWirelessControllerPort',
        'fortiextender_data_port' => 'getFortiextenderDataPort',
        'fortiextender' => 'getFortiextender',
        'fortiextender_vlan_mode' => 'getFortiextenderVlanMode',
        'switch_controller' => 'getSwitchController',
        'switch_controller_reserved_network' => 'getSwitchControllerReservedNetwork',
        'dnsproxy_worker_count' => 'getDnsproxyWorkerCount',
        'url_filter_count' => 'getUrlFilterCount',
        'proxy_worker_count' => 'getProxyWorkerCount',
        'scanunit_count' => 'getScanunitCount',
        'proxy_hardware_acceleration' => 'getProxyHardwareAcceleration',
        'fgd_alert_subscription' => 'getFgdAlertSubscription',
        'ipsec_hmac_offload' => 'getIpsecHmacOffload',
        'ipv6_accept_dad' => 'getIpv6AcceptDad',
        'ipv6_allow_anycast_probe' => 'getIpv6AllowAnycastProbe',
        'csr_ca_attribute' => 'getCsrCaAttribute',
        'wimax_4g_usb' => 'getWimax4gUsb',
        'cert_chain_max' => 'getCertChainMax',
        'sslvpn_max_worker_count' => 'getSslvpnMaxWorkerCount',
        'sslvpn_kxp_hardware_acceleration' => 'getSslvpnKxpHardwareAcceleration',
        'sslvpn_cipher_hardware_acceleration' => 'getSslvpnCipherHardwareAcceleration',
        'sslvpn_ems_sn_check' => 'getSslvpnEmsSnCheck',
        'sslvpn_plugin_version_check' => 'getSslvpnPluginVersionCheck',
        'two_factor_ftk_expiry' => 'getTwoFactorFtkExpiry',
        'two_factor_email_expiry' => 'getTwoFactorEmailExpiry',
        'two_factor_sms_expiry' => 'getTwoFactorSmsExpiry',
        'two_factor_fac_expiry' => 'getTwoFactorFacExpiry',
        'two_factor_ftm_expiry' => 'getTwoFactorFtmExpiry',
        'wad_worker_count' => 'getWadWorkerCount',
        'wad_csvc_cs_count' => 'getWadCsvcCsCount',
        'wad_csvc_db_count' => 'getWadCsvcDbCount',
        'wad_source_affinity' => 'getWadSourceAffinity',
        'wad_memory_change_granularity' => 'getWadMemoryChangeGranularity',
        'login_timestamp' => 'getLoginTimestamp',
        'miglogd_children' => 'getMiglogdChildren',
        'special_file_23_support' => 'getSpecialFile23Support',
        'log_uuid_address' => 'getLogUuidAddress',
        'log_ssl_connection' => 'getLogSslConnection',
        'arp_max_entry' => 'getArpMaxEntry',
        'ndp_max_entry' => 'getNdpMaxEntry',
        'br_fdb_max_entry' => 'getBrFdbMaxEntry',
        'max_route_cache_size' => 'getMaxRouteCacheSize',
        'ipsec_asic_offload' => 'getIpsecAsicOffload',
        'ipsec_soft_dec_async' => 'getIpsecSoftDecAsync',
        'device_idle_timeout' => 'getDeviceIdleTimeout',
        'user_device_store_max_devices' => 'getUserDeviceStoreMaxDevices',
        'user_device_store_max_users' => 'getUserDeviceStoreMaxUsers',
        'gui_device_latitude' => 'getGuiDeviceLatitude',
        'gui_device_longitude' => 'getGuiDeviceLongitude',
        'private_data_encryption' => 'getPrivateDataEncryption',
        'auto_auth_extension_device' => 'getAutoAuthExtensionDevice',
        'gui_theme' => 'getGuiTheme',
        'gui_date_format' => 'getGuiDateFormat',
        'gui_date_time_source' => 'getGuiDateTimeSource',
        'igmp_state_limit' => 'getIgmpStateLimit',
        'cloud_communication' => 'getCloudCommunication',
        'fec_port' => 'getFecPort',
        'fortitoken_cloud' => 'getFortitokenCloud',
        'faz_disk_buffer_size' => 'getFazDiskBufferSize',
        'irq_time_accounting' => 'getIrqTimeAccounting',
        'fortiipam_integration' => 'getFortiipamIntegration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LANGUAGE_ENGLISH = 'english';
    const LANGUAGE_FRENCH = 'french';
    const LANGUAGE_SPANISH = 'spanish';
    const LANGUAGE_PORTUGUESE = 'portuguese';
    const LANGUAGE_JAPANESE = 'japanese';
    const LANGUAGE_TRACH = 'trach';
    const LANGUAGE_SIMCH = 'simch';
    const LANGUAGE_KOREAN = 'korean';
    const GUI_IPV6_ENABLE = 'enable';
    const GUI_IPV6_DISABLE = 'disable';
    const GUI_CERTIFICATES_ENABLE = 'enable';
    const GUI_CERTIFICATES_DISABLE = 'disable';
    const GUI_CUSTOM_LANGUAGE_ENABLE = 'enable';
    const GUI_CUSTOM_LANGUAGE_DISABLE = 'disable';
    const GUI_WIRELESS_OPENSECURITY_ENABLE = 'enable';
    const GUI_WIRELESS_OPENSECURITY_DISABLE = 'disable';
    const GUI_DISPLAY_HOSTNAME_ENABLE = 'enable';
    const GUI_DISPLAY_HOSTNAME_DISABLE = 'disable';
    const GUI_FORTISANDBOX_CLOUD_ENABLE = 'enable';
    const GUI_FORTISANDBOX_CLOUD_DISABLE = 'disable';
    const GUI_FIRMWARE_UPGRADE_WARNING_ENABLE = 'enable';
    const GUI_FIRMWARE_UPGRADE_WARNING_DISABLE = 'disable';
    const GUI_ALLOW_DEFAULT_HOSTNAME_ENABLE = 'enable';
    const GUI_ALLOW_DEFAULT_HOSTNAME_DISABLE = 'disable';
    const GUI_FORTICARE_REGISTRATION_SETUP_WARNING_ENABLE = 'enable';
    const GUI_FORTICARE_REGISTRATION_SETUP_WARNING_DISABLE = 'disable';
    const ADMIN_HTTPS_SSL_VERSIONS__1 = 'tlsv1-1';
    const ADMIN_HTTPS_SSL_VERSIONS__2 = 'tlsv1-2';
    const ADMIN_HTTPS_SSL_VERSIONS__3 = 'tlsv1-3';
    const SSD_TRIM_FREQ_NEVER = 'never';
    const SSD_TRIM_FREQ_HOURLY = 'hourly';
    const SSD_TRIM_FREQ_DAILY = 'daily';
    const SSD_TRIM_FREQ_WEEKLY = 'weekly';
    const SSD_TRIM_FREQ_MONTHLY = 'monthly';
    const SSD_TRIM_WEEKDAY_SUNDAY = 'sunday';
    const SSD_TRIM_WEEKDAY_MONDAY = 'monday';
    const SSD_TRIM_WEEKDAY_TUESDAY = 'tuesday';
    const SSD_TRIM_WEEKDAY_WEDNESDAY = 'wednesday';
    const SSD_TRIM_WEEKDAY_THURSDAY = 'thursday';
    const SSD_TRIM_WEEKDAY_FRIDAY = 'friday';
    const SSD_TRIM_WEEKDAY_SATURDAY = 'saturday';
    const ADMIN_CONCURRENT_ENABLE = 'enable';
    const ADMIN_CONCURRENT_DISABLE = 'disable';
    const DAILY_RESTART_ENABLE = 'enable';
    const DAILY_RESTART_DISABLE = 'disable';
    const BATCH_CMDB_ENABLE = 'enable';
    const BATCH_CMDB_DISABLE = 'disable';
    const MULTI_FACTOR_AUTHENTICATION_OPTIONAL = 'optional';
    const MULTI_FACTOR_AUTHENTICATION_MANDATORY = 'mandatory';
    const SSL_MIN_PROTO_VERSION_SSLV3 = 'SSLv3';
    const SSL_MIN_PROTO_VERSION_TLSV1 = 'TLSv1';
    const SSL_MIN_PROTO_VERSION_TLSV1_1 = 'TLSv1-1';
    const SSL_MIN_PROTO_VERSION_TLSV1_2 = 'TLSv1-2';
    const SSL_MIN_PROTO_VERSION_TLSV1_3 = 'TLSv1-3';
    const AUTORUN_LOG_FSCK_ENABLE = 'enable';
    const AUTORUN_LOG_FSCK_DISABLE = 'disable';
    const DST_ENABLE = 'enable';
    const DST_DISABLE = 'disable';
    const TIMEZONE__01 = '01';
    const TIMEZONE__02 = '02';
    const TIMEZONE__03 = '03';
    const TIMEZONE__04 = '04';
    const TIMEZONE__05 = '05';
    const TIMEZONE__81 = '81';
    const TIMEZONE__06 = '06';
    const TIMEZONE__07 = '07';
    const TIMEZONE__08 = '08';
    const TIMEZONE__09 = '09';
    const TIMEZONE__10 = '10';
    const TIMEZONE__11 = '11';
    const TIMEZONE__12 = '12';
    const TIMEZONE__13 = '13';
    const TIMEZONE__74 = '74';
    const TIMEZONE__14 = '14';
    const TIMEZONE__77 = '77';
    const TIMEZONE__15 = '15';
    const TIMEZONE__87 = '87';
    const TIMEZONE__16 = '16';
    const TIMEZONE__17 = '17';
    const TIMEZONE__18 = '18';
    const TIMEZONE__19 = '19';
    const TIMEZONE__20 = '20';
    const TIMEZONE__75 = '75';
    const TIMEZONE__21 = '21';
    const TIMEZONE__22 = '22';
    const TIMEZONE__23 = '23';
    const TIMEZONE__24 = '24';
    const TIMEZONE__80 = '80';
    const TIMEZONE__79 = '79';
    const TIMEZONE__25 = '25';
    const TIMEZONE__26 = '26';
    const TIMEZONE__27 = '27';
    const TIMEZONE__28 = '28';
    const TIMEZONE__78 = '78';
    const TIMEZONE__29 = '29';
    const TIMEZONE__30 = '30';
    const TIMEZONE__31 = '31';
    const TIMEZONE__32 = '32';
    const TIMEZONE__33 = '33';
    const TIMEZONE__34 = '34';
    const TIMEZONE__35 = '35';
    const TIMEZONE__36 = '36';
    const TIMEZONE__37 = '37';
    const TIMEZONE__38 = '38';
    const TIMEZONE__83 = '83';
    const TIMEZONE__84 = '84';
    const TIMEZONE__40 = '40';
    const TIMEZONE__85 = '85';
    const TIMEZONE__41 = '41';
    const TIMEZONE__42 = '42';
    const TIMEZONE__43 = '43';
    const TIMEZONE__39 = '39';
    const TIMEZONE__44 = '44';
    const TIMEZONE__46 = '46';
    const TIMEZONE__47 = '47';
    const TIMEZONE__51 = '51';
    const TIMEZONE__48 = '48';
    const TIMEZONE__45 = '45';
    const TIMEZONE__49 = '49';
    const TIMEZONE__50 = '50';
    const TIMEZONE__52 = '52';
    const TIMEZONE__53 = '53';
    const TIMEZONE__54 = '54';
    const TIMEZONE__55 = '55';
    const TIMEZONE__56 = '56';
    const TIMEZONE__57 = '57';
    const TIMEZONE__58 = '58';
    const TIMEZONE__59 = '59';
    const TIMEZONE__60 = '60';
    const TIMEZONE__62 = '62';
    const TIMEZONE__63 = '63';
    const TIMEZONE__61 = '61';
    const TIMEZONE__64 = '64';
    const TIMEZONE__65 = '65';
    const TIMEZONE__66 = '66';
    const TIMEZONE__67 = '67';
    const TIMEZONE__68 = '68';
    const TIMEZONE__69 = '69';
    const TIMEZONE__70 = '70';
    const TIMEZONE__71 = '71';
    const TIMEZONE__72 = '72';
    const TIMEZONE__00 = '00';
    const TIMEZONE__82 = '82';
    const TIMEZONE__73 = '73';
    const TIMEZONE__86 = '86';
    const TIMEZONE__76 = '76';
    const TRAFFIC_PRIORITY_TOS = 'tos';
    const TRAFFIC_PRIORITY_DSCP = 'dscp';
    const TRAFFIC_PRIORITY_LEVEL_LOW = 'low';
    const TRAFFIC_PRIORITY_LEVEL_MEDIUM = 'medium';
    const TRAFFIC_PRIORITY_LEVEL_HIGH = 'high';
    const ANTI_REPLAY_DISABLE = 'disable';
    const ANTI_REPLAY_LOOSE = 'loose';
    const ANTI_REPLAY_STRICT = 'strict';
    const SEND_PMTU_ICMP_ENABLE = 'enable';
    const SEND_PMTU_ICMP_DISABLE = 'disable';
    const HONOR_DF_ENABLE = 'enable';
    const HONOR_DF_DISABLE = 'disable';
    const VIRTUAL_SWITCH_VLAN_ENABLE = 'enable';
    const VIRTUAL_SWITCH_VLAN_DISABLE = 'disable';
    const REVISION_IMAGE_AUTO_BACKUP_ENABLE = 'enable';
    const REVISION_IMAGE_AUTO_BACKUP_DISABLE = 'disable';
    const REVISION_BACKUP_ON_LOGOUT_ENABLE = 'enable';
    const REVISION_BACKUP_ON_LOGOUT_DISABLE = 'disable';
    const STRONG_CRYPTO_ENABLE = 'enable';
    const STRONG_CRYPTO_DISABLE = 'disable';
    const SSH_CBC_CIPHER_ENABLE = 'enable';
    const SSH_CBC_CIPHER_DISABLE = 'disable';
    const SSH_HMAC_MD5_ENABLE = 'enable';
    const SSH_HMAC_MD5_DISABLE = 'disable';
    const SSH_KEX_SHA1_ENABLE = 'enable';
    const SSH_KEX_SHA1_DISABLE = 'disable';
    const SSH_MAC_WEAK_ENABLE = 'enable';
    const SSH_MAC_WEAK_DISABLE = 'disable';
    const SSL_STATIC_KEY_CIPHERS_ENABLE = 'enable';
    const SSL_STATIC_KEY_CIPHERS_DISABLE = 'disable';
    const SNAT_ROUTE_CHANGE_ENABLE = 'enable';
    const SNAT_ROUTE_CHANGE_DISABLE = 'disable';
    const CLI_AUDIT_LOG_ENABLE = 'enable';
    const CLI_AUDIT_LOG_DISABLE = 'disable';
    const DH_PARAMS__1024 = '1024';
    const DH_PARAMS__1536 = '1536';
    const DH_PARAMS__2048 = '2048';
    const DH_PARAMS__3072 = '3072';
    const DH_PARAMS__4096 = '4096';
    const DH_PARAMS__6144 = '6144';
    const DH_PARAMS__8192 = '8192';
    const FDS_STATISTICS_ENABLE = 'enable';
    const FDS_STATISTICS_DISABLE = 'disable';
    const TCP_OPTION_ENABLE = 'enable';
    const TCP_OPTION_DISABLE = 'disable';
    const LLDP_TRANSMISSION_ENABLE = 'enable';
    const LLDP_TRANSMISSION_DISABLE = 'disable';
    const LLDP_RECEPTION_ENABLE = 'enable';
    const LLDP_RECEPTION_DISABLE = 'disable';
    const PROXY_RE_AUTHENTICATION_MODE_SESSION = 'session';
    const PROXY_RE_AUTHENTICATION_MODE_TRAFFIC = 'traffic';
    const PROXY_RE_AUTHENTICATION_MODE_ABSOLUTE = 'absolute';
    const PROXY_AUTH_LIFETIME_ENABLE = 'enable';
    const PROXY_AUTH_LIFETIME_DISABLE = 'disable';
    const CHECK_PROTOCOL_HEADER_LOOSE = 'loose';
    const CHECK_PROTOCOL_HEADER_STRICT = 'strict';
    const VIP_ARP_RANGE_UNLIMITED = 'unlimited';
    const VIP_ARP_RANGE_RESTRICTED = 'restricted';
    const RESET_SESSIONLESS_TCP_ENABLE = 'enable';
    const RESET_SESSIONLESS_TCP_DISABLE = 'disable';
    const ALLOW_TRAFFIC_REDIRECT_ENABLE = 'enable';
    const ALLOW_TRAFFIC_REDIRECT_DISABLE = 'disable';
    const STRICT_DIRTY_SESSION_CHECK_ENABLE = 'enable';
    const STRICT_DIRTY_SESSION_CHECK_DISABLE = 'disable';
    const PRE_LOGIN_BANNER_ENABLE = 'enable';
    const PRE_LOGIN_BANNER_DISABLE = 'disable';
    const POST_LOGIN_BANNER_DISABLE = 'disable';
    const POST_LOGIN_BANNER_ENABLE = 'enable';
    const TFTP_ENABLE = 'enable';
    const TFTP_DISABLE = 'disable';
    const AV_FAILOPEN_PASS = 'pass';
    const AV_FAILOPEN_OFF = 'off';
    const AV_FAILOPEN_ONE_SHOT = 'one-shot';
    const AV_FAILOPEN_SESSION_ENABLE = 'enable';
    const AV_FAILOPEN_SESSION_DISABLE = 'disable';
    const CHECK_RESET_RANGE_STRICT = 'strict';
    const CHECK_RESET_RANGE_DISABLE = 'disable';
    const VDOM_MODE_NO_VDOM = 'no-vdom';
    const VDOM_MODE_SPLIT_VDOM = 'split-vdom';
    const VDOM_MODE_MULTI_VDOM = 'multi-vdom';
    const LONG_VDOM_NAME_ENABLE = 'enable';
    const LONG_VDOM_NAME_DISABLE = 'disable';
    const EDIT_VDOM_PROMPT_ENABLE = 'enable';
    const EDIT_VDOM_PROMPT_DISABLE = 'disable';
    const ADMIN_HTTPS_REDIRECT_ENABLE = 'enable';
    const ADMIN_HTTPS_REDIRECT_DISABLE = 'disable';
    const ADMIN_SSH_PASSWORD_ENABLE = 'enable';
    const ADMIN_SSH_PASSWORD_DISABLE = 'disable';
    const ADMIN_RESTRICT_LOCAL_ENABLE = 'enable';
    const ADMIN_RESTRICT_LOCAL_DISABLE = 'disable';
    const ADMIN_SSH_V1_ENABLE = 'enable';
    const ADMIN_SSH_V1_DISABLE = 'disable';
    const ADMIN_TELNET_ENABLE = 'enable';
    const ADMIN_TELNET_DISABLE = 'disable';
    const ADMIN_MAINTAINER_ENABLE = 'enable';
    const ADMIN_MAINTAINER_DISABLE = 'disable';
    const ADMIN_RESET_BUTTON_ENABLE = 'enable';
    const ADMIN_RESET_BUTTON_DISABLE = 'disable';
    const ADMIN_HTTPS_PKI_REQUIRED_ENABLE = 'enable';
    const ADMIN_HTTPS_PKI_REQUIRED_DISABLE = 'disable';
    const AUTH_KEEPALIVE_ENABLE = 'enable';
    const AUTH_KEEPALIVE_DISABLE = 'disable';
    const AUTH_SESSION_LIMIT_BLOCK_NEW = 'block-new';
    const AUTH_SESSION_LIMIT_LOGOUT_INACTIVE = 'logout-inactive';
    const CLT_CERT_REQ_ENABLE = 'enable';
    const CLT_CERT_REQ_DISABLE = 'disable';
    const CFG_SAVE_AUTOMATIC = 'automatic';
    const CFG_SAVE_MANUAL = 'manual';
    const CFG_SAVE_REVERT = 'revert';
    const REBOOT_UPON_CONFIG_RESTORE_ENABLE = 'enable';
    const REBOOT_UPON_CONFIG_RESTORE_DISABLE = 'disable';
    const ADMIN_SCP_ENABLE = 'enable';
    const ADMIN_SCP_DISABLE = 'disable';
    const SECURITY_RATING_RESULT_SUBMISSION_ENABLE = 'enable';
    const SECURITY_RATING_RESULT_SUBMISSION_DISABLE = 'disable';
    const SECURITY_RATING_RUN_ON_SCHEDULE_ENABLE = 'enable';
    const SECURITY_RATING_RUN_ON_SCHEDULE_DISABLE = 'disable';
    const WIRELESS_CONTROLLER_ENABLE = 'enable';
    const WIRELESS_CONTROLLER_DISABLE = 'disable';
    const FORTIEXTENDER_DISABLE = 'disable';
    const FORTIEXTENDER_ENABLE = 'enable';
    const FORTIEXTENDER_VLAN_MODE_ENABLE = 'enable';
    const FORTIEXTENDER_VLAN_MODE_DISABLE = 'disable';
    const SWITCH_CONTROLLER_DISABLE = 'disable';
    const SWITCH_CONTROLLER_ENABLE = 'enable';
    const PROXY_HARDWARE_ACCELERATION_DISABLE = 'disable';
    const PROXY_HARDWARE_ACCELERATION_ENABLE = 'enable';
    const FGD_ALERT_SUBSCRIPTION_ADVISORY = 'advisory';
    const FGD_ALERT_SUBSCRIPTION_LATEST_THREAT = 'latest-threat';
    const FGD_ALERT_SUBSCRIPTION_LATEST_VIRUS = 'latest-virus';
    const FGD_ALERT_SUBSCRIPTION_LATEST_ATTACK = 'latest-attack';
    const FGD_ALERT_SUBSCRIPTION_NEW_ANTIVIRUS_DB = 'new-antivirus-db';
    const FGD_ALERT_SUBSCRIPTION_NEW_ATTACK_DB = 'new-attack-db';
    const IPSEC_HMAC_OFFLOAD_ENABLE = 'enable';
    const IPSEC_HMAC_OFFLOAD_DISABLE = 'disable';
    const IPV6_ALLOW_ANYCAST_PROBE_ENABLE = 'enable';
    const IPV6_ALLOW_ANYCAST_PROBE_DISABLE = 'disable';
    const CSR_CA_ATTRIBUTE_ENABLE = 'enable';
    const CSR_CA_ATTRIBUTE_DISABLE = 'disable';
    const WIMAX_4G_USB_ENABLE = 'enable';
    const WIMAX_4G_USB_DISABLE = 'disable';
    const SSLVPN_KXP_HARDWARE_ACCELERATION_ENABLE = 'enable';
    const SSLVPN_KXP_HARDWARE_ACCELERATION_DISABLE = 'disable';
    const SSLVPN_CIPHER_HARDWARE_ACCELERATION_ENABLE = 'enable';
    const SSLVPN_CIPHER_HARDWARE_ACCELERATION_DISABLE = 'disable';
    const SSLVPN_EMS_SN_CHECK_ENABLE = 'enable';
    const SSLVPN_EMS_SN_CHECK_DISABLE = 'disable';
    const SSLVPN_PLUGIN_VERSION_CHECK_ENABLE = 'enable';
    const SSLVPN_PLUGIN_VERSION_CHECK_DISABLE = 'disable';
    const WAD_SOURCE_AFFINITY_DISABLE = 'disable';
    const WAD_SOURCE_AFFINITY_ENABLE = 'enable';
    const LOGIN_TIMESTAMP_ENABLE = 'enable';
    const LOGIN_TIMESTAMP_DISABLE = 'disable';
    const SPECIAL_FILE_23_SUPPORT_DISABLE = 'disable';
    const SPECIAL_FILE_23_SUPPORT_ENABLE = 'enable';
    const LOG_UUID_ADDRESS_ENABLE = 'enable';
    const LOG_UUID_ADDRESS_DISABLE = 'disable';
    const LOG_SSL_CONNECTION_ENABLE = 'enable';
    const LOG_SSL_CONNECTION_DISABLE = 'disable';
    const IPSEC_ASIC_OFFLOAD_ENABLE = 'enable';
    const IPSEC_ASIC_OFFLOAD_DISABLE = 'disable';
    const IPSEC_SOFT_DEC_ASYNC_ENABLE = 'enable';
    const IPSEC_SOFT_DEC_ASYNC_DISABLE = 'disable';
    const PRIVATE_DATA_ENCRYPTION_DISABLE = 'disable';
    const PRIVATE_DATA_ENCRYPTION_ENABLE = 'enable';
    const AUTO_AUTH_EXTENSION_DEVICE_ENABLE = 'enable';
    const AUTO_AUTH_EXTENSION_DEVICE_DISABLE = 'disable';
    const GUI_THEME_GREEN = 'green';
    const GUI_THEME_NEUTRINO = 'neutrino';
    const GUI_THEME_BLUE = 'blue';
    const GUI_THEME_MELONGENE = 'melongene';
    const GUI_THEME_MARINER = 'mariner';
    const GUI_DATE_FORMAT_YYYY_MM_DD = 'yyyy/MM/dd';
    const GUI_DATE_FORMAT_DD_MM_YYYY = 'dd/MM/yyyy';
    const GUI_DATE_FORMAT_MM_DD_YYYY = 'MM/dd/yyyy';
    const GUI_DATE_FORMAT_YYYY_MM_DD = 'yyyy-MM-dd';
    const GUI_DATE_FORMAT_DD_MM_YYYY = 'dd-MM-yyyy';
    const GUI_DATE_FORMAT_MM_DD_YYYY = 'MM-dd-yyyy';
    const GUI_DATE_TIME_SOURCE_SYSTEM = 'system';
    const GUI_DATE_TIME_SOURCE_BROWSER = 'browser';
    const CLOUD_COMMUNICATION_ENABLE = 'enable';
    const CLOUD_COMMUNICATION_DISABLE = 'disable';
    const FORTITOKEN_CLOUD_ENABLE = 'enable';
    const FORTITOKEN_CLOUD_DISABLE = 'disable';
    const IRQ_TIME_ACCOUNTING_AUTO = 'auto';
    const IRQ_TIME_ACCOUNTING_FORCE = 'force';
    const FORTIIPAM_INTEGRATION_ENABLE = 'enable';
    const FORTIIPAM_INTEGRATION_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_ENGLISH,
            self::LANGUAGE_FRENCH,
            self::LANGUAGE_SPANISH,
            self::LANGUAGE_PORTUGUESE,
            self::LANGUAGE_JAPANESE,
            self::LANGUAGE_TRACH,
            self::LANGUAGE_SIMCH,
            self::LANGUAGE_KOREAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiIpv6AllowableValues()
    {
        return [
            self::GUI_IPV6_ENABLE,
            self::GUI_IPV6_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiCertificatesAllowableValues()
    {
        return [
            self::GUI_CERTIFICATES_ENABLE,
            self::GUI_CERTIFICATES_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiCustomLanguageAllowableValues()
    {
        return [
            self::GUI_CUSTOM_LANGUAGE_ENABLE,
            self::GUI_CUSTOM_LANGUAGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiWirelessOpensecurityAllowableValues()
    {
        return [
            self::GUI_WIRELESS_OPENSECURITY_ENABLE,
            self::GUI_WIRELESS_OPENSECURITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDisplayHostnameAllowableValues()
    {
        return [
            self::GUI_DISPLAY_HOSTNAME_ENABLE,
            self::GUI_DISPLAY_HOSTNAME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiFortisandboxCloudAllowableValues()
    {
        return [
            self::GUI_FORTISANDBOX_CLOUD_ENABLE,
            self::GUI_FORTISANDBOX_CLOUD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiFirmwareUpgradeWarningAllowableValues()
    {
        return [
            self::GUI_FIRMWARE_UPGRADE_WARNING_ENABLE,
            self::GUI_FIRMWARE_UPGRADE_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiAllowDefaultHostnameAllowableValues()
    {
        return [
            self::GUI_ALLOW_DEFAULT_HOSTNAME_ENABLE,
            self::GUI_ALLOW_DEFAULT_HOSTNAME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiForticareRegistrationSetupWarningAllowableValues()
    {
        return [
            self::GUI_FORTICARE_REGISTRATION_SETUP_WARNING_ENABLE,
            self::GUI_FORTICARE_REGISTRATION_SETUP_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminHttpsSslVersionsAllowableValues()
    {
        return [
            self::ADMIN_HTTPS_SSL_VERSIONS__1,
            self::ADMIN_HTTPS_SSL_VERSIONS__2,
            self::ADMIN_HTTPS_SSL_VERSIONS__3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsdTrimFreqAllowableValues()
    {
        return [
            self::SSD_TRIM_FREQ_NEVER,
            self::SSD_TRIM_FREQ_HOURLY,
            self::SSD_TRIM_FREQ_DAILY,
            self::SSD_TRIM_FREQ_WEEKLY,
            self::SSD_TRIM_FREQ_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsdTrimWeekdayAllowableValues()
    {
        return [
            self::SSD_TRIM_WEEKDAY_SUNDAY,
            self::SSD_TRIM_WEEKDAY_MONDAY,
            self::SSD_TRIM_WEEKDAY_TUESDAY,
            self::SSD_TRIM_WEEKDAY_WEDNESDAY,
            self::SSD_TRIM_WEEKDAY_THURSDAY,
            self::SSD_TRIM_WEEKDAY_FRIDAY,
            self::SSD_TRIM_WEEKDAY_SATURDAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminConcurrentAllowableValues()
    {
        return [
            self::ADMIN_CONCURRENT_ENABLE,
            self::ADMIN_CONCURRENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDailyRestartAllowableValues()
    {
        return [
            self::DAILY_RESTART_ENABLE,
            self::DAILY_RESTART_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatchCmdbAllowableValues()
    {
        return [
            self::BATCH_CMDB_ENABLE,
            self::BATCH_CMDB_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultiFactorAuthenticationAllowableValues()
    {
        return [
            self::MULTI_FACTOR_AUTHENTICATION_OPTIONAL,
            self::MULTI_FACTOR_AUTHENTICATION_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslMinProtoVersionAllowableValues()
    {
        return [
            self::SSL_MIN_PROTO_VERSION_SSLV3,
            self::SSL_MIN_PROTO_VERSION_TLSV1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_1,
            self::SSL_MIN_PROTO_VERSION_TLSV1_2,
            self::SSL_MIN_PROTO_VERSION_TLSV1_3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutorunLogFsckAllowableValues()
    {
        return [
            self::AUTORUN_LOG_FSCK_ENABLE,
            self::AUTORUN_LOG_FSCK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDstAllowableValues()
    {
        return [
            self::DST_ENABLE,
            self::DST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimezoneAllowableValues()
    {
        return [
            self::TIMEZONE__01,
            self::TIMEZONE__02,
            self::TIMEZONE__03,
            self::TIMEZONE__04,
            self::TIMEZONE__05,
            self::TIMEZONE__81,
            self::TIMEZONE__06,
            self::TIMEZONE__07,
            self::TIMEZONE__08,
            self::TIMEZONE__09,
            self::TIMEZONE__10,
            self::TIMEZONE__11,
            self::TIMEZONE__12,
            self::TIMEZONE__13,
            self::TIMEZONE__74,
            self::TIMEZONE__14,
            self::TIMEZONE__77,
            self::TIMEZONE__15,
            self::TIMEZONE__87,
            self::TIMEZONE__16,
            self::TIMEZONE__17,
            self::TIMEZONE__18,
            self::TIMEZONE__19,
            self::TIMEZONE__20,
            self::TIMEZONE__75,
            self::TIMEZONE__21,
            self::TIMEZONE__22,
            self::TIMEZONE__23,
            self::TIMEZONE__24,
            self::TIMEZONE__80,
            self::TIMEZONE__79,
            self::TIMEZONE__25,
            self::TIMEZONE__26,
            self::TIMEZONE__27,
            self::TIMEZONE__28,
            self::TIMEZONE__78,
            self::TIMEZONE__29,
            self::TIMEZONE__30,
            self::TIMEZONE__31,
            self::TIMEZONE__32,
            self::TIMEZONE__33,
            self::TIMEZONE__34,
            self::TIMEZONE__35,
            self::TIMEZONE__36,
            self::TIMEZONE__37,
            self::TIMEZONE__38,
            self::TIMEZONE__83,
            self::TIMEZONE__84,
            self::TIMEZONE__40,
            self::TIMEZONE__85,
            self::TIMEZONE__41,
            self::TIMEZONE__42,
            self::TIMEZONE__43,
            self::TIMEZONE__39,
            self::TIMEZONE__44,
            self::TIMEZONE__46,
            self::TIMEZONE__47,
            self::TIMEZONE__51,
            self::TIMEZONE__48,
            self::TIMEZONE__45,
            self::TIMEZONE__49,
            self::TIMEZONE__50,
            self::TIMEZONE__52,
            self::TIMEZONE__53,
            self::TIMEZONE__54,
            self::TIMEZONE__55,
            self::TIMEZONE__56,
            self::TIMEZONE__57,
            self::TIMEZONE__58,
            self::TIMEZONE__59,
            self::TIMEZONE__60,
            self::TIMEZONE__62,
            self::TIMEZONE__63,
            self::TIMEZONE__61,
            self::TIMEZONE__64,
            self::TIMEZONE__65,
            self::TIMEZONE__66,
            self::TIMEZONE__67,
            self::TIMEZONE__68,
            self::TIMEZONE__69,
            self::TIMEZONE__70,
            self::TIMEZONE__71,
            self::TIMEZONE__72,
            self::TIMEZONE__00,
            self::TIMEZONE__82,
            self::TIMEZONE__73,
            self::TIMEZONE__86,
            self::TIMEZONE__76,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficPriorityAllowableValues()
    {
        return [
            self::TRAFFIC_PRIORITY_TOS,
            self::TRAFFIC_PRIORITY_DSCP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficPriorityLevelAllowableValues()
    {
        return [
            self::TRAFFIC_PRIORITY_LEVEL_LOW,
            self::TRAFFIC_PRIORITY_LEVEL_MEDIUM,
            self::TRAFFIC_PRIORITY_LEVEL_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAntiReplayAllowableValues()
    {
        return [
            self::ANTI_REPLAY_DISABLE,
            self::ANTI_REPLAY_LOOSE,
            self::ANTI_REPLAY_STRICT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendPmtuIcmpAllowableValues()
    {
        return [
            self::SEND_PMTU_ICMP_ENABLE,
            self::SEND_PMTU_ICMP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHonorDfAllowableValues()
    {
        return [
            self::HONOR_DF_ENABLE,
            self::HONOR_DF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVirtualSwitchVlanAllowableValues()
    {
        return [
            self::VIRTUAL_SWITCH_VLAN_ENABLE,
            self::VIRTUAL_SWITCH_VLAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRevisionImageAutoBackupAllowableValues()
    {
        return [
            self::REVISION_IMAGE_AUTO_BACKUP_ENABLE,
            self::REVISION_IMAGE_AUTO_BACKUP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRevisionBackupOnLogoutAllowableValues()
    {
        return [
            self::REVISION_BACKUP_ON_LOGOUT_ENABLE,
            self::REVISION_BACKUP_ON_LOGOUT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrongCryptoAllowableValues()
    {
        return [
            self::STRONG_CRYPTO_ENABLE,
            self::STRONG_CRYPTO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshCbcCipherAllowableValues()
    {
        return [
            self::SSH_CBC_CIPHER_ENABLE,
            self::SSH_CBC_CIPHER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshHmacMd5AllowableValues()
    {
        return [
            self::SSH_HMAC_MD5_ENABLE,
            self::SSH_HMAC_MD5_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshKexSha1AllowableValues()
    {
        return [
            self::SSH_KEX_SHA1_ENABLE,
            self::SSH_KEX_SHA1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshMacWeakAllowableValues()
    {
        return [
            self::SSH_MAC_WEAK_ENABLE,
            self::SSH_MAC_WEAK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslStaticKeyCiphersAllowableValues()
    {
        return [
            self::SSL_STATIC_KEY_CIPHERS_ENABLE,
            self::SSL_STATIC_KEY_CIPHERS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSnatRouteChangeAllowableValues()
    {
        return [
            self::SNAT_ROUTE_CHANGE_ENABLE,
            self::SNAT_ROUTE_CHANGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCliAuditLogAllowableValues()
    {
        return [
            self::CLI_AUDIT_LOG_ENABLE,
            self::CLI_AUDIT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhParamsAllowableValues()
    {
        return [
            self::DH_PARAMS__1024,
            self::DH_PARAMS__1536,
            self::DH_PARAMS__2048,
            self::DH_PARAMS__3072,
            self::DH_PARAMS__4096,
            self::DH_PARAMS__6144,
            self::DH_PARAMS__8192,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFdsStatisticsAllowableValues()
    {
        return [
            self::FDS_STATISTICS_ENABLE,
            self::FDS_STATISTICS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTcpOptionAllowableValues()
    {
        return [
            self::TCP_OPTION_ENABLE,
            self::TCP_OPTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpTransmissionAllowableValues()
    {
        return [
            self::LLDP_TRANSMISSION_ENABLE,
            self::LLDP_TRANSMISSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLldpReceptionAllowableValues()
    {
        return [
            self::LLDP_RECEPTION_ENABLE,
            self::LLDP_RECEPTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyReAuthenticationModeAllowableValues()
    {
        return [
            self::PROXY_RE_AUTHENTICATION_MODE_SESSION,
            self::PROXY_RE_AUTHENTICATION_MODE_TRAFFIC,
            self::PROXY_RE_AUTHENTICATION_MODE_ABSOLUTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyAuthLifetimeAllowableValues()
    {
        return [
            self::PROXY_AUTH_LIFETIME_ENABLE,
            self::PROXY_AUTH_LIFETIME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckProtocolHeaderAllowableValues()
    {
        return [
            self::CHECK_PROTOCOL_HEADER_LOOSE,
            self::CHECK_PROTOCOL_HEADER_STRICT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVipArpRangeAllowableValues()
    {
        return [
            self::VIP_ARP_RANGE_UNLIMITED,
            self::VIP_ARP_RANGE_RESTRICTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResetSessionlessTcpAllowableValues()
    {
        return [
            self::RESET_SESSIONLESS_TCP_ENABLE,
            self::RESET_SESSIONLESS_TCP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowTrafficRedirectAllowableValues()
    {
        return [
            self::ALLOW_TRAFFIC_REDIRECT_ENABLE,
            self::ALLOW_TRAFFIC_REDIRECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictDirtySessionCheckAllowableValues()
    {
        return [
            self::STRICT_DIRTY_SESSION_CHECK_ENABLE,
            self::STRICT_DIRTY_SESSION_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreLoginBannerAllowableValues()
    {
        return [
            self::PRE_LOGIN_BANNER_ENABLE,
            self::PRE_LOGIN_BANNER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostLoginBannerAllowableValues()
    {
        return [
            self::POST_LOGIN_BANNER_DISABLE,
            self::POST_LOGIN_BANNER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTftpAllowableValues()
    {
        return [
            self::TFTP_ENABLE,
            self::TFTP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvFailopenAllowableValues()
    {
        return [
            self::AV_FAILOPEN_PASS,
            self::AV_FAILOPEN_OFF,
            self::AV_FAILOPEN_ONE_SHOT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvFailopenSessionAllowableValues()
    {
        return [
            self::AV_FAILOPEN_SESSION_ENABLE,
            self::AV_FAILOPEN_SESSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckResetRangeAllowableValues()
    {
        return [
            self::CHECK_RESET_RANGE_STRICT,
            self::CHECK_RESET_RANGE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVdomModeAllowableValues()
    {
        return [
            self::VDOM_MODE_NO_VDOM,
            self::VDOM_MODE_SPLIT_VDOM,
            self::VDOM_MODE_MULTI_VDOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLongVdomNameAllowableValues()
    {
        return [
            self::LONG_VDOM_NAME_ENABLE,
            self::LONG_VDOM_NAME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEditVdomPromptAllowableValues()
    {
        return [
            self::EDIT_VDOM_PROMPT_ENABLE,
            self::EDIT_VDOM_PROMPT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminHttpsRedirectAllowableValues()
    {
        return [
            self::ADMIN_HTTPS_REDIRECT_ENABLE,
            self::ADMIN_HTTPS_REDIRECT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminSshPasswordAllowableValues()
    {
        return [
            self::ADMIN_SSH_PASSWORD_ENABLE,
            self::ADMIN_SSH_PASSWORD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminRestrictLocalAllowableValues()
    {
        return [
            self::ADMIN_RESTRICT_LOCAL_ENABLE,
            self::ADMIN_RESTRICT_LOCAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminSshV1AllowableValues()
    {
        return [
            self::ADMIN_SSH_V1_ENABLE,
            self::ADMIN_SSH_V1_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminTelnetAllowableValues()
    {
        return [
            self::ADMIN_TELNET_ENABLE,
            self::ADMIN_TELNET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminMaintainerAllowableValues()
    {
        return [
            self::ADMIN_MAINTAINER_ENABLE,
            self::ADMIN_MAINTAINER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminResetButtonAllowableValues()
    {
        return [
            self::ADMIN_RESET_BUTTON_ENABLE,
            self::ADMIN_RESET_BUTTON_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminHttpsPkiRequiredAllowableValues()
    {
        return [
            self::ADMIN_HTTPS_PKI_REQUIRED_ENABLE,
            self::ADMIN_HTTPS_PKI_REQUIRED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthKeepaliveAllowableValues()
    {
        return [
            self::AUTH_KEEPALIVE_ENABLE,
            self::AUTH_KEEPALIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthSessionLimitAllowableValues()
    {
        return [
            self::AUTH_SESSION_LIMIT_BLOCK_NEW,
            self::AUTH_SESSION_LIMIT_LOGOUT_INACTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCltCertReqAllowableValues()
    {
        return [
            self::CLT_CERT_REQ_ENABLE,
            self::CLT_CERT_REQ_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCfgSaveAllowableValues()
    {
        return [
            self::CFG_SAVE_AUTOMATIC,
            self::CFG_SAVE_MANUAL,
            self::CFG_SAVE_REVERT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRebootUponConfigRestoreAllowableValues()
    {
        return [
            self::REBOOT_UPON_CONFIG_RESTORE_ENABLE,
            self::REBOOT_UPON_CONFIG_RESTORE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminScpAllowableValues()
    {
        return [
            self::ADMIN_SCP_ENABLE,
            self::ADMIN_SCP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityRatingResultSubmissionAllowableValues()
    {
        return [
            self::SECURITY_RATING_RESULT_SUBMISSION_ENABLE,
            self::SECURITY_RATING_RESULT_SUBMISSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityRatingRunOnScheduleAllowableValues()
    {
        return [
            self::SECURITY_RATING_RUN_ON_SCHEDULE_ENABLE,
            self::SECURITY_RATING_RUN_ON_SCHEDULE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWirelessControllerAllowableValues()
    {
        return [
            self::WIRELESS_CONTROLLER_ENABLE,
            self::WIRELESS_CONTROLLER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiextenderAllowableValues()
    {
        return [
            self::FORTIEXTENDER_DISABLE,
            self::FORTIEXTENDER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiextenderVlanModeAllowableValues()
    {
        return [
            self::FORTIEXTENDER_VLAN_MODE_ENABLE,
            self::FORTIEXTENDER_VLAN_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_DISABLE,
            self::SWITCH_CONTROLLER_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProxyHardwareAccelerationAllowableValues()
    {
        return [
            self::PROXY_HARDWARE_ACCELERATION_DISABLE,
            self::PROXY_HARDWARE_ACCELERATION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFgdAlertSubscriptionAllowableValues()
    {
        return [
            self::FGD_ALERT_SUBSCRIPTION_ADVISORY,
            self::FGD_ALERT_SUBSCRIPTION_LATEST_THREAT,
            self::FGD_ALERT_SUBSCRIPTION_LATEST_VIRUS,
            self::FGD_ALERT_SUBSCRIPTION_LATEST_ATTACK,
            self::FGD_ALERT_SUBSCRIPTION_NEW_ANTIVIRUS_DB,
            self::FGD_ALERT_SUBSCRIPTION_NEW_ATTACK_DB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecHmacOffloadAllowableValues()
    {
        return [
            self::IPSEC_HMAC_OFFLOAD_ENABLE,
            self::IPSEC_HMAC_OFFLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6AllowAnycastProbeAllowableValues()
    {
        return [
            self::IPV6_ALLOW_ANYCAST_PROBE_ENABLE,
            self::IPV6_ALLOW_ANYCAST_PROBE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCsrCaAttributeAllowableValues()
    {
        return [
            self::CSR_CA_ATTRIBUTE_ENABLE,
            self::CSR_CA_ATTRIBUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWimax4gUsbAllowableValues()
    {
        return [
            self::WIMAX_4G_USB_ENABLE,
            self::WIMAX_4G_USB_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslvpnKxpHardwareAccelerationAllowableValues()
    {
        return [
            self::SSLVPN_KXP_HARDWARE_ACCELERATION_ENABLE,
            self::SSLVPN_KXP_HARDWARE_ACCELERATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslvpnCipherHardwareAccelerationAllowableValues()
    {
        return [
            self::SSLVPN_CIPHER_HARDWARE_ACCELERATION_ENABLE,
            self::SSLVPN_CIPHER_HARDWARE_ACCELERATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslvpnEmsSnCheckAllowableValues()
    {
        return [
            self::SSLVPN_EMS_SN_CHECK_ENABLE,
            self::SSLVPN_EMS_SN_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslvpnPluginVersionCheckAllowableValues()
    {
        return [
            self::SSLVPN_PLUGIN_VERSION_CHECK_ENABLE,
            self::SSLVPN_PLUGIN_VERSION_CHECK_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWadSourceAffinityAllowableValues()
    {
        return [
            self::WAD_SOURCE_AFFINITY_DISABLE,
            self::WAD_SOURCE_AFFINITY_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoginTimestampAllowableValues()
    {
        return [
            self::LOGIN_TIMESTAMP_ENABLE,
            self::LOGIN_TIMESTAMP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecialFile23SupportAllowableValues()
    {
        return [
            self::SPECIAL_FILE_23_SUPPORT_DISABLE,
            self::SPECIAL_FILE_23_SUPPORT_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogUuidAddressAllowableValues()
    {
        return [
            self::LOG_UUID_ADDRESS_ENABLE,
            self::LOG_UUID_ADDRESS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogSslConnectionAllowableValues()
    {
        return [
            self::LOG_SSL_CONNECTION_ENABLE,
            self::LOG_SSL_CONNECTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecAsicOffloadAllowableValues()
    {
        return [
            self::IPSEC_ASIC_OFFLOAD_ENABLE,
            self::IPSEC_ASIC_OFFLOAD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsecSoftDecAsyncAllowableValues()
    {
        return [
            self::IPSEC_SOFT_DEC_ASYNC_ENABLE,
            self::IPSEC_SOFT_DEC_ASYNC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivateDataEncryptionAllowableValues()
    {
        return [
            self::PRIVATE_DATA_ENCRYPTION_DISABLE,
            self::PRIVATE_DATA_ENCRYPTION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoAuthExtensionDeviceAllowableValues()
    {
        return [
            self::AUTO_AUTH_EXTENSION_DEVICE_ENABLE,
            self::AUTO_AUTH_EXTENSION_DEVICE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiThemeAllowableValues()
    {
        return [
            self::GUI_THEME_GREEN,
            self::GUI_THEME_NEUTRINO,
            self::GUI_THEME_BLUE,
            self::GUI_THEME_MELONGENE,
            self::GUI_THEME_MARINER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDateFormatAllowableValues()
    {
        return [
            self::GUI_DATE_FORMAT_YYYY_MM_DD,
            self::GUI_DATE_FORMAT_DD_MM_YYYY,
            self::GUI_DATE_FORMAT_MM_DD_YYYY,
            self::GUI_DATE_FORMAT_YYYY_MM_DD,
            self::GUI_DATE_FORMAT_DD_MM_YYYY,
            self::GUI_DATE_FORMAT_MM_DD_YYYY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuiDateTimeSourceAllowableValues()
    {
        return [
            self::GUI_DATE_TIME_SOURCE_SYSTEM,
            self::GUI_DATE_TIME_SOURCE_BROWSER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloudCommunicationAllowableValues()
    {
        return [
            self::CLOUD_COMMUNICATION_ENABLE,
            self::CLOUD_COMMUNICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortitokenCloudAllowableValues()
    {
        return [
            self::FORTITOKEN_CLOUD_ENABLE,
            self::FORTITOKEN_CLOUD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIrqTimeAccountingAllowableValues()
    {
        return [
            self::IRQ_TIME_ACCOUNTING_AUTO,
            self::IRQ_TIME_ACCOUNTING_FORCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiipamIntegrationAllowableValues()
    {
        return [
            self::FORTIIPAM_INTEGRATION_ENABLE,
            self::FORTIIPAM_INTEGRATION_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = $data['language'] ?? null;
        $this->container['gui_ipv6'] = $data['gui_ipv6'] ?? null;
        $this->container['gui_certificates'] = $data['gui_certificates'] ?? null;
        $this->container['gui_custom_language'] = $data['gui_custom_language'] ?? null;
        $this->container['gui_wireless_opensecurity'] = $data['gui_wireless_opensecurity'] ?? null;
        $this->container['gui_display_hostname'] = $data['gui_display_hostname'] ?? null;
        $this->container['gui_fortisandbox_cloud'] = $data['gui_fortisandbox_cloud'] ?? null;
        $this->container['gui_firmware_upgrade_warning'] = $data['gui_firmware_upgrade_warning'] ?? null;
        $this->container['gui_allow_default_hostname'] = $data['gui_allow_default_hostname'] ?? null;
        $this->container['gui_forticare_registration_setup_warning'] = $data['gui_forticare_registration_setup_warning'] ?? null;
        $this->container['admin_https_ssl_versions'] = $data['admin_https_ssl_versions'] ?? null;
        $this->container['admintimeout'] = $data['admintimeout'] ?? null;
        $this->container['admin_console_timeout'] = $data['admin_console_timeout'] ?? null;
        $this->container['ssd_trim_freq'] = $data['ssd_trim_freq'] ?? null;
        $this->container['ssd_trim_hour'] = $data['ssd_trim_hour'] ?? null;
        $this->container['ssd_trim_min'] = $data['ssd_trim_min'] ?? null;
        $this->container['ssd_trim_weekday'] = $data['ssd_trim_weekday'] ?? null;
        $this->container['ssd_trim_date'] = $data['ssd_trim_date'] ?? null;
        $this->container['admin_concurrent'] = $data['admin_concurrent'] ?? null;
        $this->container['admin_lockout_threshold'] = $data['admin_lockout_threshold'] ?? null;
        $this->container['admin_lockout_duration'] = $data['admin_lockout_duration'] ?? null;
        $this->container['refresh'] = $data['refresh'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['failtime'] = $data['failtime'] ?? null;
        $this->container['daily_restart'] = $data['daily_restart'] ?? null;
        $this->container['restart_time'] = $data['restart_time'] ?? null;
        $this->container['radius_port'] = $data['radius_port'] ?? null;
        $this->container['admin_login_max'] = $data['admin_login_max'] ?? null;
        $this->container['remoteauthtimeout'] = $data['remoteauthtimeout'] ?? null;
        $this->container['ldapconntimeout'] = $data['ldapconntimeout'] ?? null;
        $this->container['batch_cmdb'] = $data['batch_cmdb'] ?? null;
        $this->container['multi_factor_authentication'] = $data['multi_factor_authentication'] ?? null;
        $this->container['ssl_min_proto_version'] = $data['ssl_min_proto_version'] ?? null;
        $this->container['autorun_log_fsck'] = $data['autorun_log_fsck'] ?? null;
        $this->container['dst'] = $data['dst'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['traffic_priority'] = $data['traffic_priority'] ?? null;
        $this->container['traffic_priority_level'] = $data['traffic_priority_level'] ?? null;
        $this->container['anti_replay'] = $data['anti_replay'] ?? null;
        $this->container['send_pmtu_icmp'] = $data['send_pmtu_icmp'] ?? null;
        $this->container['honor_df'] = $data['honor_df'] ?? null;
        $this->container['virtual_switch_vlan'] = $data['virtual_switch_vlan'] ?? null;
        $this->container['revision_image_auto_backup'] = $data['revision_image_auto_backup'] ?? null;
        $this->container['revision_backup_on_logout'] = $data['revision_backup_on_logout'] ?? null;
        $this->container['management_vdom'] = $data['management_vdom'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['alias'] = $data['alias'] ?? null;
        $this->container['strong_crypto'] = $data['strong_crypto'] ?? null;
        $this->container['ssh_cbc_cipher'] = $data['ssh_cbc_cipher'] ?? null;
        $this->container['ssh_hmac_md5'] = $data['ssh_hmac_md5'] ?? null;
        $this->container['ssh_kex_sha1'] = $data['ssh_kex_sha1'] ?? null;
        $this->container['ssh_mac_weak'] = $data['ssh_mac_weak'] ?? null;
        $this->container['ssl_static_key_ciphers'] = $data['ssl_static_key_ciphers'] ?? null;
        $this->container['snat_route_change'] = $data['snat_route_change'] ?? null;
        $this->container['cli_audit_log'] = $data['cli_audit_log'] ?? null;
        $this->container['dh_params'] = $data['dh_params'] ?? null;
        $this->container['fds_statistics'] = $data['fds_statistics'] ?? null;
        $this->container['fds_statistics_period'] = $data['fds_statistics_period'] ?? null;
        $this->container['tcp_option'] = $data['tcp_option'] ?? null;
        $this->container['lldp_transmission'] = $data['lldp_transmission'] ?? null;
        $this->container['lldp_reception'] = $data['lldp_reception'] ?? null;
        $this->container['proxy_auth_timeout'] = $data['proxy_auth_timeout'] ?? null;
        $this->container['proxy_re_authentication_mode'] = $data['proxy_re_authentication_mode'] ?? null;
        $this->container['proxy_auth_lifetime'] = $data['proxy_auth_lifetime'] ?? null;
        $this->container['proxy_auth_lifetime_timeout'] = $data['proxy_auth_lifetime_timeout'] ?? null;
        $this->container['sys_perf_log_interval'] = $data['sys_perf_log_interval'] ?? null;
        $this->container['check_protocol_header'] = $data['check_protocol_header'] ?? null;
        $this->container['vip_arp_range'] = $data['vip_arp_range'] ?? null;
        $this->container['reset_sessionless_tcp'] = $data['reset_sessionless_tcp'] ?? null;
        $this->container['allow_traffic_redirect'] = $data['allow_traffic_redirect'] ?? null;
        $this->container['strict_dirty_session_check'] = $data['strict_dirty_session_check'] ?? null;
        $this->container['tcp_halfclose_timer'] = $data['tcp_halfclose_timer'] ?? null;
        $this->container['tcp_halfopen_timer'] = $data['tcp_halfopen_timer'] ?? null;
        $this->container['tcp_timewait_timer'] = $data['tcp_timewait_timer'] ?? null;
        $this->container['udp_idle_timer'] = $data['udp_idle_timer'] ?? null;
        $this->container['block_session_timer'] = $data['block_session_timer'] ?? null;
        $this->container['ip_src_port_range'] = $data['ip_src_port_range'] ?? null;
        $this->container['pre_login_banner'] = $data['pre_login_banner'] ?? null;
        $this->container['post_login_banner'] = $data['post_login_banner'] ?? null;
        $this->container['tftp'] = $data['tftp'] ?? null;
        $this->container['av_failopen'] = $data['av_failopen'] ?? null;
        $this->container['av_failopen_session'] = $data['av_failopen_session'] ?? null;
        $this->container['memory_use_threshold_extreme'] = $data['memory_use_threshold_extreme'] ?? null;
        $this->container['memory_use_threshold_red'] = $data['memory_use_threshold_red'] ?? null;
        $this->container['memory_use_threshold_green'] = $data['memory_use_threshold_green'] ?? null;
        $this->container['cpu_use_threshold'] = $data['cpu_use_threshold'] ?? null;
        $this->container['check_reset_range'] = $data['check_reset_range'] ?? null;
        $this->container['vdom_mode'] = $data['vdom_mode'] ?? null;
        $this->container['long_vdom_name'] = $data['long_vdom_name'] ?? null;
        $this->container['edit_vdom_prompt'] = $data['edit_vdom_prompt'] ?? null;
        $this->container['admin_port'] = $data['admin_port'] ?? null;
        $this->container['admin_sport'] = $data['admin_sport'] ?? null;
        $this->container['admin_https_redirect'] = $data['admin_https_redirect'] ?? null;
        $this->container['admin_hsts_max_age'] = $data['admin_hsts_max_age'] ?? null;
        $this->container['admin_ssh_password'] = $data['admin_ssh_password'] ?? null;
        $this->container['admin_restrict_local'] = $data['admin_restrict_local'] ?? null;
        $this->container['admin_ssh_port'] = $data['admin_ssh_port'] ?? null;
        $this->container['admin_ssh_grace_time'] = $data['admin_ssh_grace_time'] ?? null;
        $this->container['admin_ssh_v1'] = $data['admin_ssh_v1'] ?? null;
        $this->container['admin_telnet'] = $data['admin_telnet'] ?? null;
        $this->container['admin_telnet_port'] = $data['admin_telnet_port'] ?? null;
        $this->container['default_service_source_port'] = $data['default_service_source_port'] ?? null;
        $this->container['admin_maintainer'] = $data['admin_maintainer'] ?? null;
        $this->container['admin_reset_button'] = $data['admin_reset_button'] ?? null;
        $this->container['admin_server_cert'] = $data['admin_server_cert'] ?? null;
        $this->container['user_server_cert'] = $data['user_server_cert'] ?? null;
        $this->container['admin_https_pki_required'] = $data['admin_https_pki_required'] ?? null;
        $this->container['wifi_certificate'] = $data['wifi_certificate'] ?? null;
        $this->container['wifi_ca_certificate'] = $data['wifi_ca_certificate'] ?? null;
        $this->container['auth_http_port'] = $data['auth_http_port'] ?? null;
        $this->container['auth_https_port'] = $data['auth_https_port'] ?? null;
        $this->container['auth_keepalive'] = $data['auth_keepalive'] ?? null;
        $this->container['policy_auth_concurrent'] = $data['policy_auth_concurrent'] ?? null;
        $this->container['auth_session_limit'] = $data['auth_session_limit'] ?? null;
        $this->container['auth_cert'] = $data['auth_cert'] ?? null;
        $this->container['clt_cert_req'] = $data['clt_cert_req'] ?? null;
        $this->container['fortiservice_port'] = $data['fortiservice_port'] ?? null;
        $this->container['cfg_save'] = $data['cfg_save'] ?? null;
        $this->container['cfg_revert_timeout'] = $data['cfg_revert_timeout'] ?? null;
        $this->container['reboot_upon_config_restore'] = $data['reboot_upon_config_restore'] ?? null;
        $this->container['admin_scp'] = $data['admin_scp'] ?? null;
        $this->container['security_rating_result_submission'] = $data['security_rating_result_submission'] ?? null;
        $this->container['security_rating_run_on_schedule'] = $data['security_rating_run_on_schedule'] ?? null;
        $this->container['wireless_controller'] = $data['wireless_controller'] ?? null;
        $this->container['wireless_controller_port'] = $data['wireless_controller_port'] ?? null;
        $this->container['fortiextender_data_port'] = $data['fortiextender_data_port'] ?? null;
        $this->container['fortiextender'] = $data['fortiextender'] ?? null;
        $this->container['fortiextender_vlan_mode'] = $data['fortiextender_vlan_mode'] ?? null;
        $this->container['switch_controller'] = $data['switch_controller'] ?? null;
        $this->container['switch_controller_reserved_network'] = $data['switch_controller_reserved_network'] ?? null;
        $this->container['dnsproxy_worker_count'] = $data['dnsproxy_worker_count'] ?? null;
        $this->container['url_filter_count'] = $data['url_filter_count'] ?? null;
        $this->container['proxy_worker_count'] = $data['proxy_worker_count'] ?? null;
        $this->container['scanunit_count'] = $data['scanunit_count'] ?? null;
        $this->container['proxy_hardware_acceleration'] = $data['proxy_hardware_acceleration'] ?? null;
        $this->container['fgd_alert_subscription'] = $data['fgd_alert_subscription'] ?? null;
        $this->container['ipsec_hmac_offload'] = $data['ipsec_hmac_offload'] ?? null;
        $this->container['ipv6_accept_dad'] = $data['ipv6_accept_dad'] ?? null;
        $this->container['ipv6_allow_anycast_probe'] = $data['ipv6_allow_anycast_probe'] ?? null;
        $this->container['csr_ca_attribute'] = $data['csr_ca_attribute'] ?? null;
        $this->container['wimax_4g_usb'] = $data['wimax_4g_usb'] ?? null;
        $this->container['cert_chain_max'] = $data['cert_chain_max'] ?? null;
        $this->container['sslvpn_max_worker_count'] = $data['sslvpn_max_worker_count'] ?? null;
        $this->container['sslvpn_kxp_hardware_acceleration'] = $data['sslvpn_kxp_hardware_acceleration'] ?? null;
        $this->container['sslvpn_cipher_hardware_acceleration'] = $data['sslvpn_cipher_hardware_acceleration'] ?? null;
        $this->container['sslvpn_ems_sn_check'] = $data['sslvpn_ems_sn_check'] ?? null;
        $this->container['sslvpn_plugin_version_check'] = $data['sslvpn_plugin_version_check'] ?? null;
        $this->container['two_factor_ftk_expiry'] = $data['two_factor_ftk_expiry'] ?? null;
        $this->container['two_factor_email_expiry'] = $data['two_factor_email_expiry'] ?? null;
        $this->container['two_factor_sms_expiry'] = $data['two_factor_sms_expiry'] ?? null;
        $this->container['two_factor_fac_expiry'] = $data['two_factor_fac_expiry'] ?? null;
        $this->container['two_factor_ftm_expiry'] = $data['two_factor_ftm_expiry'] ?? null;
        $this->container['wad_worker_count'] = $data['wad_worker_count'] ?? null;
        $this->container['wad_csvc_cs_count'] = $data['wad_csvc_cs_count'] ?? null;
        $this->container['wad_csvc_db_count'] = $data['wad_csvc_db_count'] ?? null;
        $this->container['wad_source_affinity'] = $data['wad_source_affinity'] ?? null;
        $this->container['wad_memory_change_granularity'] = $data['wad_memory_change_granularity'] ?? null;
        $this->container['login_timestamp'] = $data['login_timestamp'] ?? null;
        $this->container['miglogd_children'] = $data['miglogd_children'] ?? null;
        $this->container['special_file_23_support'] = $data['special_file_23_support'] ?? null;
        $this->container['log_uuid_address'] = $data['log_uuid_address'] ?? null;
        $this->container['log_ssl_connection'] = $data['log_ssl_connection'] ?? null;
        $this->container['arp_max_entry'] = $data['arp_max_entry'] ?? null;
        $this->container['ndp_max_entry'] = $data['ndp_max_entry'] ?? null;
        $this->container['br_fdb_max_entry'] = $data['br_fdb_max_entry'] ?? null;
        $this->container['max_route_cache_size'] = $data['max_route_cache_size'] ?? null;
        $this->container['ipsec_asic_offload'] = $data['ipsec_asic_offload'] ?? null;
        $this->container['ipsec_soft_dec_async'] = $data['ipsec_soft_dec_async'] ?? null;
        $this->container['device_idle_timeout'] = $data['device_idle_timeout'] ?? null;
        $this->container['user_device_store_max_devices'] = $data['user_device_store_max_devices'] ?? null;
        $this->container['user_device_store_max_users'] = $data['user_device_store_max_users'] ?? null;
        $this->container['gui_device_latitude'] = $data['gui_device_latitude'] ?? null;
        $this->container['gui_device_longitude'] = $data['gui_device_longitude'] ?? null;
        $this->container['private_data_encryption'] = $data['private_data_encryption'] ?? null;
        $this->container['auto_auth_extension_device'] = $data['auto_auth_extension_device'] ?? null;
        $this->container['gui_theme'] = $data['gui_theme'] ?? null;
        $this->container['gui_date_format'] = $data['gui_date_format'] ?? null;
        $this->container['gui_date_time_source'] = $data['gui_date_time_source'] ?? null;
        $this->container['igmp_state_limit'] = $data['igmp_state_limit'] ?? null;
        $this->container['cloud_communication'] = $data['cloud_communication'] ?? null;
        $this->container['fec_port'] = $data['fec_port'] ?? null;
        $this->container['fortitoken_cloud'] = $data['fortitoken_cloud'] ?? null;
        $this->container['faz_disk_buffer_size'] = $data['faz_disk_buffer_size'] ?? null;
        $this->container['irq_time_accounting'] = $data['irq_time_accounting'] ?? null;
        $this->container['fortiipam_integration'] = $data['fortiipam_integration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiIpv6AllowableValues();
        if (!is_null($this->container['gui_ipv6']) && !in_array($this->container['gui_ipv6'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_ipv6', must be one of '%s'",
                $this->container['gui_ipv6'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiCertificatesAllowableValues();
        if (!is_null($this->container['gui_certificates']) && !in_array($this->container['gui_certificates'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_certificates', must be one of '%s'",
                $this->container['gui_certificates'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiCustomLanguageAllowableValues();
        if (!is_null($this->container['gui_custom_language']) && !in_array($this->container['gui_custom_language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_custom_language', must be one of '%s'",
                $this->container['gui_custom_language'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiWirelessOpensecurityAllowableValues();
        if (!is_null($this->container['gui_wireless_opensecurity']) && !in_array($this->container['gui_wireless_opensecurity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_wireless_opensecurity', must be one of '%s'",
                $this->container['gui_wireless_opensecurity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDisplayHostnameAllowableValues();
        if (!is_null($this->container['gui_display_hostname']) && !in_array($this->container['gui_display_hostname'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_display_hostname', must be one of '%s'",
                $this->container['gui_display_hostname'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiFortisandboxCloudAllowableValues();
        if (!is_null($this->container['gui_fortisandbox_cloud']) && !in_array($this->container['gui_fortisandbox_cloud'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_fortisandbox_cloud', must be one of '%s'",
                $this->container['gui_fortisandbox_cloud'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiFirmwareUpgradeWarningAllowableValues();
        if (!is_null($this->container['gui_firmware_upgrade_warning']) && !in_array($this->container['gui_firmware_upgrade_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_firmware_upgrade_warning', must be one of '%s'",
                $this->container['gui_firmware_upgrade_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiAllowDefaultHostnameAllowableValues();
        if (!is_null($this->container['gui_allow_default_hostname']) && !in_array($this->container['gui_allow_default_hostname'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_allow_default_hostname', must be one of '%s'",
                $this->container['gui_allow_default_hostname'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiForticareRegistrationSetupWarningAllowableValues();
        if (!is_null($this->container['gui_forticare_registration_setup_warning']) && !in_array($this->container['gui_forticare_registration_setup_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_forticare_registration_setup_warning', must be one of '%s'",
                $this->container['gui_forticare_registration_setup_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminHttpsSslVersionsAllowableValues();
        if (!is_null($this->container['admin_https_ssl_versions']) && !in_array($this->container['admin_https_ssl_versions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_https_ssl_versions', must be one of '%s'",
                $this->container['admin_https_ssl_versions'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admintimeout']) && ($this->container['admintimeout'] > 480)) {
            $invalidProperties[] = "invalid value for 'admintimeout', must be smaller than or equal to 480.";
        }

        if (!is_null($this->container['admintimeout']) && ($this->container['admintimeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'admintimeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['admin_console_timeout']) && ($this->container['admin_console_timeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'admin_console_timeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['admin_console_timeout']) && ($this->container['admin_console_timeout'] < 15)) {
            $invalidProperties[] = "invalid value for 'admin_console_timeout', must be bigger than or equal to 15.";
        }

        $allowedValues = $this->getSsdTrimFreqAllowableValues();
        if (!is_null($this->container['ssd_trim_freq']) && !in_array($this->container['ssd_trim_freq'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssd_trim_freq', must be one of '%s'",
                $this->container['ssd_trim_freq'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssd_trim_hour']) && ($this->container['ssd_trim_hour'] > 23)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_hour', must be smaller than or equal to 23.";
        }

        if (!is_null($this->container['ssd_trim_hour']) && ($this->container['ssd_trim_hour'] < 0)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_hour', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ssd_trim_min']) && ($this->container['ssd_trim_min'] > 60)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_min', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['ssd_trim_min']) && ($this->container['ssd_trim_min'] < 0)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_min', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSsdTrimWeekdayAllowableValues();
        if (!is_null($this->container['ssd_trim_weekday']) && !in_array($this->container['ssd_trim_weekday'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssd_trim_weekday', must be one of '%s'",
                $this->container['ssd_trim_weekday'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ssd_trim_date']) && ($this->container['ssd_trim_date'] > 31)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_date', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['ssd_trim_date']) && ($this->container['ssd_trim_date'] < 1)) {
            $invalidProperties[] = "invalid value for 'ssd_trim_date', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAdminConcurrentAllowableValues();
        if (!is_null($this->container['admin_concurrent']) && !in_array($this->container['admin_concurrent'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_concurrent', must be one of '%s'",
                $this->container['admin_concurrent'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_lockout_threshold']) && ($this->container['admin_lockout_threshold'] > 10)) {
            $invalidProperties[] = "invalid value for 'admin_lockout_threshold', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['admin_lockout_threshold']) && ($this->container['admin_lockout_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_lockout_threshold', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['admin_lockout_duration']) && ($this->container['admin_lockout_duration'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'admin_lockout_duration', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['admin_lockout_duration']) && ($this->container['admin_lockout_duration'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_lockout_duration', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['refresh']) && ($this->container['refresh'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'refresh', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['refresh']) && ($this->container['refresh'] < 0)) {
            $invalidProperties[] = "invalid value for 'refresh', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'interval', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['interval']) && ($this->container['interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'interval', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'failtime', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['failtime']) && ($this->container['failtime'] < 0)) {
            $invalidProperties[] = "invalid value for 'failtime', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDailyRestartAllowableValues();
        if (!is_null($this->container['daily_restart']) && !in_array($this->container['daily_restart'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'daily_restart', must be one of '%s'",
                $this->container['daily_restart'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radius_port']) && ($this->container['radius_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'radius_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['radius_port']) && ($this->container['radius_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'radius_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['admin_login_max']) && ($this->container['admin_login_max'] > 100)) {
            $invalidProperties[] = "invalid value for 'admin_login_max', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_login_max']) && ($this->container['admin_login_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_login_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['remoteauthtimeout']) && ($this->container['remoteauthtimeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'remoteauthtimeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['remoteauthtimeout']) && ($this->container['remoteauthtimeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'remoteauthtimeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ldapconntimeout']) && ($this->container['ldapconntimeout'] > 300000)) {
            $invalidProperties[] = "invalid value for 'ldapconntimeout', must be smaller than or equal to 300000.";
        }

        if (!is_null($this->container['ldapconntimeout']) && ($this->container['ldapconntimeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'ldapconntimeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBatchCmdbAllowableValues();
        if (!is_null($this->container['batch_cmdb']) && !in_array($this->container['batch_cmdb'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'batch_cmdb', must be one of '%s'",
                $this->container['batch_cmdb'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMultiFactorAuthenticationAllowableValues();
        if (!is_null($this->container['multi_factor_authentication']) && !in_array($this->container['multi_factor_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multi_factor_authentication', must be one of '%s'",
                $this->container['multi_factor_authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($this->container['ssl_min_proto_version']) && !in_array($this->container['ssl_min_proto_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                $this->container['ssl_min_proto_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutorunLogFsckAllowableValues();
        if (!is_null($this->container['autorun_log_fsck']) && !in_array($this->container['autorun_log_fsck'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'autorun_log_fsck', must be one of '%s'",
                $this->container['autorun_log_fsck'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDstAllowableValues();
        if (!is_null($this->container['dst']) && !in_array($this->container['dst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dst', must be one of '%s'",
                $this->container['dst'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($this->container['timezone']) && !in_array($this->container['timezone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timezone', must be one of '%s'",
                $this->container['timezone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrafficPriorityAllowableValues();
        if (!is_null($this->container['traffic_priority']) && !in_array($this->container['traffic_priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'traffic_priority', must be one of '%s'",
                $this->container['traffic_priority'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrafficPriorityLevelAllowableValues();
        if (!is_null($this->container['traffic_priority_level']) && !in_array($this->container['traffic_priority_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'traffic_priority_level', must be one of '%s'",
                $this->container['traffic_priority_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAntiReplayAllowableValues();
        if (!is_null($this->container['anti_replay']) && !in_array($this->container['anti_replay'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'anti_replay', must be one of '%s'",
                $this->container['anti_replay'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendPmtuIcmpAllowableValues();
        if (!is_null($this->container['send_pmtu_icmp']) && !in_array($this->container['send_pmtu_icmp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'send_pmtu_icmp', must be one of '%s'",
                $this->container['send_pmtu_icmp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHonorDfAllowableValues();
        if (!is_null($this->container['honor_df']) && !in_array($this->container['honor_df'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'honor_df', must be one of '%s'",
                $this->container['honor_df'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVirtualSwitchVlanAllowableValues();
        if (!is_null($this->container['virtual_switch_vlan']) && !in_array($this->container['virtual_switch_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'virtual_switch_vlan', must be one of '%s'",
                $this->container['virtual_switch_vlan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRevisionImageAutoBackupAllowableValues();
        if (!is_null($this->container['revision_image_auto_backup']) && !in_array($this->container['revision_image_auto_backup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'revision_image_auto_backup', must be one of '%s'",
                $this->container['revision_image_auto_backup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRevisionBackupOnLogoutAllowableValues();
        if (!is_null($this->container['revision_backup_on_logout']) && !in_array($this->container['revision_backup_on_logout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'revision_backup_on_logout', must be one of '%s'",
                $this->container['revision_backup_on_logout'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['management_vdom']) && (mb_strlen($this->container['management_vdom']) > 31)) {
            $invalidProperties[] = "invalid value for 'management_vdom', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['hostname']) && (mb_strlen($this->container['hostname']) > 35)) {
            $invalidProperties[] = "invalid value for 'hostname', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['alias']) && (mb_strlen($this->container['alias']) > 35)) {
            $invalidProperties[] = "invalid value for 'alias', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getStrongCryptoAllowableValues();
        if (!is_null($this->container['strong_crypto']) && !in_array($this->container['strong_crypto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strong_crypto', must be one of '%s'",
                $this->container['strong_crypto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshCbcCipherAllowableValues();
        if (!is_null($this->container['ssh_cbc_cipher']) && !in_array($this->container['ssh_cbc_cipher'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_cbc_cipher', must be one of '%s'",
                $this->container['ssh_cbc_cipher'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshHmacMd5AllowableValues();
        if (!is_null($this->container['ssh_hmac_md5']) && !in_array($this->container['ssh_hmac_md5'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_hmac_md5', must be one of '%s'",
                $this->container['ssh_hmac_md5'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshKexSha1AllowableValues();
        if (!is_null($this->container['ssh_kex_sha1']) && !in_array($this->container['ssh_kex_sha1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_kex_sha1', must be one of '%s'",
                $this->container['ssh_kex_sha1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshMacWeakAllowableValues();
        if (!is_null($this->container['ssh_mac_weak']) && !in_array($this->container['ssh_mac_weak'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_mac_weak', must be one of '%s'",
                $this->container['ssh_mac_weak'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslStaticKeyCiphersAllowableValues();
        if (!is_null($this->container['ssl_static_key_ciphers']) && !in_array($this->container['ssl_static_key_ciphers'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_static_key_ciphers', must be one of '%s'",
                $this->container['ssl_static_key_ciphers'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSnatRouteChangeAllowableValues();
        if (!is_null($this->container['snat_route_change']) && !in_array($this->container['snat_route_change'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'snat_route_change', must be one of '%s'",
                $this->container['snat_route_change'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCliAuditLogAllowableValues();
        if (!is_null($this->container['cli_audit_log']) && !in_array($this->container['cli_audit_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cli_audit_log', must be one of '%s'",
                $this->container['cli_audit_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhParamsAllowableValues();
        if (!is_null($this->container['dh_params']) && !in_array($this->container['dh_params'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dh_params', must be one of '%s'",
                $this->container['dh_params'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFdsStatisticsAllowableValues();
        if (!is_null($this->container['fds_statistics']) && !in_array($this->container['fds_statistics'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fds_statistics', must be one of '%s'",
                $this->container['fds_statistics'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fds_statistics_period']) && ($this->container['fds_statistics_period'] > 1440)) {
            $invalidProperties[] = "invalid value for 'fds_statistics_period', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['fds_statistics_period']) && ($this->container['fds_statistics_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'fds_statistics_period', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTcpOptionAllowableValues();
        if (!is_null($this->container['tcp_option']) && !in_array($this->container['tcp_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tcp_option', must be one of '%s'",
                $this->container['tcp_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($this->container['lldp_transmission']) && !in_array($this->container['lldp_transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                $this->container['lldp_transmission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($this->container['lldp_reception']) && !in_array($this->container['lldp_reception'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lldp_reception', must be one of '%s'",
                $this->container['lldp_reception'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['proxy_auth_timeout']) && ($this->container['proxy_auth_timeout'] > 300)) {
            $invalidProperties[] = "invalid value for 'proxy_auth_timeout', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['proxy_auth_timeout']) && ($this->container['proxy_auth_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'proxy_auth_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getProxyReAuthenticationModeAllowableValues();
        if (!is_null($this->container['proxy_re_authentication_mode']) && !in_array($this->container['proxy_re_authentication_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_re_authentication_mode', must be one of '%s'",
                $this->container['proxy_re_authentication_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProxyAuthLifetimeAllowableValues();
        if (!is_null($this->container['proxy_auth_lifetime']) && !in_array($this->container['proxy_auth_lifetime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_auth_lifetime', must be one of '%s'",
                $this->container['proxy_auth_lifetime'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['proxy_auth_lifetime_timeout']) && ($this->container['proxy_auth_lifetime_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'proxy_auth_lifetime_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['proxy_auth_lifetime_timeout']) && ($this->container['proxy_auth_lifetime_timeout'] < 5)) {
            $invalidProperties[] = "invalid value for 'proxy_auth_lifetime_timeout', must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['sys_perf_log_interval']) && ($this->container['sys_perf_log_interval'] > 15)) {
            $invalidProperties[] = "invalid value for 'sys_perf_log_interval', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['sys_perf_log_interval']) && ($this->container['sys_perf_log_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'sys_perf_log_interval', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCheckProtocolHeaderAllowableValues();
        if (!is_null($this->container['check_protocol_header']) && !in_array($this->container['check_protocol_header'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_protocol_header', must be one of '%s'",
                $this->container['check_protocol_header'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVipArpRangeAllowableValues();
        if (!is_null($this->container['vip_arp_range']) && !in_array($this->container['vip_arp_range'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vip_arp_range', must be one of '%s'",
                $this->container['vip_arp_range'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResetSessionlessTcpAllowableValues();
        if (!is_null($this->container['reset_sessionless_tcp']) && !in_array($this->container['reset_sessionless_tcp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reset_sessionless_tcp', must be one of '%s'",
                $this->container['reset_sessionless_tcp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowTrafficRedirectAllowableValues();
        if (!is_null($this->container['allow_traffic_redirect']) && !in_array($this->container['allow_traffic_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_traffic_redirect', must be one of '%s'",
                $this->container['allow_traffic_redirect'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrictDirtySessionCheckAllowableValues();
        if (!is_null($this->container['strict_dirty_session_check']) && !in_array($this->container['strict_dirty_session_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict_dirty_session_check', must be one of '%s'",
                $this->container['strict_dirty_session_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tcp_halfclose_timer']) && ($this->container['tcp_halfclose_timer'] > 86400)) {
            $invalidProperties[] = "invalid value for 'tcp_halfclose_timer', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['tcp_halfclose_timer']) && ($this->container['tcp_halfclose_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'tcp_halfclose_timer', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tcp_halfopen_timer']) && ($this->container['tcp_halfopen_timer'] > 86400)) {
            $invalidProperties[] = "invalid value for 'tcp_halfopen_timer', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['tcp_halfopen_timer']) && ($this->container['tcp_halfopen_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'tcp_halfopen_timer', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tcp_timewait_timer']) && ($this->container['tcp_timewait_timer'] > 300)) {
            $invalidProperties[] = "invalid value for 'tcp_timewait_timer', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['tcp_timewait_timer']) && ($this->container['tcp_timewait_timer'] < 0)) {
            $invalidProperties[] = "invalid value for 'tcp_timewait_timer', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['udp_idle_timer']) && ($this->container['udp_idle_timer'] > 86400)) {
            $invalidProperties[] = "invalid value for 'udp_idle_timer', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['udp_idle_timer']) && ($this->container['udp_idle_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'udp_idle_timer', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['block_session_timer']) && ($this->container['block_session_timer'] > 300)) {
            $invalidProperties[] = "invalid value for 'block_session_timer', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['block_session_timer']) && ($this->container['block_session_timer'] < 1)) {
            $invalidProperties[] = "invalid value for 'block_session_timer', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPreLoginBannerAllowableValues();
        if (!is_null($this->container['pre_login_banner']) && !in_array($this->container['pre_login_banner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pre_login_banner', must be one of '%s'",
                $this->container['pre_login_banner'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostLoginBannerAllowableValues();
        if (!is_null($this->container['post_login_banner']) && !in_array($this->container['post_login_banner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'post_login_banner', must be one of '%s'",
                $this->container['post_login_banner'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTftpAllowableValues();
        if (!is_null($this->container['tftp']) && !in_array($this->container['tftp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tftp', must be one of '%s'",
                $this->container['tftp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvFailopenAllowableValues();
        if (!is_null($this->container['av_failopen']) && !in_array($this->container['av_failopen'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'av_failopen', must be one of '%s'",
                $this->container['av_failopen'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvFailopenSessionAllowableValues();
        if (!is_null($this->container['av_failopen_session']) && !in_array($this->container['av_failopen_session'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'av_failopen_session', must be one of '%s'",
                $this->container['av_failopen_session'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['memory_use_threshold_extreme']) && ($this->container['memory_use_threshold_extreme'] > 97)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_extreme', must be smaller than or equal to 97.";
        }

        if (!is_null($this->container['memory_use_threshold_extreme']) && ($this->container['memory_use_threshold_extreme'] < 70)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_extreme', must be bigger than or equal to 70.";
        }

        if (!is_null($this->container['memory_use_threshold_red']) && ($this->container['memory_use_threshold_red'] > 97)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_red', must be smaller than or equal to 97.";
        }

        if (!is_null($this->container['memory_use_threshold_red']) && ($this->container['memory_use_threshold_red'] < 70)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_red', must be bigger than or equal to 70.";
        }

        if (!is_null($this->container['memory_use_threshold_green']) && ($this->container['memory_use_threshold_green'] > 97)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_green', must be smaller than or equal to 97.";
        }

        if (!is_null($this->container['memory_use_threshold_green']) && ($this->container['memory_use_threshold_green'] < 70)) {
            $invalidProperties[] = "invalid value for 'memory_use_threshold_green', must be bigger than or equal to 70.";
        }

        if (!is_null($this->container['cpu_use_threshold']) && ($this->container['cpu_use_threshold'] > 99)) {
            $invalidProperties[] = "invalid value for 'cpu_use_threshold', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['cpu_use_threshold']) && ($this->container['cpu_use_threshold'] < 50)) {
            $invalidProperties[] = "invalid value for 'cpu_use_threshold', must be bigger than or equal to 50.";
        }

        $allowedValues = $this->getCheckResetRangeAllowableValues();
        if (!is_null($this->container['check_reset_range']) && !in_array($this->container['check_reset_range'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_reset_range', must be one of '%s'",
                $this->container['check_reset_range'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVdomModeAllowableValues();
        if (!is_null($this->container['vdom_mode']) && !in_array($this->container['vdom_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vdom_mode', must be one of '%s'",
                $this->container['vdom_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLongVdomNameAllowableValues();
        if (!is_null($this->container['long_vdom_name']) && !in_array($this->container['long_vdom_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'long_vdom_name', must be one of '%s'",
                $this->container['long_vdom_name'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEditVdomPromptAllowableValues();
        if (!is_null($this->container['edit_vdom_prompt']) && !in_array($this->container['edit_vdom_prompt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'edit_vdom_prompt', must be one of '%s'",
                $this->container['edit_vdom_prompt'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_port']) && ($this->container['admin_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'admin_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['admin_port']) && ($this->container['admin_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['admin_sport']) && ($this->container['admin_sport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'admin_sport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['admin_sport']) && ($this->container['admin_sport'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_sport', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAdminHttpsRedirectAllowableValues();
        if (!is_null($this->container['admin_https_redirect']) && !in_array($this->container['admin_https_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_https_redirect', must be one of '%s'",
                $this->container['admin_https_redirect'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_hsts_max_age']) && ($this->container['admin_hsts_max_age'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'admin_hsts_max_age', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['admin_hsts_max_age']) && ($this->container['admin_hsts_max_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'admin_hsts_max_age', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAdminSshPasswordAllowableValues();
        if (!is_null($this->container['admin_ssh_password']) && !in_array($this->container['admin_ssh_password'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_ssh_password', must be one of '%s'",
                $this->container['admin_ssh_password'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminRestrictLocalAllowableValues();
        if (!is_null($this->container['admin_restrict_local']) && !in_array($this->container['admin_restrict_local'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_restrict_local', must be one of '%s'",
                $this->container['admin_restrict_local'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_ssh_port']) && ($this->container['admin_ssh_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'admin_ssh_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['admin_ssh_port']) && ($this->container['admin_ssh_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_ssh_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['admin_ssh_grace_time']) && ($this->container['admin_ssh_grace_time'] > 3600)) {
            $invalidProperties[] = "invalid value for 'admin_ssh_grace_time', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['admin_ssh_grace_time']) && ($this->container['admin_ssh_grace_time'] < 10)) {
            $invalidProperties[] = "invalid value for 'admin_ssh_grace_time', must be bigger than or equal to 10.";
        }

        $allowedValues = $this->getAdminSshV1AllowableValues();
        if (!is_null($this->container['admin_ssh_v1']) && !in_array($this->container['admin_ssh_v1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_ssh_v1', must be one of '%s'",
                $this->container['admin_ssh_v1'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminTelnetAllowableValues();
        if (!is_null($this->container['admin_telnet']) && !in_array($this->container['admin_telnet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_telnet', must be one of '%s'",
                $this->container['admin_telnet'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_telnet_port']) && ($this->container['admin_telnet_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'admin_telnet_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['admin_telnet_port']) && ($this->container['admin_telnet_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'admin_telnet_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAdminMaintainerAllowableValues();
        if (!is_null($this->container['admin_maintainer']) && !in_array($this->container['admin_maintainer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_maintainer', must be one of '%s'",
                $this->container['admin_maintainer'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminResetButtonAllowableValues();
        if (!is_null($this->container['admin_reset_button']) && !in_array($this->container['admin_reset_button'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_reset_button', must be one of '%s'",
                $this->container['admin_reset_button'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['admin_server_cert']) && (mb_strlen($this->container['admin_server_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'admin_server_cert', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['user_server_cert']) && (mb_strlen($this->container['user_server_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'user_server_cert', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getAdminHttpsPkiRequiredAllowableValues();
        if (!is_null($this->container['admin_https_pki_required']) && !in_array($this->container['admin_https_pki_required'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_https_pki_required', must be one of '%s'",
                $this->container['admin_https_pki_required'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wifi_certificate']) && (mb_strlen($this->container['wifi_certificate']) > 35)) {
            $invalidProperties[] = "invalid value for 'wifi_certificate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['wifi_ca_certificate']) && (mb_strlen($this->container['wifi_ca_certificate']) > 79)) {
            $invalidProperties[] = "invalid value for 'wifi_ca_certificate', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['auth_http_port']) && ($this->container['auth_http_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'auth_http_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['auth_http_port']) && ($this->container['auth_http_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'auth_http_port', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auth_https_port']) && ($this->container['auth_https_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'auth_https_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['auth_https_port']) && ($this->container['auth_https_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'auth_https_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAuthKeepaliveAllowableValues();
        if (!is_null($this->container['auth_keepalive']) && !in_array($this->container['auth_keepalive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_keepalive', must be one of '%s'",
                $this->container['auth_keepalive'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['policy_auth_concurrent']) && ($this->container['policy_auth_concurrent'] > 100)) {
            $invalidProperties[] = "invalid value for 'policy_auth_concurrent', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['policy_auth_concurrent']) && ($this->container['policy_auth_concurrent'] < 0)) {
            $invalidProperties[] = "invalid value for 'policy_auth_concurrent', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAuthSessionLimitAllowableValues();
        if (!is_null($this->container['auth_session_limit']) && !in_array($this->container['auth_session_limit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_session_limit', must be one of '%s'",
                $this->container['auth_session_limit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['auth_cert']) && (mb_strlen($this->container['auth_cert']) > 35)) {
            $invalidProperties[] = "invalid value for 'auth_cert', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getCltCertReqAllowableValues();
        if (!is_null($this->container['clt_cert_req']) && !in_array($this->container['clt_cert_req'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'clt_cert_req', must be one of '%s'",
                $this->container['clt_cert_req'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fortiservice_port']) && ($this->container['fortiservice_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fortiservice_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fortiservice_port']) && ($this->container['fortiservice_port'] < 1)) {
            $invalidProperties[] = "invalid value for 'fortiservice_port', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getCfgSaveAllowableValues();
        if (!is_null($this->container['cfg_save']) && !in_array($this->container['cfg_save'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cfg_save', must be one of '%s'",
                $this->container['cfg_save'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cfg_revert_timeout']) && ($this->container['cfg_revert_timeout'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'cfg_revert_timeout', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['cfg_revert_timeout']) && ($this->container['cfg_revert_timeout'] < 10)) {
            $invalidProperties[] = "invalid value for 'cfg_revert_timeout', must be bigger than or equal to 10.";
        }

        $allowedValues = $this->getRebootUponConfigRestoreAllowableValues();
        if (!is_null($this->container['reboot_upon_config_restore']) && !in_array($this->container['reboot_upon_config_restore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reboot_upon_config_restore', must be one of '%s'",
                $this->container['reboot_upon_config_restore'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminScpAllowableValues();
        if (!is_null($this->container['admin_scp']) && !in_array($this->container['admin_scp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_scp', must be one of '%s'",
                $this->container['admin_scp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityRatingResultSubmissionAllowableValues();
        if (!is_null($this->container['security_rating_result_submission']) && !in_array($this->container['security_rating_result_submission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_rating_result_submission', must be one of '%s'",
                $this->container['security_rating_result_submission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityRatingRunOnScheduleAllowableValues();
        if (!is_null($this->container['security_rating_run_on_schedule']) && !in_array($this->container['security_rating_run_on_schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_rating_run_on_schedule', must be one of '%s'",
                $this->container['security_rating_run_on_schedule'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWirelessControllerAllowableValues();
        if (!is_null($this->container['wireless_controller']) && !in_array($this->container['wireless_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wireless_controller', must be one of '%s'",
                $this->container['wireless_controller'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wireless_controller_port']) && ($this->container['wireless_controller_port'] > 49150)) {
            $invalidProperties[] = "invalid value for 'wireless_controller_port', must be smaller than or equal to 49150.";
        }

        if (!is_null($this->container['wireless_controller_port']) && ($this->container['wireless_controller_port'] < 1024)) {
            $invalidProperties[] = "invalid value for 'wireless_controller_port', must be bigger than or equal to 1024.";
        }

        if (!is_null($this->container['fortiextender_data_port']) && ($this->container['fortiextender_data_port'] > 49150)) {
            $invalidProperties[] = "invalid value for 'fortiextender_data_port', must be smaller than or equal to 49150.";
        }

        if (!is_null($this->container['fortiextender_data_port']) && ($this->container['fortiextender_data_port'] < 1024)) {
            $invalidProperties[] = "invalid value for 'fortiextender_data_port', must be bigger than or equal to 1024.";
        }

        $allowedValues = $this->getFortiextenderAllowableValues();
        if (!is_null($this->container['fortiextender']) && !in_array($this->container['fortiextender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiextender', must be one of '%s'",
                $this->container['fortiextender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiextenderVlanModeAllowableValues();
        if (!is_null($this->container['fortiextender_vlan_mode']) && !in_array($this->container['fortiextender_vlan_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiextender_vlan_mode', must be one of '%s'",
                $this->container['fortiextender_vlan_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerAllowableValues();
        if (!is_null($this->container['switch_controller']) && !in_array($this->container['switch_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller', must be one of '%s'",
                $this->container['switch_controller'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dnsproxy_worker_count']) && ($this->container['dnsproxy_worker_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'dnsproxy_worker_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['dnsproxy_worker_count']) && ($this->container['dnsproxy_worker_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'dnsproxy_worker_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['url_filter_count']) && ($this->container['url_filter_count'] > 1)) {
            $invalidProperties[] = "invalid value for 'url_filter_count', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['url_filter_count']) && ($this->container['url_filter_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'url_filter_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['proxy_worker_count']) && ($this->container['proxy_worker_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'proxy_worker_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['proxy_worker_count']) && ($this->container['proxy_worker_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'proxy_worker_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['scanunit_count']) && ($this->container['scanunit_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'scanunit_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['scanunit_count']) && ($this->container['scanunit_count'] < 2)) {
            $invalidProperties[] = "invalid value for 'scanunit_count', must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getProxyHardwareAccelerationAllowableValues();
        if (!is_null($this->container['proxy_hardware_acceleration']) && !in_array($this->container['proxy_hardware_acceleration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proxy_hardware_acceleration', must be one of '%s'",
                $this->container['proxy_hardware_acceleration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFgdAlertSubscriptionAllowableValues();
        if (!is_null($this->container['fgd_alert_subscription']) && !in_array($this->container['fgd_alert_subscription'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fgd_alert_subscription', must be one of '%s'",
                $this->container['fgd_alert_subscription'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsecHmacOffloadAllowableValues();
        if (!is_null($this->container['ipsec_hmac_offload']) && !in_array($this->container['ipsec_hmac_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_hmac_offload', must be one of '%s'",
                $this->container['ipsec_hmac_offload'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ipv6_accept_dad']) && ($this->container['ipv6_accept_dad'] > 2)) {
            $invalidProperties[] = "invalid value for 'ipv6_accept_dad', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ipv6_accept_dad']) && ($this->container['ipv6_accept_dad'] < 0)) {
            $invalidProperties[] = "invalid value for 'ipv6_accept_dad', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIpv6AllowAnycastProbeAllowableValues();
        if (!is_null($this->container['ipv6_allow_anycast_probe']) && !in_array($this->container['ipv6_allow_anycast_probe'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_allow_anycast_probe', must be one of '%s'",
                $this->container['ipv6_allow_anycast_probe'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCsrCaAttributeAllowableValues();
        if (!is_null($this->container['csr_ca_attribute']) && !in_array($this->container['csr_ca_attribute'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'csr_ca_attribute', must be one of '%s'",
                $this->container['csr_ca_attribute'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWimax4gUsbAllowableValues();
        if (!is_null($this->container['wimax_4g_usb']) && !in_array($this->container['wimax_4g_usb'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wimax_4g_usb', must be one of '%s'",
                $this->container['wimax_4g_usb'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cert_chain_max']) && ($this->container['cert_chain_max'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cert_chain_max', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cert_chain_max']) && ($this->container['cert_chain_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'cert_chain_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sslvpn_max_worker_count']) && ($this->container['sslvpn_max_worker_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'sslvpn_max_worker_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sslvpn_max_worker_count']) && ($this->container['sslvpn_max_worker_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'sslvpn_max_worker_count', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSslvpnKxpHardwareAccelerationAllowableValues();
        if (!is_null($this->container['sslvpn_kxp_hardware_acceleration']) && !in_array($this->container['sslvpn_kxp_hardware_acceleration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslvpn_kxp_hardware_acceleration', must be one of '%s'",
                $this->container['sslvpn_kxp_hardware_acceleration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslvpnCipherHardwareAccelerationAllowableValues();
        if (!is_null($this->container['sslvpn_cipher_hardware_acceleration']) && !in_array($this->container['sslvpn_cipher_hardware_acceleration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslvpn_cipher_hardware_acceleration', must be one of '%s'",
                $this->container['sslvpn_cipher_hardware_acceleration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslvpnEmsSnCheckAllowableValues();
        if (!is_null($this->container['sslvpn_ems_sn_check']) && !in_array($this->container['sslvpn_ems_sn_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslvpn_ems_sn_check', must be one of '%s'",
                $this->container['sslvpn_ems_sn_check'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslvpnPluginVersionCheckAllowableValues();
        if (!is_null($this->container['sslvpn_plugin_version_check']) && !in_array($this->container['sslvpn_plugin_version_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslvpn_plugin_version_check', must be one of '%s'",
                $this->container['sslvpn_plugin_version_check'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['two_factor_ftk_expiry']) && ($this->container['two_factor_ftk_expiry'] > 600)) {
            $invalidProperties[] = "invalid value for 'two_factor_ftk_expiry', must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['two_factor_ftk_expiry']) && ($this->container['two_factor_ftk_expiry'] < 60)) {
            $invalidProperties[] = "invalid value for 'two_factor_ftk_expiry', must be bigger than or equal to 60.";
        }

        if (!is_null($this->container['two_factor_email_expiry']) && ($this->container['two_factor_email_expiry'] > 300)) {
            $invalidProperties[] = "invalid value for 'two_factor_email_expiry', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['two_factor_email_expiry']) && ($this->container['two_factor_email_expiry'] < 30)) {
            $invalidProperties[] = "invalid value for 'two_factor_email_expiry', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['two_factor_sms_expiry']) && ($this->container['two_factor_sms_expiry'] > 300)) {
            $invalidProperties[] = "invalid value for 'two_factor_sms_expiry', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['two_factor_sms_expiry']) && ($this->container['two_factor_sms_expiry'] < 30)) {
            $invalidProperties[] = "invalid value for 'two_factor_sms_expiry', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['two_factor_fac_expiry']) && ($this->container['two_factor_fac_expiry'] > 3600)) {
            $invalidProperties[] = "invalid value for 'two_factor_fac_expiry', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['two_factor_fac_expiry']) && ($this->container['two_factor_fac_expiry'] < 10)) {
            $invalidProperties[] = "invalid value for 'two_factor_fac_expiry', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['two_factor_ftm_expiry']) && ($this->container['two_factor_ftm_expiry'] > 168)) {
            $invalidProperties[] = "invalid value for 'two_factor_ftm_expiry', must be smaller than or equal to 168.";
        }

        if (!is_null($this->container['two_factor_ftm_expiry']) && ($this->container['two_factor_ftm_expiry'] < 1)) {
            $invalidProperties[] = "invalid value for 'two_factor_ftm_expiry', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['wad_worker_count']) && ($this->container['wad_worker_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'wad_worker_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['wad_worker_count']) && ($this->container['wad_worker_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'wad_worker_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['wad_csvc_cs_count']) && ($this->container['wad_csvc_cs_count'] > 1)) {
            $invalidProperties[] = "invalid value for 'wad_csvc_cs_count', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['wad_csvc_cs_count']) && ($this->container['wad_csvc_cs_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'wad_csvc_cs_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['wad_csvc_db_count']) && ($this->container['wad_csvc_db_count'] > 4)) {
            $invalidProperties[] = "invalid value for 'wad_csvc_db_count', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['wad_csvc_db_count']) && ($this->container['wad_csvc_db_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'wad_csvc_db_count', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWadSourceAffinityAllowableValues();
        if (!is_null($this->container['wad_source_affinity']) && !in_array($this->container['wad_source_affinity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wad_source_affinity', must be one of '%s'",
                $this->container['wad_source_affinity'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['wad_memory_change_granularity']) && ($this->container['wad_memory_change_granularity'] > 25)) {
            $invalidProperties[] = "invalid value for 'wad_memory_change_granularity', must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['wad_memory_change_granularity']) && ($this->container['wad_memory_change_granularity'] < 5)) {
            $invalidProperties[] = "invalid value for 'wad_memory_change_granularity', must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getLoginTimestampAllowableValues();
        if (!is_null($this->container['login_timestamp']) && !in_array($this->container['login_timestamp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'login_timestamp', must be one of '%s'",
                $this->container['login_timestamp'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['miglogd_children']) && ($this->container['miglogd_children'] > 15)) {
            $invalidProperties[] = "invalid value for 'miglogd_children', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['miglogd_children']) && ($this->container['miglogd_children'] < 0)) {
            $invalidProperties[] = "invalid value for 'miglogd_children', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSpecialFile23SupportAllowableValues();
        if (!is_null($this->container['special_file_23_support']) && !in_array($this->container['special_file_23_support'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'special_file_23_support', must be one of '%s'",
                $this->container['special_file_23_support'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogUuidAddressAllowableValues();
        if (!is_null($this->container['log_uuid_address']) && !in_array($this->container['log_uuid_address'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_uuid_address', must be one of '%s'",
                $this->container['log_uuid_address'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogSslConnectionAllowableValues();
        if (!is_null($this->container['log_ssl_connection']) && !in_array($this->container['log_ssl_connection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_ssl_connection', must be one of '%s'",
                $this->container['log_ssl_connection'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['arp_max_entry']) && ($this->container['arp_max_entry'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'arp_max_entry', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['arp_max_entry']) && ($this->container['arp_max_entry'] < 131072)) {
            $invalidProperties[] = "invalid value for 'arp_max_entry', must be bigger than or equal to 131072.";
        }

        if (!is_null($this->container['ndp_max_entry']) && ($this->container['ndp_max_entry'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ndp_max_entry', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ndp_max_entry']) && ($this->container['ndp_max_entry'] < 65536)) {
            $invalidProperties[] = "invalid value for 'ndp_max_entry', must be bigger than or equal to 65536.";
        }

        if (!is_null($this->container['br_fdb_max_entry']) && ($this->container['br_fdb_max_entry'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'br_fdb_max_entry', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['br_fdb_max_entry']) && ($this->container['br_fdb_max_entry'] < 8192)) {
            $invalidProperties[] = "invalid value for 'br_fdb_max_entry', must be bigger than or equal to 8192.";
        }

        if (!is_null($this->container['max_route_cache_size']) && ($this->container['max_route_cache_size'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_route_cache_size', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_route_cache_size']) && ($this->container['max_route_cache_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_route_cache_size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIpsecAsicOffloadAllowableValues();
        if (!is_null($this->container['ipsec_asic_offload']) && !in_array($this->container['ipsec_asic_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_asic_offload', must be one of '%s'",
                $this->container['ipsec_asic_offload'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpsecSoftDecAsyncAllowableValues();
        if (!is_null($this->container['ipsec_soft_dec_async']) && !in_array($this->container['ipsec_soft_dec_async'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipsec_soft_dec_async', must be one of '%s'",
                $this->container['ipsec_soft_dec_async'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['device_idle_timeout']) && ($this->container['device_idle_timeout'] > 31536000)) {
            $invalidProperties[] = "invalid value for 'device_idle_timeout', must be smaller than or equal to 31536000.";
        }

        if (!is_null($this->container['device_idle_timeout']) && ($this->container['device_idle_timeout'] < 30)) {
            $invalidProperties[] = "invalid value for 'device_idle_timeout', must be bigger than or equal to 30.";
        }

        if (!is_null($this->container['user_device_store_max_devices']) && ($this->container['user_device_store_max_devices'] > 5000)) {
            $invalidProperties[] = "invalid value for 'user_device_store_max_devices', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['user_device_store_max_devices']) && ($this->container['user_device_store_max_devices'] < 1000)) {
            $invalidProperties[] = "invalid value for 'user_device_store_max_devices', must be bigger than or equal to 1000.";
        }

        if (!is_null($this->container['user_device_store_max_users']) && ($this->container['user_device_store_max_users'] > 1000)) {
            $invalidProperties[] = "invalid value for 'user_device_store_max_users', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['user_device_store_max_users']) && ($this->container['user_device_store_max_users'] < 1000)) {
            $invalidProperties[] = "invalid value for 'user_device_store_max_users', must be bigger than or equal to 1000.";
        }

        if (!is_null($this->container['gui_device_latitude']) && (mb_strlen($this->container['gui_device_latitude']) > 19)) {
            $invalidProperties[] = "invalid value for 'gui_device_latitude', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['gui_device_longitude']) && (mb_strlen($this->container['gui_device_longitude']) > 19)) {
            $invalidProperties[] = "invalid value for 'gui_device_longitude', the character length must be smaller than or equal to 19.";
        }

        $allowedValues = $this->getPrivateDataEncryptionAllowableValues();
        if (!is_null($this->container['private_data_encryption']) && !in_array($this->container['private_data_encryption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'private_data_encryption', must be one of '%s'",
                $this->container['private_data_encryption'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoAuthExtensionDeviceAllowableValues();
        if (!is_null($this->container['auto_auth_extension_device']) && !in_array($this->container['auto_auth_extension_device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_auth_extension_device', must be one of '%s'",
                $this->container['auto_auth_extension_device'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiThemeAllowableValues();
        if (!is_null($this->container['gui_theme']) && !in_array($this->container['gui_theme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_theme', must be one of '%s'",
                $this->container['gui_theme'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDateFormatAllowableValues();
        if (!is_null($this->container['gui_date_format']) && !in_array($this->container['gui_date_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_date_format', must be one of '%s'",
                $this->container['gui_date_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGuiDateTimeSourceAllowableValues();
        if (!is_null($this->container['gui_date_time_source']) && !in_array($this->container['gui_date_time_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gui_date_time_source', must be one of '%s'",
                $this->container['gui_date_time_source'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['igmp_state_limit']) && ($this->container['igmp_state_limit'] > 128000)) {
            $invalidProperties[] = "invalid value for 'igmp_state_limit', must be smaller than or equal to 128000.";
        }

        if (!is_null($this->container['igmp_state_limit']) && ($this->container['igmp_state_limit'] < 96)) {
            $invalidProperties[] = "invalid value for 'igmp_state_limit', must be bigger than or equal to 96.";
        }

        $allowedValues = $this->getCloudCommunicationAllowableValues();
        if (!is_null($this->container['cloud_communication']) && !in_array($this->container['cloud_communication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cloud_communication', must be one of '%s'",
                $this->container['cloud_communication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fec_port']) && ($this->container['fec_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fec_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fec_port']) && ($this->container['fec_port'] < 49152)) {
            $invalidProperties[] = "invalid value for 'fec_port', must be bigger than or equal to 49152.";
        }

        $allowedValues = $this->getFortitokenCloudAllowableValues();
        if (!is_null($this->container['fortitoken_cloud']) && !in_array($this->container['fortitoken_cloud'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortitoken_cloud', must be one of '%s'",
                $this->container['fortitoken_cloud'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['faz_disk_buffer_size']) && ($this->container['faz_disk_buffer_size'] > 161061273)) {
            $invalidProperties[] = "invalid value for 'faz_disk_buffer_size', must be smaller than or equal to 161061273.";
        }

        if (!is_null($this->container['faz_disk_buffer_size']) && ($this->container['faz_disk_buffer_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'faz_disk_buffer_size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIrqTimeAccountingAllowableValues();
        if (!is_null($this->container['irq_time_accounting']) && !in_array($this->container['irq_time_accounting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'irq_time_accounting', must be one of '%s'",
                $this->container['irq_time_accounting'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiipamIntegrationAllowableValues();
        if (!is_null($this->container['fortiipam_integration']) && !in_array($this->container['fortiipam_integration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiipam_integration', must be one of '%s'",
                $this->container['fortiipam_integration'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language GUI display language.    english:English.    french:French.    spanish:Spanish.    portuguese:Portuguese.    japanese:Japanese.    trach:Traditional Chinese.    simch:Simplified Chinese.    korean:Korean.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets gui_ipv6
     *
     * @return string|null
     */
    public function getGuiIpv6()
    {
        return $this->container['gui_ipv6'];
    }

    /**
     * Sets gui_ipv6
     *
     * @param string|null $gui_ipv6 Enable/disable IPv6 settings on the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiIpv6($gui_ipv6)
    {
        $allowedValues = $this->getGuiIpv6AllowableValues();
        if (!is_null($gui_ipv6) && !in_array($gui_ipv6, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_ipv6', must be one of '%s'",
                    $gui_ipv6,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_ipv6'] = $gui_ipv6;

        return $this;
    }

    /**
     * Gets gui_certificates
     *
     * @return string|null
     */
    public function getGuiCertificates()
    {
        return $this->container['gui_certificates'];
    }

    /**
     * Sets gui_certificates
     *
     * @param string|null $gui_certificates Enable/disable the System > Certificate GUI page, allowing you to add and configure certificates from the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiCertificates($gui_certificates)
    {
        $allowedValues = $this->getGuiCertificatesAllowableValues();
        if (!is_null($gui_certificates) && !in_array($gui_certificates, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_certificates', must be one of '%s'",
                    $gui_certificates,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_certificates'] = $gui_certificates;

        return $this;
    }

    /**
     * Gets gui_custom_language
     *
     * @return string|null
     */
    public function getGuiCustomLanguage()
    {
        return $this->container['gui_custom_language'];
    }

    /**
     * Sets gui_custom_language
     *
     * @param string|null $gui_custom_language Enable/disable custom languages in GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiCustomLanguage($gui_custom_language)
    {
        $allowedValues = $this->getGuiCustomLanguageAllowableValues();
        if (!is_null($gui_custom_language) && !in_array($gui_custom_language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_custom_language', must be one of '%s'",
                    $gui_custom_language,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_custom_language'] = $gui_custom_language;

        return $this;
    }

    /**
     * Gets gui_wireless_opensecurity
     *
     * @return string|null
     */
    public function getGuiWirelessOpensecurity()
    {
        return $this->container['gui_wireless_opensecurity'];
    }

    /**
     * Sets gui_wireless_opensecurity
     *
     * @param string|null $gui_wireless_opensecurity Enable/disable wireless open security option on the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiWirelessOpensecurity($gui_wireless_opensecurity)
    {
        $allowedValues = $this->getGuiWirelessOpensecurityAllowableValues();
        if (!is_null($gui_wireless_opensecurity) && !in_array($gui_wireless_opensecurity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_wireless_opensecurity', must be one of '%s'",
                    $gui_wireless_opensecurity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_wireless_opensecurity'] = $gui_wireless_opensecurity;

        return $this;
    }

    /**
     * Gets gui_display_hostname
     *
     * @return string|null
     */
    public function getGuiDisplayHostname()
    {
        return $this->container['gui_display_hostname'];
    }

    /**
     * Sets gui_display_hostname
     *
     * @param string|null $gui_display_hostname Enable/disable displaying the FortiGate's hostname on the GUI login page.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiDisplayHostname($gui_display_hostname)
    {
        $allowedValues = $this->getGuiDisplayHostnameAllowableValues();
        if (!is_null($gui_display_hostname) && !in_array($gui_display_hostname, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_display_hostname', must be one of '%s'",
                    $gui_display_hostname,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_display_hostname'] = $gui_display_hostname;

        return $this;
    }

    /**
     * Gets gui_fortisandbox_cloud
     *
     * @return string|null
     */
    public function getGuiFortisandboxCloud()
    {
        return $this->container['gui_fortisandbox_cloud'];
    }

    /**
     * Sets gui_fortisandbox_cloud
     *
     * @param string|null $gui_fortisandbox_cloud Enable/disable displaying FortiSandbox Cloud on the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiFortisandboxCloud($gui_fortisandbox_cloud)
    {
        $allowedValues = $this->getGuiFortisandboxCloudAllowableValues();
        if (!is_null($gui_fortisandbox_cloud) && !in_array($gui_fortisandbox_cloud, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_fortisandbox_cloud', must be one of '%s'",
                    $gui_fortisandbox_cloud,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_fortisandbox_cloud'] = $gui_fortisandbox_cloud;

        return $this;
    }

    /**
     * Gets gui_firmware_upgrade_warning
     *
     * @return string|null
     */
    public function getGuiFirmwareUpgradeWarning()
    {
        return $this->container['gui_firmware_upgrade_warning'];
    }

    /**
     * Sets gui_firmware_upgrade_warning
     *
     * @param string|null $gui_firmware_upgrade_warning Enable/disable the firmware upgrade warning on the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiFirmwareUpgradeWarning($gui_firmware_upgrade_warning)
    {
        $allowedValues = $this->getGuiFirmwareUpgradeWarningAllowableValues();
        if (!is_null($gui_firmware_upgrade_warning) && !in_array($gui_firmware_upgrade_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_firmware_upgrade_warning', must be one of '%s'",
                    $gui_firmware_upgrade_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_firmware_upgrade_warning'] = $gui_firmware_upgrade_warning;

        return $this;
    }

    /**
     * Gets gui_allow_default_hostname
     *
     * @return string|null
     */
    public function getGuiAllowDefaultHostname()
    {
        return $this->container['gui_allow_default_hostname'];
    }

    /**
     * Sets gui_allow_default_hostname
     *
     * @param string|null $gui_allow_default_hostname Enable/disable the factory default hostname warning on the GUI setup wizard.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiAllowDefaultHostname($gui_allow_default_hostname)
    {
        $allowedValues = $this->getGuiAllowDefaultHostnameAllowableValues();
        if (!is_null($gui_allow_default_hostname) && !in_array($gui_allow_default_hostname, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_allow_default_hostname', must be one of '%s'",
                    $gui_allow_default_hostname,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_allow_default_hostname'] = $gui_allow_default_hostname;

        return $this;
    }

    /**
     * Gets gui_forticare_registration_setup_warning
     *
     * @return string|null
     */
    public function getGuiForticareRegistrationSetupWarning()
    {
        return $this->container['gui_forticare_registration_setup_warning'];
    }

    /**
     * Sets gui_forticare_registration_setup_warning
     *
     * @param string|null $gui_forticare_registration_setup_warning Enable/disable the FortiCare registration setup warning on the GUI.    enable:Display the feature in GUI.    disable:Do not display the feature in GUI.
     *
     * @return self
     */
    public function setGuiForticareRegistrationSetupWarning($gui_forticare_registration_setup_warning)
    {
        $allowedValues = $this->getGuiForticareRegistrationSetupWarningAllowableValues();
        if (!is_null($gui_forticare_registration_setup_warning) && !in_array($gui_forticare_registration_setup_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_forticare_registration_setup_warning', must be one of '%s'",
                    $gui_forticare_registration_setup_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_forticare_registration_setup_warning'] = $gui_forticare_registration_setup_warning;

        return $this;
    }

    /**
     * Gets admin_https_ssl_versions
     *
     * @return string|null
     */
    public function getAdminHttpsSslVersions()
    {
        return $this->container['admin_https_ssl_versions'];
    }

    /**
     * Sets admin_https_ssl_versions
     *
     * @param string|null $admin_https_ssl_versions Allowed TLS versions for web administration.    tlsv1-1:TLS 1.1.    tlsv1-2:TLS 1.2.    tlsv1-3:TLS 1.3.
     *
     * @return self
     */
    public function setAdminHttpsSslVersions($admin_https_ssl_versions)
    {
        $allowedValues = $this->getAdminHttpsSslVersionsAllowableValues();
        if (!is_null($admin_https_ssl_versions) && !in_array($admin_https_ssl_versions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_https_ssl_versions', must be one of '%s'",
                    $admin_https_ssl_versions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_https_ssl_versions'] = $admin_https_ssl_versions;

        return $this;
    }

    /**
     * Gets admintimeout
     *
     * @return int|null
     */
    public function getAdmintimeout()
    {
        return $this->container['admintimeout'];
    }

    /**
     * Sets admintimeout
     *
     * @param int|null $admintimeout Number of minutes before an idle administrator session times out (1 - 480 minutes (8 hours), default = 5). A shorter idle timeout is more secure.
     *
     * @return self
     */
    public function setAdmintimeout($admintimeout)
    {

        if (!is_null($admintimeout) && ($admintimeout > 480)) {
            throw new \InvalidArgumentException('invalid value for $admintimeout when calling InlineObject316., must be smaller than or equal to 480.');
        }
        if (!is_null($admintimeout) && ($admintimeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $admintimeout when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admintimeout'] = $admintimeout;

        return $this;
    }

    /**
     * Gets admin_console_timeout
     *
     * @return int|null
     */
    public function getAdminConsoleTimeout()
    {
        return $this->container['admin_console_timeout'];
    }

    /**
     * Sets admin_console_timeout
     *
     * @param int|null $admin_console_timeout Console login timeout that overrides the admintimeout value. (15 - 300 seconds) (15 seconds to 5 minutes). 0 the default, disables this timeout.
     *
     * @return self
     */
    public function setAdminConsoleTimeout($admin_console_timeout)
    {

        if (!is_null($admin_console_timeout) && ($admin_console_timeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $admin_console_timeout when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($admin_console_timeout) && ($admin_console_timeout < 15)) {
            throw new \InvalidArgumentException('invalid value for $admin_console_timeout when calling InlineObject316., must be bigger than or equal to 15.');
        }

        $this->container['admin_console_timeout'] = $admin_console_timeout;

        return $this;
    }

    /**
     * Gets ssd_trim_freq
     *
     * @return string|null
     */
    public function getSsdTrimFreq()
    {
        return $this->container['ssd_trim_freq'];
    }

    /**
     * Sets ssd_trim_freq
     *
     * @param string|null $ssd_trim_freq How often to run SSD Trim (default = weekly). SSD Trim prevents SSD drive data loss by finding and isolating errors.    never:Never Run SSD Trim.    hourly:Run SSD Trim Hourly.    daily:Run SSD Trim Daily.    weekly:Run SSD Trim Weekly.    monthly:Run SSD Trim Monthly.
     *
     * @return self
     */
    public function setSsdTrimFreq($ssd_trim_freq)
    {
        $allowedValues = $this->getSsdTrimFreqAllowableValues();
        if (!is_null($ssd_trim_freq) && !in_array($ssd_trim_freq, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssd_trim_freq', must be one of '%s'",
                    $ssd_trim_freq,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssd_trim_freq'] = $ssd_trim_freq;

        return $this;
    }

    /**
     * Gets ssd_trim_hour
     *
     * @return int|null
     */
    public function getSsdTrimHour()
    {
        return $this->container['ssd_trim_hour'];
    }

    /**
     * Sets ssd_trim_hour
     *
     * @param int|null $ssd_trim_hour Hour of the day on which to run SSD Trim (0 - 23, default = 1).
     *
     * @return self
     */
    public function setSsdTrimHour($ssd_trim_hour)
    {

        if (!is_null($ssd_trim_hour) && ($ssd_trim_hour > 23)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_hour when calling InlineObject316., must be smaller than or equal to 23.');
        }
        if (!is_null($ssd_trim_hour) && ($ssd_trim_hour < 0)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_hour when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['ssd_trim_hour'] = $ssd_trim_hour;

        return $this;
    }

    /**
     * Gets ssd_trim_min
     *
     * @return int|null
     */
    public function getSsdTrimMin()
    {
        return $this->container['ssd_trim_min'];
    }

    /**
     * Sets ssd_trim_min
     *
     * @param int|null $ssd_trim_min Minute of the hour on which to run SSD Trim (0 - 59, 60 for random).
     *
     * @return self
     */
    public function setSsdTrimMin($ssd_trim_min)
    {

        if (!is_null($ssd_trim_min) && ($ssd_trim_min > 60)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_min when calling InlineObject316., must be smaller than or equal to 60.');
        }
        if (!is_null($ssd_trim_min) && ($ssd_trim_min < 0)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_min when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['ssd_trim_min'] = $ssd_trim_min;

        return $this;
    }

    /**
     * Gets ssd_trim_weekday
     *
     * @return string|null
     */
    public function getSsdTrimWeekday()
    {
        return $this->container['ssd_trim_weekday'];
    }

    /**
     * Sets ssd_trim_weekday
     *
     * @param string|null $ssd_trim_weekday Day of week to run SSD Trim.    sunday:Sunday    monday:Monday    tuesday:Tuesday    wednesday:Wednesday    thursday:Thursday    friday:Friday    saturday:Saturday
     *
     * @return self
     */
    public function setSsdTrimWeekday($ssd_trim_weekday)
    {
        $allowedValues = $this->getSsdTrimWeekdayAllowableValues();
        if (!is_null($ssd_trim_weekday) && !in_array($ssd_trim_weekday, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssd_trim_weekday', must be one of '%s'",
                    $ssd_trim_weekday,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssd_trim_weekday'] = $ssd_trim_weekday;

        return $this;
    }

    /**
     * Gets ssd_trim_date
     *
     * @return int|null
     */
    public function getSsdTrimDate()
    {
        return $this->container['ssd_trim_date'];
    }

    /**
     * Sets ssd_trim_date
     *
     * @param int|null $ssd_trim_date Date within a month to run ssd trim.
     *
     * @return self
     */
    public function setSsdTrimDate($ssd_trim_date)
    {

        if (!is_null($ssd_trim_date) && ($ssd_trim_date > 31)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_date when calling InlineObject316., must be smaller than or equal to 31.');
        }
        if (!is_null($ssd_trim_date) && ($ssd_trim_date < 1)) {
            throw new \InvalidArgumentException('invalid value for $ssd_trim_date when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['ssd_trim_date'] = $ssd_trim_date;

        return $this;
    }

    /**
     * Gets admin_concurrent
     *
     * @return string|null
     */
    public function getAdminConcurrent()
    {
        return $this->container['admin_concurrent'];
    }

    /**
     * Sets admin_concurrent
     *
     * @param string|null $admin_concurrent Enable/disable concurrent administrator logins. (Use policy-auth-concurrent for firewall authenticated users.)    enable:Enable admin concurrent login.    disable:Disable admin concurrent login.
     *
     * @return self
     */
    public function setAdminConcurrent($admin_concurrent)
    {
        $allowedValues = $this->getAdminConcurrentAllowableValues();
        if (!is_null($admin_concurrent) && !in_array($admin_concurrent, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_concurrent', must be one of '%s'",
                    $admin_concurrent,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_concurrent'] = $admin_concurrent;

        return $this;
    }

    /**
     * Gets admin_lockout_threshold
     *
     * @return int|null
     */
    public function getAdminLockoutThreshold()
    {
        return $this->container['admin_lockout_threshold'];
    }

    /**
     * Sets admin_lockout_threshold
     *
     * @param int|null $admin_lockout_threshold Number of failed login attempts before an administrator account is locked out for the admin-lockout-duration.
     *
     * @return self
     */
    public function setAdminLockoutThreshold($admin_lockout_threshold)
    {

        if (!is_null($admin_lockout_threshold) && ($admin_lockout_threshold > 10)) {
            throw new \InvalidArgumentException('invalid value for $admin_lockout_threshold when calling InlineObject316., must be smaller than or equal to 10.');
        }
        if (!is_null($admin_lockout_threshold) && ($admin_lockout_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_lockout_threshold when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_lockout_threshold'] = $admin_lockout_threshold;

        return $this;
    }

    /**
     * Gets admin_lockout_duration
     *
     * @return int|null
     */
    public function getAdminLockoutDuration()
    {
        return $this->container['admin_lockout_duration'];
    }

    /**
     * Sets admin_lockout_duration
     *
     * @param int|null $admin_lockout_duration Amount of time in seconds that an administrator account is locked out after reaching the admin-lockout-threshold for repeated failed login attempts.
     *
     * @return self
     */
    public function setAdminLockoutDuration($admin_lockout_duration)
    {

        if (!is_null($admin_lockout_duration) && ($admin_lockout_duration > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $admin_lockout_duration when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($admin_lockout_duration) && ($admin_lockout_duration < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_lockout_duration when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_lockout_duration'] = $admin_lockout_duration;

        return $this;
    }

    /**
     * Gets refresh
     *
     * @return int|null
     */
    public function getRefresh()
    {
        return $this->container['refresh'];
    }

    /**
     * Sets refresh
     *
     * @param int|null $refresh Statistics refresh interval second(s) in GUI.
     *
     * @return self
     */
    public function setRefresh($refresh)
    {

        if (!is_null($refresh) && ($refresh > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $refresh when calling InlineObject316., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($refresh) && ($refresh < 0)) {
            throw new \InvalidArgumentException('invalid value for $refresh when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['refresh'] = $refresh;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval Dead gateway detection interval.
     *
     * @return self
     */
    public function setInterval($interval)
    {

        if (!is_null($interval) && ($interval > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject316., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($interval) && ($interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $interval when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets failtime
     *
     * @return int|null
     */
    public function getFailtime()
    {
        return $this->container['failtime'];
    }

    /**
     * Sets failtime
     *
     * @param int|null $failtime Fail-time for server lost.
     *
     * @return self
     */
    public function setFailtime($failtime)
    {

        if (!is_null($failtime) && ($failtime > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling InlineObject316., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($failtime) && ($failtime < 0)) {
            throw new \InvalidArgumentException('invalid value for $failtime when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['failtime'] = $failtime;

        return $this;
    }

    /**
     * Gets daily_restart
     *
     * @return string|null
     */
    public function getDailyRestart()
    {
        return $this->container['daily_restart'];
    }

    /**
     * Sets daily_restart
     *
     * @param string|null $daily_restart Enable/disable daily restart of FortiGate unit. Use the restart-time option to set the time of day for the restart.    enable:Enable daily reboot of the FortiGate.    disable:Disable daily reboot of the FortiGate.
     *
     * @return self
     */
    public function setDailyRestart($daily_restart)
    {
        $allowedValues = $this->getDailyRestartAllowableValues();
        if (!is_null($daily_restart) && !in_array($daily_restart, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'daily_restart', must be one of '%s'",
                    $daily_restart,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['daily_restart'] = $daily_restart;

        return $this;
    }

    /**
     * Gets restart_time
     *
     * @return string|null
     */
    public function getRestartTime()
    {
        return $this->container['restart_time'];
    }

    /**
     * Sets restart_time
     *
     * @param string|null $restart_time Daily restart time (hh:mm).
     *
     * @return self
     */
    public function setRestartTime($restart_time)
    {
        $this->container['restart_time'] = $restart_time;

        return $this;
    }

    /**
     * Gets radius_port
     *
     * @return int|null
     */
    public function getRadiusPort()
    {
        return $this->container['radius_port'];
    }

    /**
     * Sets radius_port
     *
     * @param int|null $radius_port RADIUS service port number.
     *
     * @return self
     */
    public function setRadiusPort($radius_port)
    {

        if (!is_null($radius_port) && ($radius_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $radius_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($radius_port) && ($radius_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $radius_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['radius_port'] = $radius_port;

        return $this;
    }

    /**
     * Gets admin_login_max
     *
     * @return int|null
     */
    public function getAdminLoginMax()
    {
        return $this->container['admin_login_max'];
    }

    /**
     * Sets admin_login_max
     *
     * @param int|null $admin_login_max Maximum number of administrators who can be logged in at the same time (1 - 100, default = 100)
     *
     * @return self
     */
    public function setAdminLoginMax($admin_login_max)
    {

        if (!is_null($admin_login_max) && ($admin_login_max > 100)) {
            throw new \InvalidArgumentException('invalid value for $admin_login_max when calling InlineObject316., must be smaller than or equal to 100.');
        }
        if (!is_null($admin_login_max) && ($admin_login_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_login_max when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_login_max'] = $admin_login_max;

        return $this;
    }

    /**
     * Gets remoteauthtimeout
     *
     * @return int|null
     */
    public function getRemoteauthtimeout()
    {
        return $this->container['remoteauthtimeout'];
    }

    /**
     * Sets remoteauthtimeout
     *
     * @param int|null $remoteauthtimeout Number of seconds that the FortiGate waits for responses from remote RADIUS, LDAP, or TACACS+ authentication servers. (1-300 sec, default = 5).
     *
     * @return self
     */
    public function setRemoteauthtimeout($remoteauthtimeout)
    {

        if (!is_null($remoteauthtimeout) && ($remoteauthtimeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $remoteauthtimeout when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($remoteauthtimeout) && ($remoteauthtimeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $remoteauthtimeout when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['remoteauthtimeout'] = $remoteauthtimeout;

        return $this;
    }

    /**
     * Gets ldapconntimeout
     *
     * @return int|null
     */
    public function getLdapconntimeout()
    {
        return $this->container['ldapconntimeout'];
    }

    /**
     * Sets ldapconntimeout
     *
     * @param int|null $ldapconntimeout Global timeout for connections with remote LDAP servers in milliseconds (1 - 300000, default 500).
     *
     * @return self
     */
    public function setLdapconntimeout($ldapconntimeout)
    {

        if (!is_null($ldapconntimeout) && ($ldapconntimeout > 300000)) {
            throw new \InvalidArgumentException('invalid value for $ldapconntimeout when calling InlineObject316., must be smaller than or equal to 300000.');
        }
        if (!is_null($ldapconntimeout) && ($ldapconntimeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $ldapconntimeout when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['ldapconntimeout'] = $ldapconntimeout;

        return $this;
    }

    /**
     * Gets batch_cmdb
     *
     * @return string|null
     */
    public function getBatchCmdb()
    {
        return $this->container['batch_cmdb'];
    }

    /**
     * Sets batch_cmdb
     *
     * @param string|null $batch_cmdb Enable/disable batch mode, allowing you to enter a series of CLI commands that will execute as a group once they are loaded.    enable:Enable batch mode to execute in CMDB server.    disable:Disable batch mode to execute in CMDB server.
     *
     * @return self
     */
    public function setBatchCmdb($batch_cmdb)
    {
        $allowedValues = $this->getBatchCmdbAllowableValues();
        if (!is_null($batch_cmdb) && !in_array($batch_cmdb, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'batch_cmdb', must be one of '%s'",
                    $batch_cmdb,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['batch_cmdb'] = $batch_cmdb;

        return $this;
    }

    /**
     * Gets multi_factor_authentication
     *
     * @return string|null
     */
    public function getMultiFactorAuthentication()
    {
        return $this->container['multi_factor_authentication'];
    }

    /**
     * Sets multi_factor_authentication
     *
     * @param string|null $multi_factor_authentication Enforce all login methods to require an additional authentication factor (default = optional).    optional:Do not enforce all login methods to require an additional authentication factor (controlled by user settings).    mandatory:Enforce all login methods to require an additional authentication factor.
     *
     * @return self
     */
    public function setMultiFactorAuthentication($multi_factor_authentication)
    {
        $allowedValues = $this->getMultiFactorAuthenticationAllowableValues();
        if (!is_null($multi_factor_authentication) && !in_array($multi_factor_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multi_factor_authentication', must be one of '%s'",
                    $multi_factor_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multi_factor_authentication'] = $multi_factor_authentication;

        return $this;
    }

    /**
     * Gets ssl_min_proto_version
     *
     * @return string|null
     */
    public function getSslMinProtoVersion()
    {
        return $this->container['ssl_min_proto_version'];
    }

    /**
     * Sets ssl_min_proto_version
     *
     * @param string|null $ssl_min_proto_version Minimum supported protocol version for SSL/TLS connections (default = TLSv1.2).    SSLv3:SSLv3.    TLSv1:TLSv1.    TLSv1-1:TLSv1.1.    TLSv1-2:TLSv1.2.    TLSv1-3:TLSv1.3.
     *
     * @return self
     */
    public function setSslMinProtoVersion($ssl_min_proto_version)
    {
        $allowedValues = $this->getSslMinProtoVersionAllowableValues();
        if (!is_null($ssl_min_proto_version) && !in_array($ssl_min_proto_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_min_proto_version', must be one of '%s'",
                    $ssl_min_proto_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_min_proto_version'] = $ssl_min_proto_version;

        return $this;
    }

    /**
     * Gets autorun_log_fsck
     *
     * @return string|null
     */
    public function getAutorunLogFsck()
    {
        return $this->container['autorun_log_fsck'];
    }

    /**
     * Sets autorun_log_fsck
     *
     * @param string|null $autorun_log_fsck Enable/disable automatic log partition check after ungraceful shutdown.    enable:Enable automatic log partition check after ungraceful shutdown.    disable:Disable automatic log partition check after ungraceful shutdown.
     *
     * @return self
     */
    public function setAutorunLogFsck($autorun_log_fsck)
    {
        $allowedValues = $this->getAutorunLogFsckAllowableValues();
        if (!is_null($autorun_log_fsck) && !in_array($autorun_log_fsck, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'autorun_log_fsck', must be one of '%s'",
                    $autorun_log_fsck,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['autorun_log_fsck'] = $autorun_log_fsck;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string|null $dst Enable/disable daylight saving time.    enable:Enable daylight saving time.    disable:Disable daylight saving time.
     *
     * @return self
     */
    public function setDst($dst)
    {
        $allowedValues = $this->getDstAllowableValues();
        if (!is_null($dst) && !in_array($dst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dst', must be one of '%s'",
                    $dst,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Number corresponding to your time zone from 00 to 86. Enter set timezone ? to view the list of time zones and the numbers that represent them.    01:(GMT-11:00) Midway Island, Samoa    02:(GMT-10:00) Hawaii    03:(GMT-9:00) Alaska    04:(GMT-8:00) Pacific Time (US & Canada)    05:(GMT-7:00) Arizona    81:(GMT-7:00) Baja California Sur, Chihuahua    06:(GMT-7:00) Mountain Time (US & Canada)    07:(GMT-6:00) Central America    08:(GMT-6:00) Central Time (US & Canada)    09:(GMT-6:00) Mexico City    10:(GMT-6:00) Saskatchewan    11:(GMT-5:00) Bogota, Lima,Quito    12:(GMT-5:00) Eastern Time (US & Canada)    13:(GMT-5:00) Indiana (East)    74:(GMT-4:00) Caracas    14:(GMT-4:00) Atlantic Time (Canada)    77:(GMT-4:00) Georgetown    15:(GMT-4:00) La Paz    87:(GMT-4:00) Paraguay    16:(GMT-3:00) Santiago    17:(GMT-3:30) Newfoundland    18:(GMT-3:00) Brasilia    19:(GMT-3:00) Buenos Aires    20:(GMT-3:00) Nuuk (Greenland)    75:(GMT-3:00) Uruguay    21:(GMT-2:00) Mid-Atlantic    22:(GMT-1:00) Azores    23:(GMT-1:00) Cape Verde Is.    24:(GMT) Monrovia    80:(GMT) Greenwich Mean Time    79:(GMT) Casablanca    25:(GMT) Dublin, Edinburgh, Lisbon, London, Canary Is.    26:(GMT+1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna    27:(GMT+1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague    28:(GMT+1:00) Brussels, Copenhagen, Madrid, Paris    78:(GMT+1:00) Namibia    29:(GMT+1:00) Sarajevo, Skopje, Warsaw, Zagreb    30:(GMT+1:00) West Central Africa    31:(GMT+2:00) Athens, Sofia, Vilnius    32:(GMT+2:00) Bucharest    33:(GMT+2:00) Cairo    34:(GMT+2:00) Harare, Pretoria    35:(GMT+2:00) Helsinki, Riga, Tallinn    36:(GMT+2:00) Jerusalem    37:(GMT+3:00) Baghdad    38:(GMT+3:00) Kuwait, Riyadh    83:(GMT+3:00) Moscow    84:(GMT+3:00) Minsk    40:(GMT+3:00) Nairobi    85:(GMT+3:00) Istanbul    41:(GMT+3:30) Tehran    42:(GMT+4:00) Abu Dhabi, Muscat    43:(GMT+4:00) Baku    39:(GMT+3:00) St. Petersburg, Volgograd    44:(GMT+4:30) Kabul    46:(GMT+5:00) Islamabad, Karachi, Tashkent    47:(GMT+5:30) Kolkata, Chennai, Mumbai, New Delhi    51:(GMT+5:30) Sri Jayawardenepara    48:(GMT+5:45) Kathmandu    45:(GMT+5:00) Ekaterinburg    49:(GMT+6:00) Almaty, Novosibirsk    50:(GMT+6:00) Astana, Dhaka    52:(GMT+6:30) Rangoon    53:(GMT+7:00) Bangkok, Hanoi, Jakarta    54:(GMT+7:00) Krasnoyarsk    55:(GMT+8:00) Beijing, ChongQing, HongKong, Urumgi, Irkutsk    56:(GMT+8:00) Ulaan Bataar    57:(GMT+8:00) Kuala Lumpur, Singapore    58:(GMT+8:00) Perth    59:(GMT+8:00) Taipei    60:(GMT+9:00) Osaka, Sapporo, Tokyo, Seoul    62:(GMT+9:30) Adelaide    63:(GMT+9:30) Darwin    61:(GMT+9:00) Yakutsk    64:(GMT+10:00) Brisbane    65:(GMT+10:00) Canberra, Melbourne, Sydney    66:(GMT+10:00) Guam, Port Moresby    67:(GMT+10:00) Hobart    68:(GMT+10:00) Vladivostok    69:(GMT+10:00) Magadan    70:(GMT+11:00) Solomon Is., New Caledonia    71:(GMT+12:00) Auckland, Wellington    72:(GMT+12:00) Fiji, Kamchatka, Marshall Is.    00:(GMT+12:00) Eniwetok, Kwajalein    82:(GMT+12:45) Chatham Islands    73:(GMT+13:00) Nuku'alofa    86:(GMT+13:00) Samoa    76:(GMT+14:00) Kiritimati
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($timezone) && !in_array($timezone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timezone', must be one of '%s'",
                    $timezone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets traffic_priority
     *
     * @return string|null
     */
    public function getTrafficPriority()
    {
        return $this->container['traffic_priority'];
    }

    /**
     * Sets traffic_priority
     *
     * @param string|null $traffic_priority Choose Type of Service (ToS) or Differentiated Services Code Point (DSCP) for traffic prioritization in traffic shaping.    tos:IP TOS.    dscp:DSCP (DiffServ) DS.
     *
     * @return self
     */
    public function setTrafficPriority($traffic_priority)
    {
        $allowedValues = $this->getTrafficPriorityAllowableValues();
        if (!is_null($traffic_priority) && !in_array($traffic_priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'traffic_priority', must be one of '%s'",
                    $traffic_priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traffic_priority'] = $traffic_priority;

        return $this;
    }

    /**
     * Gets traffic_priority_level
     *
     * @return string|null
     */
    public function getTrafficPriorityLevel()
    {
        return $this->container['traffic_priority_level'];
    }

    /**
     * Sets traffic_priority_level
     *
     * @param string|null $traffic_priority_level Default system-wide level of priority for traffic prioritization.    low:Low priority.    medium:Medium priority.    high:High priority.
     *
     * @return self
     */
    public function setTrafficPriorityLevel($traffic_priority_level)
    {
        $allowedValues = $this->getTrafficPriorityLevelAllowableValues();
        if (!is_null($traffic_priority_level) && !in_array($traffic_priority_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'traffic_priority_level', must be one of '%s'",
                    $traffic_priority_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traffic_priority_level'] = $traffic_priority_level;

        return $this;
    }

    /**
     * Gets anti_replay
     *
     * @return string|null
     */
    public function getAntiReplay()
    {
        return $this->container['anti_replay'];
    }

    /**
     * Sets anti_replay
     *
     * @param string|null $anti_replay Level of checking for packet replay and TCP sequence checking.    disable:Disable anti-replay check.    loose:Loose anti-replay check.    strict:Strict anti-replay check.
     *
     * @return self
     */
    public function setAntiReplay($anti_replay)
    {
        $allowedValues = $this->getAntiReplayAllowableValues();
        if (!is_null($anti_replay) && !in_array($anti_replay, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'anti_replay', must be one of '%s'",
                    $anti_replay,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['anti_replay'] = $anti_replay;

        return $this;
    }

    /**
     * Gets send_pmtu_icmp
     *
     * @return string|null
     */
    public function getSendPmtuIcmp()
    {
        return $this->container['send_pmtu_icmp'];
    }

    /**
     * Sets send_pmtu_icmp
     *
     * @param string|null $send_pmtu_icmp Enable/disable sending of path maximum transmission unit (PMTU) - ICMP destination unreachable packet and to support PMTUD protocol on your network to reduce fragmentation of packets.    enable:Enable sending of PMTU ICMP destination unreachable packet.    disable:Disable sending of PMTU ICMP destination unreachable packet.
     *
     * @return self
     */
    public function setSendPmtuIcmp($send_pmtu_icmp)
    {
        $allowedValues = $this->getSendPmtuIcmpAllowableValues();
        if (!is_null($send_pmtu_icmp) && !in_array($send_pmtu_icmp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'send_pmtu_icmp', must be one of '%s'",
                    $send_pmtu_icmp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_pmtu_icmp'] = $send_pmtu_icmp;

        return $this;
    }

    /**
     * Gets honor_df
     *
     * @return string|null
     */
    public function getHonorDf()
    {
        return $this->container['honor_df'];
    }

    /**
     * Sets honor_df
     *
     * @param string|null $honor_df Enable/disable honoring of Don't-Fragment (DF) flag.    enable:Enable honoring of Don't-Fragment flag.    disable:Disable honoring of Don't-Fragment flag.
     *
     * @return self
     */
    public function setHonorDf($honor_df)
    {
        $allowedValues = $this->getHonorDfAllowableValues();
        if (!is_null($honor_df) && !in_array($honor_df, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'honor_df', must be one of '%s'",
                    $honor_df,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['honor_df'] = $honor_df;

        return $this;
    }

    /**
     * Gets virtual_switch_vlan
     *
     * @return string|null
     */
    public function getVirtualSwitchVlan()
    {
        return $this->container['virtual_switch_vlan'];
    }

    /**
     * Sets virtual_switch_vlan
     *
     * @param string|null $virtual_switch_vlan Enable/disable virtual switch VLAN.    enable:Enable virtual switch VLAN.    disable:Disable virtual switch VLAN.
     *
     * @return self
     */
    public function setVirtualSwitchVlan($virtual_switch_vlan)
    {
        $allowedValues = $this->getVirtualSwitchVlanAllowableValues();
        if (!is_null($virtual_switch_vlan) && !in_array($virtual_switch_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'virtual_switch_vlan', must be one of '%s'",
                    $virtual_switch_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['virtual_switch_vlan'] = $virtual_switch_vlan;

        return $this;
    }

    /**
     * Gets revision_image_auto_backup
     *
     * @return string|null
     */
    public function getRevisionImageAutoBackup()
    {
        return $this->container['revision_image_auto_backup'];
    }

    /**
     * Sets revision_image_auto_backup
     *
     * @param string|null $revision_image_auto_backup Enable/disable back-up of the latest configuration revision after the firmware is upgraded.    enable:Enable revision image backup automatically when upgrading image.    disable:Disable revision image backup automatically when upgrading image.
     *
     * @return self
     */
    public function setRevisionImageAutoBackup($revision_image_auto_backup)
    {
        $allowedValues = $this->getRevisionImageAutoBackupAllowableValues();
        if (!is_null($revision_image_auto_backup) && !in_array($revision_image_auto_backup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'revision_image_auto_backup', must be one of '%s'",
                    $revision_image_auto_backup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['revision_image_auto_backup'] = $revision_image_auto_backup;

        return $this;
    }

    /**
     * Gets revision_backup_on_logout
     *
     * @return string|null
     */
    public function getRevisionBackupOnLogout()
    {
        return $this->container['revision_backup_on_logout'];
    }

    /**
     * Sets revision_backup_on_logout
     *
     * @param string|null $revision_backup_on_logout Enable/disable back-up of the latest configuration revision when an administrator logs out of the CLI or GUI.    enable:Enable revision config backup automatically when logout.    disable:Disable revision config backup automatically when logout.
     *
     * @return self
     */
    public function setRevisionBackupOnLogout($revision_backup_on_logout)
    {
        $allowedValues = $this->getRevisionBackupOnLogoutAllowableValues();
        if (!is_null($revision_backup_on_logout) && !in_array($revision_backup_on_logout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'revision_backup_on_logout', must be one of '%s'",
                    $revision_backup_on_logout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['revision_backup_on_logout'] = $revision_backup_on_logout;

        return $this;
    }

    /**
     * Gets management_vdom
     *
     * @return string|null
     */
    public function getManagementVdom()
    {
        return $this->container['management_vdom'];
    }

    /**
     * Sets management_vdom
     *
     * @param string|null $management_vdom Management virtual domain name.
     *
     * @return self
     */
    public function setManagementVdom($management_vdom)
    {
        if (!is_null($management_vdom) && (mb_strlen($management_vdom) > 31)) {
            throw new \InvalidArgumentException('invalid length for $management_vdom when calling InlineObject316., must be smaller than or equal to 31.');
        }

        $this->container['management_vdom'] = $management_vdom;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname FortiGate unit's hostname. Most models will truncate names longer than 24 characters. Some models support hostnames up to 35 characters.
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (!is_null($hostname) && (mb_strlen($hostname) > 35)) {
            throw new \InvalidArgumentException('invalid length for $hostname when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias Alias for your FortiGate unit.
     *
     * @return self
     */
    public function setAlias($alias)
    {
        if (!is_null($alias) && (mb_strlen($alias) > 35)) {
            throw new \InvalidArgumentException('invalid length for $alias when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets strong_crypto
     *
     * @return string|null
     */
    public function getStrongCrypto()
    {
        return $this->container['strong_crypto'];
    }

    /**
     * Sets strong_crypto
     *
     * @param string|null $strong_crypto Enable to use strong encryption and only allow strong ciphers (AES, 3DES) and digest (SHA1) for HTTPS/SSH/TLS/SSL functions.    enable:Enable strong crypto for HTTPS/SSH/TLS/SSL.    disable:Disable strong crypto for HTTPS/SSH/TLS/SSL.
     *
     * @return self
     */
    public function setStrongCrypto($strong_crypto)
    {
        $allowedValues = $this->getStrongCryptoAllowableValues();
        if (!is_null($strong_crypto) && !in_array($strong_crypto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strong_crypto', must be one of '%s'",
                    $strong_crypto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strong_crypto'] = $strong_crypto;

        return $this;
    }

    /**
     * Gets ssh_cbc_cipher
     *
     * @return string|null
     */
    public function getSshCbcCipher()
    {
        return $this->container['ssh_cbc_cipher'];
    }

    /**
     * Sets ssh_cbc_cipher
     *
     * @param string|null $ssh_cbc_cipher Enable/disable CBC cipher for SSH access.    enable:Enable CBC cipher for SSH access.    disable:Disable CBC cipher for SSH access.
     *
     * @return self
     */
    public function setSshCbcCipher($ssh_cbc_cipher)
    {
        $allowedValues = $this->getSshCbcCipherAllowableValues();
        if (!is_null($ssh_cbc_cipher) && !in_array($ssh_cbc_cipher, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_cbc_cipher', must be one of '%s'",
                    $ssh_cbc_cipher,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_cbc_cipher'] = $ssh_cbc_cipher;

        return $this;
    }

    /**
     * Gets ssh_hmac_md5
     *
     * @return string|null
     */
    public function getSshHmacMd5()
    {
        return $this->container['ssh_hmac_md5'];
    }

    /**
     * Sets ssh_hmac_md5
     *
     * @param string|null $ssh_hmac_md5 Enable/disable HMAC-MD5 for SSH access.    enable:Enable HMAC-MD5 for SSH access.    disable:Disable HMAC-MD5 for SSH access.
     *
     * @return self
     */
    public function setSshHmacMd5($ssh_hmac_md5)
    {
        $allowedValues = $this->getSshHmacMd5AllowableValues();
        if (!is_null($ssh_hmac_md5) && !in_array($ssh_hmac_md5, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_hmac_md5', must be one of '%s'",
                    $ssh_hmac_md5,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_hmac_md5'] = $ssh_hmac_md5;

        return $this;
    }

    /**
     * Gets ssh_kex_sha1
     *
     * @return string|null
     */
    public function getSshKexSha1()
    {
        return $this->container['ssh_kex_sha1'];
    }

    /**
     * Sets ssh_kex_sha1
     *
     * @param string|null $ssh_kex_sha1 Enable/disable SHA1 key exchange for SSH access.    enable:Enable SHA1 for SSH key exchanges.    disable:Disable SHA1 for SSH key exchanges.
     *
     * @return self
     */
    public function setSshKexSha1($ssh_kex_sha1)
    {
        $allowedValues = $this->getSshKexSha1AllowableValues();
        if (!is_null($ssh_kex_sha1) && !in_array($ssh_kex_sha1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_kex_sha1', must be one of '%s'",
                    $ssh_kex_sha1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_kex_sha1'] = $ssh_kex_sha1;

        return $this;
    }

    /**
     * Gets ssh_mac_weak
     *
     * @return string|null
     */
    public function getSshMacWeak()
    {
        return $this->container['ssh_mac_weak'];
    }

    /**
     * Sets ssh_mac_weak
     *
     * @param string|null $ssh_mac_weak Enable/disable HMAC-SHA1 and UMAC-64-ETM for SSH access.    enable:Enable HMAC-SHA1 and UMAC-64-ETM for SSH access.    disable:Disable HMAC-SHA1 and UMAC-64-ETM for SSH access.
     *
     * @return self
     */
    public function setSshMacWeak($ssh_mac_weak)
    {
        $allowedValues = $this->getSshMacWeakAllowableValues();
        if (!is_null($ssh_mac_weak) && !in_array($ssh_mac_weak, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_mac_weak', must be one of '%s'",
                    $ssh_mac_weak,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_mac_weak'] = $ssh_mac_weak;

        return $this;
    }

    /**
     * Gets ssl_static_key_ciphers
     *
     * @return string|null
     */
    public function getSslStaticKeyCiphers()
    {
        return $this->container['ssl_static_key_ciphers'];
    }

    /**
     * Sets ssl_static_key_ciphers
     *
     * @param string|null $ssl_static_key_ciphers Enable/disable static key ciphers in SSL/TLS connections (e.g. AES128-SHA, AES256-SHA, AES128-SHA256, AES256-SHA256).    enable:Enable static key ciphers in SSL/TLS connections.    disable:Disable static key ciphers in SSL/TLS connections.
     *
     * @return self
     */
    public function setSslStaticKeyCiphers($ssl_static_key_ciphers)
    {
        $allowedValues = $this->getSslStaticKeyCiphersAllowableValues();
        if (!is_null($ssl_static_key_ciphers) && !in_array($ssl_static_key_ciphers, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_static_key_ciphers', must be one of '%s'",
                    $ssl_static_key_ciphers,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_static_key_ciphers'] = $ssl_static_key_ciphers;

        return $this;
    }

    /**
     * Gets snat_route_change
     *
     * @return string|null
     */
    public function getSnatRouteChange()
    {
        return $this->container['snat_route_change'];
    }

    /**
     * Sets snat_route_change
     *
     * @param string|null $snat_route_change Enable/disable the ability to change the static NAT route.    enable:Enable SNAT route change.    disable:Disable SNAT route change.
     *
     * @return self
     */
    public function setSnatRouteChange($snat_route_change)
    {
        $allowedValues = $this->getSnatRouteChangeAllowableValues();
        if (!is_null($snat_route_change) && !in_array($snat_route_change, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'snat_route_change', must be one of '%s'",
                    $snat_route_change,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['snat_route_change'] = $snat_route_change;

        return $this;
    }

    /**
     * Gets cli_audit_log
     *
     * @return string|null
     */
    public function getCliAuditLog()
    {
        return $this->container['cli_audit_log'];
    }

    /**
     * Sets cli_audit_log
     *
     * @param string|null $cli_audit_log Enable/disable CLI audit log.    enable:Enable CLI audit log.    disable:Disable CLI audit log.
     *
     * @return self
     */
    public function setCliAuditLog($cli_audit_log)
    {
        $allowedValues = $this->getCliAuditLogAllowableValues();
        if (!is_null($cli_audit_log) && !in_array($cli_audit_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cli_audit_log', must be one of '%s'",
                    $cli_audit_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cli_audit_log'] = $cli_audit_log;

        return $this;
    }

    /**
     * Gets dh_params
     *
     * @return string|null
     */
    public function getDhParams()
    {
        return $this->container['dh_params'];
    }

    /**
     * Sets dh_params
     *
     * @param string|null $dh_params Number of bits to use in the Diffie-Hellman exchange for HTTPS/SSH protocols.    1024:1024 bits.    1536:1536 bits.    2048:2048 bits.    3072:3072 bits.    4096:4096 bits.    6144:6144 bits.    8192:8192 bits.
     *
     * @return self
     */
    public function setDhParams($dh_params)
    {
        $allowedValues = $this->getDhParamsAllowableValues();
        if (!is_null($dh_params) && !in_array($dh_params, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dh_params', must be one of '%s'",
                    $dh_params,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dh_params'] = $dh_params;

        return $this;
    }

    /**
     * Gets fds_statistics
     *
     * @return string|null
     */
    public function getFdsStatistics()
    {
        return $this->container['fds_statistics'];
    }

    /**
     * Sets fds_statistics
     *
     * @param string|null $fds_statistics Enable/disable sending IPS, Application Control, and AntiVirus data to FortiGuard. This data is used to improve FortiGuard services and is not shared with external parties and is protected by Fortinet's privacy policy.    enable:Enable FortiGuard statistics.    disable:Disable FortiGuard statistics.
     *
     * @return self
     */
    public function setFdsStatistics($fds_statistics)
    {
        $allowedValues = $this->getFdsStatisticsAllowableValues();
        if (!is_null($fds_statistics) && !in_array($fds_statistics, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fds_statistics', must be one of '%s'",
                    $fds_statistics,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fds_statistics'] = $fds_statistics;

        return $this;
    }

    /**
     * Gets fds_statistics_period
     *
     * @return int|null
     */
    public function getFdsStatisticsPeriod()
    {
        return $this->container['fds_statistics_period'];
    }

    /**
     * Sets fds_statistics_period
     *
     * @param int|null $fds_statistics_period FortiGuard statistics collection period in minutes. (1 - 1440 min (1 min to 24 hours), default = 60).
     *
     * @return self
     */
    public function setFdsStatisticsPeriod($fds_statistics_period)
    {

        if (!is_null($fds_statistics_period) && ($fds_statistics_period > 1440)) {
            throw new \InvalidArgumentException('invalid value for $fds_statistics_period when calling InlineObject316., must be smaller than or equal to 1440.');
        }
        if (!is_null($fds_statistics_period) && ($fds_statistics_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $fds_statistics_period when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['fds_statistics_period'] = $fds_statistics_period;

        return $this;
    }

    /**
     * Gets tcp_option
     *
     * @return string|null
     */
    public function getTcpOption()
    {
        return $this->container['tcp_option'];
    }

    /**
     * Sets tcp_option
     *
     * @param string|null $tcp_option Enable SACK, timestamp and MSS TCP options.    enable:Enable TCP option.    disable:Disable TCP option.
     *
     * @return self
     */
    public function setTcpOption($tcp_option)
    {
        $allowedValues = $this->getTcpOptionAllowableValues();
        if (!is_null($tcp_option) && !in_array($tcp_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tcp_option', must be one of '%s'",
                    $tcp_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tcp_option'] = $tcp_option;

        return $this;
    }

    /**
     * Gets lldp_transmission
     *
     * @return string|null
     */
    public function getLldpTransmission()
    {
        return $this->container['lldp_transmission'];
    }

    /**
     * Sets lldp_transmission
     *
     * @param string|null $lldp_transmission Enable/disable Link Layer Discovery Protocol (LLDP) transmission.    enable:Enable transmission of Link Layer Discovery Protocol (LLDP).    disable:Disable transmission of Link Layer Discovery Protocol (LLDP).
     *
     * @return self
     */
    public function setLldpTransmission($lldp_transmission)
    {
        $allowedValues = $this->getLldpTransmissionAllowableValues();
        if (!is_null($lldp_transmission) && !in_array($lldp_transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_transmission', must be one of '%s'",
                    $lldp_transmission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_transmission'] = $lldp_transmission;

        return $this;
    }

    /**
     * Gets lldp_reception
     *
     * @return string|null
     */
    public function getLldpReception()
    {
        return $this->container['lldp_reception'];
    }

    /**
     * Sets lldp_reception
     *
     * @param string|null $lldp_reception Enable/disable Link Layer Discovery Protocol (LLDP) reception.    enable:Enable reception of Link Layer Discovery Protocol (LLDP).    disable:Disable reception of Link Layer Discovery Protocol (LLDP).
     *
     * @return self
     */
    public function setLldpReception($lldp_reception)
    {
        $allowedValues = $this->getLldpReceptionAllowableValues();
        if (!is_null($lldp_reception) && !in_array($lldp_reception, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lldp_reception', must be one of '%s'",
                    $lldp_reception,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lldp_reception'] = $lldp_reception;

        return $this;
    }

    /**
     * Gets proxy_auth_timeout
     *
     * @return int|null
     */
    public function getProxyAuthTimeout()
    {
        return $this->container['proxy_auth_timeout'];
    }

    /**
     * Sets proxy_auth_timeout
     *
     * @param int|null $proxy_auth_timeout Authentication timeout in minutes for authenticated users (1 - 300 min, default = 10).
     *
     * @return self
     */
    public function setProxyAuthTimeout($proxy_auth_timeout)
    {

        if (!is_null($proxy_auth_timeout) && ($proxy_auth_timeout > 300)) {
            throw new \InvalidArgumentException('invalid value for $proxy_auth_timeout when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($proxy_auth_timeout) && ($proxy_auth_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $proxy_auth_timeout when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['proxy_auth_timeout'] = $proxy_auth_timeout;

        return $this;
    }

    /**
     * Gets proxy_re_authentication_mode
     *
     * @return string|null
     */
    public function getProxyReAuthenticationMode()
    {
        return $this->container['proxy_re_authentication_mode'];
    }

    /**
     * Sets proxy_re_authentication_mode
     *
     * @param string|null $proxy_re_authentication_mode Control if users must re-authenticate after a session is closed, traffic has been idle, or from the point at which the user was first created.    session:Proxy re-authentication timeout begins at the closure of the session.    traffic:Proxy re-authentication timeout begins after traffic has not been received.    absolute:Proxy re-authentication timeout begins when the user was first created.
     *
     * @return self
     */
    public function setProxyReAuthenticationMode($proxy_re_authentication_mode)
    {
        $allowedValues = $this->getProxyReAuthenticationModeAllowableValues();
        if (!is_null($proxy_re_authentication_mode) && !in_array($proxy_re_authentication_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_re_authentication_mode', must be one of '%s'",
                    $proxy_re_authentication_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_re_authentication_mode'] = $proxy_re_authentication_mode;

        return $this;
    }

    /**
     * Gets proxy_auth_lifetime
     *
     * @return string|null
     */
    public function getProxyAuthLifetime()
    {
        return $this->container['proxy_auth_lifetime'];
    }

    /**
     * Sets proxy_auth_lifetime
     *
     * @param string|null $proxy_auth_lifetime Enable/disable authenticated users lifetime control.  This is a cap on the total time a proxy user can be authenticated for after which re-authentication will take place.    enable:Enable authenticated users lifetime control.    disable:Disable authenticated users lifetime control.
     *
     * @return self
     */
    public function setProxyAuthLifetime($proxy_auth_lifetime)
    {
        $allowedValues = $this->getProxyAuthLifetimeAllowableValues();
        if (!is_null($proxy_auth_lifetime) && !in_array($proxy_auth_lifetime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_auth_lifetime', must be one of '%s'",
                    $proxy_auth_lifetime,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_auth_lifetime'] = $proxy_auth_lifetime;

        return $this;
    }

    /**
     * Gets proxy_auth_lifetime_timeout
     *
     * @return int|null
     */
    public function getProxyAuthLifetimeTimeout()
    {
        return $this->container['proxy_auth_lifetime_timeout'];
    }

    /**
     * Sets proxy_auth_lifetime_timeout
     *
     * @param int|null $proxy_auth_lifetime_timeout Lifetime timeout in minutes for authenticated users (5  - 65535 min, default=480 (8 hours)).
     *
     * @return self
     */
    public function setProxyAuthLifetimeTimeout($proxy_auth_lifetime_timeout)
    {

        if (!is_null($proxy_auth_lifetime_timeout) && ($proxy_auth_lifetime_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $proxy_auth_lifetime_timeout when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($proxy_auth_lifetime_timeout) && ($proxy_auth_lifetime_timeout < 5)) {
            throw new \InvalidArgumentException('invalid value for $proxy_auth_lifetime_timeout when calling InlineObject316., must be bigger than or equal to 5.');
        }

        $this->container['proxy_auth_lifetime_timeout'] = $proxy_auth_lifetime_timeout;

        return $this;
    }

    /**
     * Gets sys_perf_log_interval
     *
     * @return int|null
     */
    public function getSysPerfLogInterval()
    {
        return $this->container['sys_perf_log_interval'];
    }

    /**
     * Sets sys_perf_log_interval
     *
     * @param int|null $sys_perf_log_interval Time in minutes between updates of performance statistics logging. (1 - 15 min, default = 5, 0 = disabled).
     *
     * @return self
     */
    public function setSysPerfLogInterval($sys_perf_log_interval)
    {

        if (!is_null($sys_perf_log_interval) && ($sys_perf_log_interval > 15)) {
            throw new \InvalidArgumentException('invalid value for $sys_perf_log_interval when calling InlineObject316., must be smaller than or equal to 15.');
        }
        if (!is_null($sys_perf_log_interval) && ($sys_perf_log_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $sys_perf_log_interval when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['sys_perf_log_interval'] = $sys_perf_log_interval;

        return $this;
    }

    /**
     * Gets check_protocol_header
     *
     * @return string|null
     */
    public function getCheckProtocolHeader()
    {
        return $this->container['check_protocol_header'];
    }

    /**
     * Sets check_protocol_header
     *
     * @param string|null $check_protocol_header Level of checking performed on protocol headers. Strict checking is more thorough but may affect performance. Loose checking is ok in most cases.    loose:Check protocol header loosely.    strict:Check protocol header strictly.
     *
     * @return self
     */
    public function setCheckProtocolHeader($check_protocol_header)
    {
        $allowedValues = $this->getCheckProtocolHeaderAllowableValues();
        if (!is_null($check_protocol_header) && !in_array($check_protocol_header, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_protocol_header', must be one of '%s'",
                    $check_protocol_header,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_protocol_header'] = $check_protocol_header;

        return $this;
    }

    /**
     * Gets vip_arp_range
     *
     * @return string|null
     */
    public function getVipArpRange()
    {
        return $this->container['vip_arp_range'];
    }

    /**
     * Sets vip_arp_range
     *
     * @param string|null $vip_arp_range Controls the number of ARPs that the FortiGate sends for a Virtual IP (VIP) address range.    unlimited:Send ARPs for all addresses in VIP range.    restricted:Send ARPs for the first 8192 addresses in VIP range.
     *
     * @return self
     */
    public function setVipArpRange($vip_arp_range)
    {
        $allowedValues = $this->getVipArpRangeAllowableValues();
        if (!is_null($vip_arp_range) && !in_array($vip_arp_range, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vip_arp_range', must be one of '%s'",
                    $vip_arp_range,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vip_arp_range'] = $vip_arp_range;

        return $this;
    }

    /**
     * Gets reset_sessionless_tcp
     *
     * @return string|null
     */
    public function getResetSessionlessTcp()
    {
        return $this->container['reset_sessionless_tcp'];
    }

    /**
     * Sets reset_sessionless_tcp
     *
     * @param string|null $reset_sessionless_tcp Action to perform if the FortiGate receives a TCP packet but cannot find a corresponding session in its session table. NAT/Route mode only.    enable:Enable reset session-less TCP.    disable:Disable reset session-less TCP.
     *
     * @return self
     */
    public function setResetSessionlessTcp($reset_sessionless_tcp)
    {
        $allowedValues = $this->getResetSessionlessTcpAllowableValues();
        if (!is_null($reset_sessionless_tcp) && !in_array($reset_sessionless_tcp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reset_sessionless_tcp', must be one of '%s'",
                    $reset_sessionless_tcp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reset_sessionless_tcp'] = $reset_sessionless_tcp;

        return $this;
    }

    /**
     * Gets allow_traffic_redirect
     *
     * @return string|null
     */
    public function getAllowTrafficRedirect()
    {
        return $this->container['allow_traffic_redirect'];
    }

    /**
     * Sets allow_traffic_redirect
     *
     * @param string|null $allow_traffic_redirect Disable to allow traffic to be routed back on a different interface.    enable:Enable allow traffic redirect.    disable:Disable allow traffic redirect.
     *
     * @return self
     */
    public function setAllowTrafficRedirect($allow_traffic_redirect)
    {
        $allowedValues = $this->getAllowTrafficRedirectAllowableValues();
        if (!is_null($allow_traffic_redirect) && !in_array($allow_traffic_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_traffic_redirect', must be one of '%s'",
                    $allow_traffic_redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_traffic_redirect'] = $allow_traffic_redirect;

        return $this;
    }

    /**
     * Gets strict_dirty_session_check
     *
     * @return string|null
     */
    public function getStrictDirtySessionCheck()
    {
        return $this->container['strict_dirty_session_check'];
    }

    /**
     * Sets strict_dirty_session_check
     *
     * @param string|null $strict_dirty_session_check Enable to check the session against the original policy when revalidating. This can prevent dropping of redirected sessions when web-filtering and authentication are enabled together. If this option is enabled, the FortiGate unit deletes a session if a routing or policy change causes the session to no longer match the policy that originally allowed the session.    enable:Enable strict dirty-session check.    disable:Disable strict dirty-session check.
     *
     * @return self
     */
    public function setStrictDirtySessionCheck($strict_dirty_session_check)
    {
        $allowedValues = $this->getStrictDirtySessionCheckAllowableValues();
        if (!is_null($strict_dirty_session_check) && !in_array($strict_dirty_session_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict_dirty_session_check', must be one of '%s'",
                    $strict_dirty_session_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict_dirty_session_check'] = $strict_dirty_session_check;

        return $this;
    }

    /**
     * Gets tcp_halfclose_timer
     *
     * @return int|null
     */
    public function getTcpHalfcloseTimer()
    {
        return $this->container['tcp_halfclose_timer'];
    }

    /**
     * Sets tcp_halfclose_timer
     *
     * @param int|null $tcp_halfclose_timer Number of seconds the FortiGate unit should wait to close a session after one peer has sent a FIN packet but the other has not responded (1 - 86400 sec (1 day), default = 120).
     *
     * @return self
     */
    public function setTcpHalfcloseTimer($tcp_halfclose_timer)
    {

        if (!is_null($tcp_halfclose_timer) && ($tcp_halfclose_timer > 86400)) {
            throw new \InvalidArgumentException('invalid value for $tcp_halfclose_timer when calling InlineObject316., must be smaller than or equal to 86400.');
        }
        if (!is_null($tcp_halfclose_timer) && ($tcp_halfclose_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $tcp_halfclose_timer when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['tcp_halfclose_timer'] = $tcp_halfclose_timer;

        return $this;
    }

    /**
     * Gets tcp_halfopen_timer
     *
     * @return int|null
     */
    public function getTcpHalfopenTimer()
    {
        return $this->container['tcp_halfopen_timer'];
    }

    /**
     * Sets tcp_halfopen_timer
     *
     * @param int|null $tcp_halfopen_timer Number of seconds the FortiGate unit should wait to close a session after one peer has sent an open session packet but the other has not responded (1 - 86400 sec (1 day), default = 10).
     *
     * @return self
     */
    public function setTcpHalfopenTimer($tcp_halfopen_timer)
    {

        if (!is_null($tcp_halfopen_timer) && ($tcp_halfopen_timer > 86400)) {
            throw new \InvalidArgumentException('invalid value for $tcp_halfopen_timer when calling InlineObject316., must be smaller than or equal to 86400.');
        }
        if (!is_null($tcp_halfopen_timer) && ($tcp_halfopen_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $tcp_halfopen_timer when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['tcp_halfopen_timer'] = $tcp_halfopen_timer;

        return $this;
    }

    /**
     * Gets tcp_timewait_timer
     *
     * @return int|null
     */
    public function getTcpTimewaitTimer()
    {
        return $this->container['tcp_timewait_timer'];
    }

    /**
     * Sets tcp_timewait_timer
     *
     * @param int|null $tcp_timewait_timer Length of the TCP TIME-WAIT state in seconds.
     *
     * @return self
     */
    public function setTcpTimewaitTimer($tcp_timewait_timer)
    {

        if (!is_null($tcp_timewait_timer) && ($tcp_timewait_timer > 300)) {
            throw new \InvalidArgumentException('invalid value for $tcp_timewait_timer when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($tcp_timewait_timer) && ($tcp_timewait_timer < 0)) {
            throw new \InvalidArgumentException('invalid value for $tcp_timewait_timer when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['tcp_timewait_timer'] = $tcp_timewait_timer;

        return $this;
    }

    /**
     * Gets udp_idle_timer
     *
     * @return int|null
     */
    public function getUdpIdleTimer()
    {
        return $this->container['udp_idle_timer'];
    }

    /**
     * Sets udp_idle_timer
     *
     * @param int|null $udp_idle_timer UDP connection session timeout. This command can be useful in managing CPU and memory resources (1 - 86400 seconds (1 day), default = 60).
     *
     * @return self
     */
    public function setUdpIdleTimer($udp_idle_timer)
    {

        if (!is_null($udp_idle_timer) && ($udp_idle_timer > 86400)) {
            throw new \InvalidArgumentException('invalid value for $udp_idle_timer when calling InlineObject316., must be smaller than or equal to 86400.');
        }
        if (!is_null($udp_idle_timer) && ($udp_idle_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $udp_idle_timer when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['udp_idle_timer'] = $udp_idle_timer;

        return $this;
    }

    /**
     * Gets block_session_timer
     *
     * @return int|null
     */
    public function getBlockSessionTimer()
    {
        return $this->container['block_session_timer'];
    }

    /**
     * Sets block_session_timer
     *
     * @param int|null $block_session_timer Duration in seconds for blocked sessions (1 - 300 sec  (5 minutes), default = 30).
     *
     * @return self
     */
    public function setBlockSessionTimer($block_session_timer)
    {

        if (!is_null($block_session_timer) && ($block_session_timer > 300)) {
            throw new \InvalidArgumentException('invalid value for $block_session_timer when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($block_session_timer) && ($block_session_timer < 1)) {
            throw new \InvalidArgumentException('invalid value for $block_session_timer when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['block_session_timer'] = $block_session_timer;

        return $this;
    }

    /**
     * Gets ip_src_port_range
     *
     * @return string|null
     */
    public function getIpSrcPortRange()
    {
        return $this->container['ip_src_port_range'];
    }

    /**
     * Sets ip_src_port_range
     *
     * @param string|null $ip_src_port_range IP source port range used for traffic originating from the FortiGate unit.
     *
     * @return self
     */
    public function setIpSrcPortRange($ip_src_port_range)
    {
        $this->container['ip_src_port_range'] = $ip_src_port_range;

        return $this;
    }

    /**
     * Gets pre_login_banner
     *
     * @return string|null
     */
    public function getPreLoginBanner()
    {
        return $this->container['pre_login_banner'];
    }

    /**
     * Sets pre_login_banner
     *
     * @param string|null $pre_login_banner Enable/disable displaying the administrator access disclaimer message on the login page before an administrator logs in.    enable:Enable pre-login banner.    disable:Disable pre-login banner.
     *
     * @return self
     */
    public function setPreLoginBanner($pre_login_banner)
    {
        $allowedValues = $this->getPreLoginBannerAllowableValues();
        if (!is_null($pre_login_banner) && !in_array($pre_login_banner, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pre_login_banner', must be one of '%s'",
                    $pre_login_banner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pre_login_banner'] = $pre_login_banner;

        return $this;
    }

    /**
     * Gets post_login_banner
     *
     * @return string|null
     */
    public function getPostLoginBanner()
    {
        return $this->container['post_login_banner'];
    }

    /**
     * Sets post_login_banner
     *
     * @param string|null $post_login_banner Enable/disable displaying the administrator access disclaimer message after an administrator successfully logs in.    disable:Disable post-login banner.    enable:Enable post-login banner.
     *
     * @return self
     */
    public function setPostLoginBanner($post_login_banner)
    {
        $allowedValues = $this->getPostLoginBannerAllowableValues();
        if (!is_null($post_login_banner) && !in_array($post_login_banner, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'post_login_banner', must be one of '%s'",
                    $post_login_banner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['post_login_banner'] = $post_login_banner;

        return $this;
    }

    /**
     * Gets tftp
     *
     * @return string|null
     */
    public function getTftp()
    {
        return $this->container['tftp'];
    }

    /**
     * Sets tftp
     *
     * @param string|null $tftp Enable/disable TFTP.    enable:Enable TFTP.    disable:Disable TFTP.
     *
     * @return self
     */
    public function setTftp($tftp)
    {
        $allowedValues = $this->getTftpAllowableValues();
        if (!is_null($tftp) && !in_array($tftp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tftp', must be one of '%s'",
                    $tftp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tftp'] = $tftp;

        return $this;
    }

    /**
     * Gets av_failopen
     *
     * @return string|null
     */
    public function getAvFailopen()
    {
        return $this->container['av_failopen'];
    }

    /**
     * Sets av_failopen
     *
     * @param string|null $av_failopen Set the action to take if the FortiGate is running low on memory or the proxy connection limit has been reached.    pass:Bypass the antivirus system when memory is low. Antivirus scanning resumes when the low memory condition is resolved.    off:Stop accepting new AV sessions when entering conserve mode, but continue to process current active sessions.    one-shot:Bypass the antivirus system when memory is low.
     *
     * @return self
     */
    public function setAvFailopen($av_failopen)
    {
        $allowedValues = $this->getAvFailopenAllowableValues();
        if (!is_null($av_failopen) && !in_array($av_failopen, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'av_failopen', must be one of '%s'",
                    $av_failopen,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['av_failopen'] = $av_failopen;

        return $this;
    }

    /**
     * Gets av_failopen_session
     *
     * @return string|null
     */
    public function getAvFailopenSession()
    {
        return $this->container['av_failopen_session'];
    }

    /**
     * Sets av_failopen_session
     *
     * @param string|null $av_failopen_session When enabled and a proxy for a protocol runs out of room in its session table, that protocol goes into failopen mode and enacts the action specified by av-failopen.    enable:Enable AV fail open session option.    disable:Disable AV fail open session option.
     *
     * @return self
     */
    public function setAvFailopenSession($av_failopen_session)
    {
        $allowedValues = $this->getAvFailopenSessionAllowableValues();
        if (!is_null($av_failopen_session) && !in_array($av_failopen_session, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'av_failopen_session', must be one of '%s'",
                    $av_failopen_session,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['av_failopen_session'] = $av_failopen_session;

        return $this;
    }

    /**
     * Gets memory_use_threshold_extreme
     *
     * @return int|null
     */
    public function getMemoryUseThresholdExtreme()
    {
        return $this->container['memory_use_threshold_extreme'];
    }

    /**
     * Sets memory_use_threshold_extreme
     *
     * @param int|null $memory_use_threshold_extreme Threshold at which memory usage is considered extreme (new sessions are dropped) (% of total RAM, default = 95).
     *
     * @return self
     */
    public function setMemoryUseThresholdExtreme($memory_use_threshold_extreme)
    {

        if (!is_null($memory_use_threshold_extreme) && ($memory_use_threshold_extreme > 97)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_extreme when calling InlineObject316., must be smaller than or equal to 97.');
        }
        if (!is_null($memory_use_threshold_extreme) && ($memory_use_threshold_extreme < 70)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_extreme when calling InlineObject316., must be bigger than or equal to 70.');
        }

        $this->container['memory_use_threshold_extreme'] = $memory_use_threshold_extreme;

        return $this;
    }

    /**
     * Gets memory_use_threshold_red
     *
     * @return int|null
     */
    public function getMemoryUseThresholdRed()
    {
        return $this->container['memory_use_threshold_red'];
    }

    /**
     * Sets memory_use_threshold_red
     *
     * @param int|null $memory_use_threshold_red Threshold at which memory usage forces the FortiGate to enter conserve mode (% of total RAM, default = 88).
     *
     * @return self
     */
    public function setMemoryUseThresholdRed($memory_use_threshold_red)
    {

        if (!is_null($memory_use_threshold_red) && ($memory_use_threshold_red > 97)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_red when calling InlineObject316., must be smaller than or equal to 97.');
        }
        if (!is_null($memory_use_threshold_red) && ($memory_use_threshold_red < 70)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_red when calling InlineObject316., must be bigger than or equal to 70.');
        }

        $this->container['memory_use_threshold_red'] = $memory_use_threshold_red;

        return $this;
    }

    /**
     * Gets memory_use_threshold_green
     *
     * @return int|null
     */
    public function getMemoryUseThresholdGreen()
    {
        return $this->container['memory_use_threshold_green'];
    }

    /**
     * Sets memory_use_threshold_green
     *
     * @param int|null $memory_use_threshold_green Threshold at which memory usage forces the FortiGate to exit conserve mode (% of total RAM, default = 82).
     *
     * @return self
     */
    public function setMemoryUseThresholdGreen($memory_use_threshold_green)
    {

        if (!is_null($memory_use_threshold_green) && ($memory_use_threshold_green > 97)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_green when calling InlineObject316., must be smaller than or equal to 97.');
        }
        if (!is_null($memory_use_threshold_green) && ($memory_use_threshold_green < 70)) {
            throw new \InvalidArgumentException('invalid value for $memory_use_threshold_green when calling InlineObject316., must be bigger than or equal to 70.');
        }

        $this->container['memory_use_threshold_green'] = $memory_use_threshold_green;

        return $this;
    }

    /**
     * Gets cpu_use_threshold
     *
     * @return int|null
     */
    public function getCpuUseThreshold()
    {
        return $this->container['cpu_use_threshold'];
    }

    /**
     * Sets cpu_use_threshold
     *
     * @param int|null $cpu_use_threshold Threshold at which CPU usage is reported. (% of total CPU, default = 90).
     *
     * @return self
     */
    public function setCpuUseThreshold($cpu_use_threshold)
    {

        if (!is_null($cpu_use_threshold) && ($cpu_use_threshold > 99)) {
            throw new \InvalidArgumentException('invalid value for $cpu_use_threshold when calling InlineObject316., must be smaller than or equal to 99.');
        }
        if (!is_null($cpu_use_threshold) && ($cpu_use_threshold < 50)) {
            throw new \InvalidArgumentException('invalid value for $cpu_use_threshold when calling InlineObject316., must be bigger than or equal to 50.');
        }

        $this->container['cpu_use_threshold'] = $cpu_use_threshold;

        return $this;
    }

    /**
     * Gets check_reset_range
     *
     * @return string|null
     */
    public function getCheckResetRange()
    {
        return $this->container['check_reset_range'];
    }

    /**
     * Sets check_reset_range
     *
     * @param string|null $check_reset_range Configure ICMP error message verification. You can either apply strict RST range checking or disable it.    strict:Check RST range strictly.    disable:Disable RST range check.
     *
     * @return self
     */
    public function setCheckResetRange($check_reset_range)
    {
        $allowedValues = $this->getCheckResetRangeAllowableValues();
        if (!is_null($check_reset_range) && !in_array($check_reset_range, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_reset_range', must be one of '%s'",
                    $check_reset_range,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_reset_range'] = $check_reset_range;

        return $this;
    }

    /**
     * Gets vdom_mode
     *
     * @return string|null
     */
    public function getVdomMode()
    {
        return $this->container['vdom_mode'];
    }

    /**
     * Sets vdom_mode
     *
     * @param string|null $vdom_mode Enable/disable support for split/multiple virtual domains (VDOMs).    no-vdom:Disable split/multiple VDOMs mode.    split-vdom:Enable split VDOMs mode.    multi-vdom:Enable multiple VDOMs mode.
     *
     * @return self
     */
    public function setVdomMode($vdom_mode)
    {
        $allowedValues = $this->getVdomModeAllowableValues();
        if (!is_null($vdom_mode) && !in_array($vdom_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vdom_mode', must be one of '%s'",
                    $vdom_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vdom_mode'] = $vdom_mode;

        return $this;
    }

    /**
     * Gets long_vdom_name
     *
     * @return string|null
     */
    public function getLongVdomName()
    {
        return $this->container['long_vdom_name'];
    }

    /**
     * Sets long_vdom_name
     *
     * @param string|null $long_vdom_name Enable/disable long VDOM name support.    enable:Enable long VDOM name support.    disable:Disable long VDOM name support.
     *
     * @return self
     */
    public function setLongVdomName($long_vdom_name)
    {
        $allowedValues = $this->getLongVdomNameAllowableValues();
        if (!is_null($long_vdom_name) && !in_array($long_vdom_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'long_vdom_name', must be one of '%s'",
                    $long_vdom_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['long_vdom_name'] = $long_vdom_name;

        return $this;
    }

    /**
     * Gets edit_vdom_prompt
     *
     * @return string|null
     */
    public function getEditVdomPrompt()
    {
        return $this->container['edit_vdom_prompt'];
    }

    /**
     * Sets edit_vdom_prompt
     *
     * @param string|null $edit_vdom_prompt Enable/disable edit new VDOM prompt.    enable:Enable edit new VDOM prompt.    disable:Disable edit new VDOM prompt.
     *
     * @return self
     */
    public function setEditVdomPrompt($edit_vdom_prompt)
    {
        $allowedValues = $this->getEditVdomPromptAllowableValues();
        if (!is_null($edit_vdom_prompt) && !in_array($edit_vdom_prompt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'edit_vdom_prompt', must be one of '%s'",
                    $edit_vdom_prompt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edit_vdom_prompt'] = $edit_vdom_prompt;

        return $this;
    }

    /**
     * Gets admin_port
     *
     * @return int|null
     */
    public function getAdminPort()
    {
        return $this->container['admin_port'];
    }

    /**
     * Sets admin_port
     *
     * @param int|null $admin_port Administrative access port for HTTP. (1 - 65535, default = 80).
     *
     * @return self
     */
    public function setAdminPort($admin_port)
    {

        if (!is_null($admin_port) && ($admin_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $admin_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($admin_port) && ($admin_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_port'] = $admin_port;

        return $this;
    }

    /**
     * Gets admin_sport
     *
     * @return int|null
     */
    public function getAdminSport()
    {
        return $this->container['admin_sport'];
    }

    /**
     * Sets admin_sport
     *
     * @param int|null $admin_sport Administrative access port for HTTPS. (1 - 65535, default = 443).
     *
     * @return self
     */
    public function setAdminSport($admin_sport)
    {

        if (!is_null($admin_sport) && ($admin_sport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $admin_sport when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($admin_sport) && ($admin_sport < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_sport when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_sport'] = $admin_sport;

        return $this;
    }

    /**
     * Gets admin_https_redirect
     *
     * @return string|null
     */
    public function getAdminHttpsRedirect()
    {
        return $this->container['admin_https_redirect'];
    }

    /**
     * Sets admin_https_redirect
     *
     * @param string|null $admin_https_redirect Enable/disable redirection of HTTP administration access to HTTPS.    enable:Enable redirecting HTTP administration access to HTTPS.    disable:Disable redirecting HTTP administration access to HTTPS.
     *
     * @return self
     */
    public function setAdminHttpsRedirect($admin_https_redirect)
    {
        $allowedValues = $this->getAdminHttpsRedirectAllowableValues();
        if (!is_null($admin_https_redirect) && !in_array($admin_https_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_https_redirect', must be one of '%s'",
                    $admin_https_redirect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_https_redirect'] = $admin_https_redirect;

        return $this;
    }

    /**
     * Gets admin_hsts_max_age
     *
     * @return int|null
     */
    public function getAdminHstsMaxAge()
    {
        return $this->container['admin_hsts_max_age'];
    }

    /**
     * Sets admin_hsts_max_age
     *
     * @param int|null $admin_hsts_max_age HTTPS Strict-Transport-Security header max-age in seconds. A value of 0 will reset any HSTS records in the browser.When admin-https-redirect is disabled the header max-age will be 0.
     *
     * @return self
     */
    public function setAdminHstsMaxAge($admin_hsts_max_age)
    {

        if (!is_null($admin_hsts_max_age) && ($admin_hsts_max_age > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $admin_hsts_max_age when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($admin_hsts_max_age) && ($admin_hsts_max_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $admin_hsts_max_age when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['admin_hsts_max_age'] = $admin_hsts_max_age;

        return $this;
    }

    /**
     * Gets admin_ssh_password
     *
     * @return string|null
     */
    public function getAdminSshPassword()
    {
        return $this->container['admin_ssh_password'];
    }

    /**
     * Sets admin_ssh_password
     *
     * @param string|null $admin_ssh_password Enable/disable password authentication for SSH admin access.    enable:Enable password authentication for SSH admin access.    disable:Disable password authentication for SSH admin access.
     *
     * @return self
     */
    public function setAdminSshPassword($admin_ssh_password)
    {
        $allowedValues = $this->getAdminSshPasswordAllowableValues();
        if (!is_null($admin_ssh_password) && !in_array($admin_ssh_password, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_ssh_password', must be one of '%s'",
                    $admin_ssh_password,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_ssh_password'] = $admin_ssh_password;

        return $this;
    }

    /**
     * Gets admin_restrict_local
     *
     * @return string|null
     */
    public function getAdminRestrictLocal()
    {
        return $this->container['admin_restrict_local'];
    }

    /**
     * Sets admin_restrict_local
     *
     * @param string|null $admin_restrict_local Enable/disable local admin authentication restriction when remote authenticator is up and running. (default = disable)    enable:Enable local admin authentication restriction.    disable:Disable local admin authentication restriction.
     *
     * @return self
     */
    public function setAdminRestrictLocal($admin_restrict_local)
    {
        $allowedValues = $this->getAdminRestrictLocalAllowableValues();
        if (!is_null($admin_restrict_local) && !in_array($admin_restrict_local, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_restrict_local', must be one of '%s'",
                    $admin_restrict_local,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_restrict_local'] = $admin_restrict_local;

        return $this;
    }

    /**
     * Gets admin_ssh_port
     *
     * @return int|null
     */
    public function getAdminSshPort()
    {
        return $this->container['admin_ssh_port'];
    }

    /**
     * Sets admin_ssh_port
     *
     * @param int|null $admin_ssh_port Administrative access port for SSH. (1 - 65535, default = 22).
     *
     * @return self
     */
    public function setAdminSshPort($admin_ssh_port)
    {

        if (!is_null($admin_ssh_port) && ($admin_ssh_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $admin_ssh_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($admin_ssh_port) && ($admin_ssh_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_ssh_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_ssh_port'] = $admin_ssh_port;

        return $this;
    }

    /**
     * Gets admin_ssh_grace_time
     *
     * @return int|null
     */
    public function getAdminSshGraceTime()
    {
        return $this->container['admin_ssh_grace_time'];
    }

    /**
     * Sets admin_ssh_grace_time
     *
     * @param int|null $admin_ssh_grace_time Maximum time in seconds permitted between making an SSH connection to the FortiGate unit and authenticating (10 - 3600 sec (1 hour), default 120).
     *
     * @return self
     */
    public function setAdminSshGraceTime($admin_ssh_grace_time)
    {

        if (!is_null($admin_ssh_grace_time) && ($admin_ssh_grace_time > 3600)) {
            throw new \InvalidArgumentException('invalid value for $admin_ssh_grace_time when calling InlineObject316., must be smaller than or equal to 3600.');
        }
        if (!is_null($admin_ssh_grace_time) && ($admin_ssh_grace_time < 10)) {
            throw new \InvalidArgumentException('invalid value for $admin_ssh_grace_time when calling InlineObject316., must be bigger than or equal to 10.');
        }

        $this->container['admin_ssh_grace_time'] = $admin_ssh_grace_time;

        return $this;
    }

    /**
     * Gets admin_ssh_v1
     *
     * @return string|null
     */
    public function getAdminSshV1()
    {
        return $this->container['admin_ssh_v1'];
    }

    /**
     * Sets admin_ssh_v1
     *
     * @param string|null $admin_ssh_v1 Enable/disable SSH v1 compatibility.    enable:Enable SSH v1 compatibility.    disable:Disable SSH v1 compatibility.
     *
     * @return self
     */
    public function setAdminSshV1($admin_ssh_v1)
    {
        $allowedValues = $this->getAdminSshV1AllowableValues();
        if (!is_null($admin_ssh_v1) && !in_array($admin_ssh_v1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_ssh_v1', must be one of '%s'",
                    $admin_ssh_v1,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_ssh_v1'] = $admin_ssh_v1;

        return $this;
    }

    /**
     * Gets admin_telnet
     *
     * @return string|null
     */
    public function getAdminTelnet()
    {
        return $this->container['admin_telnet'];
    }

    /**
     * Sets admin_telnet
     *
     * @param string|null $admin_telnet Enable/disable TELNET service.    enable:Enable TELNET service.    disable:Disable TELNET service.
     *
     * @return self
     */
    public function setAdminTelnet($admin_telnet)
    {
        $allowedValues = $this->getAdminTelnetAllowableValues();
        if (!is_null($admin_telnet) && !in_array($admin_telnet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_telnet', must be one of '%s'",
                    $admin_telnet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_telnet'] = $admin_telnet;

        return $this;
    }

    /**
     * Gets admin_telnet_port
     *
     * @return int|null
     */
    public function getAdminTelnetPort()
    {
        return $this->container['admin_telnet_port'];
    }

    /**
     * Sets admin_telnet_port
     *
     * @param int|null $admin_telnet_port Administrative access port for TELNET. (1 - 65535, default = 23).
     *
     * @return self
     */
    public function setAdminTelnetPort($admin_telnet_port)
    {

        if (!is_null($admin_telnet_port) && ($admin_telnet_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $admin_telnet_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($admin_telnet_port) && ($admin_telnet_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $admin_telnet_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['admin_telnet_port'] = $admin_telnet_port;

        return $this;
    }

    /**
     * Gets default_service_source_port
     *
     * @return string|null
     */
    public function getDefaultServiceSourcePort()
    {
        return $this->container['default_service_source_port'];
    }

    /**
     * Sets default_service_source_port
     *
     * @param string|null $default_service_source_port Default service source port range. (default=1-65535)
     *
     * @return self
     */
    public function setDefaultServiceSourcePort($default_service_source_port)
    {
        $this->container['default_service_source_port'] = $default_service_source_port;

        return $this;
    }

    /**
     * Gets admin_maintainer
     *
     * @return string|null
     */
    public function getAdminMaintainer()
    {
        return $this->container['admin_maintainer'];
    }

    /**
     * Sets admin_maintainer
     *
     * @param string|null $admin_maintainer Enable/disable maintainer administrator login. When enabled, the maintainer account can be used to log in from the console after a hard reboot. The password is \"bcpb\" followed by the FortiGate unit serial number. You have limited time to complete this login.    enable:Enable login for special user (maintainer).    disable:Disable login for special user (maintainer).
     *
     * @return self
     */
    public function setAdminMaintainer($admin_maintainer)
    {
        $allowedValues = $this->getAdminMaintainerAllowableValues();
        if (!is_null($admin_maintainer) && !in_array($admin_maintainer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_maintainer', must be one of '%s'",
                    $admin_maintainer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_maintainer'] = $admin_maintainer;

        return $this;
    }

    /**
     * Gets admin_reset_button
     *
     * @return string|null
     */
    public function getAdminResetButton()
    {
        return $this->container['admin_reset_button'];
    }

    /**
     * Sets admin_reset_button
     *
     * @param string|null $admin_reset_button press the reset button can reset to factory default    enable:press the reset button can reset to factory default    disable:press the reset button cannot reset to factory default
     *
     * @return self
     */
    public function setAdminResetButton($admin_reset_button)
    {
        $allowedValues = $this->getAdminResetButtonAllowableValues();
        if (!is_null($admin_reset_button) && !in_array($admin_reset_button, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_reset_button', must be one of '%s'",
                    $admin_reset_button,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_reset_button'] = $admin_reset_button;

        return $this;
    }

    /**
     * Gets admin_server_cert
     *
     * @return string|null
     */
    public function getAdminServerCert()
    {
        return $this->container['admin_server_cert'];
    }

    /**
     * Sets admin_server_cert
     *
     * @param string|null $admin_server_cert Server certificate that the FortiGate uses for HTTPS administrative connections.
     *
     * @return self
     */
    public function setAdminServerCert($admin_server_cert)
    {
        if (!is_null($admin_server_cert) && (mb_strlen($admin_server_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $admin_server_cert when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['admin_server_cert'] = $admin_server_cert;

        return $this;
    }

    /**
     * Gets user_server_cert
     *
     * @return string|null
     */
    public function getUserServerCert()
    {
        return $this->container['user_server_cert'];
    }

    /**
     * Sets user_server_cert
     *
     * @param string|null $user_server_cert Certificate to use for https user authentication.
     *
     * @return self
     */
    public function setUserServerCert($user_server_cert)
    {
        if (!is_null($user_server_cert) && (mb_strlen($user_server_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $user_server_cert when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['user_server_cert'] = $user_server_cert;

        return $this;
    }

    /**
     * Gets admin_https_pki_required
     *
     * @return string|null
     */
    public function getAdminHttpsPkiRequired()
    {
        return $this->container['admin_https_pki_required'];
    }

    /**
     * Sets admin_https_pki_required
     *
     * @param string|null $admin_https_pki_required Enable/disable admin login method. Enable to force administrators to provide a valid certificate to log in if PKI is enabled. Disable to allow administrators to log in with a certificate or password.    enable:Admin users must provide a valid certificate when PKI is enabled for HTTPS admin access.    disable:Admin users can login by providing a valid certificate or password.
     *
     * @return self
     */
    public function setAdminHttpsPkiRequired($admin_https_pki_required)
    {
        $allowedValues = $this->getAdminHttpsPkiRequiredAllowableValues();
        if (!is_null($admin_https_pki_required) && !in_array($admin_https_pki_required, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_https_pki_required', must be one of '%s'",
                    $admin_https_pki_required,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_https_pki_required'] = $admin_https_pki_required;

        return $this;
    }

    /**
     * Gets wifi_certificate
     *
     * @return string|null
     */
    public function getWifiCertificate()
    {
        return $this->container['wifi_certificate'];
    }

    /**
     * Sets wifi_certificate
     *
     * @param string|null $wifi_certificate Certificate to use for WiFi authentication.
     *
     * @return self
     */
    public function setWifiCertificate($wifi_certificate)
    {
        if (!is_null($wifi_certificate) && (mb_strlen($wifi_certificate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $wifi_certificate when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['wifi_certificate'] = $wifi_certificate;

        return $this;
    }

    /**
     * Gets wifi_ca_certificate
     *
     * @return string|null
     */
    public function getWifiCaCertificate()
    {
        return $this->container['wifi_ca_certificate'];
    }

    /**
     * Sets wifi_ca_certificate
     *
     * @param string|null $wifi_ca_certificate CA certificate that verifies the WiFi certificate.
     *
     * @return self
     */
    public function setWifiCaCertificate($wifi_ca_certificate)
    {
        if (!is_null($wifi_ca_certificate) && (mb_strlen($wifi_ca_certificate) > 79)) {
            throw new \InvalidArgumentException('invalid length for $wifi_ca_certificate when calling InlineObject316., must be smaller than or equal to 79.');
        }

        $this->container['wifi_ca_certificate'] = $wifi_ca_certificate;

        return $this;
    }

    /**
     * Gets auth_http_port
     *
     * @return int|null
     */
    public function getAuthHttpPort()
    {
        return $this->container['auth_http_port'];
    }

    /**
     * Sets auth_http_port
     *
     * @param int|null $auth_http_port User authentication HTTP port. (1 - 65535, default = 1000).
     *
     * @return self
     */
    public function setAuthHttpPort($auth_http_port)
    {

        if (!is_null($auth_http_port) && ($auth_http_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $auth_http_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($auth_http_port) && ($auth_http_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $auth_http_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['auth_http_port'] = $auth_http_port;

        return $this;
    }

    /**
     * Gets auth_https_port
     *
     * @return int|null
     */
    public function getAuthHttpsPort()
    {
        return $this->container['auth_https_port'];
    }

    /**
     * Sets auth_https_port
     *
     * @param int|null $auth_https_port User authentication HTTPS port. (1 - 65535, default = 1003).
     *
     * @return self
     */
    public function setAuthHttpsPort($auth_https_port)
    {

        if (!is_null($auth_https_port) && ($auth_https_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $auth_https_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($auth_https_port) && ($auth_https_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $auth_https_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['auth_https_port'] = $auth_https_port;

        return $this;
    }

    /**
     * Gets auth_keepalive
     *
     * @return string|null
     */
    public function getAuthKeepalive()
    {
        return $this->container['auth_keepalive'];
    }

    /**
     * Sets auth_keepalive
     *
     * @param string|null $auth_keepalive Enable to prevent user authentication sessions from timing out when idle.    enable:Enable use of keep alive to extend authentication.    disable:Disable use of keep alive to extend authentication.
     *
     * @return self
     */
    public function setAuthKeepalive($auth_keepalive)
    {
        $allowedValues = $this->getAuthKeepaliveAllowableValues();
        if (!is_null($auth_keepalive) && !in_array($auth_keepalive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_keepalive', must be one of '%s'",
                    $auth_keepalive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_keepalive'] = $auth_keepalive;

        return $this;
    }

    /**
     * Gets policy_auth_concurrent
     *
     * @return int|null
     */
    public function getPolicyAuthConcurrent()
    {
        return $this->container['policy_auth_concurrent'];
    }

    /**
     * Sets policy_auth_concurrent
     *
     * @param int|null $policy_auth_concurrent Number of concurrent firewall use logins from the same user (1 - 100, default = 0 means no limit).
     *
     * @return self
     */
    public function setPolicyAuthConcurrent($policy_auth_concurrent)
    {

        if (!is_null($policy_auth_concurrent) && ($policy_auth_concurrent > 100)) {
            throw new \InvalidArgumentException('invalid value for $policy_auth_concurrent when calling InlineObject316., must be smaller than or equal to 100.');
        }
        if (!is_null($policy_auth_concurrent) && ($policy_auth_concurrent < 0)) {
            throw new \InvalidArgumentException('invalid value for $policy_auth_concurrent when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['policy_auth_concurrent'] = $policy_auth_concurrent;

        return $this;
    }

    /**
     * Gets auth_session_limit
     *
     * @return string|null
     */
    public function getAuthSessionLimit()
    {
        return $this->container['auth_session_limit'];
    }

    /**
     * Sets auth_session_limit
     *
     * @param string|null $auth_session_limit Action to take when the number of allowed user authenticated sessions is reached.    block-new:Block new user authentication attempts.    logout-inactive:Logout the most inactive user authenticated sessions.
     *
     * @return self
     */
    public function setAuthSessionLimit($auth_session_limit)
    {
        $allowedValues = $this->getAuthSessionLimitAllowableValues();
        if (!is_null($auth_session_limit) && !in_array($auth_session_limit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_session_limit', must be one of '%s'",
                    $auth_session_limit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_session_limit'] = $auth_session_limit;

        return $this;
    }

    /**
     * Gets auth_cert
     *
     * @return string|null
     */
    public function getAuthCert()
    {
        return $this->container['auth_cert'];
    }

    /**
     * Sets auth_cert
     *
     * @param string|null $auth_cert Server certificate that the FortiGate uses for HTTPS firewall authentication connections.
     *
     * @return self
     */
    public function setAuthCert($auth_cert)
    {
        if (!is_null($auth_cert) && (mb_strlen($auth_cert) > 35)) {
            throw new \InvalidArgumentException('invalid length for $auth_cert when calling InlineObject316., must be smaller than or equal to 35.');
        }

        $this->container['auth_cert'] = $auth_cert;

        return $this;
    }

    /**
     * Gets clt_cert_req
     *
     * @return string|null
     */
    public function getCltCertReq()
    {
        return $this->container['clt_cert_req'];
    }

    /**
     * Sets clt_cert_req
     *
     * @param string|null $clt_cert_req Enable/disable requiring administrators to have a client certificate to log into the GUI using HTTPS.    enable:Enable require client certificate for GUI login.    disable:Disable require client certificate for GUI login.
     *
     * @return self
     */
    public function setCltCertReq($clt_cert_req)
    {
        $allowedValues = $this->getCltCertReqAllowableValues();
        if (!is_null($clt_cert_req) && !in_array($clt_cert_req, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'clt_cert_req', must be one of '%s'",
                    $clt_cert_req,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['clt_cert_req'] = $clt_cert_req;

        return $this;
    }

    /**
     * Gets fortiservice_port
     *
     * @return int|null
     */
    public function getFortiservicePort()
    {
        return $this->container['fortiservice_port'];
    }

    /**
     * Sets fortiservice_port
     *
     * @param int|null $fortiservice_port FortiService port (1 - 65535, default = 8013). Used by FortiClient endpoint compliance. Older versions of FortiClient used a different port.
     *
     * @return self
     */
    public function setFortiservicePort($fortiservice_port)
    {

        if (!is_null($fortiservice_port) && ($fortiservice_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fortiservice_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($fortiservice_port) && ($fortiservice_port < 1)) {
            throw new \InvalidArgumentException('invalid value for $fortiservice_port when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['fortiservice_port'] = $fortiservice_port;

        return $this;
    }

    /**
     * Gets cfg_save
     *
     * @return string|null
     */
    public function getCfgSave()
    {
        return $this->container['cfg_save'];
    }

    /**
     * Sets cfg_save
     *
     * @param string|null $cfg_save Configuration file save mode for CLI changes.    automatic:Automatically save config.    manual:Manually save config.    revert:Manually save config and revert the config when timeout.
     *
     * @return self
     */
    public function setCfgSave($cfg_save)
    {
        $allowedValues = $this->getCfgSaveAllowableValues();
        if (!is_null($cfg_save) && !in_array($cfg_save, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cfg_save', must be one of '%s'",
                    $cfg_save,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cfg_save'] = $cfg_save;

        return $this;
    }

    /**
     * Gets cfg_revert_timeout
     *
     * @return int|null
     */
    public function getCfgRevertTimeout()
    {
        return $this->container['cfg_revert_timeout'];
    }

    /**
     * Sets cfg_revert_timeout
     *
     * @param int|null $cfg_revert_timeout Time-out for reverting to the last saved configuration. (10 - 4294967295 seconds, default = 600).
     *
     * @return self
     */
    public function setCfgRevertTimeout($cfg_revert_timeout)
    {

        if (!is_null($cfg_revert_timeout) && ($cfg_revert_timeout > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $cfg_revert_timeout when calling InlineObject316., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($cfg_revert_timeout) && ($cfg_revert_timeout < 10)) {
            throw new \InvalidArgumentException('invalid value for $cfg_revert_timeout when calling InlineObject316., must be bigger than or equal to 10.');
        }

        $this->container['cfg_revert_timeout'] = $cfg_revert_timeout;

        return $this;
    }

    /**
     * Gets reboot_upon_config_restore
     *
     * @return string|null
     */
    public function getRebootUponConfigRestore()
    {
        return $this->container['reboot_upon_config_restore'];
    }

    /**
     * Sets reboot_upon_config_restore
     *
     * @param string|null $reboot_upon_config_restore Enable/disable reboot of system upon restoring configuration.    enable:Enable reboot of system upon restoring configuration.    disable:Disable reboot of system upon restoring configuration.
     *
     * @return self
     */
    public function setRebootUponConfigRestore($reboot_upon_config_restore)
    {
        $allowedValues = $this->getRebootUponConfigRestoreAllowableValues();
        if (!is_null($reboot_upon_config_restore) && !in_array($reboot_upon_config_restore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reboot_upon_config_restore', must be one of '%s'",
                    $reboot_upon_config_restore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reboot_upon_config_restore'] = $reboot_upon_config_restore;

        return $this;
    }

    /**
     * Gets admin_scp
     *
     * @return string|null
     */
    public function getAdminScp()
    {
        return $this->container['admin_scp'];
    }

    /**
     * Sets admin_scp
     *
     * @param string|null $admin_scp Enable/disable using SCP to download the system configuration. You can use SCP as an alternative method for backing up the configuration.    enable:Enable allow system configuration download by SCP.    disable:Disable allow system configuration download by SCP.
     *
     * @return self
     */
    public function setAdminScp($admin_scp)
    {
        $allowedValues = $this->getAdminScpAllowableValues();
        if (!is_null($admin_scp) && !in_array($admin_scp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_scp', must be one of '%s'",
                    $admin_scp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_scp'] = $admin_scp;

        return $this;
    }

    /**
     * Gets security_rating_result_submission
     *
     * @return string|null
     */
    public function getSecurityRatingResultSubmission()
    {
        return $this->container['security_rating_result_submission'];
    }

    /**
     * Sets security_rating_result_submission
     *
     * @param string|null $security_rating_result_submission Enable/disable the submission of Security Rating results to FortiGuard.    enable:Enable submission of Security Rating results to FortiGuard.    disable:Disable submission of Security Rating results to FortiGuard.
     *
     * @return self
     */
    public function setSecurityRatingResultSubmission($security_rating_result_submission)
    {
        $allowedValues = $this->getSecurityRatingResultSubmissionAllowableValues();
        if (!is_null($security_rating_result_submission) && !in_array($security_rating_result_submission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_rating_result_submission', must be one of '%s'",
                    $security_rating_result_submission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_rating_result_submission'] = $security_rating_result_submission;

        return $this;
    }

    /**
     * Gets security_rating_run_on_schedule
     *
     * @return string|null
     */
    public function getSecurityRatingRunOnSchedule()
    {
        return $this->container['security_rating_run_on_schedule'];
    }

    /**
     * Sets security_rating_run_on_schedule
     *
     * @param string|null $security_rating_run_on_schedule Enable/disable scheduled runs of Security Rating.    enable:Enable scheduled runs of Security Rating.    disable:Disable scheduled runs of Security Rating.
     *
     * @return self
     */
    public function setSecurityRatingRunOnSchedule($security_rating_run_on_schedule)
    {
        $allowedValues = $this->getSecurityRatingRunOnScheduleAllowableValues();
        if (!is_null($security_rating_run_on_schedule) && !in_array($security_rating_run_on_schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_rating_run_on_schedule', must be one of '%s'",
                    $security_rating_run_on_schedule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_rating_run_on_schedule'] = $security_rating_run_on_schedule;

        return $this;
    }

    /**
     * Gets wireless_controller
     *
     * @return string|null
     */
    public function getWirelessController()
    {
        return $this->container['wireless_controller'];
    }

    /**
     * Sets wireless_controller
     *
     * @param string|null $wireless_controller Enable/disable the wireless controller feature to use the FortiGate unit to manage FortiAPs.    enable:Enable wireless controller.    disable:Disable wireless controller.
     *
     * @return self
     */
    public function setWirelessController($wireless_controller)
    {
        $allowedValues = $this->getWirelessControllerAllowableValues();
        if (!is_null($wireless_controller) && !in_array($wireless_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wireless_controller', must be one of '%s'",
                    $wireless_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wireless_controller'] = $wireless_controller;

        return $this;
    }

    /**
     * Gets wireless_controller_port
     *
     * @return int|null
     */
    public function getWirelessControllerPort()
    {
        return $this->container['wireless_controller_port'];
    }

    /**
     * Sets wireless_controller_port
     *
     * @param int|null $wireless_controller_port Port used for the control channel in wireless controller mode (wireless-mode is ac). The data channel port is the control channel port number plus one (1024 - 49150, default = 5246).
     *
     * @return self
     */
    public function setWirelessControllerPort($wireless_controller_port)
    {

        if (!is_null($wireless_controller_port) && ($wireless_controller_port > 49150)) {
            throw new \InvalidArgumentException('invalid value for $wireless_controller_port when calling InlineObject316., must be smaller than or equal to 49150.');
        }
        if (!is_null($wireless_controller_port) && ($wireless_controller_port < 1024)) {
            throw new \InvalidArgumentException('invalid value for $wireless_controller_port when calling InlineObject316., must be bigger than or equal to 1024.');
        }

        $this->container['wireless_controller_port'] = $wireless_controller_port;

        return $this;
    }

    /**
     * Gets fortiextender_data_port
     *
     * @return int|null
     */
    public function getFortiextenderDataPort()
    {
        return $this->container['fortiextender_data_port'];
    }

    /**
     * Sets fortiextender_data_port
     *
     * @param int|null $fortiextender_data_port FortiExtender data port (1024 - 49150, default = 25246).
     *
     * @return self
     */
    public function setFortiextenderDataPort($fortiextender_data_port)
    {

        if (!is_null($fortiextender_data_port) && ($fortiextender_data_port > 49150)) {
            throw new \InvalidArgumentException('invalid value for $fortiextender_data_port when calling InlineObject316., must be smaller than or equal to 49150.');
        }
        if (!is_null($fortiextender_data_port) && ($fortiextender_data_port < 1024)) {
            throw new \InvalidArgumentException('invalid value for $fortiextender_data_port when calling InlineObject316., must be bigger than or equal to 1024.');
        }

        $this->container['fortiextender_data_port'] = $fortiextender_data_port;

        return $this;
    }

    /**
     * Gets fortiextender
     *
     * @return string|null
     */
    public function getFortiextender()
    {
        return $this->container['fortiextender'];
    }

    /**
     * Sets fortiextender
     *
     * @param string|null $fortiextender Enable/disable FortiExtender.    disable:Disable FortiExtender controller.    enable:Enable FortiExtender controller.
     *
     * @return self
     */
    public function setFortiextender($fortiextender)
    {
        $allowedValues = $this->getFortiextenderAllowableValues();
        if (!is_null($fortiextender) && !in_array($fortiextender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiextender', must be one of '%s'",
                    $fortiextender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiextender'] = $fortiextender;

        return $this;
    }

    /**
     * Gets fortiextender_vlan_mode
     *
     * @return string|null
     */
    public function getFortiextenderVlanMode()
    {
        return $this->container['fortiextender_vlan_mode'];
    }

    /**
     * Sets fortiextender_vlan_mode
     *
     * @param string|null $fortiextender_vlan_mode Enable/disable FortiExtender VLAN mode.    enable:Enable FortiExtender VLAN mode.    disable:Disable FortiExtender VLAN mode.
     *
     * @return self
     */
    public function setFortiextenderVlanMode($fortiextender_vlan_mode)
    {
        $allowedValues = $this->getFortiextenderVlanModeAllowableValues();
        if (!is_null($fortiextender_vlan_mode) && !in_array($fortiextender_vlan_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiextender_vlan_mode', must be one of '%s'",
                    $fortiextender_vlan_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiextender_vlan_mode'] = $fortiextender_vlan_mode;

        return $this;
    }

    /**
     * Gets switch_controller
     *
     * @return string|null
     */
    public function getSwitchController()
    {
        return $this->container['switch_controller'];
    }

    /**
     * Sets switch_controller
     *
     * @param string|null $switch_controller Enable/disable switch controller feature. Switch controller allows you to manage FortiSwitch from the FortiGate itself.    disable:Disable switch controller feature.    enable:Enable switch controller feature.
     *
     * @return self
     */
    public function setSwitchController($switch_controller)
    {
        $allowedValues = $this->getSwitchControllerAllowableValues();
        if (!is_null($switch_controller) && !in_array($switch_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller', must be one of '%s'",
                    $switch_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller'] = $switch_controller;

        return $this;
    }

    /**
     * Gets switch_controller_reserved_network
     *
     * @return string|null
     */
    public function getSwitchControllerReservedNetwork()
    {
        return $this->container['switch_controller_reserved_network'];
    }

    /**
     * Sets switch_controller_reserved_network
     *
     * @param string|null $switch_controller_reserved_network Enable reserved network subnet for controlled switches. This is available when the switch controller is enabled.
     *
     * @return self
     */
    public function setSwitchControllerReservedNetwork($switch_controller_reserved_network)
    {
        $this->container['switch_controller_reserved_network'] = $switch_controller_reserved_network;

        return $this;
    }

    /**
     * Gets dnsproxy_worker_count
     *
     * @return int|null
     */
    public function getDnsproxyWorkerCount()
    {
        return $this->container['dnsproxy_worker_count'];
    }

    /**
     * Sets dnsproxy_worker_count
     *
     * @param int|null $dnsproxy_worker_count DNS proxy worker count.
     *
     * @return self
     */
    public function setDnsproxyWorkerCount($dnsproxy_worker_count)
    {

        if (!is_null($dnsproxy_worker_count) && ($dnsproxy_worker_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $dnsproxy_worker_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($dnsproxy_worker_count) && ($dnsproxy_worker_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $dnsproxy_worker_count when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['dnsproxy_worker_count'] = $dnsproxy_worker_count;

        return $this;
    }

    /**
     * Gets url_filter_count
     *
     * @return int|null
     */
    public function getUrlFilterCount()
    {
        return $this->container['url_filter_count'];
    }

    /**
     * Sets url_filter_count
     *
     * @param int|null $url_filter_count URL filter daemon count.
     *
     * @return self
     */
    public function setUrlFilterCount($url_filter_count)
    {

        if (!is_null($url_filter_count) && ($url_filter_count > 1)) {
            throw new \InvalidArgumentException('invalid value for $url_filter_count when calling InlineObject316., must be smaller than or equal to 1.');
        }
        if (!is_null($url_filter_count) && ($url_filter_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $url_filter_count when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['url_filter_count'] = $url_filter_count;

        return $this;
    }

    /**
     * Gets proxy_worker_count
     *
     * @return int|null
     */
    public function getProxyWorkerCount()
    {
        return $this->container['proxy_worker_count'];
    }

    /**
     * Sets proxy_worker_count
     *
     * @param int|null $proxy_worker_count Proxy worker count.
     *
     * @return self
     */
    public function setProxyWorkerCount($proxy_worker_count)
    {

        if (!is_null($proxy_worker_count) && ($proxy_worker_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $proxy_worker_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($proxy_worker_count) && ($proxy_worker_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $proxy_worker_count when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['proxy_worker_count'] = $proxy_worker_count;

        return $this;
    }

    /**
     * Gets scanunit_count
     *
     * @return int|null
     */
    public function getScanunitCount()
    {
        return $this->container['scanunit_count'];
    }

    /**
     * Sets scanunit_count
     *
     * @param int|null $scanunit_count Number of scanunits. The range and the default depend on the number of CPUs. Only available on FortiGate units with multiple CPUs.
     *
     * @return self
     */
    public function setScanunitCount($scanunit_count)
    {

        if (!is_null($scanunit_count) && ($scanunit_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $scanunit_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($scanunit_count) && ($scanunit_count < 2)) {
            throw new \InvalidArgumentException('invalid value for $scanunit_count when calling InlineObject316., must be bigger than or equal to 2.');
        }

        $this->container['scanunit_count'] = $scanunit_count;

        return $this;
    }

    /**
     * Gets proxy_hardware_acceleration
     *
     * @return string|null
     */
    public function getProxyHardwareAcceleration()
    {
        return $this->container['proxy_hardware_acceleration'];
    }

    /**
     * Sets proxy_hardware_acceleration
     *
     * @param string|null $proxy_hardware_acceleration Enable/disable email proxy hardware acceleration.    disable:Disable email proxy hardware acceleration.    enable:Enable email proxy hardware acceleration.
     *
     * @return self
     */
    public function setProxyHardwareAcceleration($proxy_hardware_acceleration)
    {
        $allowedValues = $this->getProxyHardwareAccelerationAllowableValues();
        if (!is_null($proxy_hardware_acceleration) && !in_array($proxy_hardware_acceleration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proxy_hardware_acceleration', must be one of '%s'",
                    $proxy_hardware_acceleration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proxy_hardware_acceleration'] = $proxy_hardware_acceleration;

        return $this;
    }

    /**
     * Gets fgd_alert_subscription
     *
     * @return string|null
     */
    public function getFgdAlertSubscription()
    {
        return $this->container['fgd_alert_subscription'];
    }

    /**
     * Sets fgd_alert_subscription
     *
     * @param string|null $fgd_alert_subscription Type of alert to retrieve from FortiGuard.    advisory:Retrieve FortiGuard advisories, report and news alerts.    latest-threat:Retrieve latest FortiGuard threats alerts.    latest-virus:Retrieve latest FortiGuard virus alerts.    latest-attack:Retrieve latest FortiGuard attack alerts.    new-antivirus-db:Retrieve FortiGuard AV database release alerts.    new-attack-db:Retrieve FortiGuard IPS database release alerts.
     *
     * @return self
     */
    public function setFgdAlertSubscription($fgd_alert_subscription)
    {
        $allowedValues = $this->getFgdAlertSubscriptionAllowableValues();
        if (!is_null($fgd_alert_subscription) && !in_array($fgd_alert_subscription, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fgd_alert_subscription', must be one of '%s'",
                    $fgd_alert_subscription,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fgd_alert_subscription'] = $fgd_alert_subscription;

        return $this;
    }

    /**
     * Gets ipsec_hmac_offload
     *
     * @return string|null
     */
    public function getIpsecHmacOffload()
    {
        return $this->container['ipsec_hmac_offload'];
    }

    /**
     * Sets ipsec_hmac_offload
     *
     * @param string|null $ipsec_hmac_offload Enable/disable offloading (hardware acceleration) of HMAC processing for IPsec VPN.    enable:Enable offload IPsec HMAC processing to hardware if possible.    disable:Disable offload IPsec HMAC processing to hardware.
     *
     * @return self
     */
    public function setIpsecHmacOffload($ipsec_hmac_offload)
    {
        $allowedValues = $this->getIpsecHmacOffloadAllowableValues();
        if (!is_null($ipsec_hmac_offload) && !in_array($ipsec_hmac_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_hmac_offload', must be one of '%s'",
                    $ipsec_hmac_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_hmac_offload'] = $ipsec_hmac_offload;

        return $this;
    }

    /**
     * Gets ipv6_accept_dad
     *
     * @return int|null
     */
    public function getIpv6AcceptDad()
    {
        return $this->container['ipv6_accept_dad'];
    }

    /**
     * Sets ipv6_accept_dad
     *
     * @param int|null $ipv6_accept_dad Enable/disable acceptance of IPv6 Duplicate Address Detection (DAD).
     *
     * @return self
     */
    public function setIpv6AcceptDad($ipv6_accept_dad)
    {

        if (!is_null($ipv6_accept_dad) && ($ipv6_accept_dad > 2)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_accept_dad when calling InlineObject316., must be smaller than or equal to 2.');
        }
        if (!is_null($ipv6_accept_dad) && ($ipv6_accept_dad < 0)) {
            throw new \InvalidArgumentException('invalid value for $ipv6_accept_dad when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['ipv6_accept_dad'] = $ipv6_accept_dad;

        return $this;
    }

    /**
     * Gets ipv6_allow_anycast_probe
     *
     * @return string|null
     */
    public function getIpv6AllowAnycastProbe()
    {
        return $this->container['ipv6_allow_anycast_probe'];
    }

    /**
     * Sets ipv6_allow_anycast_probe
     *
     * @param string|null $ipv6_allow_anycast_probe Enable/disable IPv6 address probe through Anycast.    enable:Enable probing of IPv6 address space through Anycast    disable:Disable probing of IPv6 address space through Anycast
     *
     * @return self
     */
    public function setIpv6AllowAnycastProbe($ipv6_allow_anycast_probe)
    {
        $allowedValues = $this->getIpv6AllowAnycastProbeAllowableValues();
        if (!is_null($ipv6_allow_anycast_probe) && !in_array($ipv6_allow_anycast_probe, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_allow_anycast_probe', must be one of '%s'",
                    $ipv6_allow_anycast_probe,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_allow_anycast_probe'] = $ipv6_allow_anycast_probe;

        return $this;
    }

    /**
     * Gets csr_ca_attribute
     *
     * @return string|null
     */
    public function getCsrCaAttribute()
    {
        return $this->container['csr_ca_attribute'];
    }

    /**
     * Sets csr_ca_attribute
     *
     * @param string|null $csr_ca_attribute Enable/disable the CA attribute in certificates. Some CA servers reject CSRs that have the CA attribute.    enable:Enable CA attribute in CSR.    disable:Disable CA attribute in CSR.
     *
     * @return self
     */
    public function setCsrCaAttribute($csr_ca_attribute)
    {
        $allowedValues = $this->getCsrCaAttributeAllowableValues();
        if (!is_null($csr_ca_attribute) && !in_array($csr_ca_attribute, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'csr_ca_attribute', must be one of '%s'",
                    $csr_ca_attribute,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['csr_ca_attribute'] = $csr_ca_attribute;

        return $this;
    }

    /**
     * Gets wimax_4g_usb
     *
     * @return string|null
     */
    public function getWimax4gUsb()
    {
        return $this->container['wimax_4g_usb'];
    }

    /**
     * Sets wimax_4g_usb
     *
     * @param string|null $wimax_4g_usb Enable/disable comparability with WiMAX 4G USB devices.    enable:Enable WiMax 4G.    disable:Disable WiMax 4G.
     *
     * @return self
     */
    public function setWimax4gUsb($wimax_4g_usb)
    {
        $allowedValues = $this->getWimax4gUsbAllowableValues();
        if (!is_null($wimax_4g_usb) && !in_array($wimax_4g_usb, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wimax_4g_usb', must be one of '%s'",
                    $wimax_4g_usb,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wimax_4g_usb'] = $wimax_4g_usb;

        return $this;
    }

    /**
     * Gets cert_chain_max
     *
     * @return int|null
     */
    public function getCertChainMax()
    {
        return $this->container['cert_chain_max'];
    }

    /**
     * Sets cert_chain_max
     *
     * @param int|null $cert_chain_max Maximum number of certificates that can be traversed in a certificate chain.
     *
     * @return self
     */
    public function setCertChainMax($cert_chain_max)
    {

        if (!is_null($cert_chain_max) && ($cert_chain_max > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $cert_chain_max when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cert_chain_max) && ($cert_chain_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $cert_chain_max when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['cert_chain_max'] = $cert_chain_max;

        return $this;
    }

    /**
     * Gets sslvpn_max_worker_count
     *
     * @return int|null
     */
    public function getSslvpnMaxWorkerCount()
    {
        return $this->container['sslvpn_max_worker_count'];
    }

    /**
     * Sets sslvpn_max_worker_count
     *
     * @param int|null $sslvpn_max_worker_count Maximum number of SSL VPN processes. Upper limit for this value is the number of CPUs and depends on the model. Default value of zero means the SSLVPN daemon decides the number of worker processes.
     *
     * @return self
     */
    public function setSslvpnMaxWorkerCount($sslvpn_max_worker_count)
    {

        if (!is_null($sslvpn_max_worker_count) && ($sslvpn_max_worker_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $sslvpn_max_worker_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($sslvpn_max_worker_count) && ($sslvpn_max_worker_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $sslvpn_max_worker_count when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['sslvpn_max_worker_count'] = $sslvpn_max_worker_count;

        return $this;
    }

    /**
     * Gets sslvpn_kxp_hardware_acceleration
     *
     * @return string|null
     */
    public function getSslvpnKxpHardwareAcceleration()
    {
        return $this->container['sslvpn_kxp_hardware_acceleration'];
    }

    /**
     * Sets sslvpn_kxp_hardware_acceleration
     *
     * @param string|null $sslvpn_kxp_hardware_acceleration Enable/disable SSL VPN KXP hardware acceleration.    enable:Enable KXP SSL-VPN hardware acceleration.    disable:Disable KXP SSL-VPN hardware acceleration.
     *
     * @return self
     */
    public function setSslvpnKxpHardwareAcceleration($sslvpn_kxp_hardware_acceleration)
    {
        $allowedValues = $this->getSslvpnKxpHardwareAccelerationAllowableValues();
        if (!is_null($sslvpn_kxp_hardware_acceleration) && !in_array($sslvpn_kxp_hardware_acceleration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslvpn_kxp_hardware_acceleration', must be one of '%s'",
                    $sslvpn_kxp_hardware_acceleration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sslvpn_kxp_hardware_acceleration'] = $sslvpn_kxp_hardware_acceleration;

        return $this;
    }

    /**
     * Gets sslvpn_cipher_hardware_acceleration
     *
     * @return string|null
     */
    public function getSslvpnCipherHardwareAcceleration()
    {
        return $this->container['sslvpn_cipher_hardware_acceleration'];
    }

    /**
     * Sets sslvpn_cipher_hardware_acceleration
     *
     * @param string|null $sslvpn_cipher_hardware_acceleration Enable/disable SSL VPN hardware acceleration.    enable:Enable SSL-VPN cipher hardware acceleration.    disable:Disable SSL-VPN cipher hardware acceleration.
     *
     * @return self
     */
    public function setSslvpnCipherHardwareAcceleration($sslvpn_cipher_hardware_acceleration)
    {
        $allowedValues = $this->getSslvpnCipherHardwareAccelerationAllowableValues();
        if (!is_null($sslvpn_cipher_hardware_acceleration) && !in_array($sslvpn_cipher_hardware_acceleration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslvpn_cipher_hardware_acceleration', must be one of '%s'",
                    $sslvpn_cipher_hardware_acceleration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sslvpn_cipher_hardware_acceleration'] = $sslvpn_cipher_hardware_acceleration;

        return $this;
    }

    /**
     * Gets sslvpn_ems_sn_check
     *
     * @return string|null
     */
    public function getSslvpnEmsSnCheck()
    {
        return $this->container['sslvpn_ems_sn_check'];
    }

    /**
     * Sets sslvpn_ems_sn_check
     *
     * @param string|null $sslvpn_ems_sn_check Enable/disable verification of EMS serial number in SSL-VPN connection.    enable:Enable verification of EMS serial number in SSL-VPN connection.    disable:Disable verification of EMS serial number in SSL-VPN connection.
     *
     * @return self
     */
    public function setSslvpnEmsSnCheck($sslvpn_ems_sn_check)
    {
        $allowedValues = $this->getSslvpnEmsSnCheckAllowableValues();
        if (!is_null($sslvpn_ems_sn_check) && !in_array($sslvpn_ems_sn_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslvpn_ems_sn_check', must be one of '%s'",
                    $sslvpn_ems_sn_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sslvpn_ems_sn_check'] = $sslvpn_ems_sn_check;

        return $this;
    }

    /**
     * Gets sslvpn_plugin_version_check
     *
     * @return string|null
     */
    public function getSslvpnPluginVersionCheck()
    {
        return $this->container['sslvpn_plugin_version_check'];
    }

    /**
     * Sets sslvpn_plugin_version_check
     *
     * @param string|null $sslvpn_plugin_version_check Enable/disable checking browser's plugin version by SSL VPN.    enable:Enable SSL-VPN automatic checking of browser plug-in version.    disable:Disable SSL-VPN automatic checking of browser plug-in version.
     *
     * @return self
     */
    public function setSslvpnPluginVersionCheck($sslvpn_plugin_version_check)
    {
        $allowedValues = $this->getSslvpnPluginVersionCheckAllowableValues();
        if (!is_null($sslvpn_plugin_version_check) && !in_array($sslvpn_plugin_version_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslvpn_plugin_version_check', must be one of '%s'",
                    $sslvpn_plugin_version_check,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sslvpn_plugin_version_check'] = $sslvpn_plugin_version_check;

        return $this;
    }

    /**
     * Gets two_factor_ftk_expiry
     *
     * @return int|null
     */
    public function getTwoFactorFtkExpiry()
    {
        return $this->container['two_factor_ftk_expiry'];
    }

    /**
     * Sets two_factor_ftk_expiry
     *
     * @param int|null $two_factor_ftk_expiry FortiToken authentication session timeout (60 - 600 sec (10 minutes), default = 60).
     *
     * @return self
     */
    public function setTwoFactorFtkExpiry($two_factor_ftk_expiry)
    {

        if (!is_null($two_factor_ftk_expiry) && ($two_factor_ftk_expiry > 600)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_ftk_expiry when calling InlineObject316., must be smaller than or equal to 600.');
        }
        if (!is_null($two_factor_ftk_expiry) && ($two_factor_ftk_expiry < 60)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_ftk_expiry when calling InlineObject316., must be bigger than or equal to 60.');
        }

        $this->container['two_factor_ftk_expiry'] = $two_factor_ftk_expiry;

        return $this;
    }

    /**
     * Gets two_factor_email_expiry
     *
     * @return int|null
     */
    public function getTwoFactorEmailExpiry()
    {
        return $this->container['two_factor_email_expiry'];
    }

    /**
     * Sets two_factor_email_expiry
     *
     * @param int|null $two_factor_email_expiry Email-based two-factor authentication session timeout (30 - 300 seconds (5 minutes), default = 60).
     *
     * @return self
     */
    public function setTwoFactorEmailExpiry($two_factor_email_expiry)
    {

        if (!is_null($two_factor_email_expiry) && ($two_factor_email_expiry > 300)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_email_expiry when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($two_factor_email_expiry) && ($two_factor_email_expiry < 30)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_email_expiry when calling InlineObject316., must be bigger than or equal to 30.');
        }

        $this->container['two_factor_email_expiry'] = $two_factor_email_expiry;

        return $this;
    }

    /**
     * Gets two_factor_sms_expiry
     *
     * @return int|null
     */
    public function getTwoFactorSmsExpiry()
    {
        return $this->container['two_factor_sms_expiry'];
    }

    /**
     * Sets two_factor_sms_expiry
     *
     * @param int|null $two_factor_sms_expiry SMS-based two-factor authentication session timeout (30 - 300 sec, default = 60).
     *
     * @return self
     */
    public function setTwoFactorSmsExpiry($two_factor_sms_expiry)
    {

        if (!is_null($two_factor_sms_expiry) && ($two_factor_sms_expiry > 300)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_sms_expiry when calling InlineObject316., must be smaller than or equal to 300.');
        }
        if (!is_null($two_factor_sms_expiry) && ($two_factor_sms_expiry < 30)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_sms_expiry when calling InlineObject316., must be bigger than or equal to 30.');
        }

        $this->container['two_factor_sms_expiry'] = $two_factor_sms_expiry;

        return $this;
    }

    /**
     * Gets two_factor_fac_expiry
     *
     * @return int|null
     */
    public function getTwoFactorFacExpiry()
    {
        return $this->container['two_factor_fac_expiry'];
    }

    /**
     * Sets two_factor_fac_expiry
     *
     * @param int|null $two_factor_fac_expiry FortiAuthenticator token authentication session timeout (10 - 3600 seconds (1 hour), default = 60).
     *
     * @return self
     */
    public function setTwoFactorFacExpiry($two_factor_fac_expiry)
    {

        if (!is_null($two_factor_fac_expiry) && ($two_factor_fac_expiry > 3600)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_fac_expiry when calling InlineObject316., must be smaller than or equal to 3600.');
        }
        if (!is_null($two_factor_fac_expiry) && ($two_factor_fac_expiry < 10)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_fac_expiry when calling InlineObject316., must be bigger than or equal to 10.');
        }

        $this->container['two_factor_fac_expiry'] = $two_factor_fac_expiry;

        return $this;
    }

    /**
     * Gets two_factor_ftm_expiry
     *
     * @return int|null
     */
    public function getTwoFactorFtmExpiry()
    {
        return $this->container['two_factor_ftm_expiry'];
    }

    /**
     * Sets two_factor_ftm_expiry
     *
     * @param int|null $two_factor_ftm_expiry FortiToken Mobile session timeout (1 - 168 hours (7 days), default = 72).
     *
     * @return self
     */
    public function setTwoFactorFtmExpiry($two_factor_ftm_expiry)
    {

        if (!is_null($two_factor_ftm_expiry) && ($two_factor_ftm_expiry > 168)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_ftm_expiry when calling InlineObject316., must be smaller than or equal to 168.');
        }
        if (!is_null($two_factor_ftm_expiry) && ($two_factor_ftm_expiry < 1)) {
            throw new \InvalidArgumentException('invalid value for $two_factor_ftm_expiry when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['two_factor_ftm_expiry'] = $two_factor_ftm_expiry;

        return $this;
    }

    /**
     * Gets wad_worker_count
     *
     * @return int|null
     */
    public function getWadWorkerCount()
    {
        return $this->container['wad_worker_count'];
    }

    /**
     * Sets wad_worker_count
     *
     * @param int|null $wad_worker_count Number of explicit proxy WAN optimization daemon (WAD) processes. By default WAN optimization, explicit proxy, and web caching is handled by all of the CPU cores in a FortiGate unit.
     *
     * @return self
     */
    public function setWadWorkerCount($wad_worker_count)
    {

        if (!is_null($wad_worker_count) && ($wad_worker_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $wad_worker_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($wad_worker_count) && ($wad_worker_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $wad_worker_count when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['wad_worker_count'] = $wad_worker_count;

        return $this;
    }

    /**
     * Gets wad_csvc_cs_count
     *
     * @return int|null
     */
    public function getWadCsvcCsCount()
    {
        return $this->container['wad_csvc_cs_count'];
    }

    /**
     * Sets wad_csvc_cs_count
     *
     * @param int|null $wad_csvc_cs_count Number of concurrent WAD-cache-service object-cache processes.
     *
     * @return self
     */
    public function setWadCsvcCsCount($wad_csvc_cs_count)
    {

        if (!is_null($wad_csvc_cs_count) && ($wad_csvc_cs_count > 1)) {
            throw new \InvalidArgumentException('invalid value for $wad_csvc_cs_count when calling InlineObject316., must be smaller than or equal to 1.');
        }
        if (!is_null($wad_csvc_cs_count) && ($wad_csvc_cs_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $wad_csvc_cs_count when calling InlineObject316., must be bigger than or equal to 1.');
        }

        $this->container['wad_csvc_cs_count'] = $wad_csvc_cs_count;

        return $this;
    }

    /**
     * Gets wad_csvc_db_count
     *
     * @return int|null
     */
    public function getWadCsvcDbCount()
    {
        return $this->container['wad_csvc_db_count'];
    }

    /**
     * Sets wad_csvc_db_count
     *
     * @param int|null $wad_csvc_db_count Number of concurrent WAD-cache-service byte-cache processes.
     *
     * @return self
     */
    public function setWadCsvcDbCount($wad_csvc_db_count)
    {

        if (!is_null($wad_csvc_db_count) && ($wad_csvc_db_count > 4)) {
            throw new \InvalidArgumentException('invalid value for $wad_csvc_db_count when calling InlineObject316., must be smaller than or equal to 4.');
        }
        if (!is_null($wad_csvc_db_count) && ($wad_csvc_db_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $wad_csvc_db_count when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['wad_csvc_db_count'] = $wad_csvc_db_count;

        return $this;
    }

    /**
     * Gets wad_source_affinity
     *
     * @return string|null
     */
    public function getWadSourceAffinity()
    {
        return $this->container['wad_source_affinity'];
    }

    /**
     * Sets wad_source_affinity
     *
     * @param string|null $wad_source_affinity Enable/disable dispatching traffic to WAD workers based on source affinity.    disable:Disable dispatching traffic to WAD workers based on source affinity.    enable:Enable dispatching traffic to WAD workers based on source affinity.
     *
     * @return self
     */
    public function setWadSourceAffinity($wad_source_affinity)
    {
        $allowedValues = $this->getWadSourceAffinityAllowableValues();
        if (!is_null($wad_source_affinity) && !in_array($wad_source_affinity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wad_source_affinity', must be one of '%s'",
                    $wad_source_affinity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wad_source_affinity'] = $wad_source_affinity;

        return $this;
    }

    /**
     * Gets wad_memory_change_granularity
     *
     * @return int|null
     */
    public function getWadMemoryChangeGranularity()
    {
        return $this->container['wad_memory_change_granularity'];
    }

    /**
     * Sets wad_memory_change_granularity
     *
     * @param int|null $wad_memory_change_granularity Minimum percentage change in system memory usage detected by the wad daemon prior to adjusting TCP window size for any active connection.
     *
     * @return self
     */
    public function setWadMemoryChangeGranularity($wad_memory_change_granularity)
    {

        if (!is_null($wad_memory_change_granularity) && ($wad_memory_change_granularity > 25)) {
            throw new \InvalidArgumentException('invalid value for $wad_memory_change_granularity when calling InlineObject316., must be smaller than or equal to 25.');
        }
        if (!is_null($wad_memory_change_granularity) && ($wad_memory_change_granularity < 5)) {
            throw new \InvalidArgumentException('invalid value for $wad_memory_change_granularity when calling InlineObject316., must be bigger than or equal to 5.');
        }

        $this->container['wad_memory_change_granularity'] = $wad_memory_change_granularity;

        return $this;
    }

    /**
     * Gets login_timestamp
     *
     * @return string|null
     */
    public function getLoginTimestamp()
    {
        return $this->container['login_timestamp'];
    }

    /**
     * Sets login_timestamp
     *
     * @param string|null $login_timestamp Enable/disable login time recording.    enable:Enable login time recording.    disable:Disable login time recording.
     *
     * @return self
     */
    public function setLoginTimestamp($login_timestamp)
    {
        $allowedValues = $this->getLoginTimestampAllowableValues();
        if (!is_null($login_timestamp) && !in_array($login_timestamp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'login_timestamp', must be one of '%s'",
                    $login_timestamp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['login_timestamp'] = $login_timestamp;

        return $this;
    }

    /**
     * Gets miglogd_children
     *
     * @return int|null
     */
    public function getMiglogdChildren()
    {
        return $this->container['miglogd_children'];
    }

    /**
     * Sets miglogd_children
     *
     * @param int|null $miglogd_children Number of logging (miglogd) processes to be allowed to run. Higher number can reduce performance; lower number can slow log processing time. No logs will be dropped or lost if the number is changed.
     *
     * @return self
     */
    public function setMiglogdChildren($miglogd_children)
    {

        if (!is_null($miglogd_children) && ($miglogd_children > 15)) {
            throw new \InvalidArgumentException('invalid value for $miglogd_children when calling InlineObject316., must be smaller than or equal to 15.');
        }
        if (!is_null($miglogd_children) && ($miglogd_children < 0)) {
            throw new \InvalidArgumentException('invalid value for $miglogd_children when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['miglogd_children'] = $miglogd_children;

        return $this;
    }

    /**
     * Gets special_file_23_support
     *
     * @return string|null
     */
    public function getSpecialFile23Support()
    {
        return $this->container['special_file_23_support'];
    }

    /**
     * Sets special_file_23_support
     *
     * @param string|null $special_file_23_support Enable/disable detection of those special format files when using Data Leak Protection.    disable:Disable detection of those special format files when using Data Leak Protection.    enable:Enable detection of those special format files when using Data Leak Protection.
     *
     * @return self
     */
    public function setSpecialFile23Support($special_file_23_support)
    {
        $allowedValues = $this->getSpecialFile23SupportAllowableValues();
        if (!is_null($special_file_23_support) && !in_array($special_file_23_support, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'special_file_23_support', must be one of '%s'",
                    $special_file_23_support,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['special_file_23_support'] = $special_file_23_support;

        return $this;
    }

    /**
     * Gets log_uuid_address
     *
     * @return string|null
     */
    public function getLogUuidAddress()
    {
        return $this->container['log_uuid_address'];
    }

    /**
     * Sets log_uuid_address
     *
     * @param string|null $log_uuid_address Enable/disable insertion of address UUIDs to traffic logs.    enable:Enable insertion of address UUID to traffic logs.    disable:Disable insertion of address UUID to traffic logs.
     *
     * @return self
     */
    public function setLogUuidAddress($log_uuid_address)
    {
        $allowedValues = $this->getLogUuidAddressAllowableValues();
        if (!is_null($log_uuid_address) && !in_array($log_uuid_address, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_uuid_address', must be one of '%s'",
                    $log_uuid_address,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_uuid_address'] = $log_uuid_address;

        return $this;
    }

    /**
     * Gets log_ssl_connection
     *
     * @return string|null
     */
    public function getLogSslConnection()
    {
        return $this->container['log_ssl_connection'];
    }

    /**
     * Sets log_ssl_connection
     *
     * @param string|null $log_ssl_connection Enable/disable logging of SSL connection events.    enable:Enable logging of SSL connection events.    disable:Disable logging of SSL connection events.
     *
     * @return self
     */
    public function setLogSslConnection($log_ssl_connection)
    {
        $allowedValues = $this->getLogSslConnectionAllowableValues();
        if (!is_null($log_ssl_connection) && !in_array($log_ssl_connection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_ssl_connection', must be one of '%s'",
                    $log_ssl_connection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_ssl_connection'] = $log_ssl_connection;

        return $this;
    }

    /**
     * Gets arp_max_entry
     *
     * @return int|null
     */
    public function getArpMaxEntry()
    {
        return $this->container['arp_max_entry'];
    }

    /**
     * Sets arp_max_entry
     *
     * @param int|null $arp_max_entry Maximum number of dynamically learned MAC addresses that can be added to the ARP table (131072 - 2147483647, default = 131072).
     *
     * @return self
     */
    public function setArpMaxEntry($arp_max_entry)
    {

        if (!is_null($arp_max_entry) && ($arp_max_entry > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $arp_max_entry when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($arp_max_entry) && ($arp_max_entry < 131072)) {
            throw new \InvalidArgumentException('invalid value for $arp_max_entry when calling InlineObject316., must be bigger than or equal to 131072.');
        }

        $this->container['arp_max_entry'] = $arp_max_entry;

        return $this;
    }

    /**
     * Gets ndp_max_entry
     *
     * @return int|null
     */
    public function getNdpMaxEntry()
    {
        return $this->container['ndp_max_entry'];
    }

    /**
     * Sets ndp_max_entry
     *
     * @param int|null $ndp_max_entry Maximum number of NDP table entries (set to 65,536 or higher; if set to 0, kernel holds 65,536 entries).
     *
     * @return self
     */
    public function setNdpMaxEntry($ndp_max_entry)
    {

        if (!is_null($ndp_max_entry) && ($ndp_max_entry > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $ndp_max_entry when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ndp_max_entry) && ($ndp_max_entry < 65536)) {
            throw new \InvalidArgumentException('invalid value for $ndp_max_entry when calling InlineObject316., must be bigger than or equal to 65536.');
        }

        $this->container['ndp_max_entry'] = $ndp_max_entry;

        return $this;
    }

    /**
     * Gets br_fdb_max_entry
     *
     * @return int|null
     */
    public function getBrFdbMaxEntry()
    {
        return $this->container['br_fdb_max_entry'];
    }

    /**
     * Sets br_fdb_max_entry
     *
     * @param int|null $br_fdb_max_entry Maximum number of bridge forwarding database (FDB) entries.
     *
     * @return self
     */
    public function setBrFdbMaxEntry($br_fdb_max_entry)
    {

        if (!is_null($br_fdb_max_entry) && ($br_fdb_max_entry > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $br_fdb_max_entry when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($br_fdb_max_entry) && ($br_fdb_max_entry < 8192)) {
            throw new \InvalidArgumentException('invalid value for $br_fdb_max_entry when calling InlineObject316., must be bigger than or equal to 8192.');
        }

        $this->container['br_fdb_max_entry'] = $br_fdb_max_entry;

        return $this;
    }

    /**
     * Gets max_route_cache_size
     *
     * @return int|null
     */
    public function getMaxRouteCacheSize()
    {
        return $this->container['max_route_cache_size'];
    }

    /**
     * Sets max_route_cache_size
     *
     * @param int|null $max_route_cache_size Maximum number of IP route cache entries (0 - 2147483647).
     *
     * @return self
     */
    public function setMaxRouteCacheSize($max_route_cache_size)
    {

        if (!is_null($max_route_cache_size) && ($max_route_cache_size > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_route_cache_size when calling InlineObject316., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_route_cache_size) && ($max_route_cache_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_route_cache_size when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['max_route_cache_size'] = $max_route_cache_size;

        return $this;
    }

    /**
     * Gets ipsec_asic_offload
     *
     * @return string|null
     */
    public function getIpsecAsicOffload()
    {
        return $this->container['ipsec_asic_offload'];
    }

    /**
     * Sets ipsec_asic_offload
     *
     * @param string|null $ipsec_asic_offload Enable/disable ASIC offloading (hardware acceleration) for IPsec VPN traffic. Hardware acceleration can offload IPsec VPN sessions and accelerate encryption and decryption.    enable:Enable ASIC offload for IPsec VPN.    disable:Disable ASIC offload for IPsec VPN.
     *
     * @return self
     */
    public function setIpsecAsicOffload($ipsec_asic_offload)
    {
        $allowedValues = $this->getIpsecAsicOffloadAllowableValues();
        if (!is_null($ipsec_asic_offload) && !in_array($ipsec_asic_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_asic_offload', must be one of '%s'",
                    $ipsec_asic_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_asic_offload'] = $ipsec_asic_offload;

        return $this;
    }

    /**
     * Gets ipsec_soft_dec_async
     *
     * @return string|null
     */
    public function getIpsecSoftDecAsync()
    {
        return $this->container['ipsec_soft_dec_async'];
    }

    /**
     * Sets ipsec_soft_dec_async
     *
     * @param string|null $ipsec_soft_dec_async Enable/disable software decryption asynchronization (using multiple CPUs to do decryption) for IPsec VPN traffic.    enable:Enable software decryption asynchronization for IPsec VPN.    disable:Disable software decryption asynchronization for IPsec VPN.
     *
     * @return self
     */
    public function setIpsecSoftDecAsync($ipsec_soft_dec_async)
    {
        $allowedValues = $this->getIpsecSoftDecAsyncAllowableValues();
        if (!is_null($ipsec_soft_dec_async) && !in_array($ipsec_soft_dec_async, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipsec_soft_dec_async', must be one of '%s'",
                    $ipsec_soft_dec_async,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipsec_soft_dec_async'] = $ipsec_soft_dec_async;

        return $this;
    }

    /**
     * Gets device_idle_timeout
     *
     * @return int|null
     */
    public function getDeviceIdleTimeout()
    {
        return $this->container['device_idle_timeout'];
    }

    /**
     * Sets device_idle_timeout
     *
     * @param int|null $device_idle_timeout Time in seconds that a device must be idle to automatically log the device user out. (30 - 31536000 sec (30 sec to 1 year), default = 300).
     *
     * @return self
     */
    public function setDeviceIdleTimeout($device_idle_timeout)
    {

        if (!is_null($device_idle_timeout) && ($device_idle_timeout > 31536000)) {
            throw new \InvalidArgumentException('invalid value for $device_idle_timeout when calling InlineObject316., must be smaller than or equal to 31536000.');
        }
        if (!is_null($device_idle_timeout) && ($device_idle_timeout < 30)) {
            throw new \InvalidArgumentException('invalid value for $device_idle_timeout when calling InlineObject316., must be bigger than or equal to 30.');
        }

        $this->container['device_idle_timeout'] = $device_idle_timeout;

        return $this;
    }

    /**
     * Gets user_device_store_max_devices
     *
     * @return int|null
     */
    public function getUserDeviceStoreMaxDevices()
    {
        return $this->container['user_device_store_max_devices'];
    }

    /**
     * Sets user_device_store_max_devices
     *
     * @param int|null $user_device_store_max_devices Maximum number of devices allowed in user device store.
     *
     * @return self
     */
    public function setUserDeviceStoreMaxDevices($user_device_store_max_devices)
    {

        if (!is_null($user_device_store_max_devices) && ($user_device_store_max_devices > 5000)) {
            throw new \InvalidArgumentException('invalid value for $user_device_store_max_devices when calling InlineObject316., must be smaller than or equal to 5000.');
        }
        if (!is_null($user_device_store_max_devices) && ($user_device_store_max_devices < 1000)) {
            throw new \InvalidArgumentException('invalid value for $user_device_store_max_devices when calling InlineObject316., must be bigger than or equal to 1000.');
        }

        $this->container['user_device_store_max_devices'] = $user_device_store_max_devices;

        return $this;
    }

    /**
     * Gets user_device_store_max_users
     *
     * @return int|null
     */
    public function getUserDeviceStoreMaxUsers()
    {
        return $this->container['user_device_store_max_users'];
    }

    /**
     * Sets user_device_store_max_users
     *
     * @param int|null $user_device_store_max_users Maximum number of users allowed in user device store.
     *
     * @return self
     */
    public function setUserDeviceStoreMaxUsers($user_device_store_max_users)
    {

        if (!is_null($user_device_store_max_users) && ($user_device_store_max_users > 1000)) {
            throw new \InvalidArgumentException('invalid value for $user_device_store_max_users when calling InlineObject316., must be smaller than or equal to 1000.');
        }
        if (!is_null($user_device_store_max_users) && ($user_device_store_max_users < 1000)) {
            throw new \InvalidArgumentException('invalid value for $user_device_store_max_users when calling InlineObject316., must be bigger than or equal to 1000.');
        }

        $this->container['user_device_store_max_users'] = $user_device_store_max_users;

        return $this;
    }

    /**
     * Gets gui_device_latitude
     *
     * @return string|null
     */
    public function getGuiDeviceLatitude()
    {
        return $this->container['gui_device_latitude'];
    }

    /**
     * Sets gui_device_latitude
     *
     * @param string|null $gui_device_latitude Add the latitude of the location of this FortiGate to position it on the Threat Map.
     *
     * @return self
     */
    public function setGuiDeviceLatitude($gui_device_latitude)
    {
        if (!is_null($gui_device_latitude) && (mb_strlen($gui_device_latitude) > 19)) {
            throw new \InvalidArgumentException('invalid length for $gui_device_latitude when calling InlineObject316., must be smaller than or equal to 19.');
        }

        $this->container['gui_device_latitude'] = $gui_device_latitude;

        return $this;
    }

    /**
     * Gets gui_device_longitude
     *
     * @return string|null
     */
    public function getGuiDeviceLongitude()
    {
        return $this->container['gui_device_longitude'];
    }

    /**
     * Sets gui_device_longitude
     *
     * @param string|null $gui_device_longitude Add the longitude of the location of this FortiGate to position it on the Threat Map.
     *
     * @return self
     */
    public function setGuiDeviceLongitude($gui_device_longitude)
    {
        if (!is_null($gui_device_longitude) && (mb_strlen($gui_device_longitude) > 19)) {
            throw new \InvalidArgumentException('invalid length for $gui_device_longitude when calling InlineObject316., must be smaller than or equal to 19.');
        }

        $this->container['gui_device_longitude'] = $gui_device_longitude;

        return $this;
    }

    /**
     * Gets private_data_encryption
     *
     * @return string|null
     */
    public function getPrivateDataEncryption()
    {
        return $this->container['private_data_encryption'];
    }

    /**
     * Sets private_data_encryption
     *
     * @param string|null $private_data_encryption Enable/disable private data encryption using an AES 128-bit key.    disable:Disable private data encryption using an AES 128-bit key.    enable:Enable private data encryption using an AES 128-bit key.
     *
     * @return self
     */
    public function setPrivateDataEncryption($private_data_encryption)
    {
        $allowedValues = $this->getPrivateDataEncryptionAllowableValues();
        if (!is_null($private_data_encryption) && !in_array($private_data_encryption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'private_data_encryption', must be one of '%s'",
                    $private_data_encryption,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['private_data_encryption'] = $private_data_encryption;

        return $this;
    }

    /**
     * Gets auto_auth_extension_device
     *
     * @return string|null
     */
    public function getAutoAuthExtensionDevice()
    {
        return $this->container['auto_auth_extension_device'];
    }

    /**
     * Sets auto_auth_extension_device
     *
     * @param string|null $auto_auth_extension_device Enable/disable automatic authorization of dedicated Fortinet extension devices.    enable:Enable automatic authorization of dedicated Fortinet extension device globally.    disable:Disable automatic authorization of dedicated Fortinet extension device globally.
     *
     * @return self
     */
    public function setAutoAuthExtensionDevice($auto_auth_extension_device)
    {
        $allowedValues = $this->getAutoAuthExtensionDeviceAllowableValues();
        if (!is_null($auto_auth_extension_device) && !in_array($auto_auth_extension_device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_auth_extension_device', must be one of '%s'",
                    $auto_auth_extension_device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_auth_extension_device'] = $auto_auth_extension_device;

        return $this;
    }

    /**
     * Gets gui_theme
     *
     * @return string|null
     */
    public function getGuiTheme()
    {
        return $this->container['gui_theme'];
    }

    /**
     * Sets gui_theme
     *
     * @param string|null $gui_theme Color scheme for the administration GUI.    green:Green theme.    neutrino:Neutrino theme.    blue:Light blue theme.    melongene:Melongene theme (eggplant color).    mariner:Mariner theme (dark blue color).
     *
     * @return self
     */
    public function setGuiTheme($gui_theme)
    {
        $allowedValues = $this->getGuiThemeAllowableValues();
        if (!is_null($gui_theme) && !in_array($gui_theme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_theme', must be one of '%s'",
                    $gui_theme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_theme'] = $gui_theme;

        return $this;
    }

    /**
     * Gets gui_date_format
     *
     * @return string|null
     */
    public function getGuiDateFormat()
    {
        return $this->container['gui_date_format'];
    }

    /**
     * Sets gui_date_format
     *
     * @param string|null $gui_date_format Default date format used throughout GUI.    yyyy/MM/dd:Year/Month/Day.    dd/MM/yyyy:Day/Month/Year.    MM/dd/yyyy:Month/Day/Year.    yyyy-MM-dd:Year-Month-Day.    dd-MM-yyyy:Day-Month-Year.    MM-dd-yyyy:Month-Day-Year.
     *
     * @return self
     */
    public function setGuiDateFormat($gui_date_format)
    {
        $allowedValues = $this->getGuiDateFormatAllowableValues();
        if (!is_null($gui_date_format) && !in_array($gui_date_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_date_format', must be one of '%s'",
                    $gui_date_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_date_format'] = $gui_date_format;

        return $this;
    }

    /**
     * Gets gui_date_time_source
     *
     * @return string|null
     */
    public function getGuiDateTimeSource()
    {
        return $this->container['gui_date_time_source'];
    }

    /**
     * Sets gui_date_time_source
     *
     * @param string|null $gui_date_time_source Source from which the FortiGate GUI uses to display date and time entries.    system:Use this FortiGate unit's configured timezone.    browser:Use the web browser's timezone.
     *
     * @return self
     */
    public function setGuiDateTimeSource($gui_date_time_source)
    {
        $allowedValues = $this->getGuiDateTimeSourceAllowableValues();
        if (!is_null($gui_date_time_source) && !in_array($gui_date_time_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gui_date_time_source', must be one of '%s'",
                    $gui_date_time_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gui_date_time_source'] = $gui_date_time_source;

        return $this;
    }

    /**
     * Gets igmp_state_limit
     *
     * @return int|null
     */
    public function getIgmpStateLimit()
    {
        return $this->container['igmp_state_limit'];
    }

    /**
     * Sets igmp_state_limit
     *
     * @param int|null $igmp_state_limit Maximum number of IGMP memberships (96 - 64000, default = 3200).
     *
     * @return self
     */
    public function setIgmpStateLimit($igmp_state_limit)
    {

        if (!is_null($igmp_state_limit) && ($igmp_state_limit > 128000)) {
            throw new \InvalidArgumentException('invalid value for $igmp_state_limit when calling InlineObject316., must be smaller than or equal to 128000.');
        }
        if (!is_null($igmp_state_limit) && ($igmp_state_limit < 96)) {
            throw new \InvalidArgumentException('invalid value for $igmp_state_limit when calling InlineObject316., must be bigger than or equal to 96.');
        }

        $this->container['igmp_state_limit'] = $igmp_state_limit;

        return $this;
    }

    /**
     * Gets cloud_communication
     *
     * @return string|null
     */
    public function getCloudCommunication()
    {
        return $this->container['cloud_communication'];
    }

    /**
     * Sets cloud_communication
     *
     * @param string|null $cloud_communication Enable/disable all cloud communication.    enable:Allow cloud communication.    disable:Disable all cloud communication.
     *
     * @return self
     */
    public function setCloudCommunication($cloud_communication)
    {
        $allowedValues = $this->getCloudCommunicationAllowableValues();
        if (!is_null($cloud_communication) && !in_array($cloud_communication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cloud_communication', must be one of '%s'",
                    $cloud_communication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cloud_communication'] = $cloud_communication;

        return $this;
    }

    /**
     * Gets fec_port
     *
     * @return int|null
     */
    public function getFecPort()
    {
        return $this->container['fec_port'];
    }

    /**
     * Sets fec_port
     *
     * @param int|null $fec_port Local UDP port for Forward Error Correction (49152 - 65535).
     *
     * @return self
     */
    public function setFecPort($fec_port)
    {

        if (!is_null($fec_port) && ($fec_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fec_port when calling InlineObject316., must be smaller than or equal to 65535.');
        }
        if (!is_null($fec_port) && ($fec_port < 49152)) {
            throw new \InvalidArgumentException('invalid value for $fec_port when calling InlineObject316., must be bigger than or equal to 49152.');
        }

        $this->container['fec_port'] = $fec_port;

        return $this;
    }

    /**
     * Gets fortitoken_cloud
     *
     * @return string|null
     */
    public function getFortitokenCloud()
    {
        return $this->container['fortitoken_cloud'];
    }

    /**
     * Sets fortitoken_cloud
     *
     * @param string|null $fortitoken_cloud Enable/disable FortiToken Cloud service.    enable:Enable FortiToken Cloud service.    disable:Disable FortiToken Cloud service.
     *
     * @return self
     */
    public function setFortitokenCloud($fortitoken_cloud)
    {
        $allowedValues = $this->getFortitokenCloudAllowableValues();
        if (!is_null($fortitoken_cloud) && !in_array($fortitoken_cloud, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortitoken_cloud', must be one of '%s'",
                    $fortitoken_cloud,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortitoken_cloud'] = $fortitoken_cloud;

        return $this;
    }

    /**
     * Gets faz_disk_buffer_size
     *
     * @return int|null
     */
    public function getFazDiskBufferSize()
    {
        return $this->container['faz_disk_buffer_size'];
    }

    /**
     * Sets faz_disk_buffer_size
     *
     * @param int|null $faz_disk_buffer_size Maximum disk buffer size to temporarily store logs destined for FortiAnalyzer. To be used in the event that FortiAnalyzer is unavailalble.
     *
     * @return self
     */
    public function setFazDiskBufferSize($faz_disk_buffer_size)
    {

        if (!is_null($faz_disk_buffer_size) && ($faz_disk_buffer_size > 161061273)) {
            throw new \InvalidArgumentException('invalid value for $faz_disk_buffer_size when calling InlineObject316., must be smaller than or equal to 161061273.');
        }
        if (!is_null($faz_disk_buffer_size) && ($faz_disk_buffer_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $faz_disk_buffer_size when calling InlineObject316., must be bigger than or equal to 0.');
        }

        $this->container['faz_disk_buffer_size'] = $faz_disk_buffer_size;

        return $this;
    }

    /**
     * Gets irq_time_accounting
     *
     * @return string|null
     */
    public function getIrqTimeAccounting()
    {
        return $this->container['irq_time_accounting'];
    }

    /**
     * Sets irq_time_accounting
     *
     * @param string|null $irq_time_accounting Configure CPU IRQ time accounting mode.    auto:Automatically switch CPU accounting mode.    force:Force the use of CPU IRQ time accounting mode.
     *
     * @return self
     */
    public function setIrqTimeAccounting($irq_time_accounting)
    {
        $allowedValues = $this->getIrqTimeAccountingAllowableValues();
        if (!is_null($irq_time_accounting) && !in_array($irq_time_accounting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'irq_time_accounting', must be one of '%s'",
                    $irq_time_accounting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['irq_time_accounting'] = $irq_time_accounting;

        return $this;
    }

    /**
     * Gets fortiipam_integration
     *
     * @return string|null
     */
    public function getFortiipamIntegration()
    {
        return $this->container['fortiipam_integration'];
    }

    /**
     * Sets fortiipam_integration
     *
     * @param string|null $fortiipam_integration Enable/disable integration with the FortiIPAM cloud service.    enable:Enable integration with FortiIPAM for automatic IP address management.    disable:Disable integration with FortiIPAM for automatic IP address management.
     *
     * @return self
     */
    public function setFortiipamIntegration($fortiipam_integration)
    {
        $allowedValues = $this->getFortiipamIntegrationAllowableValues();
        if (!is_null($fortiipam_integration) && !in_array($fortiipam_integration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiipam_integration', must be one of '%s'",
                    $fortiipam_integration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiipam_integration'] = $fortiipam_integration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


