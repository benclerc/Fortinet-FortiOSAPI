<?php
/**
 * InlineObject568
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject568 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject568 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_568';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'friendly_name' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameFriendlyName[]',
        'server_uri' => 'string',
        'osu_method' => 'string',
        'osu_nai' => 'string',
        'service_description' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameServiceDescription[]',
        'icon' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'friendly_name' => null,
        'server_uri' => null,
        'osu_method' => null,
        'osu_nai' => null,
        'service_description' => null,
        'icon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'friendly_name' => 'friendly-name',
        'server_uri' => 'server-uri',
        'osu_method' => 'osu-method',
        'osu_nai' => 'osu-nai',
        'service_description' => 'service-description',
        'icon' => 'icon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'friendly_name' => 'setFriendlyName',
        'server_uri' => 'setServerUri',
        'osu_method' => 'setOsuMethod',
        'osu_nai' => 'setOsuNai',
        'service_description' => 'setServiceDescription',
        'icon' => 'setIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'friendly_name' => 'getFriendlyName',
        'server_uri' => 'getServerUri',
        'osu_method' => 'getOsuMethod',
        'osu_nai' => 'getOsuNai',
        'service_description' => 'getServiceDescription',
        'icon' => 'getIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OSU_METHOD_OMA_DM = 'oma-dm';
    const OSU_METHOD_SOAP_XML_SPP = 'soap-xml-spp';
    const OSU_METHOD_RESERVED = 'reserved';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsuMethodAllowableValues()
    {
        return [
            self::OSU_METHOD_OMA_DM,
            self::OSU_METHOD_SOAP_XML_SPP,
            self::OSU_METHOD_RESERVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['friendly_name'] = $data['friendly_name'] ?? null;
        $this->container['server_uri'] = $data['server_uri'] ?? null;
        $this->container['osu_method'] = $data['osu_method'] ?? null;
        $this->container['osu_nai'] = $data['osu_nai'] ?? null;
        $this->container['service_description'] = $data['service_description'] ?? null;
        $this->container['icon'] = $data['icon'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['friendly_name']) && (count($this->container['friendly_name']) > 0)) {
            $invalidProperties[] = "invalid value for 'friendly_name', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['server_uri']) && (mb_strlen($this->container['server_uri']) > 255)) {
            $invalidProperties[] = "invalid value for 'server_uri', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getOsuMethodAllowableValues();
        if (!is_null($this->container['osu_method']) && !in_array($this->container['osu_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'osu_method', must be one of '%s'",
                $this->container['osu_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['osu_nai']) && (mb_strlen($this->container['osu_nai']) > 255)) {
            $invalidProperties[] = "invalid value for 'osu_nai', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['service_description']) && (count($this->container['service_description']) > 0)) {
            $invalidProperties[] = "invalid value for 'service_description', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['icon']) && (mb_strlen($this->container['icon']) > 35)) {
            $invalidProperties[] = "invalid value for 'icon', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name OSU provider ID.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject568., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameFriendlyName[]|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameFriendlyName[]|null $friendly_name OSU provider friendly name.
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {

        if (!is_null($friendly_name) && (count($friendly_name) > 0)) {
            throw new \InvalidArgumentException('invalid value for $friendly_name when calling InlineObject568., number of items must be less than or equal to 0.');
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets server_uri
     *
     * @return string|null
     */
    public function getServerUri()
    {
        return $this->container['server_uri'];
    }

    /**
     * Sets server_uri
     *
     * @param string|null $server_uri Server URI.
     *
     * @return self
     */
    public function setServerUri($server_uri)
    {
        if (!is_null($server_uri) && (mb_strlen($server_uri) > 255)) {
            throw new \InvalidArgumentException('invalid length for $server_uri when calling InlineObject568., must be smaller than or equal to 255.');
        }

        $this->container['server_uri'] = $server_uri;

        return $this;
    }

    /**
     * Gets osu_method
     *
     * @return string|null
     */
    public function getOsuMethod()
    {
        return $this->container['osu_method'];
    }

    /**
     * Sets osu_method
     *
     * @param string|null $osu_method OSU method list.    oma-dm:OMA DM.    soap-xml-spp:SOAP XML SPP.    reserved:Reserved.
     *
     * @return self
     */
    public function setOsuMethod($osu_method)
    {
        $allowedValues = $this->getOsuMethodAllowableValues();
        if (!is_null($osu_method) && !in_array($osu_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'osu_method', must be one of '%s'",
                    $osu_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['osu_method'] = $osu_method;

        return $this;
    }

    /**
     * Gets osu_nai
     *
     * @return string|null
     */
    public function getOsuNai()
    {
        return $this->container['osu_nai'];
    }

    /**
     * Sets osu_nai
     *
     * @param string|null $osu_nai OSU NAI.
     *
     * @return self
     */
    public function setOsuNai($osu_nai)
    {
        if (!is_null($osu_nai) && (mb_strlen($osu_nai) > 255)) {
            throw new \InvalidArgumentException('invalid length for $osu_nai when calling InlineObject568., must be smaller than or equal to 255.');
        }

        $this->container['osu_nai'] = $osu_nai;

        return $this;
    }

    /**
     * Gets service_description
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameServiceDescription[]|null
     */
    public function getServiceDescription()
    {
        return $this->container['service_description'];
    }

    /**
     * Sets service_description
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerHotspot20H2qpOsuProviderNameServiceDescription[]|null $service_description OSU service name.
     *
     * @return self
     */
    public function setServiceDescription($service_description)
    {

        if (!is_null($service_description) && (count($service_description) > 0)) {
            throw new \InvalidArgumentException('invalid value for $service_description when calling InlineObject568., number of items must be less than or equal to 0.');
        }
        $this->container['service_description'] = $service_description;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon OSU provider icon.
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (!is_null($icon) && (mb_strlen($icon) > 35)) {
            throw new \InvalidArgumentException('invalid length for $icon when calling InlineObject568., must be smaller than or equal to 35.');
        }

        $this->container['icon'] = $icon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


