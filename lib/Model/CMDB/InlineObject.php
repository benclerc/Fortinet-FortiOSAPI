<?php
/**
 * InlineObject
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'mailto1' => 'string',
        'mailto2' => 'string',
        'mailto3' => 'string',
        'filter_mode' => 'string',
        'email_interval' => 'int',
        'ips_logs' => 'string',
        'firewall_authentication_failure_logs' => 'string',
        'ha_logs' => 'string',
        'i_psec_errors_logs' => 'string',
        'fds_update_logs' => 'string',
        'ppp_errors_logs' => 'string',
        'sslvpn_authentication_errors_logs' => 'string',
        'antivirus_logs' => 'string',
        'webfilter_logs' => 'string',
        'configuration_changes_logs' => 'string',
        'violation_traffic_logs' => 'string',
        'admin_login_logs' => 'string',
        'fds_license_expiring_warning' => 'string',
        'log_disk_usage_warning' => 'string',
        'fortiguard_log_quota_warning' => 'string',
        'amc_interface_bypass_mode' => 'string',
        'fips_cc_errors' => 'string',
        'fsso_disconnect_logs' => 'string',
        'ssh_logs' => 'string',
        'fds_license_expiring_days' => 'int',
        'local_disk_usage' => 'int',
        'emergency_interval' => 'int',
        'alert_interval' => 'int',
        'critical_interval' => 'int',
        'error_interval' => 'int',
        'warning_interval' => 'int',
        'notification_interval' => 'int',
        'information_interval' => 'int',
        'debug_interval' => 'int',
        'severity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'mailto1' => null,
        'mailto2' => null,
        'mailto3' => null,
        'filter_mode' => null,
        'email_interval' => null,
        'ips_logs' => null,
        'firewall_authentication_failure_logs' => null,
        'ha_logs' => null,
        'i_psec_errors_logs' => null,
        'fds_update_logs' => null,
        'ppp_errors_logs' => null,
        'sslvpn_authentication_errors_logs' => null,
        'antivirus_logs' => null,
        'webfilter_logs' => null,
        'configuration_changes_logs' => null,
        'violation_traffic_logs' => null,
        'admin_login_logs' => null,
        'fds_license_expiring_warning' => null,
        'log_disk_usage_warning' => null,
        'fortiguard_log_quota_warning' => null,
        'amc_interface_bypass_mode' => null,
        'fips_cc_errors' => null,
        'fsso_disconnect_logs' => null,
        'ssh_logs' => null,
        'fds_license_expiring_days' => null,
        'local_disk_usage' => null,
        'emergency_interval' => null,
        'alert_interval' => null,
        'critical_interval' => null,
        'error_interval' => null,
        'warning_interval' => null,
        'notification_interval' => null,
        'information_interval' => null,
        'debug_interval' => null,
        'severity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'mailto1' => 'mailto1',
        'mailto2' => 'mailto2',
        'mailto3' => 'mailto3',
        'filter_mode' => 'filter-mode',
        'email_interval' => 'email-interval',
        'ips_logs' => 'IPS-logs',
        'firewall_authentication_failure_logs' => 'firewall-authentication-failure-logs',
        'ha_logs' => 'HA-logs',
        'i_psec_errors_logs' => 'IPsec-errors-logs',
        'fds_update_logs' => 'FDS-update-logs',
        'ppp_errors_logs' => 'PPP-errors-logs',
        'sslvpn_authentication_errors_logs' => 'sslvpn-authentication-errors-logs',
        'antivirus_logs' => 'antivirus-logs',
        'webfilter_logs' => 'webfilter-logs',
        'configuration_changes_logs' => 'configuration-changes-logs',
        'violation_traffic_logs' => 'violation-traffic-logs',
        'admin_login_logs' => 'admin-login-logs',
        'fds_license_expiring_warning' => 'FDS-license-expiring-warning',
        'log_disk_usage_warning' => 'log-disk-usage-warning',
        'fortiguard_log_quota_warning' => 'fortiguard-log-quota-warning',
        'amc_interface_bypass_mode' => 'amc-interface-bypass-mode',
        'fips_cc_errors' => 'FIPS-CC-errors',
        'fsso_disconnect_logs' => 'FSSO-disconnect-logs',
        'ssh_logs' => 'ssh-logs',
        'fds_license_expiring_days' => 'FDS-license-expiring-days',
        'local_disk_usage' => 'local-disk-usage',
        'emergency_interval' => 'emergency-interval',
        'alert_interval' => 'alert-interval',
        'critical_interval' => 'critical-interval',
        'error_interval' => 'error-interval',
        'warning_interval' => 'warning-interval',
        'notification_interval' => 'notification-interval',
        'information_interval' => 'information-interval',
        'debug_interval' => 'debug-interval',
        'severity' => 'severity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'mailto1' => 'setMailto1',
        'mailto2' => 'setMailto2',
        'mailto3' => 'setMailto3',
        'filter_mode' => 'setFilterMode',
        'email_interval' => 'setEmailInterval',
        'ips_logs' => 'setIpsLogs',
        'firewall_authentication_failure_logs' => 'setFirewallAuthenticationFailureLogs',
        'ha_logs' => 'setHaLogs',
        'i_psec_errors_logs' => 'setIPsecErrorsLogs',
        'fds_update_logs' => 'setFdsUpdateLogs',
        'ppp_errors_logs' => 'setPppErrorsLogs',
        'sslvpn_authentication_errors_logs' => 'setSslvpnAuthenticationErrorsLogs',
        'antivirus_logs' => 'setAntivirusLogs',
        'webfilter_logs' => 'setWebfilterLogs',
        'configuration_changes_logs' => 'setConfigurationChangesLogs',
        'violation_traffic_logs' => 'setViolationTrafficLogs',
        'admin_login_logs' => 'setAdminLoginLogs',
        'fds_license_expiring_warning' => 'setFdsLicenseExpiringWarning',
        'log_disk_usage_warning' => 'setLogDiskUsageWarning',
        'fortiguard_log_quota_warning' => 'setFortiguardLogQuotaWarning',
        'amc_interface_bypass_mode' => 'setAmcInterfaceBypassMode',
        'fips_cc_errors' => 'setFipsCcErrors',
        'fsso_disconnect_logs' => 'setFssoDisconnectLogs',
        'ssh_logs' => 'setSshLogs',
        'fds_license_expiring_days' => 'setFdsLicenseExpiringDays',
        'local_disk_usage' => 'setLocalDiskUsage',
        'emergency_interval' => 'setEmergencyInterval',
        'alert_interval' => 'setAlertInterval',
        'critical_interval' => 'setCriticalInterval',
        'error_interval' => 'setErrorInterval',
        'warning_interval' => 'setWarningInterval',
        'notification_interval' => 'setNotificationInterval',
        'information_interval' => 'setInformationInterval',
        'debug_interval' => 'setDebugInterval',
        'severity' => 'setSeverity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'mailto1' => 'getMailto1',
        'mailto2' => 'getMailto2',
        'mailto3' => 'getMailto3',
        'filter_mode' => 'getFilterMode',
        'email_interval' => 'getEmailInterval',
        'ips_logs' => 'getIpsLogs',
        'firewall_authentication_failure_logs' => 'getFirewallAuthenticationFailureLogs',
        'ha_logs' => 'getHaLogs',
        'i_psec_errors_logs' => 'getIPsecErrorsLogs',
        'fds_update_logs' => 'getFdsUpdateLogs',
        'ppp_errors_logs' => 'getPppErrorsLogs',
        'sslvpn_authentication_errors_logs' => 'getSslvpnAuthenticationErrorsLogs',
        'antivirus_logs' => 'getAntivirusLogs',
        'webfilter_logs' => 'getWebfilterLogs',
        'configuration_changes_logs' => 'getConfigurationChangesLogs',
        'violation_traffic_logs' => 'getViolationTrafficLogs',
        'admin_login_logs' => 'getAdminLoginLogs',
        'fds_license_expiring_warning' => 'getFdsLicenseExpiringWarning',
        'log_disk_usage_warning' => 'getLogDiskUsageWarning',
        'fortiguard_log_quota_warning' => 'getFortiguardLogQuotaWarning',
        'amc_interface_bypass_mode' => 'getAmcInterfaceBypassMode',
        'fips_cc_errors' => 'getFipsCcErrors',
        'fsso_disconnect_logs' => 'getFssoDisconnectLogs',
        'ssh_logs' => 'getSshLogs',
        'fds_license_expiring_days' => 'getFdsLicenseExpiringDays',
        'local_disk_usage' => 'getLocalDiskUsage',
        'emergency_interval' => 'getEmergencyInterval',
        'alert_interval' => 'getAlertInterval',
        'critical_interval' => 'getCriticalInterval',
        'error_interval' => 'getErrorInterval',
        'warning_interval' => 'getWarningInterval',
        'notification_interval' => 'getNotificationInterval',
        'information_interval' => 'getInformationInterval',
        'debug_interval' => 'getDebugInterval',
        'severity' => 'getSeverity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FILTER_MODE_CATEGORY = 'category';
    const FILTER_MODE_THRESHOLD = 'threshold';
    const IPS_LOGS_ENABLE = 'enable';
    const IPS_LOGS_DISABLE = 'disable';
    const FIREWALL_AUTHENTICATION_FAILURE_LOGS_ENABLE = 'enable';
    const FIREWALL_AUTHENTICATION_FAILURE_LOGS_DISABLE = 'disable';
    const HA_LOGS_ENABLE = 'enable';
    const HA_LOGS_DISABLE = 'disable';
    const I_PSEC_ERRORS_LOGS_ENABLE = 'enable';
    const I_PSEC_ERRORS_LOGS_DISABLE = 'disable';
    const FDS_UPDATE_LOGS_ENABLE = 'enable';
    const FDS_UPDATE_LOGS_DISABLE = 'disable';
    const PPP_ERRORS_LOGS_ENABLE = 'enable';
    const PPP_ERRORS_LOGS_DISABLE = 'disable';
    const SSLVPN_AUTHENTICATION_ERRORS_LOGS_ENABLE = 'enable';
    const SSLVPN_AUTHENTICATION_ERRORS_LOGS_DISABLE = 'disable';
    const ANTIVIRUS_LOGS_ENABLE = 'enable';
    const ANTIVIRUS_LOGS_DISABLE = 'disable';
    const WEBFILTER_LOGS_ENABLE = 'enable';
    const WEBFILTER_LOGS_DISABLE = 'disable';
    const CONFIGURATION_CHANGES_LOGS_ENABLE = 'enable';
    const CONFIGURATION_CHANGES_LOGS_DISABLE = 'disable';
    const VIOLATION_TRAFFIC_LOGS_ENABLE = 'enable';
    const VIOLATION_TRAFFIC_LOGS_DISABLE = 'disable';
    const ADMIN_LOGIN_LOGS_ENABLE = 'enable';
    const ADMIN_LOGIN_LOGS_DISABLE = 'disable';
    const FDS_LICENSE_EXPIRING_WARNING_ENABLE = 'enable';
    const FDS_LICENSE_EXPIRING_WARNING_DISABLE = 'disable';
    const LOG_DISK_USAGE_WARNING_ENABLE = 'enable';
    const LOG_DISK_USAGE_WARNING_DISABLE = 'disable';
    const FORTIGUARD_LOG_QUOTA_WARNING_ENABLE = 'enable';
    const FORTIGUARD_LOG_QUOTA_WARNING_DISABLE = 'disable';
    const AMC_INTERFACE_BYPASS_MODE_ENABLE = 'enable';
    const AMC_INTERFACE_BYPASS_MODE_DISABLE = 'disable';
    const FIPS_CC_ERRORS_ENABLE = 'enable';
    const FIPS_CC_ERRORS_DISABLE = 'disable';
    const FSSO_DISCONNECT_LOGS_ENABLE = 'enable';
    const FSSO_DISCONNECT_LOGS_DISABLE = 'disable';
    const SSH_LOGS_ENABLE = 'enable';
    const SSH_LOGS_DISABLE = 'disable';
    const SEVERITY_EMERGENCY = 'emergency';
    const SEVERITY_ALERT = 'alert';
    const SEVERITY_CRITICAL = 'critical';
    const SEVERITY_ERROR = 'error';
    const SEVERITY_WARNING = 'warning';
    const SEVERITY_NOTIFICATION = 'notification';
    const SEVERITY_INFORMATION = 'information';
    const SEVERITY_DEBUG = 'debug';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterModeAllowableValues()
    {
        return [
            self::FILTER_MODE_CATEGORY,
            self::FILTER_MODE_THRESHOLD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpsLogsAllowableValues()
    {
        return [
            self::IPS_LOGS_ENABLE,
            self::IPS_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFirewallAuthenticationFailureLogsAllowableValues()
    {
        return [
            self::FIREWALL_AUTHENTICATION_FAILURE_LOGS_ENABLE,
            self::FIREWALL_AUTHENTICATION_FAILURE_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaLogsAllowableValues()
    {
        return [
            self::HA_LOGS_ENABLE,
            self::HA_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIPsecErrorsLogsAllowableValues()
    {
        return [
            self::I_PSEC_ERRORS_LOGS_ENABLE,
            self::I_PSEC_ERRORS_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFdsUpdateLogsAllowableValues()
    {
        return [
            self::FDS_UPDATE_LOGS_ENABLE,
            self::FDS_UPDATE_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPppErrorsLogsAllowableValues()
    {
        return [
            self::PPP_ERRORS_LOGS_ENABLE,
            self::PPP_ERRORS_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslvpnAuthenticationErrorsLogsAllowableValues()
    {
        return [
            self::SSLVPN_AUTHENTICATION_ERRORS_LOGS_ENABLE,
            self::SSLVPN_AUTHENTICATION_ERRORS_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAntivirusLogsAllowableValues()
    {
        return [
            self::ANTIVIRUS_LOGS_ENABLE,
            self::ANTIVIRUS_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebfilterLogsAllowableValues()
    {
        return [
            self::WEBFILTER_LOGS_ENABLE,
            self::WEBFILTER_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConfigurationChangesLogsAllowableValues()
    {
        return [
            self::CONFIGURATION_CHANGES_LOGS_ENABLE,
            self::CONFIGURATION_CHANGES_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViolationTrafficLogsAllowableValues()
    {
        return [
            self::VIOLATION_TRAFFIC_LOGS_ENABLE,
            self::VIOLATION_TRAFFIC_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminLoginLogsAllowableValues()
    {
        return [
            self::ADMIN_LOGIN_LOGS_ENABLE,
            self::ADMIN_LOGIN_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFdsLicenseExpiringWarningAllowableValues()
    {
        return [
            self::FDS_LICENSE_EXPIRING_WARNING_ENABLE,
            self::FDS_LICENSE_EXPIRING_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogDiskUsageWarningAllowableValues()
    {
        return [
            self::LOG_DISK_USAGE_WARNING_ENABLE,
            self::LOG_DISK_USAGE_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiguardLogQuotaWarningAllowableValues()
    {
        return [
            self::FORTIGUARD_LOG_QUOTA_WARNING_ENABLE,
            self::FORTIGUARD_LOG_QUOTA_WARNING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmcInterfaceBypassModeAllowableValues()
    {
        return [
            self::AMC_INTERFACE_BYPASS_MODE_ENABLE,
            self::AMC_INTERFACE_BYPASS_MODE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFipsCcErrorsAllowableValues()
    {
        return [
            self::FIPS_CC_ERRORS_ENABLE,
            self::FIPS_CC_ERRORS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFssoDisconnectLogsAllowableValues()
    {
        return [
            self::FSSO_DISCONNECT_LOGS_ENABLE,
            self::FSSO_DISCONNECT_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSshLogsAllowableValues()
    {
        return [
            self::SSH_LOGS_ENABLE,
            self::SSH_LOGS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_EMERGENCY,
            self::SEVERITY_ALERT,
            self::SEVERITY_CRITICAL,
            self::SEVERITY_ERROR,
            self::SEVERITY_WARNING,
            self::SEVERITY_NOTIFICATION,
            self::SEVERITY_INFORMATION,
            self::SEVERITY_DEBUG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = $data['username'] ?? null;
        $this->container['mailto1'] = $data['mailto1'] ?? null;
        $this->container['mailto2'] = $data['mailto2'] ?? null;
        $this->container['mailto3'] = $data['mailto3'] ?? null;
        $this->container['filter_mode'] = $data['filter_mode'] ?? null;
        $this->container['email_interval'] = $data['email_interval'] ?? null;
        $this->container['ips_logs'] = $data['ips_logs'] ?? null;
        $this->container['firewall_authentication_failure_logs'] = $data['firewall_authentication_failure_logs'] ?? null;
        $this->container['ha_logs'] = $data['ha_logs'] ?? null;
        $this->container['i_psec_errors_logs'] = $data['i_psec_errors_logs'] ?? null;
        $this->container['fds_update_logs'] = $data['fds_update_logs'] ?? null;
        $this->container['ppp_errors_logs'] = $data['ppp_errors_logs'] ?? null;
        $this->container['sslvpn_authentication_errors_logs'] = $data['sslvpn_authentication_errors_logs'] ?? null;
        $this->container['antivirus_logs'] = $data['antivirus_logs'] ?? null;
        $this->container['webfilter_logs'] = $data['webfilter_logs'] ?? null;
        $this->container['configuration_changes_logs'] = $data['configuration_changes_logs'] ?? null;
        $this->container['violation_traffic_logs'] = $data['violation_traffic_logs'] ?? null;
        $this->container['admin_login_logs'] = $data['admin_login_logs'] ?? null;
        $this->container['fds_license_expiring_warning'] = $data['fds_license_expiring_warning'] ?? null;
        $this->container['log_disk_usage_warning'] = $data['log_disk_usage_warning'] ?? null;
        $this->container['fortiguard_log_quota_warning'] = $data['fortiguard_log_quota_warning'] ?? null;
        $this->container['amc_interface_bypass_mode'] = $data['amc_interface_bypass_mode'] ?? null;
        $this->container['fips_cc_errors'] = $data['fips_cc_errors'] ?? null;
        $this->container['fsso_disconnect_logs'] = $data['fsso_disconnect_logs'] ?? null;
        $this->container['ssh_logs'] = $data['ssh_logs'] ?? null;
        $this->container['fds_license_expiring_days'] = $data['fds_license_expiring_days'] ?? null;
        $this->container['local_disk_usage'] = $data['local_disk_usage'] ?? null;
        $this->container['emergency_interval'] = $data['emergency_interval'] ?? null;
        $this->container['alert_interval'] = $data['alert_interval'] ?? null;
        $this->container['critical_interval'] = $data['critical_interval'] ?? null;
        $this->container['error_interval'] = $data['error_interval'] ?? null;
        $this->container['warning_interval'] = $data['warning_interval'] ?? null;
        $this->container['notification_interval'] = $data['notification_interval'] ?? null;
        $this->container['information_interval'] = $data['information_interval'] ?? null;
        $this->container['debug_interval'] = $data['debug_interval'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 63)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['mailto1']) && (mb_strlen($this->container['mailto1']) > 63)) {
            $invalidProperties[] = "invalid value for 'mailto1', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['mailto2']) && (mb_strlen($this->container['mailto2']) > 63)) {
            $invalidProperties[] = "invalid value for 'mailto2', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['mailto3']) && (mb_strlen($this->container['mailto3']) > 63)) {
            $invalidProperties[] = "invalid value for 'mailto3', the character length must be smaller than or equal to 63.";
        }

        $allowedValues = $this->getFilterModeAllowableValues();
        if (!is_null($this->container['filter_mode']) && !in_array($this->container['filter_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filter_mode', must be one of '%s'",
                $this->container['filter_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email_interval']) && ($this->container['email_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'email_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['email_interval']) && ($this->container['email_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'email_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIpsLogsAllowableValues();
        if (!is_null($this->container['ips_logs']) && !in_array($this->container['ips_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ips_logs', must be one of '%s'",
                $this->container['ips_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFirewallAuthenticationFailureLogsAllowableValues();
        if (!is_null($this->container['firewall_authentication_failure_logs']) && !in_array($this->container['firewall_authentication_failure_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'firewall_authentication_failure_logs', must be one of '%s'",
                $this->container['firewall_authentication_failure_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHaLogsAllowableValues();
        if (!is_null($this->container['ha_logs']) && !in_array($this->container['ha_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ha_logs', must be one of '%s'",
                $this->container['ha_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIPsecErrorsLogsAllowableValues();
        if (!is_null($this->container['i_psec_errors_logs']) && !in_array($this->container['i_psec_errors_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'i_psec_errors_logs', must be one of '%s'",
                $this->container['i_psec_errors_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFdsUpdateLogsAllowableValues();
        if (!is_null($this->container['fds_update_logs']) && !in_array($this->container['fds_update_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fds_update_logs', must be one of '%s'",
                $this->container['fds_update_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPppErrorsLogsAllowableValues();
        if (!is_null($this->container['ppp_errors_logs']) && !in_array($this->container['ppp_errors_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ppp_errors_logs', must be one of '%s'",
                $this->container['ppp_errors_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslvpnAuthenticationErrorsLogsAllowableValues();
        if (!is_null($this->container['sslvpn_authentication_errors_logs']) && !in_array($this->container['sslvpn_authentication_errors_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslvpn_authentication_errors_logs', must be one of '%s'",
                $this->container['sslvpn_authentication_errors_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAntivirusLogsAllowableValues();
        if (!is_null($this->container['antivirus_logs']) && !in_array($this->container['antivirus_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'antivirus_logs', must be one of '%s'",
                $this->container['antivirus_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebfilterLogsAllowableValues();
        if (!is_null($this->container['webfilter_logs']) && !in_array($this->container['webfilter_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'webfilter_logs', must be one of '%s'",
                $this->container['webfilter_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConfigurationChangesLogsAllowableValues();
        if (!is_null($this->container['configuration_changes_logs']) && !in_array($this->container['configuration_changes_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'configuration_changes_logs', must be one of '%s'",
                $this->container['configuration_changes_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViolationTrafficLogsAllowableValues();
        if (!is_null($this->container['violation_traffic_logs']) && !in_array($this->container['violation_traffic_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'violation_traffic_logs', must be one of '%s'",
                $this->container['violation_traffic_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdminLoginLogsAllowableValues();
        if (!is_null($this->container['admin_login_logs']) && !in_array($this->container['admin_login_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'admin_login_logs', must be one of '%s'",
                $this->container['admin_login_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFdsLicenseExpiringWarningAllowableValues();
        if (!is_null($this->container['fds_license_expiring_warning']) && !in_array($this->container['fds_license_expiring_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fds_license_expiring_warning', must be one of '%s'",
                $this->container['fds_license_expiring_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogDiskUsageWarningAllowableValues();
        if (!is_null($this->container['log_disk_usage_warning']) && !in_array($this->container['log_disk_usage_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_disk_usage_warning', must be one of '%s'",
                $this->container['log_disk_usage_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiguardLogQuotaWarningAllowableValues();
        if (!is_null($this->container['fortiguard_log_quota_warning']) && !in_array($this->container['fortiguard_log_quota_warning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiguard_log_quota_warning', must be one of '%s'",
                $this->container['fortiguard_log_quota_warning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAmcInterfaceBypassModeAllowableValues();
        if (!is_null($this->container['amc_interface_bypass_mode']) && !in_array($this->container['amc_interface_bypass_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'amc_interface_bypass_mode', must be one of '%s'",
                $this->container['amc_interface_bypass_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFipsCcErrorsAllowableValues();
        if (!is_null($this->container['fips_cc_errors']) && !in_array($this->container['fips_cc_errors'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fips_cc_errors', must be one of '%s'",
                $this->container['fips_cc_errors'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFssoDisconnectLogsAllowableValues();
        if (!is_null($this->container['fsso_disconnect_logs']) && !in_array($this->container['fsso_disconnect_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fsso_disconnect_logs', must be one of '%s'",
                $this->container['fsso_disconnect_logs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSshLogsAllowableValues();
        if (!is_null($this->container['ssh_logs']) && !in_array($this->container['ssh_logs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssh_logs', must be one of '%s'",
                $this->container['ssh_logs'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fds_license_expiring_days']) && ($this->container['fds_license_expiring_days'] > 100)) {
            $invalidProperties[] = "invalid value for 'fds_license_expiring_days', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fds_license_expiring_days']) && ($this->container['fds_license_expiring_days'] < 1)) {
            $invalidProperties[] = "invalid value for 'fds_license_expiring_days', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_disk_usage']) && ($this->container['local_disk_usage'] > 99)) {
            $invalidProperties[] = "invalid value for 'local_disk_usage', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['local_disk_usage']) && ($this->container['local_disk_usage'] < 1)) {
            $invalidProperties[] = "invalid value for 'local_disk_usage', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emergency_interval']) && ($this->container['emergency_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'emergency_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['emergency_interval']) && ($this->container['emergency_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'emergency_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['alert_interval']) && ($this->container['alert_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'alert_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['alert_interval']) && ($this->container['alert_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'alert_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['critical_interval']) && ($this->container['critical_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'critical_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['critical_interval']) && ($this->container['critical_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'critical_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['error_interval']) && ($this->container['error_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'error_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['error_interval']) && ($this->container['error_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'error_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['warning_interval']) && ($this->container['warning_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'warning_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['warning_interval']) && ($this->container['warning_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'warning_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['notification_interval']) && ($this->container['notification_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'notification_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['notification_interval']) && ($this->container['notification_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'notification_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['information_interval']) && ($this->container['information_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'information_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['information_interval']) && ($this->container['information_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'information_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['debug_interval']) && ($this->container['debug_interval'] > 99999)) {
            $invalidProperties[] = "invalid value for 'debug_interval', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['debug_interval']) && ($this->container['debug_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'debug_interval', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'severity', must be one of '%s'",
                $this->container['severity'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Name that appears in the From: field of alert emails (max. 63 characters).
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 63)) {
            throw new \InvalidArgumentException('invalid length for $username when calling InlineObject., must be smaller than or equal to 63.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets mailto1
     *
     * @return string|null
     */
    public function getMailto1()
    {
        return $this->container['mailto1'];
    }

    /**
     * Sets mailto1
     *
     * @param string|null $mailto1 Email address to send alert email to (usually a system administrator) (max. 63 characters).
     *
     * @return self
     */
    public function setMailto1($mailto1)
    {
        if (!is_null($mailto1) && (mb_strlen($mailto1) > 63)) {
            throw new \InvalidArgumentException('invalid length for $mailto1 when calling InlineObject., must be smaller than or equal to 63.');
        }

        $this->container['mailto1'] = $mailto1;

        return $this;
    }

    /**
     * Gets mailto2
     *
     * @return string|null
     */
    public function getMailto2()
    {
        return $this->container['mailto2'];
    }

    /**
     * Sets mailto2
     *
     * @param string|null $mailto2 Optional second email address to send alert email to (max. 63 characters).
     *
     * @return self
     */
    public function setMailto2($mailto2)
    {
        if (!is_null($mailto2) && (mb_strlen($mailto2) > 63)) {
            throw new \InvalidArgumentException('invalid length for $mailto2 when calling InlineObject., must be smaller than or equal to 63.');
        }

        $this->container['mailto2'] = $mailto2;

        return $this;
    }

    /**
     * Gets mailto3
     *
     * @return string|null
     */
    public function getMailto3()
    {
        return $this->container['mailto3'];
    }

    /**
     * Sets mailto3
     *
     * @param string|null $mailto3 Optional third email address to send alert email to (max. 63 characters).
     *
     * @return self
     */
    public function setMailto3($mailto3)
    {
        if (!is_null($mailto3) && (mb_strlen($mailto3) > 63)) {
            throw new \InvalidArgumentException('invalid length for $mailto3 when calling InlineObject., must be smaller than or equal to 63.');
        }

        $this->container['mailto3'] = $mailto3;

        return $this;
    }

    /**
     * Gets filter_mode
     *
     * @return string|null
     */
    public function getFilterMode()
    {
        return $this->container['filter_mode'];
    }

    /**
     * Sets filter_mode
     *
     * @param string|null $filter_mode How to filter log messages that are sent to alert emails.    category:Filter based on category.    threshold:Filter based on severity.
     *
     * @return self
     */
    public function setFilterMode($filter_mode)
    {
        $allowedValues = $this->getFilterModeAllowableValues();
        if (!is_null($filter_mode) && !in_array($filter_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filter_mode', must be one of '%s'",
                    $filter_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_mode'] = $filter_mode;

        return $this;
    }

    /**
     * Gets email_interval
     *
     * @return int|null
     */
    public function getEmailInterval()
    {
        return $this->container['email_interval'];
    }

    /**
     * Sets email_interval
     *
     * @param int|null $email_interval Interval between sending alert emails (1 - 99999 min, default = 5).
     *
     * @return self
     */
    public function setEmailInterval($email_interval)
    {

        if (!is_null($email_interval) && ($email_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $email_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($email_interval) && ($email_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $email_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['email_interval'] = $email_interval;

        return $this;
    }

    /**
     * Gets ips_logs
     *
     * @return string|null
     */
    public function getIpsLogs()
    {
        return $this->container['ips_logs'];
    }

    /**
     * Sets ips_logs
     *
     * @param string|null $ips_logs Enable/disable IPS logs in alert email.    enable:Enable IPS logs in alert email.    disable:Disable IPS logs in alert email.
     *
     * @return self
     */
    public function setIpsLogs($ips_logs)
    {
        $allowedValues = $this->getIpsLogsAllowableValues();
        if (!is_null($ips_logs) && !in_array($ips_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ips_logs', must be one of '%s'",
                    $ips_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ips_logs'] = $ips_logs;

        return $this;
    }

    /**
     * Gets firewall_authentication_failure_logs
     *
     * @return string|null
     */
    public function getFirewallAuthenticationFailureLogs()
    {
        return $this->container['firewall_authentication_failure_logs'];
    }

    /**
     * Sets firewall_authentication_failure_logs
     *
     * @param string|null $firewall_authentication_failure_logs Enable/disable firewall authentication failure logs in alert email.    enable:Enable firewall authentication failure logs in alert email.    disable:Disable firewall authentication failure logs in alert email.
     *
     * @return self
     */
    public function setFirewallAuthenticationFailureLogs($firewall_authentication_failure_logs)
    {
        $allowedValues = $this->getFirewallAuthenticationFailureLogsAllowableValues();
        if (!is_null($firewall_authentication_failure_logs) && !in_array($firewall_authentication_failure_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'firewall_authentication_failure_logs', must be one of '%s'",
                    $firewall_authentication_failure_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['firewall_authentication_failure_logs'] = $firewall_authentication_failure_logs;

        return $this;
    }

    /**
     * Gets ha_logs
     *
     * @return string|null
     */
    public function getHaLogs()
    {
        return $this->container['ha_logs'];
    }

    /**
     * Sets ha_logs
     *
     * @param string|null $ha_logs Enable/disable HA logs in alert email.    enable:Enable HA logs in alert email.    disable:Disable HA logs in alert email.
     *
     * @return self
     */
    public function setHaLogs($ha_logs)
    {
        $allowedValues = $this->getHaLogsAllowableValues();
        if (!is_null($ha_logs) && !in_array($ha_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ha_logs', must be one of '%s'",
                    $ha_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha_logs'] = $ha_logs;

        return $this;
    }

    /**
     * Gets i_psec_errors_logs
     *
     * @return string|null
     */
    public function getIPsecErrorsLogs()
    {
        return $this->container['i_psec_errors_logs'];
    }

    /**
     * Sets i_psec_errors_logs
     *
     * @param string|null $i_psec_errors_logs Enable/disable IPsec error logs in alert email.    enable:Enable IPsec error logs in alert email.    disable:Disable IPsec error logs in alert email.
     *
     * @return self
     */
    public function setIPsecErrorsLogs($i_psec_errors_logs)
    {
        $allowedValues = $this->getIPsecErrorsLogsAllowableValues();
        if (!is_null($i_psec_errors_logs) && !in_array($i_psec_errors_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'i_psec_errors_logs', must be one of '%s'",
                    $i_psec_errors_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['i_psec_errors_logs'] = $i_psec_errors_logs;

        return $this;
    }

    /**
     * Gets fds_update_logs
     *
     * @return string|null
     */
    public function getFdsUpdateLogs()
    {
        return $this->container['fds_update_logs'];
    }

    /**
     * Sets fds_update_logs
     *
     * @param string|null $fds_update_logs Enable/disable FortiGuard update logs in alert email.    enable:Enable FortiGuard update logs in alert email.    disable:Disable FortiGuard update logs in alert email.
     *
     * @return self
     */
    public function setFdsUpdateLogs($fds_update_logs)
    {
        $allowedValues = $this->getFdsUpdateLogsAllowableValues();
        if (!is_null($fds_update_logs) && !in_array($fds_update_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fds_update_logs', must be one of '%s'",
                    $fds_update_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fds_update_logs'] = $fds_update_logs;

        return $this;
    }

    /**
     * Gets ppp_errors_logs
     *
     * @return string|null
     */
    public function getPppErrorsLogs()
    {
        return $this->container['ppp_errors_logs'];
    }

    /**
     * Sets ppp_errors_logs
     *
     * @param string|null $ppp_errors_logs Enable/disable PPP error logs in alert email.    enable:Enable PPP error logs in alert email.    disable:Disable PPP error logs in alert email.
     *
     * @return self
     */
    public function setPppErrorsLogs($ppp_errors_logs)
    {
        $allowedValues = $this->getPppErrorsLogsAllowableValues();
        if (!is_null($ppp_errors_logs) && !in_array($ppp_errors_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ppp_errors_logs', must be one of '%s'",
                    $ppp_errors_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ppp_errors_logs'] = $ppp_errors_logs;

        return $this;
    }

    /**
     * Gets sslvpn_authentication_errors_logs
     *
     * @return string|null
     */
    public function getSslvpnAuthenticationErrorsLogs()
    {
        return $this->container['sslvpn_authentication_errors_logs'];
    }

    /**
     * Sets sslvpn_authentication_errors_logs
     *
     * @param string|null $sslvpn_authentication_errors_logs Enable/disable SSL-VPN authentication error logs in alert email.    enable:Enable SSL-VPN authentication error logs in alert email.    disable:Disable SSL-VPN authentication error logs in alert email.
     *
     * @return self
     */
    public function setSslvpnAuthenticationErrorsLogs($sslvpn_authentication_errors_logs)
    {
        $allowedValues = $this->getSslvpnAuthenticationErrorsLogsAllowableValues();
        if (!is_null($sslvpn_authentication_errors_logs) && !in_array($sslvpn_authentication_errors_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslvpn_authentication_errors_logs', must be one of '%s'",
                    $sslvpn_authentication_errors_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sslvpn_authentication_errors_logs'] = $sslvpn_authentication_errors_logs;

        return $this;
    }

    /**
     * Gets antivirus_logs
     *
     * @return string|null
     */
    public function getAntivirusLogs()
    {
        return $this->container['antivirus_logs'];
    }

    /**
     * Sets antivirus_logs
     *
     * @param string|null $antivirus_logs Enable/disable antivirus logs in alert email.    enable:Enable antivirus logs in alert email.    disable:Disable antivirus logs in alert email.
     *
     * @return self
     */
    public function setAntivirusLogs($antivirus_logs)
    {
        $allowedValues = $this->getAntivirusLogsAllowableValues();
        if (!is_null($antivirus_logs) && !in_array($antivirus_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'antivirus_logs', must be one of '%s'",
                    $antivirus_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['antivirus_logs'] = $antivirus_logs;

        return $this;
    }

    /**
     * Gets webfilter_logs
     *
     * @return string|null
     */
    public function getWebfilterLogs()
    {
        return $this->container['webfilter_logs'];
    }

    /**
     * Sets webfilter_logs
     *
     * @param string|null $webfilter_logs Enable/disable web filter logs in alert email.    enable:Enable web filter logs in alert email.    disable:Disable web filter logs in alert email.
     *
     * @return self
     */
    public function setWebfilterLogs($webfilter_logs)
    {
        $allowedValues = $this->getWebfilterLogsAllowableValues();
        if (!is_null($webfilter_logs) && !in_array($webfilter_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'webfilter_logs', must be one of '%s'",
                    $webfilter_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['webfilter_logs'] = $webfilter_logs;

        return $this;
    }

    /**
     * Gets configuration_changes_logs
     *
     * @return string|null
     */
    public function getConfigurationChangesLogs()
    {
        return $this->container['configuration_changes_logs'];
    }

    /**
     * Sets configuration_changes_logs
     *
     * @param string|null $configuration_changes_logs Enable/disable configuration change logs in alert email.    enable:Enable configuration change logs in alert email.    disable:Disable configuration change logs in alert email.
     *
     * @return self
     */
    public function setConfigurationChangesLogs($configuration_changes_logs)
    {
        $allowedValues = $this->getConfigurationChangesLogsAllowableValues();
        if (!is_null($configuration_changes_logs) && !in_array($configuration_changes_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'configuration_changes_logs', must be one of '%s'",
                    $configuration_changes_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['configuration_changes_logs'] = $configuration_changes_logs;

        return $this;
    }

    /**
     * Gets violation_traffic_logs
     *
     * @return string|null
     */
    public function getViolationTrafficLogs()
    {
        return $this->container['violation_traffic_logs'];
    }

    /**
     * Sets violation_traffic_logs
     *
     * @param string|null $violation_traffic_logs Enable/disable violation traffic logs in alert email.    enable:Enable violation traffic logs in alert email.    disable:Disable violation traffic logs in alert email.
     *
     * @return self
     */
    public function setViolationTrafficLogs($violation_traffic_logs)
    {
        $allowedValues = $this->getViolationTrafficLogsAllowableValues();
        if (!is_null($violation_traffic_logs) && !in_array($violation_traffic_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'violation_traffic_logs', must be one of '%s'",
                    $violation_traffic_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['violation_traffic_logs'] = $violation_traffic_logs;

        return $this;
    }

    /**
     * Gets admin_login_logs
     *
     * @return string|null
     */
    public function getAdminLoginLogs()
    {
        return $this->container['admin_login_logs'];
    }

    /**
     * Sets admin_login_logs
     *
     * @param string|null $admin_login_logs Enable/disable administrator login/logout logs in alert email.    enable:Enable administrator login/logout logs in alert email.    disable:Disable administrator login/logout logs in alert email.
     *
     * @return self
     */
    public function setAdminLoginLogs($admin_login_logs)
    {
        $allowedValues = $this->getAdminLoginLogsAllowableValues();
        if (!is_null($admin_login_logs) && !in_array($admin_login_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'admin_login_logs', must be one of '%s'",
                    $admin_login_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_login_logs'] = $admin_login_logs;

        return $this;
    }

    /**
     * Gets fds_license_expiring_warning
     *
     * @return string|null
     */
    public function getFdsLicenseExpiringWarning()
    {
        return $this->container['fds_license_expiring_warning'];
    }

    /**
     * Sets fds_license_expiring_warning
     *
     * @param string|null $fds_license_expiring_warning Enable/disable FortiGuard license expiration warnings in alert email.    enable:Enable FortiGuard license expiration warnings in alert email.    disable:Disable FortiGuard license expiration warnings in alert email.
     *
     * @return self
     */
    public function setFdsLicenseExpiringWarning($fds_license_expiring_warning)
    {
        $allowedValues = $this->getFdsLicenseExpiringWarningAllowableValues();
        if (!is_null($fds_license_expiring_warning) && !in_array($fds_license_expiring_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fds_license_expiring_warning', must be one of '%s'",
                    $fds_license_expiring_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fds_license_expiring_warning'] = $fds_license_expiring_warning;

        return $this;
    }

    /**
     * Gets log_disk_usage_warning
     *
     * @return string|null
     */
    public function getLogDiskUsageWarning()
    {
        return $this->container['log_disk_usage_warning'];
    }

    /**
     * Sets log_disk_usage_warning
     *
     * @param string|null $log_disk_usage_warning Enable/disable disk usage warnings in alert email.    enable:Enable disk usage warnings in alert email.    disable:Disable disk usage warnings in alert email.
     *
     * @return self
     */
    public function setLogDiskUsageWarning($log_disk_usage_warning)
    {
        $allowedValues = $this->getLogDiskUsageWarningAllowableValues();
        if (!is_null($log_disk_usage_warning) && !in_array($log_disk_usage_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_disk_usage_warning', must be one of '%s'",
                    $log_disk_usage_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_disk_usage_warning'] = $log_disk_usage_warning;

        return $this;
    }

    /**
     * Gets fortiguard_log_quota_warning
     *
     * @return string|null
     */
    public function getFortiguardLogQuotaWarning()
    {
        return $this->container['fortiguard_log_quota_warning'];
    }

    /**
     * Sets fortiguard_log_quota_warning
     *
     * @param string|null $fortiguard_log_quota_warning Enable/disable FortiCloud log quota warnings in alert email.    enable:Enable FortiCloud log quota warnings in alert email.    disable:Disable FortiCloud log quota warnings in alert email.
     *
     * @return self
     */
    public function setFortiguardLogQuotaWarning($fortiguard_log_quota_warning)
    {
        $allowedValues = $this->getFortiguardLogQuotaWarningAllowableValues();
        if (!is_null($fortiguard_log_quota_warning) && !in_array($fortiguard_log_quota_warning, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiguard_log_quota_warning', must be one of '%s'",
                    $fortiguard_log_quota_warning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiguard_log_quota_warning'] = $fortiguard_log_quota_warning;

        return $this;
    }

    /**
     * Gets amc_interface_bypass_mode
     *
     * @return string|null
     */
    public function getAmcInterfaceBypassMode()
    {
        return $this->container['amc_interface_bypass_mode'];
    }

    /**
     * Sets amc_interface_bypass_mode
     *
     * @param string|null $amc_interface_bypass_mode Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email.    enable:Enable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email.    disable:Disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email.
     *
     * @return self
     */
    public function setAmcInterfaceBypassMode($amc_interface_bypass_mode)
    {
        $allowedValues = $this->getAmcInterfaceBypassModeAllowableValues();
        if (!is_null($amc_interface_bypass_mode) && !in_array($amc_interface_bypass_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'amc_interface_bypass_mode', must be one of '%s'",
                    $amc_interface_bypass_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amc_interface_bypass_mode'] = $amc_interface_bypass_mode;

        return $this;
    }

    /**
     * Gets fips_cc_errors
     *
     * @return string|null
     */
    public function getFipsCcErrors()
    {
        return $this->container['fips_cc_errors'];
    }

    /**
     * Sets fips_cc_errors
     *
     * @param string|null $fips_cc_errors Enable/disable FIPS and Common Criteria error logs in alert email.    enable:Enable FIPS and Common Criteria error logs in alert email.    disable:Disable FIPS and Common Criteria error logs in alert email.
     *
     * @return self
     */
    public function setFipsCcErrors($fips_cc_errors)
    {
        $allowedValues = $this->getFipsCcErrorsAllowableValues();
        if (!is_null($fips_cc_errors) && !in_array($fips_cc_errors, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fips_cc_errors', must be one of '%s'",
                    $fips_cc_errors,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fips_cc_errors'] = $fips_cc_errors;

        return $this;
    }

    /**
     * Gets fsso_disconnect_logs
     *
     * @return string|null
     */
    public function getFssoDisconnectLogs()
    {
        return $this->container['fsso_disconnect_logs'];
    }

    /**
     * Sets fsso_disconnect_logs
     *
     * @param string|null $fsso_disconnect_logs Enable/disable logging of FSSO collector agent disconnect.    enable:Enable logging of FSSO collector agent disconnect.    disable:Disable logging of FSSO collector agent disconnect.
     *
     * @return self
     */
    public function setFssoDisconnectLogs($fsso_disconnect_logs)
    {
        $allowedValues = $this->getFssoDisconnectLogsAllowableValues();
        if (!is_null($fsso_disconnect_logs) && !in_array($fsso_disconnect_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fsso_disconnect_logs', must be one of '%s'",
                    $fsso_disconnect_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fsso_disconnect_logs'] = $fsso_disconnect_logs;

        return $this;
    }

    /**
     * Gets ssh_logs
     *
     * @return string|null
     */
    public function getSshLogs()
    {
        return $this->container['ssh_logs'];
    }

    /**
     * Sets ssh_logs
     *
     * @param string|null $ssh_logs Enable/disable SSH logs in alert email.    enable:Enable SSH logs in alert email.    disable:Disable SSH logs in alert email.
     *
     * @return self
     */
    public function setSshLogs($ssh_logs)
    {
        $allowedValues = $this->getSshLogsAllowableValues();
        if (!is_null($ssh_logs) && !in_array($ssh_logs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssh_logs', must be one of '%s'",
                    $ssh_logs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssh_logs'] = $ssh_logs;

        return $this;
    }

    /**
     * Gets fds_license_expiring_days
     *
     * @return int|null
     */
    public function getFdsLicenseExpiringDays()
    {
        return $this->container['fds_license_expiring_days'];
    }

    /**
     * Sets fds_license_expiring_days
     *
     * @param int|null $fds_license_expiring_days Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days, default = 100).
     *
     * @return self
     */
    public function setFdsLicenseExpiringDays($fds_license_expiring_days)
    {

        if (!is_null($fds_license_expiring_days) && ($fds_license_expiring_days > 100)) {
            throw new \InvalidArgumentException('invalid value for $fds_license_expiring_days when calling InlineObject., must be smaller than or equal to 100.');
        }
        if (!is_null($fds_license_expiring_days) && ($fds_license_expiring_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $fds_license_expiring_days when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['fds_license_expiring_days'] = $fds_license_expiring_days;

        return $this;
    }

    /**
     * Gets local_disk_usage
     *
     * @return int|null
     */
    public function getLocalDiskUsage()
    {
        return $this->container['local_disk_usage'];
    }

    /**
     * Sets local_disk_usage
     *
     * @param int|null $local_disk_usage Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
     *
     * @return self
     */
    public function setLocalDiskUsage($local_disk_usage)
    {

        if (!is_null($local_disk_usage) && ($local_disk_usage > 99)) {
            throw new \InvalidArgumentException('invalid value for $local_disk_usage when calling InlineObject., must be smaller than or equal to 99.');
        }
        if (!is_null($local_disk_usage) && ($local_disk_usage < 1)) {
            throw new \InvalidArgumentException('invalid value for $local_disk_usage when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['local_disk_usage'] = $local_disk_usage;

        return $this;
    }

    /**
     * Gets emergency_interval
     *
     * @return int|null
     */
    public function getEmergencyInterval()
    {
        return $this->container['emergency_interval'];
    }

    /**
     * Sets emergency_interval
     *
     * @param int|null $emergency_interval Emergency alert interval in minutes.
     *
     * @return self
     */
    public function setEmergencyInterval($emergency_interval)
    {

        if (!is_null($emergency_interval) && ($emergency_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $emergency_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($emergency_interval) && ($emergency_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $emergency_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['emergency_interval'] = $emergency_interval;

        return $this;
    }

    /**
     * Gets alert_interval
     *
     * @return int|null
     */
    public function getAlertInterval()
    {
        return $this->container['alert_interval'];
    }

    /**
     * Sets alert_interval
     *
     * @param int|null $alert_interval Alert alert interval in minutes.
     *
     * @return self
     */
    public function setAlertInterval($alert_interval)
    {

        if (!is_null($alert_interval) && ($alert_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $alert_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($alert_interval) && ($alert_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $alert_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['alert_interval'] = $alert_interval;

        return $this;
    }

    /**
     * Gets critical_interval
     *
     * @return int|null
     */
    public function getCriticalInterval()
    {
        return $this->container['critical_interval'];
    }

    /**
     * Sets critical_interval
     *
     * @param int|null $critical_interval Critical alert interval in minutes.
     *
     * @return self
     */
    public function setCriticalInterval($critical_interval)
    {

        if (!is_null($critical_interval) && ($critical_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $critical_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($critical_interval) && ($critical_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $critical_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['critical_interval'] = $critical_interval;

        return $this;
    }

    /**
     * Gets error_interval
     *
     * @return int|null
     */
    public function getErrorInterval()
    {
        return $this->container['error_interval'];
    }

    /**
     * Sets error_interval
     *
     * @param int|null $error_interval Error alert interval in minutes.
     *
     * @return self
     */
    public function setErrorInterval($error_interval)
    {

        if (!is_null($error_interval) && ($error_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $error_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($error_interval) && ($error_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $error_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['error_interval'] = $error_interval;

        return $this;
    }

    /**
     * Gets warning_interval
     *
     * @return int|null
     */
    public function getWarningInterval()
    {
        return $this->container['warning_interval'];
    }

    /**
     * Sets warning_interval
     *
     * @param int|null $warning_interval Warning alert interval in minutes.
     *
     * @return self
     */
    public function setWarningInterval($warning_interval)
    {

        if (!is_null($warning_interval) && ($warning_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $warning_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($warning_interval) && ($warning_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $warning_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['warning_interval'] = $warning_interval;

        return $this;
    }

    /**
     * Gets notification_interval
     *
     * @return int|null
     */
    public function getNotificationInterval()
    {
        return $this->container['notification_interval'];
    }

    /**
     * Sets notification_interval
     *
     * @param int|null $notification_interval Notification alert interval in minutes.
     *
     * @return self
     */
    public function setNotificationInterval($notification_interval)
    {

        if (!is_null($notification_interval) && ($notification_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $notification_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($notification_interval) && ($notification_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $notification_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['notification_interval'] = $notification_interval;

        return $this;
    }

    /**
     * Gets information_interval
     *
     * @return int|null
     */
    public function getInformationInterval()
    {
        return $this->container['information_interval'];
    }

    /**
     * Sets information_interval
     *
     * @param int|null $information_interval Information alert interval in minutes.
     *
     * @return self
     */
    public function setInformationInterval($information_interval)
    {

        if (!is_null($information_interval) && ($information_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $information_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($information_interval) && ($information_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $information_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['information_interval'] = $information_interval;

        return $this;
    }

    /**
     * Gets debug_interval
     *
     * @return int|null
     */
    public function getDebugInterval()
    {
        return $this->container['debug_interval'];
    }

    /**
     * Sets debug_interval
     *
     * @param int|null $debug_interval Debug alert interval in minutes.
     *
     * @return self
     */
    public function setDebugInterval($debug_interval)
    {

        if (!is_null($debug_interval) && ($debug_interval > 99999)) {
            throw new \InvalidArgumentException('invalid value for $debug_interval when calling InlineObject., must be smaller than or equal to 99999.');
        }
        if (!is_null($debug_interval) && ($debug_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $debug_interval when calling InlineObject., must be bigger than or equal to 1.');
        }

        $this->container['debug_interval'] = $debug_interval;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Lowest severity level to log.    emergency:Emergency level.    alert:Alert level.    critical:Critical level.    error:Error level.    warning:Warning level.    notification:Notification level.    information:Information level.    debug:Debug level.
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'severity', must be one of '%s'",
                    $severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


