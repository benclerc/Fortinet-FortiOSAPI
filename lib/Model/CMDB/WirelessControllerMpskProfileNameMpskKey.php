<?php
/**
 * WirelessControllerMpskProfileNameMpskKey
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WirelessControllerMpskProfileNameMpskKey Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WirelessControllerMpskProfileNameMpskKey implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_wireless_controller_mpsk_profile__name__mpsk_key';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'mac' => 'string',
        'passphrase' => 'string',
        'concurrent_client_limit_type' => 'string',
        'concurrent_clients' => 'int',
        'comment' => 'string',
        'mpsk_schedules' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'mac' => 'mac-address',
        'passphrase' => 'password',
        'concurrent_client_limit_type' => null,
        'concurrent_clients' => null,
        'comment' => null,
        'mpsk_schedules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'mac' => 'mac',
        'passphrase' => 'passphrase',
        'concurrent_client_limit_type' => 'concurrent-client-limit-type',
        'concurrent_clients' => 'concurrent-clients',
        'comment' => 'comment',
        'mpsk_schedules' => 'mpsk-schedules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'mac' => 'setMac',
        'passphrase' => 'setPassphrase',
        'concurrent_client_limit_type' => 'setConcurrentClientLimitType',
        'concurrent_clients' => 'setConcurrentClients',
        'comment' => 'setComment',
        'mpsk_schedules' => 'setMpskSchedules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'mac' => 'getMac',
        'passphrase' => 'getPassphrase',
        'concurrent_client_limit_type' => 'getConcurrentClientLimitType',
        'concurrent_clients' => 'getConcurrentClients',
        'comment' => 'getComment',
        'mpsk_schedules' => 'getMpskSchedules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONCURRENT_CLIENT_LIMIT_TYPE__DEFAULT = 'default';
    const CONCURRENT_CLIENT_LIMIT_TYPE_UNLIMITED = 'unlimited';
    const CONCURRENT_CLIENT_LIMIT_TYPE_SPECIFIED = 'specified';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConcurrentClientLimitTypeAllowableValues()
    {
        return [
            self::CONCURRENT_CLIENT_LIMIT_TYPE__DEFAULT,
            self::CONCURRENT_CLIENT_LIMIT_TYPE_UNLIMITED,
            self::CONCURRENT_CLIENT_LIMIT_TYPE_SPECIFIED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['mac'] = $data['mac'] ?? null;
        $this->container['passphrase'] = $data['passphrase'] ?? null;
        $this->container['concurrent_client_limit_type'] = $data['concurrent_client_limit_type'] ?? null;
        $this->container['concurrent_clients'] = $data['concurrent_clients'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['mpsk_schedules'] = $data['mpsk_schedules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getConcurrentClientLimitTypeAllowableValues();
        if (!is_null($this->container['concurrent_client_limit_type']) && !in_array($this->container['concurrent_client_limit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'concurrent_client_limit_type', must be one of '%s'",
                $this->container['concurrent_client_limit_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['concurrent_clients']) && ($this->container['concurrent_clients'] > 65535)) {
            $invalidProperties[] = "invalid value for 'concurrent_clients', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['concurrent_clients']) && ($this->container['concurrent_clients'] < 1)) {
            $invalidProperties[] = "invalid value for 'concurrent_clients', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mpsk_schedules']) && (count($this->container['mpsk_schedules']) > 16)) {
            $invalidProperties[] = "invalid value for 'mpsk_schedules', number of items must be less than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Pre-shared key name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WirelessControllerMpskProfileNameMpskKey., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac MAC address.
     *
     * @return self
     */
    public function setMac($mac)
    {
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string|null
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string|null $passphrase WPA Pre-shared key.
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {
        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets concurrent_client_limit_type
     *
     * @return string|null
     */
    public function getConcurrentClientLimitType()
    {
        return $this->container['concurrent_client_limit_type'];
    }

    /**
     * Sets concurrent_client_limit_type
     *
     * @param string|null $concurrent_client_limit_type MPSK client limit type options.    default:Using the value in profile configuration.    unlimited:Unlimited.    specified:Specified value.
     *
     * @return self
     */
    public function setConcurrentClientLimitType($concurrent_client_limit_type)
    {
        $allowedValues = $this->getConcurrentClientLimitTypeAllowableValues();
        if (!is_null($concurrent_client_limit_type) && !in_array($concurrent_client_limit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'concurrent_client_limit_type', must be one of '%s'",
                    $concurrent_client_limit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['concurrent_client_limit_type'] = $concurrent_client_limit_type;

        return $this;
    }

    /**
     * Gets concurrent_clients
     *
     * @return int|null
     */
    public function getConcurrentClients()
    {
        return $this->container['concurrent_clients'];
    }

    /**
     * Sets concurrent_clients
     *
     * @param int|null $concurrent_clients Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
     *
     * @return self
     */
    public function setConcurrentClients($concurrent_clients)
    {

        if (!is_null($concurrent_clients) && ($concurrent_clients > 65535)) {
            throw new \InvalidArgumentException('invalid value for $concurrent_clients when calling WirelessControllerMpskProfileNameMpskKey., must be smaller than or equal to 65535.');
        }
        if (!is_null($concurrent_clients) && ($concurrent_clients < 1)) {
            throw new \InvalidArgumentException('invalid value for $concurrent_clients when calling WirelessControllerMpskProfileNameMpskKey., must be bigger than or equal to 1.');
        }

        $this->container['concurrent_clients'] = $concurrent_clients;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling WirelessControllerMpskProfileNameMpskKey., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets mpsk_schedules
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null
     */
    public function getMpskSchedules()
    {
        return $this->container['mpsk_schedules'];
    }

    /**
     * Sets mpsk_schedules
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null $mpsk_schedules Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid.
     *
     * @return self
     */
    public function setMpskSchedules($mpsk_schedules)
    {

        if (!is_null($mpsk_schedules) && (count($mpsk_schedules) > 16)) {
            throw new \InvalidArgumentException('invalid value for $mpsk_schedules when calling WirelessControllerMpskProfileNameMpskKey., number of items must be less than or equal to 16.');
        }
        $this->container['mpsk_schedules'] = $mpsk_schedules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


