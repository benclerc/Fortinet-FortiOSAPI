<?php
/**
 * InlineObject608
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject608 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject608 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_608';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'fast_roaming' => 'string',
        'external_fast_roaming' => 'string',
        'mesh_backhaul' => 'string',
        'atf_weight' => 'int',
        'max_clients' => 'int',
        'max_clients_ap' => 'int',
        'ssid' => 'string',
        'broadcast_ssid' => 'string',
        'security' => 'string',
        'pmf' => 'string',
        'pmf_assoc_comeback_timeout' => 'int',
        'pmf_sa_query_retry_timeout' => 'int',
        'okc' => 'string',
        'voice_enterprise' => 'string',
        'fast_bss_transition' => 'string',
        'ft_mobility_domain' => 'int',
        'ft_r0_key_lifetime' => 'int',
        'ft_over_ds' => 'string',
        'sae_groups' => 'string',
        'owe_groups' => 'string',
        'owe_transition' => 'string',
        'owe_transition_ssid' => 'string',
        'eapol_key_retries' => 'string',
        'tkip_counter_measure' => 'string',
        'external_web' => 'string',
        'external_web_format' => 'string',
        'external_logout' => 'string',
        'mac_auth_bypass' => 'string',
        'radius_mac_auth' => 'string',
        'radius_mac_auth_server' => 'string',
        'radius_mac_auth_usergroups' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]',
        'auth' => 'string',
        'encrypt' => 'string',
        'keyindex' => 'int',
        'key' => 'string',
        'passphrase' => 'string',
        'sae_password' => 'string',
        'radius_server' => 'string',
        'local_standalone' => 'string',
        'local_standalone_nat' => 'string',
        'ip' => 'string',
        'dhcp_lease_time' => 'int',
        'local_bridging' => 'string',
        'local_lan' => 'string',
        'local_authentication' => 'string',
        'usergroup' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]',
        'portal_message_override_group' => 'string',
        'portal_message_overrides' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNamePortalMessageOverrides[]',
        'portal_type' => 'string',
        'selected_usergroups' => '\Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]',
        'security_exempt_list' => 'string',
        'security_redirect_url' => 'string',
        'intra_vap_privacy' => 'string',
        'schedule' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]',
        'ldpc' => 'string',
        'high_efficiency' => 'string',
        'target_wake_time' => 'string',
        'port_macauth' => 'string',
        'port_macauth_timeout' => 'int',
        'port_macauth_reauth_timeout' => 'int',
        'bss_color_partial' => 'string',
        'mpsk_profile' => 'string',
        'split_tunneling' => 'string',
        'vlanid' => 'int',
        'vlan_auto' => 'string',
        'dynamic_vlan' => 'string',
        'captive_portal_ac_name' => 'string',
        'captive_portal_auth_timeout' => 'int',
        'multicast_rate' => 'string',
        'multicast_enhance' => 'string',
        'igmp_snooping' => 'string',
        'broadcast_suppression' => 'string',
        'ipv6_rules' => 'string',
        'me_disable_thresh' => 'int',
        'mu_mimo' => 'string',
        'probe_resp_suppression' => 'string',
        'probe_resp_threshold' => 'string',
        'radio_sensitivity' => 'string',
        'quarantine' => 'string',
        'radio_5g_threshold' => 'string',
        'radio_2g_threshold' => 'string',
        'vlan_pooling' => 'string',
        'vlan_pool' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameVlanPool[]',
        'dhcp_option43_insertion' => 'string',
        'dhcp_option82_insertion' => 'string',
        'dhcp_option82_circuit_id_insertion' => 'string',
        'dhcp_option82_remote_id_insertion' => 'string',
        'ptk_rekey' => 'string',
        'ptk_rekey_intv' => 'int',
        'gtk_rekey' => 'string',
        'gtk_rekey_intv' => 'int',
        'eap_reauth' => 'string',
        'eap_reauth_intv' => 'int',
        'qos_profile' => 'string',
        'hotspot20_profile' => 'string',
        'access_control_list' => 'string',
        'primary_wag_profile' => 'string',
        'secondary_wag_profile' => 'string',
        'tunnel_echo_interval' => 'int',
        'tunnel_fallback_interval' => 'int',
        'rates_11a' => 'string',
        'rates_11bg' => 'string',
        'rates_11n_ss12' => 'string',
        'rates_11n_ss34' => 'string',
        'rates_11ac_ss12' => 'string',
        'rates_11ac_ss34' => 'string',
        'utm_profile' => 'string',
        'address_group' => 'string',
        'mac_filter' => 'string',
        'mac_filter_policy_other' => 'string',
        'mac_filter_list' => '\Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameMacFilterList[]',
        'sticky_client_remove' => 'string',
        'sticky_client_threshold_5g' => 'string',
        'sticky_client_threshold_2g' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'fast_roaming' => null,
        'external_fast_roaming' => null,
        'mesh_backhaul' => null,
        'atf_weight' => null,
        'max_clients' => null,
        'max_clients_ap' => null,
        'ssid' => null,
        'broadcast_ssid' => null,
        'security' => null,
        'pmf' => null,
        'pmf_assoc_comeback_timeout' => null,
        'pmf_sa_query_retry_timeout' => null,
        'okc' => null,
        'voice_enterprise' => null,
        'fast_bss_transition' => null,
        'ft_mobility_domain' => null,
        'ft_r0_key_lifetime' => null,
        'ft_over_ds' => null,
        'sae_groups' => null,
        'owe_groups' => null,
        'owe_transition' => null,
        'owe_transition_ssid' => null,
        'eapol_key_retries' => null,
        'tkip_counter_measure' => null,
        'external_web' => null,
        'external_web_format' => null,
        'external_logout' => null,
        'mac_auth_bypass' => null,
        'radius_mac_auth' => null,
        'radius_mac_auth_server' => null,
        'radius_mac_auth_usergroups' => null,
        'auth' => null,
        'encrypt' => null,
        'keyindex' => null,
        'key' => 'password',
        'passphrase' => 'password',
        'sae_password' => 'password',
        'radius_server' => null,
        'local_standalone' => null,
        'local_standalone_nat' => null,
        'ip' => 'ipv4',
        'dhcp_lease_time' => null,
        'local_bridging' => null,
        'local_lan' => null,
        'local_authentication' => null,
        'usergroup' => null,
        'portal_message_override_group' => null,
        'portal_message_overrides' => null,
        'portal_type' => null,
        'selected_usergroups' => null,
        'security_exempt_list' => null,
        'security_redirect_url' => null,
        'intra_vap_privacy' => null,
        'schedule' => null,
        'ldpc' => null,
        'high_efficiency' => null,
        'target_wake_time' => null,
        'port_macauth' => null,
        'port_macauth_timeout' => null,
        'port_macauth_reauth_timeout' => null,
        'bss_color_partial' => null,
        'mpsk_profile' => null,
        'split_tunneling' => null,
        'vlanid' => null,
        'vlan_auto' => null,
        'dynamic_vlan' => null,
        'captive_portal_ac_name' => null,
        'captive_portal_auth_timeout' => null,
        'multicast_rate' => null,
        'multicast_enhance' => null,
        'igmp_snooping' => null,
        'broadcast_suppression' => null,
        'ipv6_rules' => null,
        'me_disable_thresh' => null,
        'mu_mimo' => null,
        'probe_resp_suppression' => null,
        'probe_resp_threshold' => null,
        'radio_sensitivity' => null,
        'quarantine' => null,
        'radio_5g_threshold' => null,
        'radio_2g_threshold' => null,
        'vlan_pooling' => null,
        'vlan_pool' => null,
        'dhcp_option43_insertion' => null,
        'dhcp_option82_insertion' => null,
        'dhcp_option82_circuit_id_insertion' => null,
        'dhcp_option82_remote_id_insertion' => null,
        'ptk_rekey' => null,
        'ptk_rekey_intv' => null,
        'gtk_rekey' => null,
        'gtk_rekey_intv' => null,
        'eap_reauth' => null,
        'eap_reauth_intv' => null,
        'qos_profile' => null,
        'hotspot20_profile' => null,
        'access_control_list' => null,
        'primary_wag_profile' => null,
        'secondary_wag_profile' => null,
        'tunnel_echo_interval' => null,
        'tunnel_fallback_interval' => null,
        'rates_11a' => null,
        'rates_11bg' => null,
        'rates_11n_ss12' => null,
        'rates_11n_ss34' => null,
        'rates_11ac_ss12' => null,
        'rates_11ac_ss34' => null,
        'utm_profile' => null,
        'address_group' => null,
        'mac_filter' => null,
        'mac_filter_policy_other' => null,
        'mac_filter_list' => null,
        'sticky_client_remove' => null,
        'sticky_client_threshold_5g' => null,
        'sticky_client_threshold_2g' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'fast_roaming' => 'fast-roaming',
        'external_fast_roaming' => 'external-fast-roaming',
        'mesh_backhaul' => 'mesh-backhaul',
        'atf_weight' => 'atf-weight',
        'max_clients' => 'max-clients',
        'max_clients_ap' => 'max-clients-ap',
        'ssid' => 'ssid',
        'broadcast_ssid' => 'broadcast-ssid',
        'security' => 'security',
        'pmf' => 'pmf',
        'pmf_assoc_comeback_timeout' => 'pmf-assoc-comeback-timeout',
        'pmf_sa_query_retry_timeout' => 'pmf-sa-query-retry-timeout',
        'okc' => 'okc',
        'voice_enterprise' => 'voice-enterprise',
        'fast_bss_transition' => 'fast-bss-transition',
        'ft_mobility_domain' => 'ft-mobility-domain',
        'ft_r0_key_lifetime' => 'ft-r0-key-lifetime',
        'ft_over_ds' => 'ft-over-ds',
        'sae_groups' => 'sae-groups',
        'owe_groups' => 'owe-groups',
        'owe_transition' => 'owe-transition',
        'owe_transition_ssid' => 'owe-transition-ssid',
        'eapol_key_retries' => 'eapol-key-retries',
        'tkip_counter_measure' => 'tkip-counter-measure',
        'external_web' => 'external-web',
        'external_web_format' => 'external-web-format',
        'external_logout' => 'external-logout',
        'mac_auth_bypass' => 'mac-auth-bypass',
        'radius_mac_auth' => 'radius-mac-auth',
        'radius_mac_auth_server' => 'radius-mac-auth-server',
        'radius_mac_auth_usergroups' => 'radius-mac-auth-usergroups',
        'auth' => 'auth',
        'encrypt' => 'encrypt',
        'keyindex' => 'keyindex',
        'key' => 'key',
        'passphrase' => 'passphrase',
        'sae_password' => 'sae-password',
        'radius_server' => 'radius-server',
        'local_standalone' => 'local-standalone',
        'local_standalone_nat' => 'local-standalone-nat',
        'ip' => 'ip',
        'dhcp_lease_time' => 'dhcp-lease-time',
        'local_bridging' => 'local-bridging',
        'local_lan' => 'local-lan',
        'local_authentication' => 'local-authentication',
        'usergroup' => 'usergroup',
        'portal_message_override_group' => 'portal-message-override-group',
        'portal_message_overrides' => 'portal-message-overrides',
        'portal_type' => 'portal-type',
        'selected_usergroups' => 'selected-usergroups',
        'security_exempt_list' => 'security-exempt-list',
        'security_redirect_url' => 'security-redirect-url',
        'intra_vap_privacy' => 'intra-vap-privacy',
        'schedule' => 'schedule',
        'ldpc' => 'ldpc',
        'high_efficiency' => 'high-efficiency',
        'target_wake_time' => 'target-wake-time',
        'port_macauth' => 'port-macauth',
        'port_macauth_timeout' => 'port-macauth-timeout',
        'port_macauth_reauth_timeout' => 'port-macauth-reauth-timeout',
        'bss_color_partial' => 'bss-color-partial',
        'mpsk_profile' => 'mpsk-profile',
        'split_tunneling' => 'split-tunneling',
        'vlanid' => 'vlanid',
        'vlan_auto' => 'vlan-auto',
        'dynamic_vlan' => 'dynamic-vlan',
        'captive_portal_ac_name' => 'captive-portal-ac-name',
        'captive_portal_auth_timeout' => 'captive-portal-auth-timeout',
        'multicast_rate' => 'multicast-rate',
        'multicast_enhance' => 'multicast-enhance',
        'igmp_snooping' => 'igmp-snooping',
        'broadcast_suppression' => 'broadcast-suppression',
        'ipv6_rules' => 'ipv6-rules',
        'me_disable_thresh' => 'me-disable-thresh',
        'mu_mimo' => 'mu-mimo',
        'probe_resp_suppression' => 'probe-resp-suppression',
        'probe_resp_threshold' => 'probe-resp-threshold',
        'radio_sensitivity' => 'radio-sensitivity',
        'quarantine' => 'quarantine',
        'radio_5g_threshold' => 'radio-5g-threshold',
        'radio_2g_threshold' => 'radio-2g-threshold',
        'vlan_pooling' => 'vlan-pooling',
        'vlan_pool' => 'vlan-pool',
        'dhcp_option43_insertion' => 'dhcp-option43-insertion',
        'dhcp_option82_insertion' => 'dhcp-option82-insertion',
        'dhcp_option82_circuit_id_insertion' => 'dhcp-option82-circuit-id-insertion',
        'dhcp_option82_remote_id_insertion' => 'dhcp-option82-remote-id-insertion',
        'ptk_rekey' => 'ptk-rekey',
        'ptk_rekey_intv' => 'ptk-rekey-intv',
        'gtk_rekey' => 'gtk-rekey',
        'gtk_rekey_intv' => 'gtk-rekey-intv',
        'eap_reauth' => 'eap-reauth',
        'eap_reauth_intv' => 'eap-reauth-intv',
        'qos_profile' => 'qos-profile',
        'hotspot20_profile' => 'hotspot20-profile',
        'access_control_list' => 'access-control-list',
        'primary_wag_profile' => 'primary-wag-profile',
        'secondary_wag_profile' => 'secondary-wag-profile',
        'tunnel_echo_interval' => 'tunnel-echo-interval',
        'tunnel_fallback_interval' => 'tunnel-fallback-interval',
        'rates_11a' => 'rates-11a',
        'rates_11bg' => 'rates-11bg',
        'rates_11n_ss12' => 'rates-11n-ss12',
        'rates_11n_ss34' => 'rates-11n-ss34',
        'rates_11ac_ss12' => 'rates-11ac-ss12',
        'rates_11ac_ss34' => 'rates-11ac-ss34',
        'utm_profile' => 'utm-profile',
        'address_group' => 'address-group',
        'mac_filter' => 'mac-filter',
        'mac_filter_policy_other' => 'mac-filter-policy-other',
        'mac_filter_list' => 'mac-filter-list',
        'sticky_client_remove' => 'sticky-client-remove',
        'sticky_client_threshold_5g' => 'sticky-client-threshold-5g',
        'sticky_client_threshold_2g' => 'sticky-client-threshold-2g'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'fast_roaming' => 'setFastRoaming',
        'external_fast_roaming' => 'setExternalFastRoaming',
        'mesh_backhaul' => 'setMeshBackhaul',
        'atf_weight' => 'setAtfWeight',
        'max_clients' => 'setMaxClients',
        'max_clients_ap' => 'setMaxClientsAp',
        'ssid' => 'setSsid',
        'broadcast_ssid' => 'setBroadcastSsid',
        'security' => 'setSecurity',
        'pmf' => 'setPmf',
        'pmf_assoc_comeback_timeout' => 'setPmfAssocComebackTimeout',
        'pmf_sa_query_retry_timeout' => 'setPmfSaQueryRetryTimeout',
        'okc' => 'setOkc',
        'voice_enterprise' => 'setVoiceEnterprise',
        'fast_bss_transition' => 'setFastBssTransition',
        'ft_mobility_domain' => 'setFtMobilityDomain',
        'ft_r0_key_lifetime' => 'setFtR0KeyLifetime',
        'ft_over_ds' => 'setFtOverDs',
        'sae_groups' => 'setSaeGroups',
        'owe_groups' => 'setOweGroups',
        'owe_transition' => 'setOweTransition',
        'owe_transition_ssid' => 'setOweTransitionSsid',
        'eapol_key_retries' => 'setEapolKeyRetries',
        'tkip_counter_measure' => 'setTkipCounterMeasure',
        'external_web' => 'setExternalWeb',
        'external_web_format' => 'setExternalWebFormat',
        'external_logout' => 'setExternalLogout',
        'mac_auth_bypass' => 'setMacAuthBypass',
        'radius_mac_auth' => 'setRadiusMacAuth',
        'radius_mac_auth_server' => 'setRadiusMacAuthServer',
        'radius_mac_auth_usergroups' => 'setRadiusMacAuthUsergroups',
        'auth' => 'setAuth',
        'encrypt' => 'setEncrypt',
        'keyindex' => 'setKeyindex',
        'key' => 'setKey',
        'passphrase' => 'setPassphrase',
        'sae_password' => 'setSaePassword',
        'radius_server' => 'setRadiusServer',
        'local_standalone' => 'setLocalStandalone',
        'local_standalone_nat' => 'setLocalStandaloneNat',
        'ip' => 'setIp',
        'dhcp_lease_time' => 'setDhcpLeaseTime',
        'local_bridging' => 'setLocalBridging',
        'local_lan' => 'setLocalLan',
        'local_authentication' => 'setLocalAuthentication',
        'usergroup' => 'setUsergroup',
        'portal_message_override_group' => 'setPortalMessageOverrideGroup',
        'portal_message_overrides' => 'setPortalMessageOverrides',
        'portal_type' => 'setPortalType',
        'selected_usergroups' => 'setSelectedUsergroups',
        'security_exempt_list' => 'setSecurityExemptList',
        'security_redirect_url' => 'setSecurityRedirectUrl',
        'intra_vap_privacy' => 'setIntraVapPrivacy',
        'schedule' => 'setSchedule',
        'ldpc' => 'setLdpc',
        'high_efficiency' => 'setHighEfficiency',
        'target_wake_time' => 'setTargetWakeTime',
        'port_macauth' => 'setPortMacauth',
        'port_macauth_timeout' => 'setPortMacauthTimeout',
        'port_macauth_reauth_timeout' => 'setPortMacauthReauthTimeout',
        'bss_color_partial' => 'setBssColorPartial',
        'mpsk_profile' => 'setMpskProfile',
        'split_tunneling' => 'setSplitTunneling',
        'vlanid' => 'setVlanid',
        'vlan_auto' => 'setVlanAuto',
        'dynamic_vlan' => 'setDynamicVlan',
        'captive_portal_ac_name' => 'setCaptivePortalAcName',
        'captive_portal_auth_timeout' => 'setCaptivePortalAuthTimeout',
        'multicast_rate' => 'setMulticastRate',
        'multicast_enhance' => 'setMulticastEnhance',
        'igmp_snooping' => 'setIgmpSnooping',
        'broadcast_suppression' => 'setBroadcastSuppression',
        'ipv6_rules' => 'setIpv6Rules',
        'me_disable_thresh' => 'setMeDisableThresh',
        'mu_mimo' => 'setMuMimo',
        'probe_resp_suppression' => 'setProbeRespSuppression',
        'probe_resp_threshold' => 'setProbeRespThreshold',
        'radio_sensitivity' => 'setRadioSensitivity',
        'quarantine' => 'setQuarantine',
        'radio_5g_threshold' => 'setRadio5gThreshold',
        'radio_2g_threshold' => 'setRadio2gThreshold',
        'vlan_pooling' => 'setVlanPooling',
        'vlan_pool' => 'setVlanPool',
        'dhcp_option43_insertion' => 'setDhcpOption43Insertion',
        'dhcp_option82_insertion' => 'setDhcpOption82Insertion',
        'dhcp_option82_circuit_id_insertion' => 'setDhcpOption82CircuitIdInsertion',
        'dhcp_option82_remote_id_insertion' => 'setDhcpOption82RemoteIdInsertion',
        'ptk_rekey' => 'setPtkRekey',
        'ptk_rekey_intv' => 'setPtkRekeyIntv',
        'gtk_rekey' => 'setGtkRekey',
        'gtk_rekey_intv' => 'setGtkRekeyIntv',
        'eap_reauth' => 'setEapReauth',
        'eap_reauth_intv' => 'setEapReauthIntv',
        'qos_profile' => 'setQosProfile',
        'hotspot20_profile' => 'setHotspot20Profile',
        'access_control_list' => 'setAccessControlList',
        'primary_wag_profile' => 'setPrimaryWagProfile',
        'secondary_wag_profile' => 'setSecondaryWagProfile',
        'tunnel_echo_interval' => 'setTunnelEchoInterval',
        'tunnel_fallback_interval' => 'setTunnelFallbackInterval',
        'rates_11a' => 'setRates11a',
        'rates_11bg' => 'setRates11bg',
        'rates_11n_ss12' => 'setRates11nSs12',
        'rates_11n_ss34' => 'setRates11nSs34',
        'rates_11ac_ss12' => 'setRates11acSs12',
        'rates_11ac_ss34' => 'setRates11acSs34',
        'utm_profile' => 'setUtmProfile',
        'address_group' => 'setAddressGroup',
        'mac_filter' => 'setMacFilter',
        'mac_filter_policy_other' => 'setMacFilterPolicyOther',
        'mac_filter_list' => 'setMacFilterList',
        'sticky_client_remove' => 'setStickyClientRemove',
        'sticky_client_threshold_5g' => 'setStickyClientThreshold5g',
        'sticky_client_threshold_2g' => 'setStickyClientThreshold2g'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'fast_roaming' => 'getFastRoaming',
        'external_fast_roaming' => 'getExternalFastRoaming',
        'mesh_backhaul' => 'getMeshBackhaul',
        'atf_weight' => 'getAtfWeight',
        'max_clients' => 'getMaxClients',
        'max_clients_ap' => 'getMaxClientsAp',
        'ssid' => 'getSsid',
        'broadcast_ssid' => 'getBroadcastSsid',
        'security' => 'getSecurity',
        'pmf' => 'getPmf',
        'pmf_assoc_comeback_timeout' => 'getPmfAssocComebackTimeout',
        'pmf_sa_query_retry_timeout' => 'getPmfSaQueryRetryTimeout',
        'okc' => 'getOkc',
        'voice_enterprise' => 'getVoiceEnterprise',
        'fast_bss_transition' => 'getFastBssTransition',
        'ft_mobility_domain' => 'getFtMobilityDomain',
        'ft_r0_key_lifetime' => 'getFtR0KeyLifetime',
        'ft_over_ds' => 'getFtOverDs',
        'sae_groups' => 'getSaeGroups',
        'owe_groups' => 'getOweGroups',
        'owe_transition' => 'getOweTransition',
        'owe_transition_ssid' => 'getOweTransitionSsid',
        'eapol_key_retries' => 'getEapolKeyRetries',
        'tkip_counter_measure' => 'getTkipCounterMeasure',
        'external_web' => 'getExternalWeb',
        'external_web_format' => 'getExternalWebFormat',
        'external_logout' => 'getExternalLogout',
        'mac_auth_bypass' => 'getMacAuthBypass',
        'radius_mac_auth' => 'getRadiusMacAuth',
        'radius_mac_auth_server' => 'getRadiusMacAuthServer',
        'radius_mac_auth_usergroups' => 'getRadiusMacAuthUsergroups',
        'auth' => 'getAuth',
        'encrypt' => 'getEncrypt',
        'keyindex' => 'getKeyindex',
        'key' => 'getKey',
        'passphrase' => 'getPassphrase',
        'sae_password' => 'getSaePassword',
        'radius_server' => 'getRadiusServer',
        'local_standalone' => 'getLocalStandalone',
        'local_standalone_nat' => 'getLocalStandaloneNat',
        'ip' => 'getIp',
        'dhcp_lease_time' => 'getDhcpLeaseTime',
        'local_bridging' => 'getLocalBridging',
        'local_lan' => 'getLocalLan',
        'local_authentication' => 'getLocalAuthentication',
        'usergroup' => 'getUsergroup',
        'portal_message_override_group' => 'getPortalMessageOverrideGroup',
        'portal_message_overrides' => 'getPortalMessageOverrides',
        'portal_type' => 'getPortalType',
        'selected_usergroups' => 'getSelectedUsergroups',
        'security_exempt_list' => 'getSecurityExemptList',
        'security_redirect_url' => 'getSecurityRedirectUrl',
        'intra_vap_privacy' => 'getIntraVapPrivacy',
        'schedule' => 'getSchedule',
        'ldpc' => 'getLdpc',
        'high_efficiency' => 'getHighEfficiency',
        'target_wake_time' => 'getTargetWakeTime',
        'port_macauth' => 'getPortMacauth',
        'port_macauth_timeout' => 'getPortMacauthTimeout',
        'port_macauth_reauth_timeout' => 'getPortMacauthReauthTimeout',
        'bss_color_partial' => 'getBssColorPartial',
        'mpsk_profile' => 'getMpskProfile',
        'split_tunneling' => 'getSplitTunneling',
        'vlanid' => 'getVlanid',
        'vlan_auto' => 'getVlanAuto',
        'dynamic_vlan' => 'getDynamicVlan',
        'captive_portal_ac_name' => 'getCaptivePortalAcName',
        'captive_portal_auth_timeout' => 'getCaptivePortalAuthTimeout',
        'multicast_rate' => 'getMulticastRate',
        'multicast_enhance' => 'getMulticastEnhance',
        'igmp_snooping' => 'getIgmpSnooping',
        'broadcast_suppression' => 'getBroadcastSuppression',
        'ipv6_rules' => 'getIpv6Rules',
        'me_disable_thresh' => 'getMeDisableThresh',
        'mu_mimo' => 'getMuMimo',
        'probe_resp_suppression' => 'getProbeRespSuppression',
        'probe_resp_threshold' => 'getProbeRespThreshold',
        'radio_sensitivity' => 'getRadioSensitivity',
        'quarantine' => 'getQuarantine',
        'radio_5g_threshold' => 'getRadio5gThreshold',
        'radio_2g_threshold' => 'getRadio2gThreshold',
        'vlan_pooling' => 'getVlanPooling',
        'vlan_pool' => 'getVlanPool',
        'dhcp_option43_insertion' => 'getDhcpOption43Insertion',
        'dhcp_option82_insertion' => 'getDhcpOption82Insertion',
        'dhcp_option82_circuit_id_insertion' => 'getDhcpOption82CircuitIdInsertion',
        'dhcp_option82_remote_id_insertion' => 'getDhcpOption82RemoteIdInsertion',
        'ptk_rekey' => 'getPtkRekey',
        'ptk_rekey_intv' => 'getPtkRekeyIntv',
        'gtk_rekey' => 'getGtkRekey',
        'gtk_rekey_intv' => 'getGtkRekeyIntv',
        'eap_reauth' => 'getEapReauth',
        'eap_reauth_intv' => 'getEapReauthIntv',
        'qos_profile' => 'getQosProfile',
        'hotspot20_profile' => 'getHotspot20Profile',
        'access_control_list' => 'getAccessControlList',
        'primary_wag_profile' => 'getPrimaryWagProfile',
        'secondary_wag_profile' => 'getSecondaryWagProfile',
        'tunnel_echo_interval' => 'getTunnelEchoInterval',
        'tunnel_fallback_interval' => 'getTunnelFallbackInterval',
        'rates_11a' => 'getRates11a',
        'rates_11bg' => 'getRates11bg',
        'rates_11n_ss12' => 'getRates11nSs12',
        'rates_11n_ss34' => 'getRates11nSs34',
        'rates_11ac_ss12' => 'getRates11acSs12',
        'rates_11ac_ss34' => 'getRates11acSs34',
        'utm_profile' => 'getUtmProfile',
        'address_group' => 'getAddressGroup',
        'mac_filter' => 'getMacFilter',
        'mac_filter_policy_other' => 'getMacFilterPolicyOther',
        'mac_filter_list' => 'getMacFilterList',
        'sticky_client_remove' => 'getStickyClientRemove',
        'sticky_client_threshold_5g' => 'getStickyClientThreshold5g',
        'sticky_client_threshold_2g' => 'getStickyClientThreshold2g'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FAST_ROAMING_ENABLE = 'enable';
    const FAST_ROAMING_DISABLE = 'disable';
    const EXTERNAL_FAST_ROAMING_ENABLE = 'enable';
    const EXTERNAL_FAST_ROAMING_DISABLE = 'disable';
    const MESH_BACKHAUL_ENABLE = 'enable';
    const MESH_BACKHAUL_DISABLE = 'disable';
    const BROADCAST_SSID_ENABLE = 'enable';
    const BROADCAST_SSID_DISABLE = 'disable';
    const SECURITY_OPEN = 'open';
    const SECURITY_CAPTIVE_PORTAL = 'captive-portal';
    const SECURITY_WEP64 = 'wep64';
    const SECURITY_WEP128 = 'wep128';
    const SECURITY_WPA_PERSONAL = 'wpa-personal';
    const SECURITY_WPA_PERSONALCAPTIVE_PORTAL = 'wpa-personal+captive-portal';
    const SECURITY_WPA_ENTERPRISE = 'wpa-enterprise';
    const SECURITY_WPA_ONLY_PERSONAL = 'wpa-only-personal';
    const SECURITY_WPA_ONLY_PERSONALCAPTIVE_PORTAL = 'wpa-only-personal+captive-portal';
    const SECURITY_WPA_ONLY_ENTERPRISE = 'wpa-only-enterprise';
    const SECURITY_WPA2_ONLY_PERSONAL = 'wpa2-only-personal';
    const SECURITY_WPA2_ONLY_PERSONALCAPTIVE_PORTAL = 'wpa2-only-personal+captive-portal';
    const SECURITY_WPA2_ONLY_ENTERPRISE = 'wpa2-only-enterprise';
    const SECURITY_WPA3_ENTERPRISE = 'wpa3-enterprise';
    const SECURITY_WPA3_SAE = 'wpa3-sae';
    const SECURITY_WPA3_SAE_TRANSITION = 'wpa3-sae-transition';
    const SECURITY_OWE = 'owe';
    const SECURITY_OSEN = 'osen';
    const PMF_DISABLE = 'disable';
    const PMF_ENABLE = 'enable';
    const PMF_OPTIONAL = 'optional';
    const OKC_DISABLE = 'disable';
    const OKC_ENABLE = 'enable';
    const VOICE_ENTERPRISE_DISABLE = 'disable';
    const VOICE_ENTERPRISE_ENABLE = 'enable';
    const FAST_BSS_TRANSITION_DISABLE = 'disable';
    const FAST_BSS_TRANSITION_ENABLE = 'enable';
    const FT_OVER_DS_DISABLE = 'disable';
    const FT_OVER_DS_ENABLE = 'enable';
    const SAE_GROUPS__19 = '19';
    const SAE_GROUPS__20 = '20';
    const SAE_GROUPS__21 = '21';
    const OWE_GROUPS__19 = '19';
    const OWE_GROUPS__20 = '20';
    const OWE_GROUPS__21 = '21';
    const OWE_TRANSITION_DISABLE = 'disable';
    const OWE_TRANSITION_ENABLE = 'enable';
    const EAPOL_KEY_RETRIES_DISABLE = 'disable';
    const EAPOL_KEY_RETRIES_ENABLE = 'enable';
    const TKIP_COUNTER_MEASURE_ENABLE = 'enable';
    const TKIP_COUNTER_MEASURE_DISABLE = 'disable';
    const EXTERNAL_WEB_FORMAT_AUTO_DETECT = 'auto-detect';
    const EXTERNAL_WEB_FORMAT_NO_QUERY_STRING = 'no-query-string';
    const EXTERNAL_WEB_FORMAT_PARTIAL_QUERY_STRING = 'partial-query-string';
    const MAC_AUTH_BYPASS_ENABLE = 'enable';
    const MAC_AUTH_BYPASS_DISABLE = 'disable';
    const RADIUS_MAC_AUTH_ENABLE = 'enable';
    const RADIUS_MAC_AUTH_DISABLE = 'disable';
    const AUTH_PSK = 'psk';
    const AUTH_RADIUS = 'radius';
    const AUTH_USERGROUP = 'usergroup';
    const ENCRYPT_TKIP = 'TKIP';
    const ENCRYPT_AES = 'AES';
    const ENCRYPT_TKIP_AES = 'TKIP-AES';
    const LOCAL_STANDALONE_ENABLE = 'enable';
    const LOCAL_STANDALONE_DISABLE = 'disable';
    const LOCAL_STANDALONE_NAT_ENABLE = 'enable';
    const LOCAL_STANDALONE_NAT_DISABLE = 'disable';
    const LOCAL_BRIDGING_ENABLE = 'enable';
    const LOCAL_BRIDGING_DISABLE = 'disable';
    const LOCAL_LAN_ALLOW = 'allow';
    const LOCAL_LAN_DENY = 'deny';
    const LOCAL_AUTHENTICATION_ENABLE = 'enable';
    const LOCAL_AUTHENTICATION_DISABLE = 'disable';
    const PORTAL_TYPE_AUTH = 'auth';
    const PORTAL_TYPE_AUTHDISCLAIMER = 'auth+disclaimer';
    const PORTAL_TYPE_DISCLAIMER = 'disclaimer';
    const PORTAL_TYPE_EMAIL_COLLECT = 'email-collect';
    const PORTAL_TYPE_CMCC = 'cmcc';
    const PORTAL_TYPE_CMCC_MACAUTH = 'cmcc-macauth';
    const PORTAL_TYPE_AUTH_MAC = 'auth-mac';
    const PORTAL_TYPE_EXTERNAL_AUTH = 'external-auth';
    const INTRA_VAP_PRIVACY_ENABLE = 'enable';
    const INTRA_VAP_PRIVACY_DISABLE = 'disable';
    const LDPC_DISABLE = 'disable';
    const LDPC_RX = 'rx';
    const LDPC_TX = 'tx';
    const LDPC_RXTX = 'rxtx';
    const HIGH_EFFICIENCY_ENABLE = 'enable';
    const HIGH_EFFICIENCY_DISABLE = 'disable';
    const TARGET_WAKE_TIME_ENABLE = 'enable';
    const TARGET_WAKE_TIME_DISABLE = 'disable';
    const PORT_MACAUTH_DISABLE = 'disable';
    const PORT_MACAUTH_RADIUS = 'radius';
    const PORT_MACAUTH_ADDRESS_GROUP = 'address-group';
    const BSS_COLOR_PARTIAL_ENABLE = 'enable';
    const BSS_COLOR_PARTIAL_DISABLE = 'disable';
    const SPLIT_TUNNELING_ENABLE = 'enable';
    const SPLIT_TUNNELING_DISABLE = 'disable';
    const VLAN_AUTO_ENABLE = 'enable';
    const VLAN_AUTO_DISABLE = 'disable';
    const DYNAMIC_VLAN_ENABLE = 'enable';
    const DYNAMIC_VLAN_DISABLE = 'disable';
    const MULTICAST_RATE__0 = '0';
    const MULTICAST_RATE__6000 = '6000';
    const MULTICAST_RATE__12000 = '12000';
    const MULTICAST_RATE__24000 = '24000';
    const MULTICAST_ENHANCE_ENABLE = 'enable';
    const MULTICAST_ENHANCE_DISABLE = 'disable';
    const IGMP_SNOOPING_ENABLE = 'enable';
    const IGMP_SNOOPING_DISABLE = 'disable';
    const BROADCAST_SUPPRESSION_DHCP_UP = 'dhcp-up';
    const BROADCAST_SUPPRESSION_DHCP_DOWN = 'dhcp-down';
    const BROADCAST_SUPPRESSION_DHCP_STARVATION = 'dhcp-starvation';
    const BROADCAST_SUPPRESSION_DHCP_UCAST = 'dhcp-ucast';
    const BROADCAST_SUPPRESSION_ARP_KNOWN = 'arp-known';
    const BROADCAST_SUPPRESSION_ARP_UNKNOWN = 'arp-unknown';
    const BROADCAST_SUPPRESSION_ARP_REPLY = 'arp-reply';
    const BROADCAST_SUPPRESSION_ARP_POISON = 'arp-poison';
    const BROADCAST_SUPPRESSION_ARP_PROXY = 'arp-proxy';
    const BROADCAST_SUPPRESSION_NETBIOS_NS = 'netbios-ns';
    const BROADCAST_SUPPRESSION_NETBIOS_DS = 'netbios-ds';
    const BROADCAST_SUPPRESSION_IPV6 = 'ipv6';
    const BROADCAST_SUPPRESSION_ALL_OTHER_MC = 'all-other-mc';
    const BROADCAST_SUPPRESSION_ALL_OTHER_BC = 'all-other-bc';
    const IPV6_RULES_DROP_ICMP6RA = 'drop-icmp6ra';
    const IPV6_RULES_DROP_ICMP6RS = 'drop-icmp6rs';
    const IPV6_RULES_DROP_LLMNR6 = 'drop-llmnr6';
    const IPV6_RULES_DROP_ICMP6MLD2 = 'drop-icmp6mld2';
    const IPV6_RULES_DROP_DHCP6S = 'drop-dhcp6s';
    const IPV6_RULES_DROP_DHCP6C = 'drop-dhcp6c';
    const IPV6_RULES_NDP_PROXY = 'ndp-proxy';
    const IPV6_RULES_DROP_NS_DAD = 'drop-ns-dad';
    const IPV6_RULES_DROP_NS_NONDAD = 'drop-ns-nondad';
    const MU_MIMO_ENABLE = 'enable';
    const MU_MIMO_DISABLE = 'disable';
    const PROBE_RESP_SUPPRESSION_ENABLE = 'enable';
    const PROBE_RESP_SUPPRESSION_DISABLE = 'disable';
    const RADIO_SENSITIVITY_ENABLE = 'enable';
    const RADIO_SENSITIVITY_DISABLE = 'disable';
    const QUARANTINE_ENABLE = 'enable';
    const QUARANTINE_DISABLE = 'disable';
    const VLAN_POOLING_WTP_GROUP = 'wtp-group';
    const VLAN_POOLING_ROUND_ROBIN = 'round-robin';
    const VLAN_POOLING_HASH = 'hash';
    const VLAN_POOLING_DISABLE = 'disable';
    const DHCP_OPTION43_INSERTION_ENABLE = 'enable';
    const DHCP_OPTION43_INSERTION_DISABLE = 'disable';
    const DHCP_OPTION82_INSERTION_ENABLE = 'enable';
    const DHCP_OPTION82_INSERTION_DISABLE = 'disable';
    const DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_1 = 'style-1';
    const DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_2 = 'style-2';
    const DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_3 = 'style-3';
    const DHCP_OPTION82_CIRCUIT_ID_INSERTION_DISABLE = 'disable';
    const DHCP_OPTION82_REMOTE_ID_INSERTION_STYLE_1 = 'style-1';
    const DHCP_OPTION82_REMOTE_ID_INSERTION_DISABLE = 'disable';
    const PTK_REKEY_ENABLE = 'enable';
    const PTK_REKEY_DISABLE = 'disable';
    const GTK_REKEY_ENABLE = 'enable';
    const GTK_REKEY_DISABLE = 'disable';
    const EAP_REAUTH_ENABLE = 'enable';
    const EAP_REAUTH_DISABLE = 'disable';
    const RATES_11A__1 = '1';
    const RATES_11A__1_BASIC = '1-basic';
    const RATES_11A__2 = '2';
    const RATES_11A__2_BASIC = '2-basic';
    const RATES_11A__5_5 = '5.5';
    const RATES_11A__5_5_BASIC = '5.5-basic';
    const RATES_11A__11 = '11';
    const RATES_11A__11_BASIC = '11-basic';
    const RATES_11A__6 = '6';
    const RATES_11A__6_BASIC = '6-basic';
    const RATES_11A__9 = '9';
    const RATES_11A__9_BASIC = '9-basic';
    const RATES_11A__12 = '12';
    const RATES_11A__12_BASIC = '12-basic';
    const RATES_11A__18 = '18';
    const RATES_11A__18_BASIC = '18-basic';
    const RATES_11A__24 = '24';
    const RATES_11A__24_BASIC = '24-basic';
    const RATES_11A__36 = '36';
    const RATES_11A__36_BASIC = '36-basic';
    const RATES_11A__48 = '48';
    const RATES_11A__48_BASIC = '48-basic';
    const RATES_11A__54 = '54';
    const RATES_11A__54_BASIC = '54-basic';
    const RATES_11BG__1 = '1';
    const RATES_11BG__1_BASIC = '1-basic';
    const RATES_11BG__2 = '2';
    const RATES_11BG__2_BASIC = '2-basic';
    const RATES_11BG__5_5 = '5.5';
    const RATES_11BG__5_5_BASIC = '5.5-basic';
    const RATES_11BG__11 = '11';
    const RATES_11BG__11_BASIC = '11-basic';
    const RATES_11BG__6 = '6';
    const RATES_11BG__6_BASIC = '6-basic';
    const RATES_11BG__9 = '9';
    const RATES_11BG__9_BASIC = '9-basic';
    const RATES_11BG__12 = '12';
    const RATES_11BG__12_BASIC = '12-basic';
    const RATES_11BG__18 = '18';
    const RATES_11BG__18_BASIC = '18-basic';
    const RATES_11BG__24 = '24';
    const RATES_11BG__24_BASIC = '24-basic';
    const RATES_11BG__36 = '36';
    const RATES_11BG__36_BASIC = '36-basic';
    const RATES_11BG__48 = '48';
    const RATES_11BG__48_BASIC = '48-basic';
    const RATES_11BG__54 = '54';
    const RATES_11BG__54_BASIC = '54-basic';
    const RATES_11N_SS12_MCS0_1 = 'mcs0/1';
    const RATES_11N_SS12_MCS1_1 = 'mcs1/1';
    const RATES_11N_SS12_MCS2_1 = 'mcs2/1';
    const RATES_11N_SS12_MCS3_1 = 'mcs3/1';
    const RATES_11N_SS12_MCS4_1 = 'mcs4/1';
    const RATES_11N_SS12_MCS5_1 = 'mcs5/1';
    const RATES_11N_SS12_MCS6_1 = 'mcs6/1';
    const RATES_11N_SS12_MCS7_1 = 'mcs7/1';
    const RATES_11N_SS12_MCS8_2 = 'mcs8/2';
    const RATES_11N_SS12_MCS9_2 = 'mcs9/2';
    const RATES_11N_SS12_MCS10_2 = 'mcs10/2';
    const RATES_11N_SS12_MCS11_2 = 'mcs11/2';
    const RATES_11N_SS12_MCS12_2 = 'mcs12/2';
    const RATES_11N_SS12_MCS13_2 = 'mcs13/2';
    const RATES_11N_SS12_MCS14_2 = 'mcs14/2';
    const RATES_11N_SS12_MCS15_2 = 'mcs15/2';
    const RATES_11N_SS34_MCS16_3 = 'mcs16/3';
    const RATES_11N_SS34_MCS17_3 = 'mcs17/3';
    const RATES_11N_SS34_MCS18_3 = 'mcs18/3';
    const RATES_11N_SS34_MCS19_3 = 'mcs19/3';
    const RATES_11N_SS34_MCS20_3 = 'mcs20/3';
    const RATES_11N_SS34_MCS21_3 = 'mcs21/3';
    const RATES_11N_SS34_MCS22_3 = 'mcs22/3';
    const RATES_11N_SS34_MCS23_3 = 'mcs23/3';
    const RATES_11N_SS34_MCS24_4 = 'mcs24/4';
    const RATES_11N_SS34_MCS25_4 = 'mcs25/4';
    const RATES_11N_SS34_MCS26_4 = 'mcs26/4';
    const RATES_11N_SS34_MCS27_4 = 'mcs27/4';
    const RATES_11N_SS34_MCS28_4 = 'mcs28/4';
    const RATES_11N_SS34_MCS29_4 = 'mcs29/4';
    const RATES_11N_SS34_MCS30_4 = 'mcs30/4';
    const RATES_11N_SS34_MCS31_4 = 'mcs31/4';
    const RATES_11AC_SS12_MCS0_1 = 'mcs0/1';
    const RATES_11AC_SS12_MCS1_1 = 'mcs1/1';
    const RATES_11AC_SS12_MCS2_1 = 'mcs2/1';
    const RATES_11AC_SS12_MCS3_1 = 'mcs3/1';
    const RATES_11AC_SS12_MCS4_1 = 'mcs4/1';
    const RATES_11AC_SS12_MCS5_1 = 'mcs5/1';
    const RATES_11AC_SS12_MCS6_1 = 'mcs6/1';
    const RATES_11AC_SS12_MCS7_1 = 'mcs7/1';
    const RATES_11AC_SS12_MCS8_1 = 'mcs8/1';
    const RATES_11AC_SS12_MCS9_1 = 'mcs9/1';
    const RATES_11AC_SS12_MCS10_1 = 'mcs10/1';
    const RATES_11AC_SS12_MCS11_1 = 'mcs11/1';
    const RATES_11AC_SS12_MCS0_2 = 'mcs0/2';
    const RATES_11AC_SS12_MCS1_2 = 'mcs1/2';
    const RATES_11AC_SS12_MCS2_2 = 'mcs2/2';
    const RATES_11AC_SS12_MCS3_2 = 'mcs3/2';
    const RATES_11AC_SS12_MCS4_2 = 'mcs4/2';
    const RATES_11AC_SS12_MCS5_2 = 'mcs5/2';
    const RATES_11AC_SS12_MCS6_2 = 'mcs6/2';
    const RATES_11AC_SS12_MCS7_2 = 'mcs7/2';
    const RATES_11AC_SS12_MCS8_2 = 'mcs8/2';
    const RATES_11AC_SS12_MCS9_2 = 'mcs9/2';
    const RATES_11AC_SS12_MCS10_2 = 'mcs10/2';
    const RATES_11AC_SS12_MCS11_2 = 'mcs11/2';
    const RATES_11AC_SS34_MCS0_3 = 'mcs0/3';
    const RATES_11AC_SS34_MCS1_3 = 'mcs1/3';
    const RATES_11AC_SS34_MCS2_3 = 'mcs2/3';
    const RATES_11AC_SS34_MCS3_3 = 'mcs3/3';
    const RATES_11AC_SS34_MCS4_3 = 'mcs4/3';
    const RATES_11AC_SS34_MCS5_3 = 'mcs5/3';
    const RATES_11AC_SS34_MCS6_3 = 'mcs6/3';
    const RATES_11AC_SS34_MCS7_3 = 'mcs7/3';
    const RATES_11AC_SS34_MCS8_3 = 'mcs8/3';
    const RATES_11AC_SS34_MCS9_3 = 'mcs9/3';
    const RATES_11AC_SS34_MCS10_3 = 'mcs10/3';
    const RATES_11AC_SS34_MCS11_3 = 'mcs11/3';
    const RATES_11AC_SS34_MCS0_4 = 'mcs0/4';
    const RATES_11AC_SS34_MCS1_4 = 'mcs1/4';
    const RATES_11AC_SS34_MCS2_4 = 'mcs2/4';
    const RATES_11AC_SS34_MCS3_4 = 'mcs3/4';
    const RATES_11AC_SS34_MCS4_4 = 'mcs4/4';
    const RATES_11AC_SS34_MCS5_4 = 'mcs5/4';
    const RATES_11AC_SS34_MCS6_4 = 'mcs6/4';
    const RATES_11AC_SS34_MCS7_4 = 'mcs7/4';
    const RATES_11AC_SS34_MCS8_4 = 'mcs8/4';
    const RATES_11AC_SS34_MCS9_4 = 'mcs9/4';
    const RATES_11AC_SS34_MCS10_4 = 'mcs10/4';
    const RATES_11AC_SS34_MCS11_4 = 'mcs11/4';
    const MAC_FILTER_ENABLE = 'enable';
    const MAC_FILTER_DISABLE = 'disable';
    const MAC_FILTER_POLICY_OTHER_ALLOW = 'allow';
    const MAC_FILTER_POLICY_OTHER_DENY = 'deny';
    const STICKY_CLIENT_REMOVE_ENABLE = 'enable';
    const STICKY_CLIENT_REMOVE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFastRoamingAllowableValues()
    {
        return [
            self::FAST_ROAMING_ENABLE,
            self::FAST_ROAMING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalFastRoamingAllowableValues()
    {
        return [
            self::EXTERNAL_FAST_ROAMING_ENABLE,
            self::EXTERNAL_FAST_ROAMING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeshBackhaulAllowableValues()
    {
        return [
            self::MESH_BACKHAUL_ENABLE,
            self::MESH_BACKHAUL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBroadcastSsidAllowableValues()
    {
        return [
            self::BROADCAST_SSID_ENABLE,
            self::BROADCAST_SSID_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityAllowableValues()
    {
        return [
            self::SECURITY_OPEN,
            self::SECURITY_CAPTIVE_PORTAL,
            self::SECURITY_WEP64,
            self::SECURITY_WEP128,
            self::SECURITY_WPA_PERSONAL,
            self::SECURITY_WPA_PERSONALCAPTIVE_PORTAL,
            self::SECURITY_WPA_ENTERPRISE,
            self::SECURITY_WPA_ONLY_PERSONAL,
            self::SECURITY_WPA_ONLY_PERSONALCAPTIVE_PORTAL,
            self::SECURITY_WPA_ONLY_ENTERPRISE,
            self::SECURITY_WPA2_ONLY_PERSONAL,
            self::SECURITY_WPA2_ONLY_PERSONALCAPTIVE_PORTAL,
            self::SECURITY_WPA2_ONLY_ENTERPRISE,
            self::SECURITY_WPA3_ENTERPRISE,
            self::SECURITY_WPA3_SAE,
            self::SECURITY_WPA3_SAE_TRANSITION,
            self::SECURITY_OWE,
            self::SECURITY_OSEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPmfAllowableValues()
    {
        return [
            self::PMF_DISABLE,
            self::PMF_ENABLE,
            self::PMF_OPTIONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOkcAllowableValues()
    {
        return [
            self::OKC_DISABLE,
            self::OKC_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceEnterpriseAllowableValues()
    {
        return [
            self::VOICE_ENTERPRISE_DISABLE,
            self::VOICE_ENTERPRISE_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFastBssTransitionAllowableValues()
    {
        return [
            self::FAST_BSS_TRANSITION_DISABLE,
            self::FAST_BSS_TRANSITION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFtOverDsAllowableValues()
    {
        return [
            self::FT_OVER_DS_DISABLE,
            self::FT_OVER_DS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaeGroupsAllowableValues()
    {
        return [
            self::SAE_GROUPS__19,
            self::SAE_GROUPS__20,
            self::SAE_GROUPS__21,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOweGroupsAllowableValues()
    {
        return [
            self::OWE_GROUPS__19,
            self::OWE_GROUPS__20,
            self::OWE_GROUPS__21,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOweTransitionAllowableValues()
    {
        return [
            self::OWE_TRANSITION_DISABLE,
            self::OWE_TRANSITION_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapolKeyRetriesAllowableValues()
    {
        return [
            self::EAPOL_KEY_RETRIES_DISABLE,
            self::EAPOL_KEY_RETRIES_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTkipCounterMeasureAllowableValues()
    {
        return [
            self::TKIP_COUNTER_MEASURE_ENABLE,
            self::TKIP_COUNTER_MEASURE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalWebFormatAllowableValues()
    {
        return [
            self::EXTERNAL_WEB_FORMAT_AUTO_DETECT,
            self::EXTERNAL_WEB_FORMAT_NO_QUERY_STRING,
            self::EXTERNAL_WEB_FORMAT_PARTIAL_QUERY_STRING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacAuthBypassAllowableValues()
    {
        return [
            self::MAC_AUTH_BYPASS_ENABLE,
            self::MAC_AUTH_BYPASS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadiusMacAuthAllowableValues()
    {
        return [
            self::RADIUS_MAC_AUTH_ENABLE,
            self::RADIUS_MAC_AUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthAllowableValues()
    {
        return [
            self::AUTH_PSK,
            self::AUTH_RADIUS,
            self::AUTH_USERGROUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptAllowableValues()
    {
        return [
            self::ENCRYPT_TKIP,
            self::ENCRYPT_AES,
            self::ENCRYPT_TKIP_AES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalStandaloneAllowableValues()
    {
        return [
            self::LOCAL_STANDALONE_ENABLE,
            self::LOCAL_STANDALONE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalStandaloneNatAllowableValues()
    {
        return [
            self::LOCAL_STANDALONE_NAT_ENABLE,
            self::LOCAL_STANDALONE_NAT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalBridgingAllowableValues()
    {
        return [
            self::LOCAL_BRIDGING_ENABLE,
            self::LOCAL_BRIDGING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalLanAllowableValues()
    {
        return [
            self::LOCAL_LAN_ALLOW,
            self::LOCAL_LAN_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalAuthenticationAllowableValues()
    {
        return [
            self::LOCAL_AUTHENTICATION_ENABLE,
            self::LOCAL_AUTHENTICATION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortalTypeAllowableValues()
    {
        return [
            self::PORTAL_TYPE_AUTH,
            self::PORTAL_TYPE_AUTHDISCLAIMER,
            self::PORTAL_TYPE_DISCLAIMER,
            self::PORTAL_TYPE_EMAIL_COLLECT,
            self::PORTAL_TYPE_CMCC,
            self::PORTAL_TYPE_CMCC_MACAUTH,
            self::PORTAL_TYPE_AUTH_MAC,
            self::PORTAL_TYPE_EXTERNAL_AUTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntraVapPrivacyAllowableValues()
    {
        return [
            self::INTRA_VAP_PRIVACY_ENABLE,
            self::INTRA_VAP_PRIVACY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLdpcAllowableValues()
    {
        return [
            self::LDPC_DISABLE,
            self::LDPC_RX,
            self::LDPC_TX,
            self::LDPC_RXTX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHighEfficiencyAllowableValues()
    {
        return [
            self::HIGH_EFFICIENCY_ENABLE,
            self::HIGH_EFFICIENCY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetWakeTimeAllowableValues()
    {
        return [
            self::TARGET_WAKE_TIME_ENABLE,
            self::TARGET_WAKE_TIME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPortMacauthAllowableValues()
    {
        return [
            self::PORT_MACAUTH_DISABLE,
            self::PORT_MACAUTH_RADIUS,
            self::PORT_MACAUTH_ADDRESS_GROUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBssColorPartialAllowableValues()
    {
        return [
            self::BSS_COLOR_PARTIAL_ENABLE,
            self::BSS_COLOR_PARTIAL_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplitTunnelingAllowableValues()
    {
        return [
            self::SPLIT_TUNNELING_ENABLE,
            self::SPLIT_TUNNELING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanAutoAllowableValues()
    {
        return [
            self::VLAN_AUTO_ENABLE,
            self::VLAN_AUTO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDynamicVlanAllowableValues()
    {
        return [
            self::DYNAMIC_VLAN_ENABLE,
            self::DYNAMIC_VLAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastRateAllowableValues()
    {
        return [
            self::MULTICAST_RATE__0,
            self::MULTICAST_RATE__6000,
            self::MULTICAST_RATE__12000,
            self::MULTICAST_RATE__24000,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastEnhanceAllowableValues()
    {
        return [
            self::MULTICAST_ENHANCE_ENABLE,
            self::MULTICAST_ENHANCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgmpSnoopingAllowableValues()
    {
        return [
            self::IGMP_SNOOPING_ENABLE,
            self::IGMP_SNOOPING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBroadcastSuppressionAllowableValues()
    {
        return [
            self::BROADCAST_SUPPRESSION_DHCP_UP,
            self::BROADCAST_SUPPRESSION_DHCP_DOWN,
            self::BROADCAST_SUPPRESSION_DHCP_STARVATION,
            self::BROADCAST_SUPPRESSION_DHCP_UCAST,
            self::BROADCAST_SUPPRESSION_ARP_KNOWN,
            self::BROADCAST_SUPPRESSION_ARP_UNKNOWN,
            self::BROADCAST_SUPPRESSION_ARP_REPLY,
            self::BROADCAST_SUPPRESSION_ARP_POISON,
            self::BROADCAST_SUPPRESSION_ARP_PROXY,
            self::BROADCAST_SUPPRESSION_NETBIOS_NS,
            self::BROADCAST_SUPPRESSION_NETBIOS_DS,
            self::BROADCAST_SUPPRESSION_IPV6,
            self::BROADCAST_SUPPRESSION_ALL_OTHER_MC,
            self::BROADCAST_SUPPRESSION_ALL_OTHER_BC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv6RulesAllowableValues()
    {
        return [
            self::IPV6_RULES_DROP_ICMP6RA,
            self::IPV6_RULES_DROP_ICMP6RS,
            self::IPV6_RULES_DROP_LLMNR6,
            self::IPV6_RULES_DROP_ICMP6MLD2,
            self::IPV6_RULES_DROP_DHCP6S,
            self::IPV6_RULES_DROP_DHCP6C,
            self::IPV6_RULES_NDP_PROXY,
            self::IPV6_RULES_DROP_NS_DAD,
            self::IPV6_RULES_DROP_NS_NONDAD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMuMimoAllowableValues()
    {
        return [
            self::MU_MIMO_ENABLE,
            self::MU_MIMO_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProbeRespSuppressionAllowableValues()
    {
        return [
            self::PROBE_RESP_SUPPRESSION_ENABLE,
            self::PROBE_RESP_SUPPRESSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadioSensitivityAllowableValues()
    {
        return [
            self::RADIO_SENSITIVITY_ENABLE,
            self::RADIO_SENSITIVITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuarantineAllowableValues()
    {
        return [
            self::QUARANTINE_ENABLE,
            self::QUARANTINE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVlanPoolingAllowableValues()
    {
        return [
            self::VLAN_POOLING_WTP_GROUP,
            self::VLAN_POOLING_ROUND_ROBIN,
            self::VLAN_POOLING_HASH,
            self::VLAN_POOLING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpOption43InsertionAllowableValues()
    {
        return [
            self::DHCP_OPTION43_INSERTION_ENABLE,
            self::DHCP_OPTION43_INSERTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpOption82InsertionAllowableValues()
    {
        return [
            self::DHCP_OPTION82_INSERTION_ENABLE,
            self::DHCP_OPTION82_INSERTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpOption82CircuitIdInsertionAllowableValues()
    {
        return [
            self::DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_1,
            self::DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_2,
            self::DHCP_OPTION82_CIRCUIT_ID_INSERTION_STYLE_3,
            self::DHCP_OPTION82_CIRCUIT_ID_INSERTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpOption82RemoteIdInsertionAllowableValues()
    {
        return [
            self::DHCP_OPTION82_REMOTE_ID_INSERTION_STYLE_1,
            self::DHCP_OPTION82_REMOTE_ID_INSERTION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPtkRekeyAllowableValues()
    {
        return [
            self::PTK_REKEY_ENABLE,
            self::PTK_REKEY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGtkRekeyAllowableValues()
    {
        return [
            self::GTK_REKEY_ENABLE,
            self::GTK_REKEY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEapReauthAllowableValues()
    {
        return [
            self::EAP_REAUTH_ENABLE,
            self::EAP_REAUTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11aAllowableValues()
    {
        return [
            self::RATES_11A__1,
            self::RATES_11A__1_BASIC,
            self::RATES_11A__2,
            self::RATES_11A__2_BASIC,
            self::RATES_11A__5_5,
            self::RATES_11A__5_5_BASIC,
            self::RATES_11A__11,
            self::RATES_11A__11_BASIC,
            self::RATES_11A__6,
            self::RATES_11A__6_BASIC,
            self::RATES_11A__9,
            self::RATES_11A__9_BASIC,
            self::RATES_11A__12,
            self::RATES_11A__12_BASIC,
            self::RATES_11A__18,
            self::RATES_11A__18_BASIC,
            self::RATES_11A__24,
            self::RATES_11A__24_BASIC,
            self::RATES_11A__36,
            self::RATES_11A__36_BASIC,
            self::RATES_11A__48,
            self::RATES_11A__48_BASIC,
            self::RATES_11A__54,
            self::RATES_11A__54_BASIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11bgAllowableValues()
    {
        return [
            self::RATES_11BG__1,
            self::RATES_11BG__1_BASIC,
            self::RATES_11BG__2,
            self::RATES_11BG__2_BASIC,
            self::RATES_11BG__5_5,
            self::RATES_11BG__5_5_BASIC,
            self::RATES_11BG__11,
            self::RATES_11BG__11_BASIC,
            self::RATES_11BG__6,
            self::RATES_11BG__6_BASIC,
            self::RATES_11BG__9,
            self::RATES_11BG__9_BASIC,
            self::RATES_11BG__12,
            self::RATES_11BG__12_BASIC,
            self::RATES_11BG__18,
            self::RATES_11BG__18_BASIC,
            self::RATES_11BG__24,
            self::RATES_11BG__24_BASIC,
            self::RATES_11BG__36,
            self::RATES_11BG__36_BASIC,
            self::RATES_11BG__48,
            self::RATES_11BG__48_BASIC,
            self::RATES_11BG__54,
            self::RATES_11BG__54_BASIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11nSs12AllowableValues()
    {
        return [
            self::RATES_11N_SS12_MCS0_1,
            self::RATES_11N_SS12_MCS1_1,
            self::RATES_11N_SS12_MCS2_1,
            self::RATES_11N_SS12_MCS3_1,
            self::RATES_11N_SS12_MCS4_1,
            self::RATES_11N_SS12_MCS5_1,
            self::RATES_11N_SS12_MCS6_1,
            self::RATES_11N_SS12_MCS7_1,
            self::RATES_11N_SS12_MCS8_2,
            self::RATES_11N_SS12_MCS9_2,
            self::RATES_11N_SS12_MCS10_2,
            self::RATES_11N_SS12_MCS11_2,
            self::RATES_11N_SS12_MCS12_2,
            self::RATES_11N_SS12_MCS13_2,
            self::RATES_11N_SS12_MCS14_2,
            self::RATES_11N_SS12_MCS15_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11nSs34AllowableValues()
    {
        return [
            self::RATES_11N_SS34_MCS16_3,
            self::RATES_11N_SS34_MCS17_3,
            self::RATES_11N_SS34_MCS18_3,
            self::RATES_11N_SS34_MCS19_3,
            self::RATES_11N_SS34_MCS20_3,
            self::RATES_11N_SS34_MCS21_3,
            self::RATES_11N_SS34_MCS22_3,
            self::RATES_11N_SS34_MCS23_3,
            self::RATES_11N_SS34_MCS24_4,
            self::RATES_11N_SS34_MCS25_4,
            self::RATES_11N_SS34_MCS26_4,
            self::RATES_11N_SS34_MCS27_4,
            self::RATES_11N_SS34_MCS28_4,
            self::RATES_11N_SS34_MCS29_4,
            self::RATES_11N_SS34_MCS30_4,
            self::RATES_11N_SS34_MCS31_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11acSs12AllowableValues()
    {
        return [
            self::RATES_11AC_SS12_MCS0_1,
            self::RATES_11AC_SS12_MCS1_1,
            self::RATES_11AC_SS12_MCS2_1,
            self::RATES_11AC_SS12_MCS3_1,
            self::RATES_11AC_SS12_MCS4_1,
            self::RATES_11AC_SS12_MCS5_1,
            self::RATES_11AC_SS12_MCS6_1,
            self::RATES_11AC_SS12_MCS7_1,
            self::RATES_11AC_SS12_MCS8_1,
            self::RATES_11AC_SS12_MCS9_1,
            self::RATES_11AC_SS12_MCS10_1,
            self::RATES_11AC_SS12_MCS11_1,
            self::RATES_11AC_SS12_MCS0_2,
            self::RATES_11AC_SS12_MCS1_2,
            self::RATES_11AC_SS12_MCS2_2,
            self::RATES_11AC_SS12_MCS3_2,
            self::RATES_11AC_SS12_MCS4_2,
            self::RATES_11AC_SS12_MCS5_2,
            self::RATES_11AC_SS12_MCS6_2,
            self::RATES_11AC_SS12_MCS7_2,
            self::RATES_11AC_SS12_MCS8_2,
            self::RATES_11AC_SS12_MCS9_2,
            self::RATES_11AC_SS12_MCS10_2,
            self::RATES_11AC_SS12_MCS11_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRates11acSs34AllowableValues()
    {
        return [
            self::RATES_11AC_SS34_MCS0_3,
            self::RATES_11AC_SS34_MCS1_3,
            self::RATES_11AC_SS34_MCS2_3,
            self::RATES_11AC_SS34_MCS3_3,
            self::RATES_11AC_SS34_MCS4_3,
            self::RATES_11AC_SS34_MCS5_3,
            self::RATES_11AC_SS34_MCS6_3,
            self::RATES_11AC_SS34_MCS7_3,
            self::RATES_11AC_SS34_MCS8_3,
            self::RATES_11AC_SS34_MCS9_3,
            self::RATES_11AC_SS34_MCS10_3,
            self::RATES_11AC_SS34_MCS11_3,
            self::RATES_11AC_SS34_MCS0_4,
            self::RATES_11AC_SS34_MCS1_4,
            self::RATES_11AC_SS34_MCS2_4,
            self::RATES_11AC_SS34_MCS3_4,
            self::RATES_11AC_SS34_MCS4_4,
            self::RATES_11AC_SS34_MCS5_4,
            self::RATES_11AC_SS34_MCS6_4,
            self::RATES_11AC_SS34_MCS7_4,
            self::RATES_11AC_SS34_MCS8_4,
            self::RATES_11AC_SS34_MCS9_4,
            self::RATES_11AC_SS34_MCS10_4,
            self::RATES_11AC_SS34_MCS11_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacFilterAllowableValues()
    {
        return [
            self::MAC_FILTER_ENABLE,
            self::MAC_FILTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMacFilterPolicyOtherAllowableValues()
    {
        return [
            self::MAC_FILTER_POLICY_OTHER_ALLOW,
            self::MAC_FILTER_POLICY_OTHER_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStickyClientRemoveAllowableValues()
    {
        return [
            self::STICKY_CLIENT_REMOVE_ENABLE,
            self::STICKY_CLIENT_REMOVE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['fast_roaming'] = $data['fast_roaming'] ?? null;
        $this->container['external_fast_roaming'] = $data['external_fast_roaming'] ?? null;
        $this->container['mesh_backhaul'] = $data['mesh_backhaul'] ?? null;
        $this->container['atf_weight'] = $data['atf_weight'] ?? null;
        $this->container['max_clients'] = $data['max_clients'] ?? null;
        $this->container['max_clients_ap'] = $data['max_clients_ap'] ?? null;
        $this->container['ssid'] = $data['ssid'] ?? null;
        $this->container['broadcast_ssid'] = $data['broadcast_ssid'] ?? null;
        $this->container['security'] = $data['security'] ?? null;
        $this->container['pmf'] = $data['pmf'] ?? null;
        $this->container['pmf_assoc_comeback_timeout'] = $data['pmf_assoc_comeback_timeout'] ?? null;
        $this->container['pmf_sa_query_retry_timeout'] = $data['pmf_sa_query_retry_timeout'] ?? null;
        $this->container['okc'] = $data['okc'] ?? null;
        $this->container['voice_enterprise'] = $data['voice_enterprise'] ?? null;
        $this->container['fast_bss_transition'] = $data['fast_bss_transition'] ?? null;
        $this->container['ft_mobility_domain'] = $data['ft_mobility_domain'] ?? null;
        $this->container['ft_r0_key_lifetime'] = $data['ft_r0_key_lifetime'] ?? null;
        $this->container['ft_over_ds'] = $data['ft_over_ds'] ?? null;
        $this->container['sae_groups'] = $data['sae_groups'] ?? null;
        $this->container['owe_groups'] = $data['owe_groups'] ?? null;
        $this->container['owe_transition'] = $data['owe_transition'] ?? null;
        $this->container['owe_transition_ssid'] = $data['owe_transition_ssid'] ?? null;
        $this->container['eapol_key_retries'] = $data['eapol_key_retries'] ?? null;
        $this->container['tkip_counter_measure'] = $data['tkip_counter_measure'] ?? null;
        $this->container['external_web'] = $data['external_web'] ?? null;
        $this->container['external_web_format'] = $data['external_web_format'] ?? null;
        $this->container['external_logout'] = $data['external_logout'] ?? null;
        $this->container['mac_auth_bypass'] = $data['mac_auth_bypass'] ?? null;
        $this->container['radius_mac_auth'] = $data['radius_mac_auth'] ?? null;
        $this->container['radius_mac_auth_server'] = $data['radius_mac_auth_server'] ?? null;
        $this->container['radius_mac_auth_usergroups'] = $data['radius_mac_auth_usergroups'] ?? null;
        $this->container['auth'] = $data['auth'] ?? null;
        $this->container['encrypt'] = $data['encrypt'] ?? null;
        $this->container['keyindex'] = $data['keyindex'] ?? null;
        $this->container['key'] = $data['key'] ?? null;
        $this->container['passphrase'] = $data['passphrase'] ?? null;
        $this->container['sae_password'] = $data['sae_password'] ?? null;
        $this->container['radius_server'] = $data['radius_server'] ?? null;
        $this->container['local_standalone'] = $data['local_standalone'] ?? null;
        $this->container['local_standalone_nat'] = $data['local_standalone_nat'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['dhcp_lease_time'] = $data['dhcp_lease_time'] ?? null;
        $this->container['local_bridging'] = $data['local_bridging'] ?? null;
        $this->container['local_lan'] = $data['local_lan'] ?? null;
        $this->container['local_authentication'] = $data['local_authentication'] ?? null;
        $this->container['usergroup'] = $data['usergroup'] ?? null;
        $this->container['portal_message_override_group'] = $data['portal_message_override_group'] ?? null;
        $this->container['portal_message_overrides'] = $data['portal_message_overrides'] ?? null;
        $this->container['portal_type'] = $data['portal_type'] ?? null;
        $this->container['selected_usergroups'] = $data['selected_usergroups'] ?? null;
        $this->container['security_exempt_list'] = $data['security_exempt_list'] ?? null;
        $this->container['security_redirect_url'] = $data['security_redirect_url'] ?? null;
        $this->container['intra_vap_privacy'] = $data['intra_vap_privacy'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['ldpc'] = $data['ldpc'] ?? null;
        $this->container['high_efficiency'] = $data['high_efficiency'] ?? null;
        $this->container['target_wake_time'] = $data['target_wake_time'] ?? null;
        $this->container['port_macauth'] = $data['port_macauth'] ?? null;
        $this->container['port_macauth_timeout'] = $data['port_macauth_timeout'] ?? null;
        $this->container['port_macauth_reauth_timeout'] = $data['port_macauth_reauth_timeout'] ?? null;
        $this->container['bss_color_partial'] = $data['bss_color_partial'] ?? null;
        $this->container['mpsk_profile'] = $data['mpsk_profile'] ?? null;
        $this->container['split_tunneling'] = $data['split_tunneling'] ?? null;
        $this->container['vlanid'] = $data['vlanid'] ?? null;
        $this->container['vlan_auto'] = $data['vlan_auto'] ?? null;
        $this->container['dynamic_vlan'] = $data['dynamic_vlan'] ?? null;
        $this->container['captive_portal_ac_name'] = $data['captive_portal_ac_name'] ?? null;
        $this->container['captive_portal_auth_timeout'] = $data['captive_portal_auth_timeout'] ?? null;
        $this->container['multicast_rate'] = $data['multicast_rate'] ?? null;
        $this->container['multicast_enhance'] = $data['multicast_enhance'] ?? null;
        $this->container['igmp_snooping'] = $data['igmp_snooping'] ?? null;
        $this->container['broadcast_suppression'] = $data['broadcast_suppression'] ?? null;
        $this->container['ipv6_rules'] = $data['ipv6_rules'] ?? null;
        $this->container['me_disable_thresh'] = $data['me_disable_thresh'] ?? null;
        $this->container['mu_mimo'] = $data['mu_mimo'] ?? null;
        $this->container['probe_resp_suppression'] = $data['probe_resp_suppression'] ?? null;
        $this->container['probe_resp_threshold'] = $data['probe_resp_threshold'] ?? null;
        $this->container['radio_sensitivity'] = $data['radio_sensitivity'] ?? null;
        $this->container['quarantine'] = $data['quarantine'] ?? null;
        $this->container['radio_5g_threshold'] = $data['radio_5g_threshold'] ?? null;
        $this->container['radio_2g_threshold'] = $data['radio_2g_threshold'] ?? null;
        $this->container['vlan_pooling'] = $data['vlan_pooling'] ?? null;
        $this->container['vlan_pool'] = $data['vlan_pool'] ?? null;
        $this->container['dhcp_option43_insertion'] = $data['dhcp_option43_insertion'] ?? null;
        $this->container['dhcp_option82_insertion'] = $data['dhcp_option82_insertion'] ?? null;
        $this->container['dhcp_option82_circuit_id_insertion'] = $data['dhcp_option82_circuit_id_insertion'] ?? null;
        $this->container['dhcp_option82_remote_id_insertion'] = $data['dhcp_option82_remote_id_insertion'] ?? null;
        $this->container['ptk_rekey'] = $data['ptk_rekey'] ?? null;
        $this->container['ptk_rekey_intv'] = $data['ptk_rekey_intv'] ?? null;
        $this->container['gtk_rekey'] = $data['gtk_rekey'] ?? null;
        $this->container['gtk_rekey_intv'] = $data['gtk_rekey_intv'] ?? null;
        $this->container['eap_reauth'] = $data['eap_reauth'] ?? null;
        $this->container['eap_reauth_intv'] = $data['eap_reauth_intv'] ?? null;
        $this->container['qos_profile'] = $data['qos_profile'] ?? null;
        $this->container['hotspot20_profile'] = $data['hotspot20_profile'] ?? null;
        $this->container['access_control_list'] = $data['access_control_list'] ?? null;
        $this->container['primary_wag_profile'] = $data['primary_wag_profile'] ?? null;
        $this->container['secondary_wag_profile'] = $data['secondary_wag_profile'] ?? null;
        $this->container['tunnel_echo_interval'] = $data['tunnel_echo_interval'] ?? null;
        $this->container['tunnel_fallback_interval'] = $data['tunnel_fallback_interval'] ?? null;
        $this->container['rates_11a'] = $data['rates_11a'] ?? null;
        $this->container['rates_11bg'] = $data['rates_11bg'] ?? null;
        $this->container['rates_11n_ss12'] = $data['rates_11n_ss12'] ?? null;
        $this->container['rates_11n_ss34'] = $data['rates_11n_ss34'] ?? null;
        $this->container['rates_11ac_ss12'] = $data['rates_11ac_ss12'] ?? null;
        $this->container['rates_11ac_ss34'] = $data['rates_11ac_ss34'] ?? null;
        $this->container['utm_profile'] = $data['utm_profile'] ?? null;
        $this->container['address_group'] = $data['address_group'] ?? null;
        $this->container['mac_filter'] = $data['mac_filter'] ?? null;
        $this->container['mac_filter_policy_other'] = $data['mac_filter_policy_other'] ?? null;
        $this->container['mac_filter_list'] = $data['mac_filter_list'] ?? null;
        $this->container['sticky_client_remove'] = $data['sticky_client_remove'] ?? null;
        $this->container['sticky_client_threshold_5g'] = $data['sticky_client_threshold_5g'] ?? null;
        $this->container['sticky_client_threshold_2g'] = $data['sticky_client_threshold_2g'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getFastRoamingAllowableValues();
        if (!is_null($this->container['fast_roaming']) && !in_array($this->container['fast_roaming'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fast_roaming', must be one of '%s'",
                $this->container['fast_roaming'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExternalFastRoamingAllowableValues();
        if (!is_null($this->container['external_fast_roaming']) && !in_array($this->container['external_fast_roaming'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external_fast_roaming', must be one of '%s'",
                $this->container['external_fast_roaming'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMeshBackhaulAllowableValues();
        if (!is_null($this->container['mesh_backhaul']) && !in_array($this->container['mesh_backhaul'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mesh_backhaul', must be one of '%s'",
                $this->container['mesh_backhaul'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['atf_weight']) && ($this->container['atf_weight'] > 100)) {
            $invalidProperties[] = "invalid value for 'atf_weight', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['atf_weight']) && ($this->container['atf_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'atf_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_clients']) && ($this->container['max_clients'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_clients', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_clients_ap']) && ($this->container['max_clients_ap'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_clients_ap', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_clients_ap']) && ($this->container['max_clients_ap'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_clients_ap', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ssid']) && (mb_strlen($this->container['ssid']) > 32)) {
            $invalidProperties[] = "invalid value for 'ssid', the character length must be smaller than or equal to 32.";
        }

        $allowedValues = $this->getBroadcastSsidAllowableValues();
        if (!is_null($this->container['broadcast_ssid']) && !in_array($this->container['broadcast_ssid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'broadcast_ssid', must be one of '%s'",
                $this->container['broadcast_ssid'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($this->container['security']) && !in_array($this->container['security'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security', must be one of '%s'",
                $this->container['security'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPmfAllowableValues();
        if (!is_null($this->container['pmf']) && !in_array($this->container['pmf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pmf', must be one of '%s'",
                $this->container['pmf'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pmf_assoc_comeback_timeout']) && ($this->container['pmf_assoc_comeback_timeout'] > 20)) {
            $invalidProperties[] = "invalid value for 'pmf_assoc_comeback_timeout', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['pmf_assoc_comeback_timeout']) && ($this->container['pmf_assoc_comeback_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'pmf_assoc_comeback_timeout', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pmf_sa_query_retry_timeout']) && ($this->container['pmf_sa_query_retry_timeout'] > 5)) {
            $invalidProperties[] = "invalid value for 'pmf_sa_query_retry_timeout', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['pmf_sa_query_retry_timeout']) && ($this->container['pmf_sa_query_retry_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'pmf_sa_query_retry_timeout', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getOkcAllowableValues();
        if (!is_null($this->container['okc']) && !in_array($this->container['okc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'okc', must be one of '%s'",
                $this->container['okc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoiceEnterpriseAllowableValues();
        if (!is_null($this->container['voice_enterprise']) && !in_array($this->container['voice_enterprise'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voice_enterprise', must be one of '%s'",
                $this->container['voice_enterprise'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFastBssTransitionAllowableValues();
        if (!is_null($this->container['fast_bss_transition']) && !in_array($this->container['fast_bss_transition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fast_bss_transition', must be one of '%s'",
                $this->container['fast_bss_transition'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ft_mobility_domain']) && ($this->container['ft_mobility_domain'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ft_mobility_domain', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ft_mobility_domain']) && ($this->container['ft_mobility_domain'] < 1)) {
            $invalidProperties[] = "invalid value for 'ft_mobility_domain', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ft_r0_key_lifetime']) && ($this->container['ft_r0_key_lifetime'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ft_r0_key_lifetime', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ft_r0_key_lifetime']) && ($this->container['ft_r0_key_lifetime'] < 1)) {
            $invalidProperties[] = "invalid value for 'ft_r0_key_lifetime', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getFtOverDsAllowableValues();
        if (!is_null($this->container['ft_over_ds']) && !in_array($this->container['ft_over_ds'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ft_over_ds', must be one of '%s'",
                $this->container['ft_over_ds'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSaeGroupsAllowableValues();
        if (!is_null($this->container['sae_groups']) && !in_array($this->container['sae_groups'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sae_groups', must be one of '%s'",
                $this->container['sae_groups'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOweGroupsAllowableValues();
        if (!is_null($this->container['owe_groups']) && !in_array($this->container['owe_groups'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'owe_groups', must be one of '%s'",
                $this->container['owe_groups'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOweTransitionAllowableValues();
        if (!is_null($this->container['owe_transition']) && !in_array($this->container['owe_transition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'owe_transition', must be one of '%s'",
                $this->container['owe_transition'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['owe_transition_ssid']) && (mb_strlen($this->container['owe_transition_ssid']) > 32)) {
            $invalidProperties[] = "invalid value for 'owe_transition_ssid', the character length must be smaller than or equal to 32.";
        }

        $allowedValues = $this->getEapolKeyRetriesAllowableValues();
        if (!is_null($this->container['eapol_key_retries']) && !in_array($this->container['eapol_key_retries'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eapol_key_retries', must be one of '%s'",
                $this->container['eapol_key_retries'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTkipCounterMeasureAllowableValues();
        if (!is_null($this->container['tkip_counter_measure']) && !in_array($this->container['tkip_counter_measure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tkip_counter_measure', must be one of '%s'",
                $this->container['tkip_counter_measure'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['external_web']) && (mb_strlen($this->container['external_web']) > 127)) {
            $invalidProperties[] = "invalid value for 'external_web', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getExternalWebFormatAllowableValues();
        if (!is_null($this->container['external_web_format']) && !in_array($this->container['external_web_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'external_web_format', must be one of '%s'",
                $this->container['external_web_format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['external_logout']) && (mb_strlen($this->container['external_logout']) > 127)) {
            $invalidProperties[] = "invalid value for 'external_logout', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getMacAuthBypassAllowableValues();
        if (!is_null($this->container['mac_auth_bypass']) && !in_array($this->container['mac_auth_bypass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_auth_bypass', must be one of '%s'",
                $this->container['mac_auth_bypass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRadiusMacAuthAllowableValues();
        if (!is_null($this->container['radius_mac_auth']) && !in_array($this->container['radius_mac_auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'radius_mac_auth', must be one of '%s'",
                $this->container['radius_mac_auth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radius_mac_auth_server']) && (mb_strlen($this->container['radius_mac_auth_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'radius_mac_auth_server', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['radius_mac_auth_usergroups']) && (count($this->container['radius_mac_auth_usergroups']) > 0)) {
            $invalidProperties[] = "invalid value for 'radius_mac_auth_usergroups', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getAuthAllowableValues();
        if (!is_null($this->container['auth']) && !in_array($this->container['auth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth', must be one of '%s'",
                $this->container['auth'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptAllowableValues();
        if (!is_null($this->container['encrypt']) && !in_array($this->container['encrypt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encrypt', must be one of '%s'",
                $this->container['encrypt'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keyindex']) && ($this->container['keyindex'] > 4)) {
            $invalidProperties[] = "invalid value for 'keyindex', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['keyindex']) && ($this->container['keyindex'] < 1)) {
            $invalidProperties[] = "invalid value for 'keyindex', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['radius_server']) && (mb_strlen($this->container['radius_server']) > 35)) {
            $invalidProperties[] = "invalid value for 'radius_server', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getLocalStandaloneAllowableValues();
        if (!is_null($this->container['local_standalone']) && !in_array($this->container['local_standalone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_standalone', must be one of '%s'",
                $this->container['local_standalone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalStandaloneNatAllowableValues();
        if (!is_null($this->container['local_standalone_nat']) && !in_array($this->container['local_standalone_nat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_standalone_nat', must be one of '%s'",
                $this->container['local_standalone_nat'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dhcp_lease_time']) && ($this->container['dhcp_lease_time'] > 8640000)) {
            $invalidProperties[] = "invalid value for 'dhcp_lease_time', must be smaller than or equal to 8640000.";
        }

        if (!is_null($this->container['dhcp_lease_time']) && ($this->container['dhcp_lease_time'] < 300)) {
            $invalidProperties[] = "invalid value for 'dhcp_lease_time', must be bigger than or equal to 300.";
        }

        $allowedValues = $this->getLocalBridgingAllowableValues();
        if (!is_null($this->container['local_bridging']) && !in_array($this->container['local_bridging'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_bridging', must be one of '%s'",
                $this->container['local_bridging'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalLanAllowableValues();
        if (!is_null($this->container['local_lan']) && !in_array($this->container['local_lan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_lan', must be one of '%s'",
                $this->container['local_lan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalAuthenticationAllowableValues();
        if (!is_null($this->container['local_authentication']) && !in_array($this->container['local_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_authentication', must be one of '%s'",
                $this->container['local_authentication'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['usergroup']) && (count($this->container['usergroup']) > 0)) {
            $invalidProperties[] = "invalid value for 'usergroup', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['portal_message_override_group']) && (mb_strlen($this->container['portal_message_override_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'portal_message_override_group', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['portal_message_overrides']) && (count($this->container['portal_message_overrides']) > 0)) {
            $invalidProperties[] = "invalid value for 'portal_message_overrides', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getPortalTypeAllowableValues();
        if (!is_null($this->container['portal_type']) && !in_array($this->container['portal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'portal_type', must be one of '%s'",
                $this->container['portal_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['selected_usergroups']) && (count($this->container['selected_usergroups']) > 0)) {
            $invalidProperties[] = "invalid value for 'selected_usergroups', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['security_exempt_list']) && (mb_strlen($this->container['security_exempt_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'security_exempt_list', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['security_redirect_url']) && (mb_strlen($this->container['security_redirect_url']) > 127)) {
            $invalidProperties[] = "invalid value for 'security_redirect_url', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getIntraVapPrivacyAllowableValues();
        if (!is_null($this->container['intra_vap_privacy']) && !in_array($this->container['intra_vap_privacy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'intra_vap_privacy', must be one of '%s'",
                $this->container['intra_vap_privacy'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['schedule']) && (count($this->container['schedule']) > 16)) {
            $invalidProperties[] = "invalid value for 'schedule', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getLdpcAllowableValues();
        if (!is_null($this->container['ldpc']) && !in_array($this->container['ldpc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ldpc', must be one of '%s'",
                $this->container['ldpc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHighEfficiencyAllowableValues();
        if (!is_null($this->container['high_efficiency']) && !in_array($this->container['high_efficiency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'high_efficiency', must be one of '%s'",
                $this->container['high_efficiency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTargetWakeTimeAllowableValues();
        if (!is_null($this->container['target_wake_time']) && !in_array($this->container['target_wake_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target_wake_time', must be one of '%s'",
                $this->container['target_wake_time'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPortMacauthAllowableValues();
        if (!is_null($this->container['port_macauth']) && !in_array($this->container['port_macauth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'port_macauth', must be one of '%s'",
                $this->container['port_macauth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port_macauth_timeout']) && ($this->container['port_macauth_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port_macauth_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port_macauth_timeout']) && ($this->container['port_macauth_timeout'] < 60)) {
            $invalidProperties[] = "invalid value for 'port_macauth_timeout', must be bigger than or equal to 60.";
        }

        if (!is_null($this->container['port_macauth_reauth_timeout']) && ($this->container['port_macauth_reauth_timeout'] > 65535)) {
            $invalidProperties[] = "invalid value for 'port_macauth_reauth_timeout', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['port_macauth_reauth_timeout']) && ($this->container['port_macauth_reauth_timeout'] < 120)) {
            $invalidProperties[] = "invalid value for 'port_macauth_reauth_timeout', must be bigger than or equal to 120.";
        }

        $allowedValues = $this->getBssColorPartialAllowableValues();
        if (!is_null($this->container['bss_color_partial']) && !in_array($this->container['bss_color_partial'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bss_color_partial', must be one of '%s'",
                $this->container['bss_color_partial'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mpsk_profile']) && (mb_strlen($this->container['mpsk_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'mpsk_profile', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getSplitTunnelingAllowableValues();
        if (!is_null($this->container['split_tunneling']) && !in_array($this->container['split_tunneling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'split_tunneling', must be one of '%s'",
                $this->container['split_tunneling'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] > 4094)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be smaller than or equal to 4094.";
        }

        if (!is_null($this->container['vlanid']) && ($this->container['vlanid'] < 0)) {
            $invalidProperties[] = "invalid value for 'vlanid', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getVlanAutoAllowableValues();
        if (!is_null($this->container['vlan_auto']) && !in_array($this->container['vlan_auto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlan_auto', must be one of '%s'",
                $this->container['vlan_auto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDynamicVlanAllowableValues();
        if (!is_null($this->container['dynamic_vlan']) && !in_array($this->container['dynamic_vlan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dynamic_vlan', must be one of '%s'",
                $this->container['dynamic_vlan'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['captive_portal_ac_name']) && (mb_strlen($this->container['captive_portal_ac_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'captive_portal_ac_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['captive_portal_auth_timeout']) && ($this->container['captive_portal_auth_timeout'] > 864000)) {
            $invalidProperties[] = "invalid value for 'captive_portal_auth_timeout', must be smaller than or equal to 864000.";
        }

        if (!is_null($this->container['captive_portal_auth_timeout']) && ($this->container['captive_portal_auth_timeout'] < 0)) {
            $invalidProperties[] = "invalid value for 'captive_portal_auth_timeout', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMulticastRateAllowableValues();
        if (!is_null($this->container['multicast_rate']) && !in_array($this->container['multicast_rate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_rate', must be one of '%s'",
                $this->container['multicast_rate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMulticastEnhanceAllowableValues();
        if (!is_null($this->container['multicast_enhance']) && !in_array($this->container['multicast_enhance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_enhance', must be one of '%s'",
                $this->container['multicast_enhance'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIgmpSnoopingAllowableValues();
        if (!is_null($this->container['igmp_snooping']) && !in_array($this->container['igmp_snooping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'igmp_snooping', must be one of '%s'",
                $this->container['igmp_snooping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBroadcastSuppressionAllowableValues();
        if (!is_null($this->container['broadcast_suppression']) && !in_array($this->container['broadcast_suppression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'broadcast_suppression', must be one of '%s'",
                $this->container['broadcast_suppression'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv6RulesAllowableValues();
        if (!is_null($this->container['ipv6_rules']) && !in_array($this->container['ipv6_rules'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv6_rules', must be one of '%s'",
                $this->container['ipv6_rules'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['me_disable_thresh']) && ($this->container['me_disable_thresh'] > 256)) {
            $invalidProperties[] = "invalid value for 'me_disable_thresh', must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['me_disable_thresh']) && ($this->container['me_disable_thresh'] < 2)) {
            $invalidProperties[] = "invalid value for 'me_disable_thresh', must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getMuMimoAllowableValues();
        if (!is_null($this->container['mu_mimo']) && !in_array($this->container['mu_mimo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mu_mimo', must be one of '%s'",
                $this->container['mu_mimo'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProbeRespSuppressionAllowableValues();
        if (!is_null($this->container['probe_resp_suppression']) && !in_array($this->container['probe_resp_suppression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'probe_resp_suppression', must be one of '%s'",
                $this->container['probe_resp_suppression'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['probe_resp_threshold']) && (mb_strlen($this->container['probe_resp_threshold']) > 7)) {
            $invalidProperties[] = "invalid value for 'probe_resp_threshold', the character length must be smaller than or equal to 7.";
        }

        $allowedValues = $this->getRadioSensitivityAllowableValues();
        if (!is_null($this->container['radio_sensitivity']) && !in_array($this->container['radio_sensitivity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'radio_sensitivity', must be one of '%s'",
                $this->container['radio_sensitivity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($this->container['quarantine']) && !in_array($this->container['quarantine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quarantine', must be one of '%s'",
                $this->container['quarantine'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['radio_5g_threshold']) && (mb_strlen($this->container['radio_5g_threshold']) > 7)) {
            $invalidProperties[] = "invalid value for 'radio_5g_threshold', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['radio_2g_threshold']) && (mb_strlen($this->container['radio_2g_threshold']) > 7)) {
            $invalidProperties[] = "invalid value for 'radio_2g_threshold', the character length must be smaller than or equal to 7.";
        }

        $allowedValues = $this->getVlanPoolingAllowableValues();
        if (!is_null($this->container['vlan_pooling']) && !in_array($this->container['vlan_pooling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vlan_pooling', must be one of '%s'",
                $this->container['vlan_pooling'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vlan_pool']) && (count($this->container['vlan_pool']) > 16)) {
            $invalidProperties[] = "invalid value for 'vlan_pool', number of items must be less than or equal to 16.";
        }

        $allowedValues = $this->getDhcpOption43InsertionAllowableValues();
        if (!is_null($this->container['dhcp_option43_insertion']) && !in_array($this->container['dhcp_option43_insertion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_option43_insertion', must be one of '%s'",
                $this->container['dhcp_option43_insertion'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpOption82InsertionAllowableValues();
        if (!is_null($this->container['dhcp_option82_insertion']) && !in_array($this->container['dhcp_option82_insertion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_option82_insertion', must be one of '%s'",
                $this->container['dhcp_option82_insertion'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpOption82CircuitIdInsertionAllowableValues();
        if (!is_null($this->container['dhcp_option82_circuit_id_insertion']) && !in_array($this->container['dhcp_option82_circuit_id_insertion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_option82_circuit_id_insertion', must be one of '%s'",
                $this->container['dhcp_option82_circuit_id_insertion'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpOption82RemoteIdInsertionAllowableValues();
        if (!is_null($this->container['dhcp_option82_remote_id_insertion']) && !in_array($this->container['dhcp_option82_remote_id_insertion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_option82_remote_id_insertion', must be one of '%s'",
                $this->container['dhcp_option82_remote_id_insertion'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPtkRekeyAllowableValues();
        if (!is_null($this->container['ptk_rekey']) && !in_array($this->container['ptk_rekey'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ptk_rekey', must be one of '%s'",
                $this->container['ptk_rekey'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ptk_rekey_intv']) && ($this->container['ptk_rekey_intv'] > 864000)) {
            $invalidProperties[] = "invalid value for 'ptk_rekey_intv', must be smaller than or equal to 864000.";
        }

        if (!is_null($this->container['ptk_rekey_intv']) && ($this->container['ptk_rekey_intv'] < 1800)) {
            $invalidProperties[] = "invalid value for 'ptk_rekey_intv', must be bigger than or equal to 1800.";
        }

        $allowedValues = $this->getGtkRekeyAllowableValues();
        if (!is_null($this->container['gtk_rekey']) && !in_array($this->container['gtk_rekey'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gtk_rekey', must be one of '%s'",
                $this->container['gtk_rekey'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gtk_rekey_intv']) && ($this->container['gtk_rekey_intv'] > 864000)) {
            $invalidProperties[] = "invalid value for 'gtk_rekey_intv', must be smaller than or equal to 864000.";
        }

        if (!is_null($this->container['gtk_rekey_intv']) && ($this->container['gtk_rekey_intv'] < 1800)) {
            $invalidProperties[] = "invalid value for 'gtk_rekey_intv', must be bigger than or equal to 1800.";
        }

        $allowedValues = $this->getEapReauthAllowableValues();
        if (!is_null($this->container['eap_reauth']) && !in_array($this->container['eap_reauth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eap_reauth', must be one of '%s'",
                $this->container['eap_reauth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['eap_reauth_intv']) && ($this->container['eap_reauth_intv'] > 864000)) {
            $invalidProperties[] = "invalid value for 'eap_reauth_intv', must be smaller than or equal to 864000.";
        }

        if (!is_null($this->container['eap_reauth_intv']) && ($this->container['eap_reauth_intv'] < 1800)) {
            $invalidProperties[] = "invalid value for 'eap_reauth_intv', must be bigger than or equal to 1800.";
        }

        if (!is_null($this->container['qos_profile']) && (mb_strlen($this->container['qos_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'qos_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['hotspot20_profile']) && (mb_strlen($this->container['hotspot20_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'hotspot20_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['access_control_list']) && (mb_strlen($this->container['access_control_list']) > 35)) {
            $invalidProperties[] = "invalid value for 'access_control_list', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['primary_wag_profile']) && (mb_strlen($this->container['primary_wag_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'primary_wag_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['secondary_wag_profile']) && (mb_strlen($this->container['secondary_wag_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'secondary_wag_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['tunnel_echo_interval']) && ($this->container['tunnel_echo_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'tunnel_echo_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['tunnel_echo_interval']) && ($this->container['tunnel_echo_interval'] < 1)) {
            $invalidProperties[] = "invalid value for 'tunnel_echo_interval', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tunnel_fallback_interval']) && ($this->container['tunnel_fallback_interval'] > 65535)) {
            $invalidProperties[] = "invalid value for 'tunnel_fallback_interval', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['tunnel_fallback_interval']) && ($this->container['tunnel_fallback_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'tunnel_fallback_interval', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRates11aAllowableValues();
        if (!is_null($this->container['rates_11a']) && !in_array($this->container['rates_11a'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11a', must be one of '%s'",
                $this->container['rates_11a'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRates11bgAllowableValues();
        if (!is_null($this->container['rates_11bg']) && !in_array($this->container['rates_11bg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11bg', must be one of '%s'",
                $this->container['rates_11bg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRates11nSs12AllowableValues();
        if (!is_null($this->container['rates_11n_ss12']) && !in_array($this->container['rates_11n_ss12'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11n_ss12', must be one of '%s'",
                $this->container['rates_11n_ss12'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRates11nSs34AllowableValues();
        if (!is_null($this->container['rates_11n_ss34']) && !in_array($this->container['rates_11n_ss34'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11n_ss34', must be one of '%s'",
                $this->container['rates_11n_ss34'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRates11acSs12AllowableValues();
        if (!is_null($this->container['rates_11ac_ss12']) && !in_array($this->container['rates_11ac_ss12'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11ac_ss12', must be one of '%s'",
                $this->container['rates_11ac_ss12'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRates11acSs34AllowableValues();
        if (!is_null($this->container['rates_11ac_ss34']) && !in_array($this->container['rates_11ac_ss34'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rates_11ac_ss34', must be one of '%s'",
                $this->container['rates_11ac_ss34'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['utm_profile']) && (mb_strlen($this->container['utm_profile']) > 35)) {
            $invalidProperties[] = "invalid value for 'utm_profile', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['address_group']) && (mb_strlen($this->container['address_group']) > 35)) {
            $invalidProperties[] = "invalid value for 'address_group', the character length must be smaller than or equal to 35.";
        }

        $allowedValues = $this->getMacFilterAllowableValues();
        if (!is_null($this->container['mac_filter']) && !in_array($this->container['mac_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_filter', must be one of '%s'",
                $this->container['mac_filter'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMacFilterPolicyOtherAllowableValues();
        if (!is_null($this->container['mac_filter_policy_other']) && !in_array($this->container['mac_filter_policy_other'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mac_filter_policy_other', must be one of '%s'",
                $this->container['mac_filter_policy_other'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mac_filter_list']) && (count($this->container['mac_filter_list']) > 0)) {
            $invalidProperties[] = "invalid value for 'mac_filter_list', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getStickyClientRemoveAllowableValues();
        if (!is_null($this->container['sticky_client_remove']) && !in_array($this->container['sticky_client_remove'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sticky_client_remove', must be one of '%s'",
                $this->container['sticky_client_remove'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sticky_client_threshold_5g']) && (mb_strlen($this->container['sticky_client_threshold_5g']) > 7)) {
            $invalidProperties[] = "invalid value for 'sticky_client_threshold_5g', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['sticky_client_threshold_2g']) && (mb_strlen($this->container['sticky_client_threshold_2g']) > 7)) {
            $invalidProperties[] = "invalid value for 'sticky_client_threshold_2g', the character length must be smaller than or equal to 7.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Virtual AP name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject608., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fast_roaming
     *
     * @return string|null
     */
    public function getFastRoaming()
    {
        return $this->container['fast_roaming'];
    }

    /**
     * Sets fast_roaming
     *
     * @param string|null $fast_roaming Enable/disable fast-roaming, or pre-authentication, where supported by clients (default = disable).    enable:Enable fast-roaming, or pre-authentication.    disable:Disable fast-roaming, or pre-authentication.
     *
     * @return self
     */
    public function setFastRoaming($fast_roaming)
    {
        $allowedValues = $this->getFastRoamingAllowableValues();
        if (!is_null($fast_roaming) && !in_array($fast_roaming, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fast_roaming', must be one of '%s'",
                    $fast_roaming,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fast_roaming'] = $fast_roaming;

        return $this;
    }

    /**
     * Gets external_fast_roaming
     *
     * @return string|null
     */
    public function getExternalFastRoaming()
    {
        return $this->container['external_fast_roaming'];
    }

    /**
     * Sets external_fast_roaming
     *
     * @param string|null $external_fast_roaming Enable/disable fast roaming or pre-authentication with external APs not managed by the FortiGate (default = disable).    enable:Enable fast roaming or pre-authentication with external APs.    disable:Disable fast roaming or pre-authentication with external APs.
     *
     * @return self
     */
    public function setExternalFastRoaming($external_fast_roaming)
    {
        $allowedValues = $this->getExternalFastRoamingAllowableValues();
        if (!is_null($external_fast_roaming) && !in_array($external_fast_roaming, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external_fast_roaming', must be one of '%s'",
                    $external_fast_roaming,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external_fast_roaming'] = $external_fast_roaming;

        return $this;
    }

    /**
     * Gets mesh_backhaul
     *
     * @return string|null
     */
    public function getMeshBackhaul()
    {
        return $this->container['mesh_backhaul'];
    }

    /**
     * Sets mesh_backhaul
     *
     * @param string|null $mesh_backhaul Enable/disable using this VAP as a WiFi mesh backhaul (default = disable). This entry is only available when security is set to a WPA type or open.    enable:Enable mesh backhaul.    disable:Disable mesh backhaul.
     *
     * @return self
     */
    public function setMeshBackhaul($mesh_backhaul)
    {
        $allowedValues = $this->getMeshBackhaulAllowableValues();
        if (!is_null($mesh_backhaul) && !in_array($mesh_backhaul, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mesh_backhaul', must be one of '%s'",
                    $mesh_backhaul,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mesh_backhaul'] = $mesh_backhaul;

        return $this;
    }

    /**
     * Gets atf_weight
     *
     * @return int|null
     */
    public function getAtfWeight()
    {
        return $this->container['atf_weight'];
    }

    /**
     * Sets atf_weight
     *
     * @param int|null $atf_weight Airtime weight in percentage (default = 20).
     *
     * @return self
     */
    public function setAtfWeight($atf_weight)
    {

        if (!is_null($atf_weight) && ($atf_weight > 100)) {
            throw new \InvalidArgumentException('invalid value for $atf_weight when calling InlineObject608., must be smaller than or equal to 100.');
        }
        if (!is_null($atf_weight) && ($atf_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $atf_weight when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['atf_weight'] = $atf_weight;

        return $this;
    }

    /**
     * Gets max_clients
     *
     * @return int|null
     */
    public function getMaxClients()
    {
        return $this->container['max_clients'];
    }

    /**
     * Sets max_clients
     *
     * @param int|null $max_clients Maximum number of clients that can connect simultaneously to the VAP (default = 0, meaning no limitation).
     *
     * @return self
     */
    public function setMaxClients($max_clients)
    {

        if (!is_null($max_clients) && ($max_clients > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject608., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_clients) && ($max_clients < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_clients when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['max_clients'] = $max_clients;

        return $this;
    }

    /**
     * Gets max_clients_ap
     *
     * @return int|null
     */
    public function getMaxClientsAp()
    {
        return $this->container['max_clients_ap'];
    }

    /**
     * Sets max_clients_ap
     *
     * @param int|null $max_clients_ap Maximum number of clients that can connect simultaneously to the VAP per AP radio (default = 0, meaning no limitation).
     *
     * @return self
     */
    public function setMaxClientsAp($max_clients_ap)
    {

        if (!is_null($max_clients_ap) && ($max_clients_ap > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_clients_ap when calling InlineObject608., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($max_clients_ap) && ($max_clients_ap < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_clients_ap when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['max_clients_ap'] = $max_clients_ap;

        return $this;
    }

    /**
     * Gets ssid
     *
     * @return string|null
     */
    public function getSsid()
    {
        return $this->container['ssid'];
    }

    /**
     * Sets ssid
     *
     * @param string|null $ssid IEEE 802.11 service set identifier (SSID) for the wireless interface. Users who wish to use the wireless network must configure their computers to access this SSID name.
     *
     * @return self
     */
    public function setSsid($ssid)
    {
        if (!is_null($ssid) && (mb_strlen($ssid) > 32)) {
            throw new \InvalidArgumentException('invalid length for $ssid when calling InlineObject608., must be smaller than or equal to 32.');
        }

        $this->container['ssid'] = $ssid;

        return $this;
    }

    /**
     * Gets broadcast_ssid
     *
     * @return string|null
     */
    public function getBroadcastSsid()
    {
        return $this->container['broadcast_ssid'];
    }

    /**
     * Sets broadcast_ssid
     *
     * @param string|null $broadcast_ssid Enable/disable broadcasting the SSID (default = enable).    enable:Enable broadcasting the SSID.    disable:Disable broadcasting the SSID.
     *
     * @return self
     */
    public function setBroadcastSsid($broadcast_ssid)
    {
        $allowedValues = $this->getBroadcastSsidAllowableValues();
        if (!is_null($broadcast_ssid) && !in_array($broadcast_ssid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'broadcast_ssid', must be one of '%s'",
                    $broadcast_ssid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['broadcast_ssid'] = $broadcast_ssid;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string|null $security Security mode for the wireless interface (default = wpa2-only-personal).    open:Open.    captive-portal:Captive portal.    wep64:WEP 64-bit.    wep128:WEP 128-bit.    wpa-personal:WPA/WPA2 personal.    wpa-personal+captive-portal:WPA/WPA2 personal with captive portal.    wpa-enterprise:WPA/WPA2 enterprise.    wpa-only-personal:WPA personal.    wpa-only-personal+captive-portal:WPA personal with captive portal.    wpa-only-enterprise:WPA enterprise.    wpa2-only-personal:WPA2 personal.    wpa2-only-personal+captive-portal:WPA2 personal with captive portal.    wpa2-only-enterprise:WPA2 enterprise.    wpa3-enterprise:WPA3 enterprise.    wpa3-sae:WPA3 SAE.    wpa3-sae-transition:WPA3 SAE transition.    owe:Opportunistic wireless encryption.    osen:OSEN.
     *
     * @return self
     */
    public function setSecurity($security)
    {
        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($security) && !in_array($security, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security', must be one of '%s'",
                    $security,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets pmf
     *
     * @return string|null
     */
    public function getPmf()
    {
        return $this->container['pmf'];
    }

    /**
     * Sets pmf
     *
     * @param string|null $pmf Protected Management Frames (PMF) support (default = disable).    disable:Disable PMF completely.    enable:Enable PMF but deny clients without PMF.    optional:Enable PMF and allow clients without PMF.
     *
     * @return self
     */
    public function setPmf($pmf)
    {
        $allowedValues = $this->getPmfAllowableValues();
        if (!is_null($pmf) && !in_array($pmf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pmf', must be one of '%s'",
                    $pmf,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pmf'] = $pmf;

        return $this;
    }

    /**
     * Gets pmf_assoc_comeback_timeout
     *
     * @return int|null
     */
    public function getPmfAssocComebackTimeout()
    {
        return $this->container['pmf_assoc_comeback_timeout'];
    }

    /**
     * Sets pmf_assoc_comeback_timeout
     *
     * @param int|null $pmf_assoc_comeback_timeout Protected Management Frames (PMF) comeback maximum timeout (1-20 sec).
     *
     * @return self
     */
    public function setPmfAssocComebackTimeout($pmf_assoc_comeback_timeout)
    {

        if (!is_null($pmf_assoc_comeback_timeout) && ($pmf_assoc_comeback_timeout > 20)) {
            throw new \InvalidArgumentException('invalid value for $pmf_assoc_comeback_timeout when calling InlineObject608., must be smaller than or equal to 20.');
        }
        if (!is_null($pmf_assoc_comeback_timeout) && ($pmf_assoc_comeback_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $pmf_assoc_comeback_timeout when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['pmf_assoc_comeback_timeout'] = $pmf_assoc_comeback_timeout;

        return $this;
    }

    /**
     * Gets pmf_sa_query_retry_timeout
     *
     * @return int|null
     */
    public function getPmfSaQueryRetryTimeout()
    {
        return $this->container['pmf_sa_query_retry_timeout'];
    }

    /**
     * Sets pmf_sa_query_retry_timeout
     *
     * @param int|null $pmf_sa_query_retry_timeout Protected Management Frames (PMF) SA query retry timeout interval (1 - 5 100s of msec).
     *
     * @return self
     */
    public function setPmfSaQueryRetryTimeout($pmf_sa_query_retry_timeout)
    {

        if (!is_null($pmf_sa_query_retry_timeout) && ($pmf_sa_query_retry_timeout > 5)) {
            throw new \InvalidArgumentException('invalid value for $pmf_sa_query_retry_timeout when calling InlineObject608., must be smaller than or equal to 5.');
        }
        if (!is_null($pmf_sa_query_retry_timeout) && ($pmf_sa_query_retry_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $pmf_sa_query_retry_timeout when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['pmf_sa_query_retry_timeout'] = $pmf_sa_query_retry_timeout;

        return $this;
    }

    /**
     * Gets okc
     *
     * @return string|null
     */
    public function getOkc()
    {
        return $this->container['okc'];
    }

    /**
     * Sets okc
     *
     * @param string|null $okc Enable/disable Opportunistic Key Caching (OKC) (default = enable).    disable:Disable Opportunistic Key Caching (OKC).    enable:Enable Opportunistic Key Caching (OKC).
     *
     * @return self
     */
    public function setOkc($okc)
    {
        $allowedValues = $this->getOkcAllowableValues();
        if (!is_null($okc) && !in_array($okc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'okc', must be one of '%s'",
                    $okc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['okc'] = $okc;

        return $this;
    }

    /**
     * Gets voice_enterprise
     *
     * @return string|null
     */
    public function getVoiceEnterprise()
    {
        return $this->container['voice_enterprise'];
    }

    /**
     * Sets voice_enterprise
     *
     * @param string|null $voice_enterprise Enable/disable 802.11k and 802.11v assisted Voice-Enterprise roaming (default = disable).    disable:Disable 802.11k and 802.11v assisted Voice-Enterprise roaming.    enable:Enable 802.11k and 802.11v assisted Voice-Enterprise roaming.
     *
     * @return self
     */
    public function setVoiceEnterprise($voice_enterprise)
    {
        $allowedValues = $this->getVoiceEnterpriseAllowableValues();
        if (!is_null($voice_enterprise) && !in_array($voice_enterprise, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voice_enterprise', must be one of '%s'",
                    $voice_enterprise,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice_enterprise'] = $voice_enterprise;

        return $this;
    }

    /**
     * Gets fast_bss_transition
     *
     * @return string|null
     */
    public function getFastBssTransition()
    {
        return $this->container['fast_bss_transition'];
    }

    /**
     * Sets fast_bss_transition
     *
     * @param string|null $fast_bss_transition Enable/disable 802.11r Fast BSS Transition (FT) (default = disable).    disable:Disable 802.11r Fast BSS Transition (FT).    enable:Enable 802.11r Fast BSS Transition (FT).
     *
     * @return self
     */
    public function setFastBssTransition($fast_bss_transition)
    {
        $allowedValues = $this->getFastBssTransitionAllowableValues();
        if (!is_null($fast_bss_transition) && !in_array($fast_bss_transition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fast_bss_transition', must be one of '%s'",
                    $fast_bss_transition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fast_bss_transition'] = $fast_bss_transition;

        return $this;
    }

    /**
     * Gets ft_mobility_domain
     *
     * @return int|null
     */
    public function getFtMobilityDomain()
    {
        return $this->container['ft_mobility_domain'];
    }

    /**
     * Sets ft_mobility_domain
     *
     * @param int|null $ft_mobility_domain Mobility domain identifier in FT (1 - 65535, default = 1000).
     *
     * @return self
     */
    public function setFtMobilityDomain($ft_mobility_domain)
    {

        if (!is_null($ft_mobility_domain) && ($ft_mobility_domain > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ft_mobility_domain when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($ft_mobility_domain) && ($ft_mobility_domain < 1)) {
            throw new \InvalidArgumentException('invalid value for $ft_mobility_domain when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['ft_mobility_domain'] = $ft_mobility_domain;

        return $this;
    }

    /**
     * Gets ft_r0_key_lifetime
     *
     * @return int|null
     */
    public function getFtR0KeyLifetime()
    {
        return $this->container['ft_r0_key_lifetime'];
    }

    /**
     * Sets ft_r0_key_lifetime
     *
     * @param int|null $ft_r0_key_lifetime Lifetime of the PMK-R0 key in FT, 1-65535 minutes.
     *
     * @return self
     */
    public function setFtR0KeyLifetime($ft_r0_key_lifetime)
    {

        if (!is_null($ft_r0_key_lifetime) && ($ft_r0_key_lifetime > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ft_r0_key_lifetime when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($ft_r0_key_lifetime) && ($ft_r0_key_lifetime < 1)) {
            throw new \InvalidArgumentException('invalid value for $ft_r0_key_lifetime when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['ft_r0_key_lifetime'] = $ft_r0_key_lifetime;

        return $this;
    }

    /**
     * Gets ft_over_ds
     *
     * @return string|null
     */
    public function getFtOverDs()
    {
        return $this->container['ft_over_ds'];
    }

    /**
     * Sets ft_over_ds
     *
     * @param string|null $ft_over_ds Enable/disable FT over the Distribution System (DS).    disable:Disable FT over the Distribution System (DS).    enable:Enable FT over the Distribution System (DS).
     *
     * @return self
     */
    public function setFtOverDs($ft_over_ds)
    {
        $allowedValues = $this->getFtOverDsAllowableValues();
        if (!is_null($ft_over_ds) && !in_array($ft_over_ds, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ft_over_ds', must be one of '%s'",
                    $ft_over_ds,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ft_over_ds'] = $ft_over_ds;

        return $this;
    }

    /**
     * Gets sae_groups
     *
     * @return string|null
     */
    public function getSaeGroups()
    {
        return $this->container['sae_groups'];
    }

    /**
     * Sets sae_groups
     *
     * @param string|null $sae_groups SAE-Groups.    19:DH Group 19.    20:DH Group 20.    21:DH Group 21.
     *
     * @return self
     */
    public function setSaeGroups($sae_groups)
    {
        $allowedValues = $this->getSaeGroupsAllowableValues();
        if (!is_null($sae_groups) && !in_array($sae_groups, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sae_groups', must be one of '%s'",
                    $sae_groups,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sae_groups'] = $sae_groups;

        return $this;
    }

    /**
     * Gets owe_groups
     *
     * @return string|null
     */
    public function getOweGroups()
    {
        return $this->container['owe_groups'];
    }

    /**
     * Sets owe_groups
     *
     * @param string|null $owe_groups OWE-Groups.    19:DH Group 19.    20:DH Group 20.    21:DH Group 21.
     *
     * @return self
     */
    public function setOweGroups($owe_groups)
    {
        $allowedValues = $this->getOweGroupsAllowableValues();
        if (!is_null($owe_groups) && !in_array($owe_groups, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'owe_groups', must be one of '%s'",
                    $owe_groups,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owe_groups'] = $owe_groups;

        return $this;
    }

    /**
     * Gets owe_transition
     *
     * @return string|null
     */
    public function getOweTransition()
    {
        return $this->container['owe_transition'];
    }

    /**
     * Sets owe_transition
     *
     * @param string|null $owe_transition Enable/disable OWE transition mode support.    disable:Disable OWE transition mode support.    enable:Enable OWE transition mode support.
     *
     * @return self
     */
    public function setOweTransition($owe_transition)
    {
        $allowedValues = $this->getOweTransitionAllowableValues();
        if (!is_null($owe_transition) && !in_array($owe_transition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'owe_transition', must be one of '%s'",
                    $owe_transition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owe_transition'] = $owe_transition;

        return $this;
    }

    /**
     * Gets owe_transition_ssid
     *
     * @return string|null
     */
    public function getOweTransitionSsid()
    {
        return $this->container['owe_transition_ssid'];
    }

    /**
     * Sets owe_transition_ssid
     *
     * @param string|null $owe_transition_ssid OWE transition mode peer SSID.
     *
     * @return self
     */
    public function setOweTransitionSsid($owe_transition_ssid)
    {
        if (!is_null($owe_transition_ssid) && (mb_strlen($owe_transition_ssid) > 32)) {
            throw new \InvalidArgumentException('invalid length for $owe_transition_ssid when calling InlineObject608., must be smaller than or equal to 32.');
        }

        $this->container['owe_transition_ssid'] = $owe_transition_ssid;

        return $this;
    }

    /**
     * Gets eapol_key_retries
     *
     * @return string|null
     */
    public function getEapolKeyRetries()
    {
        return $this->container['eapol_key_retries'];
    }

    /**
     * Sets eapol_key_retries
     *
     * @param string|null $eapol_key_retries Enable/disable retransmission of EAPOL-Key frames (message 3/4 and group message 1/2) (default = enable).    disable:Disable retransmission of EAPOL-Key frames (message 3/4 and group message 1/2).    enable:Enable retransmission of EAPOL-Key frames (message 3/4 and group message 1/2).
     *
     * @return self
     */
    public function setEapolKeyRetries($eapol_key_retries)
    {
        $allowedValues = $this->getEapolKeyRetriesAllowableValues();
        if (!is_null($eapol_key_retries) && !in_array($eapol_key_retries, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eapol_key_retries', must be one of '%s'",
                    $eapol_key_retries,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eapol_key_retries'] = $eapol_key_retries;

        return $this;
    }

    /**
     * Gets tkip_counter_measure
     *
     * @return string|null
     */
    public function getTkipCounterMeasure()
    {
        return $this->container['tkip_counter_measure'];
    }

    /**
     * Sets tkip_counter_measure
     *
     * @param string|null $tkip_counter_measure Enable/disable TKIP counter measure.    enable:Enable TKIP counter measure.    disable:Disable TKIP counter measure.
     *
     * @return self
     */
    public function setTkipCounterMeasure($tkip_counter_measure)
    {
        $allowedValues = $this->getTkipCounterMeasureAllowableValues();
        if (!is_null($tkip_counter_measure) && !in_array($tkip_counter_measure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tkip_counter_measure', must be one of '%s'",
                    $tkip_counter_measure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tkip_counter_measure'] = $tkip_counter_measure;

        return $this;
    }

    /**
     * Gets external_web
     *
     * @return string|null
     */
    public function getExternalWeb()
    {
        return $this->container['external_web'];
    }

    /**
     * Sets external_web
     *
     * @param string|null $external_web URL of external authentication web server.
     *
     * @return self
     */
    public function setExternalWeb($external_web)
    {
        if (!is_null($external_web) && (mb_strlen($external_web) > 127)) {
            throw new \InvalidArgumentException('invalid length for $external_web when calling InlineObject608., must be smaller than or equal to 127.');
        }

        $this->container['external_web'] = $external_web;

        return $this;
    }

    /**
     * Gets external_web_format
     *
     * @return string|null
     */
    public function getExternalWebFormat()
    {
        return $this->container['external_web_format'];
    }

    /**
     * Sets external_web_format
     *
     * @param string|null $external_web_format URL query parameter detection (default = auto-detect).    auto-detect:Automatically detect if \"external-web\" URL has any query parameter.    no-query-string:\"external-web\" URL does not have any query parameter.    partial-query-string:\"external-web\" URL has some query parameters.
     *
     * @return self
     */
    public function setExternalWebFormat($external_web_format)
    {
        $allowedValues = $this->getExternalWebFormatAllowableValues();
        if (!is_null($external_web_format) && !in_array($external_web_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'external_web_format', must be one of '%s'",
                    $external_web_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external_web_format'] = $external_web_format;

        return $this;
    }

    /**
     * Gets external_logout
     *
     * @return string|null
     */
    public function getExternalLogout()
    {
        return $this->container['external_logout'];
    }

    /**
     * Sets external_logout
     *
     * @param string|null $external_logout URL of external authentication logout server.
     *
     * @return self
     */
    public function setExternalLogout($external_logout)
    {
        if (!is_null($external_logout) && (mb_strlen($external_logout) > 127)) {
            throw new \InvalidArgumentException('invalid length for $external_logout when calling InlineObject608., must be smaller than or equal to 127.');
        }

        $this->container['external_logout'] = $external_logout;

        return $this;
    }

    /**
     * Gets mac_auth_bypass
     *
     * @return string|null
     */
    public function getMacAuthBypass()
    {
        return $this->container['mac_auth_bypass'];
    }

    /**
     * Sets mac_auth_bypass
     *
     * @param string|null $mac_auth_bypass Enable/disable MAC authentication bypass.    enable:Enable MAC authentication bypass.    disable:Disable MAC authentication bypass.
     *
     * @return self
     */
    public function setMacAuthBypass($mac_auth_bypass)
    {
        $allowedValues = $this->getMacAuthBypassAllowableValues();
        if (!is_null($mac_auth_bypass) && !in_array($mac_auth_bypass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_auth_bypass', must be one of '%s'",
                    $mac_auth_bypass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_auth_bypass'] = $mac_auth_bypass;

        return $this;
    }

    /**
     * Gets radius_mac_auth
     *
     * @return string|null
     */
    public function getRadiusMacAuth()
    {
        return $this->container['radius_mac_auth'];
    }

    /**
     * Sets radius_mac_auth
     *
     * @param string|null $radius_mac_auth Enable/disable RADIUS-based MAC authentication of clients (default = disable).    enable:Enable RADIUS-based MAC authentication.    disable:Disable RADIUS-based MAC authentication.
     *
     * @return self
     */
    public function setRadiusMacAuth($radius_mac_auth)
    {
        $allowedValues = $this->getRadiusMacAuthAllowableValues();
        if (!is_null($radius_mac_auth) && !in_array($radius_mac_auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'radius_mac_auth', must be one of '%s'",
                    $radius_mac_auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radius_mac_auth'] = $radius_mac_auth;

        return $this;
    }

    /**
     * Gets radius_mac_auth_server
     *
     * @return string|null
     */
    public function getRadiusMacAuthServer()
    {
        return $this->container['radius_mac_auth_server'];
    }

    /**
     * Sets radius_mac_auth_server
     *
     * @param string|null $radius_mac_auth_server RADIUS-based MAC authentication server.
     *
     * @return self
     */
    public function setRadiusMacAuthServer($radius_mac_auth_server)
    {
        if (!is_null($radius_mac_auth_server) && (mb_strlen($radius_mac_auth_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $radius_mac_auth_server when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['radius_mac_auth_server'] = $radius_mac_auth_server;

        return $this;
    }

    /**
     * Gets radius_mac_auth_usergroups
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null
     */
    public function getRadiusMacAuthUsergroups()
    {
        return $this->container['radius_mac_auth_usergroups'];
    }

    /**
     * Sets radius_mac_auth_usergroups
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null $radius_mac_auth_usergroups Selective user groups that are permitted for RADIUS mac authentication.
     *
     * @return self
     */
    public function setRadiusMacAuthUsergroups($radius_mac_auth_usergroups)
    {

        if (!is_null($radius_mac_auth_usergroups) && (count($radius_mac_auth_usergroups) > 0)) {
            throw new \InvalidArgumentException('invalid value for $radius_mac_auth_usergroups when calling InlineObject608., number of items must be less than or equal to 0.');
        }
        $this->container['radius_mac_auth_usergroups'] = $radius_mac_auth_usergroups;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return string|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param string|null $auth Authentication protocol.    psk:Use a single Pre-shard Key (PSK) to authenticate all users.    radius:Use a RADIUS server to authenticate clients.    usergroup:Use a firewall usergroup to authenticate clients.
     *
     * @return self
     */
    public function setAuth($auth)
    {
        $allowedValues = $this->getAuthAllowableValues();
        if (!is_null($auth) && !in_array($auth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth', must be one of '%s'",
                    $auth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets encrypt
     *
     * @return string|null
     */
    public function getEncrypt()
    {
        return $this->container['encrypt'];
    }

    /**
     * Sets encrypt
     *
     * @param string|null $encrypt Encryption protocol to use (only available when security is set to a WPA type).    TKIP:Use TKIP encryption.    AES:Use AES encryption.    TKIP-AES:Use TKIP and AES encryption.
     *
     * @return self
     */
    public function setEncrypt($encrypt)
    {
        $allowedValues = $this->getEncryptAllowableValues();
        if (!is_null($encrypt) && !in_array($encrypt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encrypt', must be one of '%s'",
                    $encrypt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encrypt'] = $encrypt;

        return $this;
    }

    /**
     * Gets keyindex
     *
     * @return int|null
     */
    public function getKeyindex()
    {
        return $this->container['keyindex'];
    }

    /**
     * Sets keyindex
     *
     * @param int|null $keyindex WEP key index (1 - 4).
     *
     * @return self
     */
    public function setKeyindex($keyindex)
    {

        if (!is_null($keyindex) && ($keyindex > 4)) {
            throw new \InvalidArgumentException('invalid value for $keyindex when calling InlineObject608., must be smaller than or equal to 4.');
        }
        if (!is_null($keyindex) && ($keyindex < 1)) {
            throw new \InvalidArgumentException('invalid value for $keyindex when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['keyindex'] = $keyindex;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key WEP Key.
     *
     * @return self
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string|null
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string|null $passphrase WPA pre-shared key (PSK) to be used to authenticate WiFi users.
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {
        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets sae_password
     *
     * @return string|null
     */
    public function getSaePassword()
    {
        return $this->container['sae_password'];
    }

    /**
     * Sets sae_password
     *
     * @param string|null $sae_password WPA3 SAE password to be used to authenticate WiFi users.
     *
     * @return self
     */
    public function setSaePassword($sae_password)
    {
        $this->container['sae_password'] = $sae_password;

        return $this;
    }

    /**
     * Gets radius_server
     *
     * @return string|null
     */
    public function getRadiusServer()
    {
        return $this->container['radius_server'];
    }

    /**
     * Sets radius_server
     *
     * @param string|null $radius_server RADIUS server to be used to authenticate WiFi users.
     *
     * @return self
     */
    public function setRadiusServer($radius_server)
    {
        if (!is_null($radius_server) && (mb_strlen($radius_server) > 35)) {
            throw new \InvalidArgumentException('invalid length for $radius_server when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['radius_server'] = $radius_server;

        return $this;
    }

    /**
     * Gets local_standalone
     *
     * @return string|null
     */
    public function getLocalStandalone()
    {
        return $this->container['local_standalone'];
    }

    /**
     * Sets local_standalone
     *
     * @param string|null $local_standalone Enable/disable AP local standalone (default = disable).    enable:Enable AP local standalone.    disable:Disable AP local standalone.
     *
     * @return self
     */
    public function setLocalStandalone($local_standalone)
    {
        $allowedValues = $this->getLocalStandaloneAllowableValues();
        if (!is_null($local_standalone) && !in_array($local_standalone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_standalone', must be one of '%s'",
                    $local_standalone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_standalone'] = $local_standalone;

        return $this;
    }

    /**
     * Gets local_standalone_nat
     *
     * @return string|null
     */
    public function getLocalStandaloneNat()
    {
        return $this->container['local_standalone_nat'];
    }

    /**
     * Sets local_standalone_nat
     *
     * @param string|null $local_standalone_nat Enable/disable AP local standalone NAT mode.    enable:Enable AP local standalone NAT mode.    disable:Disable AP local standalone NAT mode.
     *
     * @return self
     */
    public function setLocalStandaloneNat($local_standalone_nat)
    {
        $allowedValues = $this->getLocalStandaloneNatAllowableValues();
        if (!is_null($local_standalone_nat) && !in_array($local_standalone_nat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_standalone_nat', must be one of '%s'",
                    $local_standalone_nat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_standalone_nat'] = $local_standalone_nat;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address and subnet mask for the local standalone NAT subnet.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets dhcp_lease_time
     *
     * @return int|null
     */
    public function getDhcpLeaseTime()
    {
        return $this->container['dhcp_lease_time'];
    }

    /**
     * Sets dhcp_lease_time
     *
     * @param int|null $dhcp_lease_time DHCP lease time in seconds for NAT IP address.
     *
     * @return self
     */
    public function setDhcpLeaseTime($dhcp_lease_time)
    {

        if (!is_null($dhcp_lease_time) && ($dhcp_lease_time > 8640000)) {
            throw new \InvalidArgumentException('invalid value for $dhcp_lease_time when calling InlineObject608., must be smaller than or equal to 8640000.');
        }
        if (!is_null($dhcp_lease_time) && ($dhcp_lease_time < 300)) {
            throw new \InvalidArgumentException('invalid value for $dhcp_lease_time when calling InlineObject608., must be bigger than or equal to 300.');
        }

        $this->container['dhcp_lease_time'] = $dhcp_lease_time;

        return $this;
    }

    /**
     * Gets local_bridging
     *
     * @return string|null
     */
    public function getLocalBridging()
    {
        return $this->container['local_bridging'];
    }

    /**
     * Sets local_bridging
     *
     * @param string|null $local_bridging Enable/disable bridging of wireless and Ethernet interfaces on the FortiAP (default = disable).    enable:Enable AP local VAP to Ethernet bridging.    disable:Disable AP local VAP to Ethernet bridging.
     *
     * @return self
     */
    public function setLocalBridging($local_bridging)
    {
        $allowedValues = $this->getLocalBridgingAllowableValues();
        if (!is_null($local_bridging) && !in_array($local_bridging, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_bridging', must be one of '%s'",
                    $local_bridging,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_bridging'] = $local_bridging;

        return $this;
    }

    /**
     * Gets local_lan
     *
     * @return string|null
     */
    public function getLocalLan()
    {
        return $this->container['local_lan'];
    }

    /**
     * Sets local_lan
     *
     * @param string|null $local_lan Allow/deny traffic destined for a Class A, B, or C private IP address (default = allow).    allow:Allow traffic destined for a Class A, B, or C private IP address.    deny:Deny traffic destined for a Class A, B, or C private IP address.
     *
     * @return self
     */
    public function setLocalLan($local_lan)
    {
        $allowedValues = $this->getLocalLanAllowableValues();
        if (!is_null($local_lan) && !in_array($local_lan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_lan', must be one of '%s'",
                    $local_lan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_lan'] = $local_lan;

        return $this;
    }

    /**
     * Gets local_authentication
     *
     * @return string|null
     */
    public function getLocalAuthentication()
    {
        return $this->container['local_authentication'];
    }

    /**
     * Sets local_authentication
     *
     * @param string|null $local_authentication Enable/disable AP local authentication.    enable:Enable AP local authentication.    disable:Disable AP local authentication.
     *
     * @return self
     */
    public function setLocalAuthentication($local_authentication)
    {
        $allowedValues = $this->getLocalAuthenticationAllowableValues();
        if (!is_null($local_authentication) && !in_array($local_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_authentication', must be one of '%s'",
                    $local_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_authentication'] = $local_authentication;

        return $this;
    }

    /**
     * Gets usergroup
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null
     */
    public function getUsergroup()
    {
        return $this->container['usergroup'];
    }

    /**
     * Sets usergroup
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null $usergroup Firewall user group to be used to authenticate WiFi users.
     *
     * @return self
     */
    public function setUsergroup($usergroup)
    {

        if (!is_null($usergroup) && (count($usergroup) > 0)) {
            throw new \InvalidArgumentException('invalid value for $usergroup when calling InlineObject608., number of items must be less than or equal to 0.');
        }
        $this->container['usergroup'] = $usergroup;

        return $this;
    }

    /**
     * Gets portal_message_override_group
     *
     * @return string|null
     */
    public function getPortalMessageOverrideGroup()
    {
        return $this->container['portal_message_override_group'];
    }

    /**
     * Sets portal_message_override_group
     *
     * @param string|null $portal_message_override_group Replacement message group for this VAP (only available when security is set to a captive portal type).
     *
     * @return self
     */
    public function setPortalMessageOverrideGroup($portal_message_override_group)
    {
        if (!is_null($portal_message_override_group) && (mb_strlen($portal_message_override_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $portal_message_override_group when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['portal_message_override_group'] = $portal_message_override_group;

        return $this;
    }

    /**
     * Gets portal_message_overrides
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNamePortalMessageOverrides[]|null
     */
    public function getPortalMessageOverrides()
    {
        return $this->container['portal_message_overrides'];
    }

    /**
     * Sets portal_message_overrides
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNamePortalMessageOverrides[]|null $portal_message_overrides Individual message overrides.
     *
     * @return self
     */
    public function setPortalMessageOverrides($portal_message_overrides)
    {

        if (!is_null($portal_message_overrides) && (count($portal_message_overrides) > 0)) {
            throw new \InvalidArgumentException('invalid value for $portal_message_overrides when calling InlineObject608., number of items must be less than or equal to 0.');
        }
        $this->container['portal_message_overrides'] = $portal_message_overrides;

        return $this;
    }

    /**
     * Gets portal_type
     *
     * @return string|null
     */
    public function getPortalType()
    {
        return $this->container['portal_type'];
    }

    /**
     * Sets portal_type
     *
     * @param string|null $portal_type Captive portal functionality. Configure how the captive portal authenticates users and whether it includes a disclaimer.    auth:Portal for authentication.    auth+disclaimer:Portal for authentication and disclaimer.    disclaimer:Portal for disclaimer.    email-collect:Portal for email collection.    cmcc:Portal for CMCC.    cmcc-macauth:Portal for CMCC and MAC authentication.    auth-mac:Portal for authentication and MAC authentication.    external-auth:Portal for external portal authentication.
     *
     * @return self
     */
    public function setPortalType($portal_type)
    {
        $allowedValues = $this->getPortalTypeAllowableValues();
        if (!is_null($portal_type) && !in_array($portal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'portal_type', must be one of '%s'",
                    $portal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['portal_type'] = $portal_type;

        return $this;
    }

    /**
     * Gets selected_usergroups
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null
     */
    public function getSelectedUsergroups()
    {
        return $this->container['selected_usergroups'];
    }

    /**
     * Sets selected_usergroups
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WebfilterProfileNameOvrdUserGroup[]|null $selected_usergroups Selective user groups that are permitted to authenticate.
     *
     * @return self
     */
    public function setSelectedUsergroups($selected_usergroups)
    {

        if (!is_null($selected_usergroups) && (count($selected_usergroups) > 0)) {
            throw new \InvalidArgumentException('invalid value for $selected_usergroups when calling InlineObject608., number of items must be less than or equal to 0.');
        }
        $this->container['selected_usergroups'] = $selected_usergroups;

        return $this;
    }

    /**
     * Gets security_exempt_list
     *
     * @return string|null
     */
    public function getSecurityExemptList()
    {
        return $this->container['security_exempt_list'];
    }

    /**
     * Sets security_exempt_list
     *
     * @param string|null $security_exempt_list Optional security exempt list for captive portal authentication.
     *
     * @return self
     */
    public function setSecurityExemptList($security_exempt_list)
    {
        if (!is_null($security_exempt_list) && (mb_strlen($security_exempt_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $security_exempt_list when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['security_exempt_list'] = $security_exempt_list;

        return $this;
    }

    /**
     * Gets security_redirect_url
     *
     * @return string|null
     */
    public function getSecurityRedirectUrl()
    {
        return $this->container['security_redirect_url'];
    }

    /**
     * Sets security_redirect_url
     *
     * @param string|null $security_redirect_url Optional URL for redirecting users after they pass captive portal authentication.
     *
     * @return self
     */
    public function setSecurityRedirectUrl($security_redirect_url)
    {
        if (!is_null($security_redirect_url) && (mb_strlen($security_redirect_url) > 127)) {
            throw new \InvalidArgumentException('invalid length for $security_redirect_url when calling InlineObject608., must be smaller than or equal to 127.');
        }

        $this->container['security_redirect_url'] = $security_redirect_url;

        return $this;
    }

    /**
     * Gets intra_vap_privacy
     *
     * @return string|null
     */
    public function getIntraVapPrivacy()
    {
        return $this->container['intra_vap_privacy'];
    }

    /**
     * Sets intra_vap_privacy
     *
     * @param string|null $intra_vap_privacy Enable/disable blocking communication between clients on the same SSID (called intra-SSID privacy) (default = disable).    enable:Enable intra-SSID privacy.    disable:Disable intra-SSID privacy.
     *
     * @return self
     */
    public function setIntraVapPrivacy($intra_vap_privacy)
    {
        $allowedValues = $this->getIntraVapPrivacyAllowableValues();
        if (!is_null($intra_vap_privacy) && !in_array($intra_vap_privacy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'intra_vap_privacy', must be one of '%s'",
                    $intra_vap_privacy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['intra_vap_privacy'] = $intra_vap_privacy;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerMpskProfileNameMpskSchedules[]|null $schedule Firewall schedules for enabling this VAP on the FortiAP. This VAP will be enabled when at least one of the schedules is valid. Separate multiple schedule names with a space.
     *
     * @return self
     */
    public function setSchedule($schedule)
    {

        if (!is_null($schedule) && (count($schedule) > 16)) {
            throw new \InvalidArgumentException('invalid value for $schedule when calling InlineObject608., number of items must be less than or equal to 16.');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets ldpc
     *
     * @return string|null
     */
    public function getLdpc()
    {
        return $this->container['ldpc'];
    }

    /**
     * Sets ldpc
     *
     * @param string|null $ldpc VAP low-density parity-check (LDPC) coding configuration.    disable:Disable LDPC.    rx:Enable LDPC when receiving traffic.    tx:Enable LDPC when transmitting traffic.    rxtx:Enable LDPC when both receiving and transmitting traffic.
     *
     * @return self
     */
    public function setLdpc($ldpc)
    {
        $allowedValues = $this->getLdpcAllowableValues();
        if (!is_null($ldpc) && !in_array($ldpc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ldpc', must be one of '%s'",
                    $ldpc,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ldpc'] = $ldpc;

        return $this;
    }

    /**
     * Gets high_efficiency
     *
     * @return string|null
     */
    public function getHighEfficiency()
    {
        return $this->container['high_efficiency'];
    }

    /**
     * Sets high_efficiency
     *
     * @param string|null $high_efficiency Enable/disable 802.11ax high efficiency (default = enable).    enable:Enable 802.11ax high efficiency.    disable:Disable 802.11ax high efficiency.
     *
     * @return self
     */
    public function setHighEfficiency($high_efficiency)
    {
        $allowedValues = $this->getHighEfficiencyAllowableValues();
        if (!is_null($high_efficiency) && !in_array($high_efficiency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'high_efficiency', must be one of '%s'",
                    $high_efficiency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['high_efficiency'] = $high_efficiency;

        return $this;
    }

    /**
     * Gets target_wake_time
     *
     * @return string|null
     */
    public function getTargetWakeTime()
    {
        return $this->container['target_wake_time'];
    }

    /**
     * Sets target_wake_time
     *
     * @param string|null $target_wake_time Enable/disable 802.11ax target wake time (default = enable).    enable:Enable 802.11ax target wake time.    disable:Disable 802.11ax target wake time.
     *
     * @return self
     */
    public function setTargetWakeTime($target_wake_time)
    {
        $allowedValues = $this->getTargetWakeTimeAllowableValues();
        if (!is_null($target_wake_time) && !in_array($target_wake_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target_wake_time', must be one of '%s'",
                    $target_wake_time,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target_wake_time'] = $target_wake_time;

        return $this;
    }

    /**
     * Gets port_macauth
     *
     * @return string|null
     */
    public function getPortMacauth()
    {
        return $this->container['port_macauth'];
    }

    /**
     * Sets port_macauth
     *
     * @param string|null $port_macauth Enable/disable LAN port MAC authentication (default = disable).    disable:Disable LAN port MAC authentication.    radius:Enable LAN port RADIUS-based MAC authentication.    address-group:Enable LAN port address-group based MAC authentication.
     *
     * @return self
     */
    public function setPortMacauth($port_macauth)
    {
        $allowedValues = $this->getPortMacauthAllowableValues();
        if (!is_null($port_macauth) && !in_array($port_macauth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'port_macauth', must be one of '%s'",
                    $port_macauth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['port_macauth'] = $port_macauth;

        return $this;
    }

    /**
     * Gets port_macauth_timeout
     *
     * @return int|null
     */
    public function getPortMacauthTimeout()
    {
        return $this->container['port_macauth_timeout'];
    }

    /**
     * Sets port_macauth_timeout
     *
     * @param int|null $port_macauth_timeout LAN port MAC authentication idle timeout value (default = 600 sec).
     *
     * @return self
     */
    public function setPortMacauthTimeout($port_macauth_timeout)
    {

        if (!is_null($port_macauth_timeout) && ($port_macauth_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port_macauth_timeout when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($port_macauth_timeout) && ($port_macauth_timeout < 60)) {
            throw new \InvalidArgumentException('invalid value for $port_macauth_timeout when calling InlineObject608., must be bigger than or equal to 60.');
        }

        $this->container['port_macauth_timeout'] = $port_macauth_timeout;

        return $this;
    }

    /**
     * Gets port_macauth_reauth_timeout
     *
     * @return int|null
     */
    public function getPortMacauthReauthTimeout()
    {
        return $this->container['port_macauth_reauth_timeout'];
    }

    /**
     * Sets port_macauth_reauth_timeout
     *
     * @param int|null $port_macauth_reauth_timeout LAN port MAC authentication re-authentication timeout value (default = 7200 sec).
     *
     * @return self
     */
    public function setPortMacauthReauthTimeout($port_macauth_reauth_timeout)
    {

        if (!is_null($port_macauth_reauth_timeout) && ($port_macauth_reauth_timeout > 65535)) {
            throw new \InvalidArgumentException('invalid value for $port_macauth_reauth_timeout when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($port_macauth_reauth_timeout) && ($port_macauth_reauth_timeout < 120)) {
            throw new \InvalidArgumentException('invalid value for $port_macauth_reauth_timeout when calling InlineObject608., must be bigger than or equal to 120.');
        }

        $this->container['port_macauth_reauth_timeout'] = $port_macauth_reauth_timeout;

        return $this;
    }

    /**
     * Gets bss_color_partial
     *
     * @return string|null
     */
    public function getBssColorPartial()
    {
        return $this->container['bss_color_partial'];
    }

    /**
     * Sets bss_color_partial
     *
     * @param string|null $bss_color_partial Enable/disable 802.11ax partial BSS color (default = enable).    enable:Enable 802.11ax partial BSS color.    disable:Disable 802.11ax partial BSS color.
     *
     * @return self
     */
    public function setBssColorPartial($bss_color_partial)
    {
        $allowedValues = $this->getBssColorPartialAllowableValues();
        if (!is_null($bss_color_partial) && !in_array($bss_color_partial, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bss_color_partial', must be one of '%s'",
                    $bss_color_partial,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bss_color_partial'] = $bss_color_partial;

        return $this;
    }

    /**
     * Gets mpsk_profile
     *
     * @return string|null
     */
    public function getMpskProfile()
    {
        return $this->container['mpsk_profile'];
    }

    /**
     * Sets mpsk_profile
     *
     * @param string|null $mpsk_profile MPSK profile name.
     *
     * @return self
     */
    public function setMpskProfile($mpsk_profile)
    {
        if (!is_null($mpsk_profile) && (mb_strlen($mpsk_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $mpsk_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['mpsk_profile'] = $mpsk_profile;

        return $this;
    }

    /**
     * Gets split_tunneling
     *
     * @return string|null
     */
    public function getSplitTunneling()
    {
        return $this->container['split_tunneling'];
    }

    /**
     * Sets split_tunneling
     *
     * @param string|null $split_tunneling Enable/disable split tunneling (default = disable).    enable:Enable split tunneling.    disable:Disable split tunneling.
     *
     * @return self
     */
    public function setSplitTunneling($split_tunneling)
    {
        $allowedValues = $this->getSplitTunnelingAllowableValues();
        if (!is_null($split_tunneling) && !in_array($split_tunneling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'split_tunneling', must be one of '%s'",
                    $split_tunneling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['split_tunneling'] = $split_tunneling;

        return $this;
    }

    /**
     * Gets vlanid
     *
     * @return int|null
     */
    public function getVlanid()
    {
        return $this->container['vlanid'];
    }

    /**
     * Sets vlanid
     *
     * @param int|null $vlanid Optional VLAN ID.
     *
     * @return self
     */
    public function setVlanid($vlanid)
    {

        if (!is_null($vlanid) && ($vlanid > 4094)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject608., must be smaller than or equal to 4094.');
        }
        if (!is_null($vlanid) && ($vlanid < 0)) {
            throw new \InvalidArgumentException('invalid value for $vlanid when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['vlanid'] = $vlanid;

        return $this;
    }

    /**
     * Gets vlan_auto
     *
     * @return string|null
     */
    public function getVlanAuto()
    {
        return $this->container['vlan_auto'];
    }

    /**
     * Sets vlan_auto
     *
     * @param string|null $vlan_auto Enable/disable automatic management of SSID VLAN interface.    enable:Enable automatic management of SSID VLAN interface.    disable:Disable automatic management of SSID VLAN interface.
     *
     * @return self
     */
    public function setVlanAuto($vlan_auto)
    {
        $allowedValues = $this->getVlanAutoAllowableValues();
        if (!is_null($vlan_auto) && !in_array($vlan_auto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlan_auto', must be one of '%s'",
                    $vlan_auto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlan_auto'] = $vlan_auto;

        return $this;
    }

    /**
     * Gets dynamic_vlan
     *
     * @return string|null
     */
    public function getDynamicVlan()
    {
        return $this->container['dynamic_vlan'];
    }

    /**
     * Sets dynamic_vlan
     *
     * @param string|null $dynamic_vlan Enable/disable dynamic VLAN assignment.    enable:Enable dynamic VLAN assignment.    disable:Disable dynamic VLAN assignment.
     *
     * @return self
     */
    public function setDynamicVlan($dynamic_vlan)
    {
        $allowedValues = $this->getDynamicVlanAllowableValues();
        if (!is_null($dynamic_vlan) && !in_array($dynamic_vlan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dynamic_vlan', must be one of '%s'",
                    $dynamic_vlan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dynamic_vlan'] = $dynamic_vlan;

        return $this;
    }

    /**
     * Gets captive_portal_ac_name
     *
     * @return string|null
     */
    public function getCaptivePortalAcName()
    {
        return $this->container['captive_portal_ac_name'];
    }

    /**
     * Sets captive_portal_ac_name
     *
     * @param string|null $captive_portal_ac_name Local-bridging captive portal ac-name.
     *
     * @return self
     */
    public function setCaptivePortalAcName($captive_portal_ac_name)
    {
        if (!is_null($captive_portal_ac_name) && (mb_strlen($captive_portal_ac_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $captive_portal_ac_name when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['captive_portal_ac_name'] = $captive_portal_ac_name;

        return $this;
    }

    /**
     * Gets captive_portal_auth_timeout
     *
     * @return int|null
     */
    public function getCaptivePortalAuthTimeout()
    {
        return $this->container['captive_portal_auth_timeout'];
    }

    /**
     * Sets captive_portal_auth_timeout
     *
     * @param int|null $captive_portal_auth_timeout Hard timeout - AP will always clear the session after timeout regardless of traffic (0 - 864000 sec, default = 0).
     *
     * @return self
     */
    public function setCaptivePortalAuthTimeout($captive_portal_auth_timeout)
    {

        if (!is_null($captive_portal_auth_timeout) && ($captive_portal_auth_timeout > 864000)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_auth_timeout when calling InlineObject608., must be smaller than or equal to 864000.');
        }
        if (!is_null($captive_portal_auth_timeout) && ($captive_portal_auth_timeout < 0)) {
            throw new \InvalidArgumentException('invalid value for $captive_portal_auth_timeout when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['captive_portal_auth_timeout'] = $captive_portal_auth_timeout;

        return $this;
    }

    /**
     * Gets multicast_rate
     *
     * @return string|null
     */
    public function getMulticastRate()
    {
        return $this->container['multicast_rate'];
    }

    /**
     * Sets multicast_rate
     *
     * @param string|null $multicast_rate Multicast rate (0, 6000, 12000, or 24000 kbps, default = 0).    0:Use the default multicast rate.    6000:6 Mbps.    12000:12 Mbps.    24000:24 Mbps.
     *
     * @return self
     */
    public function setMulticastRate($multicast_rate)
    {
        $allowedValues = $this->getMulticastRateAllowableValues();
        if (!is_null($multicast_rate) && !in_array($multicast_rate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_rate', must be one of '%s'",
                    $multicast_rate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_rate'] = $multicast_rate;

        return $this;
    }

    /**
     * Gets multicast_enhance
     *
     * @return string|null
     */
    public function getMulticastEnhance()
    {
        return $this->container['multicast_enhance'];
    }

    /**
     * Sets multicast_enhance
     *
     * @param string|null $multicast_enhance Enable/disable converting multicast to unicast to improve performance (default = disable).    enable:Enable multicast enhancement.    disable:Disable multicast enhancement.
     *
     * @return self
     */
    public function setMulticastEnhance($multicast_enhance)
    {
        $allowedValues = $this->getMulticastEnhanceAllowableValues();
        if (!is_null($multicast_enhance) && !in_array($multicast_enhance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_enhance', must be one of '%s'",
                    $multicast_enhance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_enhance'] = $multicast_enhance;

        return $this;
    }

    /**
     * Gets igmp_snooping
     *
     * @return string|null
     */
    public function getIgmpSnooping()
    {
        return $this->container['igmp_snooping'];
    }

    /**
     * Sets igmp_snooping
     *
     * @param string|null $igmp_snooping Enable/disable IGMP snooping.    enable:Enable IGMP snooping.    disable:Disable IGMP snooping.
     *
     * @return self
     */
    public function setIgmpSnooping($igmp_snooping)
    {
        $allowedValues = $this->getIgmpSnoopingAllowableValues();
        if (!is_null($igmp_snooping) && !in_array($igmp_snooping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'igmp_snooping', must be one of '%s'",
                    $igmp_snooping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['igmp_snooping'] = $igmp_snooping;

        return $this;
    }

    /**
     * Gets broadcast_suppression
     *
     * @return string|null
     */
    public function getBroadcastSuppression()
    {
        return $this->container['broadcast_suppression'];
    }

    /**
     * Sets broadcast_suppression
     *
     * @param string|null $broadcast_suppression Optional suppression of broadcast messages. For example, you can keep DHCP messages, ARP broadcasts, and so on off of the wireless network.    dhcp-up:Suppress broadcast uplink DHCP messages.    dhcp-down:Suppress broadcast downlink DHCP messages.    dhcp-starvation:Suppress broadcast DHCP starvation req messages.    dhcp-ucast:Convert downlink broadcast DHCP messages to unicast messages.    arp-known:Suppress broadcast ARP for known wireless clients.    arp-unknown:Suppress broadcast ARP for unknown wireless clients.    arp-reply:Suppress broadcast ARP reply from wireless clients.    arp-poison:Suppress ARP poison messages from wireless clients.    arp-proxy:Reply ARP requests for wireless clients as a proxy.    netbios-ns:Suppress NetBIOS name services packets with UDP port 137.    netbios-ds:Suppress NetBIOS datagram services packets with UDP port 138.    ipv6:Suppress IPv6 packets.    all-other-mc:Suppress all other multicast messages.    all-other-bc:Suppress all other broadcast messages.
     *
     * @return self
     */
    public function setBroadcastSuppression($broadcast_suppression)
    {
        $allowedValues = $this->getBroadcastSuppressionAllowableValues();
        if (!is_null($broadcast_suppression) && !in_array($broadcast_suppression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'broadcast_suppression', must be one of '%s'",
                    $broadcast_suppression,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['broadcast_suppression'] = $broadcast_suppression;

        return $this;
    }

    /**
     * Gets ipv6_rules
     *
     * @return string|null
     */
    public function getIpv6Rules()
    {
        return $this->container['ipv6_rules'];
    }

    /**
     * Sets ipv6_rules
     *
     * @param string|null $ipv6_rules Optional rules of IPv6 packets. For example, you can keep RA, RS and so on off of the wireless network.    drop-icmp6ra:Drop ICMP6 Router Advertisement (RA) packets that originate from wireless clients.    drop-icmp6rs:Drop ICMP6 Router Solicitation (RS) packets to be sent to wireless clients.    drop-llmnr6:Drop Link-Local Multicast Name Resolution (LLMNR) packets    drop-icmp6mld2:Drop ICMP6 Multicast Listener Report V2 (MLD2) packets    drop-dhcp6s:Drop DHCP6 server generated packets that originate from wireless clients.    drop-dhcp6c:Drop DHCP6 client generated packets to be sent to wireless clients.    ndp-proxy:Enable IPv6 ndp proxy - send back na on behalf of the client and drop the ns.    drop-ns-dad:Drop ICMP6 NS-DAD when target address is not found in ndp proxy cache.    drop-ns-nondad:Drop ICMP6 NS-NonDAD when target address is not found in ndp proxy cache.
     *
     * @return self
     */
    public function setIpv6Rules($ipv6_rules)
    {
        $allowedValues = $this->getIpv6RulesAllowableValues();
        if (!is_null($ipv6_rules) && !in_array($ipv6_rules, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv6_rules', must be one of '%s'",
                    $ipv6_rules,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv6_rules'] = $ipv6_rules;

        return $this;
    }

    /**
     * Gets me_disable_thresh
     *
     * @return int|null
     */
    public function getMeDisableThresh()
    {
        return $this->container['me_disable_thresh'];
    }

    /**
     * Sets me_disable_thresh
     *
     * @param int|null $me_disable_thresh Disable multicast enhancement when this many clients are receiving multicast traffic.
     *
     * @return self
     */
    public function setMeDisableThresh($me_disable_thresh)
    {

        if (!is_null($me_disable_thresh) && ($me_disable_thresh > 256)) {
            throw new \InvalidArgumentException('invalid value for $me_disable_thresh when calling InlineObject608., must be smaller than or equal to 256.');
        }
        if (!is_null($me_disable_thresh) && ($me_disable_thresh < 2)) {
            throw new \InvalidArgumentException('invalid value for $me_disable_thresh when calling InlineObject608., must be bigger than or equal to 2.');
        }

        $this->container['me_disable_thresh'] = $me_disable_thresh;

        return $this;
    }

    /**
     * Gets mu_mimo
     *
     * @return string|null
     */
    public function getMuMimo()
    {
        return $this->container['mu_mimo'];
    }

    /**
     * Sets mu_mimo
     *
     * @param string|null $mu_mimo Enable/disable Multi-user MIMO (default = enable).    enable:Enable Multi-user MIMO.    disable:Disable Multi-user MIMO.
     *
     * @return self
     */
    public function setMuMimo($mu_mimo)
    {
        $allowedValues = $this->getMuMimoAllowableValues();
        if (!is_null($mu_mimo) && !in_array($mu_mimo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mu_mimo', must be one of '%s'",
                    $mu_mimo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mu_mimo'] = $mu_mimo;

        return $this;
    }

    /**
     * Gets probe_resp_suppression
     *
     * @return string|null
     */
    public function getProbeRespSuppression()
    {
        return $this->container['probe_resp_suppression'];
    }

    /**
     * Sets probe_resp_suppression
     *
     * @param string|null $probe_resp_suppression Enable/disable probe response suppression (to ignore weak signals) (default = disable).    enable:Enable probe response suppression.    disable:Disable probe response suppression.
     *
     * @return self
     */
    public function setProbeRespSuppression($probe_resp_suppression)
    {
        $allowedValues = $this->getProbeRespSuppressionAllowableValues();
        if (!is_null($probe_resp_suppression) && !in_array($probe_resp_suppression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'probe_resp_suppression', must be one of '%s'",
                    $probe_resp_suppression,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['probe_resp_suppression'] = $probe_resp_suppression;

        return $this;
    }

    /**
     * Gets probe_resp_threshold
     *
     * @return string|null
     */
    public function getProbeRespThreshold()
    {
        return $this->container['probe_resp_threshold'];
    }

    /**
     * Sets probe_resp_threshold
     *
     * @param string|null $probe_resp_threshold Minimum signal level/threshold in dBm required for the AP response to probe requests (-95 to -20, default = -80).
     *
     * @return self
     */
    public function setProbeRespThreshold($probe_resp_threshold)
    {
        if (!is_null($probe_resp_threshold) && (mb_strlen($probe_resp_threshold) > 7)) {
            throw new \InvalidArgumentException('invalid length for $probe_resp_threshold when calling InlineObject608., must be smaller than or equal to 7.');
        }

        $this->container['probe_resp_threshold'] = $probe_resp_threshold;

        return $this;
    }

    /**
     * Gets radio_sensitivity
     *
     * @return string|null
     */
    public function getRadioSensitivity()
    {
        return $this->container['radio_sensitivity'];
    }

    /**
     * Sets radio_sensitivity
     *
     * @param string|null $radio_sensitivity Enable/disable software radio sensitivity (to ignore weak signals) (default = disable).    enable:Enable software radio sensitivity.    disable:Disable software radio sensitivity.
     *
     * @return self
     */
    public function setRadioSensitivity($radio_sensitivity)
    {
        $allowedValues = $this->getRadioSensitivityAllowableValues();
        if (!is_null($radio_sensitivity) && !in_array($radio_sensitivity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'radio_sensitivity', must be one of '%s'",
                    $radio_sensitivity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radio_sensitivity'] = $radio_sensitivity;

        return $this;
    }

    /**
     * Gets quarantine
     *
     * @return string|null
     */
    public function getQuarantine()
    {
        return $this->container['quarantine'];
    }

    /**
     * Sets quarantine
     *
     * @param string|null $quarantine Enable/disable station quarantine (default = enable).    enable:Enable station quarantine.    disable:Disable station quarantine.
     *
     * @return self
     */
    public function setQuarantine($quarantine)
    {
        $allowedValues = $this->getQuarantineAllowableValues();
        if (!is_null($quarantine) && !in_array($quarantine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quarantine', must be one of '%s'",
                    $quarantine,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quarantine'] = $quarantine;

        return $this;
    }

    /**
     * Gets radio_5g_threshold
     *
     * @return string|null
     */
    public function getRadio5gThreshold()
    {
        return $this->container['radio_5g_threshold'];
    }

    /**
     * Sets radio_5g_threshold
     *
     * @param string|null $radio_5g_threshold Minimum signal level/threshold in dBm required for the AP response to receive a packet in 5G band(-95 to -20, default = -76).
     *
     * @return self
     */
    public function setRadio5gThreshold($radio_5g_threshold)
    {
        if (!is_null($radio_5g_threshold) && (mb_strlen($radio_5g_threshold) > 7)) {
            throw new \InvalidArgumentException('invalid length for $radio_5g_threshold when calling InlineObject608., must be smaller than or equal to 7.');
        }

        $this->container['radio_5g_threshold'] = $radio_5g_threshold;

        return $this;
    }

    /**
     * Gets radio_2g_threshold
     *
     * @return string|null
     */
    public function getRadio2gThreshold()
    {
        return $this->container['radio_2g_threshold'];
    }

    /**
     * Sets radio_2g_threshold
     *
     * @param string|null $radio_2g_threshold Minimum signal level/threshold in dBm required for the AP response to receive a packet in 2.4G band (-95 to -20, default = -79).
     *
     * @return self
     */
    public function setRadio2gThreshold($radio_2g_threshold)
    {
        if (!is_null($radio_2g_threshold) && (mb_strlen($radio_2g_threshold) > 7)) {
            throw new \InvalidArgumentException('invalid length for $radio_2g_threshold when calling InlineObject608., must be smaller than or equal to 7.');
        }

        $this->container['radio_2g_threshold'] = $radio_2g_threshold;

        return $this;
    }

    /**
     * Gets vlan_pooling
     *
     * @return string|null
     */
    public function getVlanPooling()
    {
        return $this->container['vlan_pooling'];
    }

    /**
     * Sets vlan_pooling
     *
     * @param string|null $vlan_pooling Enable/disable VLAN pooling, to allow grouping of multiple wireless controller VLANs into VLAN pools (default = disable). When set to wtp-group, VLAN pooling occurs with VLAN assignment by wtp-group.    wtp-group:Enable VLAN pooling with VLAN assignment by wtp-group.    round-robin:Enable VLAN pooling with round-robin VLAN assignment.    hash:Enable VLAN pooling with hash-based VLAN assignment.    disable:Disable VLAN pooling.
     *
     * @return self
     */
    public function setVlanPooling($vlan_pooling)
    {
        $allowedValues = $this->getVlanPoolingAllowableValues();
        if (!is_null($vlan_pooling) && !in_array($vlan_pooling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vlan_pooling', must be one of '%s'",
                    $vlan_pooling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vlan_pooling'] = $vlan_pooling;

        return $this;
    }

    /**
     * Gets vlan_pool
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameVlanPool[]|null
     */
    public function getVlanPool()
    {
        return $this->container['vlan_pool'];
    }

    /**
     * Sets vlan_pool
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameVlanPool[]|null $vlan_pool VLAN pool.
     *
     * @return self
     */
    public function setVlanPool($vlan_pool)
    {

        if (!is_null($vlan_pool) && (count($vlan_pool) > 16)) {
            throw new \InvalidArgumentException('invalid value for $vlan_pool when calling InlineObject608., number of items must be less than or equal to 16.');
        }
        $this->container['vlan_pool'] = $vlan_pool;

        return $this;
    }

    /**
     * Gets dhcp_option43_insertion
     *
     * @return string|null
     */
    public function getDhcpOption43Insertion()
    {
        return $this->container['dhcp_option43_insertion'];
    }

    /**
     * Sets dhcp_option43_insertion
     *
     * @param string|null $dhcp_option43_insertion Enable/disable insertion of DHCP option 43 (default = enable).    enable:Enable insertion of DHCP option 43.    disable:Disable insertion of DHCP option 43.
     *
     * @return self
     */
    public function setDhcpOption43Insertion($dhcp_option43_insertion)
    {
        $allowedValues = $this->getDhcpOption43InsertionAllowableValues();
        if (!is_null($dhcp_option43_insertion) && !in_array($dhcp_option43_insertion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_option43_insertion', must be one of '%s'",
                    $dhcp_option43_insertion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_option43_insertion'] = $dhcp_option43_insertion;

        return $this;
    }

    /**
     * Gets dhcp_option82_insertion
     *
     * @return string|null
     */
    public function getDhcpOption82Insertion()
    {
        return $this->container['dhcp_option82_insertion'];
    }

    /**
     * Sets dhcp_option82_insertion
     *
     * @param string|null $dhcp_option82_insertion Enable/disable DHCP option 82 insert (default = disable).    enable:Enable DHCP option 82 insert.    disable:Disable DHCP option 82 insert.
     *
     * @return self
     */
    public function setDhcpOption82Insertion($dhcp_option82_insertion)
    {
        $allowedValues = $this->getDhcpOption82InsertionAllowableValues();
        if (!is_null($dhcp_option82_insertion) && !in_array($dhcp_option82_insertion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_option82_insertion', must be one of '%s'",
                    $dhcp_option82_insertion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_option82_insertion'] = $dhcp_option82_insertion;

        return $this;
    }

    /**
     * Gets dhcp_option82_circuit_id_insertion
     *
     * @return string|null
     */
    public function getDhcpOption82CircuitIdInsertion()
    {
        return $this->container['dhcp_option82_circuit_id_insertion'];
    }

    /**
     * Sets dhcp_option82_circuit_id_insertion
     *
     * @param string|null $dhcp_option82_circuit_id_insertion Enable/disable DHCP option 82 circuit-id insert (default = disable).    style-1:ASCII string composed of AP-MAC;SSID;SSID-TYPE. For example, \"xx:xx:xx:xx:xx:xx;wifi;s\".    style-2:ASCII string composed of AP-MAC. For example, \"xx:xx:xx:xx:xx:xx\".    style-3:ASCII string composed of NETWORK-TYPE:WTPPROF-NAME:VLAN:SSID:AP-MODEL:AP-HOSTNAME:AP-MAC. For example,\"WLAN:FAPS221E-default:100:wifi:PS221E:FortiAP-S221E:xx:xx:xx:xx:xx:xx\".    disable:Disable DHCP option 82 circuit-id insert.
     *
     * @return self
     */
    public function setDhcpOption82CircuitIdInsertion($dhcp_option82_circuit_id_insertion)
    {
        $allowedValues = $this->getDhcpOption82CircuitIdInsertionAllowableValues();
        if (!is_null($dhcp_option82_circuit_id_insertion) && !in_array($dhcp_option82_circuit_id_insertion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_option82_circuit_id_insertion', must be one of '%s'",
                    $dhcp_option82_circuit_id_insertion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_option82_circuit_id_insertion'] = $dhcp_option82_circuit_id_insertion;

        return $this;
    }

    /**
     * Gets dhcp_option82_remote_id_insertion
     *
     * @return string|null
     */
    public function getDhcpOption82RemoteIdInsertion()
    {
        return $this->container['dhcp_option82_remote_id_insertion'];
    }

    /**
     * Sets dhcp_option82_remote_id_insertion
     *
     * @param string|null $dhcp_option82_remote_id_insertion Enable/disable DHCP option 82 remote-id insert (default = disable).    style-1:ASCII string in the format \"xx:xx:xx:xx:xx:xx\" containing MAC address of client device.    disable:Disable DHCP option 82 remote-id insert.
     *
     * @return self
     */
    public function setDhcpOption82RemoteIdInsertion($dhcp_option82_remote_id_insertion)
    {
        $allowedValues = $this->getDhcpOption82RemoteIdInsertionAllowableValues();
        if (!is_null($dhcp_option82_remote_id_insertion) && !in_array($dhcp_option82_remote_id_insertion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_option82_remote_id_insertion', must be one of '%s'",
                    $dhcp_option82_remote_id_insertion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_option82_remote_id_insertion'] = $dhcp_option82_remote_id_insertion;

        return $this;
    }

    /**
     * Gets ptk_rekey
     *
     * @return string|null
     */
    public function getPtkRekey()
    {
        return $this->container['ptk_rekey'];
    }

    /**
     * Sets ptk_rekey
     *
     * @param string|null $ptk_rekey Enable/disable PTK rekey for WPA-Enterprise security.    enable:Enable PTK rekey for WPA-Enterprise security.    disable:Disable PTK rekey for WPA-Enterprise security.
     *
     * @return self
     */
    public function setPtkRekey($ptk_rekey)
    {
        $allowedValues = $this->getPtkRekeyAllowableValues();
        if (!is_null($ptk_rekey) && !in_array($ptk_rekey, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ptk_rekey', must be one of '%s'",
                    $ptk_rekey,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ptk_rekey'] = $ptk_rekey;

        return $this;
    }

    /**
     * Gets ptk_rekey_intv
     *
     * @return int|null
     */
    public function getPtkRekeyIntv()
    {
        return $this->container['ptk_rekey_intv'];
    }

    /**
     * Sets ptk_rekey_intv
     *
     * @param int|null $ptk_rekey_intv PTK rekey interval (1800 - 864000 sec, default = 86400).
     *
     * @return self
     */
    public function setPtkRekeyIntv($ptk_rekey_intv)
    {

        if (!is_null($ptk_rekey_intv) && ($ptk_rekey_intv > 864000)) {
            throw new \InvalidArgumentException('invalid value for $ptk_rekey_intv when calling InlineObject608., must be smaller than or equal to 864000.');
        }
        if (!is_null($ptk_rekey_intv) && ($ptk_rekey_intv < 1800)) {
            throw new \InvalidArgumentException('invalid value for $ptk_rekey_intv when calling InlineObject608., must be bigger than or equal to 1800.');
        }

        $this->container['ptk_rekey_intv'] = $ptk_rekey_intv;

        return $this;
    }

    /**
     * Gets gtk_rekey
     *
     * @return string|null
     */
    public function getGtkRekey()
    {
        return $this->container['gtk_rekey'];
    }

    /**
     * Sets gtk_rekey
     *
     * @param string|null $gtk_rekey Enable/disable GTK rekey for WPA security.    enable:Enable GTK rekey for WPA security.    disable:Disable GTK rekey for WPA security.
     *
     * @return self
     */
    public function setGtkRekey($gtk_rekey)
    {
        $allowedValues = $this->getGtkRekeyAllowableValues();
        if (!is_null($gtk_rekey) && !in_array($gtk_rekey, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gtk_rekey', must be one of '%s'",
                    $gtk_rekey,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gtk_rekey'] = $gtk_rekey;

        return $this;
    }

    /**
     * Gets gtk_rekey_intv
     *
     * @return int|null
     */
    public function getGtkRekeyIntv()
    {
        return $this->container['gtk_rekey_intv'];
    }

    /**
     * Sets gtk_rekey_intv
     *
     * @param int|null $gtk_rekey_intv GTK rekey interval (1800 - 864000 sec, default = 86400).
     *
     * @return self
     */
    public function setGtkRekeyIntv($gtk_rekey_intv)
    {

        if (!is_null($gtk_rekey_intv) && ($gtk_rekey_intv > 864000)) {
            throw new \InvalidArgumentException('invalid value for $gtk_rekey_intv when calling InlineObject608., must be smaller than or equal to 864000.');
        }
        if (!is_null($gtk_rekey_intv) && ($gtk_rekey_intv < 1800)) {
            throw new \InvalidArgumentException('invalid value for $gtk_rekey_intv when calling InlineObject608., must be bigger than or equal to 1800.');
        }

        $this->container['gtk_rekey_intv'] = $gtk_rekey_intv;

        return $this;
    }

    /**
     * Gets eap_reauth
     *
     * @return string|null
     */
    public function getEapReauth()
    {
        return $this->container['eap_reauth'];
    }

    /**
     * Sets eap_reauth
     *
     * @param string|null $eap_reauth Enable/disable EAP re-authentication for WPA-Enterprise security.    enable:Enable EAP re-authentication for WPA-Enterprise security.    disable:Disable EAP re-authentication for WPA-Enterprise security.
     *
     * @return self
     */
    public function setEapReauth($eap_reauth)
    {
        $allowedValues = $this->getEapReauthAllowableValues();
        if (!is_null($eap_reauth) && !in_array($eap_reauth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eap_reauth', must be one of '%s'",
                    $eap_reauth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eap_reauth'] = $eap_reauth;

        return $this;
    }

    /**
     * Gets eap_reauth_intv
     *
     * @return int|null
     */
    public function getEapReauthIntv()
    {
        return $this->container['eap_reauth_intv'];
    }

    /**
     * Sets eap_reauth_intv
     *
     * @param int|null $eap_reauth_intv EAP re-authentication interval (1800 - 864000 sec, default = 86400).
     *
     * @return self
     */
    public function setEapReauthIntv($eap_reauth_intv)
    {

        if (!is_null($eap_reauth_intv) && ($eap_reauth_intv > 864000)) {
            throw new \InvalidArgumentException('invalid value for $eap_reauth_intv when calling InlineObject608., must be smaller than or equal to 864000.');
        }
        if (!is_null($eap_reauth_intv) && ($eap_reauth_intv < 1800)) {
            throw new \InvalidArgumentException('invalid value for $eap_reauth_intv when calling InlineObject608., must be bigger than or equal to 1800.');
        }

        $this->container['eap_reauth_intv'] = $eap_reauth_intv;

        return $this;
    }

    /**
     * Gets qos_profile
     *
     * @return string|null
     */
    public function getQosProfile()
    {
        return $this->container['qos_profile'];
    }

    /**
     * Sets qos_profile
     *
     * @param string|null $qos_profile Quality of service profile name.
     *
     * @return self
     */
    public function setQosProfile($qos_profile)
    {
        if (!is_null($qos_profile) && (mb_strlen($qos_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $qos_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['qos_profile'] = $qos_profile;

        return $this;
    }

    /**
     * Gets hotspot20_profile
     *
     * @return string|null
     */
    public function getHotspot20Profile()
    {
        return $this->container['hotspot20_profile'];
    }

    /**
     * Sets hotspot20_profile
     *
     * @param string|null $hotspot20_profile Hotspot 2.0 profile name.
     *
     * @return self
     */
    public function setHotspot20Profile($hotspot20_profile)
    {
        if (!is_null($hotspot20_profile) && (mb_strlen($hotspot20_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $hotspot20_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['hotspot20_profile'] = $hotspot20_profile;

        return $this;
    }

    /**
     * Gets access_control_list
     *
     * @return string|null
     */
    public function getAccessControlList()
    {
        return $this->container['access_control_list'];
    }

    /**
     * Sets access_control_list
     *
     * @param string|null $access_control_list access-control-list profile name.
     *
     * @return self
     */
    public function setAccessControlList($access_control_list)
    {
        if (!is_null($access_control_list) && (mb_strlen($access_control_list) > 35)) {
            throw new \InvalidArgumentException('invalid length for $access_control_list when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['access_control_list'] = $access_control_list;

        return $this;
    }

    /**
     * Gets primary_wag_profile
     *
     * @return string|null
     */
    public function getPrimaryWagProfile()
    {
        return $this->container['primary_wag_profile'];
    }

    /**
     * Sets primary_wag_profile
     *
     * @param string|null $primary_wag_profile Primary wireless access gateway profile name.
     *
     * @return self
     */
    public function setPrimaryWagProfile($primary_wag_profile)
    {
        if (!is_null($primary_wag_profile) && (mb_strlen($primary_wag_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $primary_wag_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['primary_wag_profile'] = $primary_wag_profile;

        return $this;
    }

    /**
     * Gets secondary_wag_profile
     *
     * @return string|null
     */
    public function getSecondaryWagProfile()
    {
        return $this->container['secondary_wag_profile'];
    }

    /**
     * Sets secondary_wag_profile
     *
     * @param string|null $secondary_wag_profile Secondary wireless access gateway profile name.
     *
     * @return self
     */
    public function setSecondaryWagProfile($secondary_wag_profile)
    {
        if (!is_null($secondary_wag_profile) && (mb_strlen($secondary_wag_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $secondary_wag_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['secondary_wag_profile'] = $secondary_wag_profile;

        return $this;
    }

    /**
     * Gets tunnel_echo_interval
     *
     * @return int|null
     */
    public function getTunnelEchoInterval()
    {
        return $this->container['tunnel_echo_interval'];
    }

    /**
     * Sets tunnel_echo_interval
     *
     * @param int|null $tunnel_echo_interval The time interval to send echo to both primary and secondary tunnel peers (1 - 65535 sec, default = 300).
     *
     * @return self
     */
    public function setTunnelEchoInterval($tunnel_echo_interval)
    {

        if (!is_null($tunnel_echo_interval) && ($tunnel_echo_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $tunnel_echo_interval when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($tunnel_echo_interval) && ($tunnel_echo_interval < 1)) {
            throw new \InvalidArgumentException('invalid value for $tunnel_echo_interval when calling InlineObject608., must be bigger than or equal to 1.');
        }

        $this->container['tunnel_echo_interval'] = $tunnel_echo_interval;

        return $this;
    }

    /**
     * Gets tunnel_fallback_interval
     *
     * @return int|null
     */
    public function getTunnelFallbackInterval()
    {
        return $this->container['tunnel_fallback_interval'];
    }

    /**
     * Sets tunnel_fallback_interval
     *
     * @param int|null $tunnel_fallback_interval The time interval for secondary tunnel to fall back to primary tunnel (0 - 65535 sec, default = 7200).
     *
     * @return self
     */
    public function setTunnelFallbackInterval($tunnel_fallback_interval)
    {

        if (!is_null($tunnel_fallback_interval) && ($tunnel_fallback_interval > 65535)) {
            throw new \InvalidArgumentException('invalid value for $tunnel_fallback_interval when calling InlineObject608., must be smaller than or equal to 65535.');
        }
        if (!is_null($tunnel_fallback_interval) && ($tunnel_fallback_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $tunnel_fallback_interval when calling InlineObject608., must be bigger than or equal to 0.');
        }

        $this->container['tunnel_fallback_interval'] = $tunnel_fallback_interval;

        return $this;
    }

    /**
     * Gets rates_11a
     *
     * @return string|null
     */
    public function getRates11a()
    {
        return $this->container['rates_11a'];
    }

    /**
     * Sets rates_11a
     *
     * @param string|null $rates_11a Allowed data rates for 802.11a.    1:1 Mbps supported rate.    1-basic:1 Mbps BSS basic rate.    2:2 Mbps supported rate.    2-basic:2 Mbps BSS basic rate.    5.5:5.5 Mbps supported rate.    5.5-basic:5.5 Mbps BSS basic rate.    11:11 Mbps supported rate.    11-basic:11 Mbps BSS basic rate.    6:6 Mbps supported rate.    6-basic:6 Mbps BSS basic rate.    9:9 Mbps supported rate.    9-basic:9 Mbps BSS basic rate.    12:12 Mbps supported rate.    12-basic:12 Mbps BSS basic rate.    18:18 Mbps supported rate.    18-basic:18 Mbps BSS basic rate.    24:24 Mbps supported rate.    24-basic:24 Mbps BSS basic rate.    36:36 Mbps supported rate.    36-basic:36 Mbps BSS basic rate.    48:48 Mbps supported rate.    48-basic:48 Mbps BSS basic rate.    54:54 Mbps supported rate.    54-basic:54 Mbps BSS basic rate.
     *
     * @return self
     */
    public function setRates11a($rates_11a)
    {
        $allowedValues = $this->getRates11aAllowableValues();
        if (!is_null($rates_11a) && !in_array($rates_11a, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11a', must be one of '%s'",
                    $rates_11a,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11a'] = $rates_11a;

        return $this;
    }

    /**
     * Gets rates_11bg
     *
     * @return string|null
     */
    public function getRates11bg()
    {
        return $this->container['rates_11bg'];
    }

    /**
     * Sets rates_11bg
     *
     * @param string|null $rates_11bg Allowed data rates for 802.11b/g.    1:1 Mbps supported rate.    1-basic:1 Mbps BSS basic rate.    2:2 Mbps supported rate.    2-basic:2 Mbps BSS basic rate.    5.5:5.5 Mbps supported rate.    5.5-basic:5.5 Mbps BSS basic rate.    11:11 Mbps supported rate.    11-basic:11 Mbps BSS basic rate.    6:6 Mbps supported rate.    6-basic:6 Mbps BSS basic rate.    9:9 Mbps supported rate.    9-basic:9 Mbps BSS basic rate.    12:12 Mbps supported rate.    12-basic:12 Mbps BSS basic rate.    18:18 Mbps supported rate.    18-basic:18 Mbps BSS basic rate.    24:24 Mbps supported rate.    24-basic:24 Mbps BSS basic rate.    36:36 Mbps supported rate.    36-basic:36 Mbps BSS basic rate.    48:48 Mbps supported rate.    48-basic:48 Mbps BSS basic rate.    54:54 Mbps supported rate.    54-basic:54 Mbps BSS basic rate.
     *
     * @return self
     */
    public function setRates11bg($rates_11bg)
    {
        $allowedValues = $this->getRates11bgAllowableValues();
        if (!is_null($rates_11bg) && !in_array($rates_11bg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11bg', must be one of '%s'",
                    $rates_11bg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11bg'] = $rates_11bg;

        return $this;
    }

    /**
     * Gets rates_11n_ss12
     *
     * @return string|null
     */
    public function getRates11nSs12()
    {
        return $this->container['rates_11n_ss12'];
    }

    /**
     * Sets rates_11n_ss12
     *
     * @param string|null $rates_11n_ss12 Allowed data rates for 802.11n with 1 or 2 spatial streams.    mcs0/1:Data rate for MCS index 0 with 1 spatial stream.    mcs1/1:Data rate for MCS index 1 with 1 spatial stream.    mcs2/1:Data rate for MCS index 2 with 1 spatial stream.    mcs3/1:Data rate for MCS index 3 with 1 spatial stream.    mcs4/1:Data rate for MCS index 4 with 1 spatial stream.    mcs5/1:Data rate for MCS index 5 with 1 spatial stream.    mcs6/1:Data rate for MCS index 6 with 1 spatial stream.    mcs7/1:Data rate for MCS index 7 with 1 spatial stream.    mcs8/2:Data rate for MCS index 8 with 2 spatial streams.    mcs9/2:Data rate for MCS index 9 with 2 spatial streams.    mcs10/2:Data rate for MCS index 10 with 2 spatial streams.    mcs11/2:Data rate for MCS index 11 with 2 spatial streams.    mcs12/2:Data rate for MCS index 12 with 2 spatial streams.    mcs13/2:Data rate for MCS index 13 with 2 spatial streams.    mcs14/2:Data rate for MCS index 14 with 2 spatial streams.    mcs15/2:Data rate for MCS index 15 with 2 spatial streams.
     *
     * @return self
     */
    public function setRates11nSs12($rates_11n_ss12)
    {
        $allowedValues = $this->getRates11nSs12AllowableValues();
        if (!is_null($rates_11n_ss12) && !in_array($rates_11n_ss12, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11n_ss12', must be one of '%s'",
                    $rates_11n_ss12,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11n_ss12'] = $rates_11n_ss12;

        return $this;
    }

    /**
     * Gets rates_11n_ss34
     *
     * @return string|null
     */
    public function getRates11nSs34()
    {
        return $this->container['rates_11n_ss34'];
    }

    /**
     * Sets rates_11n_ss34
     *
     * @param string|null $rates_11n_ss34 Allowed data rates for 802.11n with 3 or 4 spatial streams.    mcs16/3:Data rate for MCS index 16 with 3 spatial streams.    mcs17/3:Data rate for MCS index 17 with 3 spatial streams.    mcs18/3:Data rate for MCS index 18 with 3 spatial streams.    mcs19/3:Data rate for MCS index 19 with 3 spatial streams.    mcs20/3:Data rate for MCS index 20 with 3 spatial streams.    mcs21/3:Data rate for MCS index 21 with 3 spatial streams.    mcs22/3:Data rate for MCS index 22 with 3 spatial streams.    mcs23/3:Data rate for MCS index 23 with 3 spatial streams.    mcs24/4:Data rate for MCS index 24 with 4 spatial streams.    mcs25/4:Data rate for MCS index 25 with 4 spatial streams.    mcs26/4:Data rate for MCS index 26 with 4 spatial streams.    mcs27/4:Data rate for MCS index 27 with 4 spatial streams.    mcs28/4:Data rate for MCS index 28 with 4 spatial streams.    mcs29/4:Data rate for MCS index 29 with 4 spatial streams.    mcs30/4:Data rate for MCS index 30 with 4 spatial streams.    mcs31/4:Data rate for MCS index 31 with 4 spatial streams.
     *
     * @return self
     */
    public function setRates11nSs34($rates_11n_ss34)
    {
        $allowedValues = $this->getRates11nSs34AllowableValues();
        if (!is_null($rates_11n_ss34) && !in_array($rates_11n_ss34, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11n_ss34', must be one of '%s'",
                    $rates_11n_ss34,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11n_ss34'] = $rates_11n_ss34;

        return $this;
    }

    /**
     * Gets rates_11ac_ss12
     *
     * @return string|null
     */
    public function getRates11acSs12()
    {
        return $this->container['rates_11ac_ss12'];
    }

    /**
     * Sets rates_11ac_ss12
     *
     * @param string|null $rates_11ac_ss12 Allowed data rates for 802.11ac/ax with 1 or 2 spatial streams.    mcs0/1:Data rate for MCS index 0 with 1 spatial stream.    mcs1/1:Data rate for MCS index 1 with 1 spatial stream.    mcs2/1:Data rate for MCS index 2 with 1 spatial stream.    mcs3/1:Data rate for MCS index 3 with 1 spatial stream.    mcs4/1:Data rate for MCS index 4 with 1 spatial stream.    mcs5/1:Data rate for MCS index 5 with 1 spatial stream.    mcs6/1:Data rate for MCS index 6 with 1 spatial stream.    mcs7/1:Data rate for MCS index 7 with 1 spatial stream.    mcs8/1:Data rate for MCS index 8 with 1 spatial stream.    mcs9/1:Data rate for MCS index 9 with 1 spatial stream.    mcs10/1:Data rate for MCS index 10 with 1 spatial stream.    mcs11/1:Data rate for MCS index 11 with 1 spatial stream.    mcs0/2:Data rate for MCS index 0 with 2 spatial streams.    mcs1/2:Data rate for MCS index 1 with 2 spatial streams.    mcs2/2:Data rate for MCS index 2 with 2 spatial streams.    mcs3/2:Data rate for MCS index 3 with 2 spatial streams.    mcs4/2:Data rate for MCS index 4 with 2 spatial streams.    mcs5/2:Data rate for MCS index 5 with 2 spatial streams.    mcs6/2:Data rate for MCS index 6 with 2 spatial streams.    mcs7/2:Data rate for MCS index 7 with 2 spatial streams.    mcs8/2:Data rate for MCS index 8 with 2 spatial streams.    mcs9/2:Data rate for MCS index 9 with 2 spatial streams.    mcs10/2:Data rate for MCS index 10 with 2 spatial streams.    mcs11/2:Data rate for MCS index 11 with 2 spatial streams.
     *
     * @return self
     */
    public function setRates11acSs12($rates_11ac_ss12)
    {
        $allowedValues = $this->getRates11acSs12AllowableValues();
        if (!is_null($rates_11ac_ss12) && !in_array($rates_11ac_ss12, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11ac_ss12', must be one of '%s'",
                    $rates_11ac_ss12,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11ac_ss12'] = $rates_11ac_ss12;

        return $this;
    }

    /**
     * Gets rates_11ac_ss34
     *
     * @return string|null
     */
    public function getRates11acSs34()
    {
        return $this->container['rates_11ac_ss34'];
    }

    /**
     * Sets rates_11ac_ss34
     *
     * @param string|null $rates_11ac_ss34 Allowed data rates for 802.11ac/ax with 3 or 4 spatial streams.    mcs0/3:Data rate for MCS index 0 with 3 spatial streams.    mcs1/3:Data rate for MCS index 1 with 3 spatial streams.    mcs2/3:Data rate for MCS index 2 with 3 spatial streams.    mcs3/3:Data rate for MCS index 3 with 3 spatial streams.    mcs4/3:Data rate for MCS index 4 with 3 spatial streams.    mcs5/3:Data rate for MCS index 5 with 3 spatial streams.    mcs6/3:Data rate for MCS index 6 with 3 spatial streams.    mcs7/3:Data rate for MCS index 7 with 3 spatial streams.    mcs8/3:Data rate for MCS index 8 with 3 spatial streams.    mcs9/3:Data rate for MCS index 9 with 3 spatial streams.    mcs10/3:Data rate for MCS index 10 with 3 spatial streams.    mcs11/3:Data rate for MCS index 11 with 3 spatial streams.    mcs0/4:Data rate for MCS index 0 with 4 spatial streams.    mcs1/4:Data rate for MCS index 1 with 4 spatial streams.    mcs2/4:Data rate for MCS index 2 with 4 spatial streams.    mcs3/4:Data rate for MCS index 3 with 4 spatial streams.    mcs4/4:Data rate for MCS index 4 with 4 spatial streams.    mcs5/4:Data rate for MCS index 5 with 4 spatial streams.    mcs6/4:Data rate for MCS index 6 with 4 spatial streams.    mcs7/4:Data rate for MCS index 7 with 4 spatial streams.    mcs8/4:Data rate for MCS index 8 with 4 spatial streams.    mcs9/4:Data rate for MCS index 9 with 4 spatial streams.    mcs10/4:Data rate for MCS index 10 with 4 spatial streams.    mcs11/4:Data rate for MCS index 11 with 4 spatial streams.
     *
     * @return self
     */
    public function setRates11acSs34($rates_11ac_ss34)
    {
        $allowedValues = $this->getRates11acSs34AllowableValues();
        if (!is_null($rates_11ac_ss34) && !in_array($rates_11ac_ss34, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rates_11ac_ss34', must be one of '%s'",
                    $rates_11ac_ss34,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rates_11ac_ss34'] = $rates_11ac_ss34;

        return $this;
    }

    /**
     * Gets utm_profile
     *
     * @return string|null
     */
    public function getUtmProfile()
    {
        return $this->container['utm_profile'];
    }

    /**
     * Sets utm_profile
     *
     * @param string|null $utm_profile UTM profile name.
     *
     * @return self
     */
    public function setUtmProfile($utm_profile)
    {
        if (!is_null($utm_profile) && (mb_strlen($utm_profile) > 35)) {
            throw new \InvalidArgumentException('invalid length for $utm_profile when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['utm_profile'] = $utm_profile;

        return $this;
    }

    /**
     * Gets address_group
     *
     * @return string|null
     */
    public function getAddressGroup()
    {
        return $this->container['address_group'];
    }

    /**
     * Sets address_group
     *
     * @param string|null $address_group Address group ID.
     *
     * @return self
     */
    public function setAddressGroup($address_group)
    {
        if (!is_null($address_group) && (mb_strlen($address_group) > 35)) {
            throw new \InvalidArgumentException('invalid length for $address_group when calling InlineObject608., must be smaller than or equal to 35.');
        }

        $this->container['address_group'] = $address_group;

        return $this;
    }

    /**
     * Gets mac_filter
     *
     * @return string|null
     */
    public function getMacFilter()
    {
        return $this->container['mac_filter'];
    }

    /**
     * Sets mac_filter
     *
     * @param string|null $mac_filter Enable/disable MAC filtering to block wireless clients by mac address.    enable:Enable MAC filtering.    disable:Disable MAC filtering.
     *
     * @return self
     */
    public function setMacFilter($mac_filter)
    {
        $allowedValues = $this->getMacFilterAllowableValues();
        if (!is_null($mac_filter) && !in_array($mac_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_filter', must be one of '%s'",
                    $mac_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_filter'] = $mac_filter;

        return $this;
    }

    /**
     * Gets mac_filter_policy_other
     *
     * @return string|null
     */
    public function getMacFilterPolicyOther()
    {
        return $this->container['mac_filter_policy_other'];
    }

    /**
     * Sets mac_filter_policy_other
     *
     * @param string|null $mac_filter_policy_other Allow or block clients with MAC addresses that are not in the filter list.    allow:Allow clients with MAC addresses that are not in the filter list.    deny:Block clients with MAC addresses that are not in the filter list.
     *
     * @return self
     */
    public function setMacFilterPolicyOther($mac_filter_policy_other)
    {
        $allowedValues = $this->getMacFilterPolicyOtherAllowableValues();
        if (!is_null($mac_filter_policy_other) && !in_array($mac_filter_policy_other, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mac_filter_policy_other', must be one of '%s'",
                    $mac_filter_policy_other,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mac_filter_policy_other'] = $mac_filter_policy_other;

        return $this;
    }

    /**
     * Gets mac_filter_list
     *
     * @return \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameMacFilterList[]|null
     */
    public function getMacFilterList()
    {
        return $this->container['mac_filter_list'];
    }

    /**
     * Sets mac_filter_list
     *
     * @param \Fortigate\FortiOS\Model\CMDB\WirelessControllerVapNameMacFilterList[]|null $mac_filter_list Create a list of MAC addresses for MAC address filtering.
     *
     * @return self
     */
    public function setMacFilterList($mac_filter_list)
    {

        if (!is_null($mac_filter_list) && (count($mac_filter_list) > 0)) {
            throw new \InvalidArgumentException('invalid value for $mac_filter_list when calling InlineObject608., number of items must be less than or equal to 0.');
        }
        $this->container['mac_filter_list'] = $mac_filter_list;

        return $this;
    }

    /**
     * Gets sticky_client_remove
     *
     * @return string|null
     */
    public function getStickyClientRemove()
    {
        return $this->container['sticky_client_remove'];
    }

    /**
     * Sets sticky_client_remove
     *
     * @param string|null $sticky_client_remove Enable/disable sticky client remove to maintain good signal level clients in SSID. (default = disable).    enable:Enable Sticky Client Remove.    disable:Disable Sticky Client Remove.
     *
     * @return self
     */
    public function setStickyClientRemove($sticky_client_remove)
    {
        $allowedValues = $this->getStickyClientRemoveAllowableValues();
        if (!is_null($sticky_client_remove) && !in_array($sticky_client_remove, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sticky_client_remove', must be one of '%s'",
                    $sticky_client_remove,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sticky_client_remove'] = $sticky_client_remove;

        return $this;
    }

    /**
     * Gets sticky_client_threshold_5g
     *
     * @return string|null
     */
    public function getStickyClientThreshold5g()
    {
        return $this->container['sticky_client_threshold_5g'];
    }

    /**
     * Sets sticky_client_threshold_5g
     *
     * @param string|null $sticky_client_threshold_5g Minimum signal level/threshold in dBm required for the 5G client to be serviced by the AP (-95 to -20, default = -76).
     *
     * @return self
     */
    public function setStickyClientThreshold5g($sticky_client_threshold_5g)
    {
        if (!is_null($sticky_client_threshold_5g) && (mb_strlen($sticky_client_threshold_5g) > 7)) {
            throw new \InvalidArgumentException('invalid length for $sticky_client_threshold_5g when calling InlineObject608., must be smaller than or equal to 7.');
        }

        $this->container['sticky_client_threshold_5g'] = $sticky_client_threshold_5g;

        return $this;
    }

    /**
     * Gets sticky_client_threshold_2g
     *
     * @return string|null
     */
    public function getStickyClientThreshold2g()
    {
        return $this->container['sticky_client_threshold_2g'];
    }

    /**
     * Sets sticky_client_threshold_2g
     *
     * @param string|null $sticky_client_threshold_2g Minimum signal level/threshold in dBm required for the 2G client to be serviced by the AP (-95 to -20, default = -79).
     *
     * @return self
     */
    public function setStickyClientThreshold2g($sticky_client_threshold_2g)
    {
        if (!is_null($sticky_client_threshold_2g) && (mb_strlen($sticky_client_threshold_2g) > 7)) {
            throw new \InvalidArgumentException('invalid length for $sticky_client_threshold_2g when calling InlineObject608., must be smaller than or equal to 7.');
        }

        $this->container['sticky_client_threshold_2g'] = $sticky_client_threshold_2g;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


