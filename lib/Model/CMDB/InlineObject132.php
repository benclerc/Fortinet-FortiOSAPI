<?php
/**
 * InlineObject132
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject132 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject132 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_132';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event' => 'string',
        'system' => 'string',
        'vpn' => 'string',
        'user' => 'string',
        'router' => 'string',
        'wireless_activity' => 'string',
        'wan_opt' => 'string',
        'endpoint' => 'string',
        'ha' => 'string',
        'security_rating' => 'string',
        'fortiextender' => 'string',
        'connector' => 'string',
        'sdwan' => 'string',
        'switch_controller' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event' => null,
        'system' => null,
        'vpn' => null,
        'user' => null,
        'router' => null,
        'wireless_activity' => null,
        'wan_opt' => null,
        'endpoint' => null,
        'ha' => null,
        'security_rating' => null,
        'fortiextender' => null,
        'connector' => null,
        'sdwan' => null,
        'switch_controller' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event' => 'event',
        'system' => 'system',
        'vpn' => 'vpn',
        'user' => 'user',
        'router' => 'router',
        'wireless_activity' => 'wireless-activity',
        'wan_opt' => 'wan-opt',
        'endpoint' => 'endpoint',
        'ha' => 'ha',
        'security_rating' => 'security-rating',
        'fortiextender' => 'fortiextender',
        'connector' => 'connector',
        'sdwan' => 'sdwan',
        'switch_controller' => 'switch-controller'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event' => 'setEvent',
        'system' => 'setSystem',
        'vpn' => 'setVpn',
        'user' => 'setUser',
        'router' => 'setRouter',
        'wireless_activity' => 'setWirelessActivity',
        'wan_opt' => 'setWanOpt',
        'endpoint' => 'setEndpoint',
        'ha' => 'setHa',
        'security_rating' => 'setSecurityRating',
        'fortiextender' => 'setFortiextender',
        'connector' => 'setConnector',
        'sdwan' => 'setSdwan',
        'switch_controller' => 'setSwitchController'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event' => 'getEvent',
        'system' => 'getSystem',
        'vpn' => 'getVpn',
        'user' => 'getUser',
        'router' => 'getRouter',
        'wireless_activity' => 'getWirelessActivity',
        'wan_opt' => 'getWanOpt',
        'endpoint' => 'getEndpoint',
        'ha' => 'getHa',
        'security_rating' => 'getSecurityRating',
        'fortiextender' => 'getFortiextender',
        'connector' => 'getConnector',
        'sdwan' => 'getSdwan',
        'switch_controller' => 'getSwitchController'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EVENT_ENABLE = 'enable';
    const EVENT_DISABLE = 'disable';
    const SYSTEM_ENABLE = 'enable';
    const SYSTEM_DISABLE = 'disable';
    const VPN_ENABLE = 'enable';
    const VPN_DISABLE = 'disable';
    const USER_ENABLE = 'enable';
    const USER_DISABLE = 'disable';
    const ROUTER_ENABLE = 'enable';
    const ROUTER_DISABLE = 'disable';
    const WIRELESS_ACTIVITY_ENABLE = 'enable';
    const WIRELESS_ACTIVITY_DISABLE = 'disable';
    const WAN_OPT_ENABLE = 'enable';
    const WAN_OPT_DISABLE = 'disable';
    const ENDPOINT_ENABLE = 'enable';
    const ENDPOINT_DISABLE = 'disable';
    const HA_ENABLE = 'enable';
    const HA_DISABLE = 'disable';
    const SECURITY_RATING_ENABLE = 'enable';
    const SECURITY_RATING_DISABLE = 'disable';
    const FORTIEXTENDER_ENABLE = 'enable';
    const FORTIEXTENDER_DISABLE = 'disable';
    const CONNECTOR_ENABLE = 'enable';
    const CONNECTOR_DISABLE = 'disable';
    const SDWAN_ENABLE = 'enable';
    const SDWAN_DISABLE = 'disable';
    const SWITCH_CONTROLLER_ENABLE = 'enable';
    const SWITCH_CONTROLLER_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_ENABLE,
            self::EVENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemAllowableValues()
    {
        return [
            self::SYSTEM_ENABLE,
            self::SYSTEM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVpnAllowableValues()
    {
        return [
            self::VPN_ENABLE,
            self::VPN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserAllowableValues()
    {
        return [
            self::USER_ENABLE,
            self::USER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouterAllowableValues()
    {
        return [
            self::ROUTER_ENABLE,
            self::ROUTER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWirelessActivityAllowableValues()
    {
        return [
            self::WIRELESS_ACTIVITY_ENABLE,
            self::WIRELESS_ACTIVITY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWanOptAllowableValues()
    {
        return [
            self::WAN_OPT_ENABLE,
            self::WAN_OPT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndpointAllowableValues()
    {
        return [
            self::ENDPOINT_ENABLE,
            self::ENDPOINT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaAllowableValues()
    {
        return [
            self::HA_ENABLE,
            self::HA_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityRatingAllowableValues()
    {
        return [
            self::SECURITY_RATING_ENABLE,
            self::SECURITY_RATING_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFortiextenderAllowableValues()
    {
        return [
            self::FORTIEXTENDER_ENABLE,
            self::FORTIEXTENDER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectorAllowableValues()
    {
        return [
            self::CONNECTOR_ENABLE,
            self::CONNECTOR_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSdwanAllowableValues()
    {
        return [
            self::SDWAN_ENABLE,
            self::SDWAN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchControllerAllowableValues()
    {
        return [
            self::SWITCH_CONTROLLER_ENABLE,
            self::SWITCH_CONTROLLER_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event'] = $data['event'] ?? null;
        $this->container['system'] = $data['system'] ?? null;
        $this->container['vpn'] = $data['vpn'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['router'] = $data['router'] ?? null;
        $this->container['wireless_activity'] = $data['wireless_activity'] ?? null;
        $this->container['wan_opt'] = $data['wan_opt'] ?? null;
        $this->container['endpoint'] = $data['endpoint'] ?? null;
        $this->container['ha'] = $data['ha'] ?? null;
        $this->container['security_rating'] = $data['security_rating'] ?? null;
        $this->container['fortiextender'] = $data['fortiextender'] ?? null;
        $this->container['connector'] = $data['connector'] ?? null;
        $this->container['sdwan'] = $data['sdwan'] ?? null;
        $this->container['switch_controller'] = $data['switch_controller'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSystemAllowableValues();
        if (!is_null($this->container['system']) && !in_array($this->container['system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'system', must be one of '%s'",
                $this->container['system'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVpnAllowableValues();
        if (!is_null($this->container['vpn']) && !in_array($this->container['vpn'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vpn', must be one of '%s'",
                $this->container['vpn'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserAllowableValues();
        if (!is_null($this->container['user']) && !in_array($this->container['user'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user', must be one of '%s'",
                $this->container['user'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouterAllowableValues();
        if (!is_null($this->container['router']) && !in_array($this->container['router'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'router', must be one of '%s'",
                $this->container['router'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWirelessActivityAllowableValues();
        if (!is_null($this->container['wireless_activity']) && !in_array($this->container['wireless_activity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wireless_activity', must be one of '%s'",
                $this->container['wireless_activity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWanOptAllowableValues();
        if (!is_null($this->container['wan_opt']) && !in_array($this->container['wan_opt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wan_opt', must be one of '%s'",
                $this->container['wan_opt'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEndpointAllowableValues();
        if (!is_null($this->container['endpoint']) && !in_array($this->container['endpoint'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'endpoint', must be one of '%s'",
                $this->container['endpoint'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHaAllowableValues();
        if (!is_null($this->container['ha']) && !in_array($this->container['ha'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ha', must be one of '%s'",
                $this->container['ha'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityRatingAllowableValues();
        if (!is_null($this->container['security_rating']) && !in_array($this->container['security_rating'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security_rating', must be one of '%s'",
                $this->container['security_rating'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFortiextenderAllowableValues();
        if (!is_null($this->container['fortiextender']) && !in_array($this->container['fortiextender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fortiextender', must be one of '%s'",
                $this->container['fortiextender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConnectorAllowableValues();
        if (!is_null($this->container['connector']) && !in_array($this->container['connector'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connector', must be one of '%s'",
                $this->container['connector'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($this->container['sdwan']) && !in_array($this->container['sdwan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sdwan', must be one of '%s'",
                $this->container['sdwan'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchControllerAllowableValues();
        if (!is_null($this->container['switch_controller']) && !in_array($this->container['switch_controller'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_controller', must be one of '%s'",
                $this->container['switch_controller'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event Enable/disable event logging.    enable:Enable event logging.    disable:Disable event logging.
     *
     * @return self
     */
    public function setEvent($event)
    {
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($event) && !in_array($event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets system
     *
     * @return string|null
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param string|null $system Enable/disable system event logging.    enable:Enable system event logging.    disable:Disable system event logging.
     *
     * @return self
     */
    public function setSystem($system)
    {
        $allowedValues = $this->getSystemAllowableValues();
        if (!is_null($system) && !in_array($system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'system', must be one of '%s'",
                    $system,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets vpn
     *
     * @return string|null
     */
    public function getVpn()
    {
        return $this->container['vpn'];
    }

    /**
     * Sets vpn
     *
     * @param string|null $vpn Enable/disable VPN event logging.    enable:Enable VPN event logging.    disable:Disable VPN event logging.
     *
     * @return self
     */
    public function setVpn($vpn)
    {
        $allowedValues = $this->getVpnAllowableValues();
        if (!is_null($vpn) && !in_array($vpn, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vpn', must be one of '%s'",
                    $vpn,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vpn'] = $vpn;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user Enable/disable user authentication event logging.    enable:Enable user authentication event logging.    disable:Disable user authentication event logging.
     *
     * @return self
     */
    public function setUser($user)
    {
        $allowedValues = $this->getUserAllowableValues();
        if (!is_null($user) && !in_array($user, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user', must be one of '%s'",
                    $user,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets router
     *
     * @return string|null
     */
    public function getRouter()
    {
        return $this->container['router'];
    }

    /**
     * Sets router
     *
     * @param string|null $router Enable/disable router event logging.    enable:Enable router event logging.    disable:Disable router event logging.
     *
     * @return self
     */
    public function setRouter($router)
    {
        $allowedValues = $this->getRouterAllowableValues();
        if (!is_null($router) && !in_array($router, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'router', must be one of '%s'",
                    $router,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['router'] = $router;

        return $this;
    }

    /**
     * Gets wireless_activity
     *
     * @return string|null
     */
    public function getWirelessActivity()
    {
        return $this->container['wireless_activity'];
    }

    /**
     * Sets wireless_activity
     *
     * @param string|null $wireless_activity Enable/disable wireless event logging.    enable:Enable wireless event logging.    disable:Disable wireless event logging.
     *
     * @return self
     */
    public function setWirelessActivity($wireless_activity)
    {
        $allowedValues = $this->getWirelessActivityAllowableValues();
        if (!is_null($wireless_activity) && !in_array($wireless_activity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wireless_activity', must be one of '%s'",
                    $wireless_activity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wireless_activity'] = $wireless_activity;

        return $this;
    }

    /**
     * Gets wan_opt
     *
     * @return string|null
     */
    public function getWanOpt()
    {
        return $this->container['wan_opt'];
    }

    /**
     * Sets wan_opt
     *
     * @param string|null $wan_opt Enable/disable WAN optimization event logging.    enable:Enable WAN optimization event logging.    disable:Disable WAN optimization event logging.
     *
     * @return self
     */
    public function setWanOpt($wan_opt)
    {
        $allowedValues = $this->getWanOptAllowableValues();
        if (!is_null($wan_opt) && !in_array($wan_opt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wan_opt', must be one of '%s'",
                    $wan_opt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wan_opt'] = $wan_opt;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string|null
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string|null $endpoint Enable/disable endpoint event logging.    enable:Enable endpoint event logging.    disable:Disable endpoint event logging.
     *
     * @return self
     */
    public function setEndpoint($endpoint)
    {
        $allowedValues = $this->getEndpointAllowableValues();
        if (!is_null($endpoint) && !in_array($endpoint, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'endpoint', must be one of '%s'",
                    $endpoint,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets ha
     *
     * @return string|null
     */
    public function getHa()
    {
        return $this->container['ha'];
    }

    /**
     * Sets ha
     *
     * @param string|null $ha Enable/disable ha event logging.    enable:Enable ha event logging.    disable:Disable ha event logging.
     *
     * @return self
     */
    public function setHa($ha)
    {
        $allowedValues = $this->getHaAllowableValues();
        if (!is_null($ha) && !in_array($ha, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ha', must be one of '%s'",
                    $ha,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha'] = $ha;

        return $this;
    }

    /**
     * Gets security_rating
     *
     * @return string|null
     */
    public function getSecurityRating()
    {
        return $this->container['security_rating'];
    }

    /**
     * Sets security_rating
     *
     * @param string|null $security_rating Enable/disable Security Rating result logging.    enable:Enable Security Fabric audit result logging.    disable:Disable Security Fabric audit result logging.
     *
     * @return self
     */
    public function setSecurityRating($security_rating)
    {
        $allowedValues = $this->getSecurityRatingAllowableValues();
        if (!is_null($security_rating) && !in_array($security_rating, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security_rating', must be one of '%s'",
                    $security_rating,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_rating'] = $security_rating;

        return $this;
    }

    /**
     * Gets fortiextender
     *
     * @return string|null
     */
    public function getFortiextender()
    {
        return $this->container['fortiextender'];
    }

    /**
     * Sets fortiextender
     *
     * @param string|null $fortiextender Enable/disable FortiExtender logging.    enable:Enable Forti-Extender logging.    disable:Disable Forti-Extender logging.
     *
     * @return self
     */
    public function setFortiextender($fortiextender)
    {
        $allowedValues = $this->getFortiextenderAllowableValues();
        if (!is_null($fortiextender) && !in_array($fortiextender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fortiextender', must be one of '%s'",
                    $fortiextender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fortiextender'] = $fortiextender;

        return $this;
    }

    /**
     * Gets connector
     *
     * @return string|null
     */
    public function getConnector()
    {
        return $this->container['connector'];
    }

    /**
     * Sets connector
     *
     * @param string|null $connector Enable/disable SDN connector logging.    enable:Enable SDN connector logging.    disable:Disable SDN connector logging.
     *
     * @return self
     */
    public function setConnector($connector)
    {
        $allowedValues = $this->getConnectorAllowableValues();
        if (!is_null($connector) && !in_array($connector, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connector', must be one of '%s'",
                    $connector,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connector'] = $connector;

        return $this;
    }

    /**
     * Gets sdwan
     *
     * @return string|null
     */
    public function getSdwan()
    {
        return $this->container['sdwan'];
    }

    /**
     * Sets sdwan
     *
     * @param string|null $sdwan Enable/disable SD-WAN logging.    enable:Enable SD-WAN logging.    disable:Disable SD-WAN logging.
     *
     * @return self
     */
    public function setSdwan($sdwan)
    {
        $allowedValues = $this->getSdwanAllowableValues();
        if (!is_null($sdwan) && !in_array($sdwan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sdwan', must be one of '%s'",
                    $sdwan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sdwan'] = $sdwan;

        return $this;
    }

    /**
     * Gets switch_controller
     *
     * @return string|null
     */
    public function getSwitchController()
    {
        return $this->container['switch_controller'];
    }

    /**
     * Sets switch_controller
     *
     * @param string|null $switch_controller Enable/disable Switch-Controller logging.    enable:Enable Switch-Controller logging.    disable:Disable Switch-Controller logging.
     *
     * @return self
     */
    public function setSwitchController($switch_controller)
    {
        $allowedValues = $this->getSwitchControllerAllowableValues();
        if (!is_null($switch_controller) && !in_array($switch_controller, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_controller', must be one of '%s'",
                    $switch_controller,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_controller'] = $switch_controller;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


