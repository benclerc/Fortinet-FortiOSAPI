<?php
/**
 * DlpFilepatternIdEntries
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * DlpFilepatternIdEntries Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DlpFilepatternIdEntries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_dlp_filepattern__id__entries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filter_type' => 'string',
        'pattern' => 'string',
        'file_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filter_type' => null,
        'pattern' => null,
        'file_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_type' => 'filter-type',
        'pattern' => 'pattern',
        'file_type' => 'file-type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_type' => 'setFilterType',
        'pattern' => 'setPattern',
        'file_type' => 'setFileType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_type' => 'getFilterType',
        'pattern' => 'getPattern',
        'file_type' => 'getFileType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FILTER_TYPE_PATTERN = 'pattern';
    const FILTER_TYPE_TYPE = 'type';
    const FILE_TYPE__7Z = '7z';
    const FILE_TYPE_ARJ = 'arj';
    const FILE_TYPE_CAB = 'cab';
    const FILE_TYPE_LZH = 'lzh';
    const FILE_TYPE_RAR = 'rar';
    const FILE_TYPE_TAR = 'tar';
    const FILE_TYPE_ZIP = 'zip';
    const FILE_TYPE_BZIP = 'bzip';
    const FILE_TYPE_GZIP = 'gzip';
    const FILE_TYPE_BZIP2 = 'bzip2';
    const FILE_TYPE_XZ = 'xz';
    const FILE_TYPE_BAT = 'bat';
    const FILE_TYPE_UUE = 'uue';
    const FILE_TYPE_MIME = 'mime';
    const FILE_TYPE_BASE64 = 'base64';
    const FILE_TYPE_BINHEX = 'binhex';
    const FILE_TYPE_ELF = 'elf';
    const FILE_TYPE_EXE = 'exe';
    const FILE_TYPE_HTA = 'hta';
    const FILE_TYPE_HTML = 'html';
    const FILE_TYPE_JAD = 'jad';
    const FILE_TYPE__CLASS = 'class';
    const FILE_TYPE_COD = 'cod';
    const FILE_TYPE_JAVASCRIPT = 'javascript';
    const FILE_TYPE_MSOFFICE = 'msoffice';
    const FILE_TYPE_MSOFFICEX = 'msofficex';
    const FILE_TYPE_FSG = 'fsg';
    const FILE_TYPE_UPX = 'upx';
    const FILE_TYPE_PETITE = 'petite';
    const FILE_TYPE_ASPACK = 'aspack';
    const FILE_TYPE_SIS = 'sis';
    const FILE_TYPE_HLP = 'hlp';
    const FILE_TYPE_ACTIVEMIME = 'activemime';
    const FILE_TYPE_JPEG = 'jpeg';
    const FILE_TYPE_GIF = 'gif';
    const FILE_TYPE_TIFF = 'tiff';
    const FILE_TYPE_PNG = 'png';
    const FILE_TYPE_BMP = 'bmp';
    const FILE_TYPE_UNKNOWN = 'unknown';
    const FILE_TYPE_MPEG = 'mpeg';
    const FILE_TYPE_MOV = 'mov';
    const FILE_TYPE_MP3 = 'mp3';
    const FILE_TYPE_WMA = 'wma';
    const FILE_TYPE_WAV = 'wav';
    const FILE_TYPE_PDF = 'pdf';
    const FILE_TYPE_AVI = 'avi';
    const FILE_TYPE_RM = 'rm';
    const FILE_TYPE_TORRENT = 'torrent';
    const FILE_TYPE_HIBUN = 'hibun';
    const FILE_TYPE_MSI = 'msi';
    const FILE_TYPE_MACH_O = 'mach-o';
    const FILE_TYPE_DMG = 'dmg';
    const FILE_TYPE_NET = '.net';
    const FILE_TYPE_XAR = 'xar';
    const FILE_TYPE_CHM = 'chm';
    const FILE_TYPE_ISO = 'iso';
    const FILE_TYPE_CRX = 'crx';
    const FILE_TYPE_FLAC = 'flac';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterTypeAllowableValues()
    {
        return [
            self::FILTER_TYPE_PATTERN,
            self::FILTER_TYPE_TYPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE__7Z,
            self::FILE_TYPE_ARJ,
            self::FILE_TYPE_CAB,
            self::FILE_TYPE_LZH,
            self::FILE_TYPE_RAR,
            self::FILE_TYPE_TAR,
            self::FILE_TYPE_ZIP,
            self::FILE_TYPE_BZIP,
            self::FILE_TYPE_GZIP,
            self::FILE_TYPE_BZIP2,
            self::FILE_TYPE_XZ,
            self::FILE_TYPE_BAT,
            self::FILE_TYPE_UUE,
            self::FILE_TYPE_MIME,
            self::FILE_TYPE_BASE64,
            self::FILE_TYPE_BINHEX,
            self::FILE_TYPE_ELF,
            self::FILE_TYPE_EXE,
            self::FILE_TYPE_HTA,
            self::FILE_TYPE_HTML,
            self::FILE_TYPE_JAD,
            self::FILE_TYPE__CLASS,
            self::FILE_TYPE_COD,
            self::FILE_TYPE_JAVASCRIPT,
            self::FILE_TYPE_MSOFFICE,
            self::FILE_TYPE_MSOFFICEX,
            self::FILE_TYPE_FSG,
            self::FILE_TYPE_UPX,
            self::FILE_TYPE_PETITE,
            self::FILE_TYPE_ASPACK,
            self::FILE_TYPE_SIS,
            self::FILE_TYPE_HLP,
            self::FILE_TYPE_ACTIVEMIME,
            self::FILE_TYPE_JPEG,
            self::FILE_TYPE_GIF,
            self::FILE_TYPE_TIFF,
            self::FILE_TYPE_PNG,
            self::FILE_TYPE_BMP,
            self::FILE_TYPE_UNKNOWN,
            self::FILE_TYPE_MPEG,
            self::FILE_TYPE_MOV,
            self::FILE_TYPE_MP3,
            self::FILE_TYPE_WMA,
            self::FILE_TYPE_WAV,
            self::FILE_TYPE_PDF,
            self::FILE_TYPE_AVI,
            self::FILE_TYPE_RM,
            self::FILE_TYPE_TORRENT,
            self::FILE_TYPE_HIBUN,
            self::FILE_TYPE_MSI,
            self::FILE_TYPE_MACH_O,
            self::FILE_TYPE_DMG,
            self::FILE_TYPE_NET,
            self::FILE_TYPE_XAR,
            self::FILE_TYPE_CHM,
            self::FILE_TYPE_ISO,
            self::FILE_TYPE_CRX,
            self::FILE_TYPE_FLAC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filter_type'] = $data['filter_type'] ?? null;
        $this->container['pattern'] = $data['pattern'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!is_null($this->container['filter_type']) && !in_array($this->container['filter_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filter_type', must be one of '%s'",
                $this->container['filter_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pattern']) && (mb_strlen($this->container['pattern']) > 79)) {
            $invalidProperties[] = "invalid value for 'pattern', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($this->container['file_type']) && !in_array($this->container['file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'file_type', must be one of '%s'",
                $this->container['file_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_type
     *
     * @return string|null
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     *
     * @param string|null $filter_type Filter by file name pattern or by file type.    pattern:Filter by file name pattern.    type:Filter by file type.
     *
     * @return self
     */
    public function setFilterType($filter_type)
    {
        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!is_null($filter_type) && !in_array($filter_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filter_type', must be one of '%s'",
                    $filter_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_type'] = $filter_type;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern Add a file name pattern.
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (!is_null($pattern) && (mb_strlen($pattern) > 79)) {
            throw new \InvalidArgumentException('invalid length for $pattern when calling DlpFilepatternIdEntries., must be smaller than or equal to 79.');
        }

        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type Select a file type.    7z:Match 7-zip files.    arj:Match arj compressed files.    cab:Match Windows cab files.    lzh:Match lzh compressed files.    rar:Match rar archives.    tar:Match tar files.    zip:Match zip files.    bzip:Match bzip files.    gzip:Match gzip files.    bzip2:Match bzip2 files.    xz:Match xz files.    bat:Match Windows batch files.    uue:Match uue files.    mime:Match mime files.    base64:Match base64 files.    binhex:Match binhex files.    elf:Match elf files.    exe:Match Windows executable files.    hta:Match hta files.    html:Match html files.    jad:Match jad files.    class:Match class files.    cod:Match cod files.    javascript:Match javascript files.    msoffice:Match MS-Office files. For example, doc, xls, ppt, and so on.    msofficex:Match MS-Office XML files. For example, docx, xlsx, pptx, and so on.    fsg:Match fsg files.    upx:Match upx files.    petite:Match petite files.    aspack:Match aspack files.    sis:Match sis files.    hlp:Match Windows help files.    activemime:Match activemime files.    jpeg:Match jpeg files.    gif:Match gif files.    tiff:Match tiff files.    png:Match png files.    bmp:Match bmp files.    unknown:Match unknown files.    mpeg:Match mpeg files.    mov:Match mov files.    mp3:Match mp3 files.    wma:Match wma files.    wav:Match wav files.    pdf:Match Acrobat PDF files.    avi:Match avi files.    rm:Match rm files.    torrent:Match torrent files.    hibun:Match special-file-23-support files.    msi:Match Windows Installer msi files.    mach-o:Match Mach object files.    dmg:Match Apple disk image files.    .net:Match .NET files.    xar:Match xar archive files.    chm:Match Windows compiled HTML help files.    iso:Match ISO archive files.    crx:Match Chrome extension files.    flac:Match flac files.
     *
     * @return self
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($file_type) && !in_array($file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'file_type', must be one of '%s'",
                    $file_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


