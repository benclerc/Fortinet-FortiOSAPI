<?php
/**
 * InlineObject370
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject370 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject370 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_370';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'load_balance_mode' => 'string',
        'duplication_max_num' => 'int',
        'neighbor_hold_down' => 'string',
        'neighbor_hold_down_time' => 'int',
        'neighbor_hold_boot_time' => 'int',
        'fail_detect' => 'string',
        'fail_alert_interfaces' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanFailAlertInterfaces[]',
        'zone' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanZone[]',
        'members' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers[]',
        'health_check' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck[]',
        'neighbor' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanNeighbor[]',
        'service' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanService[]',
        'duplication' => '\Fortigate\FortiOS\Model\CMDB\SystemSdwanDuplication[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'load_balance_mode' => null,
        'duplication_max_num' => null,
        'neighbor_hold_down' => null,
        'neighbor_hold_down_time' => null,
        'neighbor_hold_boot_time' => null,
        'fail_detect' => null,
        'fail_alert_interfaces' => null,
        'zone' => null,
        'members' => null,
        'health_check' => null,
        'neighbor' => null,
        'service' => null,
        'duplication' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'load_balance_mode' => 'load-balance-mode',
        'duplication_max_num' => 'duplication-max-num',
        'neighbor_hold_down' => 'neighbor-hold-down',
        'neighbor_hold_down_time' => 'neighbor-hold-down-time',
        'neighbor_hold_boot_time' => 'neighbor-hold-boot-time',
        'fail_detect' => 'fail-detect',
        'fail_alert_interfaces' => 'fail-alert-interfaces',
        'zone' => 'zone',
        'members' => 'members',
        'health_check' => 'health-check',
        'neighbor' => 'neighbor',
        'service' => 'service',
        'duplication' => 'duplication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'load_balance_mode' => 'setLoadBalanceMode',
        'duplication_max_num' => 'setDuplicationMaxNum',
        'neighbor_hold_down' => 'setNeighborHoldDown',
        'neighbor_hold_down_time' => 'setNeighborHoldDownTime',
        'neighbor_hold_boot_time' => 'setNeighborHoldBootTime',
        'fail_detect' => 'setFailDetect',
        'fail_alert_interfaces' => 'setFailAlertInterfaces',
        'zone' => 'setZone',
        'members' => 'setMembers',
        'health_check' => 'setHealthCheck',
        'neighbor' => 'setNeighbor',
        'service' => 'setService',
        'duplication' => 'setDuplication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'load_balance_mode' => 'getLoadBalanceMode',
        'duplication_max_num' => 'getDuplicationMaxNum',
        'neighbor_hold_down' => 'getNeighborHoldDown',
        'neighbor_hold_down_time' => 'getNeighborHoldDownTime',
        'neighbor_hold_boot_time' => 'getNeighborHoldBootTime',
        'fail_detect' => 'getFailDetect',
        'fail_alert_interfaces' => 'getFailAlertInterfaces',
        'zone' => 'getZone',
        'members' => 'getMembers',
        'health_check' => 'getHealthCheck',
        'neighbor' => 'getNeighbor',
        'service' => 'getService',
        'duplication' => 'getDuplication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DISABLE = 'disable';
    const STATUS_ENABLE = 'enable';
    const LOAD_BALANCE_MODE_SOURCE_IP_BASED = 'source-ip-based';
    const LOAD_BALANCE_MODE_WEIGHT_BASED = 'weight-based';
    const LOAD_BALANCE_MODE_USAGE_BASED = 'usage-based';
    const LOAD_BALANCE_MODE_SOURCE_DEST_IP_BASED = 'source-dest-ip-based';
    const LOAD_BALANCE_MODE_MEASURED_VOLUME_BASED = 'measured-volume-based';
    const NEIGHBOR_HOLD_DOWN_ENABLE = 'enable';
    const NEIGHBOR_HOLD_DOWN_DISABLE = 'disable';
    const FAIL_DETECT_ENABLE = 'enable';
    const FAIL_DETECT_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DISABLE,
            self::STATUS_ENABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoadBalanceModeAllowableValues()
    {
        return [
            self::LOAD_BALANCE_MODE_SOURCE_IP_BASED,
            self::LOAD_BALANCE_MODE_WEIGHT_BASED,
            self::LOAD_BALANCE_MODE_USAGE_BASED,
            self::LOAD_BALANCE_MODE_SOURCE_DEST_IP_BASED,
            self::LOAD_BALANCE_MODE_MEASURED_VOLUME_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNeighborHoldDownAllowableValues()
    {
        return [
            self::NEIGHBOR_HOLD_DOWN_ENABLE,
            self::NEIGHBOR_HOLD_DOWN_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailDetectAllowableValues()
    {
        return [
            self::FAIL_DETECT_ENABLE,
            self::FAIL_DETECT_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['load_balance_mode'] = $data['load_balance_mode'] ?? null;
        $this->container['duplication_max_num'] = $data['duplication_max_num'] ?? null;
        $this->container['neighbor_hold_down'] = $data['neighbor_hold_down'] ?? null;
        $this->container['neighbor_hold_down_time'] = $data['neighbor_hold_down_time'] ?? null;
        $this->container['neighbor_hold_boot_time'] = $data['neighbor_hold_boot_time'] ?? null;
        $this->container['fail_detect'] = $data['fail_detect'] ?? null;
        $this->container['fail_alert_interfaces'] = $data['fail_alert_interfaces'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['health_check'] = $data['health_check'] ?? null;
        $this->container['neighbor'] = $data['neighbor'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['duplication'] = $data['duplication'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoadBalanceModeAllowableValues();
        if (!is_null($this->container['load_balance_mode']) && !in_array($this->container['load_balance_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'load_balance_mode', must be one of '%s'",
                $this->container['load_balance_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['duplication_max_num']) && ($this->container['duplication_max_num'] > 4)) {
            $invalidProperties[] = "invalid value for 'duplication_max_num', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['duplication_max_num']) && ($this->container['duplication_max_num'] < 2)) {
            $invalidProperties[] = "invalid value for 'duplication_max_num', must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getNeighborHoldDownAllowableValues();
        if (!is_null($this->container['neighbor_hold_down']) && !in_array($this->container['neighbor_hold_down'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'neighbor_hold_down', must be one of '%s'",
                $this->container['neighbor_hold_down'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['neighbor_hold_down_time']) && ($this->container['neighbor_hold_down_time'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'neighbor_hold_down_time', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['neighbor_hold_down_time']) && ($this->container['neighbor_hold_down_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'neighbor_hold_down_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['neighbor_hold_boot_time']) && ($this->container['neighbor_hold_boot_time'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'neighbor_hold_boot_time', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['neighbor_hold_boot_time']) && ($this->container['neighbor_hold_boot_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'neighbor_hold_boot_time', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getFailDetectAllowableValues();
        if (!is_null($this->container['fail_detect']) && !in_array($this->container['fail_detect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fail_detect', must be one of '%s'",
                $this->container['fail_detect'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fail_alert_interfaces']) && (count($this->container['fail_alert_interfaces']) > 0)) {
            $invalidProperties[] = "invalid value for 'fail_alert_interfaces', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['zone']) && (count($this->container['zone']) > 0)) {
            $invalidProperties[] = "invalid value for 'zone', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['members']) && (count($this->container['members']) > 0)) {
            $invalidProperties[] = "invalid value for 'members', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['health_check']) && (count($this->container['health_check']) > 0)) {
            $invalidProperties[] = "invalid value for 'health_check', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['neighbor']) && (count($this->container['neighbor']) > 0)) {
            $invalidProperties[] = "invalid value for 'neighbor', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['service']) && (count($this->container['service']) > 0)) {
            $invalidProperties[] = "invalid value for 'service', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['duplication']) && (count($this->container['duplication']) > 0)) {
            $invalidProperties[] = "invalid value for 'duplication', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable SD-WAN.    disable:Disable SD-WAN.    enable:Enable SD-WAN.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets load_balance_mode
     *
     * @return string|null
     */
    public function getLoadBalanceMode()
    {
        return $this->container['load_balance_mode'];
    }

    /**
     * Sets load_balance_mode
     *
     * @param string|null $load_balance_mode Algorithm or mode to use for load balancing Internet traffic to SD-WAN members.    source-ip-based:Source IP load balancing. All traffic from a source IP is sent to the same interface.    weight-based:Weight-based load balancing. Interfaces with higher weights have higher priority and get more traffic.    usage-based:Usage-based load balancing. All traffic is sent to the first interface on the list. When the bandwidth on that interface exceeds the spill-over limit new traffic is sent to the next interface.    source-dest-ip-based:Source and destination IP load balancing. All traffic from a source IP to a destination IP is sent to the same interface.    measured-volume-based:Volume-based load balancing. Traffic is load balanced based on traffic volume (in bytes). More traffic is sent to interfaces with higher volume ratios.
     *
     * @return self
     */
    public function setLoadBalanceMode($load_balance_mode)
    {
        $allowedValues = $this->getLoadBalanceModeAllowableValues();
        if (!is_null($load_balance_mode) && !in_array($load_balance_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'load_balance_mode', must be one of '%s'",
                    $load_balance_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['load_balance_mode'] = $load_balance_mode;

        return $this;
    }

    /**
     * Gets duplication_max_num
     *
     * @return int|null
     */
    public function getDuplicationMaxNum()
    {
        return $this->container['duplication_max_num'];
    }

    /**
     * Sets duplication_max_num
     *
     * @param int|null $duplication_max_num Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
     *
     * @return self
     */
    public function setDuplicationMaxNum($duplication_max_num)
    {

        if (!is_null($duplication_max_num) && ($duplication_max_num > 4)) {
            throw new \InvalidArgumentException('invalid value for $duplication_max_num when calling InlineObject370., must be smaller than or equal to 4.');
        }
        if (!is_null($duplication_max_num) && ($duplication_max_num < 2)) {
            throw new \InvalidArgumentException('invalid value for $duplication_max_num when calling InlineObject370., must be bigger than or equal to 2.');
        }

        $this->container['duplication_max_num'] = $duplication_max_num;

        return $this;
    }

    /**
     * Gets neighbor_hold_down
     *
     * @return string|null
     */
    public function getNeighborHoldDown()
    {
        return $this->container['neighbor_hold_down'];
    }

    /**
     * Sets neighbor_hold_down
     *
     * @param string|null $neighbor_hold_down Enable/disable hold switching from the secondary neighbor to the primary neighbor.    enable:Enable hold switching from the secondary neighbor to the primary neighbor.    disable:Disable hold switching from the secondary neighbor to the primary neighbor.
     *
     * @return self
     */
    public function setNeighborHoldDown($neighbor_hold_down)
    {
        $allowedValues = $this->getNeighborHoldDownAllowableValues();
        if (!is_null($neighbor_hold_down) && !in_array($neighbor_hold_down, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'neighbor_hold_down', must be one of '%s'",
                    $neighbor_hold_down,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['neighbor_hold_down'] = $neighbor_hold_down;

        return $this;
    }

    /**
     * Gets neighbor_hold_down_time
     *
     * @return int|null
     */
    public function getNeighborHoldDownTime()
    {
        return $this->container['neighbor_hold_down_time'];
    }

    /**
     * Sets neighbor_hold_down_time
     *
     * @param int|null $neighbor_hold_down_time Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
     *
     * @return self
     */
    public function setNeighborHoldDownTime($neighbor_hold_down_time)
    {

        if (!is_null($neighbor_hold_down_time) && ($neighbor_hold_down_time > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_hold_down_time when calling InlineObject370., must be smaller than or equal to 10000000.');
        }
        if (!is_null($neighbor_hold_down_time) && ($neighbor_hold_down_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_hold_down_time when calling InlineObject370., must be bigger than or equal to 0.');
        }

        $this->container['neighbor_hold_down_time'] = $neighbor_hold_down_time;

        return $this;
    }

    /**
     * Gets neighbor_hold_boot_time
     *
     * @return int|null
     */
    public function getNeighborHoldBootTime()
    {
        return $this->container['neighbor_hold_boot_time'];
    }

    /**
     * Sets neighbor_hold_boot_time
     *
     * @param int|null $neighbor_hold_boot_time Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
     *
     * @return self
     */
    public function setNeighborHoldBootTime($neighbor_hold_boot_time)
    {

        if (!is_null($neighbor_hold_boot_time) && ($neighbor_hold_boot_time > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_hold_boot_time when calling InlineObject370., must be smaller than or equal to 10000000.');
        }
        if (!is_null($neighbor_hold_boot_time) && ($neighbor_hold_boot_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor_hold_boot_time when calling InlineObject370., must be bigger than or equal to 0.');
        }

        $this->container['neighbor_hold_boot_time'] = $neighbor_hold_boot_time;

        return $this;
    }

    /**
     * Gets fail_detect
     *
     * @return string|null
     */
    public function getFailDetect()
    {
        return $this->container['fail_detect'];
    }

    /**
     * Sets fail_detect
     *
     * @param string|null $fail_detect Enable/disable SD-WAN Internet connection status checking (failure detection).    enable:Enable status checking.    disable:Disable status checking.
     *
     * @return self
     */
    public function setFailDetect($fail_detect)
    {
        $allowedValues = $this->getFailDetectAllowableValues();
        if (!is_null($fail_detect) && !in_array($fail_detect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fail_detect', must be one of '%s'",
                    $fail_detect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fail_detect'] = $fail_detect;

        return $this;
    }

    /**
     * Gets fail_alert_interfaces
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanFailAlertInterfaces[]|null
     */
    public function getFailAlertInterfaces()
    {
        return $this->container['fail_alert_interfaces'];
    }

    /**
     * Sets fail_alert_interfaces
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanFailAlertInterfaces[]|null $fail_alert_interfaces Physical interfaces that will be alerted.
     *
     * @return self
     */
    public function setFailAlertInterfaces($fail_alert_interfaces)
    {

        if (!is_null($fail_alert_interfaces) && (count($fail_alert_interfaces) > 0)) {
            throw new \InvalidArgumentException('invalid value for $fail_alert_interfaces when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['fail_alert_interfaces'] = $fail_alert_interfaces;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanZone[]|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanZone[]|null $zone Configure SD-WAN zones.
     *
     * @return self
     */
    public function setZone($zone)
    {

        if (!is_null($zone) && (count($zone) > 0)) {
            throw new \InvalidArgumentException('invalid value for $zone when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanMembers[]|null $members FortiGate interfaces added to the SD-WAN.
     *
     * @return self
     */
    public function setMembers($members)
    {

        if (!is_null($members) && (count($members) > 0)) {
            throw new \InvalidArgumentException('invalid value for $members when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck[]|null
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanHealthCheck[]|null $health_check SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it.
     *
     * @return self
     */
    public function setHealthCheck($health_check)
    {

        if (!is_null($health_check) && (count($health_check) > 0)) {
            throw new \InvalidArgumentException('invalid value for $health_check when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets neighbor
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanNeighbor[]|null
     */
    public function getNeighbor()
    {
        return $this->container['neighbor'];
    }

    /**
     * Sets neighbor
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanNeighbor[]|null $neighbor Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status.
     *
     * @return self
     */
    public function setNeighbor($neighbor)
    {

        if (!is_null($neighbor) && (count($neighbor) > 0)) {
            throw new \InvalidArgumentException('invalid value for $neighbor when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['neighbor'] = $neighbor;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanService[]|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanService[]|null $service Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN.
     *
     * @return self
     */
    public function setService($service)
    {

        if (!is_null($service) && (count($service) > 0)) {
            throw new \InvalidArgumentException('invalid value for $service when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets duplication
     *
     * @return \Fortigate\FortiOS\Model\CMDB\SystemSdwanDuplication[]|null
     */
    public function getDuplication()
    {
        return $this->container['duplication'];
    }

    /**
     * Sets duplication
     *
     * @param \Fortigate\FortiOS\Model\CMDB\SystemSdwanDuplication[]|null $duplication Create SD-WAN duplication rule.
     *
     * @return self
     */
    public function setDuplication($duplication)
    {

        if (!is_null($duplication) && (count($duplication) > 0)) {
            throw new \InvalidArgumentException('invalid value for $duplication when calling InlineObject370., number of items must be less than or equal to 0.');
        }
        $this->container['duplication'] = $duplication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


