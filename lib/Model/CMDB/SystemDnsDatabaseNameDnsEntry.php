<?php
/**
 * SystemDnsDatabaseNameDnsEntry
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemDnsDatabaseNameDnsEntry Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemDnsDatabaseNameDnsEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_dns_database__name__dns_entry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'status' => 'string',
        'type' => 'string',
        'ttl' => 'int',
        'preference' => 'int',
        'ip' => 'string',
        'ipv6' => 'string',
        'hostname' => 'string',
        'canonical_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'type' => null,
        'ttl' => null,
        'preference' => null,
        'ip' => 'ipv4',
        'ipv6' => 'ipv6',
        'hostname' => null,
        'canonical_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'type' => 'type',
        'ttl' => 'ttl',
        'preference' => 'preference',
        'ip' => 'ip',
        'ipv6' => 'ipv6',
        'hostname' => 'hostname',
        'canonical_name' => 'canonical-name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'type' => 'setType',
        'ttl' => 'setTtl',
        'preference' => 'setPreference',
        'ip' => 'setIp',
        'ipv6' => 'setIpv6',
        'hostname' => 'setHostname',
        'canonical_name' => 'setCanonicalName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'type' => 'getType',
        'ttl' => 'getTtl',
        'preference' => 'getPreference',
        'ip' => 'getIp',
        'ipv6' => 'getIpv6',
        'hostname' => 'getHostname',
        'canonical_name' => 'getCanonicalName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const TYPE_A = 'A';
    const TYPE_NS = 'NS';
    const TYPE_CNAME = 'CNAME';
    const TYPE_MX = 'MX';
    const TYPE_AAAA = 'AAAA';
    const TYPE_PTR = 'PTR';
    const TYPE_PTR_V6 = 'PTR_V6';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_A,
            self::TYPE_NS,
            self::TYPE_CNAME,
            self::TYPE_MX,
            self::TYPE_AAAA,
            self::TYPE_PTR,
            self::TYPE_PTR_V6,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['ttl'] = $data['ttl'] ?? null;
        $this->container['preference'] = $data['preference'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['ipv6'] = $data['ipv6'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['canonical_name'] = $data['canonical_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ttl']) && ($this->container['ttl'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ttl', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ttl']) && ($this->container['ttl'] < 0)) {
            $invalidProperties[] = "invalid value for 'ttl', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['preference']) && ($this->container['preference'] > 65535)) {
            $invalidProperties[] = "invalid value for 'preference', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['preference']) && ($this->container['preference'] < 0)) {
            $invalidProperties[] = "invalid value for 'preference', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['hostname']) && (mb_strlen($this->container['hostname']) > 255)) {
            $invalidProperties[] = "invalid value for 'hostname', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['canonical_name']) && (mb_strlen($this->container['canonical_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'canonical_name', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id DNS entry ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemDnsDatabaseNameDnsEntry., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemDnsDatabaseNameDnsEntry., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable resource record status.    enable:Enable resource record status.    disable:Disable resource record status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Resource record type.    A:Host type.    NS:Name server type.    CNAME:Canonical name type.    MX:Mail exchange type.    AAAA:IPv6 host type.    PTR:Pointer type.    PTR_V6:IPv6 pointer type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int|null
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int|null $ttl Time-to-live for this entry (0 to 2147483647 sec, default = 0).
     *
     * @return self
     */
    public function setTtl($ttl)
    {

        if (!is_null($ttl) && ($ttl > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $ttl when calling SystemDnsDatabaseNameDnsEntry., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ttl) && ($ttl < 0)) {
            throw new \InvalidArgumentException('invalid value for $ttl when calling SystemDnsDatabaseNameDnsEntry., must be bigger than or equal to 0.');
        }

        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return int|null
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param int|null $preference DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
     *
     * @return self
     */
    public function setPreference($preference)
    {

        if (!is_null($preference) && ($preference > 65535)) {
            throw new \InvalidArgumentException('invalid value for $preference when calling SystemDnsDatabaseNameDnsEntry., must be smaller than or equal to 65535.');
        }
        if (!is_null($preference) && ($preference < 0)) {
            throw new \InvalidArgumentException('invalid value for $preference when calling SystemDnsDatabaseNameDnsEntry., must be bigger than or equal to 0.');
        }

        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IPv4 address of the host.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return string|null
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param string|null $ipv6 IPv6 address of the host.
     *
     * @return self
     */
    public function setIpv6($ipv6)
    {
        $this->container['ipv6'] = $ipv6;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname Name of the host.
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (!is_null($hostname) && (mb_strlen($hostname) > 255)) {
            throw new \InvalidArgumentException('invalid length for $hostname when calling SystemDnsDatabaseNameDnsEntry., must be smaller than or equal to 255.');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets canonical_name
     *
     * @return string|null
     */
    public function getCanonicalName()
    {
        return $this->container['canonical_name'];
    }

    /**
     * Sets canonical_name
     *
     * @param string|null $canonical_name Canonical name of the host.
     *
     * @return self
     */
    public function setCanonicalName($canonical_name)
    {
        if (!is_null($canonical_name) && (mb_strlen($canonical_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $canonical_name when calling SystemDnsDatabaseNameDnsEntry., must be smaller than or equal to 255.');
        }

        $this->container['canonical_name'] = $canonical_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


