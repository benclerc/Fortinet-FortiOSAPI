<?php
/**
 * IcapProfileNameRespmodForwardRules
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * IcapProfileNameRespmodForwardRules Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class IcapProfileNameRespmodForwardRules implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_icap_profile__name__respmod_forward_rules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'host' => 'string',
        'header_group' => '\Fortigate\FortiOS\Model\CMDB\IcapProfileNameHeaderGroup[]',
        'action' => 'string',
        'http_resp_status_code' => '\Fortigate\FortiOS\Model\CMDB\IcapProfileNameHttpRespStatusCode[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'host' => null,
        'header_group' => null,
        'action' => null,
        'http_resp_status_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'host' => 'host',
        'header_group' => 'header-group',
        'action' => 'action',
        'http_resp_status_code' => 'http-resp-status-code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'host' => 'setHost',
        'header_group' => 'setHeaderGroup',
        'action' => 'setAction',
        'http_resp_status_code' => 'setHttpRespStatusCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'host' => 'getHost',
        'header_group' => 'getHeaderGroup',
        'action' => 'getAction',
        'http_resp_status_code' => 'getHttpRespStatusCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTION_FORWARD = 'forward';
    const ACTION_BYPASS = 'bypass';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_FORWARD,
            self::ACTION_BYPASS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['header_group'] = $data['header_group'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['http_resp_status_code'] = $data['http_resp_status_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['host']) && (mb_strlen($this->container['host']) > 79)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['header_group']) && (count($this->container['header_group']) > 0)) {
            $invalidProperties[] = "invalid value for 'header_group', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['http_resp_status_code']) && (count($this->container['http_resp_status_code']) > 0)) {
            $invalidProperties[] = "invalid value for 'http_resp_status_code', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Address name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling IcapProfileNameRespmodForwardRules., must be smaller than or equal to 63.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Address object for the host.
     *
     * @return self
     */
    public function setHost($host)
    {
        if (!is_null($host) && (mb_strlen($host) > 79)) {
            throw new \InvalidArgumentException('invalid length for $host when calling IcapProfileNameRespmodForwardRules., must be smaller than or equal to 79.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets header_group
     *
     * @return \Fortigate\FortiOS\Model\CMDB\IcapProfileNameHeaderGroup[]|null
     */
    public function getHeaderGroup()
    {
        return $this->container['header_group'];
    }

    /**
     * Sets header_group
     *
     * @param \Fortigate\FortiOS\Model\CMDB\IcapProfileNameHeaderGroup[]|null $header_group HTTP header group.
     *
     * @return self
     */
    public function setHeaderGroup($header_group)
    {

        if (!is_null($header_group) && (count($header_group) > 0)) {
            throw new \InvalidArgumentException('invalid value for $header_group when calling IcapProfileNameRespmodForwardRules., number of items must be less than or equal to 0.');
        }
        $this->container['header_group'] = $header_group;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action to be taken for ICAP server.    forward:Forward request to ICAP server when this rule is matched.    bypass:Don't forward request to ICAP server when this rule is matched.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets http_resp_status_code
     *
     * @return \Fortigate\FortiOS\Model\CMDB\IcapProfileNameHttpRespStatusCode[]|null
     */
    public function getHttpRespStatusCode()
    {
        return $this->container['http_resp_status_code'];
    }

    /**
     * Sets http_resp_status_code
     *
     * @param \Fortigate\FortiOS\Model\CMDB\IcapProfileNameHttpRespStatusCode[]|null $http_resp_status_code HTTP response status code.
     *
     * @return self
     */
    public function setHttpRespStatusCode($http_resp_status_code)
    {

        if (!is_null($http_resp_status_code) && (count($http_resp_status_code) > 0)) {
            throw new \InvalidArgumentException('invalid value for $http_resp_status_code when calling IcapProfileNameRespmodForwardRules., number of items must be less than or equal to 0.');
        }
        $this->container['http_resp_status_code'] = $http_resp_status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


