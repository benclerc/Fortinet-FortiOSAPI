<?php
/**
 * InlineObject134
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject134 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject134 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_134';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resolve_ip' => 'string',
        'resolve_port' => 'string',
        'log_user_in_upper' => 'string',
        'fwpolicy_implicit_log' => 'string',
        'fwpolicy6_implicit_log' => 'string',
        'log_invalid_packet' => 'string',
        'local_in_allow' => 'string',
        'local_in_deny_unicast' => 'string',
        'local_in_deny_broadcast' => 'string',
        'local_out' => 'string',
        'daemon_log' => 'string',
        'neighbor_event' => 'string',
        'brief_traffic_format' => 'string',
        'user_anonymize' => 'string',
        'expolicy_implicit_log' => 'string',
        'log_policy_comment' => 'string',
        'faz_override' => 'string',
        'syslog_override' => 'string',
        'custom_log_fields' => '\Fortigate\FortiOS\Model\CMDB\LogSettingCustomLogFields[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'resolve_ip' => null,
        'resolve_port' => null,
        'log_user_in_upper' => null,
        'fwpolicy_implicit_log' => null,
        'fwpolicy6_implicit_log' => null,
        'log_invalid_packet' => null,
        'local_in_allow' => null,
        'local_in_deny_unicast' => null,
        'local_in_deny_broadcast' => null,
        'local_out' => null,
        'daemon_log' => null,
        'neighbor_event' => null,
        'brief_traffic_format' => null,
        'user_anonymize' => null,
        'expolicy_implicit_log' => null,
        'log_policy_comment' => null,
        'faz_override' => null,
        'syslog_override' => null,
        'custom_log_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resolve_ip' => 'resolve-ip',
        'resolve_port' => 'resolve-port',
        'log_user_in_upper' => 'log-user-in-upper',
        'fwpolicy_implicit_log' => 'fwpolicy-implicit-log',
        'fwpolicy6_implicit_log' => 'fwpolicy6-implicit-log',
        'log_invalid_packet' => 'log-invalid-packet',
        'local_in_allow' => 'local-in-allow',
        'local_in_deny_unicast' => 'local-in-deny-unicast',
        'local_in_deny_broadcast' => 'local-in-deny-broadcast',
        'local_out' => 'local-out',
        'daemon_log' => 'daemon-log',
        'neighbor_event' => 'neighbor-event',
        'brief_traffic_format' => 'brief-traffic-format',
        'user_anonymize' => 'user-anonymize',
        'expolicy_implicit_log' => 'expolicy-implicit-log',
        'log_policy_comment' => 'log-policy-comment',
        'faz_override' => 'faz-override',
        'syslog_override' => 'syslog-override',
        'custom_log_fields' => 'custom-log-fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resolve_ip' => 'setResolveIp',
        'resolve_port' => 'setResolvePort',
        'log_user_in_upper' => 'setLogUserInUpper',
        'fwpolicy_implicit_log' => 'setFwpolicyImplicitLog',
        'fwpolicy6_implicit_log' => 'setFwpolicy6ImplicitLog',
        'log_invalid_packet' => 'setLogInvalidPacket',
        'local_in_allow' => 'setLocalInAllow',
        'local_in_deny_unicast' => 'setLocalInDenyUnicast',
        'local_in_deny_broadcast' => 'setLocalInDenyBroadcast',
        'local_out' => 'setLocalOut',
        'daemon_log' => 'setDaemonLog',
        'neighbor_event' => 'setNeighborEvent',
        'brief_traffic_format' => 'setBriefTrafficFormat',
        'user_anonymize' => 'setUserAnonymize',
        'expolicy_implicit_log' => 'setExpolicyImplicitLog',
        'log_policy_comment' => 'setLogPolicyComment',
        'faz_override' => 'setFazOverride',
        'syslog_override' => 'setSyslogOverride',
        'custom_log_fields' => 'setCustomLogFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resolve_ip' => 'getResolveIp',
        'resolve_port' => 'getResolvePort',
        'log_user_in_upper' => 'getLogUserInUpper',
        'fwpolicy_implicit_log' => 'getFwpolicyImplicitLog',
        'fwpolicy6_implicit_log' => 'getFwpolicy6ImplicitLog',
        'log_invalid_packet' => 'getLogInvalidPacket',
        'local_in_allow' => 'getLocalInAllow',
        'local_in_deny_unicast' => 'getLocalInDenyUnicast',
        'local_in_deny_broadcast' => 'getLocalInDenyBroadcast',
        'local_out' => 'getLocalOut',
        'daemon_log' => 'getDaemonLog',
        'neighbor_event' => 'getNeighborEvent',
        'brief_traffic_format' => 'getBriefTrafficFormat',
        'user_anonymize' => 'getUserAnonymize',
        'expolicy_implicit_log' => 'getExpolicyImplicitLog',
        'log_policy_comment' => 'getLogPolicyComment',
        'faz_override' => 'getFazOverride',
        'syslog_override' => 'getSyslogOverride',
        'custom_log_fields' => 'getCustomLogFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RESOLVE_IP_ENABLE = 'enable';
    const RESOLVE_IP_DISABLE = 'disable';
    const RESOLVE_PORT_ENABLE = 'enable';
    const RESOLVE_PORT_DISABLE = 'disable';
    const LOG_USER_IN_UPPER_ENABLE = 'enable';
    const LOG_USER_IN_UPPER_DISABLE = 'disable';
    const FWPOLICY_IMPLICIT_LOG_ENABLE = 'enable';
    const FWPOLICY_IMPLICIT_LOG_DISABLE = 'disable';
    const FWPOLICY6_IMPLICIT_LOG_ENABLE = 'enable';
    const FWPOLICY6_IMPLICIT_LOG_DISABLE = 'disable';
    const LOG_INVALID_PACKET_ENABLE = 'enable';
    const LOG_INVALID_PACKET_DISABLE = 'disable';
    const LOCAL_IN_ALLOW_ENABLE = 'enable';
    const LOCAL_IN_ALLOW_DISABLE = 'disable';
    const LOCAL_IN_DENY_UNICAST_ENABLE = 'enable';
    const LOCAL_IN_DENY_UNICAST_DISABLE = 'disable';
    const LOCAL_IN_DENY_BROADCAST_ENABLE = 'enable';
    const LOCAL_IN_DENY_BROADCAST_DISABLE = 'disable';
    const LOCAL_OUT_ENABLE = 'enable';
    const LOCAL_OUT_DISABLE = 'disable';
    const DAEMON_LOG_ENABLE = 'enable';
    const DAEMON_LOG_DISABLE = 'disable';
    const NEIGHBOR_EVENT_ENABLE = 'enable';
    const NEIGHBOR_EVENT_DISABLE = 'disable';
    const BRIEF_TRAFFIC_FORMAT_ENABLE = 'enable';
    const BRIEF_TRAFFIC_FORMAT_DISABLE = 'disable';
    const USER_ANONYMIZE_ENABLE = 'enable';
    const USER_ANONYMIZE_DISABLE = 'disable';
    const EXPOLICY_IMPLICIT_LOG_ENABLE = 'enable';
    const EXPOLICY_IMPLICIT_LOG_DISABLE = 'disable';
    const LOG_POLICY_COMMENT_ENABLE = 'enable';
    const LOG_POLICY_COMMENT_DISABLE = 'disable';
    const FAZ_OVERRIDE_ENABLE = 'enable';
    const FAZ_OVERRIDE_DISABLE = 'disable';
    const SYSLOG_OVERRIDE_ENABLE = 'enable';
    const SYSLOG_OVERRIDE_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolveIpAllowableValues()
    {
        return [
            self::RESOLVE_IP_ENABLE,
            self::RESOLVE_IP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolvePortAllowableValues()
    {
        return [
            self::RESOLVE_PORT_ENABLE,
            self::RESOLVE_PORT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogUserInUpperAllowableValues()
    {
        return [
            self::LOG_USER_IN_UPPER_ENABLE,
            self::LOG_USER_IN_UPPER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFwpolicyImplicitLogAllowableValues()
    {
        return [
            self::FWPOLICY_IMPLICIT_LOG_ENABLE,
            self::FWPOLICY_IMPLICIT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFwpolicy6ImplicitLogAllowableValues()
    {
        return [
            self::FWPOLICY6_IMPLICIT_LOG_ENABLE,
            self::FWPOLICY6_IMPLICIT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogInvalidPacketAllowableValues()
    {
        return [
            self::LOG_INVALID_PACKET_ENABLE,
            self::LOG_INVALID_PACKET_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalInAllowAllowableValues()
    {
        return [
            self::LOCAL_IN_ALLOW_ENABLE,
            self::LOCAL_IN_ALLOW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalInDenyUnicastAllowableValues()
    {
        return [
            self::LOCAL_IN_DENY_UNICAST_ENABLE,
            self::LOCAL_IN_DENY_UNICAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalInDenyBroadcastAllowableValues()
    {
        return [
            self::LOCAL_IN_DENY_BROADCAST_ENABLE,
            self::LOCAL_IN_DENY_BROADCAST_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalOutAllowableValues()
    {
        return [
            self::LOCAL_OUT_ENABLE,
            self::LOCAL_OUT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDaemonLogAllowableValues()
    {
        return [
            self::DAEMON_LOG_ENABLE,
            self::DAEMON_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNeighborEventAllowableValues()
    {
        return [
            self::NEIGHBOR_EVENT_ENABLE,
            self::NEIGHBOR_EVENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBriefTrafficFormatAllowableValues()
    {
        return [
            self::BRIEF_TRAFFIC_FORMAT_ENABLE,
            self::BRIEF_TRAFFIC_FORMAT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserAnonymizeAllowableValues()
    {
        return [
            self::USER_ANONYMIZE_ENABLE,
            self::USER_ANONYMIZE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpolicyImplicitLogAllowableValues()
    {
        return [
            self::EXPOLICY_IMPLICIT_LOG_ENABLE,
            self::EXPOLICY_IMPLICIT_LOG_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLogPolicyCommentAllowableValues()
    {
        return [
            self::LOG_POLICY_COMMENT_ENABLE,
            self::LOG_POLICY_COMMENT_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFazOverrideAllowableValues()
    {
        return [
            self::FAZ_OVERRIDE_ENABLE,
            self::FAZ_OVERRIDE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSyslogOverrideAllowableValues()
    {
        return [
            self::SYSLOG_OVERRIDE_ENABLE,
            self::SYSLOG_OVERRIDE_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resolve_ip'] = $data['resolve_ip'] ?? null;
        $this->container['resolve_port'] = $data['resolve_port'] ?? null;
        $this->container['log_user_in_upper'] = $data['log_user_in_upper'] ?? null;
        $this->container['fwpolicy_implicit_log'] = $data['fwpolicy_implicit_log'] ?? null;
        $this->container['fwpolicy6_implicit_log'] = $data['fwpolicy6_implicit_log'] ?? null;
        $this->container['log_invalid_packet'] = $data['log_invalid_packet'] ?? null;
        $this->container['local_in_allow'] = $data['local_in_allow'] ?? null;
        $this->container['local_in_deny_unicast'] = $data['local_in_deny_unicast'] ?? null;
        $this->container['local_in_deny_broadcast'] = $data['local_in_deny_broadcast'] ?? null;
        $this->container['local_out'] = $data['local_out'] ?? null;
        $this->container['daemon_log'] = $data['daemon_log'] ?? null;
        $this->container['neighbor_event'] = $data['neighbor_event'] ?? null;
        $this->container['brief_traffic_format'] = $data['brief_traffic_format'] ?? null;
        $this->container['user_anonymize'] = $data['user_anonymize'] ?? null;
        $this->container['expolicy_implicit_log'] = $data['expolicy_implicit_log'] ?? null;
        $this->container['log_policy_comment'] = $data['log_policy_comment'] ?? null;
        $this->container['faz_override'] = $data['faz_override'] ?? null;
        $this->container['syslog_override'] = $data['syslog_override'] ?? null;
        $this->container['custom_log_fields'] = $data['custom_log_fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResolveIpAllowableValues();
        if (!is_null($this->container['resolve_ip']) && !in_array($this->container['resolve_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolve_ip', must be one of '%s'",
                $this->container['resolve_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResolvePortAllowableValues();
        if (!is_null($this->container['resolve_port']) && !in_array($this->container['resolve_port'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolve_port', must be one of '%s'",
                $this->container['resolve_port'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogUserInUpperAllowableValues();
        if (!is_null($this->container['log_user_in_upper']) && !in_array($this->container['log_user_in_upper'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_user_in_upper', must be one of '%s'",
                $this->container['log_user_in_upper'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFwpolicyImplicitLogAllowableValues();
        if (!is_null($this->container['fwpolicy_implicit_log']) && !in_array($this->container['fwpolicy_implicit_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fwpolicy_implicit_log', must be one of '%s'",
                $this->container['fwpolicy_implicit_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFwpolicy6ImplicitLogAllowableValues();
        if (!is_null($this->container['fwpolicy6_implicit_log']) && !in_array($this->container['fwpolicy6_implicit_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fwpolicy6_implicit_log', must be one of '%s'",
                $this->container['fwpolicy6_implicit_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogInvalidPacketAllowableValues();
        if (!is_null($this->container['log_invalid_packet']) && !in_array($this->container['log_invalid_packet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_invalid_packet', must be one of '%s'",
                $this->container['log_invalid_packet'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalInAllowAllowableValues();
        if (!is_null($this->container['local_in_allow']) && !in_array($this->container['local_in_allow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_in_allow', must be one of '%s'",
                $this->container['local_in_allow'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalInDenyUnicastAllowableValues();
        if (!is_null($this->container['local_in_deny_unicast']) && !in_array($this->container['local_in_deny_unicast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_in_deny_unicast', must be one of '%s'",
                $this->container['local_in_deny_unicast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalInDenyBroadcastAllowableValues();
        if (!is_null($this->container['local_in_deny_broadcast']) && !in_array($this->container['local_in_deny_broadcast'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_in_deny_broadcast', must be one of '%s'",
                $this->container['local_in_deny_broadcast'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalOutAllowableValues();
        if (!is_null($this->container['local_out']) && !in_array($this->container['local_out'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'local_out', must be one of '%s'",
                $this->container['local_out'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDaemonLogAllowableValues();
        if (!is_null($this->container['daemon_log']) && !in_array($this->container['daemon_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'daemon_log', must be one of '%s'",
                $this->container['daemon_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNeighborEventAllowableValues();
        if (!is_null($this->container['neighbor_event']) && !in_array($this->container['neighbor_event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'neighbor_event', must be one of '%s'",
                $this->container['neighbor_event'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBriefTrafficFormatAllowableValues();
        if (!is_null($this->container['brief_traffic_format']) && !in_array($this->container['brief_traffic_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'brief_traffic_format', must be one of '%s'",
                $this->container['brief_traffic_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserAnonymizeAllowableValues();
        if (!is_null($this->container['user_anonymize']) && !in_array($this->container['user_anonymize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_anonymize', must be one of '%s'",
                $this->container['user_anonymize'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpolicyImplicitLogAllowableValues();
        if (!is_null($this->container['expolicy_implicit_log']) && !in_array($this->container['expolicy_implicit_log'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expolicy_implicit_log', must be one of '%s'",
                $this->container['expolicy_implicit_log'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLogPolicyCommentAllowableValues();
        if (!is_null($this->container['log_policy_comment']) && !in_array($this->container['log_policy_comment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'log_policy_comment', must be one of '%s'",
                $this->container['log_policy_comment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFazOverrideAllowableValues();
        if (!is_null($this->container['faz_override']) && !in_array($this->container['faz_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'faz_override', must be one of '%s'",
                $this->container['faz_override'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSyslogOverrideAllowableValues();
        if (!is_null($this->container['syslog_override']) && !in_array($this->container['syslog_override'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'syslog_override', must be one of '%s'",
                $this->container['syslog_override'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['custom_log_fields']) && (count($this->container['custom_log_fields']) > 5)) {
            $invalidProperties[] = "invalid value for 'custom_log_fields', number of items must be less than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resolve_ip
     *
     * @return string|null
     */
    public function getResolveIp()
    {
        return $this->container['resolve_ip'];
    }

    /**
     * Sets resolve_ip
     *
     * @param string|null $resolve_ip Enable/disable adding resolved domain names to traffic logs if possible.    enable:Enable adding resolved domain names to traffic logs.    disable:Disable adding resolved domain names to traffic logs.
     *
     * @return self
     */
    public function setResolveIp($resolve_ip)
    {
        $allowedValues = $this->getResolveIpAllowableValues();
        if (!is_null($resolve_ip) && !in_array($resolve_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolve_ip', must be one of '%s'",
                    $resolve_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolve_ip'] = $resolve_ip;

        return $this;
    }

    /**
     * Gets resolve_port
     *
     * @return string|null
     */
    public function getResolvePort()
    {
        return $this->container['resolve_port'];
    }

    /**
     * Sets resolve_port
     *
     * @param string|null $resolve_port Enable/disable adding resolved service names to traffic logs.    enable:Enable adding resolved service names to traffic logs.    disable:Disable adding resolved service names to traffic logs.
     *
     * @return self
     */
    public function setResolvePort($resolve_port)
    {
        $allowedValues = $this->getResolvePortAllowableValues();
        if (!is_null($resolve_port) && !in_array($resolve_port, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolve_port', must be one of '%s'",
                    $resolve_port,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolve_port'] = $resolve_port;

        return $this;
    }

    /**
     * Gets log_user_in_upper
     *
     * @return string|null
     */
    public function getLogUserInUpper()
    {
        return $this->container['log_user_in_upper'];
    }

    /**
     * Sets log_user_in_upper
     *
     * @param string|null $log_user_in_upper Enable/disable logs with user-in-upper.    enable:Enable logs with user-in-upper.    disable:Disable logs with user-in-upper.
     *
     * @return self
     */
    public function setLogUserInUpper($log_user_in_upper)
    {
        $allowedValues = $this->getLogUserInUpperAllowableValues();
        if (!is_null($log_user_in_upper) && !in_array($log_user_in_upper, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_user_in_upper', must be one of '%s'",
                    $log_user_in_upper,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_user_in_upper'] = $log_user_in_upper;

        return $this;
    }

    /**
     * Gets fwpolicy_implicit_log
     *
     * @return string|null
     */
    public function getFwpolicyImplicitLog()
    {
        return $this->container['fwpolicy_implicit_log'];
    }

    /**
     * Sets fwpolicy_implicit_log
     *
     * @param string|null $fwpolicy_implicit_log Enable/disable implicit firewall policy logging.    enable:Enable implicit firewall policy logging.    disable:Disable implicit firewall policy logging.
     *
     * @return self
     */
    public function setFwpolicyImplicitLog($fwpolicy_implicit_log)
    {
        $allowedValues = $this->getFwpolicyImplicitLogAllowableValues();
        if (!is_null($fwpolicy_implicit_log) && !in_array($fwpolicy_implicit_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fwpolicy_implicit_log', must be one of '%s'",
                    $fwpolicy_implicit_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fwpolicy_implicit_log'] = $fwpolicy_implicit_log;

        return $this;
    }

    /**
     * Gets fwpolicy6_implicit_log
     *
     * @return string|null
     */
    public function getFwpolicy6ImplicitLog()
    {
        return $this->container['fwpolicy6_implicit_log'];
    }

    /**
     * Sets fwpolicy6_implicit_log
     *
     * @param string|null $fwpolicy6_implicit_log Enable/disable implicit firewall policy6 logging.    enable:Enable implicit firewall policy6 logging.    disable:Disable implicit firewall policy6 logging.
     *
     * @return self
     */
    public function setFwpolicy6ImplicitLog($fwpolicy6_implicit_log)
    {
        $allowedValues = $this->getFwpolicy6ImplicitLogAllowableValues();
        if (!is_null($fwpolicy6_implicit_log) && !in_array($fwpolicy6_implicit_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fwpolicy6_implicit_log', must be one of '%s'",
                    $fwpolicy6_implicit_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fwpolicy6_implicit_log'] = $fwpolicy6_implicit_log;

        return $this;
    }

    /**
     * Gets log_invalid_packet
     *
     * @return string|null
     */
    public function getLogInvalidPacket()
    {
        return $this->container['log_invalid_packet'];
    }

    /**
     * Sets log_invalid_packet
     *
     * @param string|null $log_invalid_packet Enable/disable invalid packet traffic logging.    enable:Enable invalid packet traffic logging.    disable:Disable invalid packet traffic logging.
     *
     * @return self
     */
    public function setLogInvalidPacket($log_invalid_packet)
    {
        $allowedValues = $this->getLogInvalidPacketAllowableValues();
        if (!is_null($log_invalid_packet) && !in_array($log_invalid_packet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_invalid_packet', must be one of '%s'",
                    $log_invalid_packet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_invalid_packet'] = $log_invalid_packet;

        return $this;
    }

    /**
     * Gets local_in_allow
     *
     * @return string|null
     */
    public function getLocalInAllow()
    {
        return $this->container['local_in_allow'];
    }

    /**
     * Sets local_in_allow
     *
     * @param string|null $local_in_allow Enable/disable local-in-allow logging.    enable:Enable local-in-allow logging.    disable:Disable local-in-allow logging.
     *
     * @return self
     */
    public function setLocalInAllow($local_in_allow)
    {
        $allowedValues = $this->getLocalInAllowAllowableValues();
        if (!is_null($local_in_allow) && !in_array($local_in_allow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_in_allow', must be one of '%s'",
                    $local_in_allow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_in_allow'] = $local_in_allow;

        return $this;
    }

    /**
     * Gets local_in_deny_unicast
     *
     * @return string|null
     */
    public function getLocalInDenyUnicast()
    {
        return $this->container['local_in_deny_unicast'];
    }

    /**
     * Sets local_in_deny_unicast
     *
     * @param string|null $local_in_deny_unicast Enable/disable local-in-deny-unicast logging.    enable:Enable local-in-deny-unicast logging.    disable:Disable local-in-deny-unicast logging.
     *
     * @return self
     */
    public function setLocalInDenyUnicast($local_in_deny_unicast)
    {
        $allowedValues = $this->getLocalInDenyUnicastAllowableValues();
        if (!is_null($local_in_deny_unicast) && !in_array($local_in_deny_unicast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_in_deny_unicast', must be one of '%s'",
                    $local_in_deny_unicast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_in_deny_unicast'] = $local_in_deny_unicast;

        return $this;
    }

    /**
     * Gets local_in_deny_broadcast
     *
     * @return string|null
     */
    public function getLocalInDenyBroadcast()
    {
        return $this->container['local_in_deny_broadcast'];
    }

    /**
     * Sets local_in_deny_broadcast
     *
     * @param string|null $local_in_deny_broadcast Enable/disable local-in-deny-broadcast logging.    enable:Enable local-in-deny-broadcast logging.    disable:Disable local-in-deny-broadcast logging.
     *
     * @return self
     */
    public function setLocalInDenyBroadcast($local_in_deny_broadcast)
    {
        $allowedValues = $this->getLocalInDenyBroadcastAllowableValues();
        if (!is_null($local_in_deny_broadcast) && !in_array($local_in_deny_broadcast, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_in_deny_broadcast', must be one of '%s'",
                    $local_in_deny_broadcast,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_in_deny_broadcast'] = $local_in_deny_broadcast;

        return $this;
    }

    /**
     * Gets local_out
     *
     * @return string|null
     */
    public function getLocalOut()
    {
        return $this->container['local_out'];
    }

    /**
     * Sets local_out
     *
     * @param string|null $local_out Enable/disable local-out logging.    enable:Enable local-out logging.    disable:Disable local-out logging.
     *
     * @return self
     */
    public function setLocalOut($local_out)
    {
        $allowedValues = $this->getLocalOutAllowableValues();
        if (!is_null($local_out) && !in_array($local_out, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'local_out', must be one of '%s'",
                    $local_out,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_out'] = $local_out;

        return $this;
    }

    /**
     * Gets daemon_log
     *
     * @return string|null
     */
    public function getDaemonLog()
    {
        return $this->container['daemon_log'];
    }

    /**
     * Sets daemon_log
     *
     * @param string|null $daemon_log Enable/disable daemon logging.    enable:Enable daemon logging.    disable:Disable daemon logging.
     *
     * @return self
     */
    public function setDaemonLog($daemon_log)
    {
        $allowedValues = $this->getDaemonLogAllowableValues();
        if (!is_null($daemon_log) && !in_array($daemon_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'daemon_log', must be one of '%s'",
                    $daemon_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['daemon_log'] = $daemon_log;

        return $this;
    }

    /**
     * Gets neighbor_event
     *
     * @return string|null
     */
    public function getNeighborEvent()
    {
        return $this->container['neighbor_event'];
    }

    /**
     * Sets neighbor_event
     *
     * @param string|null $neighbor_event Enable/disable neighbor event logging.    enable:Enable neighbor event logging.    disable:Disable neighbor event logging.
     *
     * @return self
     */
    public function setNeighborEvent($neighbor_event)
    {
        $allowedValues = $this->getNeighborEventAllowableValues();
        if (!is_null($neighbor_event) && !in_array($neighbor_event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'neighbor_event', must be one of '%s'",
                    $neighbor_event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['neighbor_event'] = $neighbor_event;

        return $this;
    }

    /**
     * Gets brief_traffic_format
     *
     * @return string|null
     */
    public function getBriefTrafficFormat()
    {
        return $this->container['brief_traffic_format'];
    }

    /**
     * Sets brief_traffic_format
     *
     * @param string|null $brief_traffic_format Enable/disable brief format traffic logging.    enable:Enable brief format traffic logging.    disable:Disable brief format traffic logging.
     *
     * @return self
     */
    public function setBriefTrafficFormat($brief_traffic_format)
    {
        $allowedValues = $this->getBriefTrafficFormatAllowableValues();
        if (!is_null($brief_traffic_format) && !in_array($brief_traffic_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'brief_traffic_format', must be one of '%s'",
                    $brief_traffic_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['brief_traffic_format'] = $brief_traffic_format;

        return $this;
    }

    /**
     * Gets user_anonymize
     *
     * @return string|null
     */
    public function getUserAnonymize()
    {
        return $this->container['user_anonymize'];
    }

    /**
     * Sets user_anonymize
     *
     * @param string|null $user_anonymize Enable/disable anonymizing user names in log messages.    enable:Enable anonymizing user names in log messages.    disable:Disable anonymizing user names in log messages.
     *
     * @return self
     */
    public function setUserAnonymize($user_anonymize)
    {
        $allowedValues = $this->getUserAnonymizeAllowableValues();
        if (!is_null($user_anonymize) && !in_array($user_anonymize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_anonymize', must be one of '%s'",
                    $user_anonymize,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_anonymize'] = $user_anonymize;

        return $this;
    }

    /**
     * Gets expolicy_implicit_log
     *
     * @return string|null
     */
    public function getExpolicyImplicitLog()
    {
        return $this->container['expolicy_implicit_log'];
    }

    /**
     * Sets expolicy_implicit_log
     *
     * @param string|null $expolicy_implicit_log Enable/disable explicit proxy firewall implicit policy logging.    enable:Enable explicit proxy firewall implicit policy logging.    disable:Disable explicit proxy firewall implicit policy logging.
     *
     * @return self
     */
    public function setExpolicyImplicitLog($expolicy_implicit_log)
    {
        $allowedValues = $this->getExpolicyImplicitLogAllowableValues();
        if (!is_null($expolicy_implicit_log) && !in_array($expolicy_implicit_log, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expolicy_implicit_log', must be one of '%s'",
                    $expolicy_implicit_log,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expolicy_implicit_log'] = $expolicy_implicit_log;

        return $this;
    }

    /**
     * Gets log_policy_comment
     *
     * @return string|null
     */
    public function getLogPolicyComment()
    {
        return $this->container['log_policy_comment'];
    }

    /**
     * Sets log_policy_comment
     *
     * @param string|null $log_policy_comment Enable/disable inserting policy comments into traffic logs.    enable:Enable inserting policy comments into traffic logs.    disable:Disable inserting policy comments into traffic logs.
     *
     * @return self
     */
    public function setLogPolicyComment($log_policy_comment)
    {
        $allowedValues = $this->getLogPolicyCommentAllowableValues();
        if (!is_null($log_policy_comment) && !in_array($log_policy_comment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'log_policy_comment', must be one of '%s'",
                    $log_policy_comment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['log_policy_comment'] = $log_policy_comment;

        return $this;
    }

    /**
     * Gets faz_override
     *
     * @return string|null
     */
    public function getFazOverride()
    {
        return $this->container['faz_override'];
    }

    /**
     * Sets faz_override
     *
     * @param string|null $faz_override Enable/disable override FortiAnalyzer settings.    enable:Enable override FortiAnalyzer settings.    disable:Disable override FortiAnalyzer settings.
     *
     * @return self
     */
    public function setFazOverride($faz_override)
    {
        $allowedValues = $this->getFazOverrideAllowableValues();
        if (!is_null($faz_override) && !in_array($faz_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'faz_override', must be one of '%s'",
                    $faz_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['faz_override'] = $faz_override;

        return $this;
    }

    /**
     * Gets syslog_override
     *
     * @return string|null
     */
    public function getSyslogOverride()
    {
        return $this->container['syslog_override'];
    }

    /**
     * Sets syslog_override
     *
     * @param string|null $syslog_override Enable/disable override Syslog settings.    enable:Enable override Syslog settings.    disable:Disable override Syslog settings.
     *
     * @return self
     */
    public function setSyslogOverride($syslog_override)
    {
        $allowedValues = $this->getSyslogOverrideAllowableValues();
        if (!is_null($syslog_override) && !in_array($syslog_override, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'syslog_override', must be one of '%s'",
                    $syslog_override,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['syslog_override'] = $syslog_override;

        return $this;
    }

    /**
     * Gets custom_log_fields
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogSettingCustomLogFields[]|null
     */
    public function getCustomLogFields()
    {
        return $this->container['custom_log_fields'];
    }

    /**
     * Sets custom_log_fields
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogSettingCustomLogFields[]|null $custom_log_fields Custom fields to append to all log messages.
     *
     * @return self
     */
    public function setCustomLogFields($custom_log_fields)
    {

        if (!is_null($custom_log_fields) && (count($custom_log_fields) > 5)) {
            throw new \InvalidArgumentException('invalid value for $custom_log_fields when calling InlineObject134., number of items must be less than or equal to 5.');
        }
        $this->container['custom_log_fields'] = $custom_log_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


