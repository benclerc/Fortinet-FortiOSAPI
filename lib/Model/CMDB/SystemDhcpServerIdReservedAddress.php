<?php
/**
 * SystemDhcpServerIdReservedAddress
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemDhcpServerIdReservedAddress Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemDhcpServerIdReservedAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_dhcp_server__id__reserved_address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => 'string',
        'ip' => 'string',
        'mac' => 'string',
        'action' => 'string',
        'circuit_id_type' => 'string',
        'circuit_id' => 'string',
        'remote_id_type' => 'string',
        'remote_id' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'ip' => 'ipv4',
        'mac' => 'mac-address',
        'action' => null,
        'circuit_id_type' => null,
        'circuit_id' => null,
        'remote_id_type' => null,
        'remote_id' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'ip' => 'ip',
        'mac' => 'mac',
        'action' => 'action',
        'circuit_id_type' => 'circuit-id-type',
        'circuit_id' => 'circuit-id',
        'remote_id_type' => 'remote-id-type',
        'remote_id' => 'remote-id',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'ip' => 'setIp',
        'mac' => 'setMac',
        'action' => 'setAction',
        'circuit_id_type' => 'setCircuitIdType',
        'circuit_id' => 'setCircuitId',
        'remote_id_type' => 'setRemoteIdType',
        'remote_id' => 'setRemoteId',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'ip' => 'getIp',
        'mac' => 'getMac',
        'action' => 'getAction',
        'circuit_id_type' => 'getCircuitIdType',
        'circuit_id' => 'getCircuitId',
        'remote_id_type' => 'getRemoteIdType',
        'remote_id' => 'getRemoteId',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_MAC = 'mac';
    const TYPE_OPTION82 = 'option82';
    const ACTION_ASSIGN = 'assign';
    const ACTION_BLOCK = 'block';
    const ACTION_RESERVED = 'reserved';
    const CIRCUIT_ID_TYPE_HEX = 'hex';
    const CIRCUIT_ID_TYPE_STRING = 'string';
    const REMOTE_ID_TYPE_HEX = 'hex';
    const REMOTE_ID_TYPE_STRING = 'string';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MAC,
            self::TYPE_OPTION82,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_ASSIGN,
            self::ACTION_BLOCK,
            self::ACTION_RESERVED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCircuitIdTypeAllowableValues()
    {
        return [
            self::CIRCUIT_ID_TYPE_HEX,
            self::CIRCUIT_ID_TYPE_STRING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRemoteIdTypeAllowableValues()
    {
        return [
            self::REMOTE_ID_TYPE_HEX,
            self::REMOTE_ID_TYPE_STRING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['mac'] = $data['mac'] ?? null;
        $this->container['action'] = $data['action'] ?? null;
        $this->container['circuit_id_type'] = $data['circuit_id_type'] ?? null;
        $this->container['circuit_id'] = $data['circuit_id'] ?? null;
        $this->container['remote_id_type'] = $data['remote_id_type'] ?? null;
        $this->container['remote_id'] = $data['remote_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCircuitIdTypeAllowableValues();
        if (!is_null($this->container['circuit_id_type']) && !in_array($this->container['circuit_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'circuit_id_type', must be one of '%s'",
                $this->container['circuit_id_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['circuit_id']) && (mb_strlen($this->container['circuit_id']) > 312)) {
            $invalidProperties[] = "invalid value for 'circuit_id', the character length must be smaller than or equal to 312.";
        }

        $allowedValues = $this->getRemoteIdTypeAllowableValues();
        if (!is_null($this->container['remote_id_type']) && !in_array($this->container['remote_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'remote_id_type', must be one of '%s'",
                $this->container['remote_id_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['remote_id']) && (mb_strlen($this->container['remote_id']) > 312)) {
            $invalidProperties[] = "invalid value for 'remote_id', the character length must be smaller than or equal to 312.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemDhcpServerIdReservedAddress., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SystemDhcpServerIdReservedAddress., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type DHCP reserved-address type.    mac:Match with MAC address.    option82:Match with DHCP option 82.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address to be reserved for the MAC address.
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac MAC address of the client that will get the reserved IP address.
     *
     * @return self
     */
    public function setMac($mac)
    {
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Options for the DHCP server to configure the client with the reserved MAC address.    assign:Configure the client with this MAC address like any other client.    block:Block the DHCP server from assigning IP settings to the client with this MAC address.    reserved:Assign the reserved IP address to the client with this MAC address.
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets circuit_id_type
     *
     * @return string|null
     */
    public function getCircuitIdType()
    {
        return $this->container['circuit_id_type'];
    }

    /**
     * Sets circuit_id_type
     *
     * @param string|null $circuit_id_type DHCP option type.    hex:DHCP option in hex.    string:DHCP option in string.
     *
     * @return self
     */
    public function setCircuitIdType($circuit_id_type)
    {
        $allowedValues = $this->getCircuitIdTypeAllowableValues();
        if (!is_null($circuit_id_type) && !in_array($circuit_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'circuit_id_type', must be one of '%s'",
                    $circuit_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['circuit_id_type'] = $circuit_id_type;

        return $this;
    }

    /**
     * Gets circuit_id
     *
     * @return string|null
     */
    public function getCircuitId()
    {
        return $this->container['circuit_id'];
    }

    /**
     * Sets circuit_id
     *
     * @param string|null $circuit_id Option 82 circuit-ID of the client that will get the reserved IP address.
     *
     * @return self
     */
    public function setCircuitId($circuit_id)
    {
        if (!is_null($circuit_id) && (mb_strlen($circuit_id) > 312)) {
            throw new \InvalidArgumentException('invalid length for $circuit_id when calling SystemDhcpServerIdReservedAddress., must be smaller than or equal to 312.');
        }

        $this->container['circuit_id'] = $circuit_id;

        return $this;
    }

    /**
     * Gets remote_id_type
     *
     * @return string|null
     */
    public function getRemoteIdType()
    {
        return $this->container['remote_id_type'];
    }

    /**
     * Sets remote_id_type
     *
     * @param string|null $remote_id_type DHCP option type.    hex:DHCP option in hex.    string:DHCP option in string.
     *
     * @return self
     */
    public function setRemoteIdType($remote_id_type)
    {
        $allowedValues = $this->getRemoteIdTypeAllowableValues();
        if (!is_null($remote_id_type) && !in_array($remote_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'remote_id_type', must be one of '%s'",
                    $remote_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['remote_id_type'] = $remote_id_type;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id Option 82 remote-ID of the client that will get the reserved IP address.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        if (!is_null($remote_id) && (mb_strlen($remote_id) > 312)) {
            throw new \InvalidArgumentException('invalid length for $remote_id when calling SystemDhcpServerIdReservedAddress., must be smaller than or equal to 312.');
        }

        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SystemDhcpServerIdReservedAddress., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


