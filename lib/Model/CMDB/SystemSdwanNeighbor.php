<?php
/**
 * SystemSdwanNeighbor
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SystemSdwanNeighbor Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SystemSdwanNeighbor implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_system_sdwan_neighbor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip' => 'string',
        'member' => 'int',
        'role' => 'string',
        'health_check' => 'string',
        'sla_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip' => null,
        'member' => null,
        'role' => null,
        'health_check' => null,
        'sla_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'member' => 'member',
        'role' => 'role',
        'health_check' => 'health-check',
        'sla_id' => 'sla-id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'member' => 'setMember',
        'role' => 'setRole',
        'health_check' => 'setHealthCheck',
        'sla_id' => 'setSlaId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'member' => 'getMember',
        'role' => 'getRole',
        'health_check' => 'getHealthCheck',
        'sla_id' => 'getSlaId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ROLE_STANDALONE = 'standalone';
    const ROLE_PRIMARY = 'primary';
    const ROLE_SECONDARY = 'secondary';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_STANDALONE,
            self::ROLE_PRIMARY,
            self::ROLE_SECONDARY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['member'] = $data['member'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['health_check'] = $data['health_check'] ?? null;
        $this->container['sla_id'] = $data['sla_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) > 45)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['member']) && ($this->container['member'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'member', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['member']) && ($this->container['member'] < 0)) {
            $invalidProperties[] = "invalid value for 'member', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['health_check']) && (mb_strlen($this->container['health_check']) > 35)) {
            $invalidProperties[] = "invalid value for 'health_check', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['sla_id']) && ($this->container['sla_id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'sla_id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['sla_id']) && ($this->container['sla_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'sla_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP/IPv6 address of neighbor.
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (!is_null($ip) && (mb_strlen($ip) > 45)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling SystemSdwanNeighbor., must be smaller than or equal to 45.');
        }

        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets member
     *
     * @return int|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param int|null $member Member sequence number.
     *
     * @return self
     */
    public function setMember($member)
    {

        if (!is_null($member) && ($member > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $member when calling SystemSdwanNeighbor., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($member) && ($member < 0)) {
            throw new \InvalidArgumentException('invalid value for $member when calling SystemSdwanNeighbor., must be bigger than or equal to 0.');
        }

        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Role of neighbor.    standalone:Standalone neighbor.    primary:Primary neighbor.    secondary:Secondary neighbor.
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return string|null
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param string|null $health_check SD-WAN health-check name.
     *
     * @return self
     */
    public function setHealthCheck($health_check)
    {
        if (!is_null($health_check) && (mb_strlen($health_check) > 35)) {
            throw new \InvalidArgumentException('invalid length for $health_check when calling SystemSdwanNeighbor., must be smaller than or equal to 35.');
        }

        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets sla_id
     *
     * @return int|null
     */
    public function getSlaId()
    {
        return $this->container['sla_id'];
    }

    /**
     * Sets sla_id
     *
     * @param int|null $sla_id SLA ID.
     *
     * @return self
     */
    public function setSlaId($sla_id)
    {

        if (!is_null($sla_id) && ($sla_id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $sla_id when calling SystemSdwanNeighbor., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($sla_id) && ($sla_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $sla_id when calling SystemSdwanNeighbor., must be bigger than or equal to 0.');
        }

        $this->container['sla_id'] = $sla_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


