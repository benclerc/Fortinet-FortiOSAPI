<?php
/**
 * InlineObject135
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject135 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject135 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_135';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'level' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightLevel[]',
        'blocked_connection' => 'string',
        'failed_connection' => 'string',
        'url_block_detected' => 'string',
        'botnet_connection_detected' => 'string',
        'malware' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightMalware[]',
        'ips' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightIps[]',
        'web' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightWeb[]',
        'geolocation' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightGeolocation[]',
        'application' => '\Fortigate\FortiOS\Model\CMDB\LogThreatWeightApplication[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'level' => null,
        'blocked_connection' => null,
        'failed_connection' => null,
        'url_block_detected' => null,
        'botnet_connection_detected' => null,
        'malware' => null,
        'ips' => null,
        'web' => null,
        'geolocation' => null,
        'application' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'level' => 'level',
        'blocked_connection' => 'blocked-connection',
        'failed_connection' => 'failed-connection',
        'url_block_detected' => 'url-block-detected',
        'botnet_connection_detected' => 'botnet-connection-detected',
        'malware' => 'malware',
        'ips' => 'ips',
        'web' => 'web',
        'geolocation' => 'geolocation',
        'application' => 'application'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'level' => 'setLevel',
        'blocked_connection' => 'setBlockedConnection',
        'failed_connection' => 'setFailedConnection',
        'url_block_detected' => 'setUrlBlockDetected',
        'botnet_connection_detected' => 'setBotnetConnectionDetected',
        'malware' => 'setMalware',
        'ips' => 'setIps',
        'web' => 'setWeb',
        'geolocation' => 'setGeolocation',
        'application' => 'setApplication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'level' => 'getLevel',
        'blocked_connection' => 'getBlockedConnection',
        'failed_connection' => 'getFailedConnection',
        'url_block_detected' => 'getUrlBlockDetected',
        'botnet_connection_detected' => 'getBotnetConnectionDetected',
        'malware' => 'getMalware',
        'ips' => 'getIps',
        'web' => 'getWeb',
        'geolocation' => 'getGeolocation',
        'application' => 'getApplication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const BLOCKED_CONNECTION_DISABLE = 'disable';
    const BLOCKED_CONNECTION_LOW = 'low';
    const BLOCKED_CONNECTION_MEDIUM = 'medium';
    const BLOCKED_CONNECTION_HIGH = 'high';
    const BLOCKED_CONNECTION_CRITICAL = 'critical';
    const FAILED_CONNECTION_DISABLE = 'disable';
    const FAILED_CONNECTION_LOW = 'low';
    const FAILED_CONNECTION_MEDIUM = 'medium';
    const FAILED_CONNECTION_HIGH = 'high';
    const FAILED_CONNECTION_CRITICAL = 'critical';
    const URL_BLOCK_DETECTED_DISABLE = 'disable';
    const URL_BLOCK_DETECTED_LOW = 'low';
    const URL_BLOCK_DETECTED_MEDIUM = 'medium';
    const URL_BLOCK_DETECTED_HIGH = 'high';
    const URL_BLOCK_DETECTED_CRITICAL = 'critical';
    const BOTNET_CONNECTION_DETECTED_DISABLE = 'disable';
    const BOTNET_CONNECTION_DETECTED_LOW = 'low';
    const BOTNET_CONNECTION_DETECTED_MEDIUM = 'medium';
    const BOTNET_CONNECTION_DETECTED_HIGH = 'high';
    const BOTNET_CONNECTION_DETECTED_CRITICAL = 'critical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ENABLE,
            self::STATUS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedConnectionAllowableValues()
    {
        return [
            self::BLOCKED_CONNECTION_DISABLE,
            self::BLOCKED_CONNECTION_LOW,
            self::BLOCKED_CONNECTION_MEDIUM,
            self::BLOCKED_CONNECTION_HIGH,
            self::BLOCKED_CONNECTION_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailedConnectionAllowableValues()
    {
        return [
            self::FAILED_CONNECTION_DISABLE,
            self::FAILED_CONNECTION_LOW,
            self::FAILED_CONNECTION_MEDIUM,
            self::FAILED_CONNECTION_HIGH,
            self::FAILED_CONNECTION_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUrlBlockDetectedAllowableValues()
    {
        return [
            self::URL_BLOCK_DETECTED_DISABLE,
            self::URL_BLOCK_DETECTED_LOW,
            self::URL_BLOCK_DETECTED_MEDIUM,
            self::URL_BLOCK_DETECTED_HIGH,
            self::URL_BLOCK_DETECTED_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBotnetConnectionDetectedAllowableValues()
    {
        return [
            self::BOTNET_CONNECTION_DETECTED_DISABLE,
            self::BOTNET_CONNECTION_DETECTED_LOW,
            self::BOTNET_CONNECTION_DETECTED_MEDIUM,
            self::BOTNET_CONNECTION_DETECTED_HIGH,
            self::BOTNET_CONNECTION_DETECTED_CRITICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['blocked_connection'] = $data['blocked_connection'] ?? null;
        $this->container['failed_connection'] = $data['failed_connection'] ?? null;
        $this->container['url_block_detected'] = $data['url_block_detected'] ?? null;
        $this->container['botnet_connection_detected'] = $data['botnet_connection_detected'] ?? null;
        $this->container['malware'] = $data['malware'] ?? null;
        $this->container['ips'] = $data['ips'] ?? null;
        $this->container['web'] = $data['web'] ?? null;
        $this->container['geolocation'] = $data['geolocation'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['level']) && (count($this->container['level']) > 0)) {
            $invalidProperties[] = "invalid value for 'level', number of items must be less than or equal to 0.";
        }

        $allowedValues = $this->getBlockedConnectionAllowableValues();
        if (!is_null($this->container['blocked_connection']) && !in_array($this->container['blocked_connection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blocked_connection', must be one of '%s'",
                $this->container['blocked_connection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailedConnectionAllowableValues();
        if (!is_null($this->container['failed_connection']) && !in_array($this->container['failed_connection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'failed_connection', must be one of '%s'",
                $this->container['failed_connection'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUrlBlockDetectedAllowableValues();
        if (!is_null($this->container['url_block_detected']) && !in_array($this->container['url_block_detected'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'url_block_detected', must be one of '%s'",
                $this->container['url_block_detected'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBotnetConnectionDetectedAllowableValues();
        if (!is_null($this->container['botnet_connection_detected']) && !in_array($this->container['botnet_connection_detected'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'botnet_connection_detected', must be one of '%s'",
                $this->container['botnet_connection_detected'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['malware']) && (count($this->container['malware']) > 0)) {
            $invalidProperties[] = "invalid value for 'malware', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['ips']) && (count($this->container['ips']) > 0)) {
            $invalidProperties[] = "invalid value for 'ips', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['web']) && (count($this->container['web']) > 0)) {
            $invalidProperties[] = "invalid value for 'web', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['geolocation']) && (count($this->container['geolocation']) > 0)) {
            $invalidProperties[] = "invalid value for 'geolocation', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['application']) && (count($this->container['application']) > 0)) {
            $invalidProperties[] = "invalid value for 'application', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Enable/disable the threat weight feature.    enable:Enable the threat weight feature.    disable:Disable the threat weight feature.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets level
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightLevel[]|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightLevel[]|null $level Score mapping for threat weight levels.
     *
     * @return self
     */
    public function setLevel($level)
    {

        if (!is_null($level) && (count($level) > 0)) {
            throw new \InvalidArgumentException('invalid value for $level when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets blocked_connection
     *
     * @return string|null
     */
    public function getBlockedConnection()
    {
        return $this->container['blocked_connection'];
    }

    /**
     * Sets blocked_connection
     *
     * @param string|null $blocked_connection Threat weight score for blocked connections.    disable:Disable threat weight scoring for blocked connections.    low:Use the low level score for blocked connections.    medium:Use the medium level score for blocked connections.    high:Use the high level score for blocked connections.    critical:Use the critical level score for blocked connections.
     *
     * @return self
     */
    public function setBlockedConnection($blocked_connection)
    {
        $allowedValues = $this->getBlockedConnectionAllowableValues();
        if (!is_null($blocked_connection) && !in_array($blocked_connection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blocked_connection', must be one of '%s'",
                    $blocked_connection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blocked_connection'] = $blocked_connection;

        return $this;
    }

    /**
     * Gets failed_connection
     *
     * @return string|null
     */
    public function getFailedConnection()
    {
        return $this->container['failed_connection'];
    }

    /**
     * Sets failed_connection
     *
     * @param string|null $failed_connection Threat weight score for failed connections.    disable:Disable threat weight scoring for failed connections.    low:Use the low level score for failed connections.    medium:Use the medium level score for failed connections.    high:Use the high level score for failed connections.    critical:Use the critical level score for failed connections.
     *
     * @return self
     */
    public function setFailedConnection($failed_connection)
    {
        $allowedValues = $this->getFailedConnectionAllowableValues();
        if (!is_null($failed_connection) && !in_array($failed_connection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'failed_connection', must be one of '%s'",
                    $failed_connection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failed_connection'] = $failed_connection;

        return $this;
    }

    /**
     * Gets url_block_detected
     *
     * @return string|null
     */
    public function getUrlBlockDetected()
    {
        return $this->container['url_block_detected'];
    }

    /**
     * Sets url_block_detected
     *
     * @param string|null $url_block_detected Threat weight score for URL blocking.    disable:Disable threat weight scoring for URL blocking.    low:Use the low level score for URL blocking.    medium:Use the medium level score for URL blocking.    high:Use the high level score for URL blocking.    critical:Use the critical level score for URL blocking.
     *
     * @return self
     */
    public function setUrlBlockDetected($url_block_detected)
    {
        $allowedValues = $this->getUrlBlockDetectedAllowableValues();
        if (!is_null($url_block_detected) && !in_array($url_block_detected, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'url_block_detected', must be one of '%s'",
                    $url_block_detected,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['url_block_detected'] = $url_block_detected;

        return $this;
    }

    /**
     * Gets botnet_connection_detected
     *
     * @return string|null
     */
    public function getBotnetConnectionDetected()
    {
        return $this->container['botnet_connection_detected'];
    }

    /**
     * Sets botnet_connection_detected
     *
     * @param string|null $botnet_connection_detected Threat weight score for detected botnet connections.    disable:Disable threat weight scoring for detected botnet connections.    low:Use the low level score for detected botnet connections.    medium:Use the medium level score for detected botnet connections.    high:Use the high level score for detected botnet connections.    critical:Use the critical level score for detected botnet connections.
     *
     * @return self
     */
    public function setBotnetConnectionDetected($botnet_connection_detected)
    {
        $allowedValues = $this->getBotnetConnectionDetectedAllowableValues();
        if (!is_null($botnet_connection_detected) && !in_array($botnet_connection_detected, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'botnet_connection_detected', must be one of '%s'",
                    $botnet_connection_detected,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['botnet_connection_detected'] = $botnet_connection_detected;

        return $this;
    }

    /**
     * Gets malware
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightMalware[]|null
     */
    public function getMalware()
    {
        return $this->container['malware'];
    }

    /**
     * Sets malware
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightMalware[]|null $malware Anti-virus malware threat weight settings.
     *
     * @return self
     */
    public function setMalware($malware)
    {

        if (!is_null($malware) && (count($malware) > 0)) {
            throw new \InvalidArgumentException('invalid value for $malware when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['malware'] = $malware;

        return $this;
    }

    /**
     * Gets ips
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightIps[]|null
     */
    public function getIps()
    {
        return $this->container['ips'];
    }

    /**
     * Sets ips
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightIps[]|null $ips IPS threat weight settings.
     *
     * @return self
     */
    public function setIps($ips)
    {

        if (!is_null($ips) && (count($ips) > 0)) {
            throw new \InvalidArgumentException('invalid value for $ips when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['ips'] = $ips;

        return $this;
    }

    /**
     * Gets web
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightWeb[]|null
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightWeb[]|null $web Web filtering threat weight settings.
     *
     * @return self
     */
    public function setWeb($web)
    {

        if (!is_null($web) && (count($web) > 0)) {
            throw new \InvalidArgumentException('invalid value for $web when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets geolocation
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightGeolocation[]|null
     */
    public function getGeolocation()
    {
        return $this->container['geolocation'];
    }

    /**
     * Sets geolocation
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightGeolocation[]|null $geolocation Geolocation-based threat weight settings.
     *
     * @return self
     */
    public function setGeolocation($geolocation)
    {

        if (!is_null($geolocation) && (count($geolocation) > 0)) {
            throw new \InvalidArgumentException('invalid value for $geolocation when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['geolocation'] = $geolocation;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \Fortigate\FortiOS\Model\CMDB\LogThreatWeightApplication[]|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \Fortigate\FortiOS\Model\CMDB\LogThreatWeightApplication[]|null $application Application-control threat weight settings.
     *
     * @return self
     */
    public function setApplication($application)
    {

        if (!is_null($application) && (count($application) > 0)) {
            throw new \InvalidArgumentException('invalid value for $application when calling InlineObject135., number of items must be less than or equal to 0.');
        }
        $this->container['application'] = $application;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


