<?php
/**
 * InlineObject310
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject310 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject310 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_310';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'interface' => 'string',
        'vni' => 'int',
        'type' => 'string',
        'ip_version' => 'string',
        'remote_ip' => 'string',
        'remote_ip6' => 'string',
        'dstport' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'interface' => null,
        'vni' => null,
        'type' => null,
        'ip_version' => null,
        'remote_ip' => 'ipv4',
        'remote_ip6' => 'ipv6',
        'dstport' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'interface' => 'interface',
        'vni' => 'vni',
        'type' => 'type',
        'ip_version' => 'ip-version',
        'remote_ip' => 'remote-ip',
        'remote_ip6' => 'remote-ip6',
        'dstport' => 'dstport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'interface' => 'setInterface',
        'vni' => 'setVni',
        'type' => 'setType',
        'ip_version' => 'setIpVersion',
        'remote_ip' => 'setRemoteIp',
        'remote_ip6' => 'setRemoteIp6',
        'dstport' => 'setDstport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'interface' => 'getInterface',
        'vni' => 'getVni',
        'type' => 'getType',
        'ip_version' => 'getIpVersion',
        'remote_ip' => 'getRemoteIp',
        'remote_ip6' => 'getRemoteIp6',
        'dstport' => 'getDstport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_ETHERNET = 'ethernet';
    const TYPE_PPP = 'ppp';
    const IP_VERSION_IPV4_UNICAST = 'ipv4-unicast';
    const IP_VERSION_IPV6_UNICAST = 'ipv6-unicast';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ETHERNET,
            self::TYPE_PPP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpVersionAllowableValues()
    {
        return [
            self::IP_VERSION_IPV4_UNICAST,
            self::IP_VERSION_IPV6_UNICAST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['vni'] = $data['vni'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['ip_version'] = $data['ip_version'] ?? null;
        $this->container['remote_ip'] = $data['remote_ip'] ?? null;
        $this->container['remote_ip6'] = $data['remote_ip6'] ?? null;
        $this->container['dstport'] = $data['dstport'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['vni']) && ($this->container['vni'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'vni', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['vni']) && ($this->container['vni'] < 0)) {
            $invalidProperties[] = "invalid value for 'vni', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($this->container['ip_version']) && !in_array($this->container['ip_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_version', must be one of '%s'",
                $this->container['ip_version'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dstport']) && ($this->container['dstport'] > 65535)) {
            $invalidProperties[] = "invalid value for 'dstport', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['dstport']) && ($this->container['dstport'] < 1)) {
            $invalidProperties[] = "invalid value for 'dstport', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name GENEVE device or interface name. Must be an unique interface name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject310., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Outgoing interface for GENEVE encapsulated traffic.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject310., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets vni
     *
     * @return int|null
     */
    public function getVni()
    {
        return $this->container['vni'];
    }

    /**
     * Sets vni
     *
     * @param int|null $vni GENEVE network ID.
     *
     * @return self
     */
    public function setVni($vni)
    {

        if (!is_null($vni) && ($vni > 16777215)) {
            throw new \InvalidArgumentException('invalid value for $vni when calling InlineObject310., must be smaller than or equal to 16777215.');
        }
        if (!is_null($vni) && ($vni < 0)) {
            throw new \InvalidArgumentException('invalid value for $vni when calling InlineObject310., must be bigger than or equal to 0.');
        }

        $this->container['vni'] = $vni;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type GENEVE type.    ethernet:Internal packet includes Ethernet header.    ppp:Internal packet does not include Ethernet header.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ip_version
     *
     * @return string|null
     */
    public function getIpVersion()
    {
        return $this->container['ip_version'];
    }

    /**
     * Sets ip_version
     *
     * @param string|null $ip_version IP version to use for the GENEVE interface and so for communication over the GENEVE. IPv4 or IPv6 unicast.    ipv4-unicast:Use IPv4 unicast addressing over the GENEVE.    ipv6-unicast:Use IPv6 unicast addressing over the GENEVE.
     *
     * @return self
     */
    public function setIpVersion($ip_version)
    {
        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($ip_version) && !in_array($ip_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_version', must be one of '%s'",
                    $ip_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_version'] = $ip_version;

        return $this;
    }

    /**
     * Gets remote_ip
     *
     * @return string|null
     */
    public function getRemoteIp()
    {
        return $this->container['remote_ip'];
    }

    /**
     * Sets remote_ip
     *
     * @param string|null $remote_ip IPv4 address of the GENEVE interface on the device at the remote end of the GENEVE.
     *
     * @return self
     */
    public function setRemoteIp($remote_ip)
    {
        $this->container['remote_ip'] = $remote_ip;

        return $this;
    }

    /**
     * Gets remote_ip6
     *
     * @return string|null
     */
    public function getRemoteIp6()
    {
        return $this->container['remote_ip6'];
    }

    /**
     * Sets remote_ip6
     *
     * @param string|null $remote_ip6 IPv6 IP address of the GENEVE interface on the device at the remote end of the GENEVE.
     *
     * @return self
     */
    public function setRemoteIp6($remote_ip6)
    {
        $this->container['remote_ip6'] = $remote_ip6;

        return $this;
    }

    /**
     * Gets dstport
     *
     * @return int|null
     */
    public function getDstport()
    {
        return $this->container['dstport'];
    }

    /**
     * Sets dstport
     *
     * @param int|null $dstport GENEVE destination port (1 - 65535, default = 6081).
     *
     * @return self
     */
    public function setDstport($dstport)
    {

        if (!is_null($dstport) && ($dstport > 65535)) {
            throw new \InvalidArgumentException('invalid value for $dstport when calling InlineObject310., must be smaller than or equal to 65535.');
        }
        if (!is_null($dstport) && ($dstport < 1)) {
            throw new \InvalidArgumentException('invalid value for $dstport when calling InlineObject310., must be bigger than or equal to 1.');
        }

        $this->container['dstport'] = $dstport;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


