<?php
/**
 * WafProfileNameException
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * WafProfileNameException Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WafProfileNameException implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_waf_profile__name__exception';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'pattern' => 'string',
        'regex' => 'string',
        'address' => 'string',
        'header_length' => 'string',
        'content_length' => 'string',
        'param_length' => 'string',
        'line_length' => 'string',
        'url_param_length' => 'string',
        'version' => 'string',
        'method' => 'string',
        'hostname' => 'string',
        'malformed' => 'string',
        'max_cookie' => 'string',
        'max_header_line' => 'string',
        'max_url_param' => 'string',
        'max_range_segment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'pattern' => null,
        'regex' => null,
        'address' => null,
        'header_length' => null,
        'content_length' => null,
        'param_length' => null,
        'line_length' => null,
        'url_param_length' => null,
        'version' => null,
        'method' => null,
        'hostname' => null,
        'malformed' => null,
        'max_cookie' => null,
        'max_header_line' => null,
        'max_url_param' => null,
        'max_range_segment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pattern' => 'pattern',
        'regex' => 'regex',
        'address' => 'address',
        'header_length' => 'header-length',
        'content_length' => 'content-length',
        'param_length' => 'param-length',
        'line_length' => 'line-length',
        'url_param_length' => 'url-param-length',
        'version' => 'version',
        'method' => 'method',
        'hostname' => 'hostname',
        'malformed' => 'malformed',
        'max_cookie' => 'max-cookie',
        'max_header_line' => 'max-header-line',
        'max_url_param' => 'max-url-param',
        'max_range_segment' => 'max-range-segment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pattern' => 'setPattern',
        'regex' => 'setRegex',
        'address' => 'setAddress',
        'header_length' => 'setHeaderLength',
        'content_length' => 'setContentLength',
        'param_length' => 'setParamLength',
        'line_length' => 'setLineLength',
        'url_param_length' => 'setUrlParamLength',
        'version' => 'setVersion',
        'method' => 'setMethod',
        'hostname' => 'setHostname',
        'malformed' => 'setMalformed',
        'max_cookie' => 'setMaxCookie',
        'max_header_line' => 'setMaxHeaderLine',
        'max_url_param' => 'setMaxUrlParam',
        'max_range_segment' => 'setMaxRangeSegment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pattern' => 'getPattern',
        'regex' => 'getRegex',
        'address' => 'getAddress',
        'header_length' => 'getHeaderLength',
        'content_length' => 'getContentLength',
        'param_length' => 'getParamLength',
        'line_length' => 'getLineLength',
        'url_param_length' => 'getUrlParamLength',
        'version' => 'getVersion',
        'method' => 'getMethod',
        'hostname' => 'getHostname',
        'malformed' => 'getMalformed',
        'max_cookie' => 'getMaxCookie',
        'max_header_line' => 'getMaxHeaderLine',
        'max_url_param' => 'getMaxUrlParam',
        'max_range_segment' => 'getMaxRangeSegment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REGEX_ENABLE = 'enable';
    const REGEX_DISABLE = 'disable';
    const HEADER_LENGTH_ENABLE = 'enable';
    const HEADER_LENGTH_DISABLE = 'disable';
    const CONTENT_LENGTH_ENABLE = 'enable';
    const CONTENT_LENGTH_DISABLE = 'disable';
    const PARAM_LENGTH_ENABLE = 'enable';
    const PARAM_LENGTH_DISABLE = 'disable';
    const LINE_LENGTH_ENABLE = 'enable';
    const LINE_LENGTH_DISABLE = 'disable';
    const URL_PARAM_LENGTH_ENABLE = 'enable';
    const URL_PARAM_LENGTH_DISABLE = 'disable';
    const VERSION_ENABLE = 'enable';
    const VERSION_DISABLE = 'disable';
    const METHOD_ENABLE = 'enable';
    const METHOD_DISABLE = 'disable';
    const HOSTNAME_ENABLE = 'enable';
    const HOSTNAME_DISABLE = 'disable';
    const MALFORMED_ENABLE = 'enable';
    const MALFORMED_DISABLE = 'disable';
    const MAX_COOKIE_ENABLE = 'enable';
    const MAX_COOKIE_DISABLE = 'disable';
    const MAX_HEADER_LINE_ENABLE = 'enable';
    const MAX_HEADER_LINE_DISABLE = 'disable';
    const MAX_URL_PARAM_ENABLE = 'enable';
    const MAX_URL_PARAM_DISABLE = 'disable';
    const MAX_RANGE_SEGMENT_ENABLE = 'enable';
    const MAX_RANGE_SEGMENT_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegexAllowableValues()
    {
        return [
            self::REGEX_ENABLE,
            self::REGEX_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderLengthAllowableValues()
    {
        return [
            self::HEADER_LENGTH_ENABLE,
            self::HEADER_LENGTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentLengthAllowableValues()
    {
        return [
            self::CONTENT_LENGTH_ENABLE,
            self::CONTENT_LENGTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParamLengthAllowableValues()
    {
        return [
            self::PARAM_LENGTH_ENABLE,
            self::PARAM_LENGTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineLengthAllowableValues()
    {
        return [
            self::LINE_LENGTH_ENABLE,
            self::LINE_LENGTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUrlParamLengthAllowableValues()
    {
        return [
            self::URL_PARAM_LENGTH_ENABLE,
            self::URL_PARAM_LENGTH_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION_ENABLE,
            self::VERSION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_ENABLE,
            self::METHOD_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostnameAllowableValues()
    {
        return [
            self::HOSTNAME_ENABLE,
            self::HOSTNAME_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMalformedAllowableValues()
    {
        return [
            self::MALFORMED_ENABLE,
            self::MALFORMED_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaxCookieAllowableValues()
    {
        return [
            self::MAX_COOKIE_ENABLE,
            self::MAX_COOKIE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaxHeaderLineAllowableValues()
    {
        return [
            self::MAX_HEADER_LINE_ENABLE,
            self::MAX_HEADER_LINE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaxUrlParamAllowableValues()
    {
        return [
            self::MAX_URL_PARAM_ENABLE,
            self::MAX_URL_PARAM_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaxRangeSegmentAllowableValues()
    {
        return [
            self::MAX_RANGE_SEGMENT_ENABLE,
            self::MAX_RANGE_SEGMENT_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['pattern'] = $data['pattern'] ?? null;
        $this->container['regex'] = $data['regex'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['header_length'] = $data['header_length'] ?? null;
        $this->container['content_length'] = $data['content_length'] ?? null;
        $this->container['param_length'] = $data['param_length'] ?? null;
        $this->container['line_length'] = $data['line_length'] ?? null;
        $this->container['url_param_length'] = $data['url_param_length'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['malformed'] = $data['malformed'] ?? null;
        $this->container['max_cookie'] = $data['max_cookie'] ?? null;
        $this->container['max_header_line'] = $data['max_header_line'] ?? null;
        $this->container['max_url_param'] = $data['max_url_param'] ?? null;
        $this->container['max_range_segment'] = $data['max_range_segment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pattern']) && (mb_strlen($this->container['pattern']) > 511)) {
            $invalidProperties[] = "invalid value for 'pattern', the character length must be smaller than or equal to 511.";
        }

        $allowedValues = $this->getRegexAllowableValues();
        if (!is_null($this->container['regex']) && !in_array($this->container['regex'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'regex', must be one of '%s'",
                $this->container['regex'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 79)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getHeaderLengthAllowableValues();
        if (!is_null($this->container['header_length']) && !in_array($this->container['header_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header_length', must be one of '%s'",
                $this->container['header_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentLengthAllowableValues();
        if (!is_null($this->container['content_length']) && !in_array($this->container['content_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content_length', must be one of '%s'",
                $this->container['content_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getParamLengthAllowableValues();
        if (!is_null($this->container['param_length']) && !in_array($this->container['param_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'param_length', must be one of '%s'",
                $this->container['param_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLineLengthAllowableValues();
        if (!is_null($this->container['line_length']) && !in_array($this->container['line_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'line_length', must be one of '%s'",
                $this->container['line_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUrlParamLengthAllowableValues();
        if (!is_null($this->container['url_param_length']) && !in_array($this->container['url_param_length'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'url_param_length', must be one of '%s'",
                $this->container['url_param_length'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($this->container['version']) && !in_array($this->container['version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'version', must be one of '%s'",
                $this->container['version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHostnameAllowableValues();
        if (!is_null($this->container['hostname']) && !in_array($this->container['hostname'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hostname', must be one of '%s'",
                $this->container['hostname'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMalformedAllowableValues();
        if (!is_null($this->container['malformed']) && !in_array($this->container['malformed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'malformed', must be one of '%s'",
                $this->container['malformed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaxCookieAllowableValues();
        if (!is_null($this->container['max_cookie']) && !in_array($this->container['max_cookie'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'max_cookie', must be one of '%s'",
                $this->container['max_cookie'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaxHeaderLineAllowableValues();
        if (!is_null($this->container['max_header_line']) && !in_array($this->container['max_header_line'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'max_header_line', must be one of '%s'",
                $this->container['max_header_line'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaxUrlParamAllowableValues();
        if (!is_null($this->container['max_url_param']) && !in_array($this->container['max_url_param'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'max_url_param', must be one of '%s'",
                $this->container['max_url_param'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaxRangeSegmentAllowableValues();
        if (!is_null($this->container['max_range_segment']) && !in_array($this->container['max_range_segment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'max_range_segment', must be one of '%s'",
                $this->container['max_range_segment'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Exception ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $id when calling WafProfileNameException., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling WafProfileNameException., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern URL pattern.
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (!is_null($pattern) && (mb_strlen($pattern) > 511)) {
            throw new \InvalidArgumentException('invalid length for $pattern when calling WafProfileNameException., must be smaller than or equal to 511.');
        }

        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets regex
     *
     * @return string|null
     */
    public function getRegex()
    {
        return $this->container['regex'];
    }

    /**
     * Sets regex
     *
     * @param string|null $regex Enable/disable regular expression based pattern match.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setRegex($regex)
    {
        $allowedValues = $this->getRegexAllowableValues();
        if (!is_null($regex) && !in_array($regex, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'regex', must be one of '%s'",
                    $regex,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['regex'] = $regex;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Host address.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (mb_strlen($address) > 79)) {
            throw new \InvalidArgumentException('invalid length for $address when calling WafProfileNameException., must be smaller than or equal to 79.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets header_length
     *
     * @return string|null
     */
    public function getHeaderLength()
    {
        return $this->container['header_length'];
    }

    /**
     * Sets header_length
     *
     * @param string|null $header_length HTTP header length in request.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setHeaderLength($header_length)
    {
        $allowedValues = $this->getHeaderLengthAllowableValues();
        if (!is_null($header_length) && !in_array($header_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header_length', must be one of '%s'",
                    $header_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['header_length'] = $header_length;

        return $this;
    }

    /**
     * Gets content_length
     *
     * @return string|null
     */
    public function getContentLength()
    {
        return $this->container['content_length'];
    }

    /**
     * Sets content_length
     *
     * @param string|null $content_length HTTP content length in request.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setContentLength($content_length)
    {
        $allowedValues = $this->getContentLengthAllowableValues();
        if (!is_null($content_length) && !in_array($content_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content_length', must be one of '%s'",
                    $content_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_length'] = $content_length;

        return $this;
    }

    /**
     * Gets param_length
     *
     * @return string|null
     */
    public function getParamLength()
    {
        return $this->container['param_length'];
    }

    /**
     * Sets param_length
     *
     * @param string|null $param_length Maximum length of parameter in URL, HTTP POST request or HTTP body.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setParamLength($param_length)
    {
        $allowedValues = $this->getParamLengthAllowableValues();
        if (!is_null($param_length) && !in_array($param_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'param_length', must be one of '%s'",
                    $param_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['param_length'] = $param_length;

        return $this;
    }

    /**
     * Gets line_length
     *
     * @return string|null
     */
    public function getLineLength()
    {
        return $this->container['line_length'];
    }

    /**
     * Sets line_length
     *
     * @param string|null $line_length HTTP line length in request.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setLineLength($line_length)
    {
        $allowedValues = $this->getLineLengthAllowableValues();
        if (!is_null($line_length) && !in_array($line_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'line_length', must be one of '%s'",
                    $line_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_length'] = $line_length;

        return $this;
    }

    /**
     * Gets url_param_length
     *
     * @return string|null
     */
    public function getUrlParamLength()
    {
        return $this->container['url_param_length'];
    }

    /**
     * Sets url_param_length
     *
     * @param string|null $url_param_length Maximum length of parameter in URL.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setUrlParamLength($url_param_length)
    {
        $allowedValues = $this->getUrlParamLengthAllowableValues();
        if (!is_null($url_param_length) && !in_array($url_param_length, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'url_param_length', must be one of '%s'",
                    $url_param_length,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['url_param_length'] = $url_param_length;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Enable/disable HTTP version check.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($version) && !in_array($version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'version', must be one of '%s'",
                    $version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method Enable/disable HTTP method check.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname Enable/disable hostname check.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $allowedValues = $this->getHostnameAllowableValues();
        if (!is_null($hostname) && !in_array($hostname, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hostname', must be one of '%s'",
                    $hostname,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets malformed
     *
     * @return string|null
     */
    public function getMalformed()
    {
        return $this->container['malformed'];
    }

    /**
     * Sets malformed
     *
     * @param string|null $malformed Enable/disable malformed HTTP request check.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMalformed($malformed)
    {
        $allowedValues = $this->getMalformedAllowableValues();
        if (!is_null($malformed) && !in_array($malformed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'malformed', must be one of '%s'",
                    $malformed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['malformed'] = $malformed;

        return $this;
    }

    /**
     * Gets max_cookie
     *
     * @return string|null
     */
    public function getMaxCookie()
    {
        return $this->container['max_cookie'];
    }

    /**
     * Sets max_cookie
     *
     * @param string|null $max_cookie Maximum number of cookies in HTTP request.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaxCookie($max_cookie)
    {
        $allowedValues = $this->getMaxCookieAllowableValues();
        if (!is_null($max_cookie) && !in_array($max_cookie, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'max_cookie', must be one of '%s'",
                    $max_cookie,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['max_cookie'] = $max_cookie;

        return $this;
    }

    /**
     * Gets max_header_line
     *
     * @return string|null
     */
    public function getMaxHeaderLine()
    {
        return $this->container['max_header_line'];
    }

    /**
     * Sets max_header_line
     *
     * @param string|null $max_header_line Maximum number of HTTP header line.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaxHeaderLine($max_header_line)
    {
        $allowedValues = $this->getMaxHeaderLineAllowableValues();
        if (!is_null($max_header_line) && !in_array($max_header_line, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'max_header_line', must be one of '%s'",
                    $max_header_line,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['max_header_line'] = $max_header_line;

        return $this;
    }

    /**
     * Gets max_url_param
     *
     * @return string|null
     */
    public function getMaxUrlParam()
    {
        return $this->container['max_url_param'];
    }

    /**
     * Sets max_url_param
     *
     * @param string|null $max_url_param Maximum number of parameters in URL.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaxUrlParam($max_url_param)
    {
        $allowedValues = $this->getMaxUrlParamAllowableValues();
        if (!is_null($max_url_param) && !in_array($max_url_param, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'max_url_param', must be one of '%s'",
                    $max_url_param,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['max_url_param'] = $max_url_param;

        return $this;
    }

    /**
     * Gets max_range_segment
     *
     * @return string|null
     */
    public function getMaxRangeSegment()
    {
        return $this->container['max_range_segment'];
    }

    /**
     * Sets max_range_segment
     *
     * @param string|null $max_range_segment Maximum number of range segments in HTTP range line.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setMaxRangeSegment($max_range_segment)
    {
        $allowedValues = $this->getMaxRangeSegmentAllowableValues();
        if (!is_null($max_range_segment) && !in_array($max_range_segment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'max_range_segment', must be one of '%s'",
                    $max_range_segment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['max_range_segment'] = $max_range_segment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


