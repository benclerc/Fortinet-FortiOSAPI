<?php
/**
 * InlineObject458
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject458 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject458 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_458';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'ca' => 'string',
        'range' => 'string',
        'source' => 'string',
        'ssl_inspection_trusted' => 'string',
        'scep_url' => 'string',
        'auto_update_days' => 'int',
        'auto_update_days_warning' => 'int',
        'source_ip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'ca' => null,
        'range' => null,
        'source' => null,
        'ssl_inspection_trusted' => null,
        'scep_url' => null,
        'auto_update_days' => null,
        'auto_update_days_warning' => null,
        'source_ip' => 'ipv4'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ca' => 'ca',
        'range' => 'range',
        'source' => 'source',
        'ssl_inspection_trusted' => 'ssl-inspection-trusted',
        'scep_url' => 'scep-url',
        'auto_update_days' => 'auto-update-days',
        'auto_update_days_warning' => 'auto-update-days-warning',
        'source_ip' => 'source-ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ca' => 'setCa',
        'range' => 'setRange',
        'source' => 'setSource',
        'ssl_inspection_trusted' => 'setSslInspectionTrusted',
        'scep_url' => 'setScepUrl',
        'auto_update_days' => 'setAutoUpdateDays',
        'auto_update_days_warning' => 'setAutoUpdateDaysWarning',
        'source_ip' => 'setSourceIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ca' => 'getCa',
        'range' => 'getRange',
        'source' => 'getSource',
        'ssl_inspection_trusted' => 'getSslInspectionTrusted',
        'scep_url' => 'getScepUrl',
        'auto_update_days' => 'getAutoUpdateDays',
        'auto_update_days_warning' => 'getAutoUpdateDaysWarning',
        'source_ip' => 'getSourceIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RANGE__GLOBAL = 'global';
    const RANGE_VDOM = 'vdom';
    const SOURCE_FACTORY = 'factory';
    const SOURCE_USER = 'user';
    const SOURCE_BUNDLE = 'bundle';
    const SSL_INSPECTION_TRUSTED_ENABLE = 'enable';
    const SSL_INSPECTION_TRUSTED_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRangeAllowableValues()
    {
        return [
            self::RANGE__GLOBAL,
            self::RANGE_VDOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_FACTORY,
            self::SOURCE_USER,
            self::SOURCE_BUNDLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslInspectionTrustedAllowableValues()
    {
        return [
            self::SSL_INSPECTION_TRUSTED_ENABLE,
            self::SSL_INSPECTION_TRUSTED_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ca'] = $data['ca'] ?? null;
        $this->container['range'] = $data['range'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['ssl_inspection_trusted'] = $data['ssl_inspection_trusted'] ?? null;
        $this->container['scep_url'] = $data['scep_url'] ?? null;
        $this->container['auto_update_days'] = $data['auto_update_days'] ?? null;
        $this->container['auto_update_days_warning'] = $data['auto_update_days_warning'] ?? null;
        $this->container['source_ip'] = $data['source_ip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 79)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getRangeAllowableValues();
        if (!is_null($this->container['range']) && !in_array($this->container['range'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'range', must be one of '%s'",
                $this->container['range'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslInspectionTrustedAllowableValues();
        if (!is_null($this->container['ssl_inspection_trusted']) && !in_array($this->container['ssl_inspection_trusted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_inspection_trusted', must be one of '%s'",
                $this->container['ssl_inspection_trusted'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['scep_url']) && (mb_strlen($this->container['scep_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'scep_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['auto_update_days']) && ($this->container['auto_update_days'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_update_days', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_update_days']) && ($this->container['auto_update_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_update_days', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_update_days_warning']) && ($this->container['auto_update_days_warning'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'auto_update_days_warning', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['auto_update_days_warning']) && ($this->container['auto_update_days_warning'] < 0)) {
            $invalidProperties[] = "invalid value for 'auto_update_days_warning', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject458., must be smaller than or equal to 79.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ca
     *
     * @return string|null
     */
    public function getCa()
    {
        return $this->container['ca'];
    }

    /**
     * Sets ca
     *
     * @param string|null $ca CA certificate as a PEM file.
     *
     * @return self
     */
    public function setCa($ca)
    {
        $this->container['ca'] = $ca;

        return $this;
    }

    /**
     * Gets range
     *
     * @return string|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param string|null $range Either global or VDOM IP address range for the CA certificate.    global:Global range.    vdom:VDOM IP address range.
     *
     * @return self
     */
    public function setRange($range)
    {
        $allowedValues = $this->getRangeAllowableValues();
        if (!is_null($range) && !in_array($range, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'range', must be one of '%s'",
                    $range,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source CA certificate source type.    factory:Factory installed certificate.    user:User generated certificate.    bundle:Bundle file certificate.
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets ssl_inspection_trusted
     *
     * @return string|null
     */
    public function getSslInspectionTrusted()
    {
        return $this->container['ssl_inspection_trusted'];
    }

    /**
     * Sets ssl_inspection_trusted
     *
     * @param string|null $ssl_inspection_trusted Enable/disable this CA as a trusted CA for SSL inspection.    enable:Trusted CA for SSL inspection.    disable:Untrusted CA for SSL inspection.
     *
     * @return self
     */
    public function setSslInspectionTrusted($ssl_inspection_trusted)
    {
        $allowedValues = $this->getSslInspectionTrustedAllowableValues();
        if (!is_null($ssl_inspection_trusted) && !in_array($ssl_inspection_trusted, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_inspection_trusted', must be one of '%s'",
                    $ssl_inspection_trusted,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_inspection_trusted'] = $ssl_inspection_trusted;

        return $this;
    }

    /**
     * Gets scep_url
     *
     * @return string|null
     */
    public function getScepUrl()
    {
        return $this->container['scep_url'];
    }

    /**
     * Sets scep_url
     *
     * @param string|null $scep_url URL of the SCEP server.
     *
     * @return self
     */
    public function setScepUrl($scep_url)
    {
        if (!is_null($scep_url) && (mb_strlen($scep_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $scep_url when calling InlineObject458., must be smaller than or equal to 255.');
        }

        $this->container['scep_url'] = $scep_url;

        return $this;
    }

    /**
     * Gets auto_update_days
     *
     * @return int|null
     */
    public function getAutoUpdateDays()
    {
        return $this->container['auto_update_days'];
    }

    /**
     * Sets auto_update_days
     *
     * @param int|null $auto_update_days Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
     *
     * @return self
     */
    public function setAutoUpdateDays($auto_update_days)
    {

        if (!is_null($auto_update_days) && ($auto_update_days > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_update_days when calling InlineObject458., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_update_days) && ($auto_update_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_update_days when calling InlineObject458., must be bigger than or equal to 0.');
        }

        $this->container['auto_update_days'] = $auto_update_days;

        return $this;
    }

    /**
     * Gets auto_update_days_warning
     *
     * @return int|null
     */
    public function getAutoUpdateDaysWarning()
    {
        return $this->container['auto_update_days_warning'];
    }

    /**
     * Sets auto_update_days_warning
     *
     * @param int|null $auto_update_days_warning Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
     *
     * @return self
     */
    public function setAutoUpdateDaysWarning($auto_update_days_warning)
    {

        if (!is_null($auto_update_days_warning) && ($auto_update_days_warning > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $auto_update_days_warning when calling InlineObject458., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($auto_update_days_warning) && ($auto_update_days_warning < 0)) {
            throw new \InvalidArgumentException('invalid value for $auto_update_days_warning when calling InlineObject458., must be bigger than or equal to 0.');
        }

        $this->container['auto_update_days_warning'] = $auto_update_days_warning;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string|null
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string|null $source_ip Source IP address for communications to the SCEP server.
     *
     * @return self
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


