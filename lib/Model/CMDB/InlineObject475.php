<?php
/**
 * InlineObject475
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject475 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject475 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_475';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'interface' => 'string',
        'ip_version' => 'string',
        'addr_type' => 'string',
        'remote_gw' => 'string',
        'remote_gw6' => 'string',
        'local_gw' => 'string',
        'local_gw6' => 'string',
        'auth_alg' => 'string',
        'enc_alg' => 'string',
        'auth_key' => 'string',
        'enc_key' => 'string',
        'local_spi' => 'string',
        'remote_spi' => 'string',
        'npu_offload' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'interface' => null,
        'ip_version' => null,
        'addr_type' => null,
        'remote_gw' => 'ipv4',
        'remote_gw6' => 'ipv6',
        'local_gw' => 'ipv4',
        'local_gw6' => 'ipv6',
        'auth_alg' => null,
        'enc_alg' => null,
        'auth_key' => null,
        'enc_key' => null,
        'local_spi' => null,
        'remote_spi' => null,
        'npu_offload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'interface' => 'interface',
        'ip_version' => 'ip-version',
        'addr_type' => 'addr-type',
        'remote_gw' => 'remote-gw',
        'remote_gw6' => 'remote-gw6',
        'local_gw' => 'local-gw',
        'local_gw6' => 'local-gw6',
        'auth_alg' => 'auth-alg',
        'enc_alg' => 'enc-alg',
        'auth_key' => 'auth-key',
        'enc_key' => 'enc-key',
        'local_spi' => 'local-spi',
        'remote_spi' => 'remote-spi',
        'npu_offload' => 'npu-offload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'interface' => 'setInterface',
        'ip_version' => 'setIpVersion',
        'addr_type' => 'setAddrType',
        'remote_gw' => 'setRemoteGw',
        'remote_gw6' => 'setRemoteGw6',
        'local_gw' => 'setLocalGw',
        'local_gw6' => 'setLocalGw6',
        'auth_alg' => 'setAuthAlg',
        'enc_alg' => 'setEncAlg',
        'auth_key' => 'setAuthKey',
        'enc_key' => 'setEncKey',
        'local_spi' => 'setLocalSpi',
        'remote_spi' => 'setRemoteSpi',
        'npu_offload' => 'setNpuOffload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'interface' => 'getInterface',
        'ip_version' => 'getIpVersion',
        'addr_type' => 'getAddrType',
        'remote_gw' => 'getRemoteGw',
        'remote_gw6' => 'getRemoteGw6',
        'local_gw' => 'getLocalGw',
        'local_gw6' => 'getLocalGw6',
        'auth_alg' => 'getAuthAlg',
        'enc_alg' => 'getEncAlg',
        'auth_key' => 'getAuthKey',
        'enc_key' => 'getEncKey',
        'local_spi' => 'getLocalSpi',
        'remote_spi' => 'getRemoteSpi',
        'npu_offload' => 'getNpuOffload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IP_VERSION__4 = '4';
    const IP_VERSION__6 = '6';
    const ADDR_TYPE__4 = '4';
    const ADDR_TYPE__6 = '6';
    const AUTH_ALG_NULL = 'null';
    const AUTH_ALG_MD5 = 'md5';
    const AUTH_ALG_SHA1 = 'sha1';
    const AUTH_ALG_SHA256 = 'sha256';
    const AUTH_ALG_SHA384 = 'sha384';
    const AUTH_ALG_SHA512 = 'sha512';
    const ENC_ALG_NULL = 'null';
    const ENC_ALG_DES = 'des';
    const ENC_ALG__3DES = '3des';
    const ENC_ALG_AES128 = 'aes128';
    const ENC_ALG_AES192 = 'aes192';
    const ENC_ALG_AES256 = 'aes256';
    const ENC_ALG_ARIA128 = 'aria128';
    const ENC_ALG_ARIA192 = 'aria192';
    const ENC_ALG_ARIA256 = 'aria256';
    const ENC_ALG_SEED = 'seed';
    const NPU_OFFLOAD_ENABLE = 'enable';
    const NPU_OFFLOAD_DISABLE = 'disable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpVersionAllowableValues()
    {
        return [
            self::IP_VERSION__4,
            self::IP_VERSION__6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrTypeAllowableValues()
    {
        return [
            self::ADDR_TYPE__4,
            self::ADDR_TYPE__6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthAlgAllowableValues()
    {
        return [
            self::AUTH_ALG_NULL,
            self::AUTH_ALG_MD5,
            self::AUTH_ALG_SHA1,
            self::AUTH_ALG_SHA256,
            self::AUTH_ALG_SHA384,
            self::AUTH_ALG_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncAlgAllowableValues()
    {
        return [
            self::ENC_ALG_NULL,
            self::ENC_ALG_DES,
            self::ENC_ALG__3DES,
            self::ENC_ALG_AES128,
            self::ENC_ALG_AES192,
            self::ENC_ALG_AES256,
            self::ENC_ALG_ARIA128,
            self::ENC_ALG_ARIA192,
            self::ENC_ALG_ARIA256,
            self::ENC_ALG_SEED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNpuOffloadAllowableValues()
    {
        return [
            self::NPU_OFFLOAD_ENABLE,
            self::NPU_OFFLOAD_DISABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['interface'] = $data['interface'] ?? null;
        $this->container['ip_version'] = $data['ip_version'] ?? null;
        $this->container['addr_type'] = $data['addr_type'] ?? null;
        $this->container['remote_gw'] = $data['remote_gw'] ?? null;
        $this->container['remote_gw6'] = $data['remote_gw6'] ?? null;
        $this->container['local_gw'] = $data['local_gw'] ?? null;
        $this->container['local_gw6'] = $data['local_gw6'] ?? null;
        $this->container['auth_alg'] = $data['auth_alg'] ?? null;
        $this->container['enc_alg'] = $data['enc_alg'] ?? null;
        $this->container['auth_key'] = $data['auth_key'] ?? null;
        $this->container['enc_key'] = $data['enc_key'] ?? null;
        $this->container['local_spi'] = $data['local_spi'] ?? null;
        $this->container['remote_spi'] = $data['remote_spi'] ?? null;
        $this->container['npu_offload'] = $data['npu_offload'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 15)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['interface']) && (mb_strlen($this->container['interface']) > 15)) {
            $invalidProperties[] = "invalid value for 'interface', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($this->container['ip_version']) && !in_array($this->container['ip_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ip_version', must be one of '%s'",
                $this->container['ip_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($this->container['addr_type']) && !in_array($this->container['addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_type', must be one of '%s'",
                $this->container['addr_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthAlgAllowableValues();
        if (!is_null($this->container['auth_alg']) && !in_array($this->container['auth_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_alg', must be one of '%s'",
                $this->container['auth_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncAlgAllowableValues();
        if (!is_null($this->container['enc_alg']) && !in_array($this->container['enc_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enc_alg', must be one of '%s'",
                $this->container['enc_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($this->container['npu_offload']) && !in_array($this->container['npu_offload'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'npu_offload', must be one of '%s'",
                $this->container['npu_offload'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IPsec tunnel name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject475., must be smaller than or equal to 15.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Name of the physical, aggregate, or VLAN interface.
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (!is_null($interface) && (mb_strlen($interface) > 15)) {
            throw new \InvalidArgumentException('invalid length for $interface when calling InlineObject475., must be smaller than or equal to 15.');
        }

        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets ip_version
     *
     * @return string|null
     */
    public function getIpVersion()
    {
        return $this->container['ip_version'];
    }

    /**
     * Sets ip_version
     *
     * @param string|null $ip_version IP version to use for VPN interface.    4:Use IPv4 addressing for gateways.    6:Use IPv6 addressing for gateways.
     *
     * @return self
     */
    public function setIpVersion($ip_version)
    {
        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($ip_version) && !in_array($ip_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ip_version', must be one of '%s'",
                    $ip_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_version'] = $ip_version;

        return $this;
    }

    /**
     * Gets addr_type
     *
     * @return string|null
     */
    public function getAddrType()
    {
        return $this->container['addr_type'];
    }

    /**
     * Sets addr_type
     *
     * @param string|null $addr_type IP version to use for IP packets.    4:Use IPv4 addressing for IP packets.    6:Use IPv6 addressing for IP packets.
     *
     * @return self
     */
    public function setAddrType($addr_type)
    {
        $allowedValues = $this->getAddrTypeAllowableValues();
        if (!is_null($addr_type) && !in_array($addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_type', must be one of '%s'",
                    $addr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_type'] = $addr_type;

        return $this;
    }

    /**
     * Gets remote_gw
     *
     * @return string|null
     */
    public function getRemoteGw()
    {
        return $this->container['remote_gw'];
    }

    /**
     * Sets remote_gw
     *
     * @param string|null $remote_gw IPv4 address of the remote gateway's external interface.
     *
     * @return self
     */
    public function setRemoteGw($remote_gw)
    {
        $this->container['remote_gw'] = $remote_gw;

        return $this;
    }

    /**
     * Gets remote_gw6
     *
     * @return string|null
     */
    public function getRemoteGw6()
    {
        return $this->container['remote_gw6'];
    }

    /**
     * Sets remote_gw6
     *
     * @param string|null $remote_gw6 Remote IPv6 address of VPN gateway.
     *
     * @return self
     */
    public function setRemoteGw6($remote_gw6)
    {
        $this->container['remote_gw6'] = $remote_gw6;

        return $this;
    }

    /**
     * Gets local_gw
     *
     * @return string|null
     */
    public function getLocalGw()
    {
        return $this->container['local_gw'];
    }

    /**
     * Sets local_gw
     *
     * @param string|null $local_gw IPv4 address of the local gateway's external interface.
     *
     * @return self
     */
    public function setLocalGw($local_gw)
    {
        $this->container['local_gw'] = $local_gw;

        return $this;
    }

    /**
     * Gets local_gw6
     *
     * @return string|null
     */
    public function getLocalGw6()
    {
        return $this->container['local_gw6'];
    }

    /**
     * Sets local_gw6
     *
     * @param string|null $local_gw6 Local IPv6 address of VPN gateway.
     *
     * @return self
     */
    public function setLocalGw6($local_gw6)
    {
        $this->container['local_gw6'] = $local_gw6;

        return $this;
    }

    /**
     * Gets auth_alg
     *
     * @return string|null
     */
    public function getAuthAlg()
    {
        return $this->container['auth_alg'];
    }

    /**
     * Sets auth_alg
     *
     * @param string|null $auth_alg Authentication algorithm. Must be the same for both ends of the tunnel.    null:null    md5:md5    sha1:sha1    sha256:sha256    sha384:sha384    sha512:sha512
     *
     * @return self
     */
    public function setAuthAlg($auth_alg)
    {
        $allowedValues = $this->getAuthAlgAllowableValues();
        if (!is_null($auth_alg) && !in_array($auth_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_alg', must be one of '%s'",
                    $auth_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_alg'] = $auth_alg;

        return $this;
    }

    /**
     * Gets enc_alg
     *
     * @return string|null
     */
    public function getEncAlg()
    {
        return $this->container['enc_alg'];
    }

    /**
     * Sets enc_alg
     *
     * @param string|null $enc_alg Encryption algorithm. Must be the same for both ends of the tunnel.    null:null    des:des    3des:3des    aes128:aes128    aes192:aes192    aes256:aes256    aria128:aria128    aria192:aria192    aria256:aria256    seed:seed
     *
     * @return self
     */
    public function setEncAlg($enc_alg)
    {
        $allowedValues = $this->getEncAlgAllowableValues();
        if (!is_null($enc_alg) && !in_array($enc_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enc_alg', must be one of '%s'",
                    $enc_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enc_alg'] = $enc_alg;

        return $this;
    }

    /**
     * Gets auth_key
     *
     * @return string|null
     */
    public function getAuthKey()
    {
        return $this->container['auth_key'];
    }

    /**
     * Sets auth_key
     *
     * @param string|null $auth_key Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
     *
     * @return self
     */
    public function setAuthKey($auth_key)
    {
        $this->container['auth_key'] = $auth_key;

        return $this;
    }

    /**
     * Gets enc_key
     *
     * @return string|null
     */
    public function getEncKey()
    {
        return $this->container['enc_key'];
    }

    /**
     * Sets enc_key
     *
     * @param string|null $enc_key Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
     *
     * @return self
     */
    public function setEncKey($enc_key)
    {
        $this->container['enc_key'] = $enc_key;

        return $this;
    }

    /**
     * Gets local_spi
     *
     * @return string|null
     */
    public function getLocalSpi()
    {
        return $this->container['local_spi'];
    }

    /**
     * Sets local_spi
     *
     * @param string|null $local_spi Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     *
     * @return self
     */
    public function setLocalSpi($local_spi)
    {
        $this->container['local_spi'] = $local_spi;

        return $this;
    }

    /**
     * Gets remote_spi
     *
     * @return string|null
     */
    public function getRemoteSpi()
    {
        return $this->container['remote_spi'];
    }

    /**
     * Sets remote_spi
     *
     * @param string|null $remote_spi Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     *
     * @return self
     */
    public function setRemoteSpi($remote_spi)
    {
        $this->container['remote_spi'] = $remote_spi;

        return $this;
    }

    /**
     * Gets npu_offload
     *
     * @return string|null
     */
    public function getNpuOffload()
    {
        return $this->container['npu_offload'];
    }

    /**
     * Sets npu_offload
     *
     * @param string|null $npu_offload Enable/disable offloading IPsec VPN manual key sessions to NPUs.    enable:Enable NPU offloading.    disable:Disable NPU offloading.
     *
     * @return self
     */
    public function setNpuOffload($npu_offload)
    {
        $allowedValues = $this->getNpuOffloadAllowableValues();
        if (!is_null($npu_offload) && !in_array($npu_offload, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'npu_offload', must be one of '%s'",
                    $npu_offload,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['npu_offload'] = $npu_offload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


