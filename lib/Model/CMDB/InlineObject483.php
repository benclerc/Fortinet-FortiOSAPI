<?php
/**
 * InlineObject483
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * InlineObject483 Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject483 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_483';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'phase1name' => 'string',
        'dhcp_ipsec' => 'string',
        'proposal' => 'string',
        'pfs' => 'string',
        'ipv4_df' => 'string',
        'dhgrp' => 'string',
        'replay' => 'string',
        'keepalive' => 'string',
        'auto_negotiate' => 'string',
        'add_route' => 'string',
        'auto_discovery_sender' => 'string',
        'auto_discovery_forwarder' => 'string',
        'keylifeseconds' => 'int',
        'keylifekbs' => 'int',
        'keylife_type' => 'string',
        'single_source' => 'string',
        'route_overlap' => 'string',
        'encapsulation' => 'string',
        'l2tp' => 'string',
        'comments' => 'string',
        'initiator_ts_narrow' => 'string',
        'diffserv' => 'string',
        'diffservcode' => 'string',
        'protocol' => 'int',
        'src_name' => 'string',
        'src_name6' => 'string',
        'src_addr_type' => 'string',
        'src_start_ip' => 'string',
        'src_start_ip6' => 'string',
        'src_end_ip' => 'string',
        'src_end_ip6' => 'string',
        'src_subnet' => 'string',
        'src_subnet6' => 'string',
        'src_port' => 'int',
        'dst_name' => 'string',
        'dst_name6' => 'string',
        'dst_addr_type' => 'string',
        'dst_start_ip' => 'string',
        'dst_start_ip6' => 'string',
        'dst_end_ip' => 'string',
        'dst_end_ip6' => 'string',
        'dst_subnet' => 'string',
        'dst_subnet6' => 'string',
        'dst_port' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'phase1name' => null,
        'dhcp_ipsec' => null,
        'proposal' => null,
        'pfs' => null,
        'ipv4_df' => null,
        'dhgrp' => null,
        'replay' => null,
        'keepalive' => null,
        'auto_negotiate' => null,
        'add_route' => null,
        'auto_discovery_sender' => null,
        'auto_discovery_forwarder' => null,
        'keylifeseconds' => null,
        'keylifekbs' => null,
        'keylife_type' => null,
        'single_source' => null,
        'route_overlap' => null,
        'encapsulation' => null,
        'l2tp' => null,
        'comments' => null,
        'initiator_ts_narrow' => null,
        'diffserv' => null,
        'diffservcode' => null,
        'protocol' => null,
        'src_name' => null,
        'src_name6' => null,
        'src_addr_type' => null,
        'src_start_ip' => 'ipv4',
        'src_start_ip6' => 'ipv6',
        'src_end_ip' => 'ipv4',
        'src_end_ip6' => 'ipv6',
        'src_subnet' => 'ipv4',
        'src_subnet6' => 'ipv6',
        'src_port' => null,
        'dst_name' => null,
        'dst_name6' => null,
        'dst_addr_type' => null,
        'dst_start_ip' => 'ipv4',
        'dst_start_ip6' => 'ipv6',
        'dst_end_ip' => 'ipv4',
        'dst_end_ip6' => 'ipv6',
        'dst_subnet' => 'ipv4',
        'dst_subnet6' => 'ipv6',
        'dst_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'phase1name' => 'phase1name',
        'dhcp_ipsec' => 'dhcp-ipsec',
        'proposal' => 'proposal',
        'pfs' => 'pfs',
        'ipv4_df' => 'ipv4-df',
        'dhgrp' => 'dhgrp',
        'replay' => 'replay',
        'keepalive' => 'keepalive',
        'auto_negotiate' => 'auto-negotiate',
        'add_route' => 'add-route',
        'auto_discovery_sender' => 'auto-discovery-sender',
        'auto_discovery_forwarder' => 'auto-discovery-forwarder',
        'keylifeseconds' => 'keylifeseconds',
        'keylifekbs' => 'keylifekbs',
        'keylife_type' => 'keylife-type',
        'single_source' => 'single-source',
        'route_overlap' => 'route-overlap',
        'encapsulation' => 'encapsulation',
        'l2tp' => 'l2tp',
        'comments' => 'comments',
        'initiator_ts_narrow' => 'initiator-ts-narrow',
        'diffserv' => 'diffserv',
        'diffservcode' => 'diffservcode',
        'protocol' => 'protocol',
        'src_name' => 'src-name',
        'src_name6' => 'src-name6',
        'src_addr_type' => 'src-addr-type',
        'src_start_ip' => 'src-start-ip',
        'src_start_ip6' => 'src-start-ip6',
        'src_end_ip' => 'src-end-ip',
        'src_end_ip6' => 'src-end-ip6',
        'src_subnet' => 'src-subnet',
        'src_subnet6' => 'src-subnet6',
        'src_port' => 'src-port',
        'dst_name' => 'dst-name',
        'dst_name6' => 'dst-name6',
        'dst_addr_type' => 'dst-addr-type',
        'dst_start_ip' => 'dst-start-ip',
        'dst_start_ip6' => 'dst-start-ip6',
        'dst_end_ip' => 'dst-end-ip',
        'dst_end_ip6' => 'dst-end-ip6',
        'dst_subnet' => 'dst-subnet',
        'dst_subnet6' => 'dst-subnet6',
        'dst_port' => 'dst-port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'phase1name' => 'setPhase1name',
        'dhcp_ipsec' => 'setDhcpIpsec',
        'proposal' => 'setProposal',
        'pfs' => 'setPfs',
        'ipv4_df' => 'setIpv4Df',
        'dhgrp' => 'setDhgrp',
        'replay' => 'setReplay',
        'keepalive' => 'setKeepalive',
        'auto_negotiate' => 'setAutoNegotiate',
        'add_route' => 'setAddRoute',
        'auto_discovery_sender' => 'setAutoDiscoverySender',
        'auto_discovery_forwarder' => 'setAutoDiscoveryForwarder',
        'keylifeseconds' => 'setKeylifeseconds',
        'keylifekbs' => 'setKeylifekbs',
        'keylife_type' => 'setKeylifeType',
        'single_source' => 'setSingleSource',
        'route_overlap' => 'setRouteOverlap',
        'encapsulation' => 'setEncapsulation',
        'l2tp' => 'setL2tp',
        'comments' => 'setComments',
        'initiator_ts_narrow' => 'setInitiatorTsNarrow',
        'diffserv' => 'setDiffserv',
        'diffservcode' => 'setDiffservcode',
        'protocol' => 'setProtocol',
        'src_name' => 'setSrcName',
        'src_name6' => 'setSrcName6',
        'src_addr_type' => 'setSrcAddrType',
        'src_start_ip' => 'setSrcStartIp',
        'src_start_ip6' => 'setSrcStartIp6',
        'src_end_ip' => 'setSrcEndIp',
        'src_end_ip6' => 'setSrcEndIp6',
        'src_subnet' => 'setSrcSubnet',
        'src_subnet6' => 'setSrcSubnet6',
        'src_port' => 'setSrcPort',
        'dst_name' => 'setDstName',
        'dst_name6' => 'setDstName6',
        'dst_addr_type' => 'setDstAddrType',
        'dst_start_ip' => 'setDstStartIp',
        'dst_start_ip6' => 'setDstStartIp6',
        'dst_end_ip' => 'setDstEndIp',
        'dst_end_ip6' => 'setDstEndIp6',
        'dst_subnet' => 'setDstSubnet',
        'dst_subnet6' => 'setDstSubnet6',
        'dst_port' => 'setDstPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'phase1name' => 'getPhase1name',
        'dhcp_ipsec' => 'getDhcpIpsec',
        'proposal' => 'getProposal',
        'pfs' => 'getPfs',
        'ipv4_df' => 'getIpv4Df',
        'dhgrp' => 'getDhgrp',
        'replay' => 'getReplay',
        'keepalive' => 'getKeepalive',
        'auto_negotiate' => 'getAutoNegotiate',
        'add_route' => 'getAddRoute',
        'auto_discovery_sender' => 'getAutoDiscoverySender',
        'auto_discovery_forwarder' => 'getAutoDiscoveryForwarder',
        'keylifeseconds' => 'getKeylifeseconds',
        'keylifekbs' => 'getKeylifekbs',
        'keylife_type' => 'getKeylifeType',
        'single_source' => 'getSingleSource',
        'route_overlap' => 'getRouteOverlap',
        'encapsulation' => 'getEncapsulation',
        'l2tp' => 'getL2tp',
        'comments' => 'getComments',
        'initiator_ts_narrow' => 'getInitiatorTsNarrow',
        'diffserv' => 'getDiffserv',
        'diffservcode' => 'getDiffservcode',
        'protocol' => 'getProtocol',
        'src_name' => 'getSrcName',
        'src_name6' => 'getSrcName6',
        'src_addr_type' => 'getSrcAddrType',
        'src_start_ip' => 'getSrcStartIp',
        'src_start_ip6' => 'getSrcStartIp6',
        'src_end_ip' => 'getSrcEndIp',
        'src_end_ip6' => 'getSrcEndIp6',
        'src_subnet' => 'getSrcSubnet',
        'src_subnet6' => 'getSrcSubnet6',
        'src_port' => 'getSrcPort',
        'dst_name' => 'getDstName',
        'dst_name6' => 'getDstName6',
        'dst_addr_type' => 'getDstAddrType',
        'dst_start_ip' => 'getDstStartIp',
        'dst_start_ip6' => 'getDstStartIp6',
        'dst_end_ip' => 'getDstEndIp',
        'dst_end_ip6' => 'getDstEndIp6',
        'dst_subnet' => 'getDstSubnet',
        'dst_subnet6' => 'getDstSubnet6',
        'dst_port' => 'getDstPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DHCP_IPSEC_ENABLE = 'enable';
    const DHCP_IPSEC_DISABLE = 'disable';
    const PROPOSAL_NULL_MD5 = 'null-md5';
    const PROPOSAL_NULL_SHA1 = 'null-sha1';
    const PROPOSAL_NULL_SHA256 = 'null-sha256';
    const PROPOSAL_NULL_SHA384 = 'null-sha384';
    const PROPOSAL_NULL_SHA512 = 'null-sha512';
    const PROPOSAL_DES_NULL = 'des-null';
    const PROPOSAL_DES_MD5 = 'des-md5';
    const PROPOSAL_DES_SHA1 = 'des-sha1';
    const PROPOSAL_DES_SHA256 = 'des-sha256';
    const PROPOSAL_DES_SHA384 = 'des-sha384';
    const PROPOSAL_DES_SHA512 = 'des-sha512';
    const PROPOSAL__3DES_NULL = '3des-null';
    const PROPOSAL__3DES_MD5 = '3des-md5';
    const PROPOSAL__3DES_SHA1 = '3des-sha1';
    const PROPOSAL__3DES_SHA256 = '3des-sha256';
    const PROPOSAL__3DES_SHA384 = '3des-sha384';
    const PROPOSAL__3DES_SHA512 = '3des-sha512';
    const PROPOSAL_AES128_NULL = 'aes128-null';
    const PROPOSAL_AES128_MD5 = 'aes128-md5';
    const PROPOSAL_AES128_SHA1 = 'aes128-sha1';
    const PROPOSAL_AES128_SHA256 = 'aes128-sha256';
    const PROPOSAL_AES128_SHA384 = 'aes128-sha384';
    const PROPOSAL_AES128_SHA512 = 'aes128-sha512';
    const PROPOSAL_AES128GCM = 'aes128gcm';
    const PROPOSAL_AES192_NULL = 'aes192-null';
    const PROPOSAL_AES192_MD5 = 'aes192-md5';
    const PROPOSAL_AES192_SHA1 = 'aes192-sha1';
    const PROPOSAL_AES192_SHA256 = 'aes192-sha256';
    const PROPOSAL_AES192_SHA384 = 'aes192-sha384';
    const PROPOSAL_AES192_SHA512 = 'aes192-sha512';
    const PROPOSAL_AES256_NULL = 'aes256-null';
    const PROPOSAL_AES256_MD5 = 'aes256-md5';
    const PROPOSAL_AES256_SHA1 = 'aes256-sha1';
    const PROPOSAL_AES256_SHA256 = 'aes256-sha256';
    const PROPOSAL_AES256_SHA384 = 'aes256-sha384';
    const PROPOSAL_AES256_SHA512 = 'aes256-sha512';
    const PROPOSAL_AES256GCM = 'aes256gcm';
    const PROPOSAL_CHACHA20POLY1305 = 'chacha20poly1305';
    const PROPOSAL_ARIA128_NULL = 'aria128-null';
    const PROPOSAL_ARIA128_MD5 = 'aria128-md5';
    const PROPOSAL_ARIA128_SHA1 = 'aria128-sha1';
    const PROPOSAL_ARIA128_SHA256 = 'aria128-sha256';
    const PROPOSAL_ARIA128_SHA384 = 'aria128-sha384';
    const PROPOSAL_ARIA128_SHA512 = 'aria128-sha512';
    const PROPOSAL_ARIA192_NULL = 'aria192-null';
    const PROPOSAL_ARIA192_MD5 = 'aria192-md5';
    const PROPOSAL_ARIA192_SHA1 = 'aria192-sha1';
    const PROPOSAL_ARIA192_SHA256 = 'aria192-sha256';
    const PROPOSAL_ARIA192_SHA384 = 'aria192-sha384';
    const PROPOSAL_ARIA192_SHA512 = 'aria192-sha512';
    const PROPOSAL_ARIA256_NULL = 'aria256-null';
    const PROPOSAL_ARIA256_MD5 = 'aria256-md5';
    const PROPOSAL_ARIA256_SHA1 = 'aria256-sha1';
    const PROPOSAL_ARIA256_SHA256 = 'aria256-sha256';
    const PROPOSAL_ARIA256_SHA384 = 'aria256-sha384';
    const PROPOSAL_ARIA256_SHA512 = 'aria256-sha512';
    const PROPOSAL_SEED_NULL = 'seed-null';
    const PROPOSAL_SEED_MD5 = 'seed-md5';
    const PROPOSAL_SEED_SHA1 = 'seed-sha1';
    const PROPOSAL_SEED_SHA256 = 'seed-sha256';
    const PROPOSAL_SEED_SHA384 = 'seed-sha384';
    const PROPOSAL_SEED_SHA512 = 'seed-sha512';
    const PFS_ENABLE = 'enable';
    const PFS_DISABLE = 'disable';
    const IPV4_DF_ENABLE = 'enable';
    const IPV4_DF_DISABLE = 'disable';
    const DHGRP__1 = '1';
    const DHGRP__2 = '2';
    const DHGRP__5 = '5';
    const DHGRP__14 = '14';
    const DHGRP__15 = '15';
    const DHGRP__16 = '16';
    const DHGRP__17 = '17';
    const DHGRP__18 = '18';
    const DHGRP__19 = '19';
    const DHGRP__20 = '20';
    const DHGRP__21 = '21';
    const DHGRP__27 = '27';
    const DHGRP__28 = '28';
    const DHGRP__29 = '29';
    const DHGRP__30 = '30';
    const DHGRP__31 = '31';
    const DHGRP__32 = '32';
    const REPLAY_ENABLE = 'enable';
    const REPLAY_DISABLE = 'disable';
    const KEEPALIVE_ENABLE = 'enable';
    const KEEPALIVE_DISABLE = 'disable';
    const AUTO_NEGOTIATE_ENABLE = 'enable';
    const AUTO_NEGOTIATE_DISABLE = 'disable';
    const ADD_ROUTE_PHASE1 = 'phase1';
    const ADD_ROUTE_ENABLE = 'enable';
    const ADD_ROUTE_DISABLE = 'disable';
    const AUTO_DISCOVERY_SENDER_PHASE1 = 'phase1';
    const AUTO_DISCOVERY_SENDER_ENABLE = 'enable';
    const AUTO_DISCOVERY_SENDER_DISABLE = 'disable';
    const AUTO_DISCOVERY_FORWARDER_PHASE1 = 'phase1';
    const AUTO_DISCOVERY_FORWARDER_ENABLE = 'enable';
    const AUTO_DISCOVERY_FORWARDER_DISABLE = 'disable';
    const KEYLIFE_TYPE_SECONDS = 'seconds';
    const KEYLIFE_TYPE_KBS = 'kbs';
    const KEYLIFE_TYPE_BOTH = 'both';
    const SINGLE_SOURCE_ENABLE = 'enable';
    const SINGLE_SOURCE_DISABLE = 'disable';
    const ROUTE_OVERLAP_USE_OLD = 'use-old';
    const ROUTE_OVERLAP_USE_NEW = 'use-new';
    const ROUTE_OVERLAP_ALLOW = 'allow';
    const ENCAPSULATION_TUNNEL_MODE = 'tunnel-mode';
    const ENCAPSULATION_TRANSPORT_MODE = 'transport-mode';
    const L2TP_ENABLE = 'enable';
    const L2TP_DISABLE = 'disable';
    const INITIATOR_TS_NARROW_ENABLE = 'enable';
    const INITIATOR_TS_NARROW_DISABLE = 'disable';
    const DIFFSERV_ENABLE = 'enable';
    const DIFFSERV_DISABLE = 'disable';
    const SRC_ADDR_TYPE_SUBNET = 'subnet';
    const SRC_ADDR_TYPE_RANGE = 'range';
    const SRC_ADDR_TYPE_IP = 'ip';
    const SRC_ADDR_TYPE_NAME = 'name';
    const SRC_ADDR_TYPE_SUBNET6 = 'subnet6';
    const SRC_ADDR_TYPE_RANGE6 = 'range6';
    const SRC_ADDR_TYPE_IP6 = 'ip6';
    const SRC_ADDR_TYPE_NAME6 = 'name6';
    const DST_ADDR_TYPE_SUBNET = 'subnet';
    const DST_ADDR_TYPE_RANGE = 'range';
    const DST_ADDR_TYPE_IP = 'ip';
    const DST_ADDR_TYPE_NAME = 'name';
    const DST_ADDR_TYPE_SUBNET6 = 'subnet6';
    const DST_ADDR_TYPE_RANGE6 = 'range6';
    const DST_ADDR_TYPE_IP6 = 'ip6';
    const DST_ADDR_TYPE_NAME6 = 'name6';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpIpsecAllowableValues()
    {
        return [
            self::DHCP_IPSEC_ENABLE,
            self::DHCP_IPSEC_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalAllowableValues()
    {
        return [
            self::PROPOSAL_NULL_MD5,
            self::PROPOSAL_NULL_SHA1,
            self::PROPOSAL_NULL_SHA256,
            self::PROPOSAL_NULL_SHA384,
            self::PROPOSAL_NULL_SHA512,
            self::PROPOSAL_DES_NULL,
            self::PROPOSAL_DES_MD5,
            self::PROPOSAL_DES_SHA1,
            self::PROPOSAL_DES_SHA256,
            self::PROPOSAL_DES_SHA384,
            self::PROPOSAL_DES_SHA512,
            self::PROPOSAL__3DES_NULL,
            self::PROPOSAL__3DES_MD5,
            self::PROPOSAL__3DES_SHA1,
            self::PROPOSAL__3DES_SHA256,
            self::PROPOSAL__3DES_SHA384,
            self::PROPOSAL__3DES_SHA512,
            self::PROPOSAL_AES128_NULL,
            self::PROPOSAL_AES128_MD5,
            self::PROPOSAL_AES128_SHA1,
            self::PROPOSAL_AES128_SHA256,
            self::PROPOSAL_AES128_SHA384,
            self::PROPOSAL_AES128_SHA512,
            self::PROPOSAL_AES128GCM,
            self::PROPOSAL_AES192_NULL,
            self::PROPOSAL_AES192_MD5,
            self::PROPOSAL_AES192_SHA1,
            self::PROPOSAL_AES192_SHA256,
            self::PROPOSAL_AES192_SHA384,
            self::PROPOSAL_AES192_SHA512,
            self::PROPOSAL_AES256_NULL,
            self::PROPOSAL_AES256_MD5,
            self::PROPOSAL_AES256_SHA1,
            self::PROPOSAL_AES256_SHA256,
            self::PROPOSAL_AES256_SHA384,
            self::PROPOSAL_AES256_SHA512,
            self::PROPOSAL_AES256GCM,
            self::PROPOSAL_CHACHA20POLY1305,
            self::PROPOSAL_ARIA128_NULL,
            self::PROPOSAL_ARIA128_MD5,
            self::PROPOSAL_ARIA128_SHA1,
            self::PROPOSAL_ARIA128_SHA256,
            self::PROPOSAL_ARIA128_SHA384,
            self::PROPOSAL_ARIA128_SHA512,
            self::PROPOSAL_ARIA192_NULL,
            self::PROPOSAL_ARIA192_MD5,
            self::PROPOSAL_ARIA192_SHA1,
            self::PROPOSAL_ARIA192_SHA256,
            self::PROPOSAL_ARIA192_SHA384,
            self::PROPOSAL_ARIA192_SHA512,
            self::PROPOSAL_ARIA256_NULL,
            self::PROPOSAL_ARIA256_MD5,
            self::PROPOSAL_ARIA256_SHA1,
            self::PROPOSAL_ARIA256_SHA256,
            self::PROPOSAL_ARIA256_SHA384,
            self::PROPOSAL_ARIA256_SHA512,
            self::PROPOSAL_SEED_NULL,
            self::PROPOSAL_SEED_MD5,
            self::PROPOSAL_SEED_SHA1,
            self::PROPOSAL_SEED_SHA256,
            self::PROPOSAL_SEED_SHA384,
            self::PROPOSAL_SEED_SHA512,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPfsAllowableValues()
    {
        return [
            self::PFS_ENABLE,
            self::PFS_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpv4DfAllowableValues()
    {
        return [
            self::IPV4_DF_ENABLE,
            self::IPV4_DF_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhgrpAllowableValues()
    {
        return [
            self::DHGRP__1,
            self::DHGRP__2,
            self::DHGRP__5,
            self::DHGRP__14,
            self::DHGRP__15,
            self::DHGRP__16,
            self::DHGRP__17,
            self::DHGRP__18,
            self::DHGRP__19,
            self::DHGRP__20,
            self::DHGRP__21,
            self::DHGRP__27,
            self::DHGRP__28,
            self::DHGRP__29,
            self::DHGRP__30,
            self::DHGRP__31,
            self::DHGRP__32,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReplayAllowableValues()
    {
        return [
            self::REPLAY_ENABLE,
            self::REPLAY_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeepaliveAllowableValues()
    {
        return [
            self::KEEPALIVE_ENABLE,
            self::KEEPALIVE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoNegotiateAllowableValues()
    {
        return [
            self::AUTO_NEGOTIATE_ENABLE,
            self::AUTO_NEGOTIATE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddRouteAllowableValues()
    {
        return [
            self::ADD_ROUTE_PHASE1,
            self::ADD_ROUTE_ENABLE,
            self::ADD_ROUTE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDiscoverySenderAllowableValues()
    {
        return [
            self::AUTO_DISCOVERY_SENDER_PHASE1,
            self::AUTO_DISCOVERY_SENDER_ENABLE,
            self::AUTO_DISCOVERY_SENDER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoDiscoveryForwarderAllowableValues()
    {
        return [
            self::AUTO_DISCOVERY_FORWARDER_PHASE1,
            self::AUTO_DISCOVERY_FORWARDER_ENABLE,
            self::AUTO_DISCOVERY_FORWARDER_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeylifeTypeAllowableValues()
    {
        return [
            self::KEYLIFE_TYPE_SECONDS,
            self::KEYLIFE_TYPE_KBS,
            self::KEYLIFE_TYPE_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSingleSourceAllowableValues()
    {
        return [
            self::SINGLE_SOURCE_ENABLE,
            self::SINGLE_SOURCE_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteOverlapAllowableValues()
    {
        return [
            self::ROUTE_OVERLAP_USE_OLD,
            self::ROUTE_OVERLAP_USE_NEW,
            self::ROUTE_OVERLAP_ALLOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncapsulationAllowableValues()
    {
        return [
            self::ENCAPSULATION_TUNNEL_MODE,
            self::ENCAPSULATION_TRANSPORT_MODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getL2tpAllowableValues()
    {
        return [
            self::L2TP_ENABLE,
            self::L2TP_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInitiatorTsNarrowAllowableValues()
    {
        return [
            self::INITIATOR_TS_NARROW_ENABLE,
            self::INITIATOR_TS_NARROW_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiffservAllowableValues()
    {
        return [
            self::DIFFSERV_ENABLE,
            self::DIFFSERV_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSrcAddrTypeAllowableValues()
    {
        return [
            self::SRC_ADDR_TYPE_SUBNET,
            self::SRC_ADDR_TYPE_RANGE,
            self::SRC_ADDR_TYPE_IP,
            self::SRC_ADDR_TYPE_NAME,
            self::SRC_ADDR_TYPE_SUBNET6,
            self::SRC_ADDR_TYPE_RANGE6,
            self::SRC_ADDR_TYPE_IP6,
            self::SRC_ADDR_TYPE_NAME6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDstAddrTypeAllowableValues()
    {
        return [
            self::DST_ADDR_TYPE_SUBNET,
            self::DST_ADDR_TYPE_RANGE,
            self::DST_ADDR_TYPE_IP,
            self::DST_ADDR_TYPE_NAME,
            self::DST_ADDR_TYPE_SUBNET6,
            self::DST_ADDR_TYPE_RANGE6,
            self::DST_ADDR_TYPE_IP6,
            self::DST_ADDR_TYPE_NAME6,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['phase1name'] = $data['phase1name'] ?? null;
        $this->container['dhcp_ipsec'] = $data['dhcp_ipsec'] ?? null;
        $this->container['proposal'] = $data['proposal'] ?? null;
        $this->container['pfs'] = $data['pfs'] ?? null;
        $this->container['ipv4_df'] = $data['ipv4_df'] ?? null;
        $this->container['dhgrp'] = $data['dhgrp'] ?? null;
        $this->container['replay'] = $data['replay'] ?? null;
        $this->container['keepalive'] = $data['keepalive'] ?? null;
        $this->container['auto_negotiate'] = $data['auto_negotiate'] ?? null;
        $this->container['add_route'] = $data['add_route'] ?? null;
        $this->container['auto_discovery_sender'] = $data['auto_discovery_sender'] ?? null;
        $this->container['auto_discovery_forwarder'] = $data['auto_discovery_forwarder'] ?? null;
        $this->container['keylifeseconds'] = $data['keylifeseconds'] ?? null;
        $this->container['keylifekbs'] = $data['keylifekbs'] ?? null;
        $this->container['keylife_type'] = $data['keylife_type'] ?? null;
        $this->container['single_source'] = $data['single_source'] ?? null;
        $this->container['route_overlap'] = $data['route_overlap'] ?? null;
        $this->container['encapsulation'] = $data['encapsulation'] ?? null;
        $this->container['l2tp'] = $data['l2tp'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['initiator_ts_narrow'] = $data['initiator_ts_narrow'] ?? null;
        $this->container['diffserv'] = $data['diffserv'] ?? null;
        $this->container['diffservcode'] = $data['diffservcode'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['src_name'] = $data['src_name'] ?? null;
        $this->container['src_name6'] = $data['src_name6'] ?? null;
        $this->container['src_addr_type'] = $data['src_addr_type'] ?? null;
        $this->container['src_start_ip'] = $data['src_start_ip'] ?? null;
        $this->container['src_start_ip6'] = $data['src_start_ip6'] ?? null;
        $this->container['src_end_ip'] = $data['src_end_ip'] ?? null;
        $this->container['src_end_ip6'] = $data['src_end_ip6'] ?? null;
        $this->container['src_subnet'] = $data['src_subnet'] ?? null;
        $this->container['src_subnet6'] = $data['src_subnet6'] ?? null;
        $this->container['src_port'] = $data['src_port'] ?? null;
        $this->container['dst_name'] = $data['dst_name'] ?? null;
        $this->container['dst_name6'] = $data['dst_name6'] ?? null;
        $this->container['dst_addr_type'] = $data['dst_addr_type'] ?? null;
        $this->container['dst_start_ip'] = $data['dst_start_ip'] ?? null;
        $this->container['dst_start_ip6'] = $data['dst_start_ip6'] ?? null;
        $this->container['dst_end_ip'] = $data['dst_end_ip'] ?? null;
        $this->container['dst_end_ip6'] = $data['dst_end_ip6'] ?? null;
        $this->container['dst_subnet'] = $data['dst_subnet'] ?? null;
        $this->container['dst_subnet6'] = $data['dst_subnet6'] ?? null;
        $this->container['dst_port'] = $data['dst_port'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['phase1name']) && (mb_strlen($this->container['phase1name']) > 15)) {
            $invalidProperties[] = "invalid value for 'phase1name', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getDhcpIpsecAllowableValues();
        if (!is_null($this->container['dhcp_ipsec']) && !in_array($this->container['dhcp_ipsec'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhcp_ipsec', must be one of '%s'",
                $this->container['dhcp_ipsec'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProposalAllowableValues();
        if (!is_null($this->container['proposal']) && !in_array($this->container['proposal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proposal', must be one of '%s'",
                $this->container['proposal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPfsAllowableValues();
        if (!is_null($this->container['pfs']) && !in_array($this->container['pfs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pfs', must be one of '%s'",
                $this->container['pfs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpv4DfAllowableValues();
        if (!is_null($this->container['ipv4_df']) && !in_array($this->container['ipv4_df'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipv4_df', must be one of '%s'",
                $this->container['ipv4_df'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhgrpAllowableValues();
        if (!is_null($this->container['dhgrp']) && !in_array($this->container['dhgrp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dhgrp', must be one of '%s'",
                $this->container['dhgrp'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReplayAllowableValues();
        if (!is_null($this->container['replay']) && !in_array($this->container['replay'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'replay', must be one of '%s'",
                $this->container['replay'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeepaliveAllowableValues();
        if (!is_null($this->container['keepalive']) && !in_array($this->container['keepalive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keepalive', must be one of '%s'",
                $this->container['keepalive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoNegotiateAllowableValues();
        if (!is_null($this->container['auto_negotiate']) && !in_array($this->container['auto_negotiate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_negotiate', must be one of '%s'",
                $this->container['auto_negotiate'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddRouteAllowableValues();
        if (!is_null($this->container['add_route']) && !in_array($this->container['add_route'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'add_route', must be one of '%s'",
                $this->container['add_route'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoDiscoverySenderAllowableValues();
        if (!is_null($this->container['auto_discovery_sender']) && !in_array($this->container['auto_discovery_sender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_discovery_sender', must be one of '%s'",
                $this->container['auto_discovery_sender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoDiscoveryForwarderAllowableValues();
        if (!is_null($this->container['auto_discovery_forwarder']) && !in_array($this->container['auto_discovery_forwarder'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auto_discovery_forwarder', must be one of '%s'",
                $this->container['auto_discovery_forwarder'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keylifeseconds']) && ($this->container['keylifeseconds'] > 172800)) {
            $invalidProperties[] = "invalid value for 'keylifeseconds', must be smaller than or equal to 172800.";
        }

        if (!is_null($this->container['keylifeseconds']) && ($this->container['keylifeseconds'] < 120)) {
            $invalidProperties[] = "invalid value for 'keylifeseconds', must be bigger than or equal to 120.";
        }

        if (!is_null($this->container['keylifekbs']) && ($this->container['keylifekbs'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'keylifekbs', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['keylifekbs']) && ($this->container['keylifekbs'] < 5120)) {
            $invalidProperties[] = "invalid value for 'keylifekbs', must be bigger than or equal to 5120.";
        }

        $allowedValues = $this->getKeylifeTypeAllowableValues();
        if (!is_null($this->container['keylife_type']) && !in_array($this->container['keylife_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keylife_type', must be one of '%s'",
                $this->container['keylife_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSingleSourceAllowableValues();
        if (!is_null($this->container['single_source']) && !in_array($this->container['single_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'single_source', must be one of '%s'",
                $this->container['single_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRouteOverlapAllowableValues();
        if (!is_null($this->container['route_overlap']) && !in_array($this->container['route_overlap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'route_overlap', must be one of '%s'",
                $this->container['route_overlap'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncapsulationAllowableValues();
        if (!is_null($this->container['encapsulation']) && !in_array($this->container['encapsulation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encapsulation', must be one of '%s'",
                $this->container['encapsulation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getL2tpAllowableValues();
        if (!is_null($this->container['l2tp']) && !in_array($this->container['l2tp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'l2tp', must be one of '%s'",
                $this->container['l2tp'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 255)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getInitiatorTsNarrowAllowableValues();
        if (!is_null($this->container['initiator_ts_narrow']) && !in_array($this->container['initiator_ts_narrow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'initiator_ts_narrow', must be one of '%s'",
                $this->container['initiator_ts_narrow'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiffservAllowableValues();
        if (!is_null($this->container['diffserv']) && !in_array($this->container['diffserv'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'diffserv', must be one of '%s'",
                $this->container['diffserv'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] > 255)) {
            $invalidProperties[] = "invalid value for 'protocol', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['protocol']) && ($this->container['protocol'] < 0)) {
            $invalidProperties[] = "invalid value for 'protocol', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['src_name']) && (mb_strlen($this->container['src_name']) > 79)) {
            $invalidProperties[] = "invalid value for 'src_name', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['src_name6']) && (mb_strlen($this->container['src_name6']) > 79)) {
            $invalidProperties[] = "invalid value for 'src_name6', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getSrcAddrTypeAllowableValues();
        if (!is_null($this->container['src_addr_type']) && !in_array($this->container['src_addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'src_addr_type', must be one of '%s'",
                $this->container['src_addr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['src_port']) && ($this->container['src_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'src_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['src_port']) && ($this->container['src_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'src_port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dst_name']) && (mb_strlen($this->container['dst_name']) > 79)) {
            $invalidProperties[] = "invalid value for 'dst_name', the character length must be smaller than or equal to 79.";
        }

        if (!is_null($this->container['dst_name6']) && (mb_strlen($this->container['dst_name6']) > 79)) {
            $invalidProperties[] = "invalid value for 'dst_name6', the character length must be smaller than or equal to 79.";
        }

        $allowedValues = $this->getDstAddrTypeAllowableValues();
        if (!is_null($this->container['dst_addr_type']) && !in_array($this->container['dst_addr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dst_addr_type', must be one of '%s'",
                $this->container['dst_addr_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dst_port']) && ($this->container['dst_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'dst_port', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['dst_port']) && ($this->container['dst_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'dst_port', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name IPsec tunnel name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineObject483., must be smaller than or equal to 35.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phase1name
     *
     * @return string|null
     */
    public function getPhase1name()
    {
        return $this->container['phase1name'];
    }

    /**
     * Sets phase1name
     *
     * @param string|null $phase1name Phase 1 determines the options required for phase 2.
     *
     * @return self
     */
    public function setPhase1name($phase1name)
    {
        if (!is_null($phase1name) && (mb_strlen($phase1name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $phase1name when calling InlineObject483., must be smaller than or equal to 15.');
        }

        $this->container['phase1name'] = $phase1name;

        return $this;
    }

    /**
     * Gets dhcp_ipsec
     *
     * @return string|null
     */
    public function getDhcpIpsec()
    {
        return $this->container['dhcp_ipsec'];
    }

    /**
     * Sets dhcp_ipsec
     *
     * @param string|null $dhcp_ipsec Enable/disable DHCP-IPsec.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDhcpIpsec($dhcp_ipsec)
    {
        $allowedValues = $this->getDhcpIpsecAllowableValues();
        if (!is_null($dhcp_ipsec) && !in_array($dhcp_ipsec, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhcp_ipsec', must be one of '%s'",
                    $dhcp_ipsec,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_ipsec'] = $dhcp_ipsec;

        return $this;
    }

    /**
     * Gets proposal
     *
     * @return string|null
     */
    public function getProposal()
    {
        return $this->container['proposal'];
    }

    /**
     * Sets proposal
     *
     * @param string|null $proposal Phase2 proposal.    null-md5:null-md5    null-sha1:null-sha1    null-sha256:null-sha256    null-sha384:null-sha384    null-sha512:null-sha512    des-null:des-null    des-md5:des-md5    des-sha1:des-sha1    des-sha256:des-sha256    des-sha384:des-sha384    des-sha512:des-sha512    3des-null:3des-null    3des-md5:3des-md5    3des-sha1:3des-sha1    3des-sha256:3des-sha256    3des-sha384:3des-sha384    3des-sha512:3des-sha512    aes128-null:aes128-null    aes128-md5:aes128-md5    aes128-sha1:aes128-sha1    aes128-sha256:aes128-sha256    aes128-sha384:aes128-sha384    aes128-sha512:aes128-sha512    aes128gcm:aes128gcm    aes192-null:aes192-null    aes192-md5:aes192-md5    aes192-sha1:aes192-sha1    aes192-sha256:aes192-sha256    aes192-sha384:aes192-sha384    aes192-sha512:aes192-sha512    aes256-null:aes256-null    aes256-md5:aes256-md5    aes256-sha1:aes256-sha1    aes256-sha256:aes256-sha256    aes256-sha384:aes256-sha384    aes256-sha512:aes256-sha512    aes256gcm:aes256gcm    chacha20poly1305:chacha20poly1305    aria128-null:aria128-null    aria128-md5:aria128-md5    aria128-sha1:aria128-sha1    aria128-sha256:aria128-sha256    aria128-sha384:aria128-sha384    aria128-sha512:aria128-sha512    aria192-null:aria192-null    aria192-md5:aria192-md5    aria192-sha1:aria192-sha1    aria192-sha256:aria192-sha256    aria192-sha384:aria192-sha384    aria192-sha512:aria192-sha512    aria256-null:aria256-null    aria256-md5:aria256-md5    aria256-sha1:aria256-sha1    aria256-sha256:aria256-sha256    aria256-sha384:aria256-sha384    aria256-sha512:aria256-sha512    seed-null:seed-null    seed-md5:seed-md5    seed-sha1:seed-sha1    seed-sha256:seed-sha256    seed-sha384:seed-sha384    seed-sha512:seed-sha512
     *
     * @return self
     */
    public function setProposal($proposal)
    {
        $allowedValues = $this->getProposalAllowableValues();
        if (!is_null($proposal) && !in_array($proposal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proposal', must be one of '%s'",
                    $proposal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proposal'] = $proposal;

        return $this;
    }

    /**
     * Gets pfs
     *
     * @return string|null
     */
    public function getPfs()
    {
        return $this->container['pfs'];
    }

    /**
     * Sets pfs
     *
     * @param string|null $pfs Enable/disable PFS feature.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setPfs($pfs)
    {
        $allowedValues = $this->getPfsAllowableValues();
        if (!is_null($pfs) && !in_array($pfs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pfs', must be one of '%s'",
                    $pfs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pfs'] = $pfs;

        return $this;
    }

    /**
     * Gets ipv4_df
     *
     * @return string|null
     */
    public function getIpv4Df()
    {
        return $this->container['ipv4_df'];
    }

    /**
     * Sets ipv4_df
     *
     * @param string|null $ipv4_df Enable/disable setting and resetting of IPv4 'Don't Fragment' bit.    enable:Set IPv4 DF.    disable:Reset IPv4 DF.
     *
     * @return self
     */
    public function setIpv4Df($ipv4_df)
    {
        $allowedValues = $this->getIpv4DfAllowableValues();
        if (!is_null($ipv4_df) && !in_array($ipv4_df, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipv4_df', must be one of '%s'",
                    $ipv4_df,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipv4_df'] = $ipv4_df;

        return $this;
    }

    /**
     * Gets dhgrp
     *
     * @return string|null
     */
    public function getDhgrp()
    {
        return $this->container['dhgrp'];
    }

    /**
     * Sets dhgrp
     *
     * @param string|null $dhgrp Phase2 DH group.    1:DH Group 1.    2:DH Group 2.    5:DH Group 5.    14:DH Group 14.    15:DH Group 15.    16:DH Group 16.    17:DH Group 17.    18:DH Group 18.    19:DH Group 19.    20:DH Group 20.    21:DH Group 21.    27:DH Group 27.    28:DH Group 28.    29:DH Group 29.    30:DH Group 30.    31:DH Group 31.    32:DH Group 32.
     *
     * @return self
     */
    public function setDhgrp($dhgrp)
    {
        $allowedValues = $this->getDhgrpAllowableValues();
        if (!is_null($dhgrp) && !in_array($dhgrp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dhgrp', must be one of '%s'",
                    $dhgrp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhgrp'] = $dhgrp;

        return $this;
    }

    /**
     * Gets replay
     *
     * @return string|null
     */
    public function getReplay()
    {
        return $this->container['replay'];
    }

    /**
     * Sets replay
     *
     * @param string|null $replay Enable/disable replay detection.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setReplay($replay)
    {
        $allowedValues = $this->getReplayAllowableValues();
        if (!is_null($replay) && !in_array($replay, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'replay', must be one of '%s'",
                    $replay,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['replay'] = $replay;

        return $this;
    }

    /**
     * Gets keepalive
     *
     * @return string|null
     */
    public function getKeepalive()
    {
        return $this->container['keepalive'];
    }

    /**
     * Sets keepalive
     *
     * @param string|null $keepalive Enable/disable keep alive.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setKeepalive($keepalive)
    {
        $allowedValues = $this->getKeepaliveAllowableValues();
        if (!is_null($keepalive) && !in_array($keepalive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keepalive', must be one of '%s'",
                    $keepalive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keepalive'] = $keepalive;

        return $this;
    }

    /**
     * Gets auto_negotiate
     *
     * @return string|null
     */
    public function getAutoNegotiate()
    {
        return $this->container['auto_negotiate'];
    }

    /**
     * Sets auto_negotiate
     *
     * @param string|null $auto_negotiate Enable/disable IPsec SA auto-negotiation.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setAutoNegotiate($auto_negotiate)
    {
        $allowedValues = $this->getAutoNegotiateAllowableValues();
        if (!is_null($auto_negotiate) && !in_array($auto_negotiate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_negotiate', must be one of '%s'",
                    $auto_negotiate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_negotiate'] = $auto_negotiate;

        return $this;
    }

    /**
     * Gets add_route
     *
     * @return string|null
     */
    public function getAddRoute()
    {
        return $this->container['add_route'];
    }

    /**
     * Sets add_route
     *
     * @param string|null $add_route Enable/disable automatic route addition.    phase1:Add route according to phase1 add-route setting.    enable:Add route for remote proxy ID.    disable:Do not add route for remote proxy ID.
     *
     * @return self
     */
    public function setAddRoute($add_route)
    {
        $allowedValues = $this->getAddRouteAllowableValues();
        if (!is_null($add_route) && !in_array($add_route, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'add_route', must be one of '%s'",
                    $add_route,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['add_route'] = $add_route;

        return $this;
    }

    /**
     * Gets auto_discovery_sender
     *
     * @return string|null
     */
    public function getAutoDiscoverySender()
    {
        return $this->container['auto_discovery_sender'];
    }

    /**
     * Sets auto_discovery_sender
     *
     * @param string|null $auto_discovery_sender Enable/disable sending short-cut messages.    phase1:Send short-cut messages according to the phase1 auto-discovery-sender setting.    enable:Enable sending auto-discovery short-cut messages.    disable:Disable sending auto-discovery short-cut messages.
     *
     * @return self
     */
    public function setAutoDiscoverySender($auto_discovery_sender)
    {
        $allowedValues = $this->getAutoDiscoverySenderAllowableValues();
        if (!is_null($auto_discovery_sender) && !in_array($auto_discovery_sender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_discovery_sender', must be one of '%s'",
                    $auto_discovery_sender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_discovery_sender'] = $auto_discovery_sender;

        return $this;
    }

    /**
     * Gets auto_discovery_forwarder
     *
     * @return string|null
     */
    public function getAutoDiscoveryForwarder()
    {
        return $this->container['auto_discovery_forwarder'];
    }

    /**
     * Sets auto_discovery_forwarder
     *
     * @param string|null $auto_discovery_forwarder Enable/disable forwarding short-cut messages.    phase1:Forward short-cut messages according to the phase1 auto-discovery-forwarder setting.    enable:Enable forwarding auto-discovery short-cut messages.    disable:Disable forwarding auto-discovery short-cut messages.
     *
     * @return self
     */
    public function setAutoDiscoveryForwarder($auto_discovery_forwarder)
    {
        $allowedValues = $this->getAutoDiscoveryForwarderAllowableValues();
        if (!is_null($auto_discovery_forwarder) && !in_array($auto_discovery_forwarder, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auto_discovery_forwarder', must be one of '%s'",
                    $auto_discovery_forwarder,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_discovery_forwarder'] = $auto_discovery_forwarder;

        return $this;
    }

    /**
     * Gets keylifeseconds
     *
     * @return int|null
     */
    public function getKeylifeseconds()
    {
        return $this->container['keylifeseconds'];
    }

    /**
     * Sets keylifeseconds
     *
     * @param int|null $keylifeseconds Phase2 key life in time in seconds (120 - 172800).
     *
     * @return self
     */
    public function setKeylifeseconds($keylifeseconds)
    {

        if (!is_null($keylifeseconds) && ($keylifeseconds > 172800)) {
            throw new \InvalidArgumentException('invalid value for $keylifeseconds when calling InlineObject483., must be smaller than or equal to 172800.');
        }
        if (!is_null($keylifeseconds) && ($keylifeseconds < 120)) {
            throw new \InvalidArgumentException('invalid value for $keylifeseconds when calling InlineObject483., must be bigger than or equal to 120.');
        }

        $this->container['keylifeseconds'] = $keylifeseconds;

        return $this;
    }

    /**
     * Gets keylifekbs
     *
     * @return int|null
     */
    public function getKeylifekbs()
    {
        return $this->container['keylifekbs'];
    }

    /**
     * Sets keylifekbs
     *
     * @param int|null $keylifekbs Phase2 key life in number of bytes of traffic (5120 - 4294967295).
     *
     * @return self
     */
    public function setKeylifekbs($keylifekbs)
    {

        if (!is_null($keylifekbs) && ($keylifekbs > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $keylifekbs when calling InlineObject483., must be smaller than or equal to 4294967295.');
        }
        if (!is_null($keylifekbs) && ($keylifekbs < 5120)) {
            throw new \InvalidArgumentException('invalid value for $keylifekbs when calling InlineObject483., must be bigger than or equal to 5120.');
        }

        $this->container['keylifekbs'] = $keylifekbs;

        return $this;
    }

    /**
     * Gets keylife_type
     *
     * @return string|null
     */
    public function getKeylifeType()
    {
        return $this->container['keylife_type'];
    }

    /**
     * Sets keylife_type
     *
     * @param string|null $keylife_type Keylife type.    seconds:Key life in seconds.    kbs:Key life in kilobytes.    both:Key life both.
     *
     * @return self
     */
    public function setKeylifeType($keylife_type)
    {
        $allowedValues = $this->getKeylifeTypeAllowableValues();
        if (!is_null($keylife_type) && !in_array($keylife_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keylife_type', must be one of '%s'",
                    $keylife_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keylife_type'] = $keylife_type;

        return $this;
    }

    /**
     * Gets single_source
     *
     * @return string|null
     */
    public function getSingleSource()
    {
        return $this->container['single_source'];
    }

    /**
     * Sets single_source
     *
     * @param string|null $single_source Enable/disable single source IP restriction.    enable:Only single source IP will be accepted.    disable:Source IP range will be accepted.
     *
     * @return self
     */
    public function setSingleSource($single_source)
    {
        $allowedValues = $this->getSingleSourceAllowableValues();
        if (!is_null($single_source) && !in_array($single_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'single_source', must be one of '%s'",
                    $single_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['single_source'] = $single_source;

        return $this;
    }

    /**
     * Gets route_overlap
     *
     * @return string|null
     */
    public function getRouteOverlap()
    {
        return $this->container['route_overlap'];
    }

    /**
     * Sets route_overlap
     *
     * @param string|null $route_overlap Action for overlapping routes.    use-old:Use the old route and do not add the new route.    use-new:Delete the old route and add the new route.    allow:Allow overlapping routes.
     *
     * @return self
     */
    public function setRouteOverlap($route_overlap)
    {
        $allowedValues = $this->getRouteOverlapAllowableValues();
        if (!is_null($route_overlap) && !in_array($route_overlap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'route_overlap', must be one of '%s'",
                    $route_overlap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_overlap'] = $route_overlap;

        return $this;
    }

    /**
     * Gets encapsulation
     *
     * @return string|null
     */
    public function getEncapsulation()
    {
        return $this->container['encapsulation'];
    }

    /**
     * Sets encapsulation
     *
     * @param string|null $encapsulation ESP encapsulation mode.    tunnel-mode:Use tunnel mode encapsulation.    transport-mode:Use transport mode encapsulation.
     *
     * @return self
     */
    public function setEncapsulation($encapsulation)
    {
        $allowedValues = $this->getEncapsulationAllowableValues();
        if (!is_null($encapsulation) && !in_array($encapsulation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encapsulation', must be one of '%s'",
                    $encapsulation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encapsulation'] = $encapsulation;

        return $this;
    }

    /**
     * Gets l2tp
     *
     * @return string|null
     */
    public function getL2tp()
    {
        return $this->container['l2tp'];
    }

    /**
     * Sets l2tp
     *
     * @param string|null $l2tp Enable/disable L2TP over IPsec.    enable:Enable L2TP over IPsec.    disable:Disable L2TP over IPsec.
     *
     * @return self
     */
    public function setL2tp($l2tp)
    {
        $allowedValues = $this->getL2tpAllowableValues();
        if (!is_null($l2tp) && !in_array($l2tp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'l2tp', must be one of '%s'",
                    $l2tp,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['l2tp'] = $l2tp;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling InlineObject483., must be smaller than or equal to 255.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets initiator_ts_narrow
     *
     * @return string|null
     */
    public function getInitiatorTsNarrow()
    {
        return $this->container['initiator_ts_narrow'];
    }

    /**
     * Sets initiator_ts_narrow
     *
     * @param string|null $initiator_ts_narrow Enable/disable traffic selector narrowing for IKEv2 initiator.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setInitiatorTsNarrow($initiator_ts_narrow)
    {
        $allowedValues = $this->getInitiatorTsNarrowAllowableValues();
        if (!is_null($initiator_ts_narrow) && !in_array($initiator_ts_narrow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'initiator_ts_narrow', must be one of '%s'",
                    $initiator_ts_narrow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['initiator_ts_narrow'] = $initiator_ts_narrow;

        return $this;
    }

    /**
     * Gets diffserv
     *
     * @return string|null
     */
    public function getDiffserv()
    {
        return $this->container['diffserv'];
    }

    /**
     * Sets diffserv
     *
     * @param string|null $diffserv Enable/disable applying DSCP value to the IPsec tunnel outer IP header.    enable:Enable setting.    disable:Disable setting.
     *
     * @return self
     */
    public function setDiffserv($diffserv)
    {
        $allowedValues = $this->getDiffservAllowableValues();
        if (!is_null($diffserv) && !in_array($diffserv, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'diffserv', must be one of '%s'",
                    $diffserv,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['diffserv'] = $diffserv;

        return $this;
    }

    /**
     * Gets diffservcode
     *
     * @return string|null
     */
    public function getDiffservcode()
    {
        return $this->container['diffservcode'];
    }

    /**
     * Sets diffservcode
     *
     * @param string|null $diffservcode DSCP value to be applied to the IPsec tunnel outer IP header.
     *
     * @return self
     */
    public function setDiffservcode($diffservcode)
    {
        $this->container['diffservcode'] = $diffservcode;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return int|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param int|null $protocol Quick mode protocol selector (1 - 255 or 0 for all).
     *
     * @return self
     */
    public function setProtocol($protocol)
    {

        if (!is_null($protocol) && ($protocol > 255)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling InlineObject483., must be smaller than or equal to 255.');
        }
        if (!is_null($protocol) && ($protocol < 0)) {
            throw new \InvalidArgumentException('invalid value for $protocol when calling InlineObject483., must be bigger than or equal to 0.');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets src_name
     *
     * @return string|null
     */
    public function getSrcName()
    {
        return $this->container['src_name'];
    }

    /**
     * Sets src_name
     *
     * @param string|null $src_name Local proxy ID name.
     *
     * @return self
     */
    public function setSrcName($src_name)
    {
        if (!is_null($src_name) && (mb_strlen($src_name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $src_name when calling InlineObject483., must be smaller than or equal to 79.');
        }

        $this->container['src_name'] = $src_name;

        return $this;
    }

    /**
     * Gets src_name6
     *
     * @return string|null
     */
    public function getSrcName6()
    {
        return $this->container['src_name6'];
    }

    /**
     * Sets src_name6
     *
     * @param string|null $src_name6 Local proxy ID name.
     *
     * @return self
     */
    public function setSrcName6($src_name6)
    {
        if (!is_null($src_name6) && (mb_strlen($src_name6) > 79)) {
            throw new \InvalidArgumentException('invalid length for $src_name6 when calling InlineObject483., must be smaller than or equal to 79.');
        }

        $this->container['src_name6'] = $src_name6;

        return $this;
    }

    /**
     * Gets src_addr_type
     *
     * @return string|null
     */
    public function getSrcAddrType()
    {
        return $this->container['src_addr_type'];
    }

    /**
     * Sets src_addr_type
     *
     * @param string|null $src_addr_type Local proxy ID type.    subnet:IPv4 subnet.    range:IPv4 range.    ip:IPv4 IP.    name:IPv4 firewall address or group name.    subnet6:IPv6 subnet.    range6:IPv6 range.    ip6:IPv6 IP.    name6:IPv6 firewall address or group name.
     *
     * @return self
     */
    public function setSrcAddrType($src_addr_type)
    {
        $allowedValues = $this->getSrcAddrTypeAllowableValues();
        if (!is_null($src_addr_type) && !in_array($src_addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'src_addr_type', must be one of '%s'",
                    $src_addr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['src_addr_type'] = $src_addr_type;

        return $this;
    }

    /**
     * Gets src_start_ip
     *
     * @return string|null
     */
    public function getSrcStartIp()
    {
        return $this->container['src_start_ip'];
    }

    /**
     * Sets src_start_ip
     *
     * @param string|null $src_start_ip Local proxy ID start.
     *
     * @return self
     */
    public function setSrcStartIp($src_start_ip)
    {
        $this->container['src_start_ip'] = $src_start_ip;

        return $this;
    }

    /**
     * Gets src_start_ip6
     *
     * @return string|null
     */
    public function getSrcStartIp6()
    {
        return $this->container['src_start_ip6'];
    }

    /**
     * Sets src_start_ip6
     *
     * @param string|null $src_start_ip6 Local proxy ID IPv6 start.
     *
     * @return self
     */
    public function setSrcStartIp6($src_start_ip6)
    {
        $this->container['src_start_ip6'] = $src_start_ip6;

        return $this;
    }

    /**
     * Gets src_end_ip
     *
     * @return string|null
     */
    public function getSrcEndIp()
    {
        return $this->container['src_end_ip'];
    }

    /**
     * Sets src_end_ip
     *
     * @param string|null $src_end_ip Local proxy ID end.
     *
     * @return self
     */
    public function setSrcEndIp($src_end_ip)
    {
        $this->container['src_end_ip'] = $src_end_ip;

        return $this;
    }

    /**
     * Gets src_end_ip6
     *
     * @return string|null
     */
    public function getSrcEndIp6()
    {
        return $this->container['src_end_ip6'];
    }

    /**
     * Sets src_end_ip6
     *
     * @param string|null $src_end_ip6 Local proxy ID IPv6 end.
     *
     * @return self
     */
    public function setSrcEndIp6($src_end_ip6)
    {
        $this->container['src_end_ip6'] = $src_end_ip6;

        return $this;
    }

    /**
     * Gets src_subnet
     *
     * @return string|null
     */
    public function getSrcSubnet()
    {
        return $this->container['src_subnet'];
    }

    /**
     * Sets src_subnet
     *
     * @param string|null $src_subnet Local proxy ID subnet.
     *
     * @return self
     */
    public function setSrcSubnet($src_subnet)
    {
        $this->container['src_subnet'] = $src_subnet;

        return $this;
    }

    /**
     * Gets src_subnet6
     *
     * @return string|null
     */
    public function getSrcSubnet6()
    {
        return $this->container['src_subnet6'];
    }

    /**
     * Sets src_subnet6
     *
     * @param string|null $src_subnet6 Local proxy ID IPv6 subnet.
     *
     * @return self
     */
    public function setSrcSubnet6($src_subnet6)
    {
        $this->container['src_subnet6'] = $src_subnet6;

        return $this;
    }

    /**
     * Gets src_port
     *
     * @return int|null
     */
    public function getSrcPort()
    {
        return $this->container['src_port'];
    }

    /**
     * Sets src_port
     *
     * @param int|null $src_port Quick mode source port (1 - 65535 or 0 for all).
     *
     * @return self
     */
    public function setSrcPort($src_port)
    {

        if (!is_null($src_port) && ($src_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $src_port when calling InlineObject483., must be smaller than or equal to 65535.');
        }
        if (!is_null($src_port) && ($src_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $src_port when calling InlineObject483., must be bigger than or equal to 0.');
        }

        $this->container['src_port'] = $src_port;

        return $this;
    }

    /**
     * Gets dst_name
     *
     * @return string|null
     */
    public function getDstName()
    {
        return $this->container['dst_name'];
    }

    /**
     * Sets dst_name
     *
     * @param string|null $dst_name Remote proxy ID name.
     *
     * @return self
     */
    public function setDstName($dst_name)
    {
        if (!is_null($dst_name) && (mb_strlen($dst_name) > 79)) {
            throw new \InvalidArgumentException('invalid length for $dst_name when calling InlineObject483., must be smaller than or equal to 79.');
        }

        $this->container['dst_name'] = $dst_name;

        return $this;
    }

    /**
     * Gets dst_name6
     *
     * @return string|null
     */
    public function getDstName6()
    {
        return $this->container['dst_name6'];
    }

    /**
     * Sets dst_name6
     *
     * @param string|null $dst_name6 Remote proxy ID name.
     *
     * @return self
     */
    public function setDstName6($dst_name6)
    {
        if (!is_null($dst_name6) && (mb_strlen($dst_name6) > 79)) {
            throw new \InvalidArgumentException('invalid length for $dst_name6 when calling InlineObject483., must be smaller than or equal to 79.');
        }

        $this->container['dst_name6'] = $dst_name6;

        return $this;
    }

    /**
     * Gets dst_addr_type
     *
     * @return string|null
     */
    public function getDstAddrType()
    {
        return $this->container['dst_addr_type'];
    }

    /**
     * Sets dst_addr_type
     *
     * @param string|null $dst_addr_type Remote proxy ID type.    subnet:IPv4 subnet.    range:IPv4 range.    ip:IPv4 IP.    name:IPv4 firewall address or group name.    subnet6:IPv6 subnet.    range6:IPv6 range.    ip6:IPv6 IP.    name6:IPv6 firewall address or group name.
     *
     * @return self
     */
    public function setDstAddrType($dst_addr_type)
    {
        $allowedValues = $this->getDstAddrTypeAllowableValues();
        if (!is_null($dst_addr_type) && !in_array($dst_addr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dst_addr_type', must be one of '%s'",
                    $dst_addr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dst_addr_type'] = $dst_addr_type;

        return $this;
    }

    /**
     * Gets dst_start_ip
     *
     * @return string|null
     */
    public function getDstStartIp()
    {
        return $this->container['dst_start_ip'];
    }

    /**
     * Sets dst_start_ip
     *
     * @param string|null $dst_start_ip Remote proxy ID IPv4 start.
     *
     * @return self
     */
    public function setDstStartIp($dst_start_ip)
    {
        $this->container['dst_start_ip'] = $dst_start_ip;

        return $this;
    }

    /**
     * Gets dst_start_ip6
     *
     * @return string|null
     */
    public function getDstStartIp6()
    {
        return $this->container['dst_start_ip6'];
    }

    /**
     * Sets dst_start_ip6
     *
     * @param string|null $dst_start_ip6 Remote proxy ID IPv6 start.
     *
     * @return self
     */
    public function setDstStartIp6($dst_start_ip6)
    {
        $this->container['dst_start_ip6'] = $dst_start_ip6;

        return $this;
    }

    /**
     * Gets dst_end_ip
     *
     * @return string|null
     */
    public function getDstEndIp()
    {
        return $this->container['dst_end_ip'];
    }

    /**
     * Sets dst_end_ip
     *
     * @param string|null $dst_end_ip Remote proxy ID IPv4 end.
     *
     * @return self
     */
    public function setDstEndIp($dst_end_ip)
    {
        $this->container['dst_end_ip'] = $dst_end_ip;

        return $this;
    }

    /**
     * Gets dst_end_ip6
     *
     * @return string|null
     */
    public function getDstEndIp6()
    {
        return $this->container['dst_end_ip6'];
    }

    /**
     * Sets dst_end_ip6
     *
     * @param string|null $dst_end_ip6 Remote proxy ID IPv6 end.
     *
     * @return self
     */
    public function setDstEndIp6($dst_end_ip6)
    {
        $this->container['dst_end_ip6'] = $dst_end_ip6;

        return $this;
    }

    /**
     * Gets dst_subnet
     *
     * @return string|null
     */
    public function getDstSubnet()
    {
        return $this->container['dst_subnet'];
    }

    /**
     * Sets dst_subnet
     *
     * @param string|null $dst_subnet Remote proxy ID IPv4 subnet.
     *
     * @return self
     */
    public function setDstSubnet($dst_subnet)
    {
        $this->container['dst_subnet'] = $dst_subnet;

        return $this;
    }

    /**
     * Gets dst_subnet6
     *
     * @return string|null
     */
    public function getDstSubnet6()
    {
        return $this->container['dst_subnet6'];
    }

    /**
     * Sets dst_subnet6
     *
     * @param string|null $dst_subnet6 Remote proxy ID IPv6 subnet.
     *
     * @return self
     */
    public function setDstSubnet6($dst_subnet6)
    {
        $this->container['dst_subnet6'] = $dst_subnet6;

        return $this;
    }

    /**
     * Gets dst_port
     *
     * @return int|null
     */
    public function getDstPort()
    {
        return $this->container['dst_port'];
    }

    /**
     * Sets dst_port
     *
     * @param int|null $dst_port Quick mode destination port (1 - 65535 or 0 for all).
     *
     * @return self
     */
    public function setDstPort($dst_port)
    {

        if (!is_null($dst_port) && ($dst_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $dst_port when calling InlineObject483., must be smaller than or equal to 65535.');
        }
        if (!is_null($dst_port) && ($dst_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $dst_port when calling InlineObject483., must be bigger than or equal to 0.');
        }

        $this->container['dst_port'] = $dst_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


