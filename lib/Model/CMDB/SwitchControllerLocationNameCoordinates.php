<?php
/**
 * SwitchControllerLocationNameCoordinates
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FortiOS CMDB
 *
 * REST API for configuring FortiOS objects and settings
 *
 * The version of the OpenAPI document: v2
 * Contact: fosguiqateam@fortinet.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fortigate\FortiOS\Model\CMDB;

use \ArrayAccess;
use \Fortigate\FortiOS\ObjectSerializer;

/**
 * SwitchControllerLocationNameCoordinates Class Doc Comment
 *
 * @category Class
 * @package  Fortigate\FortiOS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SwitchControllerLocationNameCoordinates implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_switch_controller_location__name__coordinates';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'altitude' => 'string',
        'altitude_unit' => 'string',
        'datum' => 'string',
        'latitude' => 'string',
        'longitude' => 'string',
        'parent_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'altitude' => null,
        'altitude_unit' => null,
        'datum' => null,
        'latitude' => null,
        'longitude' => null,
        'parent_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'altitude' => 'altitude',
        'altitude_unit' => 'altitude-unit',
        'datum' => 'datum',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'parent_key' => 'parent-key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'altitude' => 'setAltitude',
        'altitude_unit' => 'setAltitudeUnit',
        'datum' => 'setDatum',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'parent_key' => 'setParentKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'altitude' => 'getAltitude',
        'altitude_unit' => 'getAltitudeUnit',
        'datum' => 'getDatum',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'parent_key' => 'getParentKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ALTITUDE_UNIT_M = 'm';
    const ALTITUDE_UNIT_F = 'f';
    const DATUM_WGS84 = 'WGS84';
    const DATUM_NAD83 = 'NAD83';
    const DATUM_NAD83_MLLW = 'NAD83/MLLW';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAltitudeUnitAllowableValues()
    {
        return [
            self::ALTITUDE_UNIT_M,
            self::ALTITUDE_UNIT_F,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDatumAllowableValues()
    {
        return [
            self::DATUM_WGS84,
            self::DATUM_NAD83,
            self::DATUM_NAD83_MLLW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['altitude'] = $data['altitude'] ?? null;
        $this->container['altitude_unit'] = $data['altitude_unit'] ?? null;
        $this->container['datum'] = $data['datum'] ?? null;
        $this->container['latitude'] = $data['latitude'] ?? null;
        $this->container['longitude'] = $data['longitude'] ?? null;
        $this->container['parent_key'] = $data['parent_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['altitude']) && (mb_strlen($this->container['altitude']) > 15)) {
            $invalidProperties[] = "invalid value for 'altitude', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getAltitudeUnitAllowableValues();
        if (!is_null($this->container['altitude_unit']) && !in_array($this->container['altitude_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'altitude_unit', must be one of '%s'",
                $this->container['altitude_unit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDatumAllowableValues();
        if (!is_null($this->container['datum']) && !in_array($this->container['datum'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'datum', must be one of '%s'",
                $this->container['datum'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['latitude']) && (mb_strlen($this->container['latitude']) > 15)) {
            $invalidProperties[] = "invalid value for 'latitude', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['longitude']) && (mb_strlen($this->container['longitude']) > 15)) {
            $invalidProperties[] = "invalid value for 'longitude', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['parent_key']) && (mb_strlen($this->container['parent_key']) > 63)) {
            $invalidProperties[] = "invalid value for 'parent_key', the character length must be smaller than or equal to 63.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets altitude
     *
     * @return string|null
     */
    public function getAltitude()
    {
        return $this->container['altitude'];
    }

    /**
     * Sets altitude
     *
     * @param string|null $altitude +/- Floating point no. eg. 117.47.
     *
     * @return self
     */
    public function setAltitude($altitude)
    {
        if (!is_null($altitude) && (mb_strlen($altitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for $altitude when calling SwitchControllerLocationNameCoordinates., must be smaller than or equal to 15.');
        }

        $this->container['altitude'] = $altitude;

        return $this;
    }

    /**
     * Gets altitude_unit
     *
     * @return string|null
     */
    public function getAltitudeUnit()
    {
        return $this->container['altitude_unit'];
    }

    /**
     * Sets altitude_unit
     *
     * @param string|null $altitude_unit m ( meters), f ( floors).    m:set altitude unit meters    f:set altitude unit floors
     *
     * @return self
     */
    public function setAltitudeUnit($altitude_unit)
    {
        $allowedValues = $this->getAltitudeUnitAllowableValues();
        if (!is_null($altitude_unit) && !in_array($altitude_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'altitude_unit', must be one of '%s'",
                    $altitude_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['altitude_unit'] = $altitude_unit;

        return $this;
    }

    /**
     * Gets datum
     *
     * @return string|null
     */
    public function getDatum()
    {
        return $this->container['datum'];
    }

    /**
     * Sets datum
     *
     * @param string|null $datum WGS84, NAD83, NAD83/MLLW.    WGS84:set coordinates datum WGS84    NAD83:set coordinates datum NAD83    NAD83/MLLW:set coordinates datum NAD83/MLLW
     *
     * @return self
     */
    public function setDatum($datum)
    {
        $allowedValues = $this->getDatumAllowableValues();
        if (!is_null($datum) && !in_array($datum, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'datum', must be one of '%s'",
                    $datum,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['datum'] = $datum;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string|null $latitude Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (!is_null($latitude) && (mb_strlen($latitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for $latitude when calling SwitchControllerLocationNameCoordinates., must be smaller than or equal to 15.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string|null $longitude Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (!is_null($longitude) && (mb_strlen($longitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for $longitude when calling SwitchControllerLocationNameCoordinates., must be smaller than or equal to 15.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets parent_key
     *
     * @return string|null
     */
    public function getParentKey()
    {
        return $this->container['parent_key'];
    }

    /**
     * Sets parent_key
     *
     * @param string|null $parent_key Parent key name.
     *
     * @return self
     */
    public function setParentKey($parent_key)
    {
        if (!is_null($parent_key) && (mb_strlen($parent_key) > 63)) {
            throw new \InvalidArgumentException('invalid length for $parent_key when calling SwitchControllerLocationNameCoordinates., must be smaller than or equal to 63.');
        }

        $this->container['parent_key'] = $parent_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


